[
  {
    "objectID": "a020d63a284914e986dfde919c3139ae",
    "u": "https://pap.tymyrddin.dev/",
    "t": "Threat landscape @home ",
    "c": "Threat landscape @home  The below writeups are based on reading the usual threat landscapes, picking up what is reuseful for defending people’s devices, researching and adding what seems to be missing for @home contexts, updating passive defence strategies, and linking in some device hardening how-tos and hands-on exercises. With that as foundation, we can develop the more unusual active defence strategies. Threats  Background Introduction Unusual suspects Marketplaces Red team takeover Malware-as-a-Service (MaaS) Ransomware-as-a-Service (RaaS) Infostealer-as-a-Service (IaaS) Distribution shifts More LOL Botnet activity increase No device can ever be called secure Mitre Att&Ck Introduction Drive-by compromise Supply chain compromise Phishing for information Application Layer Protocol: Mail Protocols Signs of a compromise @home Prevent|Detect|Respond  Device independent Introduction Phishing Drive-by download MFA bypass attacks Workstation specific Introduction Ransomware Mobile specific Introduction Mobile malware Smishing Vishing SIM swapping OTP bots App squatting Ransomware Madware Spyware Location tracking Stalkerware DIY  Hardening endpoints Introduction A first strategy Android hardening iOS hardening Hardening Windows Hardening GNU/Linux Hardening macOS Smarter mail servers Active defence Testlab Phishing analysis tools Mobile tools Reverse engineering tools TryHackMe rooms Introduction Basic phishing labs The Greenholt Phish Android malware analysis (Pithus and jadx) iOS forensics (SQLiteDB) Root-me challenges APK anti-debug",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "dd8def2a36ceece6f63c77660a3cb30e",
    "u": "https://pap.tymyrddin.dev/docs/mitre/drive-by",
    "t": "Drive-by compromise ",
    "c": "Drive-by compromise  Drive by downloads are categorised by MITRE as Mobile Technique ID T1456 Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user’s web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring an Application Access Token. Note: Linux powers the Internet with 74.2% of all web servers running on it. Monitor for newly constructed network connections to untrusted hosts that are used to send or receive data, and for other unusual network traffic that may indicate additional tools transferred to the system. Use network intrusion detection systems (with SSL/TLS inspection), to look for known malicious scripts (recon, heap spray, and browser identification scripts have been frequently reused), common script obfuscation, and exploit code.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "88b3eb6bc7c5be75267f135a64e720d3",
    "u": "https://pap.tymyrddin.dev/docs/mobile/smishing",
    "t": "Smishing ",
    "c": "Smishing  Smishing is similar to phishing , except that it comes in a text message. A smishing text will often contain a fraudulent link that downloads malware onto the device. Detection  The message offers quick money from winning prizes or collecting cash after entering information. Coupon code offerings are also popular. Financial institutions and government agencies will never send a text asking for credentials or a money transfer. A sender number with only a few digits probably came from an email address, a sign of spam. Mitigation  Avoid responding to a phone number that you do not recognise. Never send credit card numbers, ATM PINs, or banking information to someone via text messages. Or on the phone, over email, … If a text claims to be from a specific organisation or individual, contact that entity directly using known contact information, not the details provided in the text. Prevention  Many smartphones and carriers now provide SMS filtering options to identify and block or flag suspicious texts. Some security applications for mobile devices can help identify phishing links in text messages and prevent users from accessing malicious sites. Even if attackers obtain some credentials through smishing, using Multifactor Authentication is an additional protective layer. Do not store banking information on a mobile device. Have two phone numbers, one for bureacratic matters and one for personal other use. Telecoms offer numbers to report attacks. To protect other users, report it so that it can be investigated. Be aware of current smishing tactics and threats. Awareness is the first line of defense.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "11b05d14d8238f5f55fc40b0f747fe3b",
    "u": "https://pap.tymyrddin.dev/docs/independent/phishing",
    "t": "Phishing ",
    "c": "Phishing  Phishing attempts to trick people into clicking on fraudulent links in emails. The link typically takes the person to a seemingly legitimate site with a malware download. Detection  Hover the cursor over the From address to confirm the email address and then cross-check the website the official email address and domain used. Take note of the spelling of the sender address and email subject line, which may contain small details. Look for inconsistencies in grammar and small spelling mistakes in content. Check links before you leap. Hover the cursor over the link, and the destination address displays in a tiny bar down the bottom of a browser. On mobile phones, hold down on the link, and a pop-up window with the link will appear. An urgent warning tries to frighten people into reacting without considering the consequences. “Clickbait” titles on social media, advertising or publications are attention-grabbing. Generic greetings are not the common practices of legitimate companies. Poor quality logos that are unclear or smaller than usual. Mind that with AI-driven content tools broadly available at a low or no cost, adversaries are using such tools to make their phishing emails and text messages appear more realistic than ever before. Trust your gut, and if suspicious, do some analysis. Analysis  Copy and paste the entire email header and run an email header analysis tool . It is good to use multiple resources as each tool might reveal information that another tool may not. Extract urls from the text for further analysis. Check sender’s IP address and urls found in the text . If the email has an attachment: Obtain the attachment safely. If you don’t know how, ask someone who does. Get its hash and check the file’s reputation with the hash to see if it’s a known malicious document. Upload it to a sandbox for dynamic analysis. Prevention  Never open an attachment unless certain that the communication is from a genuine source. Monitor personal and private accounts and look at the settings. Multifactor verification is a feature that secures email and work accounts. Set up at least two email addresses: a private address and a public address. The private address should not be your first and last name, and be protected by never being used on publicly accessible online resources. Or masked. Proton vault and other services allow for this. Or use a graphics file. If it is discovered, change it. The public address as a temporary address and needs to be changed frequently. Consider using a number of public addresses. That way you can perhaps trace which services may be selling addresses to spammers or have been compromised and its data sold on the black market. Only open email accounts with providers that include spam filtering. Do not respond to any spam, ever. Think before you click ‘unsubscribe’. Web browsers include settings to restrict access to dangerous websites, and when one attempts to access a bad site, an alert message appears. Do not ignore these warnings and do not visit that website or access that file. Keep your browser updated, and install the NoScript extension. Other mitigations  Email security (SPF, DKIM, DMARC) SPAM filters (flags or blocks incoming emails based on reputation) Email labels (alert users that an incoming email is from an outside source) Email address/domain/URL Blocking (based on reputation or explicit denylist, preferably whitelisting) Attachment blocking (based on the extension of the attachment) Attachment sandboxing (detonating email attachments in a sandbox environment to detect malicious activity) Security awareness training (internal phishing campaigns)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "39bdbee58d24a3ceaa02370bab06ef38",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/iaas",
    "t": "Infostealer-as-a-Service (IaaS) ",
    "c": "Infostealer-as-a-Service (IaaS)  Infostealer attacks are typically financially motivated. Infostealers are a type of MaaS that extracts data from infected devices. An adversary buys an InfoStealer from a marketplace , spreads the malware onto as many machines as possible, collects and organises the information, and then sells the information on the black market (dark web or Telegram). How infostealers are distributed  The InfoStealer is embedded into a document (for example, in a Microsoft Word document or a Microsoft Excel spreadsheet). Then the doc is sent out as an attachment in cleverly worded phishing , enticing people to open the file. Via a convincing site with a lookalike domain, the logo of a trusted brand, and a design that tricks unsuspecting users into voluntarily downloading the InfoStealer, thinking that it is a legitimate app. By squatting an app , and then making that corrupted application available for download from app stores. Then putting a social engineering cherry on top: Paying for advertising on Google Ads and Facebook Ads to trick more people into downloading the malware from a fake site or App store. Using paid ads to distribute malware works wonders because it leverages the trust that people have in both the advertising platform and the brand that they are impersonating on a fake site or the app in the store. If a user sees an ad after making a query in a search engine, they implicitly assume that it is safe to click because they trust the search engine. What info it tries to steal  Credentials used for online banking, email accounts, social media sites, and FTP services. Credit card details. Emails. Hardware information. Operating system information. Cryptocurrency wallets. Screenshots. Specific file types (commonly images, documents, spreadsheets, etc.) The stolen data is analysed and any valuable information is collated and organised into a database, which can then be sold on the black market . Who is targeted  Healthcare and financial services are the most targeted sectors with infostealers. How to defend  The increased sophistication and complexity is making it more difficult for defenders to detect and prevent infostealers. Resources  Your Guide to Top Infostealers in 2022",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "60d7cd19e0db8eb2125c92987c1f47c6",
    "u": "https://android.tymyrddin.dev/",
    "t": "Hardening Android ",
    "c": "Hardening Android  These mitigations to common mobile threats are kept as simple as possible, with tools found in most Androids and online. Other things are harder to cover. For example, each manufacturer has its own privacy settings somewhere, and there is a growing number of alternative apps that do not report everything you do to Google. Accounts and authentication Introduction Changing the SIM PIN Setting a password or PIN screen lock and a timeout Keeping notifications off the lock screen Services and applications Introduction Application stores Researching before installing apps Unwanted apps list Removing unwanted apps Browsers that protect your privacy Changing default apps Using more secure messaging services Using more secure email services Using SSH tunnels Using VPN services Using Tor proxies Changing MAC address Editing hosts file Data Introduction Encrypting SD cards Privacy Introduction Turning off diagnostics Putting the kibosh on Autofill with Google Shutting down location history Revoking the prying big eyed activity controls Terminating ad personalisation Privacy focused Android alternatives Malware Introduction Threat awareness Installing an anti malware app Finding the culprit and removing it Ransomware Operations security Introduction Threat awareness Not getting juice-jacked Not auto-joining Wi-Fi networks Using email more securely Browsing more safely Measuring Internet Censorship ‘;–have i been pwned? Guards! Guards! Introduction Firewall No Root NetGuard",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3cf432e72b78dad520ceeed181266fe2",
    "u": "https://android.tymyrddin.dev/docs/services/remove-apps",
    "t": "Removing unwanted apps ",
    "c": "Removing unwanted apps  Every app that exists on your device is a potential privacy and security problem. Google automatically grants every app permission to use the Internet, including unwanted apps . This means that every single app on your device can: Send any data it can get its hands on to points unknown somewhere on the Internet Receive all kinds of things from the Internet that could affect your device Removing third party apps  Go to Settings -> Apps . You should see a list of the apps on your device. Tap an app you do not absolutely need to have on your device. At the bottom, tap Uninstall . Then OK to uninstall the app. Repeat for each app you can do without.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "965d6d47f5833c715775453bdc740bc3",
    "u": "https://android.tymyrddin.dev/docs/privacy/autofill-google",
    "t": "Putting the kibosh on Autofill with Google ",
    "c": "Putting the kibosh on Autofill with Google  If you save things like credit card data on your Android device, that data ends up stored in your main Google account. You see what data you have stored in your Google account, and delete it if you wish. On a new phone, do not turn it on. If you are already using it: Go to the Privacy settings, and tap Autofill with Google . (On some phones this is under Privacy -> Advanced settings) Tap each of the options to see what data Google has stored under it. You will need to look around a bit in each area to find out how to edit or delete the data that Google has. Use a better way to keep all the personal information you want stored securely online where you can easily access it but no one else (including Google) has access to it.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "81a0d91931deb00d2fe8bb54f1104931",
    "u": "https://android.tymyrddin.dev/docs/privacy/alternatives",
    "t": "Privacy focused Android alternatives ",
    "c": "Privacy focused Android alternatives  Android stock versions  GrapheneOS offers a higher level of privacy and security. (Pixel phones) CalyxOS is hardened for more privacy and security. (Pixel phones, Xiaomi Mi A2) Replicant , an Android distribution with an emphasis on freedom, privacy, and security. LineageOS for phones and tablets. /e/ building privacy-enabled smartphone operating systems. Based on Linux  Ubuntu Touch , a mobile version of the Ubuntu operating system. Plasma Mobile , Linux-based. Sailfish OS , Linux-based mobile OS. Phones  Librem 5 , a phone that focuses on security by design and privacy protection by default. Outfitted with hardware kill switches and specially designed hardware, and (currently, 2022), a lead time for new orders of 52 weeks.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d66282be476aa073d4a4e4e2b86e6b1e",
    "u": "https://android.tymyrddin.dev/docs/services/vpn",
    "t": "Using VPN services ",
    "c": "Using VPN services  Internet providers are collecting your browsing data and handing this over to third parties (US, UK, Australia, and much of Europe). Public Wi-Fi remains a serious threat with adversaries targeting unsuspecting users. Many streaming services and websites restrict content to certain geographic locations. A VPN allows you to bypass such restrictions (Not always. Some such websites keep blacklists of VPN servers and will still block your traffic). A VPN will encrypt the connection and make the traffic unreadable. A VPN will encrypt the connection and make the traffic unreadable. VPNs not logging traffic, DNS requests, timestamps, bandwidth, IP address: ProtonVPN , Switzerland NordVPN , Panama Mullvad , Sweden IVPN , Gibraltar Surfshark VPN , Netherlands",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8df0e67896fcf432ca754ba3de725e5b",
    "u": "https://android.tymyrddin.dev/docs/services/research",
    "t": "Researching before installing apps ",
    "c": "Researching before installing apps  Search for the app name on Google Play Store or Fdroid store. If there are multiple apps with similar names and icons, most of them are probably fake ones. Tap the developer name, and it will show you all the apps published by the developer alongside user ratings. Genuine developers usually write informative descriptions alongside high-quality screenshots of their app’s interface. Look at the number of downloads. Take a close look at the permissions the app is asking for. Scroll down the page, past the reviews to the Additional Information section. Under Permissions , tap View Details . Google Play will list all the permissions requested by the app. If they are unrelated to the app’s function or what it claims to do, it could be fake or malicious. Unwanted in any case. Search the internet for more information on the app. Scan with an online virusscanner that accepts url’s before installing. If you decide to install an untrusted app, block internet access for the app. If it needs it, monitor its behaviour. To report an app on Google Play Store, go to the app page, and click the three dots in the top-right corner and click Flag as inappropriate . For fake apps, you can choose copycat or impersonation as reason, and submit. For problems related to the contents of the F-Droid repository (the apps in the app store), such as disappeared, outdated, or fake applications, please use this issue tracker .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e4d04a279ad4c55b226b8064c142c816",
    "u": "https://android.tymyrddin.dev/docs/opsec/autojoin",
    "t": "Not auto-joining Wi-Fi networks ",
    "c": "Not auto-joining Wi-Fi networks  Auto join is a feature that allows your phone to automatically join any Wi-Fi network it already has the credentials for, or open Wi-Fi networks, without having to ask you to do anything. This can be a time saver at home and at work. But, it carries two major issues: It can cause your phone to randomly leave a stronger Wi-Fi network for a weaker Wi-Fi network that has come into range. Both Android and iOS developers have tried to stop their operating systems from doing this, but have only had limited success. When your phone switches over to a weaker Wi-Fi, it terminates your first Internet connection, interrupting your Internet usage. Once on the weaker network, performance goes down. When you automatically join open public Wi-Fi networks you put your data and privacy at risk. You do not know that the network is secure. You could be joining a clever network clone (rogue wireless access point) that is really a MitM attack trying to steal your passwords and usernames to sensitive accounts. On an Android device, often carriers install their own Wi-Fi monitoring apps. Each app works differently. Try: Go to Settings -> Wi-Fi. You will see a list of Wi-Fi network profiles. Click the ones you want to (not) auto join with and toggle the switch to auto join. Alternatively, you can try and navigate to your device’s Connections Optimizer, if it has one: Go to Settings -> More -> Mobile Networks. In the Connections Optimizer you can disable/enable auto joining.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "048cc17539aea8a53cb927198dd5b1eb",
    "u": "https://android.tymyrddin.dev/docs/privacy/diagnostics",
    "t": "Turning off diagnostics ",
    "c": "Turning off diagnostics  The privacy settings contain an option to send diagnostic data to the phone manufacturer. Tapping this option pops up a message explaining why you should let your device send unspecified types and amounts of data to the phone manufacturer for, “improving our products and services.” Sending this data to the manufacturer is optional, and can be considered a voluntary privacy leak. A default opt-in. To opt-out: Go to the Privacy settings, and look for a Send diagnostic data option. Make sure it is set to Off .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "807b216b739910e453d67507f3deacd6",
    "u": "https://android.tymyrddin.dev/docs/services/app-stores",
    "t": "Application stores ",
    "c": "Application stores  I do not like Google and its collection of all our data , but apps that do not come from the Google Play Store or my device manufacturer’s app store are almost always a bad idea. Google and the device manufacturers try to keep their stores clean. They do what they can, and the vetting process is improved continuously, but Google Play (and other app stores) can feature unwanted apps though. F-Droid is an alternative to the Google Play that is a trusted source for Android apps, many of which do not send any data to Google or Facebook. Apparently, it is the most scrutinised alternative Play stores. Stay aware, awake and alert and research each app thorougly before installing .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0813f69fbaa1a8a347f1d4bbfc0603eb",
    "u": "https://android.tymyrddin.dev/docs/services/messaging",
    "t": "Using more secure messaging services ",
    "c": "Using more secure messaging services  In most countries, it is safe to assume that telecoms are recording all SMS message traffic. Install a secure messanger app and make it the default SMS messenger. Signal is not as strong on privacy as it is on security. It collects some metadata, and relies on central servers to manage message flow and hold the metadata it does collect. Session is a fork of Signal. No geolocation data, device data, or metadata is collected. The Session network is decentralized, with no single point of failure, and no main server for bad guys to hack. Session moves messages using an onion routing system. Note : Signal no longer accepts SMS messages.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "386cf0209f8540e4b067cb71fc7e2df0",
    "u": "https://android.tymyrddin.dev/docs/malware/readme",
    "t": "Introduction ",
    "c": "Introduction  Phones contain more sensitive information than PC’s and Workstations. It usually contains pictures, credit cards, private messages, and other valuable data. Mobile malware is a generic term for malicious software designed to target mobile devices (smartphones, tablets, and iOT devices) with the goal of gaining access to private data. Apparently it is still not as pervasive as malware that attacks traditional workstations, and that may have to do with the fact that SOC teams and SIEM stacks have focused mostly on detecting workstation and corporate network threats (before Covid and the BYOD wave), and that it was only a matter of time before hackers switched tactics. It is definitely a recognised growing threat and needs to be addressed. Threat awareness Installing an anti malware app Finding the culprit and removing it Ransomware",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7a824f2ecf702ddc515e45e32674862c",
    "u": "https://android.tymyrddin.dev/docs/services/browsers",
    "t": "Browsers that protect your privacy ",
    "c": "Browsers that protect your privacy  DuckDuckGo Private Browser you get an everyday private Internet browser that offers seamless protection while you search and browse, and access to tracking protection for emails you receive and apps you use. Many of these protections are not offered in most popular web browsers by default. Firefox Fast & Private Browser - Data privacy and security practices may vary based on your use, region and age The developer provided this information and may update it over time. Brave is fast, secure, and privacy-focused by default. It has a built-in ad blocker and browser fingerprinting protection, while also giving you access to numerous add-ons and extensions. Ungoogled Chromium browser is an open source project to provide a Chromium browser, without the Google privacy issues. Bromite is a Chromium-based browser for Android only (no desktop support). It comes with some great features by default, including ad blocking and various privacy enhancements. Tor browser enables you to use Tor without needing to install the Tor proxy . If the browser you choose is less secure and privacy-friendly, lock down the browser and the software it can invoke.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "69a7a03b81a571d0f2c640bbeaa5949f",
    "u": "https://android.tymyrddin.dev/docs/services/email-services",
    "t": "Using more secure email services ",
    "c": "Using more secure email services  Mailfence , Belgium, provides a full suite of services, Messaging, s, Calendars, Groups, and Document storage. It can easily replace the G suite. It is a secure email suite that offers end-to-end encryption (through PGP support) and works with different email clients. There is some logging of IP address and some other data, and the code is not open source. Tutanota , Germany, is a small but serious player among secure email providers. It uses a hybrid encryption system that avoids some drawbacks of PGP, and is protected by the GDPR and other pro-privacy EU regulations. There is no support for PGP, IMAP, POP, or SMTP, and you cannot import existing emails into your encrypted Tutanota inbox. ProtonMail , Switzerland, uses PGP encryption standards for email and stores all messages and attachments encrypted at rest on Swiss servers. ProtonMail has a unique feature for “self-destructing messages” and they have also added address verification and full PGP support. Articles  Reddit: Court forces mail provider Tutanota to perform a surveillance function Twitter: ProtonMail logging one of its users and providing IP address logs to French authorities Reading that carefully, if the message had already been encrypted and the IP address had been that of a VPN , these cases would not exist.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2cd25fe07df5af7ff7b89f0d4e76a91a",
    "u": "https://android.tymyrddin.dev/docs/data/encryption",
    "t": "Encrypting SD cards ",
    "c": "Encrypting SD cards  SD card encryption is a default Android security feature. Enabling SD encryption is a very straightforward process, and many phones even have it enabled right out of the box. In order to complete the encryption process, your phone must be unrooted, plugged in, and have at least 80 percent battery remaining. If the process is interrupted for any reason, you’re likely to lose access to all the data on your device. Thus, it is advisable to run a full backup first, just to be safe. Go to Settings -> Biometrics and Security -> Encrypt SD card . Tap Encrypt SD card .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "96401bd4c82f9ccb8ad759a01481fcd6",
    "u": "https://android.tymyrddin.dev/docs/services/unwanted-apps",
    "t": "Unwanted apps list ",
    "c": "Unwanted apps list  Potentially Unwanted Programs (PUPs) or Potentially Unwanted Applications (PUAs) are programs/applications in the form of toolbars, adware, plugins or other downloads that sneak onto your computer. PUPs are not classified as malware, because they are not always harmful (but pretty much always annoying) and make the companies that bundle them a lot of money, hence the name “potentially” unwanted. A few years back Emsisoft found that most free antivirus suites were bundled with PUPs. Here were the culprits: Comodo AV Free, Avast Free, Panda AV Free, AdAware Free, Avira Free, and ZoneAlarm Free Antivirus + Firewall, and AVG Free. If you are not paying for the service, you are probably the product. Many browsers today are actually data collection tools for advertising companies. This is the case for Google Chrome, the largest and most popular browser. By collecting data through your browser, these companies can make money through their advertising partners with targeted ads. We see this same privacy-abusing business model with search engines, email services, and even free mobile apps. Some PUPs will track your search history or browser behaviour and sell the data to third parties, others compromise your security, affect system performance, and/or hinder productivity. Keep unwanted applications off of your computer by research before installing an app , carefully reading installation options during the setup process and only installing the software and features you need. Definitely unwanted apps  Everything typed on the Android smartphone goes through the keyboard. This means the keyboard has access to those passwords, private emails, documents, and SMS messages typed on your phone. It can even see your credit card information. The perfect Trojan Horse. The Joker family is capable of executing arbitrary code and surreptitiously subscribing victims to paid services. It is a gift that keeps giving. Remove Poco Launcher, 4K Pro Camera and Heart Emoji Stickers if they are in your app list. YouToon – AI Cartoon Effect and Pista – Cartoon Photo Effect (same code base) steal data that attackers use to hack into Facebook accounts. … Articles  Has the antivirus industry gone mad? AVG can sell your browsing and search history to advertisers",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "429c223392bcb7dd2cb3d79e5b4d5cbf",
    "u": "https://android.tymyrddin.dev/docs/opsec/juice-jack",
    "t": "Not getting juice-jacked ",
    "c": "Not getting juice-jacked  A data blocker is a simple USB dongle that sits between the USB socket and your USB charging cable. it only connects the power lanes of the USB and will block the data pins. It is cheap, low tech, yet very effective and recommended when needing to charge your phone in public places.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e33203ac14b045adb27788a505a4724f",
    "u": "https://android.tymyrddin.dev/docs/services/tor-proxy",
    "t": "Using Tor proxies ",
    "c": "Using Tor proxies  Orbot is a free tor proxy app. It encrypts your Internet traffic and then hides it by bouncing through a series of computers around the world. Tor is free software and an open network that helps you defend against a form of network surveillance that threatens personal freedom and privacy, private activities and relationships, and state security known as traffic analysis. If you wish to get it from F-droid and not the Play Google store, you will need to enable the Guardian repository in the F-Droid settings to have the Orbot app (and other apps like Tor Browser) show up. Notes  If a government makes their own national internet, or routes traffic through specific servers to use deep packet inspection (DPI), running Tor may not provide security if the government is able to see the entire path. Sometimes the Tor network is censored, and clients can’t connect to it. An increasing number of censoring countries are using Deep Packet Inspection (DPI) to classify Internet traffic flows by protocol. While Tor uses bridge relays to get around a censor that blocks by IP address, the censor can use DPI to recognize and filter Tor traffic flows even when they connect to unexpected IP addresses. With pluggable transports, censorship against Tor can be bypassed. Not only that. If an attacker can see your traffic, and can see the website you’re visiting, even with a path outside the adversary’s control - they will still be able to correlate the traffic and learn you are visiting the website. If the same connection (the same set of relays) were to be used for a longer period of time a Tor connection could be vulnerable to statistical analysis, which is why the client software changes the entry node every ten minutes.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b11f347c3827c200b8566c6ae7ef08ad",
    "u": "https://android.tymyrddin.dev/docs/opsec/browsing",
    "t": "Browsing more safely ",
    "c": "Browsing more safely  Keyloggers and other malware can be installed via a web page script which exploits a browser vulnerability. The program will automatically be launched when a user visits an infected site. Compromising a browser is relatively easy, and it is cross-platform, hence an often chosen target. Plus that browsers (for performance reasons) prefetch exposing users to more security risks by downloading more pages, or from un-requested sites (additionally compounded as drive-by downloads become more advanced and diverse). BeEF & other browser exploits, when not using browser vulnerabilities, rely on javascript. Choose a secure browser that protects your privacy Change your default browser",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ef88b271b70a1b5dd2b4dd4f23581625",
    "u": "https://android.tymyrddin.dev/docs/authentication/screen-lock",
    "t": "Setting a password or PIN screen lock and a timeout ",
    "c": "Setting a password or PIN screen lock and a timeout  Without screen lock, anyone getting their hands on your device will have complete access to everything on it, and you can not enable on-device encryption . Touch or retinal scans to unlock your phone without needing to enter a password (passcode, PIN) is nice, but in some countries biometric authentication methods are not protected the way passwords are. In these countries, law enforcement can not compel someone to enter a password to unlock a device without a search warrant, but they can for access by touch or retinal scan. In addition, for all people in all countries, raw biometrics data in the form of fingerprints, face or retinal scans or voice recognition, for example, is analog data until a biometric system converts it to digital data that a computer can then process. This data must be stored somewhere. The convenience of biometric authentication is only worthwhile as long as the data being stored remains secure and untapped. For single-user devices, like an Android, this data can be stored on the local device. And if data is stored somewhere, it could potentially get stolen. If the worst happens and your PIN or password get stolen, you can easily change them. What are you going to do if your fingerprint or Iris scan get stolen? Depending on your Android: Settings -> Privacy -> Lock Screen -> Screen Lock Type -> Select one of the screen lock types (OR) Settings -> Security -> Screen lock (OR) Settings -> Lock screen And somewhere else in your settings (maybe Display), set a screen timeout.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d0c8880d9a5e5568d6ec2b2a852c8e4a",
    "u": "https://android.tymyrddin.dev/docs/opsec/email-use",
    "t": "Using email more securely ",
    "c": "Using email more securely  Do not use public computers to access email with sensitive information. If you are not in a safe neighbourhood, use a VPN or Tor anonymity network to encrypt traffic from the user machine to a safer network. Use privacy-focused email services , and have at least two email addresses, one for private use, and one for public use, (and do not use your own name or other personal information) GPG, PGP, SMEmail, can be used for end-to-end message encryption.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "331fb687fa06ee7315a1c6e684240929",
    "u": "https://android.tymyrddin.dev/docs/privacy/location",
    "t": "Shutting down location history ",
    "c": "Shutting down location history  Even if you are not using any services that track your location, Android does. It uploads that information to Google to store it in your Google account. The data is used to send you personalised maps and recommendations, and targeted ads. On a new phone, don’t turn it on. If you are already using it, you can stop Google from tracking you by pausing it. This will not keep apps from using location information from your device, but it will stop Google from filling up their databases with a detailed profile of your movements. Go to Privacy settings -> Google location history . This takes you to the Location History page of your Google account. Pause Location History .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "bf76932db29bc882ee14cbb098e0d896",
    "u": "https://android.tymyrddin.dev/docs/privacy/personalised-ads",
    "t": "Terminating ad personalisation ",
    "c": "Terminating ad personalisation  Google uses data it collects about you to offer personalised ads. Part of this is assigning you a personal advertising ID that is used to accumulate data about you. This can be turned off. Apps can be told not to use that ID to build profiles or to show you personalised ads. Go to Privacy settings -> Ads . In the screen that appears, Opt out of Ads Personalization by turning On the slider. If you leave the slider in the Off position you are telling Google to continue to apply Ads personalisation. Note : If you disable Ads personalisation you will still be forced to see ads, but they will not be customised for maximum impact on you. And if you clear your cache, it will automatically turn Ads Personalization back ON.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "bdc67db9a0388b29da105b99904b3375",
    "u": "https://android.tymyrddin.dev/docs/guards/firewall-no-root",
    "t": "Firewall No Root ",
    "c": "Firewall No Root  Firewall No Root uses artificial intelligence to block spy servers automatically on detection. When getting started with it, you get a choice to select a default startup option: Silent mode allows all connections, and you can block individual connections as required (the recommended setting for beginners). Warn mode is for checking which apps are silently connecting to an unsecured server. After selecting warn mode, the firewall will block all apps and services from connecting to the internet. You have to manually allow apps from the quick settings panel or in the app.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1e42db14d4d44cd1dc66c58bfb584ed9",
    "u": "https://android.tymyrddin.dev/docs/services/edit-hosts-file",
    "t": "Editing hosts file ",
    "c": "Editing hosts file  The hosts file is a system file on a device that lets you map specific domain names to an IP address. If you want to add new entries to the hosts file, you’ll need the IP address of the server that you want to map a hostname to. XXX.XXX.XXX.XXX some.domain.name The hosts file lets you override DNS entries for any domain name. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. Blocking is achieved by setting the IP address of the ad networks to a loopback address like 127.0.0.1 which will not return anything. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. If your device is infected with malware, then your hosts file may be compromised to included unknown entries for known domain names. That is NOT the IP address of your bank! This type of DNS attack is known as DNS pharming, and checking your hosts file can uncover potential infection. For Android there is a way using Android Debug Bridge (adb) : Open a terminal window. Pull the hosts file out of the phone to your PC. Edit it. disable READ_ONLY of SYSTEM $ su # mount -o rw,remount /system Push the file back. Put SYSTEM back to READ_ONLY: # mount -o ro,remount /system",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "957f877b6cc72ba6e8779b113379d051",
    "u": "https://android.tymyrddin.dev/docs/services/change-mac",
    "t": "Changing MAC address ",
    "c": "Changing MAC address  A MAC address identifies the device connected to a network and allows the network to track, restrict or allow access based on it. Routers identify and assign static IP addresses based on the MAC addresses of devices. Before you try to change the MAC address, you need to know the value that you want to use. Set the 2’s place bit (the “locally administered” bit) in the first byte, to differentiate it from a guaranteed globally unique MAC address. Usually the first three bytes an unicast MAC address is an “Organizationally Unique Identifier” (OUI) that the IEEE assigned to the manufacturer of your Ethernet device. Manufacturers are required to make sure they keep the last 3 bytes unique. Avoiding all of that knowledge, the MAC address generator tool can generate a valid address for you. Go to Settings ->  Phone -> Status . Open a terminal app To get the name of the interface: ip link show The rootless option is only temporary until you restart your phone: ip link set [name of interface] 00:0a:95:9d:68:16 For a persistent MAC address change use busybox or adb with su .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "385559ad86f4f8bdc8b18caa7f1a089e",
    "u": "https://android.tymyrddin.dev/docs/malware/ransomware",
    "t": "Ransomware ",
    "c": "Ransomware  Removing  Boot into the mobile phone’s Safe Mode and uninstalling the suspected application: Hold down the physical Power button until you see the Power off prompt on your screen. Long-press the Power off button on your screen until the Reboot to safe mode dialog box appears. Press OK . The device reboots. The words Safe Mode appear in the lower left corner of your screen. Go to Settings -> Apps . Uninstall the ransomware and related application. If you can not get rid of the ransomware by booting into Safe Mode , you can try to reset your Android device to factory settings . A factory reset erases all data on the device, so make sure you make a back-up first. Prevention  Download applications only from the app stores that vet. Keep the device updated. Android developers regularly release new patches and updates. Make sure to install the offered updates as soon as you receive notifications on your device. Back up your mobile data on your computer hard drive, one a portable device, or in the cloud. Install anti-malware applications Disallow non-official app installations: Go to Settings -> Security . Uncheck the Unknown sources box.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0ff01bbb4239e0b2821e80228bb18df7",
    "u": "https://android.tymyrddin.dev/docs/opsec/ooni",
    "t": "Measuring Internet Censorship ",
    "c": "Measuring Internet Censorship  The OONI Probe is a free app to measure Internet Censorship. With this app, you can examine the blocking of websites and instant messaging apps, measure your network’s speed and performance, and check whether systems that could be responsible for censorship and surveillance are in your network. OONI Probe is developed by the Open Observatory of Network Interference (OONI), a free software project (under The Tor Project) that aims to uncover internet censorship around the world.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e2f1d06c57ec6e8351317dbd85d4907e",
    "u": "https://android.tymyrddin.dev/docs/authentication/notifications",
    "t": "Keeping notifications off the lock screen ",
    "c": "Keeping notifications off the lock screen  Android displays app notifications on the lock screen. Anyone who happens to be looking (shoulder surfing) can also see those notifications, even though your device is locked. Go to Settings -> Lock screen. Scroll down the Lock screen to Notifications and set the slider to Off. There are a lot of options. Just use the slider at the top of the screen to turn it all Off. Check that lock screen notifications are still turned off any time you make changes to the lock screen.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "86fb8ed783fc431b9be4844653929db7",
    "u": "https://android.tymyrddin.dev/docs/malware/clean-machine",
    "t": "Finding the culprit and removing it ",
    "c": "Finding the culprit and removing it  If you think it will turn into a “legal issue”, DO NOT shut the device down or try to remove the malware, and call in a first responder instead. Detecting malware  If the symptoms appeared immediately after installing an app, that app may be the guilty party. If you get ads in the notification bar, then long tap those and then touch on All Categories to learn which app is displaying the ads. Go to Settings -> Battery and monitor usage . If you recently charged, Battery usage data is not available. Wait a few hours for the data to become available. Go to Settings -> Network & Internet -> Data usage -> Mobile data usage / Wi-Fi data usage . Removing malware  Go to Settings and tap on Apps (& Notifications) . Locate the app. Tap on it, and choose Uninstall . If the Uninstall option is greyed out or not there at all, then it means that the app has gained privileges. Removing admin rights  Go to Settings -> Security & location -> Device admin apps . Tap on the checkbox and then tap on Deactivate this device admin app . Go back to the Apps & notifications to remove it. Fail  If removing admin rights did not work, do a Factory reset If a factory reset does not work, it is probably a very persistent malware ( like xHelper ) You may wish to analyse it further and/or get help. Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3a4c2350a590313cbcda3691927649bd",
    "u": "https://android.tymyrddin.dev/docs/privacy/activity-controls",
    "t": "Revoking the prying big eyed activity controls ",
    "c": "Revoking the prying big eyed activity controls  The data saved in your account helps give you more personalized experiences across all Google services. Chills up and down my spine. In other words, Google tracks everything you do, and uses that data to predict what you will do next, influence what you think and do, and serve you targeted ads that are designed to convince you to buy stuff. On a new phone do not turn it on. If you already have, and want out: Go to Privacy settings -> Activity Controls . You will see a screen full of the kinds of things that Google tracks, along with a pitch on why them tracking this information is good for you. Turn off Web & App Activity . Google will give you a long message trying to convince you to let them keep tracking you. This does not put an end to Google collecting this data on you. It only pauses the collection. Nor will this delete the data Google has already collected on you. To delete the data Google has already collected in the Web & App Activity category, go to myactivity.google.com. Repeat for YouTube History .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "86cbd00b093fec8ea8c067a064b3205a",
    "u": "https://android.tymyrddin.dev/docs/guards/netguard",
    "t": "NetGuard ",
    "c": "NetGuard  NetGuard offers advanced features such as network statistics, custom notifications, and rules backup. NetGuard uses a local VPN connection to filter your internet traffic and allows you to block any app from accessing the internet via Wi-Fi or data. You can manage and create your own firewall rules for system apps. You can not connect to more than one VPN because of Android limitations, so you can not use this app with any other VPN app .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "94c435d458416ed1e09b7676051e9853",
    "u": "https://android.tymyrddin.dev/docs/services/ssh",
    "t": "Using SSH tunnels ",
    "c": "Using SSH tunnels  Secure Shell (SSH) can be used to securely acquire and use a remote terminal session, tunnel traffic, transfer files, mount remote file systems, and more. SSH uses strong encryption, and you can set your SSH client to act as a Socks proxy. The traffic enters the Socks proxy running on your local system and the SSH client forwards it through the SSH connection – this is known as SSH tunneling. Once you have set it up, you can configure applications on your computer – such as your web browser – to use the Socks proxy. Each application must be configured to use the SSH tunnel’s proxy. This setup works similar to browsing the web over a Virtual Private Network (VPN) . From a web server perspective, traffic appears to be coming from the SSH server. The traffic between source and the SSH server is encrypted, so you can browse over an encrypted connection as you could with a VPN. Port forwarding  Port forwarding or port mapping is a combined technique of: Translating the address and/or port number of a packet to a new destination. Possibly accepting such packet(s) in a packet filter (firewall). Forwarding the packet according to the routing table. SSH tunnels can be created in several ways using different kinds of port forwarding mechanisms. On Android you can use ConnectBot ( Google Play Store ConnectBot , F-Droid ConnectBot ), a traditional-style SSH client, providing command-line access to computers running SSH server software. A GUI interface is available for setting up connections. ConnectBot can run pretty much all SSH commands, and fully supports persistent connections, key management, and port forward management.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5a764df496b897027cdb1a025ab2f167",
    "u": "https://android.tymyrddin.dev/docs/authentication/sim-pin",
    "t": "Changing the SIM PIN ",
    "c": "Changing the SIM PIN  The SIM card PIN code is meant to protect your data against unauthorised access. Each SIM you insert into a smartphone has a PIN code that you need to enter in order to activate the card. Some mobile providers use standard PIN codes, like 0000 or 1234, for all their SIM cards, while others generate unique PIN codes for each SIM. Whatever the case, it is safer to change the default SIM PIN code to one of your choosing. If you do not and the phone gets stolen, thieves can change the SIM and put it in another unlocked phone. And with the SIM in another phone they can request an SMS code for resetting the password to all your accounts, including iCloud, Facebook, Instagram, Twitter, etc. Even with two-factor authentication enabled, they can use this method to get the code and access your accounts.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "167babce2ef701ab0bef7fbde7d54dd9",
    "u": "https://android.tymyrddin.dev/docs/services/default-apps",
    "t": "Changing default apps ",
    "c": "Changing default apps  Pick the default app you wish to change, for example, for your bowser you can pick one of these , or for swapping Google apps, Simple Mobile Tools Changing apps on newer androids  Install your replacement app. You will be asked if you want to make it your default. Yes. In the next window, tap to select it and tap to make default. On older androids  Install your replacement app. Go to Settings -> Apps . On the Apps screen, tap the three-dot menu on the top right. In the menu that appears, tap Default Apps . A handful of default apps appears. Tap the default app you wish to replace. Android will display a list of the apps you have installed on your device. Tap the app you want to use as the default.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6519344803d7260be29118cf31881e39",
    "u": "https://android.tymyrddin.dev/docs/malware/scanner",
    "t": "Installing an anti malware app ",
    "c": "Installing an anti malware app  Google Play Protect is a feature that automatically scans your apps and your device for problems. It will warn you if it finds anything. Play Protect is not enough. It is a Google product and will protect you against any threats, except Google. Google Play Protect is unlikely to protect from malicious apps that did not come from its store. Clean antivirus vendors which are not on the unwanted apps list : Emsisoft Bitdefender Free Perhaps  LibreAV is an attempt to detect malwares on android devices by utilizing machine learning approach. Hypatia (available on FDroid) is powered by ClamAV style signature databases. AFAIK, the app has NOT been audited, and antivirus apps have the potential to be very bad in terms of privacy. The name “us.spotco.malwarescanner” contains “spot”. Will keep an eye out. Do not install yet.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6c1a1392292403f9b5d78a753471ecb4",
    "u": "https://android.tymyrddin.dev/docs/opsec/hibp",
    "t": "‘;–have i been pwned? ",
    "c": "‘;–have i been pwned?  ‘;–have i been pwned? (HIBP) is a database of several billion email addresses (and, separately, passwords) that have appeared in a publicly known past data breach. Firefox Monitor is an online service developed by Mozilla It informs users if their email address and passwords used have been leaked in data breaches, using the database provided by Have I Been Pwned? Check if you have an account that has been compromised in a data breach, and if so, change your password and change it in any other place where you’ve used that password. Better yet, never use a password twice, and consider using a password manager.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d6281858f4080220374b654a69c42a48",
    "u": "https://pap.tymyrddin.dev/docs/thm/greenholt",
    "t": "The Greenholt Phish ",
    "c": "THM: The Greenholt Phish The Greenholt Phish  A Sales Executive at Greenholt PLC received an email that he didn’t expect to receive from a customer. He claims that the customer never uses generic greetings such as “Good day” and didn’t expect any amount of money to be transferred to his account. The email also contains an attachment that he never requested. He forwarded the email to the SOC (Security Operations Center) department for further investigation. Investigate the email sample to determine if it is legitimate. Questions  What is the email’s timestamp? (answer format: mm/dd/yyyy hh:mm) , Who is the email from? , What is his email address? , and What email address will receive a reply to this email? Looking at the headers in thunderbird: 06/10/2020 5:58 , Mr. James Jackson , info@mutawamarine.com , and info.mutawamarine@mail.com What is the Originating IP? NOT the answer 192.119.71.157 Who is the owner of the Originating IP? (Do not include the “.” in your answer.) I used domaintools whois Hostwinds Llc What is the SPF record for the Return-Path domain? and What is the DMARC record for the Return-Path domain? I used demarcian domain checker : v=spf1 include:spf.protection.outlook.com -all v=DMARC1; p=quarantine; fo=1 What is the name of the attachment? vSWT_#09674321____PDF__.CAB What is the SHA256 hash of the file attachment? sha256sum SWT_#09674321____PDF__.CAB 2e91c533615a9bb8929ac4bb76707b2444597ce063d84a4b33525e25074fff3f SWT_#09674321____PDF__.CAB What is the attachments file size? (Don’t forget to add “KB” to your answer, NUM KB) and What is the actual file extension of the attachment? I used VirusTotal : 400.26 KB resp RAR",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "31e915eaf224fbdc0207c465d71a7401",
    "u": "https://honey.tymyrddin.dev/",
    "t": "Active defence ",
    "c": "Active defence  With deception technology, the environment is populated with decoys: fake endpoints, files, services, databases, users, computers, and other resources that mimic assets. The intent is to lure adversaries away from legitimate targets and detect intruders in the early stages of an attack, both key to minimising damage. Vet all tactics in this strategy with a lawyer or legal team first. And whatever you do, do not become the petty tyrants you fight. Testlab Active defence tools Notes Introduction Tactics Traps Taxonomies of honeypots Honeypot roadmaps Detecting honeypots Avoiding honeypot detection Honeyports Honeyclients Books ",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d967014050b70593cdcb44e9493e642b",
    "u": "https://honey.tymyrddin.dev/docs/notes/tactics",
    "t": "Tactics ",
    "c": "Tactics  Decoys  Decoys can be used to distract attackers from real targets. Honeypots or honeynets are sets of devices designed to attract attackers, but record the actions of adversaries and alert administrators of potential breaches. Honeypots can be used for researching PTTs (procedures, tools and techniques) of adversaries and assist with generating effective defensive measures. There are lots of honeypots , but your selection will depend on your environment and what you want to get out of it . At home  A honeyclient is a tool designed to mimic the behaviour of a user-driven network client application, such as a web browser, and be exploited by an attacker’s content. Thug seems something to have fun with at home. Attribution  Getting attribution is particularly useful in combination with documents that are a beacon when opened, such as when integrated with a tool like Molehunt . The Browser Exploitation Framework (BeEF) is a tool often used by adversaries and in pentesting, and can also be used in defence by gathering information from the remote party from within his or her web browser. Another tool that can assist with attribution is honeypot systems that have built-in attribution capability features, like HoneyBadger , which has geolocation features to determine where an attacker is located. Traps  Another possible tactic is trapping adversary activity by generating a maze of fake web content using tools like Spidertrap, Weblabyrinth, and/or by creating a haystack of honeypot hosts using Nova is also a good tactic. An adversary can get lost within these, even when using crawlers, spending hours or days to sort out what is real and what is not.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "aa8df7ad020153dabb6ba70bdb5120a3",
    "u": "https://honey.tymyrddin.dev/docs/notes/honeyports",
    "t": "Honeyports ",
    "c": "Honeyports  Consider honeyports , an effective defence for air gapped/high security networks: They give you visibility. Current IDS IPS technologies fail at detecting attackers communicating with open ports over normal protocols (SMB, SSH, HTTP, and HTTPS). Some Next-Gen firewalls already have some of the deception capabilities. Most IPS/IDS technologies are still blind at detecting 0-day attacks. If anyone interacts with a honeyport, it can trigger an alert and/or create a dynamic blacklist entry. You can run them from the command line, and you can run them as Python, PowerShell, and Ruby scripts. How it works  Create a non-legitimate listening port on an external facing legitimate non-important server that are favorite for remote attacks, like telnet or ssh. The services need not be installed. Listen on that port using tools like honeyports. Most pentesters, redteamers and adversaries start with reconnaissance. When an attacker runs a recon scan against this server, sees this open port and tries to communicate, automatically block that IP at your perimeter so that all further actions are blocked. Take that a step further and check out portspoof . A port scan will take ages and becomes utterly meaningless with every port responding that it is up and running some service. Scanning tools will try to enumerate those services by running additional checks, over 65536 ports. Resources  Active Defense, Offensive Countermeasures, and Cyber Deception , John Strand, Bryce Galbraith and Paul Asadoorian, 2020",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b9478f7344930ba2a480cece24322e3a",
    "u": "https://honey.tymyrddin.dev/docs/notes/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Choices developers, system administrators, researchers, and threat hunters face: Which honeypots, honeyclients and honeyports? Which tools to integrate with? What kind of attacks to capture? What vulnerabilities to emit? How hard must it be to detect it? Why?  Wrong design decisions may result in collecting irrelevant information or even exposing the deception technology itself. How?  Tactics Taxonomies Roadmaps Detecting honeypots Avoiding honeypot detection Honeyports Honeyclients",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b063532314ab410630b9ff93392c63a4",
    "u": "https://honey.tymyrddin.dev/docs/notes/roadmaps",
    "t": "Honeypot roadmaps ",
    "c": "Honeypot roadmaps  Web-based  The in 2014 proposed Aggressive Web honeypot (Supeno Djanali et al.) is a low-interaction web honeypot equipped with obfuscated javascript code to detect cross-site scripting and SQL injection. The proposed framework is able to complement the limitation in the existing honeypot such as Glastopf, a low-interactive honeypot and HIHAT, a high-interactive honeypot. The goal of the OWASP Honeypot Project is to identify emerging attacks against web applications and report them to the community, in order to facilitate protection against such targeted attacks. It is based around the earlier OWASP/WASC Distributed Web Honeypots Project . A client honeypot is a honeypot that actively searches for malicious or compromised servers. Worm detection  Signature-based IDS is commonly included either as the main IDS or part of the IDS system. The Aho-Corasick algorithm used in Zero-day polymorphic worms honeypot stands out from the crowd. The Aho-Corasick Algorithm can generate signatures even if not all the variant of the polymorphic worm is captured. Bot detection  The implementation of a bot detection honeypot can be for studying its origin or can be used to contain the DDoS attack and keep the real server free from it. The Hybrid honeypot (Swapnali Sundar Sadamate) uses a client-server architecture. It consists of a server storing information collected by the honeypot, a honeypot to capture the attack information, a web-management interface and a threshold-based anomaly IDS system. The IDS system is implemented at the gateway of the network to detect the malicious traffic. The malicious packet is redirected to the honeypot. The honeypot is installed with sebek to record attacker behaviour, dionaea to collect the malware information and snort in the verification process to collect and analyse the packet received. The ODAIDS-HPS honeypot (Rajalakshmi Selvaraj) consists of an outlier IDS to detect the DoS packet, attack classifier and honeypot. The IDS adopts distance of the nearest neighbour method and requires a set of pure normal data to train the system. Honeytoken  A honeytoken is a digital entity perceived to be valuable by an attacker. It can be as simple as an ID with a password or be as complex as a spreadsheet with believable customer information. Honeytokens are most useful in the context of anti-phishing and insider threat. How it should be constructed? Who is it for? What information to keep and what to change? Maya Bercovitch et al. introduced honeygen for automatically creating complex honeytokens. The application has two difference modes which can be used to create the honeytoken. The first mode is an obfuscation mode where real data is used as input. This mode only changes the more sensitive values. The second mode is the generation mode. This mode creates the honeytoken from scratch based on given rules. Advanced Persistent Threat  APT attacks are often a slow process and hard to detect, especially when stealth techniques such as tunnelling are used. The APT detection system (Roman Jasek) consists of high-interactive honeypots, low-interactive honeypots, honeypots for production and honeypot agents. A honeypot agent acts like a normal human user with behaviour to attract the attack. A low-interactive honeypot emits a known vulnerability into the network. A high-interactive honeypots allows the attacker to interact and compromise its system. The act of compromising the honeypot in the honeyfarm is recorded and monitored by the administrator. Safety rules are derived from the compromise and are applied to the production system. The APT proactive detection system (Zainab Saud) architecture uses NIDS as a gateway to the server and low-interactive honeypot to emit data to attract the attacker. The focus of this system is to ensure that an administrator receives timely information on the intrusion when the honeypot is being compromised. The task of the NIDS is to provide a detailed picture of the attack, and its log and alerts can assist with analysis and correlating different events. Interaction between attacker and defender is usually an incomplete information game in which defender and attacker are not sure of the type of other players. A Bayesian game may be a fitting model. Dynamic  Dynamic honeypots can automatically adapt to the environment they are in. Usually some fingerprint method is used to collect information about its environment. Active fingerprinting methods use techniques such as port scanning to collect information from the server. Some dynamic honeypots are low-interactive honeypots, most likely for ease of configuration. For detecting unknown attacks those are not very effective. Some, like the Sophisticated honeypot mechanism (Liberios Vokorokos), Dynamic and Hybrid honeypot (Kartik Chawda), and the Versatile virtual honeynet framework (Wenjun Fan) have both high and low-interactive honeypots in their architecture. The low-interactive honeypot is preconfigured to blend in with the network, and the high-interactive honeypot will contain, monitor and store the attack information. The latter adopted the virtual high-interactive honeynet, capable of analysing multiple malwares in parallel. In current developments, applications such as Hadoop are used to cater for the huge amounts of network data. And attackers are always coming up with new ways of identifying and taking over honeypots. In this never-ending arms race, honeypots and how they are used must also be further developed. This project solves some of the inherent limitations of honeypots by designing, building and evaluating a novel honeypot deployment concept leveraging cloud technologies. This new concept, a small, substantial contribution in the field, shifts the approach of deploying honeypots into the cloud. AI  RASSH (Adrian Pauna) is a low-interactive honeypot leveraging reinforced learning game theory. The Intelligent honeypot (Wari Zanoramy, Ansiry Zakaria) is high-interactive and uses a past similar case and solution and applies it to the current case to create the honeypot. The if-then rule stored in the database is used in the decision-making of the content in the honeypot (case-based reasoning and expert system). These approaches were trained beforehand and did not learn from attacks. Enter DeepDig (DEcEPtion DIGging) (pdf). Shadow  Shadow honeypots take the concept of a traditional honeypot and enhance it by deploying a network of honeypots that are hidden behind the actual production systems. These shadow honeypots are designed to blend in with the rest of the network, making it difficult for attackers to distinguish between real systems and decoys. Unlike traditional honeypots, which are designed to actively engage with attackers and potentially pose risks to the production environment, shadow honeypots are passive monitoring systems that do not engage with attackers. Instead, they are designed to blend in with the production environment as much as possible, with the goal of attracting malicious activity that might otherwise go undetected. The Shadow honeypot (Anagnostakis Kostas) uses three different anomaly IDSs. If one IDS fails to detect an attack, the other may be able to detect it. The detection of malicious packet is based on knowledge of what constitutes normal packets. Configuring three detectors to an acceptable level of detection and the log delay for a packet to go through the three checks, could be somewhat time-consuming. AIPS (Maros Barabas) attempts to detect attacks with signature datasets of abnormal behaviour with a single IDS. High memory usage and could suffer from high false positive rates. I have not found many new developments for these types of honeypots. Concealment  Apate is a Linux Kernel Module for hardening High Interaction Honeypots. It works on a system call level, is able to log, block and manipulate these calls, and uses an easy to use yet powerful configuration language. The evaluation...",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "fd300df9828ccbd928e1afc8d9e70a7a",
    "u": "https://honey.tymyrddin.dev/docs/notes/honeyclients",
    "t": "Honeyclients ",
    "c": "Honeyclients  For most honeypots to work, you have to wait for the attacker to attack the honeypot from a remote location. This ignores that most attacks are client-side. A phishing e-mail arrives in an inbox, the user clicks and allows the remote malware to activate on the device and allows it to callback over TCP port 80, which is allowed by most firewalls. Meanwhile, drive-by downloads overtook file attachment phishing as the major means of initial access. Enter client-side honeypots (honeyclients), to track and analyse these types of attacks. A honeyclient mimics, either manually or automatically, the normal series of steps a regular user would make when visiting websites. It can be fully patched or be left vulnerable. The idea is to identify malware hosts, and possibly even gather attribution information. HoneyMonkey (dead since 2010) was a web browser based (IE) high interaction client honeypot built by Microsoft in 2005. It detected attacks on clients by monitoring files, registry, and processes. Thug is a Python low-interaction honeyclient aimed at mimicing the behaviour of a web browser in order to detect and emulate malicious contents. It is actively being developed. Many more such honeyclients exist.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "66da79bbce0ad12c27e603328766f4bb",
    "u": "https://honey.tymyrddin.dev/docs/notes/taxonomies",
    "t": "Taxonomies of honeypots ",
    "c": "Taxonomies of honeypots  A wide variety of honeypots exist, and some classification can be helpful. Purpose  According to purpose, honeypots can be divided into two main categories: A research honeypot is used to collect, monitor and analyse the activities of an attacker and the tools used to hack into the honeypot. It is used to discover an unknown vulnerability and attack. A production honeypot is focused on defence, and mainly implemented behind a firewall and usually concealed within the production network. Its purpose is to keep an attacker away from the actual system by creating an illusion of an actual system with vulnerabilities, and when attacked, alerts the system administrator of the intrusion. Interactivity  The level of interactivity provided to adversaries is also a useful distinction, with most honeypots falling into one of the below categories: Low-Interaction honeypots offer little interactivity to the adversary and are only capable of simulating the functions that are required to simulate a service and capture attacks against it. Adversaries are not able to perform any post-exploitation activity against these honeypots as they are unable to fully exploit the simulated service. Examples of low-interaction honeypots include mailoney and dionaea. Medium-Interaction honeypots collect data by emulating vulnerable services and the underlying OS, shell, and file systems. This allows adversaries to complete initial exploits and carry out post-exploitation activity. The system presented to adversaries is a simulation, and as a result, it is usually not possible for adversaries to complete their full range of post-exploitation activity as the simulation will be unable to function completely or accurately. Cowrie can function as a medium-interaction SSH honeypot. High-Interaction honeypots are fully complete systems, usually Virtual Machines, that include deliberate vulnerabilities. Adversaries should be able (but not necessarily allowed) to perform any action against the honeypot as it is a complete system. It is important that high-interaction honeypots are carefully managed, otherwise, there is a risk that an adversary could use the honeypot as a foothold to attack other resources. Cowrie can also operate as an SSH proxy and management system for high-interaction honeypots. Deployment location  Once deployed, honeypots can also be categorised by the exact location of deployment: Internal honeypots are deployed inside a LAN. This type can act as a way to monitor a network for threats originating from the inside, for example, attacks originating from trusted personnel or attacks that by-parse firewalls like phishing attacks. Ideally, these honeypots should never be compromised as this would indicate a significant breach. External honeypots are deployed on the open internet and are used to monitor attacks from outside the LAN. These honeypots are able to collect much more data on attacks since they are effectively guaranteed to be under attack at all times. Cyber kill chain  A must read : Three Decades of Deception Techniques in Active Cyber Defense - Retrospect and Outlook uses a tailored cyber kill chain model which can reflect the current threat landscape and a four-layer deception stack, a two-dimensional taxonomy is developed, based on which deception techniques are classified.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "553f557402dcdd1d275e079c9f6ab721",
    "u": "https://honey.tymyrddin.dev/docs/notes/concealed",
    "t": "Avoiding honeypot detection ",
    "c": "Avoiding honeypot detection  Automatic honeypot redeployment  Low interaction honeypots are more expensive to develop with built in anti-detection because their scope and functionality are limited in contrast to high interaction honeypots. On discovery by an attacker , modifying an existing honeypot configuration may be too costly. One approach for avoiding honeypot detection involves automated redeployment of the honeypot, which in turn reduces the need for anti-detection honeypot configurations. One study that has explored the development and implementation of such a mechanism automatically re-deploys a honeynet when it identifies that an attacker has detected it. Inbound and outbound Internet Control Message Protocol (ICMP) packets are monitored and any drop in the number of ICMP packets below a pre-determined threshold indicates that the attacker has disconnected (indicative of the honeypot being discovered). The honeypot is then automatically redeployed with an altered configuration with intent to trap the same attacker. This method reduces setup overheads and development of anti-detection mechanisms for honeypots. Honeypot delay reduction  One detection risk for honeypots comes from the introduction of arbitrary delays in processes that a honeypot mimics that would otherwise not have such delays. For example, authentication via SSH that is delayed due to logging or log forwarding required by a honeypot. These delays enable attackers to detect the honeypot. By reducing the time delay to match more closely that of a real infected host, the risk of detecting the honeypot is lowered. Delay reduction as an optimisation for honeypots has demonstrated its effectiveness in avoiding honeypot’s detection when applied to Honeyd. Honeyd is a virtual (software) honeypot that emulates the protocol stack (such as the TCP/IP stack), such that attackers are convinced they are attacking a real vulnerable system. But because Honeyd operates on a virtual network, the link latency can be used to detect the presence of the honeypot. Specifically, end-to-end latency in Honeyd’s design is a multiple of 10 milliseconds. By comparing latencies between a physical (real) network and a virtual (honeypot) network we can define a threshold in which the two latencies are different. Using that threshold we can detect honeypot networks that use Honeyd. Attackers can use measurements of round trip times (by using ICMP, TCP, or UDP echo-reply) to detect the presence of honeypots. The study found that camouflaging Honeyd by modifying it to have a lower link latency, was effective in avoiding the honeypot system being detected. The study concluded that although the method was successful with the Honeyd honeypot system, it can also be broadly applied to other virtual honeypot systems. Honeypot process transparency  Another side effect of the way honeypots operate is the lack of transparency that leads to revealing their deceptive design. An example of this can be observed in hybrid honeypot systems. In these types of honeypots, both low and high interaction honeypots are used with a frontend honeypot forwarding connections to a backend honeypot. Current TCP connection handover mechanisms in hybrid honeypot systems can easily be detected. One study proposed a transparent TCP connection handover mechanism that uses different ports of an OpenFlow-based switch to isolate honeypots while TCP connection parameters (SEQ, ACK numbers) remain the same. The hybrid honeypots require network traffic to be re-directed from the frontends to the backends and this traffic redirection is often not transparent enough to evade detection. An alternative mechanism consists of three phases: Phase one is initiated by an attacker sending a TCP connection request to the target honeypot. The honeypot controller forwards the request to the frontend which performs the TCP three-way handshake to establish a connection with the attacker. Phase two involves transferring the TCP session from the frontend to the backend using a TCP replaying approach. This approach replays the three-way handshake using the saved attacker’s SYN packet. SEQ and ACK numbers are then synchronised leading to the third phase. In phase three packets are exchanged directly between the attacker and the backend. The study concluded that this approach makes the hybrid honeypot much stealthier, but at the expense of reduced performance. In general, honeypots need to ensure that operations that are being emulated need to maintain transparency. In other words, they need to hide any modified sequence of events that is not realistic. Dedicated hardware  Although expensive, the use of dedicated hardware for honeypots can help minimise their detection rate (for example by reducing arbitrary software delays). Additionally, dedicated hardware can also provide an additional layer of security against honeypot compromise. These benefits were demonstrated in a study, An FPGA-based Scalable Platform for High-Speed Malware Collection in Large IP Networks : This architecture implemented honeypots using dedicated hardware instead of a general-purpose processor and it also made use of a high-speed implementation of the IP stack. Additionally, the approach used a specialised stateless TCP hardware. The stateless TCP hardware can manage hundreds of thousands of simultaneous connections thereby enabling the system to support large honeynets. An increased speed of execution of TCP operations may reduce the likelihood of a honeypot being detected by an attacker. An additional benefit of implementing honeypot operations in hardware instead of software using general-purpose processors is that it also reduces the risk of the honeypot software being compromised and used for attacks. Dynamic intelligence on honeypots  The advent of dynamic approaches to honeypot development as well as novel techniques in machine learning and artificial intelligence provide an opportunity for more diverse honeypots that alter their behaviour depending on the actions of an attacker. The result is a more adaptable honeypot that is more difficult to detect. In general, dynamic honeypots have a behaviour that is not fixed, but changes based on some condition and adapts to the current environment. In this case, configuration or re-configuration is not required. An example of such a system is a high interaction honeypot that uses reinforced learning in order to dynamically change its behaviour based on the interaction that it has with an attacker. The honeypot can strategically block program execution, alter program names in order to lure attackers and can deceive attackers with the intent of having them reveal their background, which is especially important for research honeypots.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f8931ee27728477101b6481f4c009e33",
    "u": "https://honey.tymyrddin.dev/docs/notes/detection",
    "t": "Detecting honeypots ",
    "c": "Detecting honeypots  Honeypot detection lies in an attacker’s ability to detect, and find out the deceptive nature (IoCs) of the honeypot. Often this relies on the limited ability of a honeypot to align with an attacker’s mental model. This mental model is based on the attacker’s expectation of what a realistic environment should look like. And that is based on experience. Note: If you manage to fingerprint any of the used honeypots, make sure to let the creators know. There are also some legal constraints that, due to the nature of defenders having to abide by the law, enter in the design. For example, a honeypot bot that is part of a botnet cannot legally perform denial of service attacks to systems. Attackers can knowingly look for signs of such legal constraints. And in this cycle, honeypot designs are improved to conceal them better .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "03e00a7aac1de7759b2956d68ba2e518",
    "u": "https://pap.tymyrddin.dev/docs/mitre/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Understanding our current defensive capabilities and mapping them against Mitre Att&Ck framework. MITRE offers a better understanding of the operations of threat actors, enabling systematic and repeatable categorisation. Why?  Helpful for discovering where and how best to invest our time and energy. Then layer the same with potential threats to our devices and (home) networks. The gaps discovered are the areas that should be focused first. How?  Phishing for information Application Layer Protocol: Mail Protocols Drive-by compromise Supply chain compromise Signs of a compromise @home",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e15a3035588ac812aefe44ef2c56d2a9",
    "u": "https://pap.tymyrddin.dev/docs/mobile/madware",
    "t": "Madware ",
    "c": "Madware  Madware (mobile adware) usually finds its way onto a mobile phone through the installation of a script or program and often without the consent of the user. The purpose of most forms of madware is to collect data from your phone in order to spam you with ads. Most madware variants include an element of spyware , which collects information about internet usage and sends it on to a third party. This data may include details about location, used passwords and contacts. Prevention  Updated operating systems and spam filters can help protect devices against adware.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "aff08c998791d343735761cc01653e1d",
    "u": "https://windows.tymyrddin.dev/",
    "t": "Hardening Windows ",
    "c": "Hardening Windows  Version 0.1: These mitigations are all based on Windows 10. Supposedly, Windows 11 has better security . Some of these mitigations may still be applicable and useful. When we have an 11 key we will install, test it, and add mitigations. Accounts and authentication Introduction More secure login Require a password when resuming from a stand-by mode Make that more secure passwords Use a password manager Use multifactor authentication (MFA) Use a standard user account Protect SSH access with MFA Services and applications Introduction Start, stop, restart, enable, and disable services Restricting access to applications Block internet access to specific apps Maximise user account control (UAC) Unwanted application suggestions Secure browsers that protect your privacy Use a secure messaging service Use secure email services Use SSH tunnels Use a VPN service Make a VPN killswitch using routes Use alternative DNS servers Use a Tor proxy Change MAC address Renew IP lease Edit hosts file Data Introduction Create a restore point Enable full disk encryption using BitLocker File encryption Enable controlled folder access (CFA) Privacy Introduction Disable location tracking Disable Ad tracking by Microsoft Ad partners Turning devices on and off Remove metadata from files Edit exif metadata in images Remove metadata with hex editors Clean machine with BleachBit Malware Introduction Malware detection and removal Catch and remove malicious registry entries Analysing trojans Operations security Introduction Use email securely Detecting fake emails and phishing Browse more safely Check integrity of downloads ‘;–have i been pwned? Guards! Guards! Introduction Alphabet soup Windows intrusion detection systems",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f2d6516fd293cb2468c8f5e80e4ac3f5",
    "u": "https://windows.tymyrddin.dev/docs/services/odd-applications",
    "t": "Unwanted application suggestions ",
    "c": "Unwanted application suggestions  QuickTime is Apple’s video player, a current program on macOS, but the company hasn’t supported the Windows version since 2016, and TrendMicro sent out an urgent call to remove it . If you need a replacement for QuickTime, use VLC. CCleaner, once a trusted Windows app for cleaning junk, but its reputation went downhill after it was acquired by Avast. It became better again but is largely useless, as better tools and ways exist. Garbage like MyCleanPC or PC Optimizer Pro for cleaning your PC. These products range from useless to harmful. uTorrent was once considered the gold standard of torrenting software. Now a heap of ads, and in 2015, the app was found to bundle in cryptocurrency mining software without letting users know, wasting your system resources in the background to make money for the company. As in, a botnet of sorts. Try qBittorrent . Adobe Flash Player is no longer supported as of January 2021. It is blocked in all modern browsers, but if your machine still holds a local copy of Flash, remove it. A similar runtime plugin, Adobe Shockwave Player, was discontinued in 2019. Remove. Once common, Java is another media runtime to remove, both components: Java on the desktop, and the Java plugin for browsers (which is notorious for having security problems). Very few websites use it nowadays. Silverlight is a web framework, similar to Adobe Flash, that once enabled rich media content in your browser. Years ago, these plugins were necessary on a lot of websites. But now they’re deprecated and no longer useful. Google chrome extensions: Hola, The New NX, FindMeFreebies, Hover Zoom, All Antivirus Extensions, Any Unfamiliar Extensions. Toolbars like the Bing Bar, Google Toolbar, Ask Toolbar, Yahoo! Toolbar, or the Babylon Toolbar. Coupon Printer Manufacturer Bloatware. Anything from the manufacturer is probably not necessary, but it’s always good to double-check . Microsoft Bloatware, for example Store apps. Candy Crush Saga? Really??? WinRAR. 7-Zip is a free and simple tool that covers most people’s needs. … Tools  W3Techs Should I remove it?",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f7127af4d1128c0a937bf72be92acfdd",
    "u": "https://windows.tymyrddin.dev/docs/data/cfa",
    "t": "Enable controlled folder access (CFA) ",
    "c": "Enable controlled folder access (CFA)  Controlled folder access is supported on Windows Server 2019, Windows Server 2022, Windows 10, and Windows 11 clients. This feature has been tested against various ransomware samples. Controlled Folder Access achieved what it was designed to do; successfully block ransomware from encrypting files located in protected folders. Type “Windows Defender Security Center” in search box and Enter. Select Virus & threat protection -> Virus & threat protection settings option from the main window. Locate the Controlled folder access section. To enable the feature, click the On/Off toggle. Select the Protected folders sub-option underneath and add all the folders you want to restrict access to. The other sub-option underneath, Allow an app through Controlled folder access, will whitelist the apps that are allowed to access, edit, create or remove files from protected folders.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7ac776a892437bd563e2a128562a2b4e",
    "u": "https://windows.tymyrddin.dev/docs/authentication/mfa",
    "t": "Use multifactor authentication (MFA) ",
    "c": "Use multifactor authentication (MFA)  Many sites and applications offer two-factor authentication (2FA), also named multi-factor authentication (MFA). With 2FA enabled, logging into a website or application requires both a password and a unique code that is texted to your phone number or delivered via an authenticator app. You have to input this code in order to gain access to your account. Even if someone else has your password, they will not be able to break into your accounts if they can not get the code. When you use one of the authenticator apps included here, you bolster the password you know with the token, smartphone, or smartwatch that you have. Setting up MFA usually involves scanning a QR code on the site with your phone’s authenticator app. Note that you can scan the code to more than one phone, if you want a backup. Authenticator apps generate time-based, one-time passcodes (TOTP or OTP), which are usually six digits that refresh every 30 seconds. Once you set up MFA, every time you want to log in to a site, you enter the code into the secured app or site’s login page, and you’re in. The time limit means that if an adversary manages to get your one-time passcode, it won’t work for them after that 30 seconds. Something to look for when choosing one of these apps is whether it backs up the account info (encrypted, of course) in case you no longer have the phone you set everything up on. These all do (Google Authenticator does not). It’s a choice. Risks either way. Authy Duo Mobile LastPass Authenticator Microsoft Authenticator",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b31a576ceffe356fc29d0ab73588c762",
    "u": "https://windows.tymyrddin.dev/docs/guards/readme",
    "t": "Introduction ",
    "c": "Introduction  There are many types of devices and mechanisms within the security environment to provide a layered approach of defense. This is so that if an attacker is able to bypass one layer, another layer stands in the way to protect the network. Two of the most popular and significant tools used to secure networks are firewalls and intrusion detection systems. Choosing a firewall for a Windows PC  With a firewall, you can: Log hosts scanning services that aren’t running. Limit the services that applications can connect to. Segregate the local network into trust segments (Local Area Network (LAN), DeMilitarised Zone (DMZ), and Internet). Redirect ports to the hosts providing the service (Network address translation (NAT)). Windows comes with a built-in firewall in Windows 10, but this firewall may be turned off by default. Turn it on via Settings: Under Windows Settings section, click Update & Security. Select Windows Defender and then click Open Windows Defender Security Center. Choose Firewall & network protection and choose a network profile. Under the Windows Defender Firewall section, switch Off to On. In order to allow a specific application to pass through your Windows Firewall, you have to add it to the list of other permitted applications. You can do this by clicking Allow an app or feature through Windows Defender Firewall. If you’d like to be more secure, install a firewall (none of which offer exploit attack protection, by the way). ZoneAlarm Comodo TinyWall Choosing a HIDS for a Windows PC  Most of the HIDS tools for Windows are EventLog Analyzers.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7027c2ec2d34ca5e3663e08501f4c588",
    "u": "https://windows.tymyrddin.dev/docs/privacy/metadata",
    "t": "Remove metadata from files ",
    "c": "Remove metadata from files  Metadata is data about data. Metadata answers who, what, when, where, why, and how about every facet of the data that is being documented. Photos, and images in general, contain metadata. For photos this includes how large the picture is, colour depth, resolution, the date and time when it was created, the GPS coordinates of the location they were taken at, camera shutter setting details, and possibly even the name of the program used to edit them. Document metadata is information about one or more aspects of a document, spreadsheet, pdf file, that is not always visible to the person creating them, but can be found by the person who receives them next. Comments, track changes, hidden text, mark-ups, properties, attachments and bookmarks are all examples of document metadata. Office documents like pdf or Office automatically add author and organisation information to documents and spreadsheets. Web pages often include metadata in the form of meta tags. Description and keywords meta tags are commonly used to describe the Web page’s content. Most search engines use this data when adding pages to their search index. This type of metadata can be useful, but maybe you do not want to disclose this information on the web, because metadata can be used for other purposes as well: Metadata is collected by corporations for psychological manipulation in persuasion and advertising. Metadata also plays a number of important roles in computer forensics: It can provide corroborating information about the document data itself. It can reveal information that someone tried to hide, delete, or obscure. It can be used to automatically correlate documents from different sources. Metadata is used by hackers doing reconnaissance for an attack And last but not least, it can be used to correlate data in dragnet and targeted surveillance. Techniques for metadata removal  Metadata removal software like BleachBit Using a hex editor Edit exif metadata in images",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e53d358cf3fec4ce67ca53bba87f8947",
    "u": "https://windows.tymyrddin.dev/docs/services/vpn",
    "t": "Use a VPN service ",
    "c": "Use a VPN service  Internet providers are collecting your browsing data and handing this over to third parties (US, UK, Australia, and much of Europe). Public Wi-Fi remains a serious threat with adversaries targeting unsuspecting users. Many streaming services and websites restrict content to certain geographic locations. A VPN allows you to bypass such restrictions. A VPN will encrypt the connection and make the traffic unreadable. No logs policy  Meaning, not logging traffic, DNS requests, timestamps, bandwidth, IP address. NordVPN , Panama Mullvad , Sweden IVPN , Gibraltar Surfshark VPN , Netherlands Logs timestamps and bandwidth  Does not log directly identifiable information. ExpressVPN",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3b21fcd029fd7b3d38176a1c634d4f51",
    "u": "https://windows.tymyrddin.dev/docs/malware/analysing-trojans",
    "t": "Analysing trojans ",
    "c": "Analysing trojans  Check file properties. Be careful not to click on any links or attachments in the email accidentally. Is it what it seems to be? Run the file in a virtual machine and analyse it. Use an online Sandbox service. Related  Malware sandboxes Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d1d5aa12dce71562fe71bf7af4f5f0e2",
    "u": "https://windows.tymyrddin.dev/docs/authentication/password-manager",
    "t": "Use a password manager ",
    "c": "Use a password manager  The majority of people use very weak passwords and reuse them on different websites. How are you supposed to use strong, unique passwords on all the websites you use? The solution is a password manager. Password managers store your login information for all the websites you use and help you log into them automatically. They encrypt your password database with a master password — the master password is the only one you have to remember. Managers  Dashlane 1Password Bitwarden It does not protect from keyloggers  Most password manager work by copy-pasting data quickly from your manager to the field (on the website) or by simulating keystrokes for all the data on file. A keylogger captures keystrokes and would capture all passwords entered by a password manager that simulated keystrokes. Nearly all keyloggers even include the capability to take screenshots at particular intervals of time and save all the contents of the clipboard to a file. The last bit is important, because it sort of renders even password managers that use the clipboard to fill in these forms useless. The real solution to preventing these attacks is to monitor your system for any keyloggers or use some sort of AV solution .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "17cdd321a5a809b48081d1f60f1838d9",
    "u": "https://windows.tymyrddin.dev/docs/opsec/check-mail",
    "t": "Detecting fake emails and phishing ",
    "c": "Detecting fake emails and phishing  Fake emails  View the header info. Pay attention to the email address of a sender. It may imitate a legitimate sender. With only few characters altered or omitted, cybercriminals will often use an email address that closely resembles one from a reputable source. Look closely at the content: Hover your cursor over any links in the body of an email. Links not matching the text that appears raise a red flag. So does the use of URL shortening services. Email clients can be viewed in simple text instead of html, so one never forgets to do this. Poor grammar and sentence structure, misspellings, and inconsistent formatting can be other indicators of a possible phishing attempt. An unsolicited email requesting a user download and open an attachment is a common delivery mechanism for malware, even when it seems to come from a friend, or an employeur. A false sense of urgency or importance to help persuade a user to download or open an attachment without examining it first, completes this picture. Do not. Verify message source. Check the reply email. Reply and wait for the result. Phishing  Be wary of emails asking for confidential information. Don’t get pressured into providing sensitive information. Phishers like to use all kinds of social engineering. Learn what you can about it. Check a website’s privacy policy, especially whether it will or will not sell its mailing list. If so, do not register. Watch out for generic-looking requests for information. Never submit confidential information via forms embedded within email messages. Never use links in an email to connect to a website unless you are absolutely sure they are authentic.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d1edc50cca1985b4035bcd0a4cb09baa",
    "u": "https://windows.tymyrddin.dev/docs/data/disk-encryption",
    "t": "Enable full disk encryption using BitLocker ",
    "c": "Enable full disk encryption using BitLocker  Enabling full disk encryption minimizes the chance that data on your computer will ever be misused. Requirements  Windows 10 Pro and Windows 10 Enterprise include BitLocker, Windows 10 Home does not. A TPM chip. To check if your machine has a TPM chip: Type tpm.msc in the search box, and press enter. In the following window, check the TPM status. On some systems, TPM chips are disabled by default, and you will need to enable the chip in the BIOS menu: Under Security settings, look for a TPM subsection. Most likely it will allow Activation/Enabling by ticking some box or a toggle of sorts. If there is no TPM chip on your motherboard, you can still enable Bitlocker by editing the “Require additional authentication at startup” group policy. Enable via Control Panel  Either Control Panel -> Bitlocker Drive Encryption OR System and Security -> Bitlocker Drive Encryption Expand the drive you want to enable Bitlocker on, and click on the Turn on Bitlocker hyperlink If your TPM is already enabled, you will directly be brought to the BitLocker Startup Preferences selection window. If not: Go through the Bitlocker Drive Encryption startup by clicking on Next. Eject any connected USB drives and remove any CDS/DVDs sitting idle in the optical disc drive. Click on Shutdown. Follow the instructions that appear on the screen to activate the TPM. Activating the module is as simple as pressing a key (varies depending on manufacturer). The computer will most likely shut down again once you activate the TPM; turn on your computer back on. Choose to enter a password at every startup or connect a USB/Flash drive (Smart Card) containing the startup key. The latter is somewhat of a dangerous option. If the USB drive holding the key is damaged or lost you may lose access to the drive. Set a strong password and re-enter it to confirm. Next. Keep the recovery key securely locked away on both (dedicated) USB storage and paper. Encrypt a drive  Choose to either encrypt the entire hard drive or only the part used. On old buckets where most of the storage space is already being used, do the whole hard drive. On new machines, or machines with little data, choose to encrypt only the space that is currently filled with data. Bitlocker will automatically encrypt any new data you add to the disk. Choose encryption modes. Select the New encryption mode if the disk is a fixed one. Select compatible mode if you are encrypting a removable hard drive or USB flash drive. Depending on your system Run BitLocker system check (OR) Start encrypting Restart the computer to initiate the encryption process (can take from 20 minutes to hours) Now every time you boot on your computer, you will be prompted to enter the passkey in order to access the encrypted files.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1dd3ceb996fd934acfdbe7a7e04c3efd",
    "u": "https://windows.tymyrddin.dev/docs/services/block-internet-access",
    "t": "Block internet access to specific apps ",
    "c": "Block internet access to specific apps  There is a simple way to restrict internet access to specific apps in Windows 10 with the Windows Defender Firewall. Only restrict internet access to apps that do not need the internet to function properly. Examples  Type in Windows Defender Firewall in search box and open it. Go to Advanced Settings on the left sidebar. This will open a new window. Select Outbound Rules on the left sidebar. Go to New Rule on the right side of the window. Choose Program on the new window, and then click on Next. Next to This Program Path, click on the Browse button. Find the app you want to restrict internet access for. Click on Next again. Click on the Block the Connection circle, and then Next. Check the Domain, Private, and Public boxes and click Next. Give the rule a name and description. Finish.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3ffe1f2bfff0e0b56667f3f063912eea",
    "u": "https://windows.tymyrddin.dev/docs/services/max-uac",
    "t": "Maximise user account control (UAC) ",
    "c": "Maximise user account control (UAC)  Windows was designed as a single-user desktop system and has had various functionality added to it over time to address the weaknesses of the original design. A major weakness is that a desktop Windows user is also an admin-level user. User Account Control (UAC) was introduced in Windows Vista to create more of a barrier to installation and requires users to specifically authorise certain actions by clicking an OK button when prompted. By requiring administrator privileges to install programs, it is harder to deploy malware. In the search box type “Change user account control” and select the first result Move slider to Always notify me up top and click on OK Now the machine always asks for the user’s permission before making any changes. And, the weakest link in any security chain is people. While these privilege escalation tools are fully functional, many people will simply type in their administrator password, or click the OK button to allow highly privileged activities to occur whenever the prompt comes up, without further thought. In fact, this opens up another attack route for privilege escalation by an adversary. Presenting people with a spoofed pop-up box asking for the password, will usually work. For better separation, you can create a standard Windows account yourself.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "977c5ea8297420a0016a3279bd13b103",
    "u": "https://windows.tymyrddin.dev/docs/opsec/browsing",
    "t": "Browse more safely ",
    "c": "Browse more safely  Keyloggers and other malware can be installed via a web page script which exploits a browser vulnerability. The program will automatically be launched when a user visits an infected site. Compromising a browser is relatively easy, and it is cross-platform, hence an often chosen target. Plus that browsers (for performance reasons) prefetch exposing users to more security risks by downloading more pages, or from un-requested sites (additionally compounded as drive-by downloads become more advanced and diverse). BeEF & other browser exploits, when not using browser vulnerabilities, rely on javascript. Choose a secure browsers that protect your privacy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2243d157be8d2f656d63cdee40cf9bc8",
    "u": "https://windows.tymyrddin.dev/docs/authentication/resuming",
    "t": "Require a password when resuming from a stand-by mode ",
    "c": "Require a password when resuming from a stand-by mode  A screensaver password and a sleep/stand-by password are different settings. Screensaver  It is likely that your screensaver starts up before your computer goes to sleep, so that may be a better choice on a desktop. In searchbox type “Change screen saver”, then press Enter. In the Screen Saver Settings window, check the box On resume, display logon screen. OK Sleep/stand-by  A laptop is put to sleep when by closing the lid. A screensaver would not be active, and a screensaver password not needed. For a sleep/stand-by password: Control Panel -> Power Options On the left choose Require a password on wakeup You may have to click the link that says “Change settings that are currently unavailable” Select Require a password You will be able to wake the computer with your local password .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "524bc89a2bfcdbdb421e3488d7d6b831",
    "u": "https://windows.tymyrddin.dev/docs/services/restrict-services",
    "t": "Start, stop, restart, enable, and disable services ",
    "c": "Start, stop, restart, enable, and disable services  You must be signed in as an administrator to be able to do these. If you stop, start, or restart a service, any dependent services are also affected. Starting a service does not automatically restart its dependent services. Changing the default service settings may prevent key services from running correctly. It is especially important to use caution when changing the Startup type setting of services that are configured to start automatically. Some services, such as Remote Procedure Call (RPC), Event Log, and Plug and Play, cannot be stopped by using the Services snap-in window or the net stop command. These services are required for the operating system to function properly. Create a restore point before making changes to the services. If you disabled the wrong service and lost access to the computer, then try booting into Safe Mode to change the service back. “Startup Type” for Service  Automatic - With a service in this state, it will start at boot time. Some services, when no longer required, will also automatically stop when not needed. If you find you do not need a service, place it into Manual or Disabled. Automatic (Delayed Start) - With a service in this state, it will start just after boot time. Some services, when no longer required, will also automatically stop when not needed. If you find you do not need a service, place it into Manual or Disabled. Automatic (Delayed Start, Trigger Start) - With a service in this state, it will start just after boot when specifically called. Manual (Trigger Start) - This is a version of Manual mode that allows Windows to start a service when specifically called and Microsoft’s answer to “too many services running all the time”. Manual - Manual mode allows Windows to start a service when needed. However, very few services will start up when required in Manual mode. If you find you need a service, place it into Automatic. Disabled - This setting will stop a service from starting, even if needed. Errors in the Event Viewer will show up complaining of that fact. Some services, while Disabled, will constantly complain. However, this situation is taken care of if placed in Manual. The service descriptions identifies those that should be in Manual vice Disabled. Examples  Services window  Open the Services snap-in window (open the Run dialog, type services.msc OR Administrative Tools -> Services) Choose a service and double click it. You can Change its “Startup Type” (OR) Click the Stop button (OR) Enable/start a service: If the Startup type of the service is set to Disabled, then you will need to change it to either Manual, Automatic, or Automatic (Delayed Start) before you click the Start button (OR) Disable a service: If the service shows a status of running, then click/tap on the Stop button, and wait until the service status shows as stopped before you diable it. Using net Command  Requires the elevated command prompt, knowing the service name, and the double quotes. The Display name of a service is the name displayed in the Services snap-in window, and in the service’s properties. net stop \"service name\" net stop \"display name of service\" net start \"service name\" net start \"display name of service\"",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "be584bad1285129f01d3b408c84762a8",
    "u": "https://windows.tymyrddin.dev/docs/services/change-mac",
    "t": "Change MAC address ",
    "c": "Change MAC address  A MAC address identifies the device connected to a network and allows the network to track, restrict or allow access based on it. Routers identify and assign static IP addresses based on the MAC addresses of devices. Before you try to change the MAC address, you need to know the value that you want to use. Set the 2’s place bit (the “locally administered” bit) in the first byte, to differentiate it from a guaranteed globally unique MAC address. Usually the first three bytes an unicast MAC address is an “Organizationally Unique Identifier” (OUI) that the IEEE assigned to the manufacturer of your Ethernet device. Manufacturers are required to make sure they keep the last 3 bytes unique. Avoiding all of that knowledge, the MAC address generator tool can generate a valid address for you. Device Manager  In the Device Manager window, click the arrow next to Network adapters. Right-click the adapter for the network card that you want to change. Choose Properties from the menu. Select the Advanced tab. Select Network Address in the Property displayed list. Type the new MAC address value on the right side. Press the OK button. Control Panel  In the Control Panel window, search for “network connections” and choose “View network connections” in the results. Right-click on the network connection you want to change. Choose Properties from the menu. In the Properties window, click the Configure button. In the new Properties window that pops up, select the Advanced tab. Select Network Address in the Property displayed list. Type the new MAC address value on the right side. Press the OK button.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f2437a5075f6daf9c4871476c33a6a6a",
    "u": "https://windows.tymyrddin.dev/docs/services/tor-proxy",
    "t": "Use a Tor proxy ",
    "c": "Use a Tor proxy  Tor proxy  Install: $ sudo apt update $ sudo apt install tor Check it is installed: $ tor --version Tor version 0.4.6.9. Get your IP address: $ curl ifconfig.me; echo [IP address] Run the same command but preface it with torsocks. The command is now run through the tor client instead: $ torsocks curl ifconfig.me; echo [Some Tor IP address] To use the Tor network by default for shell commands, torify your shell with this command: $ source torsocks on Tor mode activated. Every command will be torified for this shell. Test with (must now be []): $ curl ifconfig.me; echo [Some Tor IP address] Notes  If a government makes their own national internet, or routes traffic through specific servers to use deep packet inspection (DPI), running Tor may not provide security if the government is able to see the entire path. Sometimes the Tor network is censored, and clients can’t connect to it. An increasing number of censoring countries are using Deep Packet Inspection (DPI) to classify Internet traffic flows by protocol. While Tor uses bridge relays to get around a censor that blocks by IP address, the censor can use DPI to recognize and filter Tor traffic flows even when they connect to unexpected IP addresses. With pluggable transports, censorship against Tor can be bypassed. Not only that. If an attacker can see your traffic, and can see the website you’re visiting, even with a path outside the adversary’s control - they will still be able to correlate the traffic and learn you are visiting the website. If the same connection (the same set of relays) were to be used for a longer period of time a Tor connection could be vulnerable to statistical analysis, which is why the client software changes the entry node every ten minutes.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6aede37dd8d610100aa023a3723b5cac",
    "u": "https://windows.tymyrddin.dev/docs/services/edit-hosts-file",
    "t": "Edit hosts file ",
    "c": "Edit hosts file  The hosts file is a system file on a device that lets you map specific domain names to an IP address. If you want to add new entries to the hosts file, you’ll need the IP address of the server that you want to map a hostname to. XXX.XXX.XXX.XXX some.domain.name The hosts file lets you override DNS entries for any domain name. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. Blocking is achieved by setting the IP address of the ad networks to a loopback address like 127.0.0.1 which will not return anything. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. If your device is infected with malware, then your hosts file may be compromised to included unknown entries for known domain names. That is NOT the IP address of your bank! This type of DNS attack is known as DNS pharming, and checking your hosts file can uncover potential infection. Windows  To edit the hosts file ( C:\\Windows\\System32\\Drivers\\etc\\hosts ) on Windows, you will need Administrator access. Right-click on your text editor’s icon (for example Notepad++) and choose //Run as administrator//. Go to File → Open in the text editor and navigate to C:\\Windows\\System32\\drivers\\etc\\ From the list, click on the hosts file and choose Open Add as many new entries as needed",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "54e22b5628bae6a435e99931d38a6530",
    "u": "https://windows.tymyrddin.dev/docs/services/renew-lease",
    "t": "Renew IP lease ",
    "c": "Renew IP lease  A DHCP client can on occasion send information in DHCP requests: hostname, MAC address, operating system, and DHCP version. All operating systems provide their most recent IP address to the DHCP server. If you change your MAC address to minimise risk, best to also renew the IP leases on the router. Windows  Using a /renew switch (This command won’t work if the computer is configured to use a static IP address): C : \\ > ipconfig / renew",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "13672a7d5524091c5421a5b9a4544cb8",
    "u": "https://windows.tymyrddin.dev/docs/malware/readme",
    "t": "Introduction ",
    "c": "Introduction  Windows has been struggling with malware for years and thus has decent protection layers built-in. Microsoft’s Defender is pretty good at detecting malware files, blocking exploits and network-based attacks, and flagging phishing sites. It even includes simple PC performance and health reports as well as parental controls with content filtering, usage limitations, and location tracking. Its malware detection rates are lower than for many third-party competitors and content filters are limited to the Microsoft Edge browser. Common signs of Windows 10 malware: Ads pop up in unexpected places, frequently Machine is running slower than usual Machine is consuming more power than necessary Strange behaviour, such as installing programs without your consent, even after rebooting it. Find these, or think you may have an infected system, or just wish to know more: Endpoint detection and response Malware analysis DIY: Malware detection and removal Catch and remove malicious registry entries Analysing trojans",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "af8d6c1d1c793758588aee1f33b38523",
    "u": "https://windows.tymyrddin.dev/docs/services/vpn-fail-open",
    "t": "Make a VPN killswitch using routes ",
    "c": "Make a VPN killswitch using routes  If you simply add a VPN using common instructions, it generally “fails open”. That means, if the VPN breaks down, because the connection is interrupted, traffic will be sent without the VPN. It is much safer when it “fails closed”, meaning that when the VPN connection breaks down, the whole internet connection must be down as long as the VPN connection is not restored. If your chosen VPN does not include being able to set a kill switch, you can use routes as a fail-safe mechanism: Make sure you’re connected to the OpenVPN server: Run the Command Prompt with admin rights. Delete the default route when the OpenVPN connection is established. > route delete 0.0.0.0 Now the default routing method is deleted, making VPN the only access method to the internet. Your internet connection will be cut off when VPN is inaccessible. The operating system will remain stasis until it can access that route again. Note that this state is ot persistent. If the router reboots or the adapter is disabled, the settings will be taken to a default state. To manually restore the default settings: Go to Control Panel -> Network and Internet -> Network and Sharing Center. Click Change adapter settings. Disable and then enable it again.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "849852b1f88396696d4707f4671ea3b4",
    "u": "https://windows.tymyrddin.dev/docs/opsec/integrity-downloads",
    "t": "Check integrity of downloads ",
    "c": "Check integrity of downloads  When downloading an ISO image of, for example, the latest Linux distro, installing or upgrading packages, or downloading software, you can verify the files have downloaded correctly and securely by using checksums. Checksums ensure the integrity of data portions for data transmission or storage. Checksums is a simple error-detection scheme in which each transmitted message is accompanied by a numerical value based on the number of set bits in the message. The receiving station then applies the same formula to the message and checks to make sure the accompanying numerical value is the same. If not, the receiver can assume that the message has been garbled (or was altered). Verifying downloaded software  When downloading software, .iso s and .deb s and the like, download the xxxsum (choose from what is available) as well as the software and check. Open Command Prompt or PowerShell and type: > certutil -hashfile [file_name] [hash-algorithm] For example: > certutil -hashfile .\\some-file.iso sha256sum and compare the output from the command with the key listed in the associated sha256 file.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5695d8dddd38e843f47d40e536d04836",
    "u": "https://windows.tymyrddin.dev/docs/services/email-services",
    "t": "Use secure email services ",
    "c": "Use secure email services  Mailfence , Belgium, provides a full suite of services, Messaging, s, Calendars, Groups, and Document storage. It can easily replace the G suite. It is a secure email suite that offers end-to-end encryption (through PGP support) and works with different email clients. There is some logging of IP address and some other data, and the code is not open source. Tutanota , Germany, is a small but serious player among secure email providers. It uses a hybrid encryption system that avoids some drawbacks of PGP, and is protected by the GDPR and other pro-privacy EU regulations. So, it does not work with PGP and there is no way to import existing emails (yet). ProtonMail , Switzerland, uses PGP encryption standards for email and stores all messages and attachments encrypted at rest on Swiss servers. ProtonMail has a unique feature for “self-destructing messages” and they have also added address verification and full PGP support. Articles  Reddit: Court forces mail provider Tutanota to perform a surveillance function Twitter: ProtonMail logging one of its users and providing IP address logs to French authorities Reading that carefully, if the message had already been encrypted and the IP address had been that of a VPN , these cases would not exist.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2b579ce55d01f323669c42df25af64c2",
    "u": "https://windows.tymyrddin.dev/docs/opsec/hibp",
    "t": "‘;–have i been pwned? ",
    "c": "‘;–have i been pwned?  ‘;–have i been pwned? (HIBP) is a database of several billion email addresses (and, separately, passwords) that have appeared in a publicly known past data breach. The service creates an SHA-1 hash of the submitted email address and passes the first six characters of that to HIBP’s hash range query API. HIBP then returns a range of possible matches, if any, to the six character string, without ever handling the full email address. Check if you have an account that has been compromised in a data breach, and if so, change your password and change it in any other place where you’ve used that password. Better yet, never use a password twice, and consider using a password manager.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3f7242b04a77966e9c394a0331557bb6",
    "u": "https://windows.tymyrddin.dev/docs/privacy/metadata-images",
    "t": "Edit exif metadata in images ",
    "c": "Edit exif metadata in images  Native  Click right then properties on the Image file Click on the Details In this tab, at the bottom left, click on “Delete properties and personal information” Select Create a copy with all possible properties removed or Remove the following properties from this file, and select the properties you want to remove. In Origin, you can edit the Author, Data taken, Date acquired, and Copyright. For more on metadata on Windows: The Details tab divides metadata properties in a number of sections, different for each file type. The image file is divided in six sections. The first section is called Description, and you can click the value field for Title, Subject, Tabs, Comments, and edit its information. Image shows relevant information about the image, all of which is automatically added and cannot be modified. The Camera section includes the details of the camera that was used to take the picture. Some of these fields can be modified. The Advanced photo section shows fields useful for photographers. Only some fields can be edited. File shows file name and type, location path, date created and modified, owner, and computer name where the file resides. These fields can not be edited. Using IrfanView  This may become complicated if needing to remove EXIF data on multiple images from a complete folder. IrfanView is a free image viewer software and photos that also gives the possibility to remove all data from an image or photo file. When saving an image, an option “Keep Original EXIF data” is present. Unchecking the option removes all EXIF data from the image file. Can be done in bulk. From the File -> Batch Conversion / rename menu, data on several image files can be deleted in one click.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "bb059a0b1fdc6ee35520851c51c66a57",
    "u": "https://windows.tymyrddin.dev/docs/services/restrict-access",
    "t": "Restricting access to applications ",
    "c": "Restricting access to applications  Examples  Program Blocker  There are many third-party programs on the Internet that you can use to restrict applications. They will simply lock the applications and password-protect them. Try AskAdmin or Program Blocker Restrict application access to email application  Go to Settings -> Privacy Click on Email from the left menu Toggle off the app access to emails. This will ensure that applications have no access to your emails, unless … Under the “Choose app that can access and send email” section, you can allow access to any specific applications that need email accessed. Any application to users using Group Policy Editor  This method is only possible if you have Windows 10 Pro or Enterprise: In the search box, type gpedit.msc , and select OK. Click on User Configuration on the left sidebar. Go to Administrative Templates folder. Go to the System folder. Locate the Don’t run specified Windows applications file on the right pane. Double-click on it. This will open a new window. On the left side of the window, check the Enabled circle. Under Options, go to Show. Type in the name of the app you want to restrict access to. Don’t forget to add the .exe extension after the name of the app. Apply. OK.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0516c474dd45bdbbb39c38c20d8284cf",
    "u": "https://windows.tymyrddin.dev/docs/malware/clean-registry",
    "t": "Catch and remove malicious registry entries ",
    "c": "Catch and remove malicious registry entries  Automagically  Restoro Iolo System Mechanic Manually  Windows Registry is one of the most important built-in tools on your Windows computer. Registered malware is not uncommon. Check the Windows Registry for malware because any operation on your PC can make a footprint in it. And you can remove malware from the Windows Registry. Create a system restore point Run regedit to open the Registry Editor Go to HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion Scroll down and find the folders which start with Run Click each folder to open the program list Be careful. Not all are malicious. Check for: Misspelled names Unfamiliar programs Search with DuckDuckGo to find confirmation either way If it turns out malicious, right-click on that entry and select Delete to remove it from Windows Registry. Also look in: HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\explorer\\User Shell Folders HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\explorer\\Shell Folders Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "501d65ca5ae4bbc80c9cff53c0777368",
    "u": "https://windows.tymyrddin.dev/docs/guards/soup",
    "t": "Alphabet soup ",
    "c": "Alphabet soup  Firewall  A firewall implements rules that prevent network traffic based on protocol, source/destination address, and/or source/destination port. Firewalls can implement access control lists and prevent the use of insecure protocols, such as blocking all traffic on TCP port 23 (Telnet’s default port). IDS  An IDS platform can analyse network traffic for patterns and recognize malicious attack patterns. It can create notifications, but it can not block the unwanted packets from entering the network. IDS can be deployed either at the host level or the network level. Host-based monitors (and protects) the specific host (for example a single PC) it is installed on. For example, a HIDS will look at log and config files for any unexpected rewrites. Network-based focuses on protecting an entire network. Usually, dedicated hardware appliances run such software. For example, a NIDS will look at the checksums in captured packets and message authentication integrity of systems such as SHA1. The fact that a NIDS is usually installed on a stand-alone piece of equipment means that it doesn’t drag down the processors of servers or PC’s. The activity of HIDS is not as aggressive as that of NIDS and can be implemented by a lightweight daemon on the computer which does not burn up too much CPU. Neither system generates extra network traffic. In addition to the two main types of IDS, there are also two main subsets of these IDS types: Signature-based Intrusion Detection System (SBIDS). An SBNIDS for example, tracks all the packets passing over the network and then compares them to a database containing attributes or signatures of familiar malicious threats. Anomaly-based Intrusion Detection System (ABIDS). An ABNIDS for example, tracks the traffic of a network and then compares it to an established measure (which could be machine learning based) and this allows the system to find what is normal for the network in terms of Ports, Protocols, Bandwidth, and other devices, thereby quickly alerting administrators about any unusual or potentially malicious activity in the network. IPS  IPS combines the analysis functionality of an IDS with the ability to intervene and prevent the delivery of malicious packets. IPS interact with firewalls and software applications by adjusting settings. Incorrectly calibrated IPSs can cause havoc and bring your legitimate network activity to a halt.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "67a3a3594c80d910bec5514ce8c2a4b4",
    "u": "https://windows.tymyrddin.dev/docs/services/ssh",
    "t": "Use SSH tunnels ",
    "c": "Use SSH tunnels  Secure Shell (SSH) can be used to securely acquire and use a remote terminal session and has other uses as well. You can use SSH to tunnel traffic, transfer files, mount remote file systems, and more. SSH also uses strong encryption, and you can set your SSH client to act as a Socks proxy. Once you have, you can configure applications on your computer – such as your web browser – to use the Socks proxy. The traffic enters the Socks proxy running on your local system and the SSH client forwards it through the SSH connection – this is known as SSH tunneling. This works similar to browsing the web over a Virtual Private Network (VPN) . From a web server perspective, traffic appears to be coming from the SSH server. The traffic between source and the SSH server is encrypted, so you can browse over an encrypted connection as you could with a VPN. You must configure each application to use the SSH tunnel’s proxy. Port forwarding or port mapping is a name given to the combined technique of: Translating the address and/or port number of a packet to a new destination. Possibly accepting such packet(s) in a packet filter (firewall). Forwarding the packet according to the routing table. SSH tunnels can be created in several ways using different kinds of port forwarding mechanisms. And you can protect SSH access with MFA . Tunnelling with local port forwarding  Imagine wikileaks being blocked using a proxy filter in a university network somewhere. An SSH tunnel can be used to bypass this restriction. Let’s name the machine in the university network socially-correct and a home machine home . The home machine has a public IP and is running an SSH server. The student in case has ssh user access on home and socially-correct has access to host:hostport (is not blocked). > ssh - L localport : host : hostport user @home - N where: -L : port forwarding parameters localport : local port (choose a port that is not in use by other service) host : server that has the port (hostport) that you want to forward hostport : remote port -N : do not execute a remote command (you will not have the shell). user : user that has ssh access to the ssh server home : the machine/server running the ssh server that will be used for forwarding/tunneling For example, to create the SSH tunnel execute following from the socially-correct machine: > ssh - L 9001 : wikileaks . org : 80 user @home Open a browser and go to http://localhost:9001 to see if the tunnel is working. The SSH client at socially-correct will connect to the SSH server running at home (usually running at port 22) binding port 9001 of socially-correct to listen for local requests thus creating an SSH tunnel between home and socially-correct. At the home end it will create a connection to wikileaks.org at port 80. So socially-correct doesn’t need to know how to connect to wikileaks.org. Only home needs to worry about that. The channel between socially-correct and home will be encrypted while the connection between home and wikileaks.org will be unencrypted. The home-to-wikileaks.org connection is only made when the browser makes the request, not at tunnel setup time. The SSH man pages say: -L port:host:hostport specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side. This works by allocating a socket to listen to port on the local side, and whenever a connection is made to this port, the connection is forwarded over the secure channel, and a connection is made to host port hostport from the remote machine. Port forwardings can also be specified in the configuration file. Only root can forward privileged ports. IPv6 addresses can be specified with an alternative syntax: port/host/hostport -N Do not execute a remote command. This is useful for just forwarding ports (protocol version 2 only). Local port forwarding can also be used to set up a VNC session between socially-correct and a home server. From socially-correct : > ssh - L 5900 : localhost : 5900 user @home The localhost is relative to the gateway (home in this case), not the machine from where the tunnel is initiated. So this will make a connection to port 5900 of the home computer where the VNC client would be listening. Reverse tunnelling with remote port forwarding  To be able to SSH from the Internet into a machine behind a firewall, you need the machine in question to open an SSH connection to the outside world and include a -R tunnel whose “entry” point is the “remote” side of his connection. What if we wish to connect to an internal university website from home with a set-up like above in tunnelling with local port forwarding? The university firewall is blocking all incoming traffic. We can connect from home to the university internal network so that we can browse the internal site. We can initiate the tunnel from the socially-correct computer behind the firewall. This is possible since only incoming traffic is blocked and outgoing traffic is allowed. The client will now be at the home computer and instead of using the -L option, the -R option, which specifies a reverse tunnel is to be created, is used. From socially-correct : > ssh - R 9001 : internalsite . org : 80 user @home The SSH client at socially-correct will connect to the SSH server running at home creating an SSH channel. The server will bind port 9001 on the home machine to listen for incoming requests that are then routed through the created SSH channel between home and socially-correct . Now it’s possible to browse the internal site by visiting http://localhost:9001 in a web browser on the home machine. The socially-correct machine for work at the university will then create a connection to internalsite.org and relay back the response to home via the created SSH channel. Even though the traffic is encrypted, the name resolution may not be encrypted => DNS leakage. Programs like firefox allow you to ensure that there is no such DNS leakage . For example, in Firefox, browse to about:config and make sure the setting for network.proxy.socks_remote_dns is set to true. Dynamic port forwarding  Dynamic port forwarding allows for configuring one local port for tunnelling data to all remote destinations. This requires Socket Secure SOCKS. At the client side of the tunnel a Socks proxy would be created and the application uses the Socks protocol to specify where the traffic should be sent when it leaves the other end of the ssh tunnel. In a set-up like used in local port forwarding and reverse port forwarding, from the socially-correct machine at university: > ssh - D 9001 user @home SSH will create a Socks proxy listening in for connections at local port 9001 and when receiving a request routes the traffic via the SSH channel created between socially-correct and home. Configure the browser to point to the Socks proxy at port 9001 at localhost .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "69f8214c7ea66b98b10489a415babd2f",
    "u": "https://windows.tymyrddin.dev/docs/services/messaging",
    "t": "Use a secure messaging service ",
    "c": "Use a secure messaging service  A secure messaging service is a critical tool for private and secure communications. In most countries, it is safe to assume that telecoms are recording all SMS message traffic. Signal is not as strong on privacy as it is on security. It collects some metadata, and relies on central servers to manage message flow and hold the metadata it does collect. Session is a fork of Signal. No geolocation data, device data, or metadata is collected. The Session network is decentralized, with no single point of failure, and no main server for bad guys to hack. Session moves messages using an onion routing system. And make it the default SMS messenger.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "45003c4ecb38760c6fcb676d6a468648",
    "u": "https://windows.tymyrddin.dev/docs/services/browsers",
    "t": "Secure browsers that protect your privacy ",
    "c": "Secure browsers that protect your privacy  DuckDuckGo Desktop browser for Windows focuses on privacy that is not based on Chromium (as most would expect). Instead it relies on OS-provided rendering engines to build the browser (mostly WebKit). This makes it possible to remove all the unnecessary stuff usually available with popular web browsers. LibreWolf is a fork of Firefox focused on privacy, security, and freedom, only available for desktop operating systems. If the browser you choose is less secure and privacy-friendly, lock down the browser and the software it can invoke.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4c3039cfd865ecb09ac81778a9f7b041",
    "u": "https://windows.tymyrddin.dev/docs/privacy/devices",
    "t": "Turning devices on and off ",
    "c": "Turning devices on and off  Adversaries can try to gain access with trojans - invisibly-installed malware that gives the adversary administrative control over targeted computers, including, the ability to remotely control devices. Depending on your location and context, you may want to turn devices off and later on again. Examples  Turning cam off/on  There a lot of scenarios where hackers have gained access to the camera even without the active light illuminated. It is better to have computer camera switched off. Here are the steps to disable camera access: Go to Settings -> Privacy From the left menu click on Camera and toggle the button to turn off the camera access any applications To allow access to any specific applications that need camera access, under the “Choose app that can access and send email” select the application and toggle for camera access Other devices can also be turned on and off in a similar way.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9b25d4aba1bbfe7b3027e78196094c73",
    "u": "https://windows.tymyrddin.dev/docs/data/file-encryption",
    "t": "File encryption ",
    "c": "File encryption  Filesystem level encryption, often called file/folder encryption or stacked level encryption, is a form of disk encryption where individual files or directories are encrypted by the file system itself. This is in contrast to full disk or block level device encryption where an entire partition or disk, in which the file system resides, is encrypted. EFS  Windows built-in Encrypting File System (EFS) is a tool that can encrypt all Windows files and folders on NTFS drives. It allows you to encrypt a specific folder rather than the whole hard drive partition . And if you move a file to an EFS-encrypted folder, the file will automatically be encrypted. To enable the EFS tool: Open an elevated Command Prompt. Type (and enter): fsutil behavior set disableencryption 0 To disable this tool, type (and enter): fsutil behavior set disableencryption 1 To encrypt files and folders: Right-click on a file or folder and click Properties. Click the Advanced button in the next window. Check the Encrypt contents to secure data box and click OK. VeraCrypt  VeraCrypt is a fork of the discontinued TrueCrypt project. It is a free and open-source utility for on-the-fly encryption (OTFE). The software can create a virtual encrypted disk that works just like a regular disk but within a file. It can also encrypt a partition or (in Windows) the entire storage device with pre-boot authentication.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1b1730c44779494cbed14eb1ad7dd7b7",
    "u": "https://windows.tymyrddin.dev/docs/services/dns-servers",
    "t": "Use alternative DNS servers ",
    "c": "Use alternative DNS servers  When you don’t set up DNS servers on your computer or router, your DNS queries will run on your ISP’s DNS servers. Without VPN (with killswitch and/or killswitch using routes ), DNS requests are most likely sent unencrypted, which can lead to common DNS attacks. Domain hijacking (Redirection) DNS flood attack (a type of DDoS attack) DNS spoofing or DNS cache poisoning DNS hijacking (malware infection on a local device to hijack DNS to redirect traffic to a phishing site) And any man in the middle of your traffic can see your online behaviour and the websites you visit. Your ISP’s DNS servers see every search you make in your browser. Using your ISP’s DNS servers as default DNS servers doesn’t do anything for security or privacy. Alternative DNS servers  OpenNIC is a group of volunteers who run an alternate DNS network offering free DNS servers. Depending on your location, you are offered different servers. OpenNIC offers DNS neutrality (it does not censor content), and you get the right to choose how much data OpenNIC logs. OpenDNS is a cloud-based service offering three solutions in their Home package, two of which are free. To connect with your nearest DNS server, and for faster page load times, it uses anycast routing. DNSWatch also offers DNS neutrality and does not log any DNS queries or record history. Quad9 DNS blocks malicious and suspicious domains using security intelligence from a group of companies to improve security. They do keep logs on some activity. Use Wireshark to check for leaks  To check if you have DNS leaks, fire up Wireshark : Start capturing on eth0 and connect to the VPN. After capturing either a fixed number of packets, or an amount of data or for a specific time period, go to //Statistics -> Endpoints// There should only be one public IP address, namely that of the VPN server that you’re connected to. The ‘’10.0.2.15’’ in this image is a local address.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "169506f71b9a74b01ed465b56315ef73",
    "u": "https://windows.tymyrddin.dev/docs/data/restore-point",
    "t": "Create a restore point ",
    "c": "Create a restore point  In case the Windows machine is compromised, going back to a previous restore point may fix the issue. Type Create a restore point in the search box System Properties -> C drive and click the Create button Add a description to the system restore point and click Create System Restore Point Creating Process The system restore point process will begin (wait, wait, wait for it) The restore point was created successfully",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6bc31f120d9493e4f5068c1cf9e1c573",
    "u": "https://windows.tymyrddin.dev/docs/privacy/hexeditors",
    "t": "Remove metadata with hex editors ",
    "c": "Remove metadata with hex editors  The hexadecimal notation is almost universally used in computing - and not without a reason. There are sixteen hex digits - 0 to 9, and A to F (which correspond to decimal values 10 to 15), and each hex digit represents exactly four bits. Exactly two hex digits represent a byte, which can have a value from 00 to FF. A hex byte is the only kind of object a computer handles, and hex bytes are used to represent anything. For example, a hex byte 50 may represent the capital letter P, the processor command push eax, the decimal number 80, a colour component with 50% brightness, or whatever else lives in the digital world. And that means we have editors, hex editors, that can be used to view and change files, all files, on a very low level. As in, they can be used to remove metadata from any and all files. Usage in general  backup the file before using a hex editor on it. switch to ASCII mode, turn off “read only” mode, and start searching through the file. For example, when scrubbing pdf’s from creation and modification information look through the entire file for “created” (metadata appears in the PDF file more than once). If and when you find metadata, change to fake data or delete. Then repeat your search again for the terms “create”, “creation”, “modified”, and “modify”, and similarly either replace or delete the dates, once again being sure to repeat each search so that any potential multiple instances of the field can be located and modified or blanked out. Native  On Windows, open file Properties in Windows Explorer for each file. In the Details tab, click “Remove Properties and Personal information”. Choose to “Remove the following properties from this file”, select which metadata to remove, and press OK. There may still be other data though. Windows do not have any pre-installed hex editor in their operating systems. Hex files can be stored in the text format or binary format. If you have a text-based hex file, then it can be opened with text editors like notepad. Using software  If you have a binary hex file, then the only option to open them is by using the third-party hex editing programs. HxD Freeware Hex Editor and Disk Editor Free Hex Editor Neo",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ca9080eac4745488e392794eef1378bc",
    "u": "https://windows.tymyrddin.dev/docs/services/readme",
    "t": "Introduction ",
    "c": "Introduction  Take control over services, applications, and their permissions. Start, Stop, Restart, Enable, and Disable Services Unwanted application suggestions Restrict which apps can run (without your permission) Restrict access to apps Block applications Secure browsers that protect your privacy Use a secure messaging service Use a secure email service Use SSH tunnels Use a VPN service Make a VPN killswitch using routes Use a Tor proxy Change MAC address Renew IP lease Edit hosts file",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4ee996df3117043847d96cc4c1d642aa",
    "u": "https://windows.tymyrddin.dev/docs/authentication/standard-user",
    "t": "Use a standard user account ",
    "c": "Use a standard user account  Users with administrator privileges have complete control over the OS and their apps have unrestricted access to the computer. Even when keeping up with system and antivirus updates, following the best security practices, and being careful using the internet and checking email attachments, there is still a chance that malware could gain access to your device. Running as administrator, an exploit can more easily gain control of your system. It can install rootkits, keyloggers, and other suspect services without you knowing. A malicious program can also modify and delete files, and even prevent devices from booting. Consider setting up a separate standard user account with fewer privileges for day-to-day use. This can block some attacks and make others much harder. Create a new administrator account  Settings -> Accounts -> Family & other people. Under Other People, click the Add someone else to this PC option. Click the “I don’t have this person’s sign-in information” link. Click the “Add a user without a Microsoft account link”: Because the account will only be used for administrative tasks you do not need to create a new Windows 10 account using a Microsoft account. Type the username and password you want to use for the admin account. Next Select the newly created account, and click Change account type. In the “Account type” drop-down menu, select Administrator. OK. Change your user account type  An Administrator account is a member of the Administrators and Users groups, which means that to make the account a Standard User, you only need to remove your account from the Administrators group. Sign-in to the newly created admin account to change your user account type to Standard User using the Settings app. Type Computer Management in search box and click the result to open the console. Go to System Tools -> Local Users and Groups -> Users Double-click your user account — the one you want to switch to remove the privileges from. Click on Member Of tab. Select Administrators from the list. Click the Remove button. Apply and OK. Sign out and sign back in to apply the changes. You have turned your account into a standard user account with fewer privileges and apps will not be allowed to make system changes, making your system more secure against malware. When you need to perform a task that requires administrator rights, you can right-click the app and use the Run as Administrator option with the credentials of the administrator account you just created.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3ac32b60ccebed4794b277ebc2d4395f",
    "u": "https://windows.tymyrddin.dev/docs/authentication/login",
    "t": "More secure login ",
    "c": "More secure login  Switch to a local login account  Windows 10 Home will default to your Windows account, as this makes it easier to log in across all devices with one account. If, say, your mail credentials were compromised, then your machine would also be compromised. Switch your Windows 10 device to a local account Set password if not exists  When you purchase a new Windows computer or if you have reformatted the computer with a fresh copy of Windows, the system will allow the user to login automatically without having the need to provide a password. This can prove costly because it gives opportunity for anyone to access information from your computer. It is perhaps annoying to have to enter your password every boot, but it is a small price for making it harder for someone to get into your account and access your system: Settings -> Account From the left column select Sign-in options Under Password click on Add, provide the password you wish to have and click on Finish This will ensure that the computer is password protected. Add Secure Sign-In  Programs such as malware and viruses can gain access to your login information by imitating the sign-in screen. As a user, it is impossible to tell whether the sign-in screen is safe to use or not. Windows 10 Secure Sign-In is not the “one solution to solve all problems”, but it cuts the root of this particular problem by blocking programs from displaying a fake sign-in screen. Type netplwiz in the search box and press Enter. This will open the User Accounts panel. Select the user that you want to enable Secure Sign-In for. Go to the Advanced tab and select “Require users to press Ctrl + Alt + Delete”. Apply Now, every time you start your computer, Windows will require you to press the key combination before entering your login details.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f6f9a6fdf733e670f6b10ea0b0727c55",
    "u": "https://windows.tymyrddin.dev/docs/malware/clean-machine",
    "t": "Malware detection and removal ",
    "c": "Malware detection and removal  Automagically  If you are on a private machine, choose your own scanner. Be careful, have a look at AV Comparatives’ test results for Windows . In an organisation, likely you can leave this to the SOC or IT team . Manually  Disconnect from the internet. Switch to Safe Mode  Go to Updates & Security -> Recovery Choose “Restart now” in the Advanced startup section When your machine restarts, a blue screen with a few options will appear Troubleshoot -> Advanced options -> Startup settings -> Restart Another blue window appears, find the “Enable Safe Mode” option. Click number 4 on your keyboard. Check for and remove unwanted applications  Go to Control Panel -> Uninstall a program Possibly unwanted apllications (bloatware, and some can even be considered malware) Check with DuckDuckGo whether unknown applications are legitimate or not (mind the spelling) If the issues are recent, you can click on “Installed on” to find any newly installed programs that might be suspicious If they are not legitimate, or if you are suspicious, delete them and empty your Trash. Note that this does not help much with trojans , evil files made to look like legitimate apps. Delete temporary files  Open the RUN window Type “%temp%” and click “OK” Delete all files and folders that are in this destination Empty trash Connect back to the internet. Note that this does not remove malicious Registry entries which can make the malware persistent. Fail  If all else fails, go to a previous restore point or backup. If that fails too, the BIOS or restore points or backups may even be infected. It is possible for malware to persist across a re-format and re-install, if it is sufficiently ingenious and sophisticated: if for example, it can persist in the BIOS, in the firmware for peripherals (some hardware devices have firmware that can be updated, and thus could be updated with malicious firmware), or with a virus infecting data files on removable storage or on your backups. Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e1681aa7ae260d647c2e84605075a8d7",
    "u": "https://windows.tymyrddin.dev/docs/authentication/passwords",
    "t": "Make that more secure passwords ",
    "c": "Make that more secure passwords  Do not use a password you have used in the past. Try to change the password at least every 3-6 months. Create a password that is at least six characters long. Create a password with both digits and letters, uppercase, and lowercase. Do not create a password with a family name, name of your pet, hobby, sports teams, favourite TV show, etc. Do not create a password that is your phone number, house number, etc. Create a password that is not in a dictionary. Create passwords with spaces and/or magics (&*^%$#) in them (if allowed). Have a password manager create a password for you.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "535f538851f59b549c4b49976204cd7d",
    "u": "https://windows.tymyrddin.dev/docs/opsec/email-use",
    "t": "Use email securely ",
    "c": "Use email securely  Invented by Ray Tomlinson, email first entered limited use in the 1960s and by the mid-1970s had taken the form now recognized as email. It evolved, and so did its parasites: Email “spam”. A number of effective anti-spam techniques now largely mitigate the impact of spam by filtering or rejecting it for most users, but the volume sent is still very high, and increasingly consists not of advertisements, but malicious content or links. Phishing emails continue to be one of the most common initial attack vectors employed by attackers for malware delivery. Attacking the human element continues to be extremely effective. To infect a system, the attacker simply has to persuade a user to click on a link or open an attachment. Email spam and phishing methods typically use spoofing to mislead the recipient about the true message origin. Laws in many countries either allow or have loopholes in an existing law that allow the government to access stored emails without a warrant, and intelligence agencies can do and actually do so. Internet as well as intranet email may travel and be stored on networks and computers without the sender or the recipient having any control. During the transit time it is possible that third parties read or even modify the content. The ease and impersonality of email communications mean that the social norms that encourage civility do not exist and may be forgotten. Flaming, bullying, … To stay sane: Do not use public computers to access email with sensitive information. If you are not in a safe neighbourhood, use a VPN or Tor anonymity network to encrypt traffic from the user machine to a safer network. Use a privacy-focused email application (make sure not to use your own name or other personal information) GPG, PGP, SMEmail, can be used for end-to-end message encryption.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "250d9836fe98cacf97e1dd912077f363",
    "u": "https://pap.tymyrddin.dev/docs/mitre/c2",
    "t": "Application Layer Protocol: Mail Protocols ",
    "c": "Application Layer Protocol: Mail Protocols  MITRE ATT&CK T1071.003 reads: Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Analyse packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Network detection notes  Other protocols can also be used to hide in. Deep learning models can probably identify modified and incomplete C2 traffic packets and discover new variants of C2 traffic.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ccb9250e80dfc3c1e30ed4ab2d527939",
    "u": "https://pap.tymyrddin.dev/docs/independent/drive-by",
    "t": "Drive-by download ",
    "c": "Drive-by download  A drive-by download attack refers to the unintentional download of malicious code to your device that leaves you open to an attack. This can happen while browsing a legitimate website or through a malicious advertisement displayed on an otherwise safe site. This type of attack comes in authorised and unauthorised flavours. With the latter, for the device to become infected it is not necessary to click on anything, to download, or to open a malicious email attachment. It just happens magically. Drive-by downloads can install non-malicious potentially unwanted programs or applications (PUPs/PUAs in mobiles, which are clean, but may actually be madware at its worst) or malware-loaded attacks with intention to hijack a device, install spyware, or ruin data or disable the device (a targeted personal attack). Authorised downloads  Adversary creates an online message, ad, or a legitimate program download. You click the link, download the software, etc. You do not opt out of extra software, or are sent to a malware-infested site. Adversary and malware take control of your data. Unauthorised downloads  Adversary compromises a legitimate web page using a security flaw in website and adds a malicious component. You visit the page, and it finds your device’s security flaw. The flaw is exploited and malware is downloaded to your device. The adversary has control over your device. Prevention  Use your admin account for app installations. Admin privileges are necessary for drive by downloads to install without your consent. Use a second non-admin account for daily use. Keep browser and operating system up to date. New patches help seal gaps in defenses. Install immediately when released. The more code on the device, the more susceptible it is to infections. Prune often. Only keep what you trust and use often. Use a firewall and virus scanner on a PC and an internet security software solution on phones. Avoid websites that may contain malicious code. Sites that offer file-sharing or mature content are common points of infection. Carefully read and examine security popups on the web before clicking. Scammers use deceptive popup ads on desktop and mobile browsers that look like legitimate alerts. Watch for typos, odd grammar, and grainy images. Use an ad-blocker. Drive-by download attacks often use online ads to upload infections. Using an ad blocker can help reduce your exposure to this type of attack.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9541dc23a0b901630afebbb1ff900caf",
    "u": "https://pap.tymyrddin.dev/docs/mobile/tracking",
    "t": "Location tracking ",
    "c": "Location tracking  GPS-enabled devices can be small and easily hidden, and an abuser can hide a device in handbags, clothing, or car. The GPS in a phone can also be used to track a survivor (of abuse). The location information through the GPS in a phone is not automatically available to another person, but there are a variety of ways that an abuser could get that information. Tool Claims Platform AirTag Item trackers Android and Apple devices Tile Item trackers Android and Apple devices Cerberus Phone tracker Android The latest example of GPS-enabled devices is the AirTag, a small, puck-shaped tracker meant for locating misplaced or stolen items with the Find My app . AirTags use ultra-wideband technology and take advantage of Apple’s existing network of devices, which work as crowdsourced beacons to ping each other in order to determine your missing item’s location. Tracking an AirTag requires iOS 14.5 (iPhone or iPad). Precision Finding requires an iPhone 11 or 12. AirTags are being used by stalkers for tracking survivors, that goes public, Apple makes a few promises, and Google rolls out a safety feature on Android to be alerted automatically if an unknown Bluetooth device is travelling with them — a sign that could point to the possibility that someone is stalking them using an Apple AirTag or other Bluetooth tracking device. Users will also be able to manually scan for trackers with their Android device and be guided through tips on what to do next if a tracking device is found. Resources  How to track someone on Google Maps without them knowing , Brinksley Hong, Updated: September 19, 2022 Secretly Find & Track Someone’s Location on Google Maps , Jason Thompson, June 27, 2023 Android will now warn about unknown Bluetooth trackers, like AirTag, travelling with you , TechCrunch, July 27, 2023",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6004a462ead4f08aa0e526c2c483ea36",
    "u": "https://pap.tymyrddin.dev/docs/mobile/malware",
    "t": "Mobile malware ",
    "c": "Mobile malware  The most common types of mobile malware threats: “Advertising Click Fraud” is a type of malware that allows an attacker to hijack a device to generate income through fake ad clicks. Cryptomining malware enables attackers to covertly execute calculations on a another person’s device – allowing them to generate cryptocurrency. Cryptomining is often conducted through code hidden in squatted apps . Spyware and stalkerware offer access to data from infected victim devices and are often used for intelligence collection. These can typically access information such as installed applications, call history, address books, web browsing history, and SMS data. Some may also be used to send SMS messages, enable device cameras, and log GPS data. Bank trojans are often disguised as legitimate applications and seek to compromise users who conduct their banking business — including money transfers and bill payments — from their mobile devices. This type of trojan aims to steal financial login and password details. Ransomware is a type of malware used to lock out a user from their device and demand a “ransom” payment — usually in untraceable Bitcoin. Once the victim pays the ransom, access codes are provided to allow them to unlock their mobile device. Or not. Lists  Malware for iOS (iPhone wiki) Android malware apps master list (Phone arena) Indicators  Your battery is draining faster than normal Your phone is behaving abnormally Phone starts lagging You find strange apps being installed on your device, automatically Your device is getting heated up too quickly Your device may show you some kind of warning message Increase in data usage There may be calls you did not make or text messages you did not send Apps crash regularly You suddenly get pop-ups and ads banners in the notification area and the keyboard area Unexpected charges for SMS to premium numbers or purchases with your credit card you did not send or do Detection and mitigation (general)  Android iOS Prevention (general)  Keep applications updated so that you are running the version with the latest security patches and updates. Application developers will often release a new update or version if their software is compromised in any way. Install mobile security software (works like antivirus software on a workstation). The majority of mobile phones do not include firewall protection. Firewalls not only protect your online privacy when browsing, but can be used to only allow authorised apps to access the internet through a set of firewall rules. Many mobile devices are compromised when they are lost and stolen. Use a passcode to lock the screen. Only download apps from stores that vet applications: Apple App Store and Google Play have been vetted to ensure they are safe. This is not a guarantee that no app will slip through the vetting process. For example, attackers managed to distribute a fake “WhatsApp” app to millions of mobile users via the official Google Play Store by simply adding a Unicode-encoded space at the end of WhatsApp’s ID, and a fake app named Teligram sneaked into the Google Play, pretending to be a new version of the real Telegram app, but some vetting is better than the wild west without sherrif, and the vetting process is continuously being improved also.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1d7a6c0c42725729dd08d92ba26e46fe",
    "u": "https://ios.tymyrddin.dev/docs/malware/clean-machine",
    "t": "Finding the culprit and removing it ",
    "c": "Finding the culprit and removing it  If you think it will turn into a “legal issue”, DO NOT shut the device down or try to remove the malware, and call in a first responder instead. Detecting  If the symptoms appeared immediately after installing an app, that app may be the guilty party Look for unfamiliar apps: Swipe through the screen and look for the apps that you don’t remember installing. To see a list of every app you’ve installed from the App Store, tap the Apps icon at the bottom of the store, tap your profile photo, then tap Purchased . If there’s an app on your phone that is not in this list (and does not come from Apple), it is likely malware. Find out whether your phone is jailbroken: Check for the Cydia app on the iPhone in question. You can use Spotlight to search for it and if it comes up, the iPhone is jailbroken. Check for modifications. The whole point of jailbreaking an iPhone is to add features to it that are not available out of the box. They may not be obvious but a cursory look through the device can give clues. Go to Settings -> Battery and monitor usage . Tap on Show Detailed Usage to view the breakdown of foreground and background usage. If you find an app that you don’t recognise, it is a candidate for removal. Go to Settings > Mobile Network and scroll down to Mobile Data . Is that level normal for your device? Removing  Try these first  Restarting your iPhone can, in some cases, get rid of malware. Unlikely, but can. How to do this depends on your iPhone. Clear History & Website Data: Open Settings on your device and tap Safari . Tap Clear History and Website Data . Confirm. Deleting an app and its configuration profile  Deleting an app Touch and hold the app until it jiggles. Then tap the delete button in the upper-left corner of the app to delete it. If you see a message that says, “Deleting this app will also delete its data,” tap Delete . If the app has a configuration profile, delete it. Go to Settings -> General -> Profiles or Profiles & Device Management , then tap the app’s configuration profile. Then tap Delete Profile . If asked, enter your device passcode, then tap Delete . Restart Fail  If this did not work, do a Reset to factory settings Make an iTunes backup or iCloud backup Go to Settings -> General -> Reset -> Erase All Contents and Settings Enter your passcode to confirm the reset Set up device again Restore the backup to your device. If for any reason you are not able to restore, it most likely contains malware. Then restore one of the previous backups to your device instead, and delete the infected backup from iTunes or iCloud. If a factory reset did not work, replace device. Most cases of malware are user-made and involve acts like jailbreaking, and Apple’s warranty does not cover this issue. Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "54d3f06933de6f428f4f407db2aa148e",
    "u": "https://ios.tymyrddin.dev/docs/services/browsers",
    "t": "Browsers that protect your privacy ",
    "c": "Browsers that protect your privacy  DuckDuckGo Private Browser offers seamless protection while you search and browse - plus access to free tracking protection for your email inbox, secure password management, new beta features, and more. Brave is fast, secure, and privacy-focused by default. It has a built-in ad blocker and browser fingerprinting protection, while also giving you access to numerous add-ons and extensions. Onion browser enables you to use Tor without needing to install the Tor proxy . It is open source, uses Tor routing, and is developed by someone who works closely with the Tor Project. However, Apple requires browsers on iOS to use something called Webkit, which prevents Onion Browser from having the same privacy protections as Tor Browser. Tor Browser is not in the Apple Store. Out of the “big” and “mainstream” browsers, Safari is more secure. If you continue to use it, you will still have to increase your data privacy and security while using Safari. If the browser you choose is less secure and privacy-friendly, lock down the browser and the software it can invoke. Articles  Browser First-Run: iOS Edition Avoidthehack: How to Configure Safari for Privacy on iOS Devices (UPDATED FOR iOS 14)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3d33b570c71536d4039825757b1701e9",
    "u": "https://ios.tymyrddin.dev/docs/guards/readme",
    "t": "Introduction ",
    "c": "Introduction  Your iPhone lets you use content blockers to block trackers, cookies, ads and other malware. But these only apply to Safari. They do nothing to block other applications from communicating data they have on you, from your location, shopping times, work hours, sleep patterns and even passwords. Lockdown Privacy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2252de440ea5b63ba4c6324b2064b78e",
    "u": "https://ios.tymyrddin.dev/docs/opsec/autojoin",
    "t": "Not auto-joining Wi-Fi networks ",
    "c": "Not auto-joining Wi-Fi networks  Auto join is a feature that allows your phone to automatically join any Wi-Fi network it already has the credentials for, or open Wi-Fi networks, without having to ask you to do anything. This can be a time saver at home and at work. But, it carries two major issues: It can cause your phone to randomly leave a stronger Wi-Fi network for a weaker Wi-Fi network that has come into range. Both Android and iOS developers have tried to stop their operating systems from doing this, but have only had limited success. When your phone switches over to a weaker Wi-Fi, it terminates your first Internet connection, interrupting your Internet usage. Once on the weaker network, performance goes down. When you automatically join open public Wi-Fi networks you put your data and privacy at risk. You do not know that the network is secure. You could be joining a clever network clone (rogue wireless access point) that is really a MitM attack trying to steal your passwords and usernames to sensitive accounts. On iOS devices, you have to set this option for each Wi-Fi network individually. Go to Settings -> Wi-Fi. You will see a list of Wi-Fi network profiles. Click the ones you want to not auto join with and toggle the switch to auto join.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "50e4088250a2c2b452319c43aae526d9",
    "u": "https://ios.tymyrddin.dev/docs/malware/scanner",
    "t": "Installing a third party security app ",
    "c": "Installing a third party security app  Apple designed the iPhone’s software (iOS) in such a way that it is very difficult for malware, including viruses, to penetrate its defences. iPhone apps are sandboxed, an app can not access the data of another app, and iOS has several built-in security features to protect your device from malware threats. Meaning you do not need to install an antivirus app on iPhones and iPads. But do consider installing a third party security app, because iOS security apps cannot act as traditional “antivirus” scanners, while antivirus is only one type of the many threats that exist today . The built-in security apps can not protect your phone from other threats, like phishing emails disguised as Apple ID alerts, and iPhone malware does exist .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5180e688f36124ebc5757fadbc3fb724",
    "u": "https://ios.tymyrddin.dev/docs/services/messaging",
    "t": "Using more secure messaging services ",
    "c": "Using more secure messaging services  In most countries, it is safe to assume that telecoms are recording all SMS message traffic. And make it the default SMS messenger. Install a secure messanger app and make it the default SMS messenger. Signal is not as strong on privacy as it is on security. It collects some metadata, and relies on central servers to manage message flow and hold the metadata it does collect. Session is a fork of Signal. No geolocation data, device data, or metadata is collected. The Session network is decentralized, with no single point of failure, and no main server for bad guys to hack. Session moves messages using an onion routing system. Note : Signal no longer accepts SMS messages.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "410bf4a026203e9b3554c890f24c5eba",
    "u": "https://ios.tymyrddin.dev/docs/opsec/ooni",
    "t": "Measuring Internet Censorship ",
    "c": "Measuring Internet Censorship  The OONI Probe is a free app to measure Internet Censorship. With this app, you can examine the blocking of websites and instant messaging apps, measure your network’s speed and performance, and check whether systems that could be responsible for censorship and surveillance are in your network. OONI Probe is developed by the Open Observatory of Network Interference (OONI), a free software project (under The Tor Project) that aims to uncover internet censorship around the world.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "07856b450837919911a40533d588b478",
    "u": "https://ios.tymyrddin.dev/docs/malware/readme",
    "t": "Introduction ",
    "c": "Introduction  iOS malware is not as common as malware for other devices, but any device always has a risk of getting infected. Phones contain more sensitive information than PC’s and Workstations. It usually contains pictures, credit cards, private messages, and other valuable data. Mobile malware is a generic term for malicious software designed to target mobile devices (smartphones, tablets, and iOT devices) with the goal of gaining access to private data. Apparently it is still not as pervasive as malware that attacks traditional workstations, and that may have to do with the fact that SOC teams and SIEM stacks have focused mostly on detecting workstation and corporate network threats (before Covid and the BYOD wave), and that it was only a matter of time before hackers switched tactics. It is definitely a recognised growing threat and needs to be addressed. Threat awareness Installing an AV scanner Finding the culprit and removing it Ransomware",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5e975f2ca630b04ead50b24758dfbbe5",
    "u": "https://ios.tymyrddin.dev/docs/data/encryption",
    "t": "Encrypting the data ",
    "c": "Encrypting the data  Apple’s iPhone, iPod touch, and iPad smart devices all support basic built-in encryption when a passcode is enabled. To enable encryption: Settings -> Face ID & Passcode Make sure passcode is enabled. Data protection is enabled should be displayed at the bottom of the Face ID & Passcode screen. iOS’ data encryption does not prevent authorities from accessing your backup on Apple’s servers.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f96930f5255a0313f0bea56285edda5b",
    "u": "https://ios.tymyrddin.dev/docs/services/audit-and-block",
    "t": "Auditing and blocking the access apps have ",
    "c": "Auditing and blocking the access apps have  When considering if an app should continue to have access to certain types of your data or hardware, ask yourself if you use features in that app that requires such access? If you never check yourself into places in Facebook, why should the Facebook app continue to have access to your location data (which can be used for tracking your movements)? Go to Settings -> Privacy You will see a list of types of data, from location data to photos and items like camera and microphone. Tapping on an item takes you to a list of apps that have access to that type of data. To restrict an app from accessing that data, toggle its switch to off.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "534b302248435ff69e0e1981219b69c5",
    "u": "https://ios.tymyrddin.dev/docs/guards/lockdown",
    "t": "Lockdown Privacy ",
    "c": "Lockdown Privacy  The Lockdown Privacy: VPN & Proxy does all its blocking locally, on your device, and not through centralised servers. The app comes with several rules already in place, and it is easy to add more. It does use the iOS VPN framework, but the VPN server runs on your device. You have to add your own addresses to the block list. Block list  api.mixpanel.com data.flurry.com onesignal.com app-measurement.com sb.scorecardresearch.com Note: Apart from the built-in list, there is no way to detect what iss being shared by other apps on your devices.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3025db3507bb6b4a3c19132dcd8cabf4",
    "u": "https://ios.tymyrddin.dev/docs/services/ssh",
    "t": "Using SSH tunnels ",
    "c": "Using SSH tunnels  Secure Shell (SSH) can be used to securely acquire and use a remote terminal session, tunnel traffic, transfer files, mount remote file systems, and more. SSH uses strong encryption, and you can set your SSH client to act as a Socks proxy. The traffic enters the Socks proxy running on your local system and the SSH client forwards it through the SSH connection – this is known as SSH tunneling. Once you have set it up, you can configure applications on your computer – such as your web browser – to use the Socks proxy. Each application must be configured to use the SSH tunnel’s proxy. This setup works similar to browsing the web over a Virtual Private Network (VPN) . From a web server perspective, traffic appears to be coming from the SSH server. The traffic between source and the SSH server is encrypted, so you can browse over an encrypted connection as you could with a VPN. Port forwarding  Port forwarding or port mapping is a combined technique of: Translating the address and/or port number of a packet to a new destination. Possibly accepting such packet(s) in a packet filter (firewall). Forwarding the packet according to the routing table. SSH tunnels can be created in several ways using different kinds of port forwarding mechanisms. On iOS you can use Terminus, a terminal & SSH client. App Store Termius: Terminal & SSH client",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "32f86a7a3e9a5f2d9a6f69aa2dab8975",
    "u": "https://ios.tymyrddin.dev/docs/data/nuke",
    "t": "Worst case, nuking all data ",
    "c": "Worst case, nuking all data  If the worst happens and someone steals your phone, it would be good to know that the thief will not have endless opportunities to guess your passcode. Go to Settings -> Face ID & Passcode ( Touch ID & Passcode on an older iPhones) At the bottom of the screen, toggle the Erase Data switch to on. Now all data on the device will be deleted if the wrong passcode is entered 10 times in a row. Note: Allowing location data and enabling guest accounts to locate the phone could be a strategy, because it does not require location tracking turned off.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cf858f23f54a57da8b40d02697e3a054",
    "u": "https://ios.tymyrddin.dev/docs/privacy/search-engine",
    "t": "Changing default search engine ",
    "c": "Changing default search engine  By default, Safari uses Google’s search engine to return results when you do a web search. Google pays Apple billions every year for it to be the default search engine. And Apple also allows you to choose a different search engine, including offering the privacy-focused DuckDuckGo (its business model does not rely on collecting data about you). Go to Settings -> Safari -> Search Engine . Tap DuckDuckGo .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9c47bbf654081b19aba4ca15c620abd6",
    "u": "https://ios.tymyrddin.dev/docs/services/change-browser",
    "t": "Changing default browser app ",
    "c": "Changing default browser app  iOS devices come with Apple’s Safari browser pre-installed, but you can use a different browser if you wish. Unfortunately, on older iOS versions (< 14), you can not set a different browser as the default, so when you tap links in emails or messages, Safari will open them. Luckily most apps let you lightly tap-and-hold on links to copy the address to paste it into an alternative browser of your choice . If you are running iOS or iPad >14, you can set any third-party browser as the default on your iPhone or iPad. Install your replacement browser app. In the Settings menu, locate the section for the browser you’d like to set as your default. If it has been updated to support Apple’s default browser switching feature, you will find a Default Browser App option in its settings. Tap to make it the default. A checkmark appears to confirm it’s the default.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e9b002f7600bf02de79f3a48f30b290e",
    "u": "https://ios.tymyrddin.dev/docs/authentication/passwords",
    "t": "Automagically creating strong passwords ",
    "c": "Automagically creating strong passwords  If not on: Go to Settings -> Passwords -> Password Options . Turn on AutoFill Passwords . Next time you create an account in an app or at a website, when you select the Create password field, you’ll see iOS has automatically inserted a unique password in the field. Tap the Use Strong Password button to use the recommended password, and iOS will automatically store it in your Keychain . iOS never generates the same strong password twice.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7f39ff499e18f6b072c266c6916cbf09",
    "u": "https://ios.tymyrddin.dev/docs/authentication/sim-pin",
    "t": "Using a SIM PIN ",
    "c": "Using a SIM PIN  Put a PIN in your iPhone SIM . If you do not and the phone gets stolen, thieves can change the iPhone SIM and put it in another unlocked phone. And with the SIM in another phone they can request an SMS code for resetting the password to all your accounts, including iCloud, Facebook, Instagram, Twitter, etc. Even with two-factor authentication enabled, they can use this method to get the code and access your accounts.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "75b7fc14ffcf224a711e56d113918afb",
    "u": "https://ios.tymyrddin.dev/docs/services/readme",
    "t": "Introduction ",
    "c": "Introduction  Auditing and blocking the access apps have Unwanted third party apps (UAPs) Blocking apps from accessing Bluetooth data Checking for unknown configuration profiles Browsers that protect your privacy Changing default browser app Using more secure messaging services Using more secure email services Using SSH tunnels Using VPN services Using Tor proxies Changing MAC address Editing hosts file",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "550c4ee9a2304a2212abb88d5024daed",
    "u": "https://ios.tymyrddin.dev/docs/services/uap",
    "t": "Unwanted third party apps (UAPs) ",
    "c": "Unwanted third party apps (UAPs)  Everything typed on your iOS smartphone goes through your keyboard. This means the keyboard has access to those passwords, private emails, documents, and SMS messages you type on your phone. It can even see your credit card information. The perfect Trojan Horse. Sometimes malicious apps do sneak in, into the Apple Store, so keep yourself informed and research each app before installing. Articles  Snyke: SourMint Wandera discovered 17 malicious click fraud apps hosted on Apple’s iOS app store",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "42d04f7d2a66c1c522bcb182076794c7",
    "u": "https://ios.tymyrddin.dev/docs/opsec/hibp",
    "t": "‘;–have i been pwned? ",
    "c": "‘;–have i been pwned?  ‘;–have i been pwned? (HIBP) is a database of several billion email addresses (and, separately, passwords) that have appeared in a publicly known past data breach. Firefox Monitor is an online service developed by Mozilla. It informs users if their email address and passwords used have been leaked in data breaches, using the database provided by Have I Been Pwned? Check if you have an account that has been compromised in a data breach, and if so, change your password and change it in any other place where you’ve used that password. Better yet, never use a password twice, and consider using a password manager.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "80c40367a9a844324369dc3198018924",
    "u": "https://ios.tymyrddin.dev/docs/authentication/password-reuse",
    "t": "Auditing and changing password reuse ",
    "c": "Auditing and changing password reuse  Password reuse is a security problem. With password reuse auditing you can see which websites you’ve reused passwords on and then give them unique passwords. The real advantage is that it visualizes how vulnerable reusing the same password on multiple sites makes, and creates unique strong passwords for every site and app you use. Go to Settings -> Passwords & Accounts -> Website & App Passwords . This is where the Keychain is located. Authenticate, and you’ll be taken to a list of app and site passwords. Any site or app that has an exclamation mark in a triangle next to it means you are also using its password for another site or app. Tap the symbol Change Password on Website This will take you to that site’s password management screen where you can change your password.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5f844a8ef64db7b24cfd80e583f58099",
    "u": "https://ios.tymyrddin.dev/docs/services/bluetooth",
    "t": "Blocking apps from accessing Bluetooth data ",
    "c": "Blocking apps from accessing Bluetooth data  Bluetooth allows for wirelessly connecting accessories to an iPhone, including anything from AirPods to game controllers. Applications, when getting access to that connection, can track your location in physical space. The apps get this location data from beacons: small devices that can tell when you are nearby based on the Bluetooth signal the phone emits. Beacons in and of themselves are not malicious. They allow for sending location-based alerts to the phone, for guiding you around a museum exhibit. And some apps have also been using these Bluetooth beacon location data for more nefarious purposes, like tracking you without your knowledge. That’s why in iOS 13+, Apple created a new privacy setting showing you just what apps are using your Bluetooth data and gives you the ability to shut off those apps’ access to your Bluetooth connection. Go to Settings -> Privacy -> Bluetooth . You will see a list of all your apps that have access to your Bluetooth data. Toggle the switch next to an app to off (white) to deny it access to your Bluetooth data.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5c212da8fcb1bd829590036d1bda2c3b",
    "u": "https://ios.tymyrddin.dev/docs/services/change-mac",
    "t": "Changing MAC address ",
    "c": "Changing MAC address  A MAC address identifies the device connected to a network and allows the network to track, restrict or allow access based on it. Routers identify and assign static IP addresses based on the MAC addresses of devices. Before you try to change the MAC address, you need to know the value that you want to use. Set the 2’s place bit (the “locally administered” bit) in the first byte, to differentiate it from a guaranteed globally unique MAC address. Usually the first three bytes an unicast MAC address is an “Organizationally Unique Identifier” (OUI) that the IEEE assigned to the manufacturer of your Ethernet device. Manufacturers are required to make sure they keep the last 3 bytes unique. Avoiding all of that knowledge, the MAC address generator tool can generate a valid address for you. Changing it is not possible with versions <14. The iOS 14 update brought with it the Private Address feature that lets you hide your original MAC Address of iPhone. You can enable the private address on your iOS for a Wi-Fi connection. When enabled, your iOS will always use a private MAC for that (public) Wi-Fi network. Connect to the Wi-Fi network you want to hide the iPhone MAC address from. Open Settings . Tap on Wi-Fi . Tap the i icon next to the connected Wi-Fi network. Toggle on Private Address . Reconnect to the Wi-Fi network.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "20c282ebd99be86ccd88212d1edfee6d",
    "u": "https://ios.tymyrddin.dev/docs/authentication/mfa",
    "t": "Using multifactor authentication (MFA) ",
    "c": "Using multifactor authentication (MFA)  Many sites and applications offer multifactor authentication (MFA). With MFA enabled, logging into a website or application requires both a password and a unique code that is texted to your phone number or delivered via an authenticator app. You have to input this code in order to gain access to your account. Even if someone else has your password, they will not be able to break into your accounts if they can not get the code. MFA (alias 2FA) is a pain involving hopping back and forth and copying and pasting. So Apple introduced a feature in iOS 12+ called security code autofill. Now when you log into an app or website where you have MFA enabled, you no longer need to navigate to the Messages app to retrieve your texted MFA code. As soon as the text with the code arrives, it will be routed to the iPhone’s keyboard where you can just tap on the code to autofill it into the security field in an app or website. Security code autofill is built-in, so there is no need to enable it. You will need to enable 2FA on any apps or websites you want to use the security feature with. Enable 2FA on every social media and financial site you use. Note that MFA bypasses are becoming “common”.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0a01d13a8041fd50245788fc1077eb8e",
    "u": "https://ios.tymyrddin.dev/docs/services/edit-hosts-file",
    "t": "Editing hosts file ",
    "c": "Editing hosts file  The hosts file is a system file on a device that lets you map specific domain names to an IP address. If you want to add new entries to the hosts file, you’ll need the IP address of the server that you want to map a hostname to. XXX.XXX.XXX.XXX some.domain.name The hosts file lets you override DNS entries for any domain name. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. Blocking is achieved by setting the IP address of the ad networks to a loopback address like 127.0.0.1 which will not return anything. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. If your device is infected with malware, then your hosts file may be compromised to included unknown entries for known domain names. That is NOT the IP address of your bank! This type of DNS attack is known as DNS pharming, and checking your hosts file can uncover potential infection. iOS devices, such as the iPhone and iPad, use a hosts file to map hostnames to IP addresses. It can not be changed unless you Jailbreak the device Use a portable Wi-Fi router and set iOS cto get DNS from the router and the router will need the custom hosts set up. Tether it to an Android with custom hosts file. And that is most likely not enough in situations where governments are using DNS poisoning to block sites, like in China.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "38fa04167597dbaee0a39ecf48996524",
    "u": "https://ios.tymyrddin.dev/docs/services/profiles",
    "t": "Checking for unknown configuration profiles ",
    "c": "Checking for unknown configuration profiles  Profiles are more dangerous than malware because they give adversaries access to more of the device than just one app, and they are not vetted to the same extent as apps entering the App Store. Go to Settings -> General Check and vet profiles",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cbf5cb88c78cfbc76cbfc5b657f9f3fb",
    "u": "https://ios.tymyrddin.dev/docs/malware/ransomware",
    "t": "Ransomware ",
    "c": "Ransomware  Most ransom messages on iPhone and iPad are scams. If you get a message in your browser, or an SMS or iMessage that your iPhone has been disabled or data has been encrypted, likely it is a scam. Do not pay, clear all browser data or delete the message, and report it to Apple. If not a scam, it is installed as an unremovable management profile from the Internet, sideloaded from an infected computer, or downloaded as the result of jailbreaking the device. Unless your device is jailbroken or using an outdated version of iOS, the most ransomware can do is hide your apps or control settings on your device, not encrypt your data. You will be able to restore your device from backup. Detecting  If many of your apps are missing from your home screen, you may have ransomware on your iOS device. Go to Settings -> General -> Profiles and Device Management and look for unknown management profiles. If your device (phone or pad) is infected, there will be some notification from an app that demands payment. These pop-ups may appear out of the blue, or they may occur when doing a specific action (like pressing the Home button). Try searching for the message you see in a search engine to find out more. Do not pay to get your data back. Even if you pay, there is no guarantee the ransomware will be removed. Try to remove it. If you can not, get help. Removing  Attempt to remove the found culprit management profile. Go to Settings -> General -> Profiles and Device Management , then tap on the management profile to remove. Tap on Remove Profile at the bottom of the screen, then enter your passcode. Backup the device. Power down the device (hard reset). While powered down, connect the device to your workstation. Put it in DFU mode . Choose Restore Device … to reinstall iOS. Restore data from backup. Some apps may need to be reinstalled too. Preventing  Only install apps from the App Store. Read app reviews. Back up iPhone or iPad often. If your device does get infected, you can restore your data right away. Always use the latest iOS version.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7788fd31ecda141c707836ea54a0daf6",
    "u": "https://ios.tymyrddin.dev/docs/services/tor-proxy",
    "t": "Using Tor proxies ",
    "c": "Using Tor proxies  Orbot is a free tor proxy app. It encrypts your Internet traffic and then hides it by bouncing through a series of computers around the world. Tor is free software and an open network that helps you defend against a form of network surveillance that threatens personal freedom and privacy, private activities and relationships, and state security known as traffic analysis. Notes  If a government makes their own national internet, or routes traffic through specific servers to use deep packet inspection (DPI), running Tor may not provide security if the government is able to see the entire path. Sometimes the Tor network is censored, and clients can’t connect to it. An increasing number of censoring countries are using Deep Packet Inspection (DPI) to classify Internet traffic flows by protocol. While Tor uses bridge relays to get around a censor that blocks by IP address, the censor can use DPI to recognize and filter Tor traffic flows even when they connect to unexpected IP addresses. With pluggable transports, censorship against Tor can be bypassed. Not only that. If an attacker can see your traffic, and can see the website you’re visiting, even with a path outside the adversary’s control - they will still be able to correlate the traffic and learn you are visiting the website. If the same connection (the same set of relays) were to be used for a longer period of time a Tor connection could be vulnerable to statistical analysis, which is why the client software changes the entry node every ten minutes.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "705f17877699e62fef01534739c97060",
    "u": "https://ios.tymyrddin.dev/docs/services/vpn",
    "t": "Using VPN services ",
    "c": "Using VPN services  Internet providers are collecting your browsing data and handing this over to third parties (US, UK, Australia, and most of Europe). Public Wi-Fi remains a serious threat with adversaries targeting unsuspecting users. Many streaming services and websites restrict content to certain geographic locations. A VPN allows you to bypass such restrictions (Not always. Some such websites keep blacklists of VPN servers and will still block your traffic). A VPN will encrypt the connection and make the traffic unreadable. VPNs not logging traffic, DNS requests, timestamps, bandwidth, IP address: ProtonVPN , Switzerland NordVPN , Panama Mullvad , Sweden IVPN , Gibraltar Surfshark VPN , Netherlands",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "271f5e34ba1b5e1b73ac1d4291e7e31d",
    "u": "https://ios.tymyrddin.dev/docs/services/email-services",
    "t": "Using more secure email services ",
    "c": "Using more secure email services  Mailfence , Belgium, provides a full suite of services, Messaging, s, Calendars, Groups, and Document storage. It can easily replace the G suite. It is a secure email suite that offers end-to-end encryption (through PGP support) and works with different email clients. There is some logging of IP address and some other data, and the code is not open source. Tutanota , Germany, is a small but serious player among secure email providers. It uses a hybrid encryption system that avoids some drawbacks of PGP, and is protected by the GDPR and other pro-privacy EU regulations. So, it does not work with PGP and there is no way to import existing emails (yet). ProtonMail , Switzerland, uses PGP encryption standards for email and stores all messages and attachments encrypted at rest on Swiss servers. ProtonMail has a unique feature for “self-destructing messages” and they have also added address verification and full PGP support. Articles  Reddit: Court forces mail provider Tutanota to perform a surveillance function Twitter: ProtonMail logging one of its users and providing IP address logs to French authorities Reading that carefully, if the message had already been encrypted and the IP address had been that of a VPN , these cases would not exist.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e995f413478420b22e426b9b73907b50",
    "u": "https://ios.tymyrddin.dev/docs/authentication/unlock",
    "t": "Touch ID and Face ID? ",
    "c": "Touch ID and Face ID?  Touch ID or Face ID to unlock your phone without needing to enter a password (passcode, PIN) is nice, but in some countries biometric authentication methods are not protected the way passwords are. In these countries, law enforcement can not compel someone to enter a password to unlock a device without a search warrant, but they can for Touch ID or Face ID. In addition, for all people in all countries, raw biometrics data in the form of fingerprints, face scans or voice recognition, for example, is analog data until a biometric system converts it to digital data that a computer can then process. That means this data must be stored somewhere. The convenience of biometric authentication is only worthwhile as long as the data being stored remains secure and untapped. For single-user devices, like an iPhone, this data can be stored on the local device. If data is stored somewhere, it could potentially get stolen. If the worst happens and your PIN or password get stolen, you can easily change them. What are you going to do if your fingerprint or Iris scan get stolen? Apple can promise to ensure no one, not even Apple itself, has rights to access the biometric data. Unless the iPhone gets hacked of course. Even if that were extremely hard, identity is the most significant and valuable possession and the protection of it is crucial. Law enforcement and Identity issues aside, while Touch ID and Face ID are convenient, both leave you vulnerable to unwanted unlocks when you are sleeping . Temporarily disable Touch ID or Face ID  Go to Settings -> Emergency SOS . Make sure the Call with Side Button toggle is on (green). Whenever you want to quickly disable Face ID or Touch ID, press the iPhone’s Side button five times. A screen will appear that shows three sliders: power off, Medical ID, and Emergency SOS. Below them will be a cancel button. Once this screen appears, Face ID and Touch ID are automatically disabled, and you’ll only be able to unlock your phone with your passcode (keep in mind, once you unlock it with a passcode, Face ID and Touch ID are reenabled). Disable Touch ID or Face ID permanently  Go to Settings -> Touch ID & Passcode (on an iPhone X, it’s Face ID & Passcode instead). You’ll be prompted to enter your passcode. On the Touch ID & Passcode page (or Face ID & Passcode page on the iPhone X), turn off all the settings in the Use Touch ID For section, iPhone Unlock and Apple Pay and iTunes & App Store . Now, you will only be able to unlock your iPhone, use Apple Pay, or pay for purchases from iTunes and the App Store by entering your passcode. The biggest problem with this is that you are more likely to use a weak passcode for convenience. It is recommended to use a more secure iPhone passcode that combines numbers and letters.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c107f84f9105926685fd5054c7860338",
    "u": "https://pap.tymyrddin.dev/docs/workstation/ransomware",
    "t": "Ransomware ",
    "c": "Ransomware  Prevention  Keep online backups of your data, and offline encrypted backups of critical data. Do not click on links in spam messages or on unknown websites. Do not give personal information. Do not open suspicious email attachments. Never use unknown USB sticks. Use VPN services on public Wi-Fi networks. Detection  The antivirus scanner or security app sounds an alarm (unless it was not installed or has been bypassed). File extensions change to an unfamiliar combination of letters. File names change. Increased CPU and disk activity. Suspicious network communication (with the gangsters). Encrypted files. A window containing a ransom demand. A locker ransomware virus locks the entire screen, while crypto ransomware encrypts individual files. Response  If you detect it before the ransom note is delivered, you may be able to stop it from spreading to other devices and files, and to remove it. Files already encrypted remain encrypted (of course you have a backup). Disconnect from wireless and wired devices, external hard drives, storage media, and cloud accounts (prevent it from spreading). Scan with AV scanner of security app (identify threat). In the case of screen-locking ransomware, you can probably not get to the security software. Start the device in Safe Mode , and you might get to it. Check the No More Ransom Project website for solutions. Restore encrypted data from backup.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "fe2c741e16a0922c423625ebaf0355a8",
    "u": "https://pap.tymyrddin.dev/docs/mitre/phishing",
    "t": "Phishing for information ",
    "c": "Phishing for information  Phishing , Smishing , and Vishing are classified as Technique ID 1598 (T1598) , and it contains three sub-techniques: Spearphishing Service, Spearphishing Attachment and Spearphishing Link. Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. For followed links, check for references to uncategorized or known-bad sites. URL inspection within email and messages (including expanding shortened links) can also help detect links leading to known malicious sites. Monitor social media traffic for suspicious activity, including messages requesting information as well as abnormal file or data transfers (especially those involving unknown, or otherwise suspicious accounts). Monitor and analyse traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (like extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (monitor anomalies in use of files that do not normally initiate connections for respective protocol(s)). Monitor network data for uncommon data flows. Processes using the network that do not normally have network communication or have never been seen before are suspicious. The NIST phishing incident response playbook contains the 7 steps of the NIST incident response process for investigating phishing. Network detection resources  Wireshark: SMTP SMTP codes Wireshark: IMF",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6186c08a76889a9d5f17fea0a17a8af6",
    "u": "https://pap.tymyrddin.dev/docs/mitre/iocs",
    "t": "Signs of a compromise @home ",
    "c": "Signs of a compromise @home  These patterns are based on business contexts, and most are not useful for home use, unless you run servers locally. The network patterns boldfaced are useful in a home context in this first strategy . If outbound traffic patterns are suspiciously unusual, you can keep a closer eye on it to check if something nefarious is happening. Anomalies in the behaviour (activity) of privileged user accounts. Login attempts from countries with which you have no exchanges otherwise. An existing user tries to log in many times. Failed logins for user accounts that do not exist. A wave in Database Read Volume (exfiltration). A sudden increase in Hypertext Markup Language (HTML) response size (exfiltration). The same file is requested many times (in different ways). Unusual ports are being used. Changes to the Windows registry or system files (persistence). Anomalous Domain Name System (DNS) requests from a specific host. Note that Indicators of compromise (IOCs) refer to data that indicates a system may have been infiltrated by a cyber threat. Indicators of attack are different from IOCs in that they focus on identifying the activity associated with the attack while the attack is happening, whereas IOCs focus on examining what happened after an attack has occurred.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3e9c2ee3bca4b825114baac873682150",
    "u": "https://ios.tymyrddin.dev/",
    "t": "Hardening iOS ",
    "c": "Hardening iOS  Keeping it as simple as possible. iOS evolves fast. An old and new iPhone are underway for further pentesting, after which these mitigations will be updated (when we have time). Accounts and authentication Introduction Using a SIM PIN Touch ID and Face ID? Auditing and changing password reuse Automagically creating strong passwords Using multifactor authentication (MFA) Services and applications Introduction Auditing and blocking the access apps have Unwanted third party apps (UAPs) Blocking apps from accessing Bluetooth data Checking for unknown configuration profiles Browsers that protect your privacy Changing default browser app Using more secure messaging services Using more secure email services Using SSH tunnels Using VPN services Using Tor proxies Changing MAC address Editing hosts file Data Introduction Encrypting the data Worst case, nuking all data Privacy Introduction Silencing spam callers Changing default search engine Malware Introduction Threat awareness Installing a third party security app Finding the culprit and removing it Ransomware Operations security Introduction Threat awareness Not getting juice-jacked Not auto-joining Wi-Fi networks Using email more securely Browsing more safely Measuring Internet Censorship ‘;–have i been pwned? Guards! Guards! Introduction Lockdown Privacy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "620ca01245ac96076b1589bad40d1138",
    "u": "https://pap.tymyrddin.dev/docs/diy/strategy",
    "t": "A first strategy ",
    "c": "A first strategy   a decade ago it was: Keep systems updated, patch, use strong passwords, install anti-malware, firewalls and proxies, etc. Now it is: Keep systems updated, patch more, use stronger passwords, use a password vault, MFA, biometric authentication, Next-Gen firewalls, Next-Gen anti-malware, and oh, there’s new proxies too, and more, and more overload, tool integrations, maintenance of tools, etc. And usually expensive! Defence strategies  Active defence employs limited offensive action and counterattacks with a defensive posture to deny a contested area or position to the enemy. It requires proactive, anticipatory, and reactionary actions against adversaries. The enemies are already inside the gates … Passive defence is all about measures taken to reduce the probability of and to minimize the effects of damage caused by hostile action without the intention of taking the initiative. It typically uses traditional static defenses and then hopes for the best … Prevent|Detect|Respond: Prevention is ideal ofcourse, and it requires detection, and detection without response is of little value … Keep calm and …  Prevent|Detect|Respond on mobiles and workstations . For home and small organisational networks, Raspberry Pi can be bought (not expensive), the PiRogue suite installed on it, and then used to catch indicators of compromise (IoAs and IoCs) on all our devices, including mobiles. We can do some mobile app vetting and malware analysis, and share results on Pithus. If we run a server, we can harden it And we can harden our webservers . If we run a mailserver, we can make it smarter . With all of that covered, we can add some active defence and set up a honeyclient and/or honeyports . … Design and organise security operations training. Not for users, not for employees, not for activists, for people! Make it fun, with posters, simulations and hands-on hardening exercises for all likely endpoints.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8317c192a4bd443f305a79a978c07902",
    "u": "https://webserver.tymyrddin.dev/",
    "t": "Hardening webserver ",
    "c": "Hardening webserver  Unlike other devices sitting behind layers of defenses and firewalls, web servers sit at the edge of the known network and are designed to share information with the outside, the unknown. These are some notes on hardening the two most used web servers, Nginx and Apache. Building a sound foundation Introduction Keep only required modules Disable unwanted services Restrict file and directory access Disable unwanted HTTP methods Create non-root users Install and use ModSecurity Install and use ModEvasive Set up and configure logging Resolving TLS issues Introduction (Re)configure TLS Manually specify cipher suite Configure forward secrecy Preventing information disclosure Introduction Hide web server information Disable directory listing Setting HTTP security headers Introduction Check your HTTP security headers HTTP Strict Transport Security (HSTS) X-Frame-Options Content Security Policy (CSP) Permissions-Policy Referrer-Policy X-Content-Type-Options X-XSS-Protection Set-Cookie Content-Type Using CORS Introduction CORS best practices CORS on Nginx CORS on Apache",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "66c5676f8651c63767a38eb6f22ae285",
    "u": "https://webserver.tymyrddin.dev/docs/disclosure/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  To protect web applications against the most obvious information disclosure issues, make sure that the web server does not send out response headers or background information that reveal technical details about the backend technology type, version or setup. Why?  Make it harder for attackers to fingerprint your tech stack . How?  Hide web server information Disable directory listing",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3d60b4ed1dbbce2247274f26d2955f8c",
    "u": "https://webserver.tymyrddin.dev/docs/http/cookie",
    "t": "Set-Cookie ",
    "c": "Set-Cookie  The Set-Cookie HTTP response header is used to send a cookie from the server to the user agent, so the user agent can send it back to the server later. To send multiple cookies, multiple Set-Cookie headers should be sent in the same response. For example (the Domain attribute has been removed intentionally): Set-Cookie: name=value; Secure; HttpOnly; SameSite=Strict Resources  MDN Web docs: Using HTTP cookies",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "67155429117a82bae2abb96249c61c4f",
    "u": "https://webserver.tymyrddin.dev/docs/encryption/cipher",
    "t": "Manually specify cipher suite ",
    "c": "Manually specify cipher suite  To secure the transfer of data, TLS/SSL uses one or more cipher suites. A cipher suite is a combination of authentication, encryption, and message authentication code (MAC) algorithms. They are used during the negotiation of security settings for a TLS/SSL connection and the transfer of data. Depending on context, the need to support legacy browsers and regulatory requirements, you can choose different cipher suite configurations (modern, intermediate, or old). TLS 1.3 does not require manually specifying cipher suites.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "131ca0eae40688d10c6da264bf16582a",
    "u": "https://webserver.tymyrddin.dev/docs/http/content",
    "t": "Content-Type ",
    "c": "Content-Type  The Content-Type representation header is used to indicate the original media type of the resource (before any content encoding is applied for sending). For example: Content-Type: text/html; charset=UTF-8 The charset attribute is necessary to prevent XSS in HTML pages The text/html can be any of the possible MIME types Resources  MDN Web docs: Content-Type",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7158354ad25fcb1e28bb10f5f78aa23b",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/file-system",
    "t": "Restrict file and directory access ",
    "c": "Restrict file and directory access  Apache  To restrict a directory from access by users, deny all users using the Directory directive: < Directory \"/var/www/directory\" > Order Deny , Allow Deny from all Allow from 192.168.1.0 / 24 Allow from .core.com </ Directory > To restrict a file using the File directive: # The following lines prevent .htaccess and .htpasswd files from being # viewed by Web clients. # < Files ~ \"^\\.ht\" > Order allow , deny Deny from all Satisfy all </ Files > To limit the scope of enclosed directives by URL use the Location directive: < Location / admin > Order Deny , Allow Deny from all Allow from 192.168.1.0 / 24 Allow from .core.com </ Location > Nginx  The Apache .htaccess is comparable to the server{} block in Nginx, but Nginx has a much more lightweight approach to parsing configuration, and it will not scan site directories for additional configurations. To restrict access to multiple directories in one location entry will give a 403 because of the deny all : ... location ~ /(dir1|dir2|dir3) { deny all; return 404; } ... To allow public access to a /data/public directory and execution of php scripts in it while denying public access to its subdirectories, put the php location in another file called php.conf and include that file in the server block and in the /data/public/ block. The config: server { location ^~ /data/public/ { allow all; try_files $uri $uri/ /index.php?args; # include to avoid writing it twice.. include php.conf } location ^~ /data/ { deny all; } # ..... # Some other config blocks # ..... # This line instead of the php config block to avoid writing the php part twice include php.conf } And the php.conf file: location ~ \\.php$ { fastcgi_split_path_info ^(.+\\.php)(/.+)$; fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock; fastcgi_index index.php; include fastcgi_params; }",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cf2ff06306fcb60a1eeaa2e8e836b8af",
    "u": "https://webserver.tymyrddin.dev/docs/cors/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  You can send GET and POST requests cross domain even if a target does not use CORS, but there are restrictions. Most importantly, the response can not be read. This restriction is built into browsers as part of the Single Origin Policy (SOP) and it protects against data leaking across domains. It also stops publishing an API that can be read from other domains. Why?  CORS allows for loosening that restriction, allowing the domain that is hosting the API to announce to browsers that it allows cross domain calls from either all or some defined domains. If misconfigured, these controlled and intended SOP bypasses can have adverse effects. Such exploits can cause private information leaks and lead to more vulnerabilities, such as authentication bypass, account takeover, and large data breaches. Proper configuration of CORS is therefor essential. How?  CORS best practices CORS on Nginx CORS on Apache",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e5d0a6bd29e4d1bd113858f684568c6d",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/logging",
    "t": "Set up and configure logging ",
    "c": "Set up and configure logging  Logging provides detailed information about client requests made on the web server, and will prove useful when investigating the cause of particular issues. Nginx  The nginx access and error logs are enabled by default and are located in logs/error.log and logs/access.log respectively. A crit severity level will cause nginx to log critical issues and all issues that have a higher severity level than crit . To set the severity level to crit , use the error_log directive : error_log logs/error.log crit; The level of logging can be, in order of increasing severity, debug , info , notice , warn , error , crit , alert , or emerg . Monitoring and managing nginx log files makes it easier to understand requests made to the web server and notice errors. This will aid in discovering any attack attempts and identifying what can be done to optimise server performance. Log management tools, such as logrotate, can be used to rotate and compress old logs and free up disk space. The ngx_http_stub_status_module module provides access to basic status information. Apache  To enable logging on Apache, the mod_log_config module needs to be included from the Apache httpd.conf file. This module provides the TransferLog , LogFormat , and CustomLog directives which are respectively used to create a log file, specify a custom format, and creating and formatting a log file, all in one go. For example, to log the referrer and browser of each request along with the default logging parameters and use the CustomLog directive to instruct Apache to use this logging format: LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" detailed CustomLog logs/access.log detailed",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1ebfeb4352a75168686a6a30a88ed42e",
    "u": "https://webserver.tymyrddin.dev/docs/http/hsts",
    "t": "HTTP Strict Transport Security (HSTS) ",
    "c": "HTTP Strict Transport Security (HSTS)  HTTP Strict Transport Security (HSTS) is a method used by websites to declare that they should only be accessed using a secure connection (HTTPS). If a website declares an HSTS policy, the browser refuses all HTTP connections and prevents users from accepting insecure SSL certificates. Nginx  To add an HSTS header to a Nginx server, add the Strict-Transport-Security directive to the server section: add_header Strict-Transport-Security \"max-age=31536000; includeSubdomains; preload\"; Example of the Nginx config file with the added HTTP Strict Transport Security (HSTS) header: upstream example { server localhost:8080; } server { listen 80; server_name example.test; add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload'; location / { proxy_pass http://example; } } Apache  Header set Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" Resources  MDN Web docs: Strict-Transport-Security",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a382c9b9e94658e46d90875f801bfc14",
    "u": "https://webserver.tymyrddin.dev/docs/http/permissions",
    "t": "Permissions-Policy ",
    "c": "Permissions-Policy  The HTTP Permissions-Policy header provides a mechanism to allow and deny the use of browser features in a document or within any frame elements in the document. It allows a site to control which APIs or features can be used in the browser. Apache  Header always set Permissions-Policy \"geolocation=(),midi=(),sync-xhr=(),microphone=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()\" Nginx  add_header Permissions-Policy \"geolocation=(),midi=(),sync-xhr=(),microphone=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()\"; Resources  MDN Web docs: Permissions-Policy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5d3af8d6179c2873cecb4c7909a06374",
    "u": "https://webserver.tymyrddin.dev/docs/http/csp",
    "t": "Content Security Policy (CSP) ",
    "c": "Content Security Policy (CSP)  Content Security Policy (CSP) protects the web server against certain types of attacks, including Cross-site Scripting attacks (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement to distribution of malware. It defines the approved content sources that allow the browser to load them (or not). For example, to restrict most of the resource types to the same site and subdomains of example.com : Content-Security-Policy: default-src 'self' *.example.com; block-all-mixed-content; font-src 'self' https: data:; img-src 'self' data: blob:; object-src 'none'; script-src-attr 'none'; style-src 'self' https: 'unsafe-inline'; upgrade-insecure-requests; Inline script elements and inline script event handlers like onload will stop working with the above header. This is required to neutralize XSS attacks. You may see mentions of the X-Content-Security-Policy header, but that’s an older version. Add the Content-Security-Policy header to match your requirements. Nginx  add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always; Apache  Header always set Content-Security-Policy \"default-src 'self'; font-src *;img-src * data:; script-src *; style-src *;\" Resources  MDN Web docs: Content Security Policy (CSP)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3ac8e8ad7961f50dcc809c7facb39092",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/services",
    "t": "Disable unwanted services ",
    "c": "Disable unwanted services  The biggest threat to server security is the code that is written for the server to execute. Two sources of these problems are Common Gateway Interface (CGI) programs and Server Side Includes (SSI). Intruders exploit poor code by forcing buffer overflows or by passing shell commands through the program to the system. Server Side Includes are processed by the server before they are sent to the client. These files can include other files or execute code from script files. If user input is used to dynamically modify the SSI file, it is vulnerable to the same type of attacks as CGI scripts. Administrators have two options: Disable Server Side Includes (SSI) and CGI execution completely. Review all programs included in the cgi-bin directory, don’t allow ExecCGI in any other directory unless you’re positive no one can place a script there that have not been reviewed, write programs that do not allow free-form user input, use drop-down menus instead of keyboard input and never trust user input. Apache  Disallowing can be done by defining a Directory tag in the configuration file: < Directory \"/directory\" > Options - Includes - ExecCGI - FollowSymLinks </ Directory > The most secure way to operate a server is to disallow all SSI processing. This is the default unless All or Includes is specified by an Options directive. A compromise setting is to allow SSI, but to disallow the #include and #exec commands, which are the greatest security threat. Use IncludesNOEXEC on the Options directive for this setting. Nginx  Nginx and OpenBSD httpd authors decided not to include CGI interpretation but instead use FastCGI.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "90ee373e76409e19c3e10f1423e1b7f6",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/modules",
    "t": "Keep only required modules ",
    "c": "Keep only required modules  Minimise the risk of potential attacks by limiting allowed operations. The more services and functions a web server is running, the more opportunities an attacker will have to exploit the network. There are 65,535 available ports each server could possibly service. The server probably does not need all of them open and receptive. Disable and turn off any unnecessary modules, services, ports or functions. Nginx  Default, Nginx includes many modules, and it is not possible to choose modules at runtime. To disable modules, Nginx needs to be recompiled and the configure option during installation to disable modules that are not required. For example, to disable the autoindex module, which generates automatic directory listings: # ./configure --without-http_autoindex_module # make # make install Apache  Default installation may include many pre-installed and enabled modules that are not needed. The Apache module documentation lists and explains all the modules available for Apache. Research the enabled modules to make sure that they are really required for the functionality of the website. Unnecessary modules can be disabled by commenting out a specific LoadModule line.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b6bd82d2d1395250c3ee57b132fdc24d",
    "u": "https://webserver.tymyrddin.dev/docs/cors/requirements",
    "t": "CORS best practices ",
    "c": "CORS best practices  Origins specified in the Access-Control-Allow-Origin header should only be sites that are trusted. Dynamically reflecting origins from cross-origin requests without validation is exploitable and to be avoided. Also avoid using the header Access-Control-Allow-Origin: null . Cross-origin resource calls from internal documents and sandboxed requests can specify the null origin. CORS headers must be defined in respect of trusted origins for private and public servers. Avoid using wildcards in internal networks. Trusting network configuration alone to protect internal resources is not sufficient when internal browsers can access untrusted external domains. CORS defines browser behaviours and is not a replacement for server-side protection of sensitive data - an attacker can directly forge a request from any trusted origin. Web servers should apply protections for sensitive data, such as authentication and session management, in addition to properly configured CORS.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "31c2c9c575648cf13070c4ab0783c888",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/mod_evasive",
    "t": "Install and use ModEvasive ",
    "c": "Install and use ModEvasive  ModEvasive (mod_evasive) provides a web server with built-in evasive capabilities if it detects that a website may be under attack. ModEvasive is used to help to prevent DDOS attacks by closing connections if too many requests come into a website too quickly, if a certain child process request is attempting to create too many concurrent requests or if any host IP is trying to access the web server even if blacklisted.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a2e1f191304d01a8d091b86d31745249",
    "u": "https://webserver.tymyrddin.dev/docs/encryption/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Do not use old versions of the TLS protocol (TLSv1 TLSv1.1) on web servers, because they open the door to SSL attacks . Why?  All the TLS versions older than 1.2 are having lots of known vulnerabilities, which is why the latest browsers have removed support for these vulnerable protocols. How?  (Re)configure TLS Manually specify cipher suite Configure forward secrecy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9a73d1c1cf7a3fccd73d35af436600f7",
    "u": "https://webserver.tymyrddin.dev/docs/http/xframe",
    "t": "X-Frame-Options ",
    "c": "X-Frame-Options  The X-Frame-Options HTTP response header defends an application from clickjacking attacks . It can be used to indicate whethera browser is allowed to render a page in a frame , iframe , embed or object . For example, to disallow displaying of a page in a frame: X-Frame-Options: DENY This header can be configured in three ways: DENY – disables the iframe features completely. SAMEORIGIN – allows iframe to be used by anyone from the same origin. ALLOW-FROM – allows iframes from specific URLs Nginx  Add the following parameter to the nginx configuration file in the server section: add_header X-Frame-Options \"SAMEORIGIN\"; Apache  Header always set X-Frame-Options \"SAMEORIGIN\" Resources  MDN Web docs: X-Frame-Options",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4222bae609e436e97f87563fff45bfe3",
    "u": "https://webserver.tymyrddin.dev/docs/encryption/forward-secrecy",
    "t": "Configure forward secrecy ",
    "c": "Configure forward secrecy  Perfect Forward Secrecy (PFS) is a style of encryption that enables short-term, private key exchanges between clients and servers. PFS can be found within transport layer security (SSL/TLS) and prevents adversaries from decrypting data from other sessions, past or future, even if the private keys used in an individual session are stolen at some point. It does this by using unique session keys, generated automatically each time a connection is made. The keys do not use prior knowledge when they are generated, eliminating the need for long-term storage of keys and preventing sensitive data from being accessed using existing ones that have been compromised. This makes it much harder for attackers to obtain the session key through decryption. PFS is supported by all major internet browsers. How to Configure Nginx for Forward Secrecy How to Configure Apache for Forward Secrecy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "514aefc73fdfd2a1ff3b2ddc91a114de",
    "u": "https://webserver.tymyrddin.dev/docs/http/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Turn on additional protection for web applications. Why?  Setting security headers in web applications and web server settings is an easy way to improve the resilience of your web application against many common attacks, including cross-site scripting (XSS) , clickjacking attacks , and information disclosure . How?  These headers can be applied globally or to a specific site in the Nginx/Apache virtual host file by adding the HTTP Security Headers to the server block. Check your HTTP security headers HTTP Strict Transport Security (HSTS) X-Frame-Options Content Security Policy (CSP) Permissions-Policy Referrer-Policy X-Content-Type-Options X-XSS-Protection Set-Cookie Content-Type",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4ccd8630562a5fd2d1d976240eeba111",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/http-methods",
    "t": "Disable unwanted HTTP methods ",
    "c": "Disable unwanted HTTP methods  HTTP TRACE and TRACK requests can be used for legitimate purposes, such as debugging connection errors within the network, but these protocols can also compromise the security of a web server. One of the most common exploitation methods are [cross-site scripting (XSS) attacks], where attackers use and manipulate the TRACE and TRACK methods to intercept normal traffic connections, session cookies and possibly any data in transit. Disable any HTTP methods, which are not going to be used and which are not required to be implemented on the web server. Nginx  Add this condition in the location block of the nginx virtual host configuration file, location / { limit_except GET HEAD POST { deny all; } } The server will only allow GET , HEAD , and POST methods and will filter out methods such as PUT , DELETE , PATCH , TRACE , TRACK , and OPTIONS . Or for a more universal solution, add this condition to the server section (or server block): if ($request_method !~ ^(GET|HEAD|POST)$ ) { return 444; } Note: Be very careful with if statements in the location context. Apache  Make sure that the mod_rewrite module and .htaccess are enabled. To enable the mod_rewrite module: # a2enmod rewrite Add AllowOverride All in the VirtualHost configuration file: <VirtualHost *:80> ServerName www.example.com DocumentRoot /var/www/html <Directory /var/www/html> AllowOverride All </Directory> </VirtualHost> Or enable it globally by editing the Apache main configuration file. <Directory /var/www/html> Options Indexes FollowSymLinks AllowOverride All </Directory> Restart Apache, and create a .htaccess file under the document root directory with the following code. RewriteEngine On RewriteCond %{REQUEST_METHOD} ^(PUT|DELETE|PATCH|TRACE|OPTIONS) RewriteRule .* - [F] The above configuration will disable PUT , DELETE , PATCH , TRACE , TRACK , and OPTIONS methods.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f488c0ebf84f08a45d618659b9417f35",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Remove all unnecessary web server modules. A lot of web servers by default come with several modules that introduce security risks. Modify default configuration settings. Install and run a web application firewall (WAF). Most web servers support the open-source ModSecurity firewall. If possible, either patch server software to the latest version automatically or turn on notifications for manual patching. Why?  Build a more secure foundation for web applications. How?  Keep only required modules Disable unwanted services Restrict file and directory access Disable unwanted HTTP methods Create non-root users Install and use ModSecurity Install and use ModEvasive Set up and configure logging",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5a2d39b18b660de72833c4fe6843c0e9",
    "u": "https://webserver.tymyrddin.dev/docs/http/xcontent",
    "t": "X-Content-Type-Options ",
    "c": "X-Content-Type-Options  The X-Content-Type-Options response HTTP header is used by the server to prevent browsers from guessing the media type (MIME type). This is known as MIME sniffing in which the browser guesses the correct MIME type by looking at the contents of the resource. The absence of this header might cause browsers to transform non-executable content into executable content. This header helps mitigate the danger of drive-by downloads. Apache  Header always set X-Content-Type-Options \"nosniff\" Nginx  X-Content-Type-Options: nosniff Resources  MDN Web docs: X-Content-Type-Options",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "049d13e0487a8fb9646bf5ebc0978bce",
    "u": "https://webserver.tymyrddin.dev/docs/encryption/tls",
    "t": "(Re)configure TLS ",
    "c": "(Re)configure TLS  Transport Layer Security (TLS) and its predecessor, Secure Socket Layer (SSL), are widely used protocols. They were designed to secure the transfer of data between the client and the server through authentication, encryption, and integrity protection. All the SSL and TLS versions older than 1.2 are having lots of known vulnerabilities, which is why the latest browsers have removed support for these vulnerable protocols. Likewise, do not use old versions of the TLS protocol (TLSv1 TLSv1.1) on web servers, because they open the door to SSL attacks . TLS 1.3 is preferred as it does not require manually specifying cipher suites in configuration. Nginx  Add this directive in the server section of the Nginx configuration file: ssl_protocols TLSv1.2 TLSv1.3; Restart Nginx service. Apache: TLS 1.2 only  Edit the virtual host section for your domain in the Apache SSL configuration file on the server to disable all older protocols except TLSv1.2: <VirtualHost *:443> ServerName www.example.com DocumentRoot /var/www/html SSLEngine on SSLProtocol -all +TLSv1.2 SSLCertificateFile /etc/letsencrypt/live/example.com/cert.pem SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem </VirtualHost> Restart Apache service. Apache: TLS 1.3 and 1.2  <VirtualHost *:443> ServerName www.example.com DocumentRoot /var/www/html SSLEngine on SSLProtocol -all +TLSv1.2 +TLSv1.3 SSLCertificateFile /etc/letsencrypt/live/example.com/cert.pem SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem </VirtualHost> Restart Apache service.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cc5839ec6084ea3929a987b9f809a2fb",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/mod_security",
    "t": "Install and use ModSecurity ",
    "c": "Install and use ModSecurity  ModSecurity ( mod_security ) is an open-source IDS and prevention engine, originally developed for Apache, and now also available for Nginx (and other platforms) in a “standalone” version. ModSecurity works as a supplemental firewall for the web server, allowing you to monitor traffic in real-time, and disabling host connections if the module suspects potential brute-force password attacks. Nginx  To install it without (re)compiling Nginx, install the dependencies: # apt-get install libxml2 libxml2-dev libxml2-utils libaprutil1 libaprutil1-dev And download, compile and install mod_security : # git clone https://github.com/SpiderLabs/ModSecurity.git mod_security # cd mod_security ~/mod_security# ./autogen.sh ~/mod_security# ./configure --enable-standalone-module ~/mod_security# make To compile Nginx from source with the modsecurity module (check for latest version here: http://nginx.org/en/download.html) # wget http://www.nginx.org/download/nginx-1.9.5.tar.gz # tar -xvpzf nginx-1.9.5.tar.gz # cd nginx-1.9.5 ~/nginx-1.9.5# ./configure --add-module=../mod_security/nginx/modsecurity ~/nginx-1.9.5# make ~/nginx-1.9.5# make install The ModSecurity configuration file must be defined in the nginx.conf file, something like this: server { listen 80; server_name localhost; location / { ModSecurityEnabled on; ModSecurityConfig modsecurity.conf; } } For custom rules applied to different directories, create new mod_security.conf files, for example: location /secured { ModSecurityConfig modsecurity3.conf; proxy_pass http://secured.core.com/; proxy_read_timeout 180s; } To turn it off for a particular directory: location /unsecured/ { ModSecurityEnabled off; proxy_pass http://unsecured.core.com/; proxy_read_timeout 180s; } Restart Nginx. Apache  Compile and embed the ModSecurity module or install from repository: # apt-get install libapache2-modsecurity Check it was loaded: # apachectl -M | grep --color security Rename the recommended-labeled configuration file: # mv /etc/modsecurity/modsecurity.conf-recommended /etc/modsecurity/modsecurity.conf Restart Apache. Usage  A new logfile named /var/log/apache2/modsec_audit.log has been created. Check that the default configuration file is not set to DetectionOnly , which logs requests according to rule matches and doesn’t block anything. Edit the /etc/modsecurity/modsecurity.conf file to change it if need be (set it to On ). Some possible changes: # Prevent path traversal (..) attacks SecFilter \"../\" # Weaker XSS protection but allows common HTML tags SecFilter \"<[[:space:]]*script\" # Prevent XSS atacks (HTML/Javascript injection) SecFilter \"<(.|n)+>\" # Very crude filters to prevent SQL injection attacks SecFilter \"delete[[:space:]]+from\" SecFilter \"insert[[:space:]]+into\" SecFilter \"select.+from\" SecFilter \"drop[[:space:]]table\" # Protecting from XSS attacks through the PHP session cookie SecFilterSelective ARG_PHPSESSID \"!^[0-9a-z]*$\" SecFilterSelective COOKIE_PHPSESSID \"!^[0-9a-z]*$\" Restart Apache. Configuration resources  Have a look at the OWASP ModSecurity Core Rule Set Project (CRS) for making more secure changes. The CRS aims to protect web applications from a wide range of attacks, with a minimum of false alerts.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c6377b5a3b18c57d4131e53f1d18cc4f",
    "u": "https://webserver.tymyrddin.dev/docs/disclosure/directory-listing",
    "t": "Disable directory listing ",
    "c": "Disable directory listing  Web servers by default display the content of the documents and files in the root directory when an index.html file is missing. This means that a potential attacker could possibly view all of the files and subdirectories that are presented to the browser. As with the hiding of version and OS identity , this is not a direct security threat as it only allows the attacker to gain information. Apache  Add the following configuration in /etc/apache2/apache2.conf to disable directory listing globally (server wide): < Directory /> Options - Indexes </ Directory > Do not overwrite this inside any directory. Your root directory may look like this: < Directory /> Options FollowSymLinks AllowOverride None </ Directory > AllowOverride None will prevent any accidental changes in .htaccess files. After that you can enable listing per directory by adding the Indexes option: < Directory / www / directory > Options Indexes FollowSymLinks AllowOverride None </ Directory > This enables the generation of Indexes only in that folder. Nginx  Nginx cannot directly execute external programs (CGI). Phew. But if you really really want it to, use fcgi securely. Disable SSI and autoindex execution  The ngx_http_autoindex_module processes requests ending with the slash character / and produces a directory listing. Usually a request is passed to the ngx_http_autoindex_module when the ngx_http_index_module cannot find an index file. You can configure and install Nginx using only required modules. To see which modules can be turned on or off while compiling the Nginx server: # ./configure --help | less To disable the SSI and autoindex module: # ./configure --without-http_autoindex_module --without-http_ssi_module # make # make install",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ba855fd37849dfa11e1094c6077de4c0",
    "u": "https://webserver.tymyrddin.dev/docs/http/xxss",
    "t": "X-XSS-Protection ",
    "c": "X-XSS-Protection  The HTTP X-XSS-Protection response header is a feature of Safari, Internet Explorer 8+, and Google Chrome that stops pages from loading when they detect reflected cross-site scripting (XSS) attacks. For example, to prevent browsers from rendering pages if an attack is detected: X-XSS-Protection: 1; mode=block The header can be implemented in three ways: X-XSS-Protection: 0 – disables the filter completely. X-XSS-Protection: 1 – enforces the header but only sanitises potential malicious scripts. X-XSS-Protection: 1; mode=block – enforces the feature and completely blocks the page. These protections are largely unnecessary in modern browsers when sites implement a strong Content-Security-Policy that disables the use of inline JavaScript (‘unsafe-inline’). Apache  Header always set X-XSS-Protection \"1; mode=block\" Nginx  add_header X-XSS-Protection \"1; mode=block\" always; Resources  MDN Web docs: X-XSS-Protection",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "efc28bdc7830dab0929e546608d8b1a9",
    "u": "https://webserver.tymyrddin.dev/docs/http/referrer",
    "t": "Referrer-Policy ",
    "c": "Referrer-Policy  The Referrer-Policy HTTP header controls how much referrer information (sent via the Referer header) should be included with requests. For example: Referrer-Policy: strict-origin-when-cross-origin Meaning, send the origin, path, and querystring when performing a same-origin request. For cross-origin requests send the origin (only) when the protocol security level stays same (HTTPS → HTTPS). Do not send the Referrer header to less secure destinations (HTTPS → HTTP). By checking the referrer, the new webpage can see where the request originated. The Referrer-Policy can be configured to cause the browser to not inform the destination site any URL information. Apache  Header always set Referrer-Policy \"strict-origin\" Nginx  add_header Referrer-Policy \"strict-origin\"; Resources  MDN Web docs: Referrer-Policy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c8c2d542023a8d99d5e5fc1e5c2622d4",
    "u": "https://webserver.tymyrddin.dev/docs/disclosure/hide-info",
    "t": "Hide web server information ",
    "c": "Hide web server information  Apache  If the <Location /server-info> directive in the httpd.conf configuration file is enabled, information about the Apache configuration can be read by accessing the /server-info page. The information includes server version, system paths, database names, library information, etc. This directive can be disabled by commenting out the mod_info module in the httpd.conf Apache configuration file: #LoadModule info_module modules/mod_info.so The <Location /server-status> directive lists information about server performance, such as server uptime, server load, current HTTP requests, and client IP addresses. To disable this directive, comment it out in the httpd.conf Apache configuration file: #<Location /server-status> # SetHandler server-status # Order deny,allow # Deny from all # Allow from .domain.com #</Location> The ServerSignature directive adds a footer to server-generated documents. The footer includes the version of Apache and the operating system. To disable this directive in the httpd.conf Apache configuration file: ServerSignature Off The ServerTokens directive controls the information that is sent back in the Server response header field. To set it to Prod to instruct Apache to return only Apache in the server response headers, include this directive in the httpd.conf Apache configuration file: ServerTokens Prod And restart Apache web server. Nginx  Find nginx.conf in nginx installation directory/conf on Windows systems, and in /etc/nginx or /usr/local/etc/nginx on Linux systems. You may also need to do some changes to virtual host configuration files in the sites-available subdirectory. By default, the server_tokens directive in nginx displays the nginx version number. It is directly visible in all automatically generated error pages but also present in all HTTP responses in the Server header. To disable the server_tokens directive: server_tokens off If you want to remove the Server header completely, you have to compile the Headers More module in, because the header is hard coded in the Nginx source, and it allows changing any http headers. Then, to clear the Server header: more_clear_headers Server; Or to set a custom string as Server more_set_headers 'Server: some-string-here';",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "fd94666ac24f0b4e1bc082559f0c1bea",
    "u": "https://server.tymyrddin.dev/",
    "t": "Hardening Linux server ",
    "c": "Hardening Linux server  The below writeups were initially based on debian 9 hosts, and then later on ubuntu 18.04 LTS, and on CentOS 8. Everything in these writeups will probably also apply to newer versions. If something does not work, check the documentation for your distro and version for what you are trying to do. Securing user accounts Introduction Configuring sudo Disabling root access Locking home directories Configuring password complexity Configuring other password requirements Dangers of the lxd group Audit services Introduction Auditing system services with systemctl Auditing network services with netstat Auditing network services with nmap Firewalls Introduction iptables UFW NFTables FirewallD FireHOL Packet filtering Fail2ban SSHguard Web Application Firewall WAF Port spoofing Encryption technologies Introduction GNU Privacy Guard OpenVPN strongSwan Installing SSH Harden ssh server Key management Jumping hosts Virtual network computing (VNC) Introduction TigerVNC TightVNC Securing sessions Access control Introduction Discretionary access control (DAC) Access control lists (ACL) and shared directory management (SDM) Mandatory access control (MAC) Public key infrastructure (PKI) Introduction Problems Internal PKI Pluggable Authentication Modules (PAM) Let’s Encrypt TLS/SSL Logfiles Introduction Syslog log commands Path of a common intruder Logrotate Centralised logging Guards! Guards! Introduction Samhain Maltrail Incidents Introduction Preventing incidents Using git for configuration management Implementing a backup plan Using bootable recovery media Troubleshooting Overview Authentication error Connection refused",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8aa7dc9e13f51af021194a10aa6c6368",
    "u": "https://server.tymyrddin.dev/docs/firewall/port-spoofing",
    "t": "Port spoofing ",
    "c": "Port spoofing  Scanning software usually tries to determine a service that is running on an open port to identify port numbers on which you are running your services on a system. For delaying reconnaissance phase, spoof all ports to seem to be open and emulate valid services on every port. Any attackers port scan results will become fairly meaningless and it will require hours of effort to accurately identify which ports have real services and which do not. Portspoof is a tool that is meant to be a lightweight, fast, portable and secure addition to any firewall system or security system. Techniques used by Portspoof: All configured TCP ports are always open: returns SYN+ACK for every connection attempt making it difficult to determine if a valid software is listening on a particular port and impractical to use stealth. Every open TCP port emulates a valid services: It has a huge dynamic service signature database, that will be used to generate responses to your adversaries scanning software service probes. Portspoof will respond to every service probe with a valid service signature, that is dynamically generated based on a service signature regular expression database. Portspoof can also be used as an Exploitation Framework Frontend, turning your system into a responsive and aggressive machine for exploiting your attackers’ tools and exploits. Some example exploits can be found in the configuration file portspoof.conf . Limitations: An attacker can still determine if a service is emulated by using a protocol probe (for 65k open ports)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "04d901bddf84d96822458570af0c50ff",
    "u": "https://server.tymyrddin.dev/docs/access/readme",
    "t": "Introduction ",
    "c": "THM Room: Hardening basics Introduction  What?  Configuring access control Why?  Protecting sensitive files and directories by setting proper permissions and ownership, and by using Extended Attributes (xattr). Avoiding security related problems with Set User ID (SUID) and Set Group ID (SGID). How?  Discretionary access control (DAC) Access control lists (ACL) and shared directory management (SDM) Mandatory access control (MAC) Mastering Linux Security and Hardening, Donald A. Tevault, Second Edition",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "bca2d3f5673072305e2c4a2b2f9a4456",
    "u": "https://server.tymyrddin.dev/docs/encryption/harden-ssh",
    "t": "Harden ssh server ",
    "c": "Harden ssh server  Configuration file  Changes to the /etc/ssh/sshd_config file: Root access: Root access has prohibit-password set by default. Deactivate using the root account (change PermitRootLogin prohibit-password to PermitRootLogin no ). There’s a configurationless workaround, by logging in as an ordinary user and becoming root with: $ su - Get rid of passwords: Use SSH keys authentication instead of passwords and deactivate using passwords for authentication ( PasswordAuthentication no ) in the config file. Limit access: Only allow login by certain users or groups (users and groups). This does not improve security directly but in some cases helps in resisting a brute force attack a little longer. Set a custom SSH port: By default, ssh listens on port 22, which is widely known among attackers and security tools/port scanners that launch brute force attacks against it. Though security by obscurity (which is no security), it does help eliminate a lot of noise on port 22. Change it in the config file and close port 22 and punch a hole for the new port in the firewall. Choose a port not in use by another service (woops) Disable X11 forwarding: As admins we are unlikely to use graphic tools, and the X11 protocol was never built with security in mind. It can be used by adversaries to open up a channel to the client and send remote commands. Change X11Forwarding yes to X11Forwarding no in the config file. After changing the /etc/ssh/sshd_config file, restart the ssh server with $ sudo systemctl restart ssh for changes to take effect. Additional security  Use of TCP wrappers: Only do this when all needing access to a server have a static IP address. For example, not on a jump host, but when using nc and routing tables with ProxyCommand for the servers one can jump to from the jump host. TCP wrappers can be made by using two files: /etc/hosts.allow and /etc/hosts.deny Append ALL:ALL to /etc/hosts.deny to deny all connections from unknown hosts. Append sshd : XXX.XXX.XXX.XXX to /etc/hosts.allow for each IP address you wish to allow. Use fail2ban for automatically blacklisting IPs (attempting to brute force the SSH server) with the help of a firewall.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9aafcc19059d395ece44e56f05357f35",
    "u": "https://server.tymyrddin.dev/docs/trouble/ssh-auth-error",
    "t": "Authentication error ",
    "c": "Authentication error  By default, the SSH client verifies the identity of the host to which it connects. If the remote host key is unknown, a user trying to connect is asked to accept it by typing “yes” or “no”. And it may fail. @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that a host key has just been changed. The fingerprint for the ECDSA key sent by the remote host is <redacted>. Please contact your system administrator. Add correct host key in /home/user/.ssh/known_hosts to get rid of this message. Offending ECDSA key in /home/user/.ssh/known_hosts:10 remove with: ssh-keygen -f \"/home/user/.ssh/known_hosts\" -R jumphost ECDSA host key for jumphost has changed and you have requested strict checking. Host key verification failed. ssh_exchange_identification: Connection closed by remote host Besides a MitM attack (Make sure this is not the case from a trusted source. An adversary may be spoofing the host and continuing may give the adversary the information they seek to attack your server), this can also happen after changing a key : edit ~/.ssh/known_hosts file and remove the offending line. In the above example that is line 10. when using ssh on a LAN (where DHCP is used and IP addresses change) when jumping to multiple hosts from a jump host. Bypassing verification (not recommended)  To disable the host key checking and the warnings, set StrictHostKeyChecking no in ~/.ssh/config and UserKnownHostsFile=/dev/null to send the key to a null known_hosts file to avoid future mismatches, and both defeat the intended verification security purpose . For all hosts Host * StrictHostKeyChecking no UserKnownHostsFile=/dev/null For 192.168.0.0/24 Host 192.168.0.* StrictHostKeyChecking no UserKnownHostsFile=/dev/null Even with StrictHostKeyChecking set to no , a user may still be refused to connect when connecting via ProxyJump or ProxyCommand with multiple hosts through a jumphost. ProxyJump issues another ssh process, that does not inherit the command-line arguments that were specified on the command-line of the first ssh command. Host jumphost User jumpuser StrictHostKeyChecking=no UserKnownHostsFile=/dev/null IdentityFile ~/.ssh/id_jumpuser_rsa Get more information on what is happening with the ProxyCommand: ssh -o ProxyCommand=\"ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_jumpuser_rsa -W %h:%p jumpuser@jumphost\" -i ~/.ssh/id_jumpuser_rsa jumpuser@XXX.XXX.XXX.XXX HostKeyAlias  HostKeyAlias specifies an alias that should be used instead of the real host name when looking up or saving the host key in the host key database files. This option is useful for tunnelling SSH connections or for multiple servers running on a single host . It caches the remote public under the alias name. Useful if different openSSH servers are listening on different ports of the same physical server, because normally the port number is not stored when caching public host keys. If the key has a different name (alias) both keys can be cached and valid. Host jumphost HostName XXX.XXX.XXX.XXX User user HostKeyAlias jumphost ProxyCommand ssh anotheruser@backendserver nc %h %p CheckHostIP  And what if there are 2 different host keys for the same IP, or when the IP’s change (DHCP on a LAN for example)? If CheckHostIP is set to yes (default), ssh will check the host IP address in the known_hosts file. This allows ssh to detect if a host key changed due to DNS spoofing. If the option is set to no , the check will not be executed. Host server1 Hostname whatever1.com HostKeyAlias server1 CheckHostIP no Port 22001 User user Host server2 Hostname whatever2.com HostKeyAlias server2 CheckHostIP no Port 22002 User user",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0616552662b98931841c2e9e0354bde9",
    "u": "https://server.tymyrddin.dev/docs/firewall/waf",
    "t": "Web Application Firewall WAF ",
    "c": "Web Application Firewall WAF  A web application firewall (or WAF) filters, monitors, and blocks HTTP traffic to and from a web application. A WAF is differentiated from a regular firewall in that a WAF is able to filter the content of specific web applications while regular firewalls serve as a safety gate between servers. mod_security  The mod_security module is a free Web Application Firewall (WAF) that works with Apache, Nginx and IIS. It supports a flexible rule engine to perform simple and complex operations and comes with a Core Rule Set (CRS) which has rules for SQL injection, cross site scripting, Trojans, bad user agents, session hijacking and a lot of other exploits. For Apache, it is an additional module, easy to install and configure. For Nginx and other web servers there is a stand-alone version.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4aa9cf5e02a623bd00d9a4f4ca313010",
    "u": "https://server.tymyrddin.dev/docs/users/readme",
    "t": "Introduction ",
    "c": "THM Room: Hardening basics Introduction  What?  Securing user accounts through smart configuration of sudo, using complex passwords, disabling root access and locking down home directories. Why?  The principle of least privilege states that each user should only have enough access to perform their daily tasks. How?  Configuring sudo Disabling root access Locking home directories Configuring password complexity Configuring other password requirements Dangers of the lxd group Mastering Linux Security and Hardening, Donald A. Tevault, Second Edition",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "00cf5a9435b916bc7548f880f33afe40",
    "u": "https://server.tymyrddin.dev/docs/pki/pam",
    "t": "Pluggable Authentication Modules (PAM) ",
    "c": "Pluggable Authentication Modules (PAM)  Pluggable Authentication Modules (PAM) is a suite of shared libraries, providing an abstraction layer between the various methods available that provide authentication and the applications that require authentication and would otherwise have to support those methods directly. With PAM, all that is necessary for these components to cooperate is that a specific PAM module be available for each of them. Passwords  Never reuse old passwords ever. . Open /etc/pam.d/common-password : To restrict users from using their old passwords on the same machine, in the auth section, enter the following line: auth sufficient pam_unix.so likeauth nullok If you want to allow a user to reuse his/her password from a number of passwords that were last used, add the following line in the password section: password sufficient pam_unix.so nullok use_authtok md5 shadow remember=3 SSH  The pam_listfile.so module authenticates users based on the contents of a specified file. For example, if username exists in a file /etc/ssh/ssh.allow , ssh will grant login access. Deny access  Append /etc/pam.d/ssh : auth required pam_listfile.so item=user sense=deny file=/etc/ssh/ssh.deny onerr=succeed Add all usernames you wish to deny access for to a /etc/ssh/ssh.deny file. Allow access  Append /etc/pam.d/ssh : auth required pam_listfile.so item=user sense=allow file=/etc/ssh/ssh.allow onerr=fail Add all usernames to allow access for to a /etc/ssh/ssh.deny file. SASL  SASL can use different authentication methods. The default one is PAM (as configured in /etc/conf.d/saslauthd ) Create /etc/pam.d/smtp #%PAM-1.0 auth required pam_unix.so account required pam_unix.so",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b503d7843800d3de1d2610a232d0ade2",
    "u": "https://server.tymyrddin.dev/docs/encryption/gnupg",
    "t": "GNU Privacy Guard ",
    "c": "GNU Privacy Guard  GNU Privacy Guard (GPG) is based on Pretty Good Privacy, the OpenPGP standard. Pretty Good Privacy (PGP) is used widely to encrypt and decrypt email by using asymmetrical and symmetrical systems. When you first send your email, it is encrypted with your own public key, as well as a session key, which is a one-time use random number called a nonce . The session key is then encrypted into the public key and sent with the cipher text. To decrypt your email, the receiving end must use their private key in order to discover the session key. The session key combined with the private key are then used to decrypt the cipher text back into the original document. GPG comes pre-installed on Ubuntu. Its main advantages: Easy encryption for email and files. Mentioned in 2017 by Snowden, referring to 2014, supposedly, then, the NSA could not crack PGP. Asymmetric encryption removes the need to provide a password for decrypting or unlocking files thus improving security overall. Using GPG  To create keys: gpg --gen-key To verify the keys were created: gpg --list-keys Encrypting files with GPG  Symmetric  gpg -c <file> This will prompt the user to enter a passphrase to protect the file. This is not the passphrase you used to create your keys The -d option while targeting our gpg file that was encrypted, will print out the contents of the file after prompting for the secret passphrase. Asymmetric  Asymmetric encryption works by using two keys - one to encrypt, and one to decrypt. The public key is used to encrypt the data while the private key is used to decrypt the data. So using the typical Bob and Alice example, let’s say Bob wants to send Alice an encrypted file. He would first encrypt the file using Alice’s public key and then send the file away. Once Alice receives the file, she can decrypt it with her private key. The big takeaway here is that public keys can be shared, private keys should be kept private and held onto for dear life. NEVER SHARE YOUR PRIVATE KEY! To use the scheme, users need to extract their public keys and send them to each other. Go to the .gnupg folder and extract with: gpg --export -a -o <filename> This will export the user’s public key as ASCII armored output as the filename specified. In order to import the file, (be in .gnupg directory or know the path). gpg --import <filename.txt> To encrypt a document asymmetrically: gpg -e <document> When the other party wishes to decrypt it, he/she will be prompted for his/her passphrase for his/her private key. After entering that he/she is greeted with the text from the file. gpg -d <document>.gpg",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f9dc896153c53990b225d2909e4997d7",
    "u": "https://server.tymyrddin.dev/docs/firewall/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Monitor traffic to and from a host, and only allow legitimate traffic. Why?  Prevent unauthorised remote access, but while a firewall should block backdoor access via a Trojan, there is a chance that this can be bypassed. Block unsuitable or immoral content, but consider the ethics of reading private content to be able to do so. How?  iptables nftables UFW firewalld FireHOL Packet filtering with I/O Control Fail2ban SSHguard WAF Port spoofing Notes  Deny All and then add exceptions to restrict access to everything except the specific services you need to remain open. Avoid using ANY in Allow rules. A rule where the service field is ANY can open up 65,535 attack vectors, I mean, TCP ports. Document all rules and use comments for relevant information (purpose, service, users/servers/devices affected, permanent or temporary, name of person that added it) Review proposed and changed firewall rules before implementation Consider a WAF. Mind that it requires a lot of support work because the defaults are all very strict. Users can not ven make linux documentation pages in a dokuwiki without getting thrown out.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "df519fa87b90827b0edfdb4ac68fde59",
    "u": "https://server.tymyrddin.dev/docs/vnc/tigervnc",
    "t": "TigerVNC ",
    "c": "TigerVNC  TigerVNC is not as lightweight as TightVNC , but it provides extensions for advanced authentication methods and TLS encryption , hence a proper candidate for a fallback when ssh fails. Installation  Install the Xfce desktop environment on the server: # apt-get install xfce4 xfce4-goodies xorg dbus-x11 x11-xserver-utils Install the vnc server: # apt-get install tigervnc-standalone-server tigervnc-common Create a new user to access the server. # useradd vncuser Add the user to the sudo group: # usermod -aG sudo vncuser As the vncuser, run the vncserver command to create the initial configuration and set up the password. Do not use sudo. $ vncserver You will require a password to access your desktops. Password: Verify: Would you like to enter a view-only password (y/n)? n /usr/bin/xauth: file /home/vncuser/.Xauthority does not exist New 'debian9.localdomain:1 (vncuser)' desktop at :1 on machine debian9.localdomain Starting applications specified in /etc/X11/Xvnc-session Log file is /home/vncuser/.vnc/debian9.localdomain:1.log Use xtigervncviewer -SecurityTypes VncAuth -passwd /home/vncuser/.vnc/passwd :1 to connect to the VNC server. Configuration  Default for the service is on port 5901 (display port :1 ). Stop the service: $ vncserver -kill :1 Make a backup of the xstartup file: $ mv ~/.vnc/xstartup ~/.vnc/xstartup.old Create a new xstartup file and open it (empty file): $ vi ~/.vnc/xstartup To have VNC read the server user’s .Xresources file and launch Xfce (in the background), append: #!/bin/sh unset SESSION_MANAGER unset DBUS_SESSION_BUS_ADDRESS exec startxfce4 Write and quit file, and (as root) make it executable. # chmod u+x ~/.vnc/xstartup Restart the service: $ vncserver Firewall  Open ports in the firewall for inbound communication. Control  For starting, stopping, and restarting the service, create a new (empty) systemd unit file /etc/systemd/system/vncserver@.service # vi /etc/systemd/system/vncserver@.service The @ symbol will allow for passing an argument (the VNC display port). Append: [Unit] Description=Remote desktop service (VNC) After=syslog.target network.target [Service] Type=simple User=vncuser PAMName=login PIDFile=/home/%u/.vnc/%H%i.pid ExecStartPre=/bin/sh -c '/usr/bin/vncserver -kill :%i > /dev/null 2>&1 || :' ExecStart=/usr/bin/vncserver :%i -geometry 1280x800 -alwaysshared -fg ExecStop=/usr/bin/vncserver -kill :%i [Install] WantedBy=multi-user.targetReload systemd manager configuration # systemctl daemon-reload Enable the unit file # systemctl enable vncserver@1.service Kill the vncserver $ vncserver -kill :1 And start it as any other systemd service. $ sudo systemctl start vncserver@1 Verify $ sudo systemctl status vncserver@1 Clients  Linux: xvnc4viewer Configuration resources  TigerVNC",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5e2a19851b9ec675864a435d1aec5e88",
    "u": "https://server.tymyrddin.dev/docs/services/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Never have anything that you don’t absolutely need installed on a server. Especially not any unnecessary network services. Why?  Do not give adversaries extra ways to get into the systems. How?  Auditing system services with systemctl Auditing network services with netstat Auditing network services with nmap Mastering Linux Security and Hardening, Donald A. Tevault, Second Edition",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "230b5e9e61df79f9727abf25a72e0224",
    "u": "https://server.tymyrddin.dev/docs/vnc/secure-sessions",
    "t": "Securing sessions ",
    "c": "Securing sessions  TLS  Start the VNC server with: # vncserver -SecurityTypes=VeNCrypt,TLSVnc On the client, connect with vncviewer: $ vncviewer -SecurityTypes=VeNCrypt,TLSVnc XXX.XXX.XXX.XXX:1 With TLSVnc, there is standard VNC authentication and traffic is encrypted with GNUTLS but the identity of the server is not verified. TigerVNC also supports other security schemes such as X509Vnc. X509  X509 combines standard VNC authentication with GNUTLS encryption and server identification, and is the recommended mode for a secure connection. Do not set SecurityTypes on the server to a non-encrypted option as high-priority (such as None, VncAuth, Plain, TLSNone, TLSPlain, X509None, X509Plain) because then it is not possible to use encryption. When running vncviewer, it is safer to explicitly set SecurityTypes and not accept any unencrypted traffic. Any other mode is to be used only when accessing a vncserver via SSH tunnels. SSH  On the server install ssh. On the client: $ ssh -L 5901:127.0.0.1:5901 -C -N -l vncuser XXX.XXX.XXX.XXX The -L switch specifies binding port 5901 of the remote connection to port 5901 on the local machine (client), -C enables compression, -N specifies there will be no remote command, and -l the remote login name.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d85a985b8eb633d043dc2b4780415f18",
    "u": "https://server.tymyrddin.dev/docs/users/homes",
    "t": "Locking home directories ",
    "c": "Locking home directories  This is another area where different Linux distribution families are different from each other. Each distribution family comes with different default security settings. A security administrator who oversees a mixed environment of different Linux distributions will need to take this into account. The UMASK line is in the login.defs file for all Linux distributions, but Red Hat-type distributions are the only ones that have UMASK set to a restrictive value of 077 by default, which removes all permissions from the group and others. Other distros set it to 022 by default, which creates home directories with a permissions value of 755 . This allows everybody to enter everybody else’s home directories and access each others’ files. Red Hat and CentOS  Red Hat Enterprise Linux and all of its descendants have better out-of-the-box security than any other Linux distribution. One thing that’s already been done is locking down users’ home directories. By default, the useradd utility on Red Hat-type systems creates user home directories with a permissions setting of 700 . Only the user who owns the home directory can access it. The UMASK is set in /etc/login.defs . CREATE_HOME yes UMASK 077 Debian and Ubuntu  Debian and its offspring, such as Ubuntu, have two user creation utilities: useradd and adduser . useradd  Using useradd : sudo useradd -m -d /home/username -s /bin/bash username Otherwise, username would have no home directory and would be assigned the wrong default shell. Home directories are wide open, with execute and read privileges for everybody. cd /home sudo chmod 700 * To change the default permissions setting for home directories, open /etc/login.defs and change UMASK 022 to UMASK 077 . Now, new users’ home directories will get locked down on creation, just as they do with Red Hat. adduser  The adduser utility is an interactive way to create user accounts and passwords with a single command, which is unique to the Debian family of Linux distributions. Most of the default settings that are missing from the Debian implementation of useradd are already set for adduser. The only thing wrong with the default settings is that it creates user home directories with the wide-open 755 permissions value. 777 is the numerical equivalent of rwxrwxrwx in Linux, subtracting that from the UMASK of 022 , you get the resulting permissions that will be set on a user’s home directory and files. Change the UMASK to 077 in /etc/login.defs .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f11d2a745a20faf20877cb4d2025fb31",
    "u": "https://server.tymyrddin.dev/docs/access/acl",
    "t": "Access control lists (ACL) and shared directory management (SDM) ",
    "c": "Access control lists (ACL) and shared directory management (SDM)  With access control list (ACL), we can allow only a certain person to access a file, or we can allow multiple people to access a file with different permissions for each person. To view an ACL for a file or directory: getfacl <file> Creating an ACL  For setting an ACL, remove all permissions from everyone except for the user of the file. That’s because the default permissions settings allow members of the group to have read/write access, and others to have read access. chmod 600 <file> To allow a user or a group to have any combination of read, write, or execute privileges: setfacl -m u:<username>:rw <file> -m modify or create an ACL. u:username:r : user’s name, followed by another colon, and the list of permissions to grant this user. In this case, read and write access. Set an ACL for group access by replacing u: with g: . Creating an inherited ACL for a directory  To have all files that get created in a shared directory use the same ACL: setfacl -m d:u:<username>:r <directory> Using an ACL mask  Remove an ACL from a file or directory with the -x option: setfacl -x u:<username> <file> The -x option removes the entire ACL. To remove permissions with a mask, in this case read permission: setfacl -m m::r <file> m::r sets a read-only mask on the ACL. Other permissions stay intact. Preventing the loss of ACLs during a backup  When using tar to create a backup and then doing a restore, the ACL’s are gone. Use the --acls option: tar cJvf directory_backup.tar.xz dir/ --acls User groups  To create a group: sudo groupadd <groupname> Adding members when creating user accounts, on CentOS: sudo useradd -G <groupname> <username> on Debian/Ubuntu: sudo useradd -m -d /home/<username> -s /bin/bash -G <groupname> <username> And assign a password. To add an existing user to a group (CentOS and Debian families): sudo usermod -a -G <groupname> <username> Adding users to a group by editing the /etc/group file: ... <groupname>>:x:1005:<list of comma separated usernames> ... This method is extremely handy for when you need to add lots of members to a group at the same time. Creating a shared directory  sudo mkdir <directoryname> The new directory belongs to the root user and has a permissions setting of 755 , which permits read and execute access to everybody and write access only to the root user. To allow only members of a specific group to access the directory, change ownership and group association, and then set the permissions: sudo chown nobody:<groupname> <directoryname> sudo chmod 770 <directoryname> Setting the SGID bit and the sticky bit on the shared directory (it is safe and useful to set SGID on a shared directory): sudo chmod 2770 <directoryname> But now users in the group can delete each other’s files. When the sticky bit is set on files, Linux just ignores it, whereas for directories it has the effect of preventing users from deleting or even renaming the files it contains unless the user owns the directory, the file, or is root. sudo chmod o+t <directoryname> To set the sticky bit in octal form, prepend the number 1 to the current (or desired) basic permissions. Since the SGID bit has a value of 2000, and the sticky bit has a value of 1000, we can just add the two together to get a value of 3000 to add to the permissions: sudo chmod 3770 <directoryname> Having the sticky bit set will prevent group members from deleting anybody else’s files.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1c5a85eade4241a538fa53c4d231fe37",
    "u": "https://server.tymyrddin.dev/docs/ids/samhain",
    "t": "Samhain ",
    "c": "Samhain  The Samhain host-based intrusion detection system (HIDS) provides file integrity checking, log file monitoring/analysis, rootkit detection, port monitoring, detection of rogue SUID executables, and hidden processes. Like having tripwire when it was still working plus rkhunter rolled into one. Plus, it can be expanded to include more (remote) clients if set up in client-server mode and getting Beltane II as well (not GPL licensed and can be used on a limited amount of (10) machines for a small donation). Something that can maybe be used for guarding client machines remotely. Yum. Problems  A steeper learning curve than for other programs. No binaries available, setting it up is not easy for non-techies Download  Download samhain-current.tar.gz from Samhain Labs . Verification  cd Downloads/ $ gunzip samhain-current.tar.gz $ tar -xf samhain-current.tar $ gpg --keyserver pgp.mit.edu --recv-key 0F571F6C gpg: key 1AAD26C80F571F6C: 3 duplicate signatures removed gpg: key 1AAD26C80F571F6C: 96 signatures not checked due to missing keys gpg: key 1AAD26C80F571F6C: \"Rainer Wichmann <rwichmann@la-samhna.de>\" not changed gpg: key 3A2AAE330F571F6C: 21 signatures not checked due to missing keys gpg: key 3A2AAE330F571F6C: \"Rainer Wichmann <rwichmann@la-samhna.de>\" not changed gpg: Total number processed: 2 gpg: unchanged: 2 $ gpg --fingerprint 0F571F6C pub dsa1024 1999-10-31 [SCA] EF6C EF54 701A 0AFD B86A F4C3 1AAD 26C8 0F57 1F6C uid [ unknown] Rainer Wichmann <rwichmann@la-samhna.de> uid [ unknown] Rainer Wichmann <rwichmann@hs.uni-hamburg.de> sub elg1024 1999-10-31 [E] pub rsa1024 2014-07-21 [SCEA] [revoked: 2016-08-16] 5B17 5A1C 8C1B 7BC3 CB12 0FAA 3A2A AE33 0F57 1F6C uid [ revoked] Rainer Wichmann <rwichmann@la-samhna.de> [nina@archlinux Downloads]$ gpg --verify samhain-4.2.4.tar.gz.asc samhain-4.2.4.tar.gz gpg: Signature made Thu 21 Dec 2017 09:05:24 PM CET gpg: using DSA key 1AAD26C80F571F6C gpg: Good signature from \"Rainer Wichmann <rwichmann@la-samhna.de>\" [unknown] gpg: aka \"Rainer Wichmann <rwichmann@hs.uni-hamburg.de>\" [unknown] gpg: WARNING: This key is not certified with a trusted signature! gpg: There is no indication that the signature belongs to the owner. Primary key fingerprint: EF6C EF54 701A 0AFD B86A F4C3 1AAD 26C8 0F57 1F6C And that fits with the key given on the site. Simple configuration stand-alone  Configure stand-alone version : $ ./configure checking for a BSD-compatible install... /usr/bin/install -c checking whether make sets $(MAKE)... yes checking build system type... x86_64-unknown-linux-gnu checking host system type... x86_64-unknown-linux-gnu checking for gcc... gcc . . . [snip] . . . config.status: creating deploy.sh config.status: creating config.h config.status: executing default commands samhain has been configured as follows: System binaries: /usr/local/sbin Configuration file: /etc/samhainrc Manual pages: /usr/local/man Data directory: /var/lib/samhain Database file: /var/lib/samhain/samhain_file PID file: /run/samhain.pid Log file: /var/log/samhain_log Base key: 1617215581,281009996 Selected rc file: samhainrc.linux $ Configuration for watching logins, mounts and rootkits  Watching over logins: $ ./configure --enable-login-watch Over mountings: ./configure --enable-mount-check Samhain can check for kernel rootkits on FreeBSD and Linux with: $ ./configure --with-kcheck=systemmap where systemmap is the System.map file for a particular system. Configuration for stealth  If an intruder cannot discover that samhain is running, he cannot compromise it. You can, for example, use: $ ./configure --enable-install-name=somename where somename is an innocuous-sounding executable name. To make it less likely that the program isn’t accidentally discovered, samhain can be set to never respond to the command line. Or, it can be set to respond to the command line only after a certain password is given: $./configure --enable-nocl=somepass If somepass is set to an empty string it disables command-line interaction completely. Otherwise, invoke samhain with somepass as the first argument followed by the other arguments. There are many other interesting stealth options available, all documented along with the rest of the compilation switches in Appendix A of the documentation . Build  Next step is to Build : $ make gcc -I. -o depend-gen ./src/depend-gen.c update depend.dep ... gcc -I. -o mkhdr ./src/mkhdr.c gcc -I. -o encode ./src/encode.c encode 0 config.h ./encode 0 ./src/sh_files.c --> x_sh_files.c gcc -DHAVE_CONFIG_H -I. -I./include -O2 -D_FORTIFY_SOURCE=2 -fstack-protector-all -pthread -DUSE_MALLOC_LOCK=1 -fPIE -Wall -W -fno-strength-reduce -fno-omit-frame-pointer -Wno-empty-body -Wno-invalid-source-encoding -DSH_STANDALONE -o sh_files.o -c x_sh_files.c . . . [snip] . . . sh_string.o sh_inotify.o dnmalloc.o sh_audit.o sh_registry.o sh_ipvx.o sh_restrict.o sh_filetype.o sh_sub.o sh_fInotify.o sh_checksum.o sh_guid.o sh_sem.o sh_dbIO.o sh_dbCheck.o sh_dbCreate.o -lz -lresolv -lnsl -lnsl -lattr -lacl gcc -I. -o sstrip ./src/sstrip.c $ Installation  Install : $ make install /usr/bin/install -c -m 700 samhain /usr/local/sbin/samhain /usr/bin/install: cannot create regular file '/usr/local/sbin/samhain': Permission denied chmod: cannot access '/usr/local/sbin/samhain': No such file or directory make: *** [Makefile:518: install-program] Error 1 Ah yes, installing an application and using ./configure without the --prefix= option, the make install process will install the compiled files in to the predefined paths in the system’s file system, and that means special permissions for writing the files is required: $ sudo make install [sudo] password for nina: /usr/bin/install -c -m 700 samhain /usr/local/sbin/samhain /bin/sh ./mkinstalldirs /usr/local/man/man8 mkdir /usr/local/man/man8 /bin/sh ./mkinstalldirs /usr/local/man/man5 mkdir /usr/local/man/man5 /usr/bin/install -c -m 644 ./man/samhain.8 /usr/local/man/man8/samhain.8 /usr/bin/install -c -m 644 ./man/samhainrc.5 /usr/local/man/man5/samhainrc.5 gcc -DHAVE_CONFIG_H -I. -I./include -O2 -D_FORTIFY_SOURCE=2 -fstack-protector-all -pthread -DUSE_MALLOC_LOCK=1 -fPIE -Wall -W -fno-strength-reduce -fno-omit-frame-pointer -Wno-empty-body -Wno-invalid-source-encoding -DSH_STANDALONE -DSH_IDENT=\\\"daemon\\\" -DTRUST_MAIN -DSL_ALWAYS_TRUSTED=0 -o trustfile ./src/trustfile.c mkdir /var/lib/samhain ./samhain-install.sh --destdir= --express --verbose install-data cp samhainrc.linux samhainrc cp samhainrc samhainrc.pre mv -f samhainrc.pre samhainrc.install ./samhain-install.sh --install-sh -m 600 samhainrc.install /etc/samhainrc checking whether paths are trustworthy configuration file /etc/samhainrc ... OK state directory /run ... OK state directory /var/log ... OK data directory /var/lib/samhain ... OK You can use 'samhain-install.sh uninstall' for uninstalling i.e. you might consider saving that script for future use Use 'make install-boot' if you want samhain to start on system boot Customisation  Customize : $ sudo vi /etc/samhainrc I will run with defaults for now, and make changes later. Initialisation  Initialize the baseline database ( do NOT do twice ): $ samhain -t init [snip] CRIT : [2018-03-04T22:01:33+0100] interface=<lstat>, msg=<No such file or directory>, userid=<0>, path=</var/lib/urandom/random-seed> CRIT : [2018-03-04T22:01:33+0100] msg=<POLICY MISSING>, path=</var/lib/urandom/random-seed> MARK : [2018-03-04T22:01:33+0100] msg=<File check completed.>, time=<593>, kBps=<9067.752000> NOTICE : [2018-03-04T22:01:33+0100] msg=<Finished writing baseline database.> ALERT : [2018-03-04T22:01:33+0100] msg=<EXIT>, program=<Samhain>, status=<exit_success> Aaaaand a sheitload of errors and garble passed by on my screen for about ten minutes, including all kinds of critical issues on missing files and policies. This was on a worst-case linux, an archlinux halfway in the making (by me), and to be expected. I be reading them logs then. :D Usage  Run samhain : $ samhain -t check...",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "401b8190c4e25ae1a89f62efdd801abc",
    "u": "https://server.tymyrddin.dev/docs/users/passwords",
    "t": "Configuring password complexity ",
    "c": "Configuring password complexity  NIST has come to agree with Bill Burr’s changed mind and have now changed their password implementation criteria to match Mr. Burr’s new recommendations: Passphrases do not meet any complexity criteria, and use dictionary words. How is that secure? It is a phrase with distinct words separated by blank spaces. That makes it secure and very difficult to brute-force. Passphrases are more difficult to crack than traditional passwords, and they are easier for users to remember. And, there is the reality that many organizations are still using complex passwords that regularly expire, and you’ll have to abide by their rules if you can’t convince them otherwise. And besides, if you are using traditional passwords, you do want them to be strong enough to resist any sort of password attack. Pwquality  pwquality is a PAM module that allows configuring password complexity requirements for users. It is fairly easy to install on Ubuntu. sudo apt-get install libpam-pwquality Once installed, it automatically adds an entry into the /etc/pam.d/common-password file. The pam.d directory is just another location where PAM adds files for basic services like ssh , basic login , etc. The pwquality.conf file found in /etc/security , has many options the administrator can set for password quality. The lines just need to be uncommented and modified. Resources  You Might Not Need Complex, Alphanumeric Passwords After All The New NIST Guidelines: We Had it All Wrong Before",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "98afa3056fd07053498c95b6bf9b0c6c",
    "u": "https://server.tymyrddin.dev/docs/pki/lets-encrypt",
    "t": "Let’s Encrypt ",
    "c": "Let’s Encrypt  Web PKI being yet another golden goose in the context of the business model that underpins the digital world. , we also have an alternative. Let’s Encrypt is a free, automated, and open Certificate Authority. The below is for debian (stretch). Installation certbot  Certbot is in active development, so the packages provided by Debian with stable releases tend to be outdated. Get a more up-to-date package by enabling the backports repository. Create the /etc/apt/sources.list.d/letsencrypt.list file and append: # echo 'deb http://deb.debian.org/debian <distribution>-backports main contrib non-free' >> /etc/apt/sources.list.d/letsencrypt.list # echo 'deb-src http://deb.debian.org/debian <distribution>-backports main contrib non-free' >> /etc/apt/sources.list.d/letsencrypt.list Update the package list to pick up the new repository’s package information: # apt update Install on Nginx with: # apt install python-certbot-nginx -t <distribution>-backports Get SSL certificate  Get a certificate and have Certbot edit your Nginx configuration automatically to serve it, turning on HTTPS access in a single step. # certbot --nginx Verification  Check the /etc/letsencrypt/live/<your-domain>/ directory for the presence of cert.pem , privkey.pem and chain.pem . Certbot looks for a server_name directive that matches your domain. Open the server block file for your domain: # vi /etc/nginx/sites-available/yourdomain.tld If necessary, change the server_name directive to: server_name yourdomain.tld www.yourdomain.tld; Verify the syntax of your configuration file: # nginx -t Reload Nginx to load the new configuration: # systemctl reload nginx Firewall  Punch a hole in the firewall to allow HTTPS traffic (allow the Nginx Full profile) and delete the redundant Nginx HTTP profile allowance. Auto renewal  Certbot comes with a renew script in /etc/cron.d that will renew your certificates automatically before they expire (they last for 90 days). Test automatic renewal: # certbot renew --dry-run Configuration resources  Certbot instructions , EFF",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a7c610ca928d678ffe31fca44e269e18",
    "u": "https://server.tymyrddin.dev/docs/logfiles/log-commands",
    "t": "log commands ",
    "c": "log commands  Less, more and zmore  # less /var/log/syslog less opens the syslog log file at the top. Use the arrow keys to scroll down one line at a time, the space bar to scroll down one page at a time, or the mouse wheel to scroll through the file. Use the [Shift]+[g] combination to immediately go to the end of the log file. Grep and zgrep  # grep \"user@whateverdomain.tld\" /var/log/mail.log > /tmp/result.txt zgrep is useful for compressed files: # zgrep -i Error *.gz Tail  tail prints the last part of files to output, for example the last 10 lines with the -n option. Adding the -f option will continue watching the log file and print out the next line written to the file. As soon as a new line is written to syslog, it removes the oldest. # tail -f -n 10 /var/log/syslog Escape it with the [Ctrl]+[x] key combination. Last and lastb  The last command reads from the system file called /var/log/wtmp or the file designated by the -f option. Names of users and tty’s can be given, in which case last will show only those entries matching the arguments. Names of tty’s can be abbreviated, thus last 0 is the same as last tty0 . When last catches a process signal like SIGINT (generated by the interrupt key, usually control-C) or a SIGQUIT (generated by the quit key, usually control-\\), last will show how far it has searched through the file; in the case of the SIGINT signal, last will then terminate. For the login history of sysadmin: # last | grep sysadmin To find out when the system was last rebooted: # last reboot lastb is the same as last , except that by default it shows a log of the file /var/log/btmp , which contains all the bad login attempts. dmesg  dmesg displays by default all messages from the kernel ring buffer. Use the scroll wheel to browse through the buffer or pipe the output of dmesg to the less command. For example, to print the log entries for the user facility: # dmesg --facility=user | less",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0ce29b9aeed5f95a4e86803e38bb2bcd",
    "u": "https://server.tymyrddin.dev/docs/logfiles/intruder-path",
    "t": "Path of a common intruder ",
    "c": "Path of a common intruder  Scenario  Assume an intruder gains access to the system through a vulnerability. Most likely, he/she wishes to gain elevated privileges in order to be able to take action, like install software, get user data that can possibly give access to other servers or systems, destroy or alter audit trails to hide tracks of having been there, etc. This can be done by installing malware (a rootkit) or manually. Assume he/she is successful. Note that there are more than zero users with uid=0 (superuser privileges)| Less likely but possible, the intruder creates a user without password. Note a new user has been created He or she will try to capture information of other computers on the same network (in particular users and passwords). This can be done with a sniffer. Note that a network interface is put into promiscuous mode. Binaries of the sniffer, configuration files, captured information are usually hidden in the /dev directory. Note regular files appearing in /dev A somewhat more knowledgeable intruder will try to modify certain binaries of the system to conceal the indicators of their presence ( su to not let on to elevated privileges, ifconfig to hide that the network interface is in promiscuous mode, ls to hide where their files are, ps to conceal the execution of the sniffer, find, netstat, top, etc). FIA’s can detect these alterations Important events for reconstructing an attack  Logging off and logging in (location) User and group management (changes in permissions and ability to gain access) Security policy changes Shutdowns and restarts System changes: Changes to the operating system (hardware and/or software events, configuration changes) Changes to hardware configuration Device driver installation Starting and stopping of services Applications: Many utilities send messages to application related logs Exceptions to this are web servers and FTP servers (have their own logging mechanisms, but can be included in syslog ) Accounts and group record changes: Creation, deletion and modification of users Modifications to groups",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "45d514489b18b4f5874d0f910dab7101",
    "u": "https://server.tymyrddin.dev/docs/vnc/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Virtual network computing, or VNC, is a graphical desktop sharing system that uses the Remote Frame Buffer protocol (RFB) to allow for controlling a server remotely. A VNC server transfers keyboard and mouse events, and displays the remote host’s screen via a network connection (relaying the graphical screen updates back). Servers are best set up as minimal environment, and installing GUI might lead to high hardware utilization. Virtual Network Computing (VNC) is a graphical desktop sharing system to remotely control another computer. Why?  In our context, only to be used as a fallback when ssh fails. How?  TightVNC TigerVNC Securing sessions Notes  VNC is not an encrypted protocol and can be subject to packet sniffing. Sessions can be secured: TightVNC is lightweight and connections will be smooth and stable even on slower internet connections. SSH tunnelling can be used. TigerVNC supports security schemes such as X509 that combines standard VNC authentication with GNUTLS encryption and server identification. <=",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ffcf9816017dbdcdc6bbfbc41f5c218d",
    "u": "https://server.tymyrddin.dev/docs/firewall/nftables",
    "t": "NFTables ",
    "c": "NFTables  Available upstream since Linux kernel 3.13. Basic idea  Got an idea! Working on it … Warning: untested! flush ruleset table inet filter { set inet filter tcp_port_out { type inet_service; elements = { 53, # DNS 11371, # OpenPGP HTTP Keyserver 2200, # SSH 80, # HTTP 443, # HTTPS } } set inet filter tcp_port_in { type inet_service; elements = { 2200, # SSH } } set inet filter udp_port_out { type inet_service; elements = { 53, # DNS 123, # NTP } } set inet filter udp_port_in { type inet_service; elements = { } } set inet filter user_out { type uid; elements = { } } set inet filter user_in { type uid; elements = { } } set tcp_scan_ports { type inet_service; elements = { 22, # SSH 23, # Telnet 1433, # MS SQL Login 8080, # HTTP Alternate 50661, # Apple Xsan } } set udp_scan_ports { type inet_service; elements = { 53, # DNS 5060, # SIP 53413, # Netis backdoor } } chain base_checks { # allow established/related connections ct state {established, related} accept # early drop of invalid connections ct state invalid log prefix \"Invalid \" drop } chain input { type filter hook input priority 0; # Accept on localhost iifname lo accept jump base_checks # Accept neighbour discovery ip6 nexthdr icmpv6 icmpv6 type { nd-neighbor-solicit, nd-router-advert, \\ nd-neighbor-advert } accept # Accept ping ip protocol icmp type { echo-request } accept # Allow IGMP ip protocol igmp accept tcp dport @tcp_port_in ct state new accept udp dport @udp_port_in ct state new accept meta skuid @user_in ct state new accept tcp dport @tcp_scan_ports drop udp dport @udp_scan_ports drop # Count and drop any other traffic counter log prefix \"Drop_in \" drop } # Not a gateway. We do not forward. chain forward { type filter hook forward priority 0; policy drop; jump base_checks } chain output { type filter hook output priority 0; # Accept from localhost oifname lo accept jump base_checks # Accept neighbour discovery ip6 nexthdr icmpv6 icmpv6 type { nd-neighbor-solicit, nd-router-advert, \\ nd-neighbor-advert } accept # Accept ping ip protocol icmp type { echo-request } accept tcp dport @tcp_port_out ct state new accept udp dport @udp_port_out ct state new accept meta skuid @user_out ct state new accept # Count and drop any other traffic counter log prefix \"Drop_out \" drop } kernel  [*] Networking support ---> Networking options ---> [*] Network packet filtering framework (Netfilter) ---> Core Netfilter Configuration ---> <M> Netfilter nf_tables support <M> Netfilter nf_tables conntrack module <M> Netfilter nf_tables counter module <M> Netfilter nf_tables log module <M> Netfilter nf_tables limit module <M> Netfilter nf_tables masquerade support <M> Netfilter nf_tables nat module IP: Netfilter Configuration ---> <M> IPv4 nf_tables support <M> IPv4 nf_tables route chain support <M> IPv4 packet rejection <M> IPv4 NAT <M> IPv4 nf_tables nat chain support <M> IPv4 masquerade support <M> IPv4 masquerading support for nf_tables Configuration files  Create a main table, for example A file /etc/nftables/main_config.conf where elements can be added A file /etc/nftables/main.conf with a skeleton inet table Set up the activation scripts /etc/nftables.conf as startup script (flushes rule set) /etc/nftables/reload_main.conf as reload script (deletes table) SSHguard  To integrate with SSHguard , edit /etc/sshguard.conf and change the value of BACKEND : BACKEND=\"/usr/lib/sshguard/sshg-fw-nft-sets\" When starting or enabling the sshguard.service , two new tables named sshguard in the ip and ip6 address families are added which filter incoming traffic through sshguard’s list of IP addresses. The chains in the sshguard table have a priority of -10 and will be processed before other rules of lower priority.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "790f5a899ae9c454c96e353c14aa69a8",
    "u": "https://server.tymyrddin.dev/docs/encryption/openvpn",
    "t": "OpenVPN ",
    "c": "OpenVPN  Installation  # apt-get install openvpn Server configuration  The sample server configuration file that comes with OpenVPN is a good starting point. It will create a VPN using a virtual tun network interface (for routing), will listen for client connections on udp port 1194 , and distribute virtual addresses to connecting clients from the 10.8.0.0/24 subnet. # cd /etc/openvpn/server # cp /usr/share/openvpn/examples/server.conf . # vi /etc/openvpn/server/server.conf The server will start as root, but for security, can be set to drop to lower privileges after startup, by removing the semicolons (uncommenting) the user nobody and group nogroup directives. Also uncomment out the client-to-client directive if you want clients to not only be able to reach the server over VPN (the default), but also each other. Set the ca , cert , key , and dh parameters in the config file to point to the files generated in the PKI setup . If you have set the DH key size to 2048 instead of the default 1024, change dh dh1024.pem accordingly. For assigning the different clients static IP addresses from the OpenVPN server, uncomment client-config-dir ccd Enabling compression is not recommended; it opens the server up to the VORACLE attack vector. It is recommended to use OpenVPN over UDP, because TCP over TCP is a bad idea. Write and quit. Assign static IP addresses  Create the client configuration directory: # mkdir /etc/openvpn/ccd For each client, create a configuration file assigning it to a static IP address. For example: In /etc/openvpn/ccd/<clientname1> ifconfig-push 10.8.0.5 10.8.0.6 The first client will use 10.8.0.6 as its IP address, and 10.8.0.5 is the VPN tunnel endpoint. The second address is only used to route traffic through the tunnel. This is because each client uses a CIDR/30 network. Per client 4 IP addresses are used. In /etc/openvpn/ccd/<clientname2> ifconfig-push 10.8.0.9 10.8.0.10 And in /etc/openvpn/ccd/<clientname3> ifconfig-push 10.8.0.13 10.8.0.14 To use a virtual IP address range other than 10.8.0.0/24 , modify the server directive. Mind that the virtual IP address range must be a private range currently unused on the network. Firewall server  Limit the incoming OpenVPN connections to the IP addresses of the servers you want the backend server to connect with in the firewall. Start the OpenVPN server  # systemctl openvpn start Client configurations  On a client: Copy the example client configuration file # cd /etc/openvpn/client/ # cp /usr/share/openvpn/examples/client.conf . # vi /etc/openvpn/client.conf Make changes: Add the address of the OpenVPN server to the configuration file: Look for remote my-server-1 1194 and change my-server-1 into the IP address of the server. Look for cert client.crt and key client.key and change them to the names of the keys that were copied over. Firewall client  Punch a hole for the server address in your firewall. Fire it up!  # systemctl openvpn start",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2485ece87355ee5023d46b3c03bec24e",
    "u": "https://server.tymyrddin.dev/docs/vnc/tightvnc",
    "t": "TightVNC ",
    "c": "TightVNC  TightVNC is a fast and lightweight remote control package. This choice will ensure that our VNC connection will be smooth and stable even on slower internet connections. It encrypts VNC passwords sent over the net (DES-encrypted challenge-response scheme and the password is limited by 8 characters), but the rest of the traffic is sent in the clear and are a security risk. Recommended is using TightVNC with ssh (and that defeats our purpose of only using it when ssh fails) Installation  Install the Xfce desktop environment on the server: # apt-get install xfce4 xfce4-goodies Install the vnc server: # apt-get install tightvncserver Create a new user to access the server. # useradd vncuser Add the user to the sudo group: # usermod -aG sudo vncuser As the vncuser, set up a secure password and create the initial configuration files: vncuser@localhost $ vncserver You will require a password to access your desktops. Password: Verify: Creating default startup script /home/vncuser/.vnc/xstartup Starting applications specified in /home/vncuser/.vnc/xstartup Log file is /home/vncuser/.vnc/localhost.localdomain:1.log Enter and verify a password to access the server remotely. It must be between six and eight characters long. More than 8 characters will be truncated automatically. The process then creates the necessary default configuration files and connection information for the server. Configuration  Default for the service is on port 5901 (display port :1 ). Stop the service: $ vncserver -kill :1 Make a backup of the xstartup file: $ mv ~/.vnc/xstartup ~/.vnc/xstartup.old Create a new xstartup file and open it (empty file): $ vi ~/.vnc/xstartup To have VNC read the server user’s .Xresources file and launch Xfce (in the background), append: #!/bin/bash xrdb $HOME/.Xresources startxfce4 & Write and quit file, and (as root) make it executable. # chmod +x ~/.vnc/xstartup Restart VNC: $ vncserver Firewall  Open ports in the firewall for inbound communication. Control  For starting, stopping, and restarting the service, create a new (empty) systemd unit file /etc/systemd/system/vncserver@.service # vi /etc/systemd/system/vncserver@.service The @ symbol will allow for passing an argument (the VNC display port). Append: [Unit] Description=Start TightVNC server at startup After=syslog.target network.target [Service] Type=forking User=vncuser Group=vncuser WorkingDirectory=/home/vncuser PIDFile=/home/vncuser/.vnc/%H:%i.pid ExecStartPre=-/usr/bin/vncserver -kill :%i > /dev/null 2>&1 ExecStart=/usr/bin/vncserver -depth 24 -geometry 1280x800 :%i ExecStop=/usr/bin/vncserver -kill :%i [Install] WantedBy=multi-user.target Reload systemd manager configuration # systemctl daemon-reload Enable the unit file # systemctl enable vncserver@1.service Kill the vncserver $ vncserver -kill :1 And start it as any other systemd service. $ sudo systemctl start vncserver@1 Verify $ sudo systemctl status vncserver@1 Clients  Windows: TightVNC, RealVNC, or UltraVNC. MacOS: Apple Remote or RealVNC. Linux: vinagre, krdc, RealVNC, or TightVNC. Configuration resources  TightVNC",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e879fe1c9d9bc31e710fb0acbd9e7f41",
    "u": "https://server.tymyrddin.dev/docs/incidents/prevention",
    "t": "Preventing incidents ",
    "c": "Preventing incidents  Use the principle of least privilege . The idea is to give users as few permissions as possible. While the sudo command is useful, it is often misused. By default, anyone that is a member of the sudo group can use sudo to do whatever they want. Restrict sudo access to particular commands. In regard to network shares, it’s always best to default to read-only whenever possible. This is not just because of the chance of a user accidentally deleting data; it’s always possible for applications to malfunction and delete data as well. With a read-only share, the modification or deletion of files is not possible. Additional read-write shares can be created for those who need them, but if possible, always default to read-only. Physical security is every bit as important as securing operating systems, applications, and data. Ensure security updates are installed in a timely fashion, utilizing security applications such as failure monitors and firewalls, and ensuring secure settings for OpenSSH.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c28590bcea6bb8bd483e139bb30ad1e3",
    "u": "https://server.tymyrddin.dev/docs/incidents/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  A good incident response plan will include a list of guidelines to be followed with regard to implementing new servers and managing current ones (isolating compromised servers, strategically patching and recovering servers). Create guidelines for things such as user management, server management, application installations, security, and procedure documents. Why?  We always do our best to design the most stable and fault-tolerant server implementations we possibly can. We can not prevent every type of incident that could possibly happen but having a good plan in place and following that plan will lessen the likelihood an incident becomes a disaster. How?  Preventing incidents Using git for configuration management Implementing a backup plan Using bootable recovery media Notes  Do not store backups or old versions of software on the production system. Automate making backups. Mastering Ubuntu Server, Jay LaCroix, Fourth Edition",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "95d3a27393444a24400ba6800acb21ef",
    "u": "https://server.tymyrddin.dev/docs/logfiles/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Server logs contain information that cannot be found anywhere else. For example, server errors and user access records. Why?  Having the ability to review these logs gives the ability to determine what caused an issue on the server. How?  rsyslogd Log commands Path of a common intruder Logrotate Centralised logging Notes  Make sure logs are working properly. syslog on Debian contains everything except authentication-related messages. Authentication related events can be found in auth.log . Use it to investigate failed login attempts, brute-force attacks and other vulnerabilities related to user authorisation mechanisms. RedHat and CentOS based systems use the secure file for tracking all security related messages including authentication failures, sudo logins, ssh logins and other errors logged by the system security services daemon and is very useful for detecting hacking attempts. Additional logs that may give clues are faillog containing information on failed login attempts and can be used to detect attempted security breaches involving username/password hacking and brute-force attacks. Normally I am all for distributed and decentralised systems, but for an infrastructure with multiple servers, centralised logging saves a lot of time and energy. When setting up a machine to act as log server, harden it and only use it to collect logs from other machines on your network. It should not be running anything else. Log what is needed to track the path of a common intruder . If and when it is all running well, consider setting up for intrusion detection and log correlation.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d7db2b4d3470b6d526b682e7c02c6e78",
    "u": "https://server.tymyrddin.dev/docs/pki/tls-ssl",
    "t": "TLS/SSL ",
    "c": "TLS/SSL  The CA is always the first subsystem to be configured; every other subsystem depends on the CA for its configuration. The CA, along with setting up the CA hierarchy for the PKI, issues certificates which every subsystem uses to function and sets up a security domain which establishes trusted relationships between subsystems. Installation  On all systems and subsystems install openssl. # apt-get install openssl Use the script that comes with the openssl package: # /usr/lib/ssl/misc/CA.pl -newca The script will take you through all the steps of creating your CA. The fields do not matter much. It is rather self-explanatory. Configuration  The script has created a new directory demoCA with the CA’s private key and public key/certificate in it. Demo useful. # vi /etc/ssl/openssl.cnf Change: dir = /etc/ssl/ca ... default_days = 730 default_bits = 2048 Edit the script too: # vi /usr/lib/ssl/misc/CA.pl Change: $DAYS=\"-days 730\"; # 2 year $CADAYS=\"-days 3650\"; # 10 years ... default_bits = 2048 And change (further down): system (\"$REQ -new -keyout \" . to system (\"$REQ -newkey rsa:2048 -keyout \" . Generating keys  For creating digital certificates for servers on your LAN, for VPN clients or for whatever service you need to use with SSL, two steps are needed: To create a private key and a certificate request (Many questions. Not important, except that the CN of the certificate must be the domain name of the site you wish to secure): # /usr/lib/ssl/misc/CA.pl -newreq Sign the request and generate a newcert.pem with the signed certificate. You will have to enter the password for your CA key which you supplied when creating the CA key, certificate and store. # /usr/lib/ssl/misc/CA.pl -sign The certificate’s key has a passphrase assigned during the -newreq phase. If you want your software to be able to autostart this won’t work. To remove a passphrase: # openssl rsa -in newkey.pem -out newkey.nopass.pem Rename newkey.pem and newcert.pem to something useful, like hostname.key and hostname.cert . Configuration resources  OpenSSL PKI Tutorial v1.1 Building a Root CA and an Intermediate CA using OpenSSL and Debian Stretch",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5c7f02a776f445962324450dcfb7f440",
    "u": "https://server.tymyrddin.dev/docs/firewall/pf",
    "t": "Packet filtering ",
    "c": "Packet filtering  PF is a packet filtering tool with simple syntax, user-friendliness, and extensive features. The packet filtering takes place in the kernel. A pseudo-device, /dev/pf , allows userland processes to control the behaviour of the packet filter ( ioctl interface). There are commands to enable and disable a filter, load rule sets, add and remove individual rules or state table entries, and retrieve statistics. The most commonly used functions are covered by pfctl . Configuration resources  OpenBSD Handbook Packet Filter",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7b89826a04dd3131264722bfb7878414",
    "u": "https://server.tymyrddin.dev/docs/firewall/fail2ban",
    "t": "Fail2ban ",
    "c": "Fail2ban  Note: Fail2Ban can reduce the rate of incorrect authentications attempts but cannot eliminate the risk weak authentication presents. Installation  Installing fail2ban package in Debian: # apt-get install fail2ban Check it was properly installed: # fail2ban-client -h Configuration  To configure fail2ban, make a local copy of the jail.conf file in /etc/fail2ban : # cd /etc/fail2ban # cp jail.conf jail.local Edit the file: # vi jail.local Set the IPs you want fail2ban to ignore (the list of clients that are not subject to the fail2ban policies), the ban time (in seconds) and maximum number of user attempts: [DEFAULT] # \"ignoreip\" can be an IP address, a CIDR mask or a DNS host ignoreip = 127.0.0.1 bantime = 3600 maxretry = 3 Jails are the rules which fail2ban apply to a given application/log. To enable log monitoring for Nginx login attempts, enable the nginx-http-auth jail: [nginx-http-auth] enabled = true filter = nginx-http-auth port = http,https logpath = /var/log/nginx/error.log maxretry = 6 For apache: [apache] enabled = true port = http,https filter = apache-auth logpath = /var/log/apache*/*error.log maxretry = 6 To tweak or add log filters, see the files in /etc/fail2ban/filter.d . Restart fail2ban. Test  To test fail2ban, look at the iptable rules before and after attempting to log in to a service that fail2ban is monitoring from another machine and look at the iptable rules to see if that IP source gets added: # iptables -L Usage  To check if an IP is banned (in Nginx): $ sudo fail2ban-client status nginx-naxsi To unban an IP address: $ sudo fail2ban-client set nginx-naxsi unbanip xxx.xxx.xxx.xxx To see all jails: $ sudo fail2ban-client status [sudo] password for nina: Status |- Number of jail: 25 `- Jail list: http-get-dos, nginx-noscript, proftpd, WP-Login-POST, nginx-login, spam-log, wppingback, postfix-sasl, nginx-conn-limit, nginx-proxy, nginx-auth, block-scanners, nginx-naxsi, nginx-badbots, BASH, sshd, pam-generic, named-refused-udp, postfix, WP-Login, ssh-ddos, wordpress, webmin-auth, dovecot, ssh Note for Apache  Fail2ban scans log files like /var/log/apache/error_log , /var/log/auth.log and /var/log/apache/access.log and temporarily or persistently bans failure-prone addresses by updating existing firewall rules. Out of the box Fail2Ban comes with filters for various services (apache, courier, ssh, etc).",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "92ae258b797328e0d65cc2e9781b5526",
    "u": "https://server.tymyrddin.dev/docs/pki/problems",
    "t": "Problems ",
    "c": "Problems  PKI is failing by trying to be all things to all people and things. PKIs have experienced a hype and many companies and organizations announced to provide certification services to the general public. Only a few of these have succeeded and actually provide certification services that can be taken seriously. X.509 standard  X.509 is a complex standard and X.509 certificates are complex data structures with a lot of fields, many of which are critical and/or non-critical extension fields. Complex technology is not easy to deploy on a large-scale. Since Peter Gutmann from Auckland University published the X.509 Style Guide in 2000, little has improved. X.509 certificates are specified with ASN.1 and the resulting data structures are not very meaningful for humans (and hard to parse). The X.509 specification is scattered across many standards, drafts and amendments from multiple standard bodies, leading to confusion and numerous profiles that lack interoperability. Parts of the standard, even some that are related to key elements, are underspecified. That leads to ambiguity, unknown semantics and interoperability issues, like the country code, date/time formats in validity or path validation. Technical  Public key pairs must be generated in an efficient and secure (centralized or decentralized) way, and require a cryptographically strong pseudo-random bit generator, something which is not always available to end-users. Private keys must be securely stored in a personal security environment (and not a vulnerable endpoint), and for Web PKI public CA’s certificates must be made publicly available in a certificate repository or directory service. Hierarchical trust models are dangerous, because they provide a single point of attack. Alternative models (for example the mesh model) are poorly scalable in time and in space. Certificate authorities (CA’s) have to periodically send out a list of certificates that have been revoked (CRL’s), meaning that a user will not only have to get the corresponding certificates from the certification chain, but will also have to check that those certificates are not in the CRL. The definition and maintenance of a global name space is not as simple in practice. Cross-certification does not work in practice because competition is rule. Economical  The establishment and operation of a top CA requires large investments. One needs protection from adversaries trying to break into the facility, intercepting electromagnetic signals, and exploitation of other weaknesses of the used hardware and software, and one needs qualified personnel able to withstand all of the regulation and bureaucratic stuff. The ROI of a top CA is difficult to determine and quantify. Like many other infrastructure components, public key certificates do not provide a specific function in and of themselves, but provides only the means to secure functions and applications of other infrastructures. IOW, business cases for PKI’s are extremely hard to make. That part got solved, with some scary stuff happening, web PKI next in the chain, and hosting companies (re)selling certificates. Juridical  If a digital signature is generated according to some digital signature law, then somebody must be made liable if something goes wrong. If that is the Credential service provider (CSP), the insurance protection must be taken into account in a business case. As Bruce Schneier pointed out in Secrets and Lies , CA’s usually limit their liability to the protection of their private key. As the CA plays the role of a trusted third party users of certificates are put at a disadvantage. CA’s are like a notary who would only be liable to keep his stamp secure. Nothing changed much there either. The owner of a public key certificate cannot repudiate a signature that is generated with the appropriate signing key, which may lead to the situation in which a certificate owner may be held liable and accountable for statements that are digitally signed with the proper key, even if he or she does not know (and does not agree) with the statements. Social  In the real world, trust is based on two-way relationships and experiences that have been made over time. This can only insufficiently be modelled with hierarchical certificate models. Poor usability is a common feature of many products that employ (public key) cryptography. Secure cryptographic solutions and usability seem mutually exclusive. But then, there is not much focus on end users and UX design in general. What’s new? The users of public key cryptography are often not aware of the vulnerabilities and pitfalls. Privacy and security  X.509 uses features from other standards, like DNs from X.500 which are in itself complex and have little value and provides unanticipated attack vectors. SSL in the context of web browsers used to be target of several successful attacks, either directly on SSL (e.g. SSL renegotiation bug), the combination of https and http (SSL Strip), URL-forgery, and X.509-based attacks on ASN.1 and DN-parsing. Integration of PKI with the surrounding environment (end points, web applications) may allow compromise. Should a private key be compromised, an attacker would have access to data intended for the recipient. Attackers that gain access to private keys can also eavesdrop on content intended for a recipient and decrypt data as it’s collected. This is the biggest threat to the PKI system, because compromised keys require new keys to be issued, and old ones revoked. There is no easy, fast and effective method to revoke a root certificate. Anything less that a full compromise of the root key will tempt a CA to downplay the incident and revoke only certain certificates. This occurred with the DigiNotar-Hack, because the revocation of the root-CA would have interrupted the operation of many services. Revocation services are suspect to DoS-attacks. CAs are included in browsers by OS- and browser vendors without a common consistent policy. To be included in the trust store the vendor has to pay a fee. Only Microsoft requires a formal audit. As a result there is a sufficient number of weak and very weak CAs that are included in default certificate stores. In addition there is suspicion in the security community that governments use compelled certificates to tap Internet communication. Clients certificates and their attributes have zero security value, because there are CAs that do not validate the attributes including attributes with arbitrary OIDs (P. Gutmann). Some certificate stores contain funny root certificates that should be excluded on any serious security review. Alternatives  A variety of alternative approaches, ranging from simple workarounds to designing the application to sidestep PKI’s shortcomings, can help solve the problems inherent in the standard X.509 model. For example, in simple public key infrastructure (SPKI) and simple distributed security infrastructure (SDSI), keys are not bound to identities, but to roles or authorisations and names only have to be unique locally. Resources  PKI interoperability: Still an issue? A solution in the X.509 realm , Ahmad Samer Wazan Romain Laborde, François Barrere, Abdelmalek Benzekri, David W Chadwick, 2017 Why have public key infrastructures failed so far? , Javier Lopez, Rolf Oppliger, Gunther Pernu, 2005 PKI: It’s Not Dead, Just Resting , Peter Gutmann, 2002 The Emperor’s New Clothes: The Shocking Truth  Digital Signatures and Internet Commerce , Jane K. Winn, 2001 X.509 Style Guide, Peter Gutmann , 2000",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "43d8aedb9740b5cce9e491449c8e9bf8",
    "u": "https://server.tymyrddin.dev/docs/access/mac",
    "t": "Mandatory access control (MAC) ",
    "c": "Mandatory access control (MAC)  Mandatory Access Control (MAC) is a type of Access Control. It goes along with Discretionary Access Control, Role Based Access Control, and Rule Based Access Control. MAC is considered the strongest form of access control due to allowing more control over who has access over what. In a Linux system, there are multiple ways to implement MAC. Two of which being SELinux and AppArmor. SELinux  SELinux is a free open source software project that was developed by the U.S. National Security Agency. While it can theoretically be installed on any Linux distribution, Red Hat-type distributions are the only ones that come with it already set up and enabled. It uses code in Linux kernel modules, along with extended filesystem attributes, to help ensure that only authorised users and processes can access either sensitive files or system resources. There are three ways in which SELinux can be used: It can help prevent intruders from exploiting a system. It can be used to ensure that only users with the proper security clearance can access files that are labeled with a security classification. In addition to MAC, SELinux can also be used as a type of role-based access control. AppArmor  AppArmor is the MAC system that comes installed with the SUSE and the Ubuntu families of Linux. Although it’s designed to do pretty much the same job as SELinux, its mode of operation is substantially different: SELinux labels all system processes and all objects such as files, directories, or network ports. For files and directories, SELinux stores the labels in their respective inodes as extended attributes. (An inode is the basic filesystem component that contains all information about a file, except for the filename.) AppArmor uses pathname enforcement, which means that you specify the path to the executable file that you want AppArmor to control. This way, there’s no need to insert labels into the extended attributes of files or directories. With SELinux, you have system-wide protection out of the box. With AppArmor, you have a profile for each individual application. With either SELinux or AppArmor, you might occasionally find yourself having to create custom policy modules from scratch, especially if you’re dealing with either third-party applications or home-grown software. With AppArmor, this is easier, because the syntax for writing AppArmor profiles is much easier than the syntax for writing SELinux policies. And AppArmor comes with utilities that can help you automate the process. Just as SELinux can, AppArmor can help prevent malicious actors from ruining your day and can help protect user data. The AppArmor directory is located at /etc/apparmor.d . This directory contains all the AppArmor profiles. The sbin.dhclient and usr.* files are AppArmor profiles. The abstractions directory is a sort of “includes” folder that has partially written profiles that can be used and included in custom profiles. Part of the work has already been done. Additional profiles can be installed with: sudo apt install apparmor-profiles apparmor-profiles-extra",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "046648d4934643901a204f6789f5cab5",
    "u": "https://server.tymyrddin.dev/docs/firewall/iptables",
    "t": "iptables ",
    "c": "iptables  iptables is not the name of Linux’s firewall. It is just one way of interacting with netfilter which every Linux distribution comes with. As such, iptables is a command line utility for configuring the Linux kernel firewall implemented within the Netfilter project. And it gets complex rather quickly which increases the risk of making mistakes. For a bare metal server running only a dedicated application, such as a Schleuder list, iptables is the simplest (and minimalistic) choice. For Ubuntu, it comes with the Uncomplicated Firewall ( ufw ), which is an easy-to-use frontend for iptables. As of CentOS version 7, FirewallD replaces iptables as default. The four components of iptables  iptables has 4 different components to it that all come together to give the utility its overall functionality: Filter table - offers the basic protection that you’d expect a firewall to provide Network Address Translation table - connects the public interwebs to the private networks Mangle table - for mangling them packets as they go through the firewall Security table - only used by SELinux Install and enable IPTables  In case it is not installed and you wish to install it: # yum install iptables-services Start the service: # systemctl start iptables # systemctl start iptables6 Enable automatic start on system boot # systemctl enable iptables # systemctl enable iptables6 Check iptables service status # systemctl status iptables # systemctl status iptables6 Chains  INPUT - packets coming into the firewall FORWARD - packets routed to another NIC on the network; for packets on the local network that are being forwarded on. OUTPUT - packets going out of the firewall Rules  Status command  To list rules -L showing interface name, rule options, TOS masks, packet and byte counters -n , and IP address and port in numeric format without using DNS to resolve names -v : # iptables -L -n -v With line numbers (important for deleting or inserting new rules into the firewall): # iptables -n -L -v --line-numbers To display INPUT or OUTPUT chain rules: # iptables -L INPUT -n -v # iptables -L OUTPUT -n -v --line-numbers Deleting a rule  To delete line number 4 using -D to delete one or more rules from the selected chain: # iptables -D INPUT 4 Inserting a rule  # iptables -L INPUT -n --line-numbers Chain INPUT (policy DROP) num target prot opt source destination 1 DROP all -- xxx.xxx.xxx.1 0.0.0.0/0 2 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state NEW,ESTABLISHED Inserting a rule between 1 and 2: # iptables -I INPUT 2 -s xxx.xxx.xxx.2 -j DROP Gives: # iptables -L INPUT -n --line-numbers Chain INPUT (policy DROP) num target prot opt source destination 1 DROP all -- xxx.xxx.xxx.1 0.0.0.0/0 2 DROP all -- xxx.xxx.xxx.2 0.0.0.0/0 3 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state NEW,ESTABLISHED Saving the rules  For saving the rules so they can be loaded at every reboot (you need to have iptables-persistent installed) # iptables-save > /etc/iptables/rules.v4 # ip6tables-save > /etc/iptables/rules.v6 Stop/Restart  Some distros like CentOS have installed a service called iptables to start and stop the firewall and a configuration file to configure it. For all other distros, iptables is a command, not a service. If you edited the configuration file manually, you have to reload iptables. Or load it directly through iptables: # iptables-restore < /etc/iptables/iptables.rules Usage  To deny all incoming and allow all outgoing connections ON A BARE METAL MACHINE where you have ACCESS TO THE CONSOLE: # Set default chain policies iptables -P INPUT DROP iptables -P FORWARD DROP iptables -P OUTPUT ACCEPT # Accept on localhost iptables -A INPUT -i lo -j ACCEPT iptables -A OUTPUT -o lo -j ACCEPT # Allow established sessions to receive traffic iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT SSH  For SSH access (-I inserts it before all other rules in INPUT): # iptables -I INPUT -p tcp --dport 22 -j ACCEPT If your SSH service is listening on another port, use that port instead of 22. OpenVPN  Create an iptables rule for NAT forwarding. An example (assuming the interface to forward to is named eth0): # iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE If the server cannot be pinged through the VPN, rules to open up TUN/TAP interfaces to all traffic may be needed: # iptables -A INPUT -i tun+ -j ACCEPT # iptables -A FORWARD -i tun+ -j ACCEPT # iptables -A INPUT -i tap+ -j ACCEPT # iptables -A FORWARD -i tap+ -j ACCEPT Set up rules for accepting connections from the OpenVPN port (default 1194) and through the physical interface, and make the changes permanent. SMTP Secure Sockets Layer  With SMTP Secure Sockets Layer (SSL) enabled, allow connections to port 587 (similar for 465). Add the rule for this port: # iptables -I INPUT 2 -p tcp --dport 587 -j ACCEPT Add the POP and IMAP ports and their secure counterparts: # iptables -I INPUT 3 -p tcp --dport 110 -j ACCEPT # iptables -I INPUT 4 -p tcp --dport 143 -j ACCEPT # iptables -I INPUT 5 -p tcp --dport 993 -j ACCEPT # iptables -I INPUT 6 -p tcp --dport 995 -j ACCEPT Save the iptables rules and restart iptables.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4b4c9c8b914e5d29f5b83b3a52376968",
    "u": "https://server.tymyrddin.dev/docs/firewall/ufw",
    "t": "UFW ",
    "c": "UFW  ufw is a program for managing a netfilter firewall with ease. It uses a command-line interface consisting of a small number of simple commands. Installation  On the backend server, install Uncomplicated Firewall (UFW) for configuring iptables. # apt-get install ufw Control  Start and enable: # systemctl start ufw # systemctl enable ufw Usage  To deny all incoming and allow all outgoing connections: # ufw default allow outgoing # default deny incoming SSH  # ufw allow ssh/tcp Or if you have changed port: # ufw allow <port>/tcp Nginx HTTP  # ufw allow 'Nginx HTTP' Nginx HTTPS  To allow HTTPS traffic, allow the Nginx Full profile and delete the redundant Nginx HTTP profile allowance: # ufw allow 'Nginx Full' # ufw delete allow 'Nginx HTTP' Logging  # ufw logging on OpenVPN  For openvpn: # vi /etc/default/ufw To allow ufw forwarding (VPN) traffic, append: DEFAULT_FORWARD_POLICY=\"ACCEPT\" Write and quit. Change /etc/ufw/before.rules : # NAT (Network Address Translation) table rules *nat :POSTROUTING ACCEPT [0:0] # Allow traffic from clients to the interface -A POSTROUTING -s 10.8.0.0/24 -o interface -j MASQUERADE # Optionally duplicate this line for each subnet if your setup requires it -A POSTROUTING -s 10.8.1.0/24 -o interface -j MASQUERADE # do not delete the \"COMMIT\" line or the NAT table rules above will not be processed COMMIT # Don't delete these required lines, otherwise there will be errors *filter ... Write and quit. Open the chosen openvpn port (default 1194/udp): # ufw allow 1194/udp Reload/restart ufw: # ufw reload",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "62e007e849431769363e8bca2a580393",
    "u": "https://server.tymyrddin.dev/docs/incidents/backup",
    "t": "Implementing a backup plan ",
    "c": "Implementing a backup plan  Backups are one of those things that some people don’t seem to take seriously until it’s too late. Data loss can be a catastrophic event for an organisation, so it’s imperative that you implement a solid backup plan. There’s no one best backup solution, since it all depends on what kind of data you need to secure, and what software and hardware resources are available to you. This may mean that you’ll need to make some compromises, such as creating regular snapshots of your database server’s storage volume or regularly dumping a backup of your important databases to an external storage device. The rsync utility is one of the most valuable pieces of software around to server administrators. It allows us to do some really wonderful things. In some cases, it can save us quite a bit of money. For example, online backup solutions are wonderful in the sense that we can use them to store off-site copies of our important files. And depending on the volume of data, they can be quite expensive. With rsync , we can back up our data in much the same way, with not only our current files copied over to a backup target but also differentials. If we have another server to send the backup to, even better. sudo rsync -a /home /backup Where the -a option, the archive mode, is a wrapper option that includes the following options all at the same time: -rlptgoD To point rsync to another server, rather than to another directory on the local server: sudo rsync -av /home/myuser admin@IP_ADDRESS:/backup By default, rsync copies data between two locations, but it doesn’t remove anything. With the --delete option, you can synchronise two points, telling rsync to make them the same by allowing it to delete files in the target that are no longer in the source. Incremental backups  sudo rsync -avb --delete --backup-dir=/backup/incremental /src /target Copying files from /src to /target , but now sending replaced files to the /backup/incremental directory. This means that when a file is going to be replaced on the target, the original file will be copied to /backup/incremental . This works because we used the -b option (backup) and the --backup-dir option, which means that the replaced files will not be renamed; they’ll simply be moved to the designated directory. This allows us to effectively perform incremental backups. Using the Bash shell to make incremental backups work even better: CURDATE=$(date +%m-%d-%Y) sudo rsync -avb --delete --backup-dir=/backup/incremental/$CURDATE /src /target Simple script  \"\"\" Simple backup script which just creates the root structure in an other folder and syncs everything which recursively lies within one of the source folders. For files bigger than a threshold they are first gziped.\"\"\" import argparse import gzip import os import shutil import sys import threading def parse_input (): parser = argparse . ArgumentParser () parser . add_argument ( '-target' , nargs = 1 , required = True , help = 'Target Backup folder' ) parser . add_argument ( '-source' , nargs = '+' , required = True , help = 'Source Files to be added' ) parser . add_argument ( '-compress' , nargs = 1 , type = int , help = 'Gzip threshold in bytes' , default = [ 100000 ]) # no input means show me the help if len ( sys . argv ) == 1 : parser . print_help () sys . exit () return parser . parse_args () def size_if_newer ( source , target ): # If newer it returns size, otherwise it returns False src_stat = os . stat ( source ) try : target_ts = os . stat ( target ) . st_mtime except FileNotFoundError : try : target_ts = os . stat ( target + '.gz' ) . st_mtime except FileNotFoundError : target_ts = 0 # The time difference of one second is necessary since subsecond accuracy # of os.st_mtime is striped by copy2 return src_stat . st_size if ( src_stat . st_mtime - target_ts > 1 ) else False def threaded_sync_file ( source , target , compress ): size = size_if_newer ( source , target ) if size : thread = threading . Thread ( target = transfer_file , args = ( source , target , size > compress )) thread . start () return thread def sync_file ( source , target , compress ): size = size_if_newer ( source , target ) if size : transfer_file ( source , target , size > compress ) def transfer_file ( source , target , compress ): \"\"\" Either copy or compress and copies the file \"\"\" try : if compress : with gzip . open ( target + '.gz' , 'wb' ) as target_fid : with open ( source , 'rb' ) as source_fid : target_fid . writelines ( source_fid ) print ( 'Compress {} ' . format ( source )) else : shutil . copy2 ( source , target ) print ( 'Copy {} ' . format ( source )) except FileNotFoundError : os . makedirs ( os . path . dirname ( target )) transfer_file ( source , target , compress ) def sync_root ( root , arg ): target = arg . target [ 0 ] compress = arg . compress [ 0 ] threads = [] for path , _ , files in os . walk ( root ): for source in files : source = path + '/' + source threads . append ( threaded_sync_file ( source , target + source , compress )) # sync_file(source, target + source, compress) for thread in threads : thread . join () if __name__ == '__main__' : arg = parse_input () print ( '### Start copy ####' ) for root in arg . source : sync_root ( root , arg ) print ( '### Done ###' )",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "515df808ba646b11fd5dda53057ac3e8",
    "u": "https://server.tymyrddin.dev/docs/users/disable-root",
    "t": "Disabling root access ",
    "c": "Disabling root access  Disabling the root login shell  When creating a virtual private server on a cloud service (Rackspace, DigitalOcean, Vultr), the cloud service will have you log in to that virtual machine as the root user. (Even with Ubuntu). The first thing that you will want to do is to create a normal user account and give it full sudo privileges. Then, log out of the root account and log back in with the normal user account, and disable the root account: sudo passwd -l root Disabling root SSH login  To disable the root SSH login, set #PermitRootLogin to no in /etc/ssh/sshd_config.conf . Disabling root using PAM  The PAM is “a powerful suite of shared libraries used to dynamically authenticate a user to applications (or services) in a Linux system”. The PAM settings are controlled by the conf file in /etc/pam.d or /etc/pam.conf . $ sudo vim /etc/pam.d/sshd OR $ sudo vim /etc/pam.d/login !!! WARNING !!! Editing the /etc/pam.d/* or /etc/pam.conf files can lock you out of your system. Add this rule in both files: auth required pam_listfile.so \\ onerr=succeed item=user sense=deny file=/etc/ssh/deniedusers auth : is the module type (or context). required : is a control-flag that means if the module is used, it must pass or the overall result will be fail, regardless of the status of other modules. pam_listfile.so : is a module which provides a way to deny or allow services based on an arbitrary file. onerr=succeed : module argument. item=user : module argument which specifies what is listed in the file and should be checked for. sense=deny : module argument which specifies action to take if found in file, if the item is NOT found in the file, then the opposite action is requested. file=/etc/ssh/deniedusers : module argument which specifies file containing one item per line. Next, create the file /etc/ssh/deniedusers and add the name root in it: $ sudo vim /etc/ssh/deniedusers Save the changes and close the file, then set the required permissions on it: $ sudo chmod 600 /etc/ssh/deniedusers From now on, the above rule will tell PAM to consult the /etc/ssh/deniedusers file and deny access to the SSH and login services for any listed user. Resources  How to Configure and Use PAM in Linux",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "210b3551e3bb184057550445304f8042",
    "u": "https://server.tymyrddin.dev/docs/services/systemctl",
    "t": "Auditing system services with systemctl ",
    "c": "Auditing system services with systemctl  On Linux systems that come with systemd , the systemctl command is pretty much a universal command. To view the status of services: sudo systemctl -t service --state=active With: -t service : We want to view information about the services – or, what used to be called daemons – on the system. --state=active : This specifies that we want to view information about all the system services that are actually running. This command shows the status of every service that’s running on your system. Generally, you do not want to see much information, although you might at times. Candidates for removal  Depending on what the server is for: smbd and nmbd indicates a Samba Process. Do you really need to export smb share on windows or other machine? telnet for bidirectional interactive text-oriented communication over internet or local area network? rlogin to log in to another host over network? rexec to execute shell commands on a remote computer. ftp to transfer files from one host to another host over Internet? automount to mount different file systems automatically to bring up network file system? named to run NameServer (DNS)? lpd to print to the server. inetd ? If you are running standalone applications like ssh which uses other standalone application like mysql , Apache , etc. then you don’t need inetd. portmap , an Open Network Computing Remote Procedure Call (ONC RPC) which uses rpc.portmap and rpcbind . If these processes are running, you are running NFS server. Really? NFS server is running unnoticed? Stop and disable  To stop a service, then prevent it from restarting at reboot: sudo systemctl stop <service> sudo systemctl disable <service> Example: sudo systemctl stop smbd sudo systemctl disable smbd",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "42e33c9f2848bdec00d57e3bd26d66dc",
    "u": "https://server.tymyrddin.dev/docs/logfiles/rsyslogd",
    "t": "Syslog ",
    "c": "Syslog  The rsyslogd service is a system utility providing support for message logging. Support of both internet and unix domain sockets enables this utility to be used for remote and local logging. Rsyslog is a multi-threaded implementation of syslogd. It is by default installed on Ubuntu, Debian, OpenSUSE and CentOS, next to systemd’s journald. A combined audit system for linux Allows for local and remote log collection. Remote logging makes day-to-day maintenance and incident response easier, log storage more secure, auditing more effective and analysis easier across multiple platforms. Allows for a single point of management Controlled per device in /etc/syslog.conf All reported messages are collected in a message file Log replication can copy the audit data to multiple remote-logging hosts It is recommended to also setup logrotate and compression. Setting it up  Set up a separate server for only logging purposes. Keep it in a secure location behind a (physical) firewall. Have no unnecessary services running on it. Delete all other user accounts. Add two snort boxes (IDS) that are actually syslog servers (yet have no IP address) and copy each packet intended for syslog server. With two boxes doing that independently from one another, court cases can be very convincingly supported. Thank you, Dean Bushmiller, that is a very, very good idea . Promiscuous mode Rule: Only listen for this IP address on this port (of syslog server) Server  Installation  # apt install rsyslog Start the service, enable it to auto-start at boot and check status: # systemctl start rsyslog # systemctl enable rsyslog # systemctl status rsyslog Configuration  Configuring rsyslog involves setting up input sources (where rsyslog receives logs), and destination rules for where and how logs are written. Rsyslog uses RainerScript for its configuration syntax. # vi /etc/rsyslog.conf By default, rsyslog uses the imjournal (importing structured log messages from systemd journal) and imusock modules (accepting syslog messages from applications running on the local system via Unix sockets). To configure it as a network and central logging server, the protocol (either UDP or TCP or both) it will use for remote syslog reception and the port it listens on must be configured. $ModLoad imudp $UDPServerRun <port> $ModLoad imtcp $InputTCPServerRun <port> Define the # rules for processing the remote logs . There be Templates . $template RemoteLogs,\"/var/log/remote/%HOSTNAME%/%PROGRAMNAME%.log\" *.* ?RemoteLogs & ~ Gather and write the received remote messages to distinct logs under /var/log/remote/ , based on the hostname client machine name and remote client application that generated the messages as defined in the RemoteLogs template. Record messages from all applications at all severity levels using the RemoteLogs template configuration. Stop processing the messages once it is written to a file. If not set, it would be written to the local files. OR for example, for allowing all hosts (but not applications) in a subnet XXX.XXX.XXX.XXX/24 to log to the machine, using only UDP. $ModLoad imudp $UDPServerRun <port> $AllowedSender UDP, XXX.XXX.XXX.XXX/24 $template RemoteStore, \"/var/log/remote/%HOSTNAME%/%timegenerated:1:10:date-rfc3339%\" :source, !isequal, \"localhost\" -?RemoteStore :source, isequal, \"last\" ~ Write and quit. Restart rsyslog daemon: # systemctl restart rsyslog Clients  Install rsyslog , and edit /etc/rsyslog.conf : *.* @XXX.XXX.XXX.XXX:<port> Configuration resources  rsyslog Configuring remote syslog from Unix/Linux and BSD/macOS Configuring remote syslog from Windows",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f637fbc5b318c3b6891cdbe0f3a52b35",
    "u": "https://server.tymyrddin.dev/docs/incidents/git",
    "t": "Using git for configuration management ",
    "c": "Using git for configuration management  One of the most valuable assets on a server is its configuration. This is second only to the data the server stores. Often, when we implement new technology on a server, we’ll spend a great deal of time editing configuration files all over the server to make it work as best as we can. This can include any number of things, from Apache virtual host files to DHCP server configuration, DNS zone files, and more. If a server were to encounter a disaster from which the only recourse was to completely rebuild it, the last thing we’d want to do is re-engineer all of this configuration from scratch. This is where Git comes in. Git isn’t just useful for software engineers. It is also a good tool we can leverage for keeping track of configuration files on our servers, for documentation, and for developing guidelines. When we make configuration changes, we can push the changes back to our Git server. If for some reason we need to restore the configuration after a server fails or is compromised via the config files, we can simply download configuration files from Git back onto the (new) server. Another useful aspect of this approach is that if an administrator implements a change to a configuration file that breaks a service, we can simply revert to a known working commit, and we’ll be immediately back up and running. Install git : sudo apt install git On the server, create a directory to host the repositories. For example, /git : sudo mkdir /git Modify this directory to be owned by the administrative user you use on your Ubuntu servers. Typically, this is the user that was created during the installation of the distribution. Use any user you want, just make sure the user is allowed to use OpenSSH to access the Git server. Change the ownership of the /git directory, so it is owned by this user. sudo chown lela:lela /git Create a Git repository in the /git directory. For Apache, a bare repository, a skeleton of a Git repository that does not contain any useful data, just some default configuration to allow it to act as a Git folder. To create the bare repository, cd into the /git directory and execute: git init --bare apache2 Initialized empty Git repository in /git/apache2/ On the client (the server that houses the configuration you want to place under version control), copy this bare repository by cloning it. To set that up, create a /git directory on the Apache server (or whatever kind of server you’re backing up) just as we did before. Then, cd into that directory and clone the repository: git clone IP_ADDRESS:/git/apache2 Replace the IP_address with either the IP address of the Git server or its hostname (if you’ve created a DNS entry for it). warning: You appear to have cloned an empty repository Make a backup of the current /etc/apache2 directory on the web server, in case we make a mistake while converting it to being version controlled: sudo cp -rp /etc/apache2 /etc/apache2.bak Then,move all the contents of /etc/apache2 into the repository: sudo mv /etc/apache2/* /git/apache2 The /etc/apache2 directory is now empty. Be careful not to restart Apache at this point; it won’t see its configuration files and will fail. Remove the (now empty) /etc/apache2 directory: sudo rm /etc/apache2 Make sure that Apache’s files are owned by root. Using the chown command, as we normally would to change ownership, we’ll also change the .git directory to be owned by root as well. We don’t want that, because the user responsible for pushing changes should be the owner of the .git folder. To change the ownership of the files to root, without touching hidden directories such as .git : sudo find /git/apache2 -name '.?*' -prune -o -exec chown root:root {} + Create a symbolic link to the Git repository so the apache2 daemon can find it: sudo ln -s /git/apache2 /etc/apache2 Check with: ls -l /etc | grep apache2 Reloading Apache, nothing should change, and it should find the same configuration files as it did before. sudo systemctl reload apache2 To push the changes back to the Git server, associate the files within the /git/apache2 directory into version control: git add . If you run the git status command from within your Git repository, you should see output indicating that Git has new files that haven’t been committed yet. A Git commit simply finalizes the changes locally. Basically, it packages up your current changes to prepare them for being copied to the server. To create a commit of all the files we’ve added so far, cd into the /git/apache2 directory and run: git commit -a -m \"Initial commit.\" the -a option tells Git to include anything that’s changed in the repository. The -m option allows attaching a message to the commit, which is required. If you don’t use the -m option, it will open your default text editor and allow you to add a comment from there. Push the changes back to the Git server: git push origin main By default, the git suite of commands utilizes OpenSSH, so our git push command should create an ssh connection back to the Git server and push the files there. You won’t be able to inspect the contents of the Git directory on your Git server, because it won’t contain the same file structure as your original directory. But when you pull a Git repository though, the resulting directory structure will be just as you left it. If you need to restore a repository onto another server, all you should need to do is perform a Git clone . To clone the repository into your current working directory: git clone IP_ADDRESS:/git/apache2 And each time you make changes to the configuration files, you can perform a git commit and then push the changes up to the server to keep the content safe: git commit -a -m \"Updated config: details.\" git push origin main To revert changes should the configuration get changed with non-working files, locate a known working commit and get its commit hash. A good method is using the tig command. The tig package must be installed for this to work: sudo apt install tig To use it, execute the tig command from within a Git repository. This will give a semi-graphical interface to browse through the Git commits. Select the best commit to go back to and get the commit hash. Exit tig by pressing q , then revert to that commit: git checkout <commit hash> Test the application to make sure that the issue is completely fixed. When finished testing, you can make the change permanent. Switch back to the most recent commit: git checkout main Then, permanently switch back to the commit that was found to be working properly: git revert --no-commit <commit hash> Then, commit the reverted Git repository and push it back to the server: git commit -a -m \"The previous commit broke the application. Reverting.\" git push origin main",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "760863b7ad4682ee152a2fbaeeb6164c",
    "u": "https://server.tymyrddin.dev/docs/encryption/ssh",
    "t": "Installing SSH ",
    "c": "Installing SSH  SSH (Secure Shell) is used for managing networks, operating systems, and configurations. It is also used inside many file transfer tools and configuration management tools. Functionally SSH keys resemble passwords. SSH keys are a pair of cryptographic keys using a public key cryptosystem that can be used to authenticate to an SSH server as an alternative to password-based logins. A private and public key pair are created prior to authentication. The private key is kept secret and secure by the user, while the public key can be shared with anyone. The advantage SSH authentication has over traditional password authentication is that you can be authenticated by the server without having to send your password over the network. Anyone eavesdropping on unencrypted connections will not be able to intercept and crack the password. It also allows for disabling password-based authentication. openSSH server  # apt-get install openssh-server # systemctl enable ssh # systemctl start ssh Control  On Debian, the default behaviour of an OpenSSH server is that it will start automatically as soon as it is installed. Verify it is running: # systemctl status ssh If it is not running, try to start it with: # systemctl start ssh Stop it with # systemctl stop ssh If you wish to disable OpenSSH server from starting up at boot: # systemctl disable ssh And enable for starting up at boot: # systemctl enable ssh Filtering  Allow SSH connections in the firewall. openSSH client  § sudo apt-get install openssh-client Generate a key Punch a hole in the firewall If ufw is installed on client, open port (22, oruse the port you need) Copy key to server. Connect and login. Resources  OpenSSH Security OpenBSD Security",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b85647f9699ff39e83fb859122f1c48a",
    "u": "https://server.tymyrddin.dev/docs/ids/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  A host-based intrusion detection system (HIDS) is a system that monitors a host on which it is installed to detect an intrusion and/or misuse, and responds by logging the activity and notifying the system administrators. Why?  Defend against a live attack How?  Samhain Maltrail Notes  Install HIDS right after installing the system. Tripwire creates a database of information related to your system, then compares that to what it finds when ran regularly, which it should, in order to get some real use out of it. Rkhunter is a Unix-based tool that scans for rootkits, backdoors and possible local exploits. Samhain provides file integrity checking, log file monitoring/analysis, rootkit detection, port monitoring, detection of rogue SUID executables, and hidden processes. Like having tripwire and rkhunter rolled into one. <=",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "06bf0b23ed4e96afda5a27a1e16f250e",
    "u": "https://server.tymyrddin.dev/docs/pki/internal-pki",
    "t": "Internal PKI ",
    "c": "Internal PKI  An Internal PKI consists of A master-your-own master Certificate Authority (CA) certificate and key which is used to sign each of the server and client certificates. A separate certificate (also known as a public key) and private key for the server and each client. The most secure way of doing this is to generate the Certificate Authority keys on a stand-alone (not Internet-connected) machine in a secure location. Master Certificate Authority (CA)  easy-rsa is a CLI utility to build and manage a PKI CA. It has a quickstart documentation and OpenVPN has example files. cd /etc/openvpn/ mkdir easy-rsa cd easy-rsa cp -r /usr/share/doc/openvpn/examples/easy-rsa/2.0/* . Edit the /etc/openvpn/easy-rsa/vars file #vi /etc/openvpn/easy-rsa/vars Append content to some of its variables. This will make the next step in the process faster. You can also skip this. The only parameter which must be explicitly entered is the Common Name. Now create the Certificate Authority Certificate and Key: # source vars # ./clean-all # ./build-ca Generating a 2048 bit RSA private key ............++++++ ...........++++++ writing new private key to 'ca.key' ----- You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [KG]: State or Province Name (full name) [NA]: Locality Name (eg, city) [BISHKEK]: Organization Name (eg, company) [OpenVPN-TEST]: Organizational Unit Name (eg, section) []: Common Name (eg, your name or your server's hostname) []: <hostname> Email Address [me@myhost.mydomain]: Hit enter, and again, and again … Later more master certificates and keys can be added, and when doing so do NOT use the ./clean-all instruction again. It wipes the Certificate Authority. Server key  Generate the server certificate and key with: # ./build-key-server <servername> Hit enter, and again, and again … including when it asks you to add a pass phrase. This is between servers. When it asks you if you wish to sign, answers yes, and you also want to commit. Client keys  For security, each client will get its own certificate and key. Per client: # ./build-key <clientname> Hit enter, and again, and again … including when it asks you to add a pass phrase. This is between servers. When it asks you if you wish to sign, answers yes, and you also want to commit. Diffie-Hellman parameters  Use the build-dh script to determine the encryption parameters necessary for the server end of a SSL/​TLS connection: ./build-dh And the system will get very busy with prime numbers. Copy keys  In the most secure possible way (for instance with scp ), copy keys and certs to their respective locations. ca.crt , dh2048.pem , <servername>.crt , and <servername>.key to /etc/openvpn on <servername> ca.crt , <clientname>.crt , and <clientname>.key to /etc/openvpn on <clientname> for each client server. Security improvement  All keys were created, signed and then distributed to the clients. A more secure way would be to generate the keys in their locations, submit a Certificate Signing Request (CSR) to the key-signing machine or transfer the CSR to the offline CA, the key-signing machine could have processed the request and returned a signed certificate which could have been transferred back to the clients. That way, the secret .key files stay on the machine on which they were generated.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "29f3ee54c8f211d86ecd5a113d66b2fc",
    "u": "https://server.tymyrddin.dev/docs/encryption/jumping",
    "t": "Jumping hosts ",
    "c": "Jumping hosts  Sometimes it is only possible to access a remote server using ssh by first logging in to another server (or firewall/jump host). This means having to authenticate twice and the chain can be long and not limited to just two hosts. I can only access the remote “Backend server” via ssh by first login into an intermediary Firewall/Bastion server called “jumphost”. First, login to jumphost: $ ssh user@jumphost Next, ssh through the intermediary system: $ ssh user@backendserver Or, use -tt , forcing “pseudo-tty” allocation: $ ssh -tt jumphost ssh -tt backendserver Alternatives to manually jumping about and making life much easier are ForwardAgent, ProxyCommand and ProxyJump. Starting from OpenSSH 7.3, released August 2016, the easiest way to pass through one or more jump hosts is with the ProxyJump directive. ForwardAgent  SSH agent forwarding can be used to make access to a server. It allows for the use of local SSH keys instead of leaving keys (without passphrases!) sitting on the server. The -A option enables forwarding of the authentication agent connection: ssh -A user@server.com It forwards the SSH authentication schema to the remote host to allow for the use of SSH on the jump host as if the user was on the local machine. A forwarding socket will be set up so that the SSH client on the first host can connect to the ssh-agent on the client machine to perform authentication on its behalf. The key is not forwarded, but the agent, meaning many keys can be added. Configuration  Create or open ~/.ssh/config : $ vi ~/.ssh/config Append the below entry (replacing XXX.XXX.XXX.XXX with actual server domain name or the IP): Host jumphost HostName XXX.XXX.XXX.XXX User user ForwardAgent yes Security problem  The problem is that while being connected to the first host, anyone with sufficient permission on the first host will be able to use that socket to connect to and use that local ssh-agent. A rogue root or evil admin with root access can eavesdrop on the ongoing session and impersonate the user for authentication to other servers during the time that user is connected to that server. A mentioned mitigation is using the -c option, which will show a confirmation window each time some program wants to use the agent to authenticate somewhere. Recommended is using ProxyCommand instead. Or even better, ProxyJump. ProxyCommand  ProxyCommand is an alternative for that is supposedly more secure than the above SSH agent forwarding. It is possible to connect via an intermediate machine using a SOCKS proxy. SOCKS4 and SOCKS5 proxies are both supported by OpenSSH. SOCKS5 allows for transparent traversal of a firewall or other application barrier by strong authentication with the help of GSS-API. Dynamic application-level port forwarding allows the outgoing port to be allocated on the fly thereby creating a proxy at the TCP session level. Using the ProxyCommand option to invoke netcat as the last in the chain is a variation of this for very old clients. The SSH protocol is forwarded by ‘’nc’’ (netcat) instead of ‘’ssh’’. Attention must also be paid to whether or not the username changes from host to host in the chain of SSH connections. The somewhat outdated netcat method does not allow a change of username. Other methods do. ssh -o ProxyCommand='ssh user@jumphost nc backendserver 22' user@backendserver The ‘’nc’’ command sets and establish a TCP pipe between jumphost (or firewall) and backendserver. Note: It is not possible to use both the ProxyJump and ProxyCommand directives in the same host configuration. The first one found is used and then the other blocked. Configuration  Create or open ~/.ssh/config $ vi ~/.ssh/config Append the below entry (replacing ‘’XXX.XXX.XXX.XXX’’ with actual server domain name or IP and ‘’user’’ with actual user): Host jumphost HostName XXX.XXX.XXX.XXX User user ProxyCommand ssh user@backendserver nc %h %p ProxyJump  Starting from OpenSSH 7.3, released August 2016, the easiest way to pass through one or more jump hosts is with the ProxyJump directive. The main method here is to use an SSH connection to forward the SSH protocol through one or more jump hosts, using the ProxyJump directive, to an SSH server running on a destination host (this method cannot be used if an intermediate host denies port forwarding). This is considered the most secure method because encryption is end-to-end. $ ssh -J user1@jumphost.whatever.org:22 anotherusername@XXX.XXX.XXX.XXX And can be chained: $ ssh -J user1@jumphost1.whatever.org:22,user2@jumphost2.whatever.org:2222 anotherusername@XXX.XXX.XXX.XXX Configuration  Host server2 HostName XXX.XXX.XXX.XXX ProxyJump user1@jumphost1.whatever.org:22 User anotherusername Host server3 HostName XXX.XXX.XXX.XXX ProxyJump user1@jumphost1.whatever.org:22,user2@jumphost2.whatever.org:2222 User anotherusername",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d0d5d020d5de0fa0c33d9726f2209558",
    "u": "https://server.tymyrddin.dev/docs/users/other-reqs",
    "t": "Configuring other password requirements ",
    "c": "Configuring other password requirements  Password expiration  Password expiration can be set in /etc/login.defs . scroll down to the “Password aging controls” section: PASS_MAX_DAYS : Default 99999 ; Sets the maximum number of days a password may be used. PASS_MIN_DAYS : Default 0 ; Sets the minimum number of days a user must keep their password before changing it. PASS_WARN_AGE : Default 7 ; Sets the number of days out from expiration that the system will warn the user. Password history  When configuring the password history of any system, it is generally considered best practice to remember the previous 10 passwords. This will ensure that the user’s passwords stay different and are not reused. Setting a minimum age of 1 and a password history of 10 means that somebody would need to wait at least 11 days before they’re able to get back to their original password. Usually this is enough to dissuade anyone from trying. To configure password history in Ubuntu, use /etc/pam.d/common-password : password : module type we are referencing. required : module where failure returns a failure to the PAM-API. pam_pwhistory.so : module that configures the password history requirements. remember=2 : option for the pam_pwhistory.so module to remember the last n passwords ( n = 2 ). These passwords are saved in /etc/security/opasswd . retry=3 : option for the pam_pwhistory.so module to prompt the user 3 times before returning a failure. Resources  pam.d(5) - Linux man page",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ec2e0d518232acf629a71c1d1e66e8b3",
    "u": "https://server.tymyrddin.dev/docs/firewall/firewalld",
    "t": "FirewallD ",
    "c": "FirewallD  FirewallD uses the concepts of zones and services, instead of IPTables chain and rules. As of CentOS version 7, FirewallD replaces IPTables as the default firewall management tool. FirewallD can be configured and managed using the firewall-cmd command line utility. Install and enable FirewallD  If not installed on the system, install with # yum install firewalld Firewalld is disabled by default. Check status with: # firewall-cmd --state Start and enable it on boot # systemctl start firewalld # systemctl enable firewalld Zones  Zones are predefined sets of rules specifying what traffic should be allowed based on the level of trust on the networks a computer is connected to. Network interfaces and sources can be assigned to a zone. From untrusted to trusted: Zones Meaning drop All incoming connections are dropped without any notification. Only outgoing connections are allowed. block All incoming connections are rejected with an icmp-host-prohibited message for IPv4 and icmp6-adm-prohibited for IPv6n. Only outgoing connections are allowed. public For use in untrusted public areas. Do not trust other computers on the network but allow selected incoming connections. external For use on external networks with NAT masquerading enabled - system acts as a gateway or router. Only selected incoming connections are allowed. internal For use on internal networks - system acts as a gateway or router. Other systems on the network are generally trusted. Only selected incoming connections are allowed. dmz Used for computers in a demilitarized zone, giving limited access to the rest of the network. Only selected incoming connections are allowed. work Used for work machines. Other computers on the network are generally trusted. Only selected incoming connections are allowed. home Used for home machines. Other computers on the network are generally trusted. Only selected incoming connections are allowed. trusted All network connections are accepted. Trust all of the computers in the network. The public zone is set as a default zone # firewall-cmd --get-default-zone Check what zones are used by network interface(s) # firewall-cmd --get-active-zones Print zone configuration settings # firewall-cmd --zone=public --list-all Configuration of all zones # firewall-cmd --list-all-zones Changing zone of an interface # firewall-cmd --zone=work --change-interface=eth1 Ports and services  Listing all default available services ( /usr/lib/firewalld/services/ contains xml files with details for each service): # firewall-cmd --get-services Allow incoming HTTP traffic (port 80) for interfaces in the public zone, only for the current session (runtime configuration) # firewall-cmd --zone=public --add-service=http To keep the port open after reboot use the --permanent flag # firewall-cmd --permanent --zone=public --add-service=http Forward traffic from one port to another on the same server # firewall-cmd --zone=external --add-forward-port=port=80:proto=tcp:toport=8080 Creating rulesets  The dmz (demilitarized) zone only allows SSH traffic. To change the default zone to dmz and to assign it to the eth0 interface # firewall-cmd --set-default-zone=dmz # firewall-cmd --zone=dmz --add-interface=eth0 To open HTTP and HTTPS ports add permanent service rules to the dmz zone # firewall-cmd --permanent --zone=dmz --add-service=http # firewall-cmd --permanent --zone=dmz --add-service=https Start building the firewall! Usage examples  OpenVPN  When using the default port 1194, enable the openvpn service. Otherwise, create a new service with a different port. # firewall-cmd --zone=public --add-service openvpn To add masquerade to the zone: # firewall-cmd --zone=server --add-masquerade Make changes permanent: # firewall-cmd --runtime-to-permanent SMTP  # firewall-cmd --permanent --add-service=smtp success Disable FirewallD  Stop the FirewallD service # systemctl stop firewalld Disable it to start automatically on system boot # systemctl disable firewalld Mask it to prevent it from being started by other services # systemctl mask --now firewalld",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b303e57e930a7387dd0f026591e283ab",
    "u": "https://server.tymyrddin.dev/docs/users/lxd",
    "t": "Dangers of the lxd group ",
    "c": "Dangers of the lxd group  Ubuntu places users (unless otherwise specified) into the lxd group. This group is known to be a point of privilege escalation and should be removed from any user that is a part of it. It is so popular that Linux-Smart-Enumeration even checks for it. Remove it from any user that has it assigned. Using adduser does not add the user to any predefined groups and should probably be used when adding new users. Resources  diego-treitos/linux-smart-enumeration",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c0d8a4632d1584ca3691a5bbeb45d4aa",
    "u": "https://server.tymyrddin.dev/docs/access/dac",
    "t": "Discretionary access control (DAC) ",
    "c": "Discretionary access control (DAC)  Discretionary Access Control (DAC) really just means that each user has the ability to control who can get into their stuff. Using chown  One unique thing about chown is that you must have sudo privileges to use it, even if you’re working with your own files in your own directory. You can use it to change the user of a file or directory, the group that’s associated with a file or directory, or both. To change the file ownership from me to username : sudo chown <username>>: <file> To change the group association without changing the user: sudo chown :<group> <file> To change the user without changing the group, list the username without the trailing colon: sudo chown <username> <file> These commands work the same way on a directory as they do on a file. If you also want to change the ownership and/or the group association of the contents of a directory, while also making the change on the directory itself, use the -R option. Using chmod  On Unix and Linux systems, you would use the chmod utility to set permissions values on files and directories. You can set permissions for the user of the file or directory, the group that’s associated with the file or directory, and more. There are two ways to use chmod to change permissions settings: symbolic and numerical. Symbolic  chmod u+x cript.sh chmod g+x script.sh chmod o+x script.sh chmod u+x,g+x script.sh chmod a+x script.sh The first three commands add the executable permission for the user, the group, and others. The fourth command adds executable permissions for both the user and the group, while the last command adds executable permissions for everybody (a for all). You can also remove the executable permissions by replacing + with - . Similarly, you can add or remove read ( r ) or write ( w ) permissions. Numerical  With the numerical method, you’ll use an octal value to represent the permissions settings on a file or directory. For the r , w , and x permissions, you assign the numerical values 4, 2, and 1, respectively. You would do this for the user, group, and others positions, and then add them all up to get the permissions value for the file or directory: User Group Others rwx rwx rwx 421 421 421 7 7 7 With all permissions set for everybody, a file or directory will have a value of 777 . Using SUID and SGID  When a regular file has its SUID permission set, whoever accesses the file will have the same privileges as the user of the file. A file with the SUID permission set has an s in the executable position for the user: -rwsr-xr-x. A file with the SGID permission set has an s in the executable position for the group: -rwxr-sr-x. The numerical value for SUID is 4000 , and for SGID is 2000 . To set SUID on a file, add 4000 to whichever permissions value to be set. As useful as it may be to have SUID or SGID permissions on executable files, it is just a necessary evil. While having SUID or SGID set on certain operating system files is essential for the operation of the system, it becomes a security risk when users can set SUID or SGID on other files. If intruders find an executable file that belongs to the root user and has the SUID bit set, they can use that to exploit the system. They may leave behind their own root-owned file with an SUID set, which will allow them to regain entry to the system the next time. If the intruder’s SUID file isn’t found, the intruder will still have access, even if the original problem has been fixed. Finding SUID or SGID files  sudo find / -type f \\( -perm -4000 -o -perm -2000 \\) > suid_sgid_files.txt / : searching through the entire filesystem. Since some directories are only accessible to someone with root privileges, we need to use sudo. -type f : searching for regular files, which includes executable program files and shell scripts. -perm 4000 : searching for files with the 4000 , or SUID permission bit set. -o : or operator. -perm 2000 : searching for files with the 2000 , or SGID , permission bit set. > : redirecting the output into the suid_sgid_files.txt text file. Preventing SUID and SGID usage on a partition  Prevent SUID and SGID usage on a partition by mounting it with the nosuid option. Do not set nosuid for the / partition. The operating system doesn’t function properly. Using extended file attributes to protect sensitive files  Extended file attributes will not keep intruders from accessing files, but they can help prevent sensitive files from being altered or deleted. a : You can append text to the end of a file that has this attribute, but you can’t overwrite it. Only someone with proper sudo privileges can set or delete this attribute. i : This makes a file immutable, and only someone with proper sudo privileges can set or delete it. Files with this attribute can’t be deleted or changed in any way. It is also not possible to create hard links to files that have this attribute. sudo chattr +a <file> Securing system configuration files  With IoT devices, you have a bit more to worry about than you do with normal servers. Normal servers are protected with a high degree of physical security, while IoT devices often have little to no physical security. In this context, the open “all can read” is often considered not a good idea. Yo ensure that all the configuration files on the devices are set with the 600 permissions setting: sudo find / -iname '*.conf' -exec chmod 600 {} \\; Only the owner of the files – root user or a system account – can read them. Test things thoroughly to ensure that you haven’t broken anything. Most things work just fine with their configuration files set to a 600 permissions setting, and some do not.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "47637dfb988018b65c4bae141f992eb3",
    "u": "https://server.tymyrddin.dev/docs/encryption/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Protect data at rest and data in transit. Why?  Confidentiality: This ensures that only people who are authorised to see the data can see it. Integrity: This ensures that original data has not been altered by unauthorised people. Availability: This ensures that sensitive data is always available, and can not be deleted by unauthorised people. How?  GNU Privacy Guard OpenVPN strongSwan Installing SSH Harden ssh server Key management Jumping hosts Notes  Using a VPN is a way to map out a private network that only the servers can see. Communication will be fully private and secure. Other applications can be configured to pass their traffic over the virtual interface that the VPN software exposes. This way, only services that are meant to be used by clients on the public internet need to be exposed on the public network. Install and configure ssh keys and make your servers require them to minimise the risk posed by adversaries. Harden the ssh server (also harden default service settings in web server and other services) Do not leave passphrase empty - An adversary who gets hold of your private key can otherwise connect to the hosts where you put you public key. Use a separate key per client you ssh from to the same server. If one key is compromised the damage is more limited and easier to clean up. Limit the number of clients you ssh from. If a client is compromised an adversary has your key, they can install a binary to get your passwords/passphrases. If any, disable the ssh-server on the client machine you ssh from. Limit the attack surface. Don’t make jump host chains too long. If one client in the chain is compromised, an adversary can use that to compromise the rest of the clients down the chain. Don’t use Agent Forwarding. While being connected to the first host, anyone with sufficient permission on the first host will be able to use that socket to connect to and use that local ssh-agent. A rogue root or evil admin with root access can eavesdrop on the ongoing session and impersonate the user for authentication to other servers during the time that user is connected to that server. Instead, use ProxyJump (it uses E2EE) or, if that is not possible, use ProxyCommand. In some countries, proving that you connected to a particular server is enough to be prosecuted, but SSH doesn’t provide a native way to obfuscate to whom it connects. For that, SSH with Tor can be used. Don’t ignore authentication errors. This warning is protecting you. The remote host key is different than the client knows. Make sure the key really did change. An adversary may be spoofing the host and continuing may give the adversary the information they seek to attack your server. Another reason to not use passwords.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5c9294ef74b9df0a751dfbbbf4ed5e45",
    "u": "https://server.tymyrddin.dev/docs/services/nmap",
    "t": "Auditing network services with nmap ",
    "c": "Auditing network services with nmap  To remotely aud* the network to see what services are running on each host, without having to log in to each one, you need a tool like nmap . * is available for all the major operating systems, including Windows. The version that’s in the Linux repositories is usually quite old. So, if you’re using something other than Kali, your can download nmap . sudo nmap -sS IP_ADDRESS -sS : The lowercase s denotes the type of scan that we want to do. The uppercase S denotes that we’re doing a SYN packet scan. IP_ADDRESS : scanning a single machine or a group of machines or an entire network. Something like Not shown: 996 closed ports : The fact that it’s showing all of these closed ports instead of filtered ports tells me that there’s no firewall on this machine. Port states  An Nmap scan will show the target machine’s ports in one of three states: filtered : This means that the port is blocked by a firewall. open : This means that the port is not blocked by a firewall and that the service that’s associated with that port is running. closed : This means that the port is not blocked by a firewall, and that the service that’s associated with that port is not running. Scan types  There are lots of different scanning options, each with its own purpose. The SYN packet scan that we’re using here is considered a stealthy type of scan because * generates less network traffic and fewer system log entries than certain other types of scans. With this type of scan, Nmap sends a SYN packet to a port on the target machine, as if * were trying to create a TCP connection to that machine. If the target machine responds with a SYN/ACK packet, * means that the port is in an open state and is ready to create the TCP connection. If the target machine responds with an RST packet, * means that the port is in a closed state. If there’s no response at all, * means that the port is filtered, blocked by a firewall. As a normal Linux administrator, this is one of the types of scans that you would do most of the time. A discovery scan is useful for when you need to just see what devices are on the network: sudo nmap -sn IP_ADDRESS/24 With the -sn option, nmap will detect whether you’re scanning the local subnet or a remote subnet. If the subnet is local, nmap will send out an Address Resolution Protocol (ARP) broadcast that requests the IPv4 addresses of every device on the subnet. That is a reliable way of discovering devices because ARP isn’t something that will ever be blocked by a firewall. sudo nmap -A IP_ADDRESS This scan: identifies open , closed , and filtered TCP ports. identifies the version of the running services. runs a set of vulnerability scanning scripts that come with nmap. attempts to identify the operating system of the target host. 5900/tcp open vnc Apple remote desktop vnc | vnc-info: | Protocol version: 3.889 | Security types: |_ Mac OS X security type (30) 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at http://www.insecure.org/cgi-bin/servicefp-submit.cgi : SF-Port515-TCP:V=6.47%I=7%D=12/24%Time=5A40479E%P=x86_64-suse-linux-gnu%r( SF:GetRequest,1,\"\\x01\"); MAC Address: 00:0A:95:8B:E0:C0 (Apple) Device type: general purpose VNC can be handy at times. It’s like Microsoft’s Remote Desktop service for Windows, except that it’s free, open source software. But it’s also a security problem because it’s an unencrypted protocol. So, all your information goes across the network in plain text. If you must use VNC, run it through an SSH tunnel.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4dedab5686eea66d58233866f08b621d",
    "u": "https://server.tymyrddin.dev/docs/ids/maltrail",
    "t": "Maltrail ",
    "c": "Maltrail  Maltrail is a malicious traffic detection system, using publicly available (black)lists containing malicious and/or generally suspicious trails, static trails compiled from various AV reports and custom user-defined lists, and (optionally) advanced heuristic mechanisms that can help in the discovery of unknown threats (for example, new malware). It is based on a Traffic -> Sensor <-> Server <-> Client Architecture. Trail can be anything from a: domain name (like zvpprsensinaix.com for Banjori malware) URL (like http://109.162.38.120/harsh02.exe for known malicious executable) IP address (for example 185.130.5.231 for known attacker) HTTP User-Agent header value (like sqlmap for automatic SQL injection and database takeover tool). It can be found on Github stamparm/maltrail .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "fbf35dc5c99e6563252c4b10a6237a96",
    "u": "https://server.tymyrddin.dev/docs/encryption/key-management",
    "t": "Key management ",
    "c": "Key management  Generate a key  $ ssh-keygen -t Enter a passphrase. It will create 2 files in the ~/.ssh directory: id_rsa , a private key and id_rsa.pub , a public key. Note: Do not leave the passphrase empty. An attacker who gets hold of your private key can otherwise connect to the hosts where you put you public key. Choose a loooooong and complex passphrase. Remember the passphrase. Better yet, put it in a password manager. Copy key to server  $ scp ~/.ssh/id_rsa.pub user@server:~/.ssh/authorized_keys The authenticity of host 'XXX.XXX.XXX.XXX (XXX.XXX.XXX.XXX)' can't be established. ECDSA key fingerprint is [fingerprint]. Are you sure you want to continue connecting (yes/no)? yes If ssh access is already available, by using the cat command to read the contents of the public key on the local computer and piping that through an SSH connection to the remote server (and avoiding overriding already existing keys): $ cat ~/.ssh/id_rsa.pub | ssh user@server \"mkdir -p ~/.ssh && touch ~/.ssh/authorized_keys && chmod -R go= ~/.ssh && cat >> ~/.ssh/authorized_keys\" The authenticity of host 'XXX.XXX.XXX.XXX (XXX.XXX.XXX.XXX)' can't be established. ECDSA key fingerprint is [fingerprint]. Are you sure you want to continue connecting (yes/no)? yes For password-less login install the public key using the ssh-copy-id command: $ ssh-copy-id user@server $ ssh-copy-id -i ~/.ssh/id_rsa.pub user@server The authenticity message means that the local computer does not recognize the remote host. This will happen the first time connecting to a new host. Type “yes” and press ENTER to continue. /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys user@XXX.XXX.XXX.XXX's password: Enter password (not displayed for security purposes) and the following response is given: Number of key(s) added: 1 Connect  ssh to the server: $ ssh user@server Changing passphrase  ssh-keygen -p Or: cd ~/.ssh/ ssh-keygen -f id_rsa -p And upload it to the server. If you then connect, you may get an authentication error",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cf95dea78ebe621a0e02f17589928900",
    "u": "https://server.tymyrddin.dev/docs/logfiles/centralised",
    "t": "Centralised logging ",
    "c": "Centralised logging  Why?  Makes searching through log data for relevant events easier and faster, especially important when the infrastructure uses separation and isolation and there are multiple servers. This makes troubleshooting and solving issues easier and faster, and without directly accessing systems. Logs are backed up in a separate location, protecting them from accidental or unintentional loss, and are accessible in case one of the servers goes down or becomes unresponsive. Not using computing resources for complex searches on internet facing servers. Depending on how it is set up, reduces the amount of disk space used by log files. Why not?  Uses bandwidth. How?  Set up a separate server for only logging purposes. Keep it in a secure location behind a (physical) firewall. Have no unnecessary services running on it. Delete all other user accounts. Which one?  Rsyslog (default installed on debian) and syslog-ng are both light-weight. The configuration syntax of ‘’rsyslog’’ is simpler than the syntax of ‘’syslog-ng’’, but complex configuration is more clear in ‘’syslog-ng’’. Future considerations  To protect from intentional tampering with logs (intruder deleting indicators of presence): Add another server, a snort box (IDS) that is actually another central server (yet has no IP address) and copy each packet intended for the already existing central server. Promiscuous mode Rule: Only listen for this IP address on this port (of existing central server)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ca105558fe7c55c1dabbce4899e3874a",
    "u": "https://server.tymyrddin.dev/docs/logfiles/rotate",
    "t": "Logrotate ",
    "c": "Logrotate  On most Linux distributions, logrotate is installed by default. If not the case install it using the package manager. The below is for debian and friends. Installation  # apt-get install logrotate Configuration  The main configuration file is at /etc/logrotate.conf . Creating config files for each service separately can use the folder /etc/logrotate.d/ . # vi /etc/logrotate.d/remote Append: /var/log/remote/*/* { rotate 7 daily size=10M missingok compress delaycompress } This will compress and rotate logs every day and keep them for 90 days (3 months). Keep last 7 logs The logs will be rotated daily Each log will not be rotated until it reaches 10MB If the log file is missing, go on to the next one without issuing an error message. All rotated logs, with the exception of the most recent one, should be compressed.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "528e24c944fbce77eb2b0bda911674ed",
    "u": "https://server.tymyrddin.dev/docs/pki/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Public key infrastructure (PKI) is the umbrella term for everything needed in order to issue, distribute, store, use, verify, revoke, and otherwise manage and interact with certificates and keys. It’s an intentionally vague term, like “database infrastructure”. Certificates are the building blocks of most PKIs, and certificate authorities are the foundation. Why?  Establishing a certificate authority (CA) and managing certificates for the servers allows each entity within the infrastructure to validate the other members’ identities and encrypt their traffic. This can prevent MitM attacks where an attacker imitates a server in the infrastructure to intercept traffic. How?  Problems Internal PKI Pluggable Authentication Modules (PAM) Let’s Encrypt TLS/SSL Notes  Many simple PKIs don’t even use certificates. When editing ~/.ssh/authorized_keys you’re configuring a simple certificate-less form of PKI that SSH uses to bind public keys to names in flat files. Because the PKI system is asymmetric, users need access to a public key and recipients of a message need a private key to decrypt the information. X.509 is a complex standard and complex technology is not easy to deploy on a large-scale. Use a specific profile of X.509 and validate it in a narrow set of implementations. Web PKI is mostly defined by RFC 5280 and refined by the CA/Browser Forum. It’s hierarchical, based on trusting authorities, and for some such authorities a big cash cow. Web PKI being a money-spinner, we also have an alternative. Let’s Encrypt is a free, automated, and open Certificate Authority. Lost keys are also an issue for individuals that rely on encrypted data. Lost keys restrict access to messages, and these messages are unavailable forever unless the cryptographic algorithm is weak and can be cracked. Enter the Internet of Things (IoT), the Internet of Everything (IoE) and the Industrial Internet: all the devices that want confidentiality, integrity and authentication related to their identity and that of others too: implanted medical devices, robots on the plant floor, smart light bulbs, … We have a veritable explosion of checks and balances, not to mention issuances, revocations and expirations … problems, old ones not solved and new ones. SSL and PKI infrastructures are essential components in client device security, because they are used to bootstrap into higher-level security services such as software updates and digital signature services. Their vulnerability puts other security services at risk. Internal PKI is PKI we run ourselves, for our own stuff: infrastructures with services, containers, and VMs; applications; endpoints like laptops and phones; and any other code or device we want to identify. Use only the minimal set of features in certificates and PKI; That is to use the binding of an identifier and name to a key pair and understand whether the certificate may sign other certificates or not. No additional attributes should be relied on, no complex path validations allowed. SSL refers to Secure Socket Layer. It is a protocol for providing security to connections between a server and a client and uses cryptography and hashing to provide confidentiality, integrity, and endpoint authentication to connections between a server and a client. It has a lot of known security bugs of its own. TLS refers to Transport Layer Security, and is the successor of SSL, which includes bug fixes and improvements over SSL. SSL came up to versions 3.0 and after that the name was changed to TLS. Hence, often TLS/SSL is used.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "450b15a09a582ab262c724cfaa0155ab",
    "u": "https://server.tymyrddin.dev/docs/firewall/firehol",
    "t": "FireHOL ",
    "c": "FireHOL  FireHOL (based on bash) makes it very simple to set up a complex firewall. Installation  On the backend server, install FireHOL for configuring iptables . # apt-get install firehol Configuration (example)  # vi /etc/firehol/firehol.conf A configuration which only allows incoming ssh connections and openvpn: interface eth0 inet client all accept // allow all outgoing connections server ssh accept // allow all incoming SSH connections server openvpn accept src \"XXX.XXX.XXX.XXX XXX.XXX.XXX.XXX\" // allow incoming OpenVPN connections // from these designated addresses // NOTE: EDIT THE XXX.XXX.XXX.XXX ADDRESSES interface tun0 vpn server all accept // allow all incoming connections on the VPN client all accept // allow all outgoing connections on the VPN router inet2vpn inface eth0 outface tun0 route all accept // route freely to the VPN router vpn2inet inface tun0 outface eth0 masquerade // use NAT masquerading from the VPN route all accept // route freely to the VPN",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e1cb272b91b58f317d10879d8a97c878",
    "u": "https://server.tymyrddin.dev/docs/incidents/brm",
    "t": "Using bootable recovery media ",
    "c": "Using bootable recovery media  The concept of live media is a wonderful thing, as we can boot into a completely different working environment from the operating system installed on our device and perform tasks without disrupting installed software on the host system. The desktop version of Ubuntu, for example, offers a complete computing environment we can use in order to not only test hardware and troubleshoot our systems but also browse the web just as we would on an installed system. In terms of recovering from disasters, live media becomes a saving grace. Ubuntu’s live media is great, and it doesn’t work for absolutely everything. Tools such as Clonezilla specialize in working with hard disks. Practical Linux Forensics, Bruce Nikkel, 2021",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a3a59f60433064429e8a9112fafe3244",
    "u": "https://server.tymyrddin.dev/docs/services/netstat",
    "t": "Auditing network services with netstat ",
    "c": "Auditing network services with netstat  Two reasons why you would want to keep track of what network services running on systems: To ensure that no legitimate network services that you don’t need are running To ensure that you don’t have any malware that’s listening for network connections from its master C&C To see a list of network services that are listening, waiting for someone to connect to them: netstat -lp -A inet With: -lp : The l means that we want to see which network ports are listening. In other words, we want to see which network ports are waiting for someone to connect to them. The p means that we want to see the name and process ID number of the program or service that is listening on each port. -A inet : This means that we only want to see information about the network protocols that are members of the inet family. In other words, we want to see information about the raw, tcp, and udp network sockets, but we don’t want to see anything about the Unix sockets that only deal with interprocess communications within the operating system. If you want to see port numbers and IP addresses instead of network names, add the n option to the -lp . To view the established TCP connections is to leave out the l option. Something to keep in mind is that rootkits can replace legitimate Linux utilities with their own trojaned versions. For example, a rootkit could have its own trojaned version of netstat that would show all network processes except for those that are associated with the rootkit. That’s why you want something such as Rootkit Hunter in your toolbox. Resources  What Port Is - Network Port and Protocol Database",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "74d3c1bc5f8d0fea986342319e926687",
    "u": "https://server.tymyrddin.dev/docs/users/sudo",
    "t": "Configuring sudo ",
    "c": "Configuring sudo  sudo stands for “super-user do”. Sudo allows any non-root user to run applications as root. When sudo is configured correctly, it greatly increases the security of the environment. Slowing hackers down. Since the root login will most likely be disabled and your users are properly granted sudo, any attacker will not know which account to go after, thus slowing them down. If they are slowed down enough, they may stop the attack and give up. Allow non-privileged users to perform privileged tasks by entering their own passwords. Keeps in line with the principle of least privilege by allowing administrators to assign certain users full privileges, while assigning other users only the privileges they need to complete their daily tasks. Adding users to the sudo group  On Ubuntu 18.04, unless otherwise specified upon account creation, the user is automatically added to the sudo group. To add a user who is not part of the sudo group already, add him/her with: usermod -aG sudo <username> Using the -a option helps username retain any previously existing groups. To directly add a user to the sudo group upon username account creation: useradd -G sudo <username> By default, Ubuntu allows sudo users to execute any program as root with their password. There are a few ways we can check this information. The first way is as user with sudo -l . Another way to view this information is with visudo . This opens the sudo policy file. The sudo policy file is stored in /etc/sudoers . This gives the same information as sudo -l but with one difference; the %sudo indicates that it is for the group, sudo. There can be other groups in this file such as admin . This is where administrators can set what programs a user in a certain group can perform and whether they need a password. In the %sudo ALL=(ALL:ALL) ALL NOPASSWD: ALL , the NOPASSWD part says that the user that is part of the sudo group does not need to enter their local password to use sudo privileges. Generally, this is not recommended - not even for home use. Users can also be added to the sudoers using the sudo policy file. Always edit sudoers with the sudo visudo command. If you are managing users in a network across multiple flavours of Linux (CentOS, Red Hat, etc.), where the sudo group may be called something different, this method may be more preferable: add a User Alias to the policy file and add users to that alias, or add lines for individual users. User_Alias ADMINS = lela, barzh and: ADMINS ALL=(ALL) ALL or for an individual user: username ALL=(ALL) ALL It is not recommended to use individual user aliases in a large network since this can become unwieldy very quickly. The first option is going to be your best bet as you can simply add users to this alias and control which commands they have access to with sudo easily. Setting up sudo for only certain delegated privileges  To ensure that users are assigned to the groups they belong to and only are allowed access to the programs they need to complete their daily tasks, set Command Aliases in the sudo policy file: Use sudo visudo , and edit the line under the comment # Cmnd alias specification . Cmnd_Alias SOFTWARE = /bin/rpm, /usr/bin/up2date, /usr/bin/yum To assign the SOFTWARE command alias to the SOFTWAREADMINS user alias: SOFTWAREADMINS ALL=(ALL) SOFTWARE You can also assign Command Aliases to individual users, specific commands to individual users, and Command Aliases to groups. Host aliases  Host Aliases are a way to trickle down a sudo policy across the network and different servers. For example, you may have a MAILSERVERS Host Alias which contains servers mail1 and mail2 . This Host Alias has certain users or groups assigned to it, and that Host Alias has a Command Alias assigned to it stating which commands those users are able to run. When those users run a command on mail1 or mail2 , the server will check the sudo policy file to see if they can do what they are trying to do. In a home environment and small-medium business environments, it probably is just easier to copy the sudo policy file to each server in the network. This will really only come into play with large enterprise networks and even then they will probably be using a centralised Ansible or other automation in effect. Preventing users from using shell escapes  Programs like text editors and pagers have a handy shell escape feature. This allows a user to run a shell command without having to exit the program first. For example, from the command mode of the vi and vim editors, someone could run the ls command by running :!ls . To allow a user to edit the sshd_config file and only that file, add a line to the sudo configuration: username ALL=(ALL) sudoedit /etc/ssh/sshd_config sudoedit has no shell escape feature. Other programs that have a shell escape feature: emacs , less , view , and more . Preventing users from using other dangerous programs  Some programs that don’t have shell escapes can still be dangerous if you give users unrestricted privileges to use them, like cat , cut , awk , and sed . If you must give someone sudo privileges to use one of these programs, limit their use to only specific files. Preventing abuse via user’s shell scripts  A rule for Fritz so he can create scripts running with elevated privileges: fritz ALL=(ALL) /home/fritz/fritz_script.sh And his script reads: #!/bin/bash echo \"This script belongs to Fritz the Cat.\" sudo -i What can happen next: fritz@server:~$ sudo ./fritz_script.sh This script belongs to Fritz the Cat. root@server:~# sudo -i logs a person in to the root user’s shell, the same way that sudo su - does. To remedy this, move Fritz’ script to the /usr/local/sbin directory and change the ownership to the root user so that Fritz will not be able to edit it. And delete that sudo -i line in it.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "60dd2959baa6da7c1da8b6b818b87777",
    "u": "https://mailserver.tymyrddin.dev/",
    "t": "Smarter mail servers ",
    "c": "Smarter mail servers  Version 0.1: Notes on setting up a mailserver to detect phishing attacks and prevent MitM attacks. The below configurations were for a debian 9, and need to be updated and DMARC added. A work in progress … Mail servers Mail servers Cyrus Dovecot MTA Message Transfer Agent (MTA) Postfix configuration SASL configuration DNSSEC Domain Name System Security Extensions (DNSSEC) TLS Transport Layer Security (TLS) TLS configuration DANE configuration MTA-STS configuration SPF Sender Policy Framework (SPF) SPF configuration DKIM Domain Keys Identified Mail (DKIM) DKIM configuration Rspamd configuration DMARC Domain-based Message Authentication, Reporting and Conformance (DMARC) DMARC configuration",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "350396704891a510710bad93bc9aa01e",
    "u": "https://mailserver.tymyrddin.dev/docs/spf/spf",
    "t": "SPF configuration ",
    "c": "SPF configuration  Add SPF records to DNS  In order that receiving servers can check your SPF record it must be publicly visible. This means publishing it to the DNS server for the chosen domain(s). Go to their domain zone pages and add a new TXT record. For example, to allow mail from all hosts listed in the MX records for the domain: v=spf1 mx -all To allow mail from a specific host: v=spf1 a:mail.somedomain.tld -all Exact format may vary per DNS provider. Check the documentation for the exact style required. Installation  The Python SPF policy agent adds SPF policy-checking to Postfix. The SPF record for the sender’s domain for incoming mail will be checked and, if it exists, mail will be handled accordingly. Configuration  policyd-spf.conf  /etc/postfix-policyd-spf-python/policyd-spf.conf looks something like: debugLevel = 1 defaultSeedOnly = 1 HELO_reject = SPF_Not_Pass Mail_From_reject = Fail PermError_reject = False TempError_Defer = False skip_addresses = 127.0.0.0/8,::ffff:127.0.0.0/104,::1 debugLevel controls the amount of information logged by the policy server. The default, level 1, logs no debugging messages, just basic SPF results and errors generated through the policy server. The policy server can operate in a test only mode. This allows you to see the potential impact of SPF checking in your mail logs without rejecting mail. Headers are prepended in messages, but message delivery is not affected. This mode is not enabled by default. To enable it, set TestOnly = 0 . This option was previously named defaultSeedOnly . This is still accepted, but logs an error. The default HELO check rejection policy is SPF_Not_Pass , meaning reject if the SPF result is Fail, Softfail, Neutral, PermError. Not fully RFC 4408 compliant but HELO/EHLO is known first in the SMTP dialogue and there is no reason to waste resources on Mail From checks if the HELO check will already reject the message. Postfix integration  master.cf  In /etc/postfix/master.cf append: policyd-spf unix - n n - 0 spawn user=nobody argv=/usr/bin/policyd-spf main.cf  To increase the Postfix policy agent timeout, which will prevent Postfix from aborting the agent if transactions run a bit slowly policyd-spf_time_limit = 3600 And append check_policy_service unix:private/policyd-spf after reject_unauth_destination , for example: smtpd_recipient_restrictions = reject_non_fqdn_recipient,reject_unknown_recipient_domain,permit_mynetworks,permit_sasl_authenticated,reject_unauth_destination,reject_non_fqdn_sender,reject_unlisted_recipient,check_policy_service unix:private/policyd-spf Restart postfix  # systemctl restart postfix Testing  Check the operation of the policy agent by looking at raw headers on incoming email messages for the SPF results header. The SPF policy agent also logs to /var/log/mail.log . In the mail.log file you’ll see messages like this from the policy agent Configuration resources  Man policyd-spf - policyd-spf python configuration parameters Kitterman Technical Services offers tools for setting up an SPF record. appmaildev.com also allows for testing SPF records. MX Toolbox allows users to look up their SPF records , making it possible to publish a list of domains that are authorised to send an email on their behalf, and a check if your mail server is blacklisted .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "947dba71caabf05e9586d5857fc7651e",
    "u": "https://mailserver.tymyrddin.dev/docs/tls/readme",
    "t": "Transport Layer Security (TLS) ",
    "c": "Transport Layer Security (TLS)  STARTTLS is a method of upgrading a plain text communication channel to a secure, encrypted communication channel. It makes it possible to create a secure, encrypted Simple Mail Transfer Protocol (SMTP) connection between mail servers. There is a serious issue with STARTTLS — it is vulnerable to Man-in-the-Middle (MITM) attacks. This issue can be mitigated by using either DNS-Based Authentication of Named Entities (DANE) for SMTP or SMTP Mail Transfer Agent Strict Transport Security (MTA-STS). With MTA-STS, DNSSEC is not required but is, of course, highly recommended. A valid X.509 certificate is required. Self-signed certificates are not allowed to be used in combination with MTA-STS. As mentioned before, DANE allows users of self-signed certificates, but a full DNSSEC implementation is required. DNS-based Authentication of Named Entities (DANE)  DANE is an alternative to Public Key Infrastructure (PKI) Certificate Authorities. It complements Domain Name System Security Extensions (DNSSEC), which must be implemented first. It is an Internet security protocol to allow X.509 digital certificates, commonly used for Transport Layer Security (TLS), to be bound to domain names using Domain Name System Security Extensions (DNSSEC). TLSA resource record is a type of DNS record. MTA Strict Transport Security (MTA-STS)  MTA-STS can be seen as a way to implement HTTP Strict Transport Security (HSTS) for SMTP. It is a mechanism to declare the ability to support TLS for SMTP and to specify whether sending mail servers must refuse to deliver an email to an authoritative receiving mail server that does not offer TLS with a trusted X.509 certificate. MTA-STS solves the problem that TLS is entirely optional with SMTP. With MTA-STS, DNSSEC is not required but is, of course, highly recommended. A valid X.509 certificate is required. Self-signed certificates are not allowed to be used in combination with MTA-STS.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7e07b89ae648eab3b3e798b700e981d1",
    "u": "https://mailserver.tymyrddin.dev/docs/dkim/readme",
    "t": "Domain Keys Identified Mail (DKIM) ",
    "c": "Domain Keys Identified Mail (DKIM)  DKIM is a method for detecting forged sender addresses in emails, a common technique used in phishing attacks. It lets official mail servers add a signature to headers of outgoing email and identifies a domain’s public key so other mail servers can verify the signature. As with SPF, DKIM helps keep mail from being considered spam. It also lets mail servers detect when mail has been tampered with in transit. Senders choose which elements of the email are to be included in the DKIM signing process: The whole message (header and body) or one or more fields of the email header. These elements must remain unchanged in transit, or the DKIM signature will fail authentication. The sender configures the mailserver to automatically create a hash of the parts of the email that are to be signed. The email provider receiving the email sees that it has a DKIM signature (and which “domain/selector” combination signed the encryption). It will run a DNS query to find the public key for that “domain/selector” combination. A keypair match enables the email provider to decrypt the DKIM signature back to the original hash string. The receiving email provider takes the elements of the email signed by DKIM, generates its own hash of these elements, and compares that hash with the decrypted hash from the signature. Depending on the implementation, DKIM can also ensure that a message has not been modified or tampered with in transit. It is complex and has not been adopted widely. => No DKIM signature does not mean an email is fake. The DKIM domain is not visible to end users and one needs to have a bit of a techie to make it visible and understand it. It is over many heads. Woosh! DKIM does not prevent spoofing of the visible header “From:” domain. These configuration notes are for debian 9 (will probably also work on buster) Rspamd is an e-mail filter system, which replaces Amavis and Spamassassin. It also is capable of signing outbound e-mails with DKIM keys. The status of Rspamd can be monitored via a simple web interface.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "362d6fe33428aa1950cc48bbaf76d421",
    "u": "https://mailserver.tymyrddin.dev/docs/mta/sasl",
    "t": "SASL configuration ",
    "c": "SASL configuration  Once Postfix is up and running, add SASL authentication to avoid open relaying. In order to prevent anonymous users from spamming, only authenticated and trusted users will be able to send emails. Postfix supports two SASL implementations: Cyrus SASL (SMTP client and server) and Dovecot SASL (SMTP server only). Both implementations can be built into Postfix simultaneously. Cyrus  Install: # apt-get install libsasl2-modules sasl2-bin SASL can use different authentication methods. The default one is PAM (as configured in /etc/conf.d/saslauthd ), but to set it up properly you have to create /etc/sasl2/smtpd.conf . Pambase 20190105.1-1 and newer use restrictive fallback for “other” PAM service, and a pam configuration file is required. Create a file /etc/postfix/sasl/smtpd.conf : pwcheck_method: saslauthd mech_list: PLAIN LOGIN log_level: 7 Setup a separate saslauthd process to be used from Postfix. Create a copy of saslauthd’s config file: # cp /etc/default/saslauthd /etc/default/saslauthd-postfix Append: START=yes DESC=\"SASL Auth. Daemon for Postfix\" NAME=\"saslauthd-postf\" # max. 15 char. # Option -m sets working dir for saslauthd (contains socket) OPTIONS=\"-c -m /var/spool/postfix/var/run/saslauthd\" # postfix/smtp in chroot() Create the required subdirectories in postfix chroot directory: dpkg-statoverride --add root sasl 710 /var/spool/postfix/var/run/saslauthd Add user postfix to the group sasl : adduser postfix sasl Restart saslauthd: # systemctl saslauthd restart [ ok ] Stopping SASL Auth. Daemon: saslauthd. [ ok ] Stopping SASL Auth. Daemon for Postfix: saslauthd-postf. [ ok ] Starting SASL Auth. Daemon: saslauthd. [ ok ] Starting SASL Auth. Daemon for Postfix: saslauthd-postf. Edit /etc/postfix/main.cf : smtpd_sasl_local_domain = $myhostname smtpd_sasl_auth_enable = yes broken_sasl_auth_clients = yes smtpd_sasl_security_options = noanonymous smtpd_recipient_restrictions = permit_sasl_authenticated, permit_mynetworks, reject_unauth_destination Restart (reloading is not enough): # systemctl postfix restart SMTP  To enable SASL for accepting mail from other users, in /etc/postfix/master.cf under the submission or smtp section (depending on what is used) append/uncomment: submission inet n - n - - smtpd -o syslog_name=postfix/submission -o smtpd_tls_security_level=encrypt -o smtpd_sasl_auth_enable=yes -o smtpd_reject_unlisted_recipient=no # -o smtpd_client_restrictions=$mua_client_restrictions # -o smtpd_helo_restrictions=$mua_helo_restrictions # -o smtpd_sender_restrictions=$mua_sender_restrictions -o smtpd_recipient_restrictions=permit_sasl_authenticated,reject -o milter_macro_daemon_name=ORIGINATING The three restriction options (client, helo, sender) can also be left commented out, since smtpd_recipient_restrictions already handles SASL users. Start/enable the saslauthd service and restart the postfix service. Dovecot  If Dovecot is used as IMAP or POP mail server and all users already authenticate (such as with PAM ), then there is no need to configure another package. SMTP  Edit /etc/postfix/master.cf and append/uncomment under the submission or smtp section (depending on what is used): # SASL authentication with dovecot -o smtpd_tls_security_level=encrypt -o smtpd_sasl_auth_enable=yes -o smtpd_sasl_type=dovecot -o smtpd_sasl_path=private/auth -o smtpd_sasl_security_options=noanonymous -o smtpd_sasl_local_domain=$myhostname -o smtpd_client_restrictions=permit_sasl_authenticated,reject -o smtpd_recipient_restrictions=reject_non_fqdn_recipient,reject_unknown_recipient_domain,permit_sasl_authenticated,reject In /etc/postfix/main.cf : smtpd_relay_restrictions = permit_mynetworks,permit_sasl_authenticated,reject_unauth_destination smtpd_sasl_local_domain = $myhostname smtpd_sender_restrictions filters mails based on the MAIL FROM command; This command is easy faked by telneting an open relay and typing in this command, therefore mail counl be sent with a valid MAIL FROM address. Use smtpd_client_restrictions instead, which checks the hostname or IP address of the smtpd client (the other MTA/SMTP connecting to the internal smtpd) in a black list, if listed mail is denied. If mails are marked as NoBounceOpenRelay try: smtpd_sasl_authenticated_header = yes To configure Postfix to enable email clients to connect to the SMTP server. In /etc/postfix/main.cf : smtpd_sasl_auth_enable = yes smtpd_sasl_security_options = noanonymous smtpd_sasl_local_domain = $myhostname smtpd_recipient_restrictions = permit_sasl_authenticated,permit_mynetworks, reject_unauth_destination broken_sasl_auth_clients = yes smtpd_sasl_type = dovecot smtpd_sasl_path = private/auth broken_sasl_auth_clients enables interoperability with remote SMTP clients that implement an obsolete version of the AUTH command. Default is no . Setting it to yes makes Postfix advertise AUTH support in a non-standard way. Restart both dovecot and postfix. Configuration resources  Postfix and Dovecot SASL",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "67a139b838a6ea1da56f277b7d543f0b",
    "u": "https://mailserver.tymyrddin.dev/docs/spf/readme",
    "t": "Sender Policy Framework (SPF) ",
    "c": "Sender Policy Framework (SPF)  SPF is a method for email authentication and is designed to detect fraudulent mail servers. SPF allows the recipient’s mail server to check that an authorized mail server sent the email. It is an open standard specifying a technical method to prevent sender address forgery. In plain language, it is a method of informing servers whether a specific mail server is authorised to send an email for a particular domain. With that, it can detect whether an email address is authentic or fake, before allowing it to pass into an inbox. An SPF record increases the likelihood that emails sent by valid addresses are delivered. Without it, genuine email could be categorised as spam. It also protects against malicious emails sent through your domain by spammers. A email provider publishes SPF records in the Domain Name System (DNS). These records list which IP addresses are authorised to send email on behalf of their domains. In an SPF check, email providers verify the SPF record by looking up the domain name listed in the return path address in the DNS. If the IP address sending email on behalf of the “return path” domain is not listed the record, the message fails authentication. SPF records must be kept updated. If a message fails SPF check, that doesn’t mean it will always be blocked. Breaks when a message is forwarded. Does not protect against spoofing of the visible “From” address in messages.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5fc40c56c8ce22580281fbb42de65381",
    "u": "https://mailserver.tymyrddin.dev/docs/servers/readme",
    "t": "Mail servers ",
    "c": "Mail servers  Dovecot is a minimal open-source IMAP and POP3 email server for Linux/ Unix operating systems. It supports different authentication methods, requires minimal memory, and supports Postfix and Exim. Cyrus is a robust open-source Linux mail server that offers speed, security and support for dozens of protocols and authentication methods. It is a rich configurable mail-server with a large set of options and third-party integrations.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "88d208a5e9828fbbb381faf5587d392f",
    "u": "https://mailserver.tymyrddin.dev/docs/tls/dane",
    "t": "DANE configuration ",
    "c": "DANE configuration  Postfix supports DANE In Postfix, certificate usage 0 is unsupported, 1 is mapped to 3, and 2 is optional, thus it is recommended to publish a “3” record. Configuration  In /etc/postfix/main.cf smtpd_use_tls = yes smtp_dns_support_level = dnssec smtp_tls_security_level = dane In /etc/postfix/master.cf dane unix - - n - - smtp -o smtp_dns_support_level=dnssec -o smtp_tls_security_level=dane Multiple domains  To use per-domain policies, for example for opportunistic DANE for domain.org and mandatory DANE for domain.com: In /etc/postfix/main.cf indexed = ${default_database_type}:${config_directory}/ # Per-destination TLS policy # smtp_tls_policy_maps = ${indexed}tls_policy # default_transport = smtp, but some destinations are special: # transport_maps = ${indexed}transport In transport : domain.com dane domain.org dane In tls_policy : domain.com dane-only Configuration resources  DANE: Common mistakes DANE validator Generate TLSA Record online RFC6698: The DNS-Based Authentication of Named Entities (DANE) Transport Layer Security (TLS) Protocol: TLSA SMTP Security via Opportunistic DNS-Based Authentication of Named Entities (DANE) Transport Layer Security (TLS)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "277e682ad4ae66b23022242f16768008",
    "u": "https://mailserver.tymyrddin.dev/docs/tls/tls",
    "t": "TLS configuration ",
    "c": "TLS configuration  Email servers wrap SMTP via direct TLS or a connection upgrade with STARTTLS at ports 465/587 A Postfix SMTP server needs a certificate and a private key in .pem format. The private key must not be encrypted (= must be accessible without a password). Public Internet MX hosts without certificates signed by a well-known public CA must still generate, and be prepared to present to most clients, a self-signed or private-CA signed certificate. For non-public Internet MX hosts, Postfix supports configurations with no certificates. This entails the use of anonymous TLS ciphers, which are not supported by typical SMTP clients. Creating keys and certificates  By default, Postfix will not accept secure mail. To set Postfix up to accept secure mail, obtain a certificate. A certificate can be obtained either from a certificate authority with a Certificate Signing Request (CSR) or Let’s Encrypt certbot, or self-signed. Self-signed certificates can be generated easily, but clients will reject them by default, unless each and every client is configured to trust the self-signed certificate. Point Postfix to your TLS certificates by appending to /etc/postfix/main.cf : smtpd_tls_cert_file = /etc/letsencrypt/live/$domain.$tld/fullchain.pem smtpd_tls_key_file = /etc/letsencrypt/live/$domain.$tld/privkey.pem smtpd_tls_dh1024_param_file = /etc/ssl/private/2048.dh smtpd_tls_dh512_param_file = /etc/ssl/private/512.dh If you want the Postfix SMTP server to accept remote SMTP client certificates issued by one or more root CAs, append the root certificate to $smtpd_tls_CAfile or install it in the $smtpd_tls_CApath directory. smtpd_tls_CApath = /etc/ssl/certs Configuration  SMTP (sending)  By default, Postfix/sendmail will not send email encrypted to other SMTP servers. To use TLS when available, in /etc/postfix/main.cf , set: smtp_tls_security_level = may Sending AUTH data over an unencrypted channel poses a security risk. When TLS layer encryption is not required but optional ( smtpd_tls_security_level = may ), it is still useful to only offer AUTH when TLS is active. To maintain compatibility with non-TLS clients, the default is to accept AUTH without encryption. In order to change this behaviour: In /etc/postfix/main.cf : smtpd_tls_auth_only = yes SMTP (receiving)  There are two ways to accept secure mail. For STARTTLS over SMTP (port 587) uncomment in /etc/postfix/master.cf : submission inet n - n - - smtpd -o syslog_name=postfix/submission -o smtpd_tls_security_level=encrypt -o smtpd_sasl_auth_enable=yes -o smtpd_tls_auth_only=yes -o smtpd_reject_unlisted_recipient=no # -o smtpd_client_restrictions=$mua_client_restrictions # -o smtpd_helo_restrictions=$mua_helo_restrictions # -o smtpd_sender_restrictions=$mua_sender_restrictions -o smtpd_recipient_restrictions= -o smtpd_relay_restrictions=permit_sasl_authenticated,reject -o milter_macro_daemon_name=ORIGINATING For SMTPS (port 465), uncomment in /etc/postfix/master.cf : smtps inet n - n - - smtpd -o syslog_name=postfix/smtps -o smtpd_tls_wrappermode=yes -o smtpd_sasl_auth_enable=yes -o smtpd_reject_unlisted_recipient=no # -o smtpd_client_restrictions=$mua_client_restrictions # -o smtpd_helo_restrictions=$mua_helo_restrictions # -o smtpd_sender_restrictions=$mua_sender_restrictions -o smtpd_recipient_restrictions= -o smtpd_relay_restrictions=permit_sasl_authenticated,reject -o milter_macro_daemon_name=ORIGINATING When the TLS information is not included in the headers of the message it has processed from another server or SMTP client that uses TLS, it can be added with: smtpd_tls_received_header = yes The “smtp server” part of Postfix (the first daemon that listens on port 25) then adds the TLS information to the “Received” message header of an incoming message. Logging  To get more information about Postfix SMTP client TLS activity you can increase the loglevel from 0..4. Each logging level also includes the information that is logged at a lower logging level. 0 Disable logging of TLS activity. 1 Log TLS handshake and certificate information. 2 Log levels during TLS negotiation. 3 Log hexadecimal and ASCII dump of TLS negotiation process. 4 Log hexadecimal and ASCII dump of complete transmission after STARTTLS. In /etc/postfix/main.cf : smtpd_tls_loglevel = 0 Cipher controls  The Postfix SMTP server supports 5 distinct cipher grades as specified by the smtpd_tls_mandatory_ciphers parameter, which determines the minimum cipher grade with mandatory TLS encryption. Default is medium. smtpd_tls_mandatory_ciphers = high Cipher grade high enables only “HIGH” grade OpenSSL ciphers specified in the tls_high_cipherlist configuration parameter, which you are strongly encouraged to not change. The smtpd_tls_ciphers parameter controls the minimum cipher grade used with opportunistic TLS. Default is medium . smtpd_tls_ciphers = medium By default, anonymous ciphers are enabled. They are automatically disabled when remote SMTP client certificates are requested. For excluding cipher types from the SMTP server cipher list at all TLS security levels: smtpd_tls_exclude_ciphers = aNULL, MD5, DES, 3DES, DES-CBC3-SHA, RC4-SHA, AES256-SHA, AES128-SHA, eNULL, EXPORT, RC4, PSK, aECDH, EDH-DSS-DES-CBC3-SHA, EDH-RSA-DES-CDC3-SHA, KRB5-DE5, CBC3-SHA The Postfix SMTP server security grade for ephemeral elliptic-curve Diffie-Hellman (EECDH) key exchange: smtpd_tls_eecdh_grade = strong strong means use EECDH with approximately 128 bits of security at a reasonable computational cost. This is the current best-practice trade-off between security and computational efficiency. By default, the OpenSSL server selects the client’s most preferred cipher-suite that the server supports. With SSLv3 and later, the server may choose its own most preferred cipher-suite that is supported (offered) by the client. The default OpenSSL behaviour applies with “tls_preempt_cipherlist = no” To enable server cipher-suite preferences: tls_preempt_cipherlist = yes Entropy  The security of cryptographic software such as TLS depends critically on the ability to generate unpredictable numbers for keys and other information. The tlsmgr process maintains a Pseudo Random Number Generator (PRNG) pool for the purpose. This is queried by the smtp and smtpd processes when they initialize. By default, these daemons request 32 bytes, the equivalent to 256 bits, more than enough to generate a 128 bit (or 168 bit) session key. A good entropy source is /dev/urandom tls_random_source = dev:/dev/urandom Session cache  The remote SMTP server and the Postfix SMTP client negotiate a session, which takes some computer time and network bandwidth. Cached Postfix SMTP server session information expires after a certain amount of time. Postfix/TLS does not use the OpenSSL default of 300s, but a longer time of 3600sec. RFC 2246 even recommends a maximum of 24 hours. smtpd_tls_session_cache_timeout = 3600s Obsolete TLS parameters  smtpd_tls_mandatory_protocols = TLSv1 Firewall  Allow connections to port 587 and 465 (depending) by opening the port for your server in the server firewall. Configuration resources  Guide to Deploying Diffie-Hellman for TLS",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "64eade5fd86f1ff1a95b732047845a90",
    "u": "https://mailserver.tymyrddin.dev/docs/servers/cyrus",
    "t": "Cyrus ",
    "c": "Cyrus  The Cyrus IMAP server is electronic mail server open source software developed by Carnegie Mellon University. It differs from other Internet Message Access Protocol (IMAP) server implementations in that it is generally intended to be run on sealed servers, where normal users cannot log in. And it is not lightweight. Installation  # apt-get install cyrus-imapd cyrus-sasl cyrus-sasl-plain You will be asked to set a password for the default administrative user cyrus Get SSL certificate  Using Let’s Encrypt, request a certificate for the mail server by (replacing mail.mydomain.com with the fully qualified domain name (FQDN) of your server): certbot certonly --standalone -d mail.mydomain.com Integration with postfix  Firewall  To access the mail server from another computer, configure the server firewall to allow connections to the server on the necessary ports. The default ports are IMAP - 143; IMAPS - 993; POP3 - 110; and POP3S - 995. Configuration resources  Cyrus IMAP",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e798deee75ddaa94fc96699ea0567a29",
    "u": "https://mailserver.tymyrddin.dev/docs/dkim/dkim",
    "t": "DKIM configuration ",
    "c": "DKIM configuration  Installation  # apt-get install opendkim opendkim-tools Unix socket  Postfix and opendkim communicate through a unix socket. Socket address is usually the one specified in /etc/postfix/main.cf , but the default configuration of postfix in debian runs under a chroot ( /var/spool/postfix ) so the socket must be created in the jail: # sockdir=/var/spool/postfix/var/run/opendkim # mkdir -p $sockdir # chown opendkim. $sockdir # chmod go-rwx $sockdir # chmod g+x $sockdir Generate keys  Generate the key pair. To generate a secret signing key, you need to specify the domain used to send mails and a selector which is used to refer to the key (choose anything you like, alpha-numeric strings will do). # opendkim-genkey -r -s myselector -b 2048 -d $domain.tld This creates two files in /etc/dkimkeys/ : myselector.private and myselector.txt , the private and public key. Make sure that only the opendkim user can read them: chgrp opendkim /etc/dkimkeys/* chmod go-rwx /etc/dkimkeys/* Configuration  Copy the sample configuration file /etc/opendkim/opendkim.conf.sample (or /usr/share/doc/opendkim/opendkim.conf.sample ) to /etc/opendkim/opendkim.conf and change: Domain $domain.tld KeyFile /path/to/keys/myselector.private Selector myselector Socket inet:8891@localhost UserID opendkim On debian, for the unix socket: Syslog yes # Required to use local socket with MTAs that access the socket as a non- # privileged user (e.g. Postfix) UMask 007 # DO NOT BELIEVE that /etc/default/opendkim overrides the following : # (In stretch, it does not on 2019-08-13) Socket local:/var/spool/postfix/var/run/opendkim/opendkim.sock Multiple domains  If you are providing mail server service to multiple virtual domains on the same server, provide these directives: KeyTable refile:/etc/opendkim/KeyTable SigningTable refile:/etc/opendkim/SigningTable ExternalIgnoreList refile:/etc/opendkim/TrustedHosts InternalHosts refile:/etc/opendkim/TrustedHosts You have to create/move/copy DKIM keys in a separate domain folder for each domain, for example /etc/opendkim/keys/domain1.com/ . Otherwise you will receive dkim: FAILED, invalid (public key: not available)” error message with DKIM email test . You can use the same key for all the domains or generate a separate key for each domain. Edit the /etc/opendkim/KeyTable file to specify key locations: myselector._domainkey.domain1.com domain1.com:mail:/etc/opendkim/keys/domain1.com/myselector.private myselector._domainkey.domain2.com domain2.com:mail:/etc/opendkim/keys/domain2.com/myselector.private Edit the /etc/opendkim/SigningTable file to specify which key will sign a domain. *@domain1.com myselector._domainkey.domain1.com *@domain2.com myselector._domainkey.domain2.com In /etc/opendkim/TrustedHosts , add trusted domain and IP addresses who can use the keys. If needed, include localhost as it is not implicit. 127.0.0.1 ::1 localhost <some_server_ip> hostname.domain1.com domain1.com hostname.domain2.com domain2.com ... This is referenced by the ExternalIgnoreList directive. Opendkim will ignore this list of hosts when verifying incoming mail. It is also referenced by the InternalHosts directive, this same list of hosts will be considered “internal,” and opendkim will sign their outgoing mail. The flow for DKIM lookup starts with the sender’s address. The signing table is scanned until an entry whose pattern matches the address is found. Then, the second item’s value is used to locate the entry in the key table whose key information will be used. For incoming mail the domain and selector are then used to find the public key TXT record in DNS and that public key is used to validate the signature. For outgoing mail the private key is read from the named file and used to generate the signature on the message. Postfix integration  To make Postfix listen to the unix socket on debian (set up as above): Add user postfix to the opendkim group (postfix needs to be able to access the socket): # adduser postfix opendkim And append to /etc/postfix/main.cf : milter_default_action = accept milter_protocol = 6 # from inside the chroot, the socket will be in /var/run/opendkim smtpd_milters = unix:/var/run/opendkim/opendkim.sock non_smtpd_milters = unix:/var/run/opendkim/opendkim.sock Restart postfix  # systemctl restart postfix DNS Configuration  Add a TXT record for your domain(s). For example: As a Hostname, use the myselector followed by the literal string ._domainkey and use as Text: v=DKIM1; p=yourPublicKey Or v=DKIM1; h=sha256; k=rsa; s=email; p=yourPublicKey Exact format may vary per DNS provider. Check the documentation for the exact style required. Testing  Try to send a mail. Check /var/log/mail.log Test the installation with opendkim-testkey : # opendkim-testkey -d $domain.tld -s myselector -vvv Configuration resources  Breaking DKIM - on Purpose and by Chance , October 2017, Update 08/2018 Debian: opendkim",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8fdb41b25653820c4fce47d53823a387",
    "u": "https://mailserver.tymyrddin.dev/docs/mta/postfix",
    "t": "Postfix configuration ",
    "c": "Postfix configuration  The two most important configuration files are: /etc/postfix/master.cf , defining what Postfix services are enabled and how clients connect to them /etc/postfix/main.cf , the main configuration file, the bulk, the meat. Most configuration changes only need a reload of postfix in order to take effect. Only some require a restart. Don’t manage mailboxes from postfix. Check configuration with the postfix check command. To see all of the configuration files use the postconf command. To see how the setup differs from the defaults, use postconf -n . On debian, Postfix runs by default in a chroot jail. On other distro’s where this is not the case, it is recommended to set it up in a jail. Limit use of Postfix services Restrict which hosts are granted or refused access with the smtpd_*_restrictions directives. The vrfy command allows an attacker to determine if an account exists on a system, providing significant assistance to a brute force attack on user accounts. vrfy may provide additional information about users on the system, such as the full names of account owners. Default is no . Set to disable_vrfy_command = yes . Client control rules can be based on the sender or receiver address and limitations of the number and size of email messages. Consider greylisting: In greylisting the server sends a request to have the email resent, after temporarily rejecting the email. The server saves in a list the sender IP and the recipient and returns a temporary error. All valid servers will then resend the emails, spamming scripts will not. Other efficient protocol level solutions in Postfix can be used to make sure the mail server is RFC compliant and prevent email looping (a very simple method would be setting a maximum numbers of “Received” headers per email). With policy services Postfix’ behaviour of mail delivery can be fine-tuned. Making changes to configurations of such services require a restart of Postfix. Installation  # apt-get install postfix You will be asked a series of questions. On the first prompt, select //Internet Site// option as the general type for Postfix configuration, continue, and then add domain name to system mail name. Basic configuration  Configure the basics: # cp /etc/postfix/main.cf{,.old} # vi /etc/postfix/main.cf myhostname = $hostname //Use command \"hostname\" to display your hostname myorigin = $mydomain //Add domain, so others can not abuse the mailsystem relay_domains = domain1.com, domain2.com, domain3.com //Add the domains the system will handle Multiple local domains  Postfix can be configured for more than one domain via the use of a hash file. This file contains the list of domains postfix will accept for local delivery. Open the /etc/postfix/main.cf configuration file and append: virtual_alias_domains = hash:/etc/postfix/virtual_domains Create the file, and add all the domains postfix should accept in it (one per line). The postmap program expects the file to have 2 columns but the second column is ignored. Do add that second column and add comments like #something in it. It will work without, but you get warnings. To make the hashfile: # postmap /etc/postfix/virtual_domains Remote access  The postfix SMTP server access table contains the list for access control for remote SMTP clients: Open the /etc/postfix/main.cf configuration file and append: check_sender_access = hash:/etc/postfix/access Create the file, and add all the host names, network addresses, and envelope sender or recipient addresses postfix should accept in it (one per line) To make the hashfile: # postmap /etc/postfix/access Managing mailboxes  Don’t manage mailboxes from postfix. Redirect messages for delivery via POP/IMAP server. In case of dovecot there is dovecot-lda aka deliver that do everything and much more, like user-controlled message filtering, quota management, autoreplying etc. Most modern POP/IMAP servers have a lot of utilities for common tasks in infrastructures. Maildir is the newer and preferrable format due to the lot of improvements comparatively to mailbox. It has an index for each folder that allow to control duplicates, expiration times and even full-text search and is faster on a huge pile of messages. Dovecot can easily operate maildir with 300k messages in it without any visible slowdown. Abuse and spam  SMTP restrictions  The smtpd_*_restrictions directives can be used to set what data is accepted for any SMTP command, for example in /etc/postfix/main.cf : # smtpd_recipient_restrictions = reject_invalid_hostname, reject_unknown_recipient_domain, reject_unauth_destination, reject_rbl_client sbl.spamhaus.org, permit # smtpd_helo_restrictions = reject_invalid_helo_hostname, reject_non_fqdn_helo_hostname, reject_unknown_helo_hostname Blacklisting  Manually blacklisting incoming emails by sender address can easily be done with Postfix. Create and open an /etc/postfix/blacklist_incoming file and append sender email addresses: user@domain.com REJECT To create a database, use postmap command: # postmap hash:blacklist_incoming And append before the first permit rule in /etc/postfix/main.cf : smtpd_recipient_restrictions = check_sender_access hash:/etc/postfix/blacklist_incoming Use of others’ lists is also possible. An RBL list is a spammer blacklist of domains. In /etc/postfix/main.cf : smtpd_client_restrictions = reject_rbl_client dnsbl.sorbs.net Greylisting  Install the postgrey package. Open up /etc/postfix/main.cf and append smtpd_recipient_restrictions = check_policy_service inet:127.0.0.1:10030 Then start/enable the postgrey service and after that reload the postfix service. Its configuration is done via editing the postgrey.service file. Copy it over to edit it. # cp /usr/lib/systemd/system/postgrey.service /etc/systemd/system/ Using postgrey it is also possible to add automatic whitelisting based on successful deliveries. These then don’t have to wait any more. This can be done by , you could add the adding the --auto-whitelist-clients=5 (default is 5) but the preferred method is the override: # cat /etc/systemd/system/postgrey.service.d/override.conf [Service] ExecStart= ExecStart=/usr/bin/postgrey --inet=127.0.0.1:10030 \\ --pidfile=/run/postgrey/postgrey.pid \\ --group=postgrey --user=postgrey \\ --daemonize \\ --greylist-text=\"Greylisted for %%s seconds\" \\ --auto-whitelist-clients Add your own list of whitelisted clients in addition to the default ones by creating the file /etc/postfix/whitelist_clients.local (one host or domain per line). Restart the postgrey.service for the changes to take effect. Header filtering  Postfix header or body_checks are designed to stop a flood of mail from worms or viruses. Optional lookup tables for content inspection of primary non-MIME message headers are used. This does not decode attachments or unzip archives. Default is empty . In this mechanism checks can be made against regular expressions. For example, postfix can search for any string in an incoming email. In /etc/postfix/main.cf set: header_checks = regexp: /etc/postfix/headers_checks Then in /etc/postfix/header_checks append regular expressions for what to check for: /^(.*)@domain.com/ REJECT //Match any recipient/sender for a specific domain The mechanism can also be used to hide a sender’s IP and user agent in the Received header. This is a privacy concern mostly for sending email with Thunderbird. The received header will contain LAN and WAN IP and info about the email client used. Append to main.cf : smtp_header_checks = regexp:/etc/postfix/smtp_header_checks Create /etc/postfix/smtp_header_checks and append: /^Received: .*/ IGNORE /^User-Agent: .*/ IGNORE Relaying  Relaying means that a sender with host in domain A, connects to our mailer in domain B to send an email to someone in domain C. A party for spammers. The easiest way to control relaying is to use the smtpd_recipient_restrictions directive; If this directive is left undefined, Postfix uses the information given in the directives...",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8d791eba755fcea7b9bff345f4cfb4e4",
    "u": "https://mailserver.tymyrddin.dev/docs/dmarc/dmarc",
    "t": "DMARC configuration ",
    "c": "DMARC configuration  DMARC allows the domain owner to specify what happens with failed emails and get feedback when they arrive. Basically, there are three actions receiving servers can take if BOTH SPF and DKIM checks fail: none , quarantine , and reject . Setting it up takes five-steps as listed on the DMARC website Deploy DKIM & SPF . You have to cover the basics, first. Ensure that your mailers are correctly aligning the appropriate identifiers. Publish a DMARC record with the “none” flag set for the policies, which requests data reports. Analyze the data and modify your mail streams as appropriate. Modify your DMARC policy flags from “none” to “quarantine” to “reject” as you gain experience. Flaws as per the infosec institute We may think that, using SPF and DMARC would complete the holes in the mail filtering system. There is a small side effect for this method, i.e. the mail reaches the receiver end if either one of SPF or DKIM passes it in. If an attacker manages to find a way to pass SPF or DKIM, it will reach the inbox. An attacker can bypass the DMARC by creating a perfect mail copy if the following steps are followed: If the attacker uses a server IP that passes through SPF policy. This could be done by selecting the same email provider as the sender. Attacker can make use of any authorized server to create a mail; this mail will be given proper DKIM keys as other legitimate mail and would reach the receiver end. Let’s say that the senders side is fully configured with SPF, DKIM, DMARC and the receiver side is left without any proper configuration, the mail could easily reach the receivers end, since there are no properly established filters. Don’t fall asleep. Keep checking emails , and add PGP signing of messages.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6be683b6cc26ce267a61a3d9b53959fc",
    "u": "https://mailserver.tymyrddin.dev/docs/servers/dovecot",
    "t": "Dovecot ",
    "c": "Dovecot  Dovecot is an open source IMAP and POP3 server for Linux/UNIX-like systems, written primarily with security in mind. Dovecot aims to be a lightweight, fast and easy to set up open source mailserver. The below is for debian 9 (probably also works on buster) Installation  apt-get install dovecot-common dovecot-imapd dovecot-pop3d Get SSL certificate  Using Let’s Encrypt, request a certificate for the mail server by (replacing mail.mydomain.com with the fully qualified domain name (FQDN) of your server): certbot certonly --standalone -d mail.mydomain.com Configuration  Dovecot’s configuration files are in /etc/dovecot/conf.d/ . The default configuration is ok for most systems, but make sure to read through the configuration files to see what options are available. By default dovecot will try to detect what mail storage system is in use on the system. To use the Maildir format edit /etc/dovecot/conf.d/10-mail.conf to set it: mail_location = maildir:~/Maildir To configure it for the SSL certificates, open /etc/dovecot/conf.d/10-ssl.conf and append: ssl = required ssl_cert = </etc/letsencrypt/live/mail.mydomain.com/fullchain.pem ssl_key = </etc/letsencrypt/live/mail.mydomain.com/privkey.pem To force SSL/TLS encryption, open /etc/dovecot/conf.d/10-auth.conf and make sure: disable_plaintext_auth = yes SASL  In the main configuration file /etc/dovecot/conf.d/10-master.conf , uncomment the paragraph for Postfix in the auth service block: service auth { # Postfix smtp-auth unix_listener /var/spool/postfix/private/auth { mode = 0660 } } This will create the private/auth path for the SASL configuration of Postfix. Because Postfix runs chrooted in /var/spool/postfix , a relative path must be used. Integration with postfix  In /etc/postfix/master.cf append: dovecot unix - n n - - pipe flags=DRhu user=email:email argv=/usr/lib/dovecot/deliver -f ${sender} -d ${recipient} Firewall  To access the mail server from another computer, configure the server firewall to allow connections to the server on the necessary ports. The default ports are IMAP - 143; IMAPS - 993; POP3 - 110; and POP3S - 995. Configuration resources  Dovecot configuration Dovecot Quick Configuration",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7ebab8b4532c5ef47e3ce812b894baf5",
    "u": "https://pap.tymyrddin.dev/docs/mobile/spyware",
    "t": "Spyware ",
    "c": "Spyware  Spyware infects a device via the installation of a malicious app that has disguised itself as harmless . This means you could unknowingly infect your device with malware by downloading a malicious file from the web. Spyware can be spread to a device via pishing , smishing, and vishing. Spyware is designed to track activity on whatever device, or devices, it is installed on: websites visited, contacts, applications used, and login details for various online accounts, meaning payment details, social media logins, sensitive files, and other confidential data become vulnerable. Detection  Spyware uses the device resources, making the battery drain unusually fast. Spyware causes an increase in CPU usage. This causes the CPU to overload and overheat. Unusual changes and charges. Suspicious credit card activities. Increased data usage. Because spyware runs in the background continuously, it interferes with the shutdown process, making it slower. Spyware can record calls. While recording, it can create weird background noises like taps, static noises, distant voices, echoes, or random sounds. These noises can be heard on mobile phone calls or during video conferences. Mitigation  Manual removal does not require any tool or technical knowledge. Factory reset. Using Spyware Removal Software. Prevention  Have antivirus software installed on all devices. Many antivirus subscriptions offer multi-device cover, so check to see if your existing plan offers this, or whether you can find a provider that does. Keep device operating systems as up to date as possible. Having the most recent upgrade can improve security levels. Always use strong passwords on your social media accounts, user profiles, and apps. Use a different password for each account.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "87a6b4aaa47253207af374a21496c933",
    "u": "https://pap.tymyrddin.dev/docs/mobile/stalkerware",
    "t": "Stalkerware ",
    "c": "Stalkerware  Spyware and stalkerware are similar, yet not the same. Both are types of malware used to track a person’s activity on a device. But stalkerware is a more personal way of invading another person’s privacy. Stalkerware has to be physically installed, meaning that the attacker has to have direct access to the devices they are trying to compromise. Stalkerware is most likely used by a parent or partner. Stalkerware is less likely to masquerade as something else entirely. Not always. In some cases it claims to be a child protection app, featuring disguise, in which case it is clear it is used to spy on a partner without him/her knowing. Even without, when intended to track children’s activities, its intent is always considered malicious, as it invades privacy. With stalkerware installed on another person’s device, the adversary can activate the camera or microphone, view login details to different accounts, and sometimes even intercept phone calls. Growing list of found stalkerware  Tool Claims Platform mSpy Chats, photos, videos, and location. Android and iOS XNSPY Photos, videos, and social media chats Android eyeZy Feature-heavy phone spying app Android and iOS ClevGuard Activities Android, iOS, and Windows SpyBubble Real-time complete phone tracking iOS and Android Cocospy Control and Remote Surveillance Android and iOS uMobix Remote streaming of audio and video Android and iOS Hoverwatch Full-Featured Invisible Android Tracker Android and iOS FlexiSPY Emails, IM and browser activity Android pcTattetale Activities Android & Windows TheOneSpy Activities including live streaming Android Spyine Monitoring smartphone in stealth mode Android and iOS TheWiSpy Tracking location and monitoring files Android Detection  Stalkerware is designed to be stealthy so that the victim never realises their smartphone has been infected. Many of the usual tell-tale signs of spyware (unwanted pop-ups, slow performance, over-heating) are not present with stalkerware. Mitigation  Use a security app to scan the device. If you find stalkerware, report it to law enforcement (may not always and everywhere be an option). Prevention  Equip devices with a password, fingerprint login, or similar. This adds an extra layer of protection, as stalkerware cannot be remotely installed. Use routine malware scans (security app).",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ca1d9f37a6650ee60cb466197067ab49",
    "u": "https://pap.tymyrddin.dev/docs/mobile/vishing",
    "t": "Vishing ",
    "c": "Vishing  Vishing is a type of phishing that uses phone, robocall, voicemail, voice over internet protocol (VoIP), and social engineering to contact you in an attempt to gather personal information about you. Robocalls  A robocall is an automated telephone call that delivers a pre-recorded message. Organisations, telemarketers, and adversaries use robocalls to reach millions of phones every single day. They make people’s phones ring with natural-sounding recorded voices and offer everything from auto warranties to games. In some cases it can even issues a threat to get your attention. Some robocalls can even respond to your questions. Robocalls are made using auto-dialing software, and may use caller ID spoofing technology to make it seem as if the phone call is coming from someone else. Detection  If callers are legitimate, it should not be difficult to authenticate their professional affiliation with another phone call. If they do not provide the information necessary to verify their identity, they can not be trusted. Callers creating a sense of urgency is a huge social engineering red flag. Caller sending unsolicited email or SMS messages is another red flag. Mitigation  Hang up as soon as you notice it is a robocall. Never say “yes” to any question. Ignore any and all instructions, not even seemingly harmless instructions. Slippery social engineering slope. Write down any information the person or robot provides on the call — without providing any details of your own. Do not give out any personal information over a phone, ever. Do not click on links in emails or in mobile phone SMS text messages the caller might send. Phone technology that locks a phone line after hanging up and redirecting next calls to the fraudulent caller exists. Do not call back using the same phone on which you received the call. Note the number, what they said/did and report the call to a “Do Not Call” registry and/or anti-fraud program (if existing in your country). Prevention  Keep your phone number private (including on social media). Be aware of caller ID spoofing. Do not answer unknown numbers. Many mobiles offer a “whitelisting” tool that will allow calls only from numbers in your contact list. Use it: On iPhones (iOS 13 and later), go to Settings -> Phone , scroll down, tap Silence Unknown Callers , and turn it on. Calls from unknown numbers are silenced and sent to your voicemail, and will appear in your recent calls list. On Android phones, tap the phone icon at the bottom of the home screen, then in the top right corner of the screen, tap the three dots -> Settings -> Blocked Numbers . Enable Block Calls From Unidentified Callers by tapping the toggle switch on the right. Google’s Pixel phones have a tool called Call Screen . When you receive a call from any number, you can tap Screen Call on your home screen and Google Assistant will answer it for you and ask the caller to identify himself or herself and the reason for calling. When a caller responds, a real-time transcript of the response is displayed. Ask governments for “Do Not Call” registries and Anti-fraud programs, if not available yet.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "dd8b586d2a7d41882e6a74daa1074fae",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/raas",
    "t": "Ransomware-as-a-Service (RaaS) ",
    "c": "Ransomware-as-a-Service (RaaS)  Think of Ransomware-as-a-service (RaaS) in the larger Malware-as-a-Service (MaaS) ecosystem. RaaS allows less experienced adversaries to carry out attacks. While phishing is still used, drive-by download , VPN vulnerabilities and distribution over botnets are more likely used. For workstations (Windows, macOS, *nix), a ransomware infection means that data on the device has been encrypted or the operating system is being blocked, and its owner receives a message to pay a ransom. Mobile ransomware (Android, iOS) variants can also encrypt, but most use other techniques. While individuals, companies, and NGOs are all targets, the compromise of a small number of user accounts that have additional access or privileges, are especially valuable to adversaries . A ransomware attack can mean the loss of data, spending large sums of money, or both. We do it for [insert reasons here]  RansomedVC published the data of nine victims on its leak site in August 2023. The group has adopted the ideology of many other ransomware actors: “We are doing it for pentesting”, and humorously adds that any vulnerabilities found must also be reported to Europe’s General Data Protection Regulation (GDPR), threatening victims with data breach fines if the ransom is not paid.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d438285f31a6238711a491427a4dee9c",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/botnets",
    "t": "Botnet activity increase ",
    "c": "Botnet activity increase  A botnet is a collection of devices connected via the internet, each running a single bot or series of bots. Distributed Denial of Service Attacks (DDoS), crypto mining and click fraud are common activities done by botnets to enable adversaries to access a device. Attackers use Command and Control (C&C) software to control devices. Nearly all malware families use botnets for command and control (C&C) communications. With the growth in malware families and variants, it was to be expected that botnet activity increases as well. The number of “active days” increased - Measured by researchers as the time between when botnet activity was first detected by their sensors and when the botnet stopped communicating. The time between running C&C’s if detected has decreased, thanks to using attack infrastructure as code (IAC) . Current  Live botnet threatmap worldwide - Spamhaus",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c50d429621d33232df07e67720dfa8fa",
    "u": "https://pap.tymyrddin.dev/docs/mobile/swapping",
    "t": "SIM swapping ",
    "c": "SIM swapping  In SIM swapping an adversary steals your number and assigns it to a new SIM card in a phone they control. It is the same process you go through when you get a new phone and the mobile carrier gives you a new SIM card. The adversary can now use your SIM card to steal further information to log in to your accounts and either enter a verification code or reset the account password using the code or link sent to the phone. Prevention   the mobile phone operator and add extra security or temporarily freeze number porting to help protect yourself from SIM swapping. Check if your accounts let you use a non-SMS multifactor authentication option, in which you provide two pieces of proof to verify your identity.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cda1331e87cff4008d0ffe5771715666",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/maas",
    "t": "Malware-as-a-Service (MaaS) ",
    "c": "Malware-as-a-Service (MaaS)  Think of Malware-as-a-Service (MaaS) and the larger Crime-as-a-Service (CaaS or Craas) market as a variation of the Software-as-a-Service (SaaS) business model. For a reasonable monthly fee, adversaries who do not know how to write their own InfoStealer or Ransomware yet, can simply pay to use one written by an expert. It works similar to legitimate subscription services. In this business model, developers offer negotiations, cryptocurrency transfers, leak site management, ransomware development, botnets, etc. to multiple affiliates, in trade for cryptocurrency and not running the risk of getting identified and arrested. We only had to wait for it. Anyone with a few hundred euros worth of cryptocurrency can get started with a few clicks. Tongue, cheek  Deploy Disaster-Recovery-as-a-Service (DRaaS) to ensure quick recovery in case of an attack.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "35416cea473fc5bcc202d1b7256cddfd",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/adversaries",
    "t": "Unusual suspects ",
    "c": "Unusual suspects  Nation state  Nation-state actors and criminals-with-license from China and Russia, similar actors from the Five Eyes (make that many eyes), adversaries from other nation states, for information and profit. These have virtually unlimited resources (from taxpayers), direct access (including through confiscating equipment), and if not for that, never-ending exploits/backdoors (gifts that keep giving), anonymisation and C&C, immunity from prosecution (laws are for subjects, they stand above it), and plausible deniability (lying). These adversaries believe it is their right/obligation/duty. Digital crime gangs  Organised digital crime gangs, in it for profit. These have virtually unlimited resources too (from previous attacks), reverse engineered or copied never-ending exploits/backdoors (gifts that keep giving), and lying. Insiders  If you are defending an organisation, insiders working for either of the two groups (for money), or just unhappy people out for some (personal) revenge for something. Anyone, really  If you have bitcoin and can click, you can be an adversary, thanks to Malware-as-a-Service (MaaS) . All of ‘em  In all cases, adversaries are highly motivated and/or conditioned, and are lying, including to themselves with “We do it for [insert reasons here]”. In general, attackers are multiplying, diversifying their exploits, and making attacks more targeted. Cybercrime organisations and nation-state offensive groups operate much more like traditional companies, with responsibilities, deliverables, and objectives. They quickly adopt new technologies, and have deep pockets from past exploits or from nation-state sponsors, allowing experimenting with and incorporating new technologies like generative AI, which make their attacks more complex and much harder to detect. Distribution seems to have become more concentrated with adversaries carrying out more targeted attacks using quickly adaptable and sophisticated playbooks ( which were probably adopted from red teaming ).",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "fe4e93e0a0862d23d04eef7287e0533f",
    "u": "https://pap.tymyrddin.dev/docs/thm/cases",
    "t": "Basic phishing labs ",
    "c": "Basic phishing labs  DIY on TryHackMe: Phishing Analysis Fundamentals - Learn all the components that make up an email. Phishing Emails in Action - Learn the different indicators of phishing attempts by examining actual phishing emails. Phishing Analysis Tools - Learn the tools used to aid an analyst to investigate suspicious emails.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1ee9b53c306897b2bd103c7da1282804",
    "u": "https://macos.tymyrddin.dev/",
    "t": "Hardening macOS ",
    "c": "Hardening macOS  Version 0.1: These mitigations are all based on Catalina. Supposedly, Big Sur has better security . Some of the below is still applicable and useful. When we have a Big Sur set up we will test it, and split and update these mitigations. Authentication Introduction Disable automatic login Require a password when resuming Make that more secure passwords Use a password manager Use multi-factor authentication (MFA) Protect SSH access with MFA Services and applications Introduction Restrict which apps can run System integration protection (SIP) Secure browsers that protect your privacy Use a secure messaging service Use secure email services Use SSH tunnels Use a VPN service Use a firewall as a VPN fail-safe mechanism Use alternative DNS servers Use a Tor proxy Change MAC address Renew IP lease Edit hosts file Data Introduction Set up the time machine and backups in macOS Enable full disk encryption using FileVault Password protect files and folders Privacy Introduction Disable location services and other privacy settings Remove metadata from files Edit exif metadata in images Remove metadata with hex editors Clean machine with BleachBit Malware Introduction Mac myths Scan and clean machine Catch and remove daemons and launch agents Analysing trojans Operations security Introduction Use email securely Detecting fake emails and phishing Browse more safely Check integrity of downloads ‘;–have i been pwned? Guards! Guards! Introduction Alphabet soup macOS intrusion detection systems OSSEC",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "66316622b4941ff48a4787b7a15dc9ea",
    "u": "https://macos.tymyrddin.dev/docs/services/dns-servers",
    "t": "Use alternative DNS servers ",
    "c": "Use alternative DNS servers  When you don’t set up DNS servers on your computer or router, your DNS queries will run on your ISP’s DNS servers. Without VPN (with killswitch and/or firewall set as a VPN fail-safe mechanism ), DNS requests are most likely sent unencrypted, which can lead to common DNS attacks. Domain hijacking (Redirection) DNS flood attack (a type of DDoS attack) DNS spoofing or DNS cache poisoning DNS hijacking (malware infection on a local device to hijack DNS to redirect traffic to a phishing site) And any man in the middle of your traffic can see your online behaviour and the websites you visit. Your ISP’s DNS servers see every search you make in your browser. Using your ISP’s DNS servers as default DNS servers doesn’t do anything for security or privacy. Alternative DNS servers  OpenNIC is a group of volunteers who run an alternate DNS network offering free DNS servers. Depending on your location, you are offered different servers. OpenNIC offers DNS neutrality (it does not censor content), and you get the right to choose how much data OpenNIC logs. OpenDNS is a cloud-based service offering three solutions in their Home package, two of which are free. To connect with your nearest DNS server, and for faster page load times, it uses anycast routing. DNSWatch also offers DNS neutrality and does not log any DNS queries or record history. Quad9 DNS blocks malicious and suspicious domains using security intelligence from a group of companies to improve security. They do keep logs on some activity. Use wireshark to check for leaks  To check if you have DNS leaks, fire up Wireshark : Start capturing on the active interface and connect to the VPN. After capturing either a fixed number of packets, or an amount of data or for a specific time period, go to //Statistics -> Endpoints// There should only be one public IP address, namely that of the VPN server that you’re connected to. The ‘’10.0.2.15’’ in this image is a local address.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "bcff69e0287204853b3686eb8a3a6a3f",
    "u": "https://macos.tymyrddin.dev/docs/authentication/resuming",
    "t": "Require a password when resuming ",
    "c": "Require a password when resuming  Password protect your Mac when it goes to sleep or when the screen saver begins. Go to Apple > System Preferences and click Security & Privacy. Make sure the General tab is selected. Check the Require password box. Select how soon after your Mac goes to sleep, or the screen saver begins. It’s a good idea to choose Immediately, especially in a public place, or anywhere there are other people around. You will be able to wake the computer with your local password .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "852dc5e3454f47b2891e51d3af654da7",
    "u": "https://macos.tymyrddin.dev/docs/services/vpn-fail-open",
    "t": "Use a firewall as a VPN fail-safe mechanism ",
    "c": "Use a firewall as a VPN fail-safe mechanism  If you simply add a VPN using common instructions, it generally “fails open”. That means, if the VPN breaks down, because the connection is interrupted, traffic will be sent without the VPN. It is much safer when it “fails closed”, meaning that when the VPN connection breaks down, the whole internet connection must be down as long as the VPN connection is not restored. If your chosen VPN does not include being able to set a kill switch, you can use your firewall as a fail-safe mechanism: Kill switch using pf  Get the IP address of the VPN gateway that the kill switch is intended for using the host command. Get the network interface name connected to your default gateway and the subnet of the local network using the route command. After connecting to the VPN, by running the command `ifconfig -a and searching for POINTOPOINT, find the interface used by the VPN: $ ifconfig -a | grep -i POINTOPOINT utun0: flags=8051<UP,POINTOPOINT,RUNNING,MULTICAST> mtu 2000 Create a killswitch.pf.conf configuration file (The file can be created on the user $HOME directory and have any name): int_en1 = \"[network interface name]\" vpn_utun1 = \"[interface used by the VPN]\" vpn_ip = \"[IP address of the VPN gateway]\" set block-policy drop set ruleset-optimization basic set skip on lo0 block all block out inet6 # dns pass quick proto {tcp, udp} from any to any port 53 keep state # Allow broadcasts on internal interface pass from any to 255.255.255.255 keep state pass from 255.255.255.255 to any keep state # Allow multicast pass proto udp from any to 224.0.0.0/4 keep state pass proto udp from 224.0.0.0/4 to any keep state # Allow ping pass on $int_en1 inet proto icmp all icmp-type 8 code 0 keep state # Allow dhcp pass on $int_en1 proto {tcp,udp} from any port 67:68 to any port 67:68 keep state # Use only the vpn pass on $int_en1 proto {tcp, udp} from any to $vpn_ip pass on $vpn_utun1 all Load the PF rules: $ sudo pfctl -Fa -f ~/killswitch.pf.conf -e To disable: $ sudo pfctl -d To load your system defaults (no kill switch): $ sudo pfctl -Fa -f /etc/pf.conf -e",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "916c7d6b922056a13594fe1cb80c5eaf",
    "u": "https://macos.tymyrddin.dev/docs/opsec/integrity-downloads",
    "t": "Check integrity of downloads ",
    "c": "Check integrity of downloads  When downloading an ISO image of, for example, the latest Linux distro, installing or upgrading packages, or downloading software, you can verify the files have downloaded correctly and securely by using checksums. Checksums ensure the integrity of data portions for data transmission or storage. Checksums is a simple error-detection scheme in which each transmitted message is accompanied by a numerical value based on the number of set bits in the message. The receiving station then applies the same formula to the message and checks to make sure the accompanying numerical value is the same. If not, the receiver can assume that the message has been garbled (or was altered). Verifying downloaded software  AMFI: checking file integrity on your Mac",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "71aea0e81c79127169fb3f47178da7ce",
    "u": "https://macos.tymyrddin.dev/docs/data/disk-encryption",
    "t": "Enable full disk encryption using FileVault ",
    "c": "Enable full disk encryption using FileVault  FileVault is a built-in utility on your Mac that encrypts all the data on your hard drive. When FileVault is enabled, the contents of your drive cannot be accessed without a login password or recovery key. FileVault is off by default, as most users may find that encrypting the entire drive is a bit overkill. Having to type a password to open a file and the time required to initially encrypt your entire drive may outweigh the security FileVault provides. For home use, in a non-threatening environment, maybe. As activist protecting land, animal and/or human rights, most likely not. Enable FileVault  Go to System Preferences -> Security & Privacy and click the FileVault tab. Click the lock at the bottom to be able to make changes and enter your administrator password. Click Turn On FileVault Choose how to unlock your disk and reset your password if you ever forget it: Use iCloud (easier, but less secure) Create a FileVault recovery key (store on paper and/or dedicated USB stick) Create a Vault  On a Mac, DMG files are usually associated with installing apps. DMG files can also be used as encrypted vaults to store sensitive files and folders. This feature is like using a program like VeraCrypt on Linux. Go to Disk Utility -> File -> New Image -> Blank Image and enter the information for the DMG file File name in Save As Where to save the file Size of Vault Format Encryption type Enter a password when asked to secure the DMG file. Once it is created, it is opened. It shows up in Finder and on the desktop as another drive. Move your private files and folders in it. To lock it, eject it from its desktop icon like any other external hard drive connected to your Mac. To open it, double-click on the file and enter your password.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3697818c2651fef9ead96f6486c818ee",
    "u": "https://macos.tymyrddin.dev/docs/services/restrict-apps",
    "t": "Restrict which apps can run ",
    "c": "Restrict which apps can run  The Gatekeeper allows you to choose from where apps can be installed. You can choose to only allow apps from the App Store to be installed or apps from the App Store and from identified developers. To choose one of these option, go to Apple -> System Preferences -> Security & Privacy -> General You can still install apps from anywhere, but you must specifically approve each app separately on the General tab on the Security & Privacy screen in the System Preferences.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "351cfd07039d20b28d587fce37414dc3",
    "u": "https://macos.tymyrddin.dev/docs/services/tor-proxy",
    "t": "Use a Tor proxy ",
    "c": "Use a Tor proxy  Tor proxy  Install: $ brew install tor Start it: $ tor Set network proxy settings via System Preferences  Go to System Preferences > Network From Location dropdown at the top, select Edit Locations Create a new location by hitting the plus button and name it Tor. Hitting Done will select the new location which is now ready to be configured. Go to Advanced > Proxies and activate SOCKS Proxy and add: SOCKS proxy server: localhost Port: 9050 Now you can switch to this location from your menu bar under Location whenever you start up Tor. Switching to the Tor location routes all network traffic on your system through Tor. You have to repeat these steps for every network interface, ethernet, Wi-Fi. Notes  If a government makes their own national internet, or routes traffic through specific servers to use deep packet inspection (DPI), running Tor may not provide security if the government is able to see the entire path. Sometimes the Tor network is censored, and clients can’t connect to it. An increasing number of censoring countries are using Deep Packet Inspection (DPI) to classify Internet traffic flows by protocol. While Tor uses bridge relays to get around a censor that blocks by IP address, the censor can use DPI to recognize and filter Tor traffic flows even when they connect to unexpected IP addresses. With pluggable transports, censorship against Tor can be bypassed. Not only that. If an attacker can see your traffic, and can see the website you’re visiting, even with a path outside the adversary’s control - they will still be able to correlate the traffic and learn you are visiting the website. If the same connection (the same set of relays) were to be used for a longer period of time a Tor connection could be vulnerable to statistical analysis, which is why the client software changes the entry node every ten minutes.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "41e93c2df0a437f82dc06adb857a0c79",
    "u": "https://macos.tymyrddin.dev/docs/malware/daemons-and-agents",
    "t": "Catch and remove daemons and launch agents ",
    "c": "Catch and remove daemons and launch agents  Automagically assisted  EtreCheck (free for the first five reports) Lingon X KnockKnock BlockBlock Manually  Open the Activity Monitor app, and choose View -> All Processes. At the top are two main processes: kernel_task and launchd , with process ID (PID) 0 and 1 respectively. launchd is the primary parent process when the system starts. It is also the last process to exit when the system shuts down. Do NOT remove it. The core responsibility of launchd is to launch other processes or jobs on a scheduled or on-demand basis. These processes come in two flavours: LaunchDaemons and LaunchAgents. LaunchDaemons typically run as root, and can be found in /System/Library/LaunchDaemons (native macOS processes) and /Library/LaunchDaemons (installed third-party apps). LaunchAgents start when a user logs in. They can access the user interface and display information, and can be found in Library/LaunchAgents (all user accounts), ~/Library/LaunchAgents (user account), and /System/Library/LaunchAgents (macOS only). Before logging in, launchd runs services and other components specified in .plist files from the LaunchDaemons folder. After logging in, launchd runs services and components defined in .plist files from the LaunchAgents folders. Those in /System/Library are all part of macOS and protected by System Integrity Protection. .plist files follow the standard reverse domain naming system: company name, followed by an application identifier, and ending with the property list file extension (.plist). For example, co.clario.Clario.plist . The public LaunchDaemon and LaunchAgent folders are open to both legitimate and illegitimate apps. You can monitor these folders with Folder Actions. Folder actions  Open the AppleScript Editor app. Click Preferences and choose General -> Show Script menu in menu bar Click the Script Menu icon and choose Folder Actions -> Enable Folder Actions Select Attach Script to Folder in that same menu A dialog box will pop up. Select add - new item alert Click OK to open a Finder window. Select the user LaunchDaemon folder and click Choose Repeat the procedure for every LaunchAgents folder. Then: Open Finder and click Go > Go to Folder Type ~/Library/LaunchAgents and click Go Right-click the LaunchAgents folder, and choose Services -> Folder Actions Setup to bind the new item alert script to each folder. In the dialog box that pops up, you’ll see the list of folders in the left column and script in the right column. If there are no scripts, click the plus (+) button and add new item alert.scpt. Now macOS will show an alert popup whenever a new item is added to one of these folders, allowing you to immediately know when illegitimate apps try to inject themselves into the system in the background. Remove items  Be careful. Not all third-party .plist files are malicious. They can be: Components of legitimate installed apps Remnants of old apps you no longer use Leftovers from previous macOS upgrades Migration Assistant leftovers PUPs (potentially unwanted programs), adware, and malware DO NOT delete any components of installed apps. To remove remnants of old apps, leftovers from previous macOS upgrades, PUP’s, adware and malware, just delete the .plist file and reboot. Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "95a445b888e0e5c47a2f407fbadacb54",
    "u": "https://macos.tymyrddin.dev/docs/malware/clean-machine",
    "t": "Scan and clean machine ",
    "c": "Scan and clean machine  Automagically  Choose your scanner carefully, have a look at AV Comparatives’ test results for macOS . Manually  Check activity monitor  Open Activity Monitor from Applications -> Utilities Go to the CPU tab Click the % CPU column to sort high to low, and look for high CPU use If you see a process that looks suspicious, do a DuckDuckGo search on it Check for unwanted applications  Go to the Applications folder Look for any apps you do not recognize or do not remember installing Check with DuckDuckGo whether they are legitimate or not If they are not, or if you are suspicious, delete them and empty your Trash Note that this does not help much with trojans , evil files made to look like legitimate apps. Look at login items  In System Preferences, select Users & Groups Go to the Login Items tab Look through the list, and select anything suspicious Click the minus button to remove it Note that LaunchDaemons and LaunchAgents will not appear in this list. Fail  If all else fails, go to a previous point in time or backup. If that fails too, the NVRAM or Time Machine or backups may even be infected. It is possible for malware to persist across a re-format and re-install, if it is sufficiently ingenious and sophisticated: if for example, it can persist in NVRAM, in the firmware for peripherals (some hardware devices have firmware that can be updated, and thus could be updated with malicious firmware), or with a virus infecting data files on removable storage or on your backups. Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "eb8e602fd39b3da8a0e81a60c0304298",
    "u": "https://macos.tymyrddin.dev/docs/malware/myths",
    "t": "Mac myths ",
    "c": "Mac myths  There are no viruses for Mac  On the contrary, that macOS has been less affected by viruses in the past has resulted in weaker defence mechanisms. And this myth is exactly what makes macOS attractive for virus creators and social engineers. Sleepy users and weakened defences. Apple quickly fixes vulnerabilities  Nope. In May 2019 Filippo Cavallarin discovered a vulnerability in the Gatekeeper, gave Apple 90 days to fix it, and having had no response, went public with it on his blog . Gatekeeper is the tool that prevents unauthorised apps from being installed on a Mac. And Filippo Cavallarin was not the first. Independent virus researchers who discover fresh security holes often get vague responses from Apple. And even when, the solution take a long time.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ee3a5cb39d38e3a2566126352ac35865",
    "u": "https://macos.tymyrddin.dev/docs/data/time-machine",
    "t": "Set up the time machine and backups in macOS ",
    "c": "Set up the time machine and backups in macOS  The Time Machine works by creating historic backups of your Mac. It keeps older copies of files even after you edit or delete them, until a time when you need more storage for newer backups. Thanks to these historic backups, you can travel back in time to restore your Mac’s data from days, weeks, or months ago. Requirements are a large speedy solid-state drive with two partitions: a partition for the Time Machine backup and the other partition to store files. Partitioning the drive  Connect the external hard drive to the Mac. Go to Applications -> Utilities and launch Disk Utility Select the external drive from the sidebar and click the Partition button. Use the Add (+) option to create a new partition and choose Name, Format, and Size for each partition by selecting it in the diagram. The Time Machine partition must use the Mac OS Extended (Journaled) format. The file storage partition can use any format. Choose ExFat if you plan to use it with Windows. Otherwise, choose Mac OS Extended (Journaled). Click Apply, followed by Partition. Set up time machine  Go to System Preferences -> Time Machine Click Select Disk and choose the Time Machine partition Time Machine backups will start from scratch from this date forward. After the first backup, you can automatically start a backup with Time Machine (check the Backup Up Automatically box), or start a backup manually by accessing the Time Machine menu and starting the backup from there. Backups for the file storage partition  Create separate backups for anything in your file storage partition. Acronis True Image Carbon Copy Cloner ChronoSync Get Backup Pro SuperDuper",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "935923c87edd8ad51a064d2488741922",
    "u": "https://macos.tymyrddin.dev/docs/malware/readme",
    "t": "Introduction ",
    "c": "Introduction  MacOS has built-in protection against malware . XProtect scans for malware using a database of virus signatures maintained by Apple, but is limited. Apple is not a dedicated security company, and it has not struggled much with malware in the past, leading to two major myths . Big Sur is available as a free upgrade, promising the most secure version of macOS. The biggest threats to a macOS come from potentially unwanted programs, adware, ransomware and other code that finds its way onto a Mac because it is bundled with legitimate-looking software or because it was downloaded as something else. Common signs of Mac malware: Extremely slow performance A browser homepage change Pop-ups and other intrusive ads Freeze-up and restarts Browser redirection Find these, or think you may have an infected system, or just wish to know more: Endpoint detection and response Malware analysis DIY: Scan and clean machine Catch and remove daemons and launch agents Analysing trojans",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b4dc7fc4686a1ed74eab1de1cb823eb7",
    "u": "https://macos.tymyrddin.dev/docs/privacy/metadata-images",
    "t": "Edit exif metadata in images ",
    "c": "Edit exif metadata in images  Native  Open Photos app on your Mac. With Photos tab selected in the left pane, rght click any thumbnail on the right and select Get Info. A window opens, showing the file name and format, camera data, and profile photos of people that Photos recognizes. Click in the window, and you can add or edit title, description, keywords and location. For more data: Open image in Finder. Click Tools > Show Inspector in the top toolbar. This opens a window containing four tabs. The first tab provides summary information, and clicking on the second tab reveals 5 more tabs: General, IPTC, EXIF, JFIF and TIFF. Click on these to see all the metadata information. ExifEdit  ExifEdit gives an intuitive way to edit EXIF & IPTC metadata for thousands of photos in a single click.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9125eebd7a5667fe9e789b23066ae9da",
    "u": "https://macos.tymyrddin.dev/docs/data/pwprotect",
    "t": "Password protect files and folders ",
    "c": "Password protect files and folders  You can protect all the files on your Mac by encrypting a Vault (or entire drive) with FileVault . If you consider FileVault a bit of an overkill for your purposes, you can password protect your files and folders in different ways. iWork suite documents  If you have Pages, Keynote, or Numbers files with sensitive information, you can password protect those files. Open the file you want to protect Go to File -> Set Password Enter a Password Verify the password If you want a hint to help you remember your password, enter a Password Hint Set Password PDF Files in Preview  Open the PDF file you want to protect (does not work for image files) Go to the File menu and then press the Option key. The Duplicate menu option becomes Save As. Select the Save As option. On the Save dialog box, check the Encrypt box towards the bottom. Enter a Password Verify the password Save To remove the password protection from a PDF file, open the file, enter the password, use the Option key to access the Save As option again and uncheck the Encrypt option on the Save dialog box. Save the file with a new name and delete the old password protected file. Microsoft Word files  Open the Word file you want to protect Click the Review tab, and then click Protect Document On the Password Protect dialog box, enter Password Optionally require a Password to modify the document Optionally add other Protection to the document Optionally Remove personal information from this file on save Save Microsoft PowerPoint and Excel files  Password protecting a Microsoft Excel workbook is similar to protecting a PowerPoint presentation, but the dialog box is different. Go to File -> Passwords Under Password to open, check the “Encrypt this presentation and require a password to open” box. On the Set a password for this presentation dialog box, enter New password Verify the password Click Set Password OK To remove the password from the presentation, open it, go to File -> Passwords, and uncheck the “Encrypt this presentation and require a password to open” box. Password protect folders  Disk Utility can erase, format, repair, and partition hard drives. It can also can create an encrypted disk image, or a single file that contains the entire contents of a drive or other media like external USB drives, CDs, or DVDs. Copy the files you want to protect into a folder Open Disk Utility Go to File -> New Image -> Image from Folder Select the folder you want to encrypt and click Choose. In box enter Enter a name for the disk image in the Save As box Where to store the DMG file Encryption type (128-bit or 256-bit AES) (Enter a Password and then Verify the password) Select read/write from the Image Format dropdown list Save A progress dialog box appears and a message saying that the operation was successful Click Done Use Eraser to securely delete the original files Disk Utility adds the disk image to your desktop. Double-click the disk image icon to access the files inside it. To access the files you added to the disk image, double-click on the DMG file and enter the password when prompted. Eject the disk image when you’re done using it, so the files are password protected again.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d1f266ac84b9294e67e8444cedc28d48",
    "u": "https://macos.tymyrddin.dev/docs/privacy/hexeditors",
    "t": "Remove metadata with hex editors ",
    "c": "Remove metadata with hex editors  The hexadecimal notation is almost universally used in computing - and not without a reason. There are sixteen hex digits - 0 to 9, and A to F (which correspond to decimal values 10 to 15), and each hex digit represents exactly four bits. Exactly two hex digits represent a byte, which can have a value from 00 to FF. A hex byte is the only kind of object a computer handles, and hex bytes are used to represent anything. For example, a hex byte 50 may represent the capital letter P, the processor command push eax, the decimal number 80, a colour component with 50% brightness, or whatever else lives in the digital world. And that means we have editors, hex editors, that can be used to view and change files, all files, on a very low level. As in, they can be used to remove metadata from any and all files. Usage in general  backup the file before using a hex editor on it. switch to ASCII mode, turn off “read only” mode, and start searching through the file. For example, when scrubbing pdf’s from creation and modification information look through the entire file for “created” (metadata appears in the PDF file more than once). If and when you find metadata, change to fake data or delete. Then repeat your search again for the terms “create”, “creation”, “modified”, and “modify”, and similarly either replace or delete the dates, once again being sure to repeat each search so that any potential multiple instances of the field can be located and modified or blanked out. Using software  iBored Online  Hexed.it HTML5/JS => will be cached on local machine and can then be used.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "04946ec5c5653825b875155e63b4d5ab",
    "u": "https://macos.tymyrddin.dev/docs/guards/soup",
    "t": "Alphabet soup ",
    "c": "Alphabet soup  Firewall  A firewall implements rules that prevent network traffic based on protocol, source/destination address, and/or source/destination port. Firewalls can implement access control lists and prevent the use of insecure protocols, such as blocking all traffic on TCP port 23 (Telnet’s default port). IDS  An IDS platform can analyse network traffic for patterns and recognize malicious attack patterns. It can create notifications, but it can not block the unwanted packets from entering the network. IDS can be deployed either at the host level or the network level. Host-based monitors (and protects) the specific host (for example a single PC) it is installed on. For example, a HIDS will look at log and config files for any unexpected rewrites. Network-based focuses on protecting an entire network. Usually, dedicated hardware appliances run such software. For example, a NIDS will look at the checksums in captured packets and message authentication integrity of systems such as SHA1. The fact that a NIDS is usually installed on a stand-alone piece of equipment means that it doesn’t drag down the processors of servers or PC’s. The activity of HIDS is not as aggressive as that of NIDS and can be implemented by a lightweight daemon on the computer which does not burn up too much CPU. Neither system generates extra network traffic. In addition to the two main types of IDS, there are also two main subsets of these IDS types: Signature-based Intrusion Detection System (SBIDS). An SBNIDS for example, tracks all the packets passing over the network and then compares them to a database containing attributes or signatures of familiar malicious threats. Anomaly-based Intrusion Detection System (ABIDS). An ABNIDS for example, tracks the traffic of a network and then compares it to an established measure (which could be machine learning based) and this allows the system to find what is normal for the network in terms of Ports, Protocols, Bandwidth, and other devices, and alerting administrators about any unusual or potentially malicious activity in the network. IPS  IPS combines the analysis functionality of an IDS with the ability to intervene and prevent the delivery of malicious packets. IPS interact with firewalls and software applications by adjusting settings. Incorrectly calibrated IPSs can cause havoc and bring your legitimate network activity to a halt.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "264ff24bc4555ff262d676a8c55b8035",
    "u": "https://macos.tymyrddin.dev/docs/authentication/login",
    "t": "Disable automatic login ",
    "c": "Disable automatic login  It is perhaps annoying to have to enter your password every boot, but it is a little price for preventing someone getting into your account and accessing your data. Go to Apple > System Preferences and click Users & Groups. Click Login Options at the bottom of the list of users on the left. Click the lock at the bottom of dialog box and enter your password when prompted. This allows you to make changes to the settings. Select Off from the Automatic login dropdown list. You will have to enter your password every time you boot your Mac.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "56817de221bf72b51eb450047c042b97",
    "u": "https://macos.tymyrddin.dev/docs/services/change-mac",
    "t": "Change MAC address ",
    "c": "Change MAC address  A MAC address identifies the device connected to a network and allows the network to track, restrict or allow access based on it. Routers identify and assign static IP addresses based on the MAC addresses of devices. Before you try to change the MAC address, you need to know the value that you want to use. Set the 2’s place bit (the “locally administered” bit) in the first byte, to differentiate it from a guaranteed globally unique MAC address. Usually the first three bytes an unicast MAC address is an “Organizationally Unique Identifier” (OUI) that the IEEE assigned to the manufacturer of your Ethernet device. Manufacturers are required to make sure they keep the last 3 bytes unique. Avoiding all of that knowledge, the MAC address generator tool can generate a valid address for you. If a specific MAC address, like 00:0a:95:9d:68:16 , is required: $ sudo ifconfig en0 00:0a:95:9d:68:16 To randomly generate new MAC address and assign it to en0 network interface: $ openssl rand –hex6 | sed ‘s/(..)/1:/g; s/.$//’ | xargs sudo ifconfig en0 ether When you restart your Mac computer, the Mac address reverts to the default.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "191d8fbbc3a5524527870bb70c214311",
    "u": "https://macos.tymyrddin.dev/docs/services/ssh",
    "t": "Use SSH tunnels ",
    "c": "Use SSH tunnels  Secure Shell (SSH) can be used to securely acquire and use a remote terminal session and has other uses as well. You can use SSH to tunnel traffic, transfer files, mount remote file systems, and more. SSH also uses strong encryption, and you can set your SSH client to act as a Socks proxy. Once you have, you can configure applications on your computer – such as your web browser – to use the Socks proxy. The traffic enters the Socks proxy running on your local system and the SSH client forwards it through the SSH connection – this is known as SSH tunneling. This works similar to browsing the web over a Virtual Private Network (VPN) . From a web server perspective, traffic appears to be coming from the SSH server. The traffic between source and the SSH server is encrypted, so you can browse over an encrypted connection as you could with a VPN. You must configure each application to use the SSH tunnel’s proxy. Port forwarding or port mapping is a name given to the combined technique of: Translating the address and/or port number of a packet to a new destination. Possibly accepting such packet(s) in a packet filter (firewall). Forwarding the packet according to the routing table. SSH tunnels can be created in several ways using different kinds of port forwarding mechanisms. And you can protect SSH access with MFA . Tunnelling with local port forwarding  Imagine wikileaks being blocked using a proxy filter in a university network somewhere. An SSH tunnel can be used to bypass this restriction. Let’s name the machine in the university network socially-correct and a home machine home . The home machine has a public IP and is running an SSH server. The student in case has ssh user access on home and socially-correct has access to host:hostport (is not blocked). $ ssh -L localport:host:hostport user@home -N where: -L : port forwarding parameters localport : local port (choose a port that is not in use by other service) host : server that has the port (hostport) that you want to forward hostport : remote port -N : do not execute a remote command (you will not have the shell). user : user that has ssh access to the ssh server home : the machine/server running the ssh server that will be used for forwarding/tunneling For example, to create the SSH tunnel execute following from the socially-correct machine: $ ssh -L 9001:wikileaks.org:80 user@home Open a browser and go to http://localhost:9001 to see if the tunnel is working. The SSH client at socially-correct will connect to the SSH server running at home (usually running at port 22) binding port 9001 of socially-correct to listen for local requests thus creating an SSH tunnel between home and socially-correct. At the home end it will create a connection to wikileaks.org at port 80. So socially-correct doesn’t need to know how to connect to wikileaks.org. Only home needs to worry about that. The channel between socially-correct and home will be encrypted while the connection between home and wikileaks.org will be unencrypted. The home-to-wikileaks.org connection is only made when the browser makes the request, not at tunnel setup time. The SSH man pages say: -L port:host:hostport specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side. This works by allocating a socket to listen to port on the local side, and whenever a connection is made to this port, the connection is forwarded over the secure channel, and a connection is made to host port hostport from the remote machine. Port forwardings can also be specified in the configuration file. Only root can forward privileged ports. IPv6 addresses can be specified with an alternative syntax: port/host/hostport -N Do not execute a remote command. This is useful for just forwarding ports (protocol version 2 only). Local port forwarding can also be used to set up a VNC session between socially-correct and a home server. From socially-correct : $ ssh -L 5900:localhost:5900 user@home The localhost is relative to the gateway (home in this case), not the machine from where the tunnel is initiated. So this will make a connection to port 5900 of the home computer where the VNC client would be listening. Reverse tunnelling with remote port forwarding  To be able to SSH from the Internet into a machine behind a firewall, you need the machine in question to open an SSH connection to the outside world and include a -R tunnel whose “entry” point is the “remote” side of his connection. What if we wish to connect to an internal university website from home with a set-up like above in tunnelling with local port forwarding? The university firewall is blocking all incoming traffic. We can connect from home to the university internal network so that we can browse the internal site. We can initiate the tunnel from the socially-correct computer behind the firewall. This is possible since only incoming traffic is blocked and outgoing traffic is allowed. The client will now be at the home computer and instead of using the -L option, the -R option, which specifies a reverse tunnel is to be created, is used. From socially-correct : $ ssh -R 9001:internalsite.org:80 user@home The SSH client at socially-correct will connect to the SSH server running at home creating an SSH channel. The server will bind port 9001 on the home machine to listen for incoming requests that are then routed through the created SSH channel between home and socially-correct . Now it’s possible to browse the internal site by visiting http://localhost:9001 in a web browser on the home machine. The socially-correct machine for work at the university will then create a connection to internalsite.org and relay back the response to home via the created SSH channel. Even though the traffic is encrypted, the name resolution may not be encrypted => DNS leakage. Programs like firefox allow you to ensure that there is no such DNS leakage . For example, in Firefox, browse to about:config and make sure the setting for network.proxy.socks_remote_dns is set to true. Dynamic port forwarding  Dynamic port forwarding allows for configuring one local port for tunnelling data to all remote destinations. This requires Socket Secure SOCKS. At the client side of the tunnel a Socks proxy would be created and the application uses the Socks protocol to specify where the traffic should be sent when it leaves the other end of the ssh tunnel. In a set-up like used in local port forwarding and reverse port forwarding, from the socially-correct machine at university: $ ssh -D 9001 user@home SSH will create a Socks proxy listening in for connections at local port 9001 and when receiving a request routes the traffic via the SSH channel created between socially-correct and home. Configure the browser to point to the Socks proxy at port 9001 at localhost .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8505ea5f3dd8c4575172a574e6efdd63",
    "u": "https://macos.tymyrddin.dev/docs/guards/readme",
    "t": "Introduction ",
    "c": "Introduction  There are many types of devices and mechanisms within the security environment to provide a layered approach of defense. This is so that if an attacker is able to bypass one layer, another layer stands in the way to protect the network. Two of the most popular and significant tools used to secure networks are firewalls and intrusion detection systems. Choosing a firewall for a Mac  With a firewall, you can: Log hosts scanning services that aren’t running. Limit the services that applications can connect to. Segregate the local network into trust segments (Local Area Network (LAN), DeMilitarised Zone (DMZ), and Internet). Redirect ports to the hosts providing the service (Network address translation (NAT)). macOS has an built-in firewall , it is disabled by default, enable it with: Go to System Preferences -> Security & Privacy Click on the Firewall tab At the bottom of the window, click on the lock icon to enter your administrator password for changing the settings. Click the option to Turn On Firewall To configure the options for the firewall, click Firewall Options The built-in firewall on your Mac only blocks inbound traffic. It does not allow you to control outbound connections. If you download a piece of malware, your Mac’s firewall won’t prevent it from connecting to the internet and sending out information. If you’d like to be more secure, install an additional firewall. Murus Lite is an entry-stage firewall front end. It has inbound filtering and recording and can be used to safeguard applications. Although it is free, Murus Lite isn’t attempting to test or demonstrate. Instead, it is a fully-featured application that is a good beginning point for a new user. Scudo is a hybrid firewall for Mac that works as a combination of an outbound application-layer firewall and an inbound network-layer packet filter. The software offers enhanced protection to Mac’s network services from all the unwanted connections. It improves your privacy against remote computers trying to access your data through the network. LuLu is a free, open source firewall that aims to block outgoing traffic unless it’s explicitly approved by the user. Once installed, it will alert you about new or unauthorized attempts to create an outgoing network connection. Click the Allow or Block button to handle the connection. Radio Silence is the simplest firewall app for your Mac. After installation, the app automatically runs in the background without any menu bar icon or other visual indicators. Navigate to the Firewall tab and click the Block Application button. Once you add an app to the blacklist, it will no longer connect over the internet. Little Snitch is a host-based application firewall for Mac. The app provides detailed reports on processes, outgoing and incoming connections, ports, and protocols. It also shows the complete traffic history down to a one-minute interval time range. The Network Monitor shows a global map of the active connections from your system to the IP-derived or probable locations around the world in real-time. The left panel displays a list of apps sending and receiving data, while the right panel gives you a detailed summary. Choosing a HIDS for a Mac  Most of the HIDS tools for macOS are File Integrity Agents (FIAs) and use Error Detection algorithms. A FIA monitors the integrity and state of the files and objects on a machine. It creates a hash of all files to be monitored. That snapshot is periodically checked against the current hash of the files. If it detects changes to those files, then it alerts the administrator that an unauthorised access or change has taken place. OSSEC monitors the checksum signatures of all the log files to detect possible interference and any attempts to get to the root account.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "026e6148133ca2c51c801237d6922582",
    "u": "https://macos.tymyrddin.dev/docs/services/edit-hosts-file",
    "t": "Edit hosts file ",
    "c": "Edit hosts file  The hosts file is a system file on a device that lets you map specific domain names to an IP address. If you want to add new entries to the hosts file, you’ll need the IP address of the server that you want to map a hostname to. XXX.XXX.XXX.XXX some.domain.name The hosts file lets you override DNS entries for any domain name. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. Blocking is achieved by setting the IP address of the ad networks to a loopback address like 127.0.0.1 which will not return anything. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. If your device is infected with malware, then your hosts file may be compromised to included unknown entries for known domain names. That is NOT the IP address of your bank! This type of DNS attack is known as DNS pharming, and checking your hosts file can uncover potential infection. Open the Terminal application. (Click on the Finder icon and then go to Applications → Utilities) In the terminal, give the command sudo nano /private/etc/hosts Enter your administrator password after running the command Add as many entries as needed",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8fb92a8398a13350fdf5ca5087352012",
    "u": "https://macos.tymyrddin.dev/docs/services/readme",
    "t": "Introduction ",
    "c": "Introduction  Restrict which apps can run System integration protection (SIP) Use a VPN service Secure browsers that protect your privacy Use a secure messaging service Use a secure email service Use SSH tunnels Use a VPN service Use a firewall as a VPN fail-safe mechanism Use alternative DNS servers Use a Tor proxy Change MAC address Renew IP lease Edit hosts file",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3aec654b08be2ba08ddd46e6416dbdcd",
    "u": "https://macos.tymyrddin.dev/docs/authentication/mfa",
    "t": "Use multi-factor authentication (MFA) ",
    "c": "Use multi-factor authentication (MFA)  Many sites and applications offer two-factor authentication (2FA), also named multi-factor authentication (MFA). With 2FA enabled, logging into a website or application requires both a password and a unique code that is texted to your phone number or delivered via an authenticator app. You have to input this code in order to gain access to your account. Even if someone else has your password, they will not be able to break into your accounts if they can not get the code. When you use one of the authenticator apps included here, you bolster the password you know with the token, smartphone, or smartwatch that you have. Setting up MFA usually involves scanning a QR code on the site with your phone’s authenticator app. Note that you can scan the code to more than one phone, if you want a backup. Authenticator apps generate time-based, one-time passcodes (TOTP or OTP), which are usually six digits that refresh every 30 seconds. Once you set up MFA, every time you want to log in to a site, you enter the code into the secured app or site’s login page, and you’re in. The time limit means that if an adversary manages to get your one-time passcode, it won’t work for them after that 30 seconds. Something to look for when choosing one of these apps is whether it backs up the account info (encrypted, of course) in case you no longer have the phone you set everything up on. These all do (Google Authenticator does not). Authy Duo Mobile LastPass Authenticator Microsoft Authenticator",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b22c25aa085e39b564cacb1e46425dcc",
    "u": "https://macos.tymyrddin.dev/docs/guards/ossec",
    "t": "OSSEC ",
    "c": "OSSEC  OSSEC stands for Open Source HIDS Security. It is entirely free to use. As a host-based intrusion detection system, the program focuses on the log files on the computer where you install it. It monitors the checksum signatures of all the log files to detect possible interference. On Unix-like systems, it will monitor any attempts to get to the root account. Although OSSEC is an open-source project, it is owned by Trend Micro, a security software producer. How to Install OSSEC Agent on Mac OS",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "84e943d7a99cb64f77800159aa7e5cca",
    "u": "https://macos.tymyrddin.dev/docs/services/browsers",
    "t": "Secure browsers that protect your privacy ",
    "c": "Secure browsers that protect your privacy  DuckDuckGo Desktop browser for MacOS focuses on privacy that is not based on Chromium (as most would expect). Instead it relies on OS-provided rendering engines to build the browser (mostly WebKit). This makes it possible to remove all the unnecessary stuff usually available with popular web browsers. Brave is fast, secure, and privacy-focused by default. It has a built-in ad blocker and browser fingerprinting protection, while also giving you access to numerous add-ons and extensions. Ungoogled Chromium browser is an open source project to provide a Chromium browser, without the Google privacy issues. LibreWolf is a fork of Firefox focused on privacy, security, and freedom, only available for desktop operating systems. If the browser you choose is less secure and privacy-friendly, lock down the browser and the software it can invoke.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ac0e690853950ff13fe2577496ce6488",
    "u": "https://macos.tymyrddin.dev/docs/services/sip",
    "t": "System integration protection (SIP) ",
    "c": "System integration protection (SIP)  Apple introduced System Integration Protection (SIP), designed to protect the most vulnerable parts of the Mac: SIP protects a few core areas of the drive where the operating system is installed, including /System , /bin , /sbin , /usr (but not /usr/local ). Some symbolic links from /etc , /tmp , and /var are also protected, though the target directories themselves are not. The safety measure prevents processes without sufficient privileges (including admin users with root access) from writing to these folders and the files stored within. The technology also prevents other “risky” operations too, like code injection. Apple is concerned that changes made to these parts of your system could put your Mac at risk and cause damage to the OS. Locking out root admin access safeguards your Mac against sudo-level commands executed remotely and locally. If you want to use software that depends on modifications which change the way many core OS elements and first party apps function, you’re going to have to disable SIP first, and reenable it afterwards. I wouldn’t though. Why trust software that wants me to turn off such an important protection, even if only temporarily.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e3d9220499bac7f2870e063de76d9aa4",
    "u": "https://macos.tymyrddin.dev/docs/services/renew-lease",
    "t": "Renew IP lease ",
    "c": "Renew IP lease  A DHCP client can on occasion send information in DHCP requests: hostname, MAC address, operating system, and DHCP version. All operating systems provide their most recent IP address to the DHCP server. If you change your MAC address to minimise risk, best to also renew the IP leases on the router. Go to Apple menu -> System Preferences -> Network. In the list on the left, select the network service that needs a renewed IP address. Click Advanced, click TCP/IP, then click Renew DHCP Lease.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "44d9cc66de5b135d578ea386075a6c2c",
    "u": "https://macos.tymyrddin.dev/docs/opsec/browsing",
    "t": "Browse more safely ",
    "c": "Browse more safely  Keyloggers and other malware can be installed via a web page script which exploits a browser vulnerability. The program will automatically be launched when a user visits an infected site. Compromising a browser is relatively easy, and it is cross-platform, hence an often chosen target. Plus that browsers (for performance reasons) prefetch exposing users to more security risks by downloading more pages, or from un-requested sites (additionally compounded as drive-by downloads become more advanced and diverse). BeEF & other browser exploits, when not using browser vulnerabilities, rely on javascript. Choose a secure browser that protects your privacy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "afa28284e8ed2bc82e8177cde0dbe56c",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/youtoo",
    "t": "No device can ever be called secure ",
    "c": "No device can ever be called secure  The Linux ecosystem was considered more secure by many, which possibly explains why Google, NASA, and the US DoD use it for their online infrastructures and systems. Wishful thinking. Likewise the misconception that Apple devices are immune to hacking and malware infection. Linux is on the list of the most used operating systems, for workstations, servers, mobiles (android is linux based), and IoT devices. Linux powers the Internet with 74.2% of all web servers running on it. Hence, an attractive target for cybercriminals . Any ransomware tool development must be lucrative for the threat actor, which used to be far less likely in the case of locking a mobile device, as compared with locking all the Windows systems in an organisation. The bring-your-own-device (BYOD) trend has been growing for many years though. With Android the most common operating system for mobile devices, ransomwares targeting Android are on the rise. Publicly known ransomware threats to iOS seem still less prevalent. *nix  Linux is on the list of the most used operating systems, for workstations, servers, mobiles (android is linux based), and IoT devices. Linux powers the Internet with 74.2% of all web servers running on it. Hence, a profitable target. RansomEXX (or Defrat777) is one of the most common recent ransomware attacks against Linux. It was used against high-end targets in 2020 and 2021. It does not use C&C communication and targets was hard-coded. Tycoon is one of the most common Linux ransomwares. In late 2019 it was used in attacks against education organisations and companies in the software industry. Its payload is in a ZIP archive with a malicious Java Runtime Environment (JRE) component, hidden in a Java image file. Both Linux and Windows are vulnerable to Tycoon attacks. Erebus was originally Windows-based, and repurposed to target Linux servers. QNAPCrypt focuses on infecting network-attached storage (NAS) Linux devices. KillDisk also started on Windows and was later adapted for Linux environments. macOS  LockBit operators created encryptors to target Mac devices for the first time. Supposedly the first-ever ransomware campaign focusing on macOS in particular. ThiefQuest (also known as EvilQuest) became a threat in June 2020, having been discovered by researcher Dinesh Devadoss. The program was found hiding in pirated versions of the Little Snitch app, which could be found on a Russian torrent platform. Inventive attackers have used the “Geacon” Cobalt Strike tool attack for data theft, privilege elevation, and remote device control. MacStealer malware stole sensitive data from Apple users. Documents, iCloud keychain data, browser cookies, credit card credentials, etc. CloudMensis spreads through email attachments and can steal sensitive information and grant unauthorised access to users’ systems. JockerSpy can infiltrate a system through fake websites or bundled with seemingly harmless software . Once installed, it can monitor users’ activities, capture keystrokes, and access personal data. Apparently porting is well underway too  Some malware can infect Linux and Windows systems. StripedFly for example, is capable of a lot more than just mining cryptocurrency: it can execute commands remotely, grab screenshots and execute shellcodes, steal passwords and other sensitive data, record sounds using the integrated microphone, move to near endpoints using previously stolen credentials, abuse the EternalBlue exploit to worm into other systems, and mine Monero. Monero mining is now seen as a distraction, to prevent researchers from analysing the code further. This malware has infected over 1 million Windows and Linux computers around the globe since 2016, according to Kaspersky . Resources  URLhaus Database Linux virus Windows global threat activity",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "affefe36a816e67746385218fe9688c0",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/c2",
    "t": "Red team takeover ",
    "c": "Red team takeover  Penetration testing tools such as Cobalt Strike and Brute Ratel are developed for red teaming and adversarial attack simulations like cracking passwords, launching spear phishing attacks, remotely controlling and monitoring attacks with a command and control (C&C) framework, and creating reports on the effectiveness of these simulated attacks. Some are even designed to avoid detection by antivirus solutions and endpoint detection and response (EDR) . And are now used by adversaries for real attacks. Resources  When Pentest Tools Go Brutal: Red-Teaming Tool Being Abused by Malicious Actors",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e367b918eac928237b1aeb966ba41af5",
    "u": "https://pap.tymyrddin.dev/docs/mitre/supply-chain",
    "t": "Supply chain compromise ",
    "c": "Supply chain compromise  App squatting and fake apps are listed by MITRE as Mobile Technique ID T1474 : Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise can take place at any stage of the supply chain. Detection involves application vetting of API calls, network communication, permissions requests, and protected configuration. Static analysis notes  Static analysis can be done with various tools to decompile the binary, such as jadx , radare2 , rizin , and jeb . Tools such as droidlysis for automatic offline static analysis can also be used. A high level description of the process can be found here , and is applied in Android malware analysis (Pithus and jadx) as example.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d7ed31ea7e6afd501bd65eb80656d89a",
    "u": "https://pap.tymyrddin.dev/docs/mobile/ransomware",
    "t": "Ransomware ",
    "c": "Ransomware  Mobile ransomware sneaks onto your device using social engineering tactics that trick you into downloading malicious content, such as fake apps from third party app stores, app squatting , infected system or software updates, phishing , or smishing . Traditional ransomware encrypts the files on a device, and some, but not all, Android ransomware variants do encrypt. WannaLocker uses AES encryption to encrypt files. Different types of living of the land techniques” techniques can be used to deny a victim access to the device: Abusing functionalities (MalLocker). Hijacking permissions (Strandhogg attack). Resetting device PIN (DoubleLocker and CovidLock). Both iPhone and Android users have easy access to cheap, cloud-based backup tools (Apple iCloud and Google One), which makes it easy to wipe and restore devices, in the event of a ransomware attack, with minimal loss of data. Resources  CovidLock: Mobile Coronavirus Tracking App Coughs Up Ransomware , 2020 Sophisticated Android Ransomware Executes with the Home Button , 2020 WannaLocker - The WannaCry Copycat Targeting Android Users in China , 2017",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3f7c5e155879c3b134ce2799161a45f3",
    "u": "https://pap.tymyrddin.dev/docs/independent/mfa",
    "t": "MFA bypass attacks ",
    "c": "MFA bypass attacks  Attackers use various methods to MFA bypass attacks, including social engineering, phishing, and exploiting vulnerabilities in the authentication process. MFA fatigue  After having obtained stolen username and password credentials from a black market, attackers can attempt repeated logins to the targeted user accounts, who then are bombarded with login verification requests. Through sheer frustration or by accident, users eventually click on the link or confirmation request. That action then gives the threat actor a way in. MitM  “In the olden days”, adversaries only needed to get username and password combinations, so they made a fake authentication webpage and attempt to trick users into entering their credentials. With MFA everywhere, adversaries need username and password combination and the digital token or one-time password used as the second form of authentication. A new tactic is to use MitM instead, and insert themselves between the user and the legitimate login page. Users will receive a request to access their MFA provider, through phishing , smishing , vishing or OTP bots , that entices users to click on a link, which then directs them through a malicious proxy server to the legitimate login page. The adversaries capture the credentials on the proxy server and then modify the session cookie to gain access. And variations on that scenario. Token stealing  Making life easier for users, “session cookies” are stored on endpoint devices, so users don’t have to re-authenticate during sessions. These can be stolen and placed within the session of the adversary, making the browser believe the actual trusted user is being authenticated. Future  MFA was invented to protect authentication. Do we need another layer to protect MFA? There are discussions about mechanisms going beyond something one knows (password) and/or something one possesses (phone, fob) and/or even what one is (fingerprint, retinal print). Maybe we’ll be using who one is, in the form of episodic memory because who are we but the stories we tell (ourselves), or in the form of our thoughts, because “I think therefor I am” … ? Do we really want who we are externalised on the web, our memories, our imagination, up for grabs?",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a7ef2748ffdba4d590973ae5df35199a",
    "u": "https://pap.tymyrddin.dev/docs/mobile/otp-bots",
    "t": "OTP bots ",
    "c": "OTP bots  Most websites now offer and use multifactor authentication to protect user accounts; with OTP bots, that protection is rendered useless. Using an OTP bot enables an attacker to intercept, redirect, or even spoof authentication codes or tokens. Using social engineering to trick people into giving their authentication codes is a time-intensive process. But OTP bots, with the right contact information for the victim (bough on Telegram or Darkweb for example), can do this automatically. They can intercept large numbers of OTPs and increase the number of victims and profit for the adversary. OTP bots use the normal process of getting a one-time password for authentication online by tricking the victim into thinking they’re from the company in question, such as a bank. The adversary gives the victim’s information to the OTP bot. The OTP bot contacts the victim and asks for the account OTP. This can be by smishing or by robocall for example, asking for authorisation of a charge, or whether a given code is correct, and if not, please give us the correct code. The victim provides or enters the OTP. The bot distracts the victim while the adversary accesses the account instead. The adversary then steals money or card information from the victim’s account. Prevention  Companies and organisations can use powerful bot management systems that can identify malicious bots and stop their requests before they get to a website, app, or API. Resources  Threat Spotlight: Illicit Telegram Markets & OTP Bots , 2022 Bots for Stealing One-Time Passwords Simplify Fraud Schemes , 2022 How secure are one-time passwords from attacks? , 2022 OTP Bot Setup for MFA Bypass Affecting P2P Services , 2022",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9b8f60d52b770e1931cd9b9476f62856",
    "u": "https://linux.tymyrddin.dev/",
    "t": "Hardening GNU/Linux ",
    "c": "Hardening GNU/Linux  “Linux” is really GNU software operating with a Linux kernel, and GNU software there are many resulting in an incredible amount of distributions , all called “Linux”. Some even build on each other, such as Debian -> Ubuntu. It is impossible to cover them all. Version 0.1: These mitigations are kept as simple as possible, with tools found in most distros. Some things are harder to cover. For example, each distro has its own privacy settings somewhere, and there are even distro’s that have specialised in privacy. Accounts and authentication Introduction Disable and enable user accounts Make that secure passwords Use a password manager Password protect sleep and screen saver mode Use multi-factor authentication (MFA) Protect SSH access with MFA Design principles and sudo killers Services and applications Introduction Service management Application armour (AppArmor) Restrict access to at and cron Disable startup applications Choose a secure browser that protects your privacy Use a secure messaging service Use secure email services Use SSH tunnels Use a VPN service Use a firewall as a VPN fail-safe mechanism Use alternative DNS servers Use a Tor proxy Anonymise SSH sessions with Tor Change MAC address Renew IP lease Edit hosts file Data Introduction Use removable storage media Archiving and compressing Shift back and forth in time from past to present Disk encryption File encryption Shredding files and deleting data Privacy Introduction Turning devices on and off Remove metadata from files Edit exif metadata in images Removing metadata with hex editors Scrub machine with BleachBit Use Metadata Anonymisation Toolkit 2 (MAT2) Distros specialised in privacy Malware Introduction Malware detection and removal Analysing trojans Operations security Introduction Use email securely Detecting fake emails and phishing Browse more safely Check integrity of downloads ‘;–have i been pwned? Guards! Guards! Introduction Alphabet soup Netfilter and iptables NFTables Gufw and ufw Linux intrusion detection systems Aide OSSEC Tripwire",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cc7b74744d42069b8c3f5815b2916775",
    "u": "https://linux.tymyrddin.dev/docs/authentication/password-manager",
    "t": "Use a password manager ",
    "c": "Use a password manager  The majority of people use very weak passwords and reuse them on different websites. How are you supposed to use strong, unique passwords on all the websites you use? The solution is a password manager. Password managers store your login information for all the websites you use and help you log into them automatically. They encrypt your password database with a master password — the master password is the only one you have to remember. Managers  Dashlane 1Password Bitwarden It does not protect from keyloggers  Most password manager work by copy-pasting data quickly from your manager to the field (on the website) or by simulating keystrokes for all the data on file. A keylogger captures keystrokes and would capture all passwords entered by a password manager that simulated keystrokes. Nearly all keyloggers even include the capability to take screenshots at particular intervals of time and save all the contents of the clipboard to a file. The last bit is important, because it sort of renders even password managers that use the clipboard to fill in these forms useless. The real solution to preventing these attacks is to monitor your system for any keyloggers and use an AV solution .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "726c4f5d9d7b12a6280bdd6d3ff706cb",
    "u": "https://linux.tymyrddin.dev/docs/opsec/integrity-downloads",
    "t": "Check integrity of downloads ",
    "c": "Check integrity of downloads  When downloading an ISO image of, for example, the latest Linux distro, installing or upgrading packages, or downloading software, you can verify the files have downloaded correctly and securely by using checksums. Checksums ensure the integrity of data portions for data transmission or storage. Checksums is a simple error-detection scheme in which each transmitted message is accompanied by a numerical value based on the number of set bits in the message. The receiving station then applies the same formula to the message and checks to make sure the accompanying numerical value is the same. If not, the receiver can assume that the message has been garbled (or was altered). Verifying downloaded software  When downloading software ( .iso s and .deb s and the like), also download the xxxsum (choose from what is available) and check the integrity (it is the intended file, and nothing has changed underway). For example do: $ sha256sum some-file.iso and compare the output from the command with the key listed in the associated sha256 file. Troubleshooting unauthenticated packages  Integrity checks are integrated in linux package managers. Never ever continue with installation if you get a: WARNING: The following packages cannot be authenticated! It may be that your system is set to use a proxy server for a network you are not connected to. Set your Network Proxy method to None and Apply System Wide, and check if that helped. Check repositories are not corrupted in /etc/apt/sources.list . If so, repair with correct repositories and try again. Check GPG keys (apt-key) # apt-key list Update the local keyring with the keyring of archive keys and remove from the keyring the archive keys which are no longer valid: # apt-key update # apt-get update If still not works, reinstall the archive-keyring. # aptitude reinstall [distro]-archive-keyring For example: Kali Keyring – kali-archive-keyring Debian Keyring – debian-archive-keyring Ubuntu Keyring – ubuntu-archive-keyring Still not works? Hit the forums.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9b3102d7342f60e2f8521f02272a2cc4",
    "u": "https://linux.tymyrddin.dev/docs/services/restrict-access",
    "t": "Restrict access to at and cron ",
    "c": "Restrict access to at and cron  If malware is anything at all, it’s persistent. On Linux, just like Windows, malware once loaded wants to stay loaded. On Windows systems this is usually done with a variety of registry mechanisms. For Linux it’s often done using the crontab scheduling facility. Cron allows users to submit jobs for the system to do at a later time, possibly a recurring time. It can be very useful, but also has a potential for abuse by either users or adversaries to call back home at regular times. Users can be blocked from administrative access to the crontab command for scheduling and modifying cron jobs. The two configuration files that control user access to the cron daemon are cron.allow and cron.deny these two configuration files are located within the /etc directory and are similar to the at.deny and at.allow configuration files. The cron.allow file is used to allow users to schedule jobs using the cron daemon, if the username does not exist in the cron.allow configuration file the user will be denied access. The cron.deny configuration file houses the username of users that are not allowed to schedule jobs, both configuration files have the same syntax as the at.deny and at.allow configuration files. Each username should be specified on an individual line. Check the cron and at jobs!",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "776b7486379d95bbc86322423ea4781a",
    "u": "https://linux.tymyrddin.dev/docs/data/file-encryption",
    "t": "File encryption ",
    "c": "File encryption  Filesystem level encryption, often called file/folder encryption or stacked level encryption, is a form of disk encryption where individual files or directories are encrypted by the file system itself. This is in contrast to full disk or block level device encryption where an entire partition or disk, in which the file system resides, is encrypted. EncFS  EncFS provides an encrypted filesystem in user-space. It runs without any special permissions and uses the FUSE library and Linux kernel module to provide the filesystem interface. EncFS is open source software, licensed under the GPL. eCryptfs  eCryptfs stores cryptographic meta data in the header of each file written, so that encrypted files can be copied between hosts; the file will be decrypted with the proper key in the Linux kernel keyring. The eCryptfs kernel module is available in all Linux kernels since 2006. The eCryptfs user space utilities ( ecryptfs-utils ) are available in all major Linux distributions. VeraCrypt  VeraCrypt is a fork of the discontinued TrueCrypt project. It is a free and open-source utility for on-the-fly encryption (OTFE). The software can create a virtual encrypted disk that works just like a regular disk but within a file. It can also encrypt a partition or (in Windows) the entire storage device with pre-boot authentication.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "602b7b6f520d197a1d535cc1dc5a4fb9",
    "u": "https://linux.tymyrddin.dev/docs/data/removable-media",
    "t": "Use removable storage media ",
    "c": "Use removable storage media  A simple but straightforward security method is to keep all sensitive information on removable storage media like portable flash memory drives or external hard drives that you only mount the device when you need access to the data on it. You can turn old harddrives into external harddrives by taking them out of an old PC and putting them in a portable HDD USB storage kit (alias harddrive enclosure). These “DIY” kits are available for 2.5 inch and 3.5 inch HDD using either IDE or SATA connections and cost way less than a manufactured USB HDD.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d8ad565fc45dc229d4ab908240682b02",
    "u": "https://linux.tymyrddin.dev/docs/services/readme",
    "t": "Introduction ",
    "c": "Introduction  All linux distros let you control the services that run on your Linux installation, and you can make full use of this customisation feature to enhance security. Service management Application armour (AppArmor) Restrict access to at and cron Disble applications via startup applications Secure browsers that protect your privacy Use a secure messaging service Use a secure email service Use SSH tunnels Use a VPN service Use a firewall as a VPN fail-safe mechanism Use alternative DNS servers Use a Tor proxy Anonymise SSH sessions with Tor Change MAC address Renew IP lease Edit hosts file",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "db853fb0fe2a6a47bc90d94034965ab3",
    "u": "https://linux.tymyrddin.dev/docs/privacy/metadata",
    "t": "Remove metadata from files ",
    "c": "Remove metadata from files  Metadata is data about data. Metadata answers who, what, when, where, why, and how about every facet of the data that is being documented. Photos, and images in general, contain metadata. For photos this includes how large the picture is, colour depth, resolution, the date and time when it was created, the GPS coordinates of the location they were taken at, camera shutter setting details, and possibly even the name of the program used to edit them. Document metadata is information about one or more aspects of a document, spreadsheet, pdf file, that is not always visible to the person creating them, but can be found by the person who receives them next. Comments, track changes, hidden text, mark-ups, properties, attachments and bookmarks are all examples of document metadata. Office documents like pdf or Office automatically add author and organisation information to documents and spreadsheets. Web pages often include metadata in the form of meta tags. Description and keywords meta tags are commonly used to describe the Web page’s content. Most search engines use this data when adding pages to their search index. This type of metadata can be useful, but maybe you do not want to disclose this information on the web, because metadata can be used for other purposes as well: Metadata is collected by corporations for psychological manipulation in persuasion and advertising. Metadata also plays a number of important roles in computer forensics: It can provide corroborating information about the document data itself. It can reveal information that someone tried to hide, delete, or obscure. It can be used to automatically correlate documents from different sources. Metadata is used by hackers doing reconnaissance for an attack And last but not least, it can be used to correlate data in dragnet and targeted surveillance. Techniques for metadata removal  Metadata removal software like Metadata Anonymisation Toolkit 2 (MAT2) Bleachbit Using a hex editor Edit exif metadata in images",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7ed0a37ab4ed0fefc32013783d505bdb",
    "u": "https://linux.tymyrddin.dev/docs/privacy/metadata-images",
    "t": "Edit exif metadata in images ",
    "c": "Edit exif metadata in images  ExifTool  ExifTool is a perl program that can be used to read and edit exif metadata in images. It is available for Windows, MacOS and *nix systems. $ exiftool imagename.jpg To remove, for example GPS data (not found in the above image file, but if you have it in yours) - replace image.jpg with your image file: $ exiftool -gps:all= -xmp:geotag= image.jpg imagemagick  The mogrify command of imagemagick can be used to strip Exif data from images. For the same file as above and then checked with exiftool again: $ mogrify -strip imagename.jpg $ exiftool imagename.jpg For removing Exif data from all jpg images in a directory and all of its sub-directories recursively: $ find ./path/directory -type f -iname '*.jpg' | xargs mogrify -strip exiv2  The exiv2 tool also has a command for deleting all Exif data from an image: $ exiv2 rm imagename.jpg For removing Exif data from all jpg images in the current directory: $ exiv2 rm *.jpg For removing Exif data from all jpg images in a directory and all of its subdirectories recursively: $ find ./path/directory -type f -iname '*.jpg' | xargs exiv2 rm",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b030b5b307aa4f58201dd61bbcaf08b5",
    "u": "https://linux.tymyrddin.dev/docs/authentication/passwords",
    "t": "Make that secure passwords ",
    "c": "Make that secure passwords  Do not use a password you have used in the past. Try to change the password at least every 3-6 months. Create a password that is at least six characters long. Create a password with both digits and letters, uppercase, and lowercase. Do not create a password with a family name, name of your pet, hobby, sports teams, favourite TV show, etc. Do not create a password that is your phone number, house number, etc. Create a password that is not in a dictionary. Create passwords with spaces and/or magics (&*^%$#) in them (if allowed). Have a password manager create a password for you.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "365d779d4eb04fbd075dd024957ee600",
    "u": "https://linux.tymyrddin.dev/docs/privacy/hexeditors",
    "t": "Removing metadata with hex editors ",
    "c": "Removing metadata with hex editors  The hexadecimal notation is almost universally used in computing - and not without a reason. There are sixteen hex digits - 0 to 9, and A to F (which correspond to decimal values 10 to 15), and each hex digit represents exactly four bits. Exactly two hex digits represent a byte, which can have a value from 00 to FF. A hex byte is the only kind of object a computer handles, and hex bytes are used to represent anything. For example, a hex byte 50 may represent the capital letter P, the processor command push eax, the decimal number 80, a colour component with 50% brightness, or whatever else lives in the digital world. And that means we have editors, hex editors, that can be used to view and change files, all files, on a very low level. As in, they can be used to remove metadata from any and all files. Usage in general  backup the file before using a hex editor on it. switch to ASCII mode, turn off “read only” mode, and start searching through the file. For example, when scrubbing pdf’s from creation and modification information look through the entire file for “created” (metadata appears in the PDF file more than once). If and when you find metadata, change to fake data or delete. Then repeat your search again for the terms “create”, “creation”, “modified”, and “modify”, and similarly either replace or delete the dates, once again being sure to repeat each search so that any potential multiple instances of the field can be located and modified or blanked out. Native  You can use vi as a hex editor. It isn’t a real “hex mode”. What happens is that vi ’s buffer is streamed through the external program xxd, but it works well for some cases of scrubbing. Open a file in vi as usual, hit escape and to switch into hex mode type: :%!xxd And when done, to exit from hex mode, hit escape again and type: :%!xxd -r Using software  bless is a binary (hex) editor for the GNOME Desktop. wxhexeditor is a hexadecimal file editor suitable for editing very big files. Supported file size is up to 2**64 bytes. dhex provides a console based hex edit screen with menus like Goto, Search, and HexCal",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d62709cb4761791a715df846d5ebe14b",
    "u": "https://linux.tymyrddin.dev/docs/guards/netfilter-and-iptables",
    "t": "Netfilter and iptables ",
    "c": "Netfilter and iptables  Installing persistence  iptables is installed by default. For rules to be persistent (automatically loaded) so they work after reboot, install iptables-persistent : $ sudo apt-get install iptables-persistent [sudo] password for user: Reading package lists... Done Building dependency tree Reading state information... Done The following extra packages will be installed: netfilter-persistent The following NEW packages will be installed: iptables-persistent netfilter-persistent 0 upgraded, 2 newly installed, 0 to remove and 0 not upgraded. Need to get 18.9 kB of archives. After this operation, 147 kB of additional disk space will be used. Rules  Status command  To list rules -L showing interface name, rule options, TOS masks, packet and byte counters -n, and IP address and port in numeric format without using DNS to resolve names -v: # iptables -L -n -v With line numbers (important for deleting or inserting new rules into the firewall): # iptables -n -L -v --line-numbers To display INPUT or OUTPUT chain rules: # iptables -L INPUT -n -v # iptables -L OUTPUT -n -v --line-numbers Deleting a rule  To delete line number 4 using -D to delete one or more rules from the selected chain: # iptables -D INPUT 4 Inserting a rule  # iptables -L INPUT -n --line-numbers Chain INPUT (policy DROP) num target prot opt source destination 1 DROP all -- xxx.xxx.xxx.1 0.0.0.0/0 2 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state NEW,ESTABLISHED Inserting a rule between 1 and 2: # iptables -I INPUT 2 -s xxx.xxx.xxx.2 -j DROP Gives: # iptables -L INPUT -n --line-numbers Chain INPUT (policy DROP) num target prot opt source destination 1 DROP all -- xxx.xxx.xxx.1 0.0.0.0/0 2 DROP all -- xxx.xxx.xxx.2 0.0.0.0/0 3 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state NEW,ESTABLISHED Saving the rules  For saving the rules so they can be loaded at every reboot (you need to have iptables-persistent installed) # iptables-save > /etc/iptables/rules.v4 # ip6tables-save > /etc/iptables/rules.v6 Stop/Restart  Some distros like CentOS have installed a service called iptables to start and stop the firewall and a configuration file to configure it. For all other distros, iptables is a command, not a service. Configuring iptables  To set it to deny everything except the bare minimum requirements that you need on your system(s) and only accept connections that have been explicitly allowed in the rules. Localhost: $ sudo iptables -A INPUT -i lo -j ACCEPT Accept data related to outbound connections your system has initiated (this includes apt mirrors): $ sudo iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT You can set up tables for rules for traffic you wish to accept on your system from external connections: # iptables -N accept_traffic # iptables -A INPUT -j accept_traffic You then can use it, for example on a server where you run SSH, with (change port to port you set): # iptables -A accept_traffic -p tcp --dport 22 -j ACCEPT The two most common cracks posted on the Ubuntu forums are ssh and vnc, both running with password authentication. This probably is true for all debian-based distro’s. You are recommended to secure ssh by using keys (and disabling password authentication) and either configuring iptables or using a service such as denyhosts or fail2ban. To reject all traffic for which there are no rules set (the first way sends a Host Unreachable ICMP packet then terminates the connection, the second way simply ignores): # iptables -A INPUT -j REJECT --reject-with icmp-host-unreachable or: # iptables -A INPUT -j DROP Configuring ip6tables  To set it to deny everything except the bare minimum requirements that you need on your system(s) and only accept connections that have been explicitly allowed in the rules: Localhost: $ sudo ip6tables -A INPUT -i lo -j ACCEPT Accepting data related to outbound connections your system has initiated: $ sudo ip6tables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT Setting up a table: # ip6tables -N accept_traffic # ip6tables -A INPUT -j accept_traffic Rejecting all traffic for which there are no rules set: # ip6tables -A INPUT -j REJECT --reject-with icmp6-addr-unreachable or # ip6tables -A INPUT -j DROP Usage examples  ICMP  For accepting “Time Exceeded” (necessary for time-restricted connection setups): $ sudo iptables -A INPUT -p icmp -m icmp --icmp-type 11 -j ACCEPT For accepting “Destination Unreachable”: $ sudo iptables -A INPUT -p icmp -m icmp --icmp-type 3/4 -j ACCEPT For accepting PING requests/responses (“Echo” ICMP, for keep-alive requests): $ sudo iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT For IPv6 there are a kazillion ICMP requests so if you are not blocking IPv6, it is recommended to not block ICMP packets: $ sudo ip6tables -A INPUT -p icmpv6 -j ACCEPT",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f19a9609556ebf975b80a54e73ede659",
    "u": "https://linux.tymyrddin.dev/docs/services/vpn-fail-open",
    "t": "Use a firewall as a VPN fail-safe mechanism ",
    "c": "Use a firewall as a VPN fail-safe mechanism  If you simply add a VPN using common instructions, it generally “fails open”. That means, if the VPN breaks down, because the connection is interrupted, traffic will be sent without the VPN. It is much safer when it “fails closed”, meaning that when the VPN connection breaks down, the whole internet connection must be down as long as the VPN connection is not restored. If your chosen VPN does not include being able to set a kill switch, you can use your firewall as a fail-safe mechanism: Get the IP address of the VPN gateway that the kill switch is intended for using the host command. Get the network interface name connected to your default gateway and the subnet of the local network using the route command. Modify the .ovpn configuration file. Change the tun device to -dev tun0 in the client configuration file. Then change the hostnames to IP addresses for the -remote option in the same configuration file. Kill switch using ufw  Make a shell script (killswitch-ufw.sh): ufw --force reset ufw default deny incoming ufw default deny outgoing ufw allow in on tun0 ufw allow out on tun0 ufw allow in on [network interface name] from 192.168.0.0/24 ufw allow out on [network interface name] to 192.168.0.0/24 ufw allow out on [network interface name] to [IP address of the VPN gateway] port 1194 proto udp ufw allow in on [network interface name] from [IP address of the VPN gateway] port 1194 proto udp ufw enable Make it executable: $ chmod +x killswitch-ufw.sh Execute: $ ./killswitch-ufw.sh Kill switch using iptables  Make a shell script (killswitch-iptables.sh): iptables --flush iptables --delete-chain iptables -t nat --flush iptables -t nat --delete-chain iptables -P OUTPUT DROP iptables -A INPUT -j ACCEPT -i lo iptables -A OUTPUT -j ACCEPT -o lo iptables -A INPUT --src 192.168.0.0/24 -j ACCEPT -i [network interface name] iptables -A OUTPUT -d 192.168.0.0/24 -j ACCEPT -o [network interface name] iptables -A OUTPUT -j ACCEPT -d [IP address of the VPN gateway] -o wlp6s0 -p udp -m udp --dport 1194 iptables -A INPUT -j ACCEPT -s [IP address of the VPN gateway] -i wlp6s0 -p udp -m udp --sport 1194 iptables -A INPUT -j ACCEPT -i tun0 iptables -A OUTPUT -j ACCEPT -o tun0 Make it executable: $ chmod +x killswitch-iptables.sh Execute: $ ./killswitch-iptables.sh",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "18d0f807783a993bcce4045af291f9fa",
    "u": "https://linux.tymyrddin.dev/docs/services/edit-hosts-file",
    "t": "Edit hosts file ",
    "c": "Edit hosts file  The hosts file is a system file on a device that lets you map specific domain names to an IP address. If you want to add new entries to the hosts file, you’ll need the IP address of the server that you want to map a hostname to. XXX.XXX.XXX.XXX some.domain.name The hosts file lets you override DNS entries for any domain name. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. Blocking is achieved by setting the IP address of the ad networks to a loopback address like 127.0.0.1 which will not return anything. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. If your device is infected with malware, then your hosts file may be compromised to included unknown entries for known domain names. That is NOT the IP address of your bank! This type of DNS attack is known as DNS pharming, and checking your hosts file can uncover potential infection. Open terminal application In the terminal, give the command sudo nano /etc/hosts Enter your administrator password after running the command Add as many entries as needed",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "dab58b9843b2700e76f1b27de5f7b3e1",
    "u": "https://linux.tymyrddin.dev/docs/guards/nftables",
    "t": "NFTables ",
    "c": "NFTables  The successor of iptables. So let me try. Still at it and //Warning: Not been tested yet//. Basic idea  flush ruleset table inet filter { set tcp_accept { type inet_service; flags interval; elements = { http, https, ssh, } } set udp_accept { type inet_service; flags interval; elements = { openvpn, } } chain base_checks { # allow established/related connections ct state {established, related} accept # early drop of invalid connections ct state invalid drop } chain input { type filter hook input priority 0; policy drop; # Accept on localhost iifname lo accept jump base_checks # Accept ICMPv6 meta l4proto ipv6-icmp icmpv6 type { destination-unreachable, packet-too-big, \\ time-exceeded, parameter-problem, mld-listener-query, mld-listener-report, \\ mld-listener-reduction, nd-router-solicit, nd-router-advert, nd-neighbor-solicit, \\ nd-neighbor-advert, ind-neighbor-solicit, ind-neighbor-advert, mld2-listener-report \\ } accept # Accept ICMP meta l4proto icmp icmp type { destination-unreachable, router-solicitation, \\ router-advertisement, time-exceeded, parameter-problem } accept # Accept mDNS udp dport mdns ip6 daddr ff02::fb accept udp dport mdns ip daddr 224.0.0.251 accept # Accept UPnP IGD port mapping reply udp sport 1900 udp dport >= 1024 ip6 saddr { fd00::/8, fe80::/10 } meta \\ pkttype unicast limit rate 4/second burst 20 packets accept udp sport 1900 udp dport >= 1024 ip saddr { 10.0.0.0/8, 172.16.0.0/12, \\ 192.168.0.0/16, 169.254.0.0/16 } meta pkttype unicast limit rate 4/second \\ burst 20 packets accept # Allow ports tcp dport @tcp_accept accept udp dport @udp_accept accept } # Not a gateway. We do not forward. chain forward { type filter hook forward priority 0; policy drop; jump base_checks } # Chain to accept all outgoing packets chain output { type filter hook output priority 0; policy accept; } }",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "665111039df3b8f523148d3e8c28cfd2",
    "u": "https://linux.tymyrddin.dev/docs/malware/clean-machine",
    "t": "Malware detection and removal ",
    "c": "Malware detection and removal  Automagically  ClamAV  Install with: $ sudo apt-get install clamav clamav-daemon Check it has been installed: $ clamscan --version To update the signatures, first stop the clamav-freshclam service: $ sudo systemctl stop clamav-freshclam The actual update: $ sudo freshclam Restart the clamav-freshclam service: $ sudo systemctl start clamav-freshclam Make a first run with --infected : prints only infected files --remove : removes infected files --recursive : all the subdirectories in the directory will be scanned $ clamscan --infected --remove --recursive [absolute/path/to/directory/to/start/scan] For example, scan your whole system by running the following command: $ sudo clamscan --infected --recursive --remove / ClamTK  ClamTK is a Graphical User Interface for ClamAV software program. $ sudo apt-get install clamtk Start it with $ clamtk Unable to read preferences! No such file or directory note: (re)creating prefs file. Beautiful. Add your preferences. And keep the signatures updated. Manually  Basic checks  Check /etc/passwd for new accounts. Especially new accounts you don’t recognise with a UID less than 500 are very suspicious. If a new account with a UID of 0 is in the list, definitely check it out. Also look for orphaned files, indicators of an account that has been deleted (may take a while): $ sudo find / -nouser -print Take a look at your processes with ps -aux , htop or pstree for unusual processes. Boot the machine from a known safe live-CD image and scan for suspicious files with a rootkit scanner. Check crontab, it may be that the keylogger is relaunched regularly when it is shut off or if the system reboots. Look at the email streams. When programs start sending email by using another IP than your email server (if you have one), it might be something fishy. It can of course also be legitimate. Also consider that a keylogger might just log in to your email server with valid credentials and email from there. Check for keylogger  A trick to try if a keylogger is present: Type a random unique string on your keyboard in the live running machine. Reboot the machine from a known LiveCD or LiveUsb and grep for that string. Find out where the string is stored, and you may have the temp file of the keylogger. Check the folder it is in, and check the folders upward in the tree. Remove  There’s no general recipe. The detection steps above, at best give clues for (further research into) what to remove where. Try DuckDuckGo to access the wisdoms on the internet. If your system has been infected by an unknown trojan , reinstall. To make this experience an enjoyable event if and when it happens, reinstall from the regular backups made on an external disk. If a VM was infected, revert to an earlier snapshot that you think was clean or import an earlier exported .ova of it. This will probably not help if the host was reached, of course. Fail  It is possible for malware to persist across a re-format and re-install, if it is sufficiently ingenious and sophisticated: if for example, it can persist in the BIOS, in the firmware for peripherals (some hardware devices have firmware that can be updated, and thus could be updated with malicious firmware), or with a virus infecting data files on removable storage or on your backups. However, most malware doesn’t do anything quite this nasty. Therefore, while there are no guarantees, re-formatting and re-installing should get rid of almost all malware you’re likely to encounter in the wild. Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a3a5026ec5a67f688460ca27b89f2bfb",
    "u": "https://linux.tymyrddin.dev/docs/data/timeshift",
    "t": "Shift back and forth in time from past to present ",
    "c": "Shift back and forth in time from past to present  Assume data loss is inevitable. It’s not a matter of if, it is a matter of when. You best protect your data with a solid backup strategy. Make an rsync Timeshift backup of your entire system, or synchronise files with a remote system using rsync . Rsync ( r emote sync ) (GPL v3) is an open source utility for fast incremental file transfer. It is a file-copying tool which can copy locally and to/from a remote host. It offers many options to control its behaviour, and its remote-update protocol can minimize network traffic to make transferring updates between machines fast and efficient. It is widely used for backups and mirroring and as an improved copy command for everyday use. The package provides both the rsync command line tool and optional daemon functionality. If you make a backup of a system for the first time to be able to restore a system from (the whole point of it), test it with an actual restore. Having done so helps keep calm when the bleep hits the fan. Rsync  Installing rsync  Installing it from the repository: $ sudo apt-get install rsync General usage  The general command is of the form: $ rsync [options] [source] [destination] Backup to external disk rsync uses an algorithm that minimises the amount of data copied by only moving the portions of files that have changed. It operates in a way similar to ssh, scp, and cp, for example: $ rsync -a [directoryname]/ /media/[path/to/external/disk]/[directoryname] The a option is a combination flag. It stands for “archive” and syncs recursively (includes all subdirectories and subdirectories of subdirectories) and preserves symbolic links, [[en:linux:files|special and device files]], modification times, group, owner, and permissions. There are a lot of different switches that you can use for rsync to personalize it to your specific needs, for example: -a means recursive (recurse into directories), links (copy symlinks as symlinks), perms (preserve permissions), times (preserve modification times), group (preserve group), owner (preserve owner), preserve device files, and preserve special files. -v means verbose and shows you what rsync is backing up. -z enables compression -h for human-readable, output numbers in a human-readable format -delete tells rsync to delete any files that are in the second directory that aren’t in the first directory. Synchronize files from local to remote  While doing synchronization with a remote server, you need to specify username and ip-address of the remote server. You should also specify the destination directory on the remote server. The format is username@machinename:path . $ rsync -avz tymyrddin/ [username protected]@192.168.100.10:/home/tymyrddin/ password: sending incremental file list ./ modsecurity-2.9.2.tar.gz [snip] sent 4993369 bytes received 91 bytes 2432411.23 bytes/sec total size is 4991313 speedup is 2.87 Copy a remote directory to a local machine  In this example, a directory /home/tymyrddin/pkgs on a remote server is being copied in a local computer in /tmp/mypkgs . # rsync -avzh [username protected]:/home/tymyrddin/pkgs /tmp/mypkgs password: receiving incremental file list created directory /tmp/mypkgs pkgs/ pkgs/lighttpd_1.4.45.orig.tar.xz [snip] sent 91 bytes received 4.99M bytes 322.16K bytes/sec total size is 4.99M speedup is 1.00 Rsync over ssh  rsync allows you to specify the remote shell which you want to use. You can use rsync ssh to enable the secured remote connection. To specify a protocol with rsync you need to give -e option with protocol name you want to use. Use rsync -e ssh to specify which remote shell to use. Example: # rsync -avzhe ssh [username protected]:/root/install.log /tmp/ password: receiving incremental file list install.log sent 30 bytes received 8.12K bytes 1.48K bytes/sec total size is 30.74K speedup is 3.77 Do not overwrite modified files at the destination  In a typical sync situation, if a file is modified at the destination, we might not want to overwrite the file with the old file from the source. Use the -u option. Timeshift  Timeshift is free and open source software (source code can be found on GitHub) released under the LGPL-3.0 and GPL-3 licenses. The application is available in the official repositories of the major Linux distributions. To install on Debian/Ubuntu: sudo apt install timeshift Timeshift can be launched from the desktop environment application menu, or from the command line. The first time the application runs, choose what kind of backend to use, rsync or btrfs. Btrsf-based snapshots are byte-for-byte copies of the original filesystem, and are created and restored in no time by using the native snapshot feature of the btrsf filesystem. They cannot be saved on external disks or devices. If the main disk fails, so does the snapshot. Rsync-based snapshots are based on the use of hard links, implementing an incremental strategy. The first backup is a full backup; subsequent backups will include only changed files. Snapshots created by rsync can be copied on external devices formatted with a Linux filesystem. Choose weekly, daily, hourly, on boot, and how many snapshots should be kept. Snapshots can also be created on demand. Choose whether and which users home directories should be included in the snapshots and what kind of files should be included (hidden ones or all). The snapshot will be kept inside the /timeshift directory on the selected filesystem. To explore the files included in the snapshot, select it in the list and click on the Browse button. A file manager window will be opened displaying the included files. In the same way, delete a snapshot by clicking on the Delete button and restore a snapshot by clicking on Restore. If no changes to system partitions were made, nothing needs to be modified.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "efd32427f27866ce992dc73a78198203",
    "u": "https://linux.tymyrddin.dev/docs/data/disk-encryption",
    "t": "Disk encryption ",
    "c": "Disk encryption  Cryptsetup is a utility used to setup disk encryption based the on dm-crypt kernel module. LUKS (Linux Unified Key Setup) is the standard for Linux hard disk encryption, facilitating compatibility among distributions, and providing secure management of multiple user passwords. Installing cryptsetup  As root (on debian and its derivatives): # apt-get install cryptsetup Find drive  # fdisk -l Example: It has found /dev/sdb1 , my external drive. Wipe drive  If it is a new drive there was no previous sensitive data on it. If it is a disk that contained an encrypted volume, previous sensitive data is encrypted and sensitive data is not directly readable. In both cases you can continue with creating an encrypted volume If you previously had unencrypted sensitive data on the drive, you need to do something to obscure that data. Deleting it is not enough. Drives can be wiped with dd which overwrites it with zeros (quick) or random data (more secure, but it takes a whole night for example for a 120G drive). You can overwrite a partition, or overwrite the entire drive (you will have to repartition the drive afterward). To overwrite an entire drive, leave off the partition number of the device name (that you found with fdisk) in one of the following dd commands (use output file of=/dev/sd* instead of /dev/sd*1 ). # dd if=/dev/zero of=/dev/sdb1 or # dd if=/dev/urandom of=/dev/sdb1 Create encrypted volume  # cryptsetup luksFormat /dev/sdb1 Enter a passphrase when asked. Open the encrypted volume: # cryptsetup luksOpen /dev/sdb1 <name> Where <name> is a temporary name you pick (no special characters or spaces). Closing the volume removes the name. Creating filesystem For creating an ext4 filesystem: # mke2fs -t ext4 /dev/mapper/<name> Use ext2 for a small drive. Mount drive  If your partition has no label, it will be mounted in /media/UUID , where UUID refers to the UUID of the partition. For mounting linux drives: # mount /dev/mapper/<name> /mnt /mnt can be any mount point you choose. Own it  # chown -R [user] /mnt Where [user] is your user name. Unmount drive  Unmount drive and close the encrypted volume: # umount /mnt # cryptsetup luksClose <name> Using drive ",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5a5f62d2f07da280b41a3e7c9a043fc7",
    "u": "https://linux.tymyrddin.dev/docs/malware/readme",
    "t": "Introduction ",
    "c": "Introduction  Every computer connected to the internet is participating in that network and has the ability to receive malicious files. It costs nothing, literally, to run antivirus on Linux, so it is a mystery to me why some people feel that not using Linux antivirus is worth the risk. There is ample evidence of Linux malware in existence. Indicators of compromise: Machine is running slower than usual Machine is consuming more power than necessary Strange behaviour, such as installing programs without your consent, even after rebooting it. Find these, or think you may have an infected system, or just wish to know more: Endpoint detection and response Malware analysis DIY: Malware detection and removal Analysing trojans",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9ea768448c1e461c77bba22059360f0b",
    "u": "https://linux.tymyrddin.dev/docs/authentication/accounts",
    "t": "Disable and enable user accounts ",
    "c": "Disable and enable user accounts  Shadow file modification  The easiest way to disable a user account is to modify the /etc/shadow file, which holds encrypted passwords for users listed in /etc/passwd . An example user entry found in the /etc/shadow file: tester:$6dKR$Yku3LWgJmomsynpcle9BCA:15711:0:99999:7::: To disable this account add * or ! in front of the encrypted password: tester:!$6dKR$Yku3LWgJmomsynpcle9BCA:15711:0:99999:7::: This can also be achieved by: # usermod -L tester Any login method, which uses the /etc/shadow file to authenticate a user, will no longer be able to decrypt the user’s password and will not allow him/her to login: $ su tester Password: su: Authentication failure To enable the user account simply remove the added magic from the /etc/shadow file or use the usermod command: # usermod -U tester This method of disabling user accounts in the Linux system is only valid for programs or commands, which use the /etc/shadow file to authenticate users. If a user has already exchanged ssh keys he/she will still be able to log in despite such modifications. nologin User Shell  A more secure way of disabling a user account is to replace the existing user login shell with a pseudo shell such as /usr/sbin/nologin . nologin will display a message: This account is currently not available. To do this, modify the /etc/password file and change the user’s entry from: tester:x:1001:1001:Tester,User,,:/home/tester:/bin/bash to: tester:x:1001:1001:Tester,User,,:/home/tester:/usr/sbin/nologin User tester will no longer be able to log in with a valid password: $ su tester Password: This account is currently not available.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "caf1d4970051809ecc74d381e29ae065",
    "u": "https://linux.tymyrddin.dev/docs/services/renew-lease",
    "t": "Renew IP lease ",
    "c": "Renew IP lease  A DHCP client can on occasion send information in DHCP requests: hostname, MAC address, operating system, and DHCP version. All operating systems provide their most recent IP address to the DHCP server. If you change your MAC address to minimise risk, best to also renew the IP leases on the router. There are several ways to renew the IP lease, by using command line tools such as nmcli or dhclient , or by restarting network services. Restarting network service (Debian-based): $ sudo /etc/init.d/networking restart On the command-line with dhclient (The -r flag explicitly releases the current lease, and once released, the client exits): $ sudo dhclient -r Now a fresh IP can be obtained: $ sudo dhclient On the command-line with nmcli : $ nmcli con From the list that appears, get the NAME of the connection you wish to request a new lease for, then bring down and up: $ nmcli con down id 'NAME' $ nmcli con up id 'NAME'",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b728b3c77f1b31fdd48e4ceb6f47bee2",
    "u": "https://linux.tymyrddin.dev/docs/services/browsers",
    "t": "Choose a secure browser that protects your privacy ",
    "c": "Choose a secure browser that protects your privacy  Falkon uses QtWebEngine as its rendering engine, which is open-source. Falkon is primarily developed and maintained by the KDE community. QtWebEngine does use upstream code from the Chromium project, but removes binaries and Google-related services. Mullvad browser is the Tor browser without the Tor Network and instead of using the Tor Network, is designed to be used with a trustworthy virtual private network (VPN). Similar to the Tor browser, the Mullvad browser provides solid tracking and fingerprinting protection. Mullvad browser removes all telemetry and enables private browsing by default. uBlock Origin comes pre-installed as the default ad/tracker blocker. Vivaldi has no idea who you are or what sites you visit. Brave is fast, secure, and privacy-focused by default. It has a built-in ad blocker and browser fingerprinting protection, while also giving you access to numerous add-ons and extensions. Ungoogled Chromium browser is an open source project to provide a Chromium browser, without the Google privacy issues. LibreWolf is a fork of Firefox focused on privacy, security, and freedom, only available for desktop operating systems. Tor browser enables you to use Tor without needing to install the Tor proxy . If the browser you choose is not secure and privacy-friendly, lock down the browser and the software it can invoke.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "631cdb8b3879c02a11b0570db5b03d7a",
    "u": "https://linux.tymyrddin.dev/docs/services/ssh-tor",
    "t": "Anonymise SSH sessions with Tor ",
    "c": "Anonymise SSH sessions with Tor  In some countries, proving that you connected to a particular server is enough to be prosecuted, but SSH doesn’t provide a native way to obfuscate to whom it connects. For that, SSH with Tor proxy can be used. Configuration SSH  Install connect-proxy: $ apt-get install -y connect-proxy Set up OpenSSH to use Tor for a specific connection  Create or open ~/.ssh/config $ vi ~/.ssh/config Append the below entry (replacing mydomain.com with actual server domain name or IP and user with actual user): Host jumphost HostName mydomain.com User user CheckHostIP no Compression yes Protocol 2 ProxyCommand connect -4 -S localhost:9050 $(tor-resolve %h localhost:9050) %p Set up OpenSSH to use Tor for a bunch of connections  Host anonymous_* CheckHostIP no Compression yes Protocol 2 ProxyCommand connect -4 -S localhost:9050 $(tor-resolve %h localhost:9050) %p Host anonymous_mydomain HostName mydomain.com User user Host anonymous_mydomain2 HostName mydomain2.com User user Port 980",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2a220c77ca8e52980da9f9b3fdda642a",
    "u": "https://linux.tymyrddin.dev/docs/services/apparmor",
    "t": "Application armour (AppArmor) ",
    "c": "Application armour (AppArmor)  Application Armor (AppArmor) is a kernel-level Mandatory Access Control (MAC) feature that restricts applications from accessing classes of computer resources. For example, AppArmor can allow a word processor to read and write files to the local hard drive, but deny it to access the internet to send messages. A common way to spread malware is to wrap it (or hide it) in some completely different type of file. An application like AppArmor can be configured to disallow these files any write or internet capabilities. Any malware in the file would not be able to copy itself or “call home” as a newly recruited botnet member. AppArmor likely does not need much tuning for a standard desktop system as its default settings are good enough to fend off most malware attempts.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1d190076d1f26e7ba79bcedbf4ecb0c4",
    "u": "https://linux.tymyrddin.dev/docs/guards/readme",
    "t": "Introduction ",
    "c": "Introduction  There are many types of devices and mechanisms within the security environment to provide a layered approach of defense. This is so that if an attacker is able to bypass one layer, another layer stands in the way to protect the network. Two of the most popular and significant tools used to secure networks are firewalls and intrusion detection systems. Choosing a firewall for a GNU/Linux  With a firewall, you can: Log hosts scanning services that aren’t running. Limit the services that applications can connect to. Segregate the local network into trust segments (Local Area Network (LAN), DeMilitarised Zone (DMZ), and Internet). Redirect ports to the hosts providing the service (Network address translation (NAT)). If you need one for a personal PC at home, probably only the first two features are of interest. These are also the two that are most likely to cause issues for a beginning user. Linux firewall code includes the netfilter architecture, which was introduced in stable kernel 2.4. For configuring netfilter through its own command line interface ( iptables ), one has to specify the behaviour of all IP packets that make up a connection both inward and outward. It requires extensive knowledge of TCP/IP protocols, but many tools have been developed to automate the configuration of netfilter and iptables. So you have lots of choice . nftables is the successor of iptables, and allows for much more flexible, scalable and performance packet classification. Recommended for beginners is ufw and gufw because of its simplicity and ease of use. Gufw (GNU GPL v3) is for users bamboozled by firewalls. It has an easy-to-use interface for setting up inbound and outbound traffic rules for apps/services and ports. It is designed for beginners. Gufw is a GUI front-end to ufw , which is in itself a front-end to netfilter and iptables . Choosing a HIDS for a GNU/Linux  Most of the HIDS tools for Linux are File Integrity Agents (FIAs) and use Error Detection algorithms. A FIA monitors the integrity and state of the files and objects on a machine. It creates a hash of all files to be monitored. That snapshot is periodically checked against the current hash of the files. If it detects changes to those files, then it alerts the administrator that an unauthorised access or change has taken place. Aide is such a FIA, entirely open source and licensed via the GPL and easy in its configuration. For a Home PC, Aide will do. Tripwire OSSEC monitors the checksum signatures of all the log files to detect possible interference and any attempts to get to the root account.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "17acffe6798d51cf56eb051c4e252cba",
    "u": "https://linux.tymyrddin.dev/docs/guards/gufw-and-ufw",
    "t": "Gufw and ufw ",
    "c": "Gufw and ufw  Installation  Linux distributions come with a firewall installed (IPtables are built into the Linux kernel), but it is disabled because it would block some basic functionality for users on the local network. Specifically, it would block Samba and Avahi (zeroconf); limiting interoperability with other computers (like file and printer sharing) and disabling automatic discovery of network services. It is better to turn it on. Especially on mobile devices like laptops, which sometimes connect to other networks than your own. it’ll be in your menu items (the icon in mint is a brick wall). You can install ufw (command-line) or gufw , a GUI frontend to ufw , and that will also install ufw : Enabling  The firewall is called ufw ( u ncomplicated f ire w all), and can be operated from the terminal (//Menu > Accessories > Terminal//): $ sudo ufw enable Type your password when prompted for it; this will remain entirely invisible, not even asterisks will be shown. Ufw has a sensible set of default settings (profile), which are fine for the vast majority of home users. So unless you have special wishes: you’re done! Checking status  You can check the status of the firewall with this command: $ sudo ufw status verbose Status: active Logging: on (low) Default: deny (incoming), allow (outgoing), disabled (routed) New profiles: skip Usage examples  ICMP  By default, UFW allows ping requests. You may find you wish to leave (icmp) ping requests enabled to diagnose networking problems. To disable ping (ICMP) requests, edit /etc/ufw/before.rules and remove the following lines: # ok icmp codes -A ufw-before-input -p icmp --icmp-type destination-unreachable -j ACCEPT -A ufw-before-input -p icmp --icmp-type source-quench -j ACCEPT -A ufw-before-input -p icmp --icmp-type time-exceeded -j ACCEPT -A ufw-before-input -p icmp --icmp-type parameter-problem -j ACCEPT -A ufw-before-input -p icmp --icmp-type echo-request -j ACCEPT or change the “ACCEPT” to “DROP”: # ok icmp codes -A ufw-before-input -p icmp --icmp-type destination-unreachable -j DROP -A ufw-before-input -p icmp --icmp-type source-quench -j DROP -A ufw-before-input -p icmp --icmp-type time-exceeded -j DROP -A ufw-before-input -p icmp --icmp-type parameter-problem -j DROP -A ufw-before-input -p icmp --icmp-type echo-request -j DROP SSH  $ sudo ufw allow ssh $ sudo ufw enable $ sudo ufw status",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d56bfce2552a1e5bfdcae1490b64dd16",
    "u": "https://linux.tymyrddin.dev/docs/data/archive-compress",
    "t": "Archiving and compressing ",
    "c": "Archiving and compressing  Linux offers separate tools for gathering groups of files into a single archive and compressing that archive for efficient storage. Oh yuk, “efficient”, oh well. It’s about using less disk space and reducing transfer times over networks. And comes at a price. It can increase your CPU usage. tar  You can combine archiving and compressing together by using additional options to the tar ( t ape ar chiver) command. Tar can behave differently on different distros. The manual page contains descriptions of the myriad of features that come with tar . The basic operations of tar : Create a backup archive: c Extract files from an archive: x Compare differences between archives: d Update files in an archive: u Append files: r or A Delete files from an existing archive: d List contents of an archive: t When creating a tar archive, you can add options that compress the resulting archive. With j the archive will be compressed in bzip2 format, and with z in gzip format. For example, tar with bzip2 compression: $ tar xjvf funnybusiness.tar.bz2 *.txt You can also use other compression mechanisms like lzop with tar. It is faster, but the compression is less than with bzip2 which is around 10 times slower while only giving twice the amount of compression. You can also set the compression level in the compression commands themselves. gzip  gzip compresses the size of the given files using Lempel-Ziv coding (LZ77). Whenever possible, each file is replaced by one with the extension .gz. Compress a file: $ gzip funnybusiness.txt Compress all images with a .jpg extension in a directory: $ gzip *.jpg Compress all files in a directory: $ gzip -rv [directory] Test integrity of a gzip compressed file: $ gzip -tv funnybusiness.gz To uncompress a compressed file: $ gunzip -v funnybusiness.gz Fastest compression time, least compression: $ gzip -1 funnybusiness.gz Slowest compression time, most compression: $ gzip -9 funnybusiness.gz bzip2  bzip2 compresses files using the Burrows-Wheeler block sorting text compression algorithm and Huffman coding. Compression is generally considerably better than that achieved by bzip command (LZ77/LZ78-based compressors). Whenever possible, each file is replaced by one with the extension .bz2 . $ bzip2 [filename] Uncompress: $ bunzip [filename].bz2 lzop  lzop uses the LZO data compression library for compression services, and its main advantages over gzip are much higher compression and decompression speed (at the cost of some compression ratio). lzop is copyrighted under the terms of the GNU General Public License (GPL). You will probably have to install it first: $ sudo apt-get install lzop Compress: $ lzop [filename] Unlike gzip and bzip2 , lzop has no separate command for unlzopping. NO UNLZOPPING! Use the d option: $ lzop -dv [filename].lzo",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9a8c19caf75c01821ab8195db5d95c40",
    "u": "https://linux.tymyrddin.dev/docs/services/startup-applications",
    "t": "Disable startup applications ",
    "c": "Disable startup applications  For example, do you really need Samba for sharing files over the network, or the Bluetooth service to connect to Bluetooth devices on a computer that doesn’t have a Bluetooth adapter? Gnome  Go to Show applications -> Startup Applications Remove check marks next to the services you wish to disable at startup. Mate  In MATE, you can configure your startup applications in the main control centre, using the “Startup Applications” applet.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "15a3fa57c73121cd7d11daa366921163",
    "u": "https://linux.tymyrddin.dev/docs/authentication/sudo-killers",
    "t": "Design principles and sudo killers ",
    "c": "Design principles and sudo killers  GNU/Linux was built as a multi-user operating system from the start with two important principles: The Least Privilege principle states that any entity, user or otherwise, should only be granted the minimum amount of privileges required to do its job and no more. The second, equally important principle, is Isolation. This is implemented in user separation. The activities of one user should not be allowed to affect other users, and data belonging to one user should not be accessible to another user unless specifically allowed. Most GNU/Linux distributions create a non-privileged user account for daily use, but one can use sudo or download an and install an app to do things as administrator in desktop applications. With the users’ password! While the sudo system does not give unbridled root permissions, if an attacker has a limited shell that has access to certain programs using the command sudo he/she might be able to abuse sudo to escalate privileges. The sudo killer tool helps to identify misconfiguration within sudo rules, vulnerability within the version of sudo being used (CVEs and vulns) and the uses of dangerous binary, all of these could be abuse to elevate privilege to root . The tool will provide a list of commands or local exploits which could be exploited to elevate privilege. It does not perform any exploitation on your behalf, the exploitation will need to be performed manually and this is intended. Both red and blue team can use it to their benefit. Installation  Preferably on a kali machine. To pull from docker: service docker start docker pull th3xace/sudo_killer_demo docker run –rm -it th3xace/sudo_killer_demo To build locally using the Dockerfile: service docker start git clone https://github.com/TH3xACE/SUDO_KILLER.git cd SUDO_KILLER docker build -t th3xace/sudo_killer_demo . docker run –rm -it th3xace/sudo_killer_demo Download: https://github.com/TH3xACE/SUDO_KILLER Command usage  ./sudo_killer.sh -c -r report.txt -e /tmp/ Arguments: k : Keywords e : export location (export /etc/sudoers) c : include CVE checks with respect to sudo version s : supply user password for sudo checks (not recommended ++except for CTF) r : report name (save the output) h : help If you need to input a password to run sudo -l then the script will not work if you don’t provide a password with the argument -s . sudo_killer does not exploit automatically by itself, it was designed to check for misconguration and vulnerabilities and then offer: a list of commands to exploit a list of exploits some description on how and why the attack could be performed CVEs check  To update the CVE database: ./cve_update.sh Disclaimer  This script is for Educational purpose ONLY. Do not use it without permission. The usual disclaimer applies, especially the fact that TH3xACE is not liable for any damages caused by direct or indirect use of the information or functionality provided by these programs.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4a907115b0755f2b068a20d7699df63c",
    "u": "https://linux.tymyrddin.dev/docs/services/dns-servers",
    "t": "Use alternative DNS servers ",
    "c": "Use alternative DNS servers  When you don’t set up DNS servers on your computer or router, your DNS queries will run on your ISP’s DNS servers. Without VPN (with killswitch and/or firewall set as a VPN fail-safe mechanism ), DNS requests are most likely sent unencrypted, which can lead to common DNS attacks. Domain hijacking (Redirection) DNS flood attack (a type of DDoS attack) DNS spoofing or DNS cache poisoning DNS hijacking (malware infection on a local device to hijack DNS to redirect traffic to a phishing site) And any man in the middle of your traffic can see your online behaviour and the websites you visit. Your ISP’s DNS servers see every search you make in your browser. Using your ISP’s DNS servers as default DNS servers doesn’t do anything for security or privacy. Alternative DNS servers  OpenNIC is a group of volunteers who run an alternate DNS network offering free DNS servers. Depending on your location, you are offered different servers. OpenNIC offers DNS neutrality (it does not censor content), and you get the right to choose how much data OpenNIC logs. OpenDNS is a cloud-based service offering three solutions in their Home package, two of which are free. To connect with your nearest DNS server, and for faster page load times, it uses anycast routing. DNSWatch also offers DNS neutrality and does not log any DNS queries or record history. Quad9 DNS blocks malicious and suspicious domains using security intelligence from a group of companies to improve security. They do keep logs on some activity. Use wireshark to check for leaks  This is an example in a debian virtualbox VM, but is also valid in general for other setups. Virtual machines receive their network address and configuration on the private network from a DHCP server integrated into VirtualBox. The IP address assigned to the virtual machine is on a completely different network than the host (but can be seen with Traffic monitoring from the host). As more than one card of a virtual machine can be set up to use Network address translation (NAT), the first card is connected to the private network 10.0.2.0, the second card to the network 10.0.3.0 and so on. To check if you have DNS leaks, fire up wireshark: Start capturing on eth0 and connect to the VPN. After capturing either a fixed number of packets, or an amount of data or for a specific time period, go to //Statistics -> Endpoints// There should only be one public IP address, namely that of the VPN server that you’re connected to. The ‘’10.0.2.15’’ in this image is a local address.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c02fb8b1b6e66d6ee327f8ba59894d1f",
    "u": "https://linux.tymyrddin.dev/docs/services/change-mac",
    "t": "Change MAC address ",
    "c": "Change MAC address  A MAC address identifies the device connected to a network and allows the network to track, restrict or allow access based on it. Routers identify and assign static IP addresses based on the MAC addresses of devices. Before you try to change the MAC address, you need to know the value that you want to use. Set the 2’s place bit (the “locally administered” bit) in the first byte, to differentiate it from a guaranteed globally unique MAC address. Usually the first three bytes an unicast MAC address is an “Organizationally Unique Identifier” (OUI) that the IEEE assigned to the manufacturer of your Ethernet device. Manufacturers are required to make sure they keep the last 3 bytes unique. Avoiding all of that knowledge, the MAC address generator tool can generate a valid address for you. With ‘macchanger’ you can change the MAC address of any Ethernet network device: Turn off your network interface: $ sudo ifconfig eth0 down Use ‘macchanger’ to randomly generate new MAC address and assign it to eth0 network interface: $ sudo macchanger -r eth0 Current MAC: 00:10:4C:25:7A:3F (unknown) Faked MAC: 32:cf:cb:6c:63:cd (unknown) Enable eth0 network interface and check new MAC address: $ sudo ifconfig eth0 up $ sudo ifconfig eth0 If a specific MAC address, like 00:0a:95:9d:68:16 , is required: $ sudo macchanger -m 00:0a:95:9d:68:16 eth0",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e9ea2729e433eb193400d9cbaf963008",
    "u": "https://linux.tymyrddin.dev/docs/data/shred-and-delete",
    "t": "Shredding files and deleting data ",
    "c": "Shredding files and deleting data  Even when you erase everything on your hard disk, sometimes it is possible to recover (pieces of) data with forensics software and/or hardware. If that data is confidential, delete files and data securely so that no-one will recover them. Solid State Drives (SSD) may have introduced dramatic changes to the principles of computer forensics, in particular for recovering files and partitions. When encrypting and compressing files, clear-text versions that existed before you compress/encrypt the file or clear-text copies that are created after you decrypt/decompress it remain on your hard drive. There may also be “temp” files left behind. Unless you purge — not just delete — those clear-text files. Echoes of your personal data — swap files, temp files, hibernation files, erased files, browser artifacts, etc — are l ikely to remain on any computer that you use to access (encrypted) data. It is a trivial task to extract those echos. A hidden access trap. Purge – not just delete – echoes. Shredding files  Linux, FreeBSD and many other *nix systems come with a command line tool called shred installed. The shred command can be useful for destroying files so that its contents are very difficult to recover, even using high-sensitivity data recovery equipment. It repeatedly overwrites the data and the associated file or device names with random data. When used without options, shred will overwrite given files or devices 25 times. A device can be a partition or an entire HDD, USB key drive, etc. $ shred [option(s)] file(s)_or_devices(s) For example $ shred filename1 filename2 will shred both files, and $ shred /dev/hda4 will shred the fourth partition on the first HDD. By default, shred does not delete files or partitions after overwriting them. Overwritten files can be deleted by using the -u option. $ shred -u filename1 filename2 This both frees up the disk space for other data and makes it harder to reconstruct the shredded data. shred relies on the assumption that the filesystem overwrites data in place. But journal filesystems like //Ext3// and //ReiserFS//, RAID-based filesystems, compressed filesystems, and filesystems that cache data in temporary locations do not satisfy this assumption. Plus that copies of files can be retained in filesystem backups and on remote mirrors. Shredding partitions is therefore more reliable than shredding files. And even when shredding partitions, most HDDs map out bad sectors invisibly to application programs and utilities, and that includes shred. Sensitive data in such sectors will not be destroyed by shred. Permanently delete files (including data in RAM or swap)  The Secure-Delete package comes with four commands: * srm - Secure remove; used for deleting files or directories currently on your hard disk smem - Secure memory wiper; used to wipe traces of data from your computer’s memory (RAM) sfill - Secure free space wiper; used to wipe all traces of data from the free space on your disk sswap - Secure swap wiper; used to wipe all traces of data from your swap partition| srm (secure remove) is a more advanced version of the shred command. It uses a combination of random data, zeros, and special values developed by cryptographer Peter Gutmann to make files irrecoverable. The shred tool allows you to specify the number of passes and the secure-delete tools use a default of 38 passes. It will also assign a random value for the filename, hiding that key piece of evidence: $ srm filename Removing a directory and all its subdirectories (recursive): $ srm -r directory/ smem (secure memory wipe) removes residual traces of data that remain in memory. It is relatively easy for someone with the right tools to figure out what you had stored in RAM, which may be the contents of important files, internet activity, or whatever else it is you do with your computer. smem is slow. There are options to speed things up, but they increase risk by performing fewer overwrite passes. Invoke with: $ smem sfill (secure free space wipe) wipes all the free space on your disk where past files have existed. This is particularly useful if you are getting rid of a hard disk for good; you can boot a LiveCD, delete everything on the disk, and then use sfill to make sure that nothing is recoverable (as root): # sfill mountpoint/ NOTE: If you have /home/ on a separate partition and you try /home/hilarious/mistake as mountpoint, sfill will happily wipe the free space on which the mistake directory resides (the entire /home/ partition). sswap (secure swap wipe) wipes swap partitions. Swap partitions store data of running programs when RAM is filled up. Find your mounted swap devices by running: $ cat /proc/swaps Or look in your /etc/fstab file for filesystems of type swap. It can be /dev/sda5 or /dev/dm-1 , etc. Disable the swap partition: $ sudo swapoff /dev/sda6 Wipe: $ sudo sswap /dev/sda6 Re-enable swap: $ sudo swapon /dev/sda6 Making deleted data hard to recover  A hack that might work for sensitive data in sectors that were not destroyed by shred is towrite zeroes or random data to a file on the drive until it fills up all of the available space, then delete it: $ dd if=/dev/urandom of=/path/filename1 Then delete: $ rm /path/filename1 This also works on partitions: $ dd if=/dev/urandom of=/dev/sda4 Then delete $ fdisk /dev/sda4 Command (m for help): d Partition number (1-4): 4 Use bleachbit to delete files  With BleachBit you can free cache, delete cookies, clear Internet history, shred temporary files, delete logs, and discard junk you didn’t know was there. The version of BleachBit in the repositories of many Linux distributions is often stale, so to use the best and latest version, use download .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d55fbb6233b1e09122da3e3d15c8a60b",
    "u": "https://linux.tymyrddin.dev/docs/privacy/mat2",
    "t": "Use Metadata Anonymisation Toolkit 2 (MAT2) ",
    "c": "Use Metadata Anonymisation Toolkit 2 (MAT2)  mat2 provides a command line tool, and graphical user interfaces via a service menu for Dolphin, the default file manager of KDE, and an extension for Nautilus, the default file manager of GNOME. This is a tool natively created under Debian-Ubuntu and available as Debian and Ubuntu package . For usage, read the Man page .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "19e6cefe0df3934901104afb485f1aa5",
    "u": "https://linux.tymyrddin.dev/docs/guards/tripwire",
    "t": "Tripwire ",
    "c": "Tripwire  Tripwire is a free software security and data integrity tool useful for monitoring and alerting on specific file change(s) on a range of systems. It functions as a host-based intrusion detection system. It is suitable for monitoring a small number of servers where centralized control and reporting is not needed and professional support is not a requirement. Tripwire was originally a free, open source product and is now a commercial product but a free version (branched in 2000) is still being developed. Problems  Needs gcc for compiling. Will not compile with newer gcc’s. Tripwire provides no details about modified/added/removed files, only path names, unless one uses twprint --report-level 4 , which is pretty verbose. Omits checksum if file size is zero, which is incorrect for Linux /proc files. Setting it up is hilariously hellish, hence I am spelling it out here. Installation  To install tripwire on a debian-based system: $ sudo apt-get install tripwire Use the arrow keys to navigate: “Remember that passphrase”, for example in keepassx (I also had keepassx generate the passphrase): Repeat: Generating site key (this may take several minutes)... Do the same for local passphrase. Configuration  Just after install the tripwire directory /etc/tripwire contains a number of files, two of which are useful for its configuration. //twcfg.txt// is for general configuration and can easily be the same for all the computers on the same local network. It contains “things” like the location of the tripwire database, instructions for minimising the amount of time the passphrases are kept in memory, and the number of redundant reports. //twpol.txt// contains the policy that declares all the objects that must be monitored and what to do when one of them is lost or altered. Unlike the configuration file, the policy could (and almost certainly will) vary across the several computers on the same network. For security reasons (preventing a malicious intruder from spoofing tripwire into giving a false “okay” message) tripwire uses these cleartext files to create binary files for database checking rather than the cleartext files (that are best immediately removed after the deed). If you make incorrect edits to either of these files, you will have to restore from backup or tripwire will not be able to create its database. Before making modifications to the configuration files, make a backup first: $ cd /etc/tripwire $ sudo cp twcfg.txt twcfg.txt.old $ sudo cp twpol.txt twpol.txt.old Initialisation  Install default policy as root (mind the capital P, and know the cursor does not move at all when copy/pasting the passphrase (right-click works on the command-line for copy/pasting)): # /usr/sbin/twadmin -m P /etc/tripwire/twpol.txt Please enter your site passphrase: Wrote policy file: /etc/tripwire/tw.pol Still as root, generate the initial database (You will be asked for your local passphrase): # /usr/sbin/tripwire -m i Please enter your local passphrase: Parsing policy file: /etc/tripwire/tw.pol Generating the database... *** Processing Unix File System *** It may take a while and then: ### Warning: File system error. ### Filename: /var/lib/tripwire/debian.twd ### No such file or directory ### Continuing... Of course no such database exists (yet). This is the initial run to create it. And a bunch of these appear with (hopefully) a success message at the end: ### Warning: File system error. ### Filename: /proc/5199/fd/4 ### No such file or directory ... The object: \"/proc/sys/fs/binfmt_misc\" is on a different file system...ignoring. Wrote database file: /var/lib/tripwire/debian.twd The database was successfully generated. The twpol.txt file distributed with tripwire contains anything that could be on a UNIX system, so it is guaranteed to complain about programs that you never installed or placed in a different location. These false positives are created when there is a discrepancy between the default policy and the actual local configuration. ACTUALLY!!!!! :D Some further customization is necessary to prevent these large numbers of false positives. The “thing” to do to create a good policy is to remove as many unneeded programs as possible before starting. Next, to make your usage as quick and effective as possible, your policy must cover everything you really need to monitor and nothing else. This includes, at least, all the system binary and library directories (minimally the contents of /bin , /sbin , /usr/bin , /lib ) and the corresponding configuration files in /etc . As of version 2.3.1.2-5, the tripwire package manages policy at a directory level: if a directory appears in the policy, tripwire will add the files in that directory. Not all directory policy entries are recursive and tripwire may not check the contents of those subdirectories. To generate a listing of the discrepancies between the local system and the default policy (or just do the first bit without grep and search for occurrences of “Filename”): # /usr/sbin/tripwire -m c | grep Filename >> twtest.txt Waaaait for it! When this listing has been generated, edit /etc/tripwire/twpol.txt again, and comment out or delete each of the filenames listed in twtest.txt . Use your preferred editor (mine is geany): # geany /etc/tripwire/twpol.txt And there are other files in the default policy that may not make sense to monitor on your local system. These include lock files (which identify that some process is in use) and //pid// files (which identify the //process ID// of some //daemons//). Such files are likely to change often, if not at every system boot, and they can cause tripwire to generate false positives. You can comment out all of the /var/lock/subsys entries as well as the entry for /var/run . After that you need to re-install default policy and generate the database again. This can result in: *** Processing Unix File System *** The object: \"/dev/hugepages\" is on a different file system...ignoring. The object: \"/dev/mqueue\" is on a different file system...ignoring. The object: \"/dev/pts\" is on a different file system...ignoring. The object: \"/dev/shm\" is on a different file system...ignoring. ### Warning: File system error. ### Filename: /proc/22273/fd/4 ### No such file or directory ### Continuing... ### Warning: File system error. ### Filename: /proc/22273/fdinfo/4 ### No such file or directory ### Continuing... ### Warning: File system error. ### Filename: /proc/22273/task/22273/fd/4 ### No such file or directory ### Continuing... ### Warning: File system error. ### Filename: /proc/22273/task/22273/fdinfo/4 ### No such file or directory ### Continuing... The object: \"/proc/sys/fs/binfmt_misc\" is on a different file system...ignoring. Any /dev entries spell that the /dev file system also has other file systems mounted as /dev/hugepages , /dev/mqueue , /dev/pts , and /dev/shm . Similar objects in proc are also ignored. Directories in /proc change all the time, and it is a pseudo-filesystem. My solution is to comment out both /dev and /proc and add the listed objects that have appeared and that appear. The object: \"/proc/sys/fs/binfmt_misc/register\" is on a different file system...ignoring. The object: \"/proc/sys/fs/binfmt_misc/status\" is on a different file system...ignoring. binfmt_misc is a capability of the Linux kernel which allows arbitrary executable file formats to be recognised and passed to certain user space applications, such as emulators and virtual machines. The executable formats are registered through a special purpose file system interface (similar to /proc ). Debian-based distributions provide the functionality through an extra //binfmt-support// package. Needs monitoring. So, added those two as well. After that you need to re-install default policy and generate the database again. Cleaning up  It is now safe to delete the clear text versions of the tripwire policy and configuration files: # rm /etc/tripwire/twcfg.txt /etc/tripwire/twpol.txt If they need to be restored,...",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b7b37faf290dcbffa569d58bec9bd82d",
    "u": "https://linux.tymyrddin.dev/docs/privacy/devices",
    "t": "Turning devices on and off ",
    "c": "Turning devices on and off  Adversaries can try to gain access with trojans - invisibly-installed malware that gives the adversary administrative control over targeted computers, including, the ability to remotely control devices. Depending on your location and context, you may want to turn devices off and later on again. Some devices can be turned on and off by software, others need blacklisting. Kernel modules are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. And modules can be blacklisted. Examples  Turn on/off camera/webcam  Tape the camera. It may even be possible to turn it off in BIOS (depending on your version). Better yet, if you know what driver module is controlling the webcam, you can disable and enable the driver with a single command on the commandline. uvc driver  Check with: $ lsmod | grep \"uvc\" If stuff like this appears, your webcam device uses an uvc driver : uvcvideo 79005 0 videobuf2_vmalloc 12816 1 uvcvideo videobuf2_core 47787 1 uvcvideo videodev 126451 3 uvcvideo,v4l2_common,videobuf2_core media 18305 2 uvcvideo,videodev usbcore 195340 7 uvcvideo,ums_realtek,usb_storage,ehci_hcd,ehci_pci,usbhid,xhci_hcd To disable the cam: $ sudo modprobe -r uvcvideo To enable the cam: $ sudo modprobe uvcvideo other driver  If not an uvcvideo driver, try $ sudo lsmod | grep \"media\" and use the modinfo command to find out more about the modules listed behind it to locate your webcam driver module: $ sudo modinfo [modulename] Then replace the uvcvideo in the above modprobe command with the name of your driver module. Completely turn it off  To disable the webcam at boot (if file not exists, create it, use your preferred editor): $ sudo geany /etc/modprobe.d/blacklist.conf At bottom of the file add this line: blacklist uvcvideo (or the name of your driver instead of uvcvideo). Save the file and reboot. Your webcam is no longer functioning. Turn on/off microphone  Use the alsa control panel for muting the microphone: $ sudo alsamixer You can also use the same modprobe enabling/disabling method as used for webcam above. The ALSA modules page may be helpful for finding your driver module. Blacklist firewire and thunderbolt  A direct memory access (DMA) attack is a type of side channel attack in which an adversary penetrates a device by exploiting the presence of high-speed expansion ports that permit Direct Memory Access. Firewire, thunderbolt and ExpressCard allow (by design) any connecting device full direct memory access to your system. They can be disabled in /etc/modprobe.d/blacklist-dma.conf (in debian): blacklist firewire-core blacklist thunderbolt The modules will be blacklisted upon reboot.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4a6b446a98f847631f8f77625cd76606",
    "u": "https://linux.tymyrddin.dev/docs/services/tor-proxy",
    "t": "Use a Tor proxy ",
    "c": "Use a Tor proxy  Tor proxy  Install: $ sudo apt update $ sudo apt install tor Check it is installed: $ tor --version Tor version 0.4.6.9. Get your IP address: $ curl ifconfig.me; echo [IP address] Run the same command but preface it with torsocks. The command is now run through the tor client instead: $ torsocks curl ifconfig.me; echo [Some Tor IP address] Shell  To use the Tor network by default for shell commands, torify your shell with this command: $ source torsocks on Tor mode activated. Every command will be torified for this shell. Test with (must now be []): $ curl ifconfig.me; echo [Some Tor IP address] Enable Tor control port  Password protect the Tor connection: $ torpass=$(tor --hash-password \"[password]\") Enable the Tor control port and insert the hashed password: $ printf \"HashedControlPassword $torpass\\nControlPort 9051\\n\" | sudo tee -a /etc/tor/torrc Check the contents of the /etc/tor/torrc configuration file. $ sudo systemctl restart tor Now tor is running on both ports 9050 and 9051. Use in app, for example Firefox  Go to Preferences -> Network Settings -> Settings button Select “Manual proxy configuration” and enter localhost in the “SOCKS Host” field. Use 9050 for port. OK Test by going to a IP site Notes  If a government makes their own national internet, or routes traffic through specific servers to use deep packet inspection (DPI), running Tor may not provide security if the government is able to see the entire path. Sometimes the Tor network is censored, and clients can’t connect to it. An increasing number of censoring countries are using Deep Packet Inspection (DPI) to classify Internet traffic flows by protocol. While Tor uses bridge relays to get around a censor that blocks by IP address, the censor can use DPI to recognize and filter Tor traffic flows even when they connect to unexpected IP addresses. With pluggable transports, censorship against Tor can be bypassed. Not only that. If an attacker can see your traffic, and can see the website you’re visiting, even with a path outside the adversary’s control - they will still be able to correlate the traffic and learn you are visiting the website. If the same connection (the same set of relays) were to be used for a longer period of time a Tor connection could be vulnerable to statistical analysis, which is why the client software changes the entry node every ten minutes.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8a1df405bdd267d46c76e2bf613446f6",
    "u": "https://linux.tymyrddin.dev/docs/guards/ossec",
    "t": "OSSEC ",
    "c": "OSSEC  OSSEC stands for Open Source HIDS Security. It is entirely free to use. As a host-based intrusion detection system, the program focuses on the log files on the computer where you install it. It monitors the checksum signatures of all the log files to detect possible interference. On Unix-like systems, it will monitor any attempts to get to the root account. Although OSSEC is an open-source project, it is owned by Trend Micro, a security software producer. Installation on Ubuntu/Debian",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "524d26dc53c3aa43cfc3edb7fa368aa8",
    "u": "https://linux.tymyrddin.dev/docs/guards/aide",
    "t": "Aide ",
    "c": "Aide  The Advanced Intrusion Detection Environment (Aide) , is a file integrity checker (FIA). It creates a database from the regular expression rules that it finds from the config file(s). Once this database is initialized it can be used to verify the integrity of the files. It has several message digest algorithms (md5, sha1, rmd160, tiger, crc32, sha256, sha512, whirlpool (additionally with libmhash: gost, haval, crc32b)) that are used to check the integrity of the file. All usual file attributes (//File type, Permissions, Inode, Uid, Gid, Link name, Size, Block count, Number of links, Mtime, Ctime// and //Atime//) can also be checked for inconsistencies. It can read databases from older or newer versions. Installation  To install aide on a debian based system: $ sudo apt-get install aide Open up /etc/default/aide with your favourite editor to change who to send its reports to: $ sudo geany /etc/default/aide Initialisation  Initialisation (this can take some time) on debian based: $ sudo aideinit Running aide --init... Start timestamp: 2018-03-02 20:54:13 +0000 (AIDE 0.16) AIDE initialized database at /var/lib/aide/aide.db.new Verbose level: 6 Number of entries: 163501 --------------------------------------------------- The attributes of the (uncompressed) database(s): --------------------------------------------------- /var/lib/aide/aide.db.new RMD160 : ST44/Xwdiok4RmbkV61xDP9gXdg= TIGER : TWH3gMXUUFA+MRy8iIdJPkPKxY39drxK SHA256 : K+TPo8r3/GANOt4L24mUnlAmM3BN4Ap7 7/xuFmq8xnU= SHA512 : xhZ9lhG50Xb8rmFF8AqFkd9TFqMDaE/T FxEAebvt5eNmd/ayYab1fFEyefdZnu8G HNkEo6H9f1Hn80+IN7sJdA== CRC32 : BdfVRg== HAVAL : hVkhsvx02hXF5YmIyuiJMlNtAweYuOTP Y2L043XMHW4= GOST : T690cFLlnZhUQsCL4GaSjrJ0yHslK0Au VRgW3dMWV4U= End timestamp: 2018-03-02 21:06:39 +0000 (run time: 12m 26s) On other distros: sudo aide --init Configuration  Most aide configuration can be found in /etc/aide/aide.conf . This file is pretty well documented and default rules are quite decent. Aide aims at reporting files that changed since the last snapshot (stored in /var/lib/aide/aide.db ). In hostile environments, a good security measure is to keep the database file on an external disk. If you have such a device, you can copy the current snapshot to it and use the snapshot from that device during later runs of aide. Before making modifications to the configuration file, make a backup first: $ sudo cp /etc/aide/aide.conf /etc/aide/aide.conf.old So let say that you have a copy of aide.db on an external disk. To use that snapshot, you can change //database=file:/var/lib/aide/aide.db// to //database=file:/media/user/drive/aide/aide.db//: $ sudo geany /etc/aide/aide.conf Read through the file to acquaint yourself with aide. By default, changes in //Binaries// and //Libraries// directories are checked. Those are matched to the //BinLib// rule, which basically checks for any changes in permissions, ownership, modification, access and creation date, size change, md5 and sha1 signature, inode, number of links and block count. Then, it also checks for modifications in the //log files// against the rule //Logs//. Because log files tend to grow, you cannot use a signature there, and you also have to ask aide not to check for size modification (S). Usage  On debian and friends, aide is run on a daily basis through the script /etc/cron.daily/aide . Default settings in /etc/default/aide tells aide to update its database. Using database_out value in /etc/aide/aide.conf , aide is going to output a new database any time it runs in /var/lib/aide/aide.db.new (if you kept the default settings). Any time you install new packages or change some configuration settings, run: $ sudo /etc/cron.daily/aide And check in the report that any modifications were only done to files you intended to modify and that added files are only coming from packages you have just installed and copy the new database to whatever place your database points to. Great way to learn about linux and non-intended changes too.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c403afd4a99fa39cc46668e8315b06b9",
    "u": "https://linux.tymyrddin.dev/docs/privacy/bleachbit",
    "t": "Scrub machine with BleachBit ",
    "c": "Scrub machine with BleachBit  With BleachBit you can free cache, delete cookies, clear Internet history, shred temporary files, delete logs, and discard junk you didn’t even know was there. It is available for Linux, Windows, BlackBerry, Email servers and Mac OS X. The version of BleachBit in the repositories of many Linux distributions is often stale, so to use the best and latest version, use the packages from the Download page .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1defcb2cdf6f597e0bb09aff93244594",
    "u": "https://linux.tymyrddin.dev/docs/services/service-management",
    "t": "Service management ",
    "c": "Service management  Be careful disabling/stopping services. Some other applications might stop functioning because they depend on a disabled service. Try one by one. Most recent distributions use the Systemd system manager. Some still use the old SysVinit system manager. The easiest way to discover which system manager is in use, is by using the use the pstree command and to check the first process ever run on your system: $ pstree | head -n 5 systemd-+-ModemManager---2*[{ModemManager}] |-NetworkManager---2*[{NetworkManager}] |-accounts-daemon---2*[{accounts-daemon}] |-acpid |-apache2-+-2*[apache2---26*[{apache2}]] Getting a list of services  To list services on Linux, when you are on a systemd system: $ systemctl list-units --type=service This command will show you only the services that are active or the services that have failed (in red) on the system. List all services: $ systemctl list-units --type=service --all Only loaded services are listed. On boot, systemd loads unit files and it may choose not to load a specific service if it finds that it won’t be used by the system. List services by state (active, inactive, activating, deactivating, failed, not-found or dead): $ systemctl list-units --state=<state1>,<state2> In order to list all service files available, use list-unit-files : $ systemctl list-unit-files --type=service Status of a service  To verify whether a service is active or not, run this command (for example, for apache2): $ sudo systemctl status apache2 Managing services  To start/stop/restart a service in Linux: $ sudo systemctl start <service> $ sudo systemctl stop <service> $ sudo systemctl restart <service> To force the service to reload its configuration files: $ sudo systemctl reload <service> Enable/disable a service at boot: $ sudo systemctl enable <service> $ sudo systemctl disable <service>",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2d0d5cfbfc313b7538b4d5e56fda8b1b",
    "u": "https://pap.tymyrddin.dev/docs/mobile/squatting",
    "t": "App squatting ",
    "c": "App squatting  Fake apps repackage an app and are relatively easy discovered as the identifiers (app name or package name) are changed. In “App Squatting”, attackers release apps with identifiers that are confusingly similar to those of popular apps or well-known Internet brands. Related labs  Android malware analysis (Pithus and jadx) Resources  Yangyu Hu, Mobile App Squatting , 2020, IW3C2 PiRogue tool suite: Beginner guide - How to handle a potentially malicious mobile app",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "374e2d70f6c5e64e1a5bd02a2813f0f0",
    "u": "https://pap.tymyrddin.dev/docs/mobile/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Mobile malware is a generic term for malicious software designed to target mobile devices (smartphones, tablets, and iOT devices) with the goal of gaining access to private data. Apparently it is still not as pervasive as malware designed for workstations, and that may have to do with the fact that SOC teams and SIEM stacks have focused mostly on detecting workstation and corporate network threats, and that it was only a matter of time before hackers switched tactics. Why?  It is definitely a recognised/growing threat, and needs to be addressed. How?  First off, by some research into known threats. Mobile malware Smishing Vishing SIM swapping OTP bots App squatting Ransomware Madware Spyware Location tracking Stalkerware",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a373645557189025eab2068c15fa2b3c",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/lol",
    "t": "More LOL ",
    "c": "More LOL  Adversaries are embracing conventional and commercially available development tools to make attacks faster and harder to detect, more often using “living off the land” (lol) : Exploits using built-in tools and programs for operating systems ( LOLBAS , GTFOBins and loldrivers ) can deceive threat detection and response systems.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f0b8c0cc7f2e7b018e415fab855950e1",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/marketplace",
    "t": "Marketplaces ",
    "c": "Marketplaces  There seems to have been a move from the Darkweb to Telegram, probably due to increased pressure from law enforcement and other threat actors. Darkweb is still on though, with sites like InTheBox, a marketplace for mobile malware, 2Easy, where threat actors buy and sell harvested data, and Russian Market (despite the name it is english), where you can buy stolen credit cards, credentials, or cookies, and buy access to specific remote desktop protocol clients/servers.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1ee9b53c306897b2bd103c7da1282804",
    "u": "https://macos.tymyrddin.dev/",
    "t": "Hardening macOS ",
    "c": "Hardening macOS  Version 0.1: These mitigations are all based on Catalina. Supposedly, Big Sur has better security . Some of the below is still applicable and useful. When we have a Big Sur set up we will test it, and split and update these mitigations. Authentication Introduction Disable automatic login Require a password when resuming Make that more secure passwords Use a password manager Use multi-factor authentication (MFA) Protect SSH access with MFA Services and applications Introduction Restrict which apps can run System integration protection (SIP) Secure browsers that protect your privacy Use a secure messaging service Use secure email services Use SSH tunnels Use a VPN service Use a firewall as a VPN fail-safe mechanism Use alternative DNS servers Use a Tor proxy Change MAC address Renew IP lease Edit hosts file Data Introduction Set up the time machine and backups in macOS Enable full disk encryption using FileVault Password protect files and folders Privacy Introduction Disable location services and other privacy settings Remove metadata from files Edit exif metadata in images Remove metadata with hex editors Clean machine with BleachBit Malware Introduction Mac myths Scan and clean machine Catch and remove daemons and launch agents Analysing trojans Operations security Introduction Use email securely Detecting fake emails and phishing Browse more safely Check integrity of downloads ‘;–have i been pwned? Guards! Guards! Introduction Alphabet soup macOS intrusion detection systems OSSEC",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "66316622b4941ff48a4787b7a15dc9ea",
    "u": "https://macos.tymyrddin.dev/docs/services/dns-servers",
    "t": "Use alternative DNS servers ",
    "c": "Use alternative DNS servers  When you don’t set up DNS servers on your computer or router, your DNS queries will run on your ISP’s DNS servers. Without VPN (with killswitch and/or firewall set as a VPN fail-safe mechanism ), DNS requests are most likely sent unencrypted, which can lead to common DNS attacks. Domain hijacking (Redirection) DNS flood attack (a type of DDoS attack) DNS spoofing or DNS cache poisoning DNS hijacking (malware infection on a local device to hijack DNS to redirect traffic to a phishing site) And any man in the middle of your traffic can see your online behaviour and the websites you visit. Your ISP’s DNS servers see every search you make in your browser. Using your ISP’s DNS servers as default DNS servers doesn’t do anything for security or privacy. Alternative DNS servers  OpenNIC is a group of volunteers who run an alternate DNS network offering free DNS servers. Depending on your location, you are offered different servers. OpenNIC offers DNS neutrality (it does not censor content), and you get the right to choose how much data OpenNIC logs. OpenDNS is a cloud-based service offering three solutions in their Home package, two of which are free. To connect with your nearest DNS server, and for faster page load times, it uses anycast routing. DNSWatch also offers DNS neutrality and does not log any DNS queries or record history. Quad9 DNS blocks malicious and suspicious domains using security intelligence from a group of companies to improve security. They do keep logs on some activity. Use wireshark to check for leaks  To check if you have DNS leaks, fire up Wireshark : Start capturing on the active interface and connect to the VPN. After capturing either a fixed number of packets, or an amount of data or for a specific time period, go to //Statistics -> Endpoints// There should only be one public IP address, namely that of the VPN server that you’re connected to. The ‘’10.0.2.15’’ in this image is a local address.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "26480e471b2539917bb1a2212e494842",
    "u": "https://macos.tymyrddin.dev/docs/opsec/hibp",
    "t": "‘;–have i been pwned? ",
    "c": "‘;–have i been pwned?  ‘;–have i been pwned? (HIBP) is a database of several billion email addresses (and, separately, passwords) that have appeared in a publicly known past data breach. The service creates an SHA-1 hash of the submitted email address and passes the first six characters of that to HIBP’s hash range query API. HIBP then returns a range of possible matches, if any, to the six character string, without ever handling the full email address. Check if you have an account that has been compromised in a data breach, and if so, change your password and change it in any other place where you’ve used that password. Better yet, never use a password twice, and consider using a password manager.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "bcff69e0287204853b3686eb8a3a6a3f",
    "u": "https://macos.tymyrddin.dev/docs/authentication/resuming",
    "t": "Require a password when resuming ",
    "c": "Require a password when resuming  Password protect your Mac when it goes to sleep or when the screen saver begins. Go to Apple > System Preferences and click Security & Privacy. Make sure the General tab is selected. Check the Require password box. Select how soon after your Mac goes to sleep, or the screen saver begins. It’s a good idea to choose Immediately, especially in a public place, or anywhere there are other people around. You will be able to wake the computer with your local password .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "852dc5e3454f47b2891e51d3af654da7",
    "u": "https://macos.tymyrddin.dev/docs/services/vpn-fail-open",
    "t": "Use a firewall as a VPN fail-safe mechanism ",
    "c": "Use a firewall as a VPN fail-safe mechanism  If you simply add a VPN using common instructions, it generally “fails open”. That means, if the VPN breaks down, because the connection is interrupted, traffic will be sent without the VPN. It is much safer when it “fails closed”, meaning that when the VPN connection breaks down, the whole internet connection must be down as long as the VPN connection is not restored. If your chosen VPN does not include being able to set a kill switch, you can use your firewall as a fail-safe mechanism: Kill switch using pf  Get the IP address of the VPN gateway that the kill switch is intended for using the host command. Get the network interface name connected to your default gateway and the subnet of the local network using the route command. After connecting to the VPN, by running the command `ifconfig -a and searching for POINTOPOINT, find the interface used by the VPN: $ ifconfig -a | grep -i POINTOPOINT utun0: flags=8051<UP,POINTOPOINT,RUNNING,MULTICAST> mtu 2000 Create a killswitch.pf.conf configuration file (The file can be created on the user $HOME directory and have any name): int_en1 = \"[network interface name]\" vpn_utun1 = \"[interface used by the VPN]\" vpn_ip = \"[IP address of the VPN gateway]\" set block-policy drop set ruleset-optimization basic set skip on lo0 block all block out inet6 # dns pass quick proto {tcp, udp} from any to any port 53 keep state # Allow broadcasts on internal interface pass from any to 255.255.255.255 keep state pass from 255.255.255.255 to any keep state # Allow multicast pass proto udp from any to 224.0.0.0/4 keep state pass proto udp from 224.0.0.0/4 to any keep state # Allow ping pass on $int_en1 inet proto icmp all icmp-type 8 code 0 keep state # Allow dhcp pass on $int_en1 proto {tcp,udp} from any port 67:68 to any port 67:68 keep state # Use only the vpn pass on $int_en1 proto {tcp, udp} from any to $vpn_ip pass on $vpn_utun1 all Load the PF rules: $ sudo pfctl -Fa -f ~/killswitch.pf.conf -e To disable: $ sudo pfctl -d To load your system defaults (no kill switch): $ sudo pfctl -Fa -f /etc/pf.conf -e",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "916c7d6b922056a13594fe1cb80c5eaf",
    "u": "https://macos.tymyrddin.dev/docs/opsec/integrity-downloads",
    "t": "Check integrity of downloads ",
    "c": "Check integrity of downloads  When downloading an ISO image of, for example, the latest Linux distro, installing or upgrading packages, or downloading software, you can verify the files have downloaded correctly and securely by using checksums. Checksums ensure the integrity of data portions for data transmission or storage. Checksums is a simple error-detection scheme in which each transmitted message is accompanied by a numerical value based on the number of set bits in the message. The receiving station then applies the same formula to the message and checks to make sure the accompanying numerical value is the same. If not, the receiver can assume that the message has been garbled (or was altered). Verifying downloaded software  AMFI: checking file integrity on your Mac",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "71aea0e81c79127169fb3f47178da7ce",
    "u": "https://macos.tymyrddin.dev/docs/data/disk-encryption",
    "t": "Enable full disk encryption using FileVault ",
    "c": "Enable full disk encryption using FileVault  FileVault is a built-in utility on your Mac that encrypts all the data on your hard drive. When FileVault is enabled, the contents of your drive cannot be accessed without a login password or recovery key. FileVault is off by default, as most users may find that encrypting the entire drive is a bit overkill. Having to type a password to open a file and the time required to initially encrypt your entire drive may outweigh the security FileVault provides. For home use, in a non-threatening environment, maybe. As activist protecting land, animal and/or human rights, most likely not. Enable FileVault  Go to System Preferences -> Security & Privacy and click the FileVault tab. Click the lock at the bottom to be able to make changes and enter your administrator password. Click Turn On FileVault Choose how to unlock your disk and reset your password if you ever forget it: Use iCloud (easier, but less secure) Create a FileVault recovery key (store on paper and/or dedicated USB stick) Create a Vault  On a Mac, DMG files are usually associated with installing apps. DMG files can also be used as encrypted vaults to store sensitive files and folders. This feature is like using a program like VeraCrypt on Linux. Go to Disk Utility -> File -> New Image -> Blank Image and enter the information for the DMG file File name in Save As Where to save the file Size of Vault Format Encryption type Enter a password when asked to secure the DMG file. Once it is created, it is opened. It shows up in Finder and on the desktop as another drive. Move your private files and folders in it. To lock it, eject it from its desktop icon like any other external hard drive connected to your Mac. To open it, double-click on the file and enter your password.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8492e612a2a4d5394ab196711f031091",
    "u": "https://macos.tymyrddin.dev/docs/authentication/passwords",
    "t": "Make that more secure passwords ",
    "c": "Make that more secure passwords  Do not use a password you have used in the past. Try to change the password at least every 3-6 months. Create a password that is at least six characters long. Create a password with both digits and letters, uppercase, and lowercase. Do not create a password with a family name, name of your pet, hobby, sports teams, favourite TV show, etc. Do not create a password that is your phone number, house number, etc. Create a password that is not in a dictionary. Create passwords with spaces and/or magics (&*^%$#) in them (if allowed). Have a password manager create a password for you.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3697818c2651fef9ead96f6486c818ee",
    "u": "https://macos.tymyrddin.dev/docs/services/restrict-apps",
    "t": "Restrict which apps can run ",
    "c": "Restrict which apps can run  The Gatekeeper allows you to choose from where apps can be installed. You can choose to only allow apps from the App Store to be installed or apps from the App Store and from identified developers. To choose one of these option, go to Apple -> System Preferences -> Security & Privacy -> General You can still install apps from anywhere, but you must specifically approve each app separately on the General tab on the Security & Privacy screen in the System Preferences.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "351cfd07039d20b28d587fce37414dc3",
    "u": "https://macos.tymyrddin.dev/docs/services/tor-proxy",
    "t": "Use a Tor proxy ",
    "c": "Use a Tor proxy  Tor proxy  Install: $ brew install tor Start it: $ tor Set network proxy settings via System Preferences  Go to System Preferences > Network From Location dropdown at the top, select Edit Locations Create a new location by hitting the plus button and name it Tor. Hitting Done will select the new location which is now ready to be configured. Go to Advanced > Proxies and activate SOCKS Proxy and add: SOCKS proxy server: localhost Port: 9050 Now you can switch to this location from your menu bar under Location whenever you start up Tor. Switching to the Tor location routes all network traffic on your system through Tor. You have to repeat these steps for every network interface, ethernet, Wi-Fi. Notes  If a government makes their own national internet, or routes traffic through specific servers to use deep packet inspection (DPI), running Tor may not provide security if the government is able to see the entire path. Sometimes the Tor network is censored, and clients can’t connect to it. An increasing number of censoring countries are using Deep Packet Inspection (DPI) to classify Internet traffic flows by protocol. While Tor uses bridge relays to get around a censor that blocks by IP address, the censor can use DPI to recognize and filter Tor traffic flows even when they connect to unexpected IP addresses. With pluggable transports, censorship against Tor can be bypassed. Not only that. If an attacker can see your traffic, and can see the website you’re visiting, even with a path outside the adversary’s control - they will still be able to correlate the traffic and learn you are visiting the website. If the same connection (the same set of relays) were to be used for a longer period of time a Tor connection could be vulnerable to statistical analysis, which is why the client software changes the entry node every ten minutes.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "11b4ba64e41ccf5a29b58d63a8ed0ad0",
    "u": "https://macos.tymyrddin.dev/docs/malware/analysing-trojans",
    "t": "Analysing trojans ",
    "c": "Analysing trojans  Check file properties. Be careful not to click on any links or attachments in the email accidentally. Is it what it seems to be? Run the file in a virtual machine and analyse it. Use an online Sandbox service. Related  Malware sandboxes Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "41e93c2df0a437f82dc06adb857a0c79",
    "u": "https://macos.tymyrddin.dev/docs/malware/daemons-and-agents",
    "t": "Catch and remove daemons and launch agents ",
    "c": "Catch and remove daemons and launch agents  Automagically assisted  EtreCheck (free for the first five reports) Lingon X KnockKnock BlockBlock Manually  Open the Activity Monitor app, and choose View -> All Processes. At the top are two main processes: kernel_task and launchd , with process ID (PID) 0 and 1 respectively. launchd is the primary parent process when the system starts. It is also the last process to exit when the system shuts down. Do NOT remove it. The core responsibility of launchd is to launch other processes or jobs on a scheduled or on-demand basis. These processes come in two flavours: LaunchDaemons and LaunchAgents. LaunchDaemons typically run as root, and can be found in /System/Library/LaunchDaemons (native macOS processes) and /Library/LaunchDaemons (installed third-party apps). LaunchAgents start when a user logs in. They can access the user interface and display information, and can be found in Library/LaunchAgents (all user accounts), ~/Library/LaunchAgents (user account), and /System/Library/LaunchAgents (macOS only). Before logging in, launchd runs services and other components specified in .plist files from the LaunchDaemons folder. After logging in, launchd runs services and components defined in .plist files from the LaunchAgents folders. Those in /System/Library are all part of macOS and protected by System Integrity Protection. .plist files follow the standard reverse domain naming system: company name, followed by an application identifier, and ending with the property list file extension (.plist). For example, co.clario.Clario.plist . The public LaunchDaemon and LaunchAgent folders are open to both legitimate and illegitimate apps. You can monitor these folders with Folder Actions. Folder actions  Open the AppleScript Editor app. Click Preferences and choose General -> Show Script menu in menu bar Click the Script Menu icon and choose Folder Actions -> Enable Folder Actions Select Attach Script to Folder in that same menu A dialog box will pop up. Select add - new item alert Click OK to open a Finder window. Select the user LaunchDaemon folder and click Choose Repeat the procedure for every LaunchAgents folder. Then: Open Finder and click Go > Go to Folder Type ~/Library/LaunchAgents and click Go Right-click the LaunchAgents folder, and choose Services -> Folder Actions Setup to bind the new item alert script to each folder. In the dialog box that pops up, you’ll see the list of folders in the left column and script in the right column. If there are no scripts, click the plus (+) button and add new item alert.scpt. Now macOS will show an alert popup whenever a new item is added to one of these folders, allowing you to immediately know when illegitimate apps try to inject themselves into the system in the background. Remove items  Be careful. Not all third-party .plist files are malicious. They can be: Components of legitimate installed apps Remnants of old apps you no longer use Leftovers from previous macOS upgrades Migration Assistant leftovers PUPs (potentially unwanted programs), adware, and malware DO NOT delete any components of installed apps. To remove remnants of old apps, leftovers from previous macOS upgrades, PUP’s, adware and malware, just delete the .plist file and reboot. Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "af8a35b1e185a44e78c9be282be5bb24",
    "u": "https://macos.tymyrddin.dev/docs/authentication/password-manager",
    "t": "Use a password manager ",
    "c": "Use a password manager  The majority of people use very weak passwords and reuse them on different websites. How are you supposed to use strong, unique passwords on all the websites you use? The solution is a password manager. Password managers store your login information for all the websites you use and help you log into them automatically. They encrypt your password database with a master password — the master password is the only one you have to remember. Managers  Dashlane 1Password Bitwarden It does not protect from keyloggers  Most password manager work by copy-pasting data quickly from your manager to the field (on the website) or by simulating keystrokes for all the data on file. A keylogger captures keystrokes and would capture all passwords entered by a password manager that simulated keystrokes. Nearly all keyloggers even include the capability to take screenshots at particular intervals of time and save all the contents of the clipboard to a file. The last bit is important, because it sort of renders even password managers that use the clipboard to fill in these forms useless. The real solution to preventing these attacks is to monitor your system for any keyloggers or use some sort of AV solution .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "95a445b888e0e5c47a2f407fbadacb54",
    "u": "https://macos.tymyrddin.dev/docs/malware/clean-machine",
    "t": "Scan and clean machine ",
    "c": "Scan and clean machine  Automagically  Choose your scanner carefully, have a look at AV Comparatives’ test results for macOS . Manually  Check activity monitor  Open Activity Monitor from Applications -> Utilities Go to the CPU tab Click the % CPU column to sort high to low, and look for high CPU use If you see a process that looks suspicious, do a DuckDuckGo search on it Check for unwanted applications  Go to the Applications folder Look for any apps you do not recognize or do not remember installing Check with DuckDuckGo whether they are legitimate or not If they are not, or if you are suspicious, delete them and empty your Trash Note that this does not help much with trojans , evil files made to look like legitimate apps. Look at login items  In System Preferences, select Users & Groups Go to the Login Items tab Look through the list, and select anything suspicious Click the minus button to remove it Note that LaunchDaemons and LaunchAgents will not appear in this list. Fail  If all else fails, go to a previous point in time or backup. If that fails too, the NVRAM or Time Machine or backups may even be infected. It is possible for malware to persist across a re-format and re-install, if it is sufficiently ingenious and sophisticated: if for example, it can persist in NVRAM, in the firmware for peripherals (some hardware devices have firmware that can be updated, and thus could be updated with malicious firmware), or with a virus infecting data files on removable storage or on your backups. Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "eb8e602fd39b3da8a0e81a60c0304298",
    "u": "https://macos.tymyrddin.dev/docs/malware/myths",
    "t": "Mac myths ",
    "c": "Mac myths  There are no viruses for Mac  On the contrary, that macOS has been less affected by viruses in the past has resulted in weaker defence mechanisms. And this myth is exactly what makes macOS attractive for virus creators and social engineers. Sleepy users and weakened defences. Apple quickly fixes vulnerabilities  Nope. In May 2019 Filippo Cavallarin discovered a vulnerability in the Gatekeeper, gave Apple 90 days to fix it, and having had no response, went public with it on his blog . Gatekeeper is the tool that prevents unauthorised apps from being installed on a Mac. And Filippo Cavallarin was not the first. Independent virus researchers who discover fresh security holes often get vague responses from Apple. And even when, the solution take a long time.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6d89c26a655f3c5bfcd7f946c3319525",
    "u": "https://macos.tymyrddin.dev/docs/services/messaging",
    "t": "Use a secure messaging service ",
    "c": "Use a secure messaging service  A secure messaging service is a critical tool for private and secure communications. In most countries, it is safe to assume that telecoms are recording all SMS message traffic. Signal is not as strong on privacy as it is on security. It collects some metadata, and relies on central servers to manage message flow and hold the metadata it does collect. Session is a fork of Signal. No geolocation data, device data, or metadata is collected. The Session network is decentralized, with no single point of failure, and no main server for bad guys to hack. Session moves messages using an onion routing system. And make it the default SMS messenger.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ee3a5cb39d38e3a2566126352ac35865",
    "u": "https://macos.tymyrddin.dev/docs/data/time-machine",
    "t": "Set up the time machine and backups in macOS ",
    "c": "Set up the time machine and backups in macOS  The Time Machine works by creating historic backups of your Mac. It keeps older copies of files even after you edit or delete them, until a time when you need more storage for newer backups. Thanks to these historic backups, you can travel back in time to restore your Mac’s data from days, weeks, or months ago. Requirements are a large speedy solid-state drive with two partitions: a partition for the Time Machine backup and the other partition to store files. Partitioning the drive  Connect the external hard drive to the Mac. Go to Applications -> Utilities and launch Disk Utility Select the external drive from the sidebar and click the Partition button. Use the Add (+) option to create a new partition and choose Name, Format, and Size for each partition by selecting it in the diagram. The Time Machine partition must use the Mac OS Extended (Journaled) format. The file storage partition can use any format. Choose ExFat if you plan to use it with Windows. Otherwise, choose Mac OS Extended (Journaled). Click Apply, followed by Partition. Set up time machine  Go to System Preferences -> Time Machine Click Select Disk and choose the Time Machine partition Time Machine backups will start from scratch from this date forward. After the first backup, you can automatically start a backup with Time Machine (check the Backup Up Automatically box), or start a backup manually by accessing the Time Machine menu and starting the backup from there. Backups for the file storage partition  Create separate backups for anything in your file storage partition. Acronis True Image Carbon Copy Cloner ChronoSync Get Backup Pro SuperDuper",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "935923c87edd8ad51a064d2488741922",
    "u": "https://macos.tymyrddin.dev/docs/malware/readme",
    "t": "Introduction ",
    "c": "Introduction  MacOS has built-in protection against malware . XProtect scans for malware using a database of virus signatures maintained by Apple, but is limited. Apple is not a dedicated security company, and it has not struggled much with malware in the past, leading to two major myths . Big Sur is available as a free upgrade, promising the most secure version of macOS. The biggest threats to a macOS come from potentially unwanted programs, adware, ransomware and other code that finds its way onto a Mac because it is bundled with legitimate-looking software or because it was downloaded as something else. Common signs of Mac malware: Extremely slow performance A browser homepage change Pop-ups and other intrusive ads Freeze-up and restarts Browser redirection Find these, or think you may have an infected system, or just wish to know more: Endpoint detection and response Malware analysis DIY: Scan and clean machine Catch and remove daemons and launch agents Analysing trojans",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b4dc7fc4686a1ed74eab1de1cb823eb7",
    "u": "https://macos.tymyrddin.dev/docs/privacy/metadata-images",
    "t": "Edit exif metadata in images ",
    "c": "Edit exif metadata in images  Native  Open Photos app on your Mac. With Photos tab selected in the left pane, rght click any thumbnail on the right and select Get Info. A window opens, showing the file name and format, camera data, and profile photos of people that Photos recognizes. Click in the window, and you can add or edit title, description, keywords and location. For more data: Open image in Finder. Click Tools > Show Inspector in the top toolbar. This opens a window containing four tabs. The first tab provides summary information, and clicking on the second tab reveals 5 more tabs: General, IPTC, EXIF, JFIF and TIFF. Click on these to see all the metadata information. ExifEdit  ExifEdit gives an intuitive way to edit EXIF & IPTC metadata for thousands of photos in a single click.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9125eebd7a5667fe9e789b23066ae9da",
    "u": "https://macos.tymyrddin.dev/docs/data/pwprotect",
    "t": "Password protect files and folders ",
    "c": "Password protect files and folders  You can protect all the files on your Mac by encrypting a Vault (or entire drive) with FileVault . If you consider FileVault a bit of an overkill for your purposes, you can password protect your files and folders in different ways. iWork suite documents  If you have Pages, Keynote, or Numbers files with sensitive information, you can password protect those files. Open the file you want to protect Go to File -> Set Password Enter a Password Verify the password If you want a hint to help you remember your password, enter a Password Hint Set Password PDF Files in Preview  Open the PDF file you want to protect (does not work for image files) Go to the File menu and then press the Option key. The Duplicate menu option becomes Save As. Select the Save As option. On the Save dialog box, check the Encrypt box towards the bottom. Enter a Password Verify the password Save To remove the password protection from a PDF file, open the file, enter the password, use the Option key to access the Save As option again and uncheck the Encrypt option on the Save dialog box. Save the file with a new name and delete the old password protected file. Microsoft Word files  Open the Word file you want to protect Click the Review tab, and then click Protect Document On the Password Protect dialog box, enter Password Optionally require a Password to modify the document Optionally add other Protection to the document Optionally Remove personal information from this file on save Save Microsoft PowerPoint and Excel files  Password protecting a Microsoft Excel workbook is similar to protecting a PowerPoint presentation, but the dialog box is different. Go to File -> Passwords Under Password to open, check the “Encrypt this presentation and require a password to open” box. On the Set a password for this presentation dialog box, enter New password Verify the password Click Set Password OK To remove the password from the presentation, open it, go to File -> Passwords, and uncheck the “Encrypt this presentation and require a password to open” box. Password protect folders  Disk Utility can erase, format, repair, and partition hard drives. It can also can create an encrypted disk image, or a single file that contains the entire contents of a drive or other media like external USB drives, CDs, or DVDs. Copy the files you want to protect into a folder Open Disk Utility Go to File -> New Image -> Image from Folder Select the folder you want to encrypt and click Choose. In box enter Enter a name for the disk image in the Save As box Where to store the DMG file Encryption type (128-bit or 256-bit AES) (Enter a Password and then Verify the password) Select read/write from the Image Format dropdown list Save A progress dialog box appears and a message saying that the operation was successful Click Done Use Eraser to securely delete the original files Disk Utility adds the disk image to your desktop. Double-click the disk image icon to access the files inside it. To access the files you added to the disk image, double-click on the DMG file and enter the password when prompted. Eject the disk image when you’re done using it, so the files are password protected again.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d1f266ac84b9294e67e8444cedc28d48",
    "u": "https://macos.tymyrddin.dev/docs/privacy/hexeditors",
    "t": "Remove metadata with hex editors ",
    "c": "Remove metadata with hex editors  The hexadecimal notation is almost universally used in computing - and not without a reason. There are sixteen hex digits - 0 to 9, and A to F (which correspond to decimal values 10 to 15), and each hex digit represents exactly four bits. Exactly two hex digits represent a byte, which can have a value from 00 to FF. A hex byte is the only kind of object a computer handles, and hex bytes are used to represent anything. For example, a hex byte 50 may represent the capital letter P, the processor command push eax, the decimal number 80, a colour component with 50% brightness, or whatever else lives in the digital world. And that means we have editors, hex editors, that can be used to view and change files, all files, on a very low level. As in, they can be used to remove metadata from any and all files. Usage in general  backup the file before using a hex editor on it. switch to ASCII mode, turn off “read only” mode, and start searching through the file. For example, when scrubbing pdf’s from creation and modification information look through the entire file for “created” (metadata appears in the PDF file more than once). If and when you find metadata, change to fake data or delete. Then repeat your search again for the terms “create”, “creation”, “modified”, and “modify”, and similarly either replace or delete the dates, once again being sure to repeat each search so that any potential multiple instances of the field can be located and modified or blanked out. Using software  iBored Online  Hexed.it HTML5/JS => will be cached on local machine and can then be used.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7f23e7a3778273bdfddb02ebe72a0800",
    "u": "https://macos.tymyrddin.dev/docs/services/email-services",
    "t": "Use secure email services ",
    "c": "Use secure email services  Mailfence , Belgium, provides a full suite of services, Messaging, s, Calendars, Groups, and Document storage. It can easily replace the G suite. It is a secure email suite that offers end-to-end encryption (through PGP support) and works with different email clients. There is some logging of IP address and some other data, and the code is not open source. Tutanota , Germany, is a small but serious player among secure email providers. It uses a hybrid encryption system that avoids some drawbacks of PGP, and is protected by the GDPR and other pro-privacy EU regulations. So, it does not work with PGP and there is no way to import existing emails (yet). ProtonMail , Switzerland, uses PGP encryption standards for email and stores all messages and attachments encrypted at rest on Swiss servers. ProtonMail has a unique feature for “self-destructing messages” and they have also added address verification and full PGP support. Articles  Reddit: Court forces mail provider Tutanota to perform a surveillance function Twitter: ProtonMail logging one of its users and providing IP address logs to French authorities Reading that carefully, if the message had already been encrypted and the IP address had been that of a VPN , these cases would not exist.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "04946ec5c5653825b875155e63b4d5ab",
    "u": "https://macos.tymyrddin.dev/docs/guards/soup",
    "t": "Alphabet soup ",
    "c": "Alphabet soup  Firewall  A firewall implements rules that prevent network traffic based on protocol, source/destination address, and/or source/destination port. Firewalls can implement access control lists and prevent the use of insecure protocols, such as blocking all traffic on TCP port 23 (Telnet’s default port). IDS  An IDS platform can analyse network traffic for patterns and recognize malicious attack patterns. It can create notifications, but it can not block the unwanted packets from entering the network. IDS can be deployed either at the host level or the network level. Host-based monitors (and protects) the specific host (for example a single PC) it is installed on. For example, a HIDS will look at log and config files for any unexpected rewrites. Network-based focuses on protecting an entire network. Usually, dedicated hardware appliances run such software. For example, a NIDS will look at the checksums in captured packets and message authentication integrity of systems such as SHA1. The fact that a NIDS is usually installed on a stand-alone piece of equipment means that it doesn’t drag down the processors of servers or PC’s. The activity of HIDS is not as aggressive as that of NIDS and can be implemented by a lightweight daemon on the computer which does not burn up too much CPU. Neither system generates extra network traffic. In addition to the two main types of IDS, there are also two main subsets of these IDS types: Signature-based Intrusion Detection System (SBIDS). An SBNIDS for example, tracks all the packets passing over the network and then compares them to a database containing attributes or signatures of familiar malicious threats. Anomaly-based Intrusion Detection System (ABIDS). An ABNIDS for example, tracks the traffic of a network and then compares it to an established measure (which could be machine learning based) and this allows the system to find what is normal for the network in terms of Ports, Protocols, Bandwidth, and other devices, and alerting administrators about any unusual or potentially malicious activity in the network. IPS  IPS combines the analysis functionality of an IDS with the ability to intervene and prevent the delivery of malicious packets. IPS interact with firewalls and software applications by adjusting settings. Incorrectly calibrated IPSs can cause havoc and bring your legitimate network activity to a halt.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "264ff24bc4555ff262d676a8c55b8035",
    "u": "https://macos.tymyrddin.dev/docs/authentication/login",
    "t": "Disable automatic login ",
    "c": "Disable automatic login  It is perhaps annoying to have to enter your password every boot, but it is a little price for preventing someone getting into your account and accessing your data. Go to Apple > System Preferences and click Users & Groups. Click Login Options at the bottom of the list of users on the left. Click the lock at the bottom of dialog box and enter your password when prompted. This allows you to make changes to the settings. Select Off from the Automatic login dropdown list. You will have to enter your password every time you boot your Mac.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "56817de221bf72b51eb450047c042b97",
    "u": "https://macos.tymyrddin.dev/docs/services/change-mac",
    "t": "Change MAC address ",
    "c": "Change MAC address  A MAC address identifies the device connected to a network and allows the network to track, restrict or allow access based on it. Routers identify and assign static IP addresses based on the MAC addresses of devices. Before you try to change the MAC address, you need to know the value that you want to use. Set the 2’s place bit (the “locally administered” bit) in the first byte, to differentiate it from a guaranteed globally unique MAC address. Usually the first three bytes an unicast MAC address is an “Organizationally Unique Identifier” (OUI) that the IEEE assigned to the manufacturer of your Ethernet device. Manufacturers are required to make sure they keep the last 3 bytes unique. Avoiding all of that knowledge, the MAC address generator tool can generate a valid address for you. If a specific MAC address, like 00:0a:95:9d:68:16 , is required: $ sudo ifconfig en0 00:0a:95:9d:68:16 To randomly generate new MAC address and assign it to en0 network interface: $ openssl rand –hex6 | sed ‘s/(..)/1:/g; s/.$//’ | xargs sudo ifconfig en0 ether When you restart your Mac computer, the Mac address reverts to the default.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8c1eec478819a32249470d950098b3c5",
    "u": "https://macos.tymyrddin.dev/docs/opsec/check-mail",
    "t": "Detecting fake emails and phishing ",
    "c": "Detecting fake emails and phishing  Fake emails  View the header info. Pay attention to the email address of a sender. It may imitate a legitimate sender. With only few characters altered or omitted, cybercriminals will often use an email address that closely resembles one from a reputable source. Look closely at the content: Hover your cursor over any links in the body of an email. Links not matching the text that appears raise a red flag. So does the use of URL shortening services. Email clients can be viewed in simple text instead of html, so one never forgets to do this. Poor grammar and sentence structure, misspellings, and inconsistent formatting can be other indicators of a possible phishing attempt. An unsolicited email requesting a user download and open an attachment is a common delivery mechanism for malware, even when it seems to come from a friend, or an employeur. A false sense of urgency or importance to help persuade a user to download or open an attachment without examining it first, completes this picture. Do not. Verify message source. Check the reply email. Reply and wait for the result. Phishing  Be wary of emails asking for confidential information. Don’t get pressured into providing sensitive information. Phishers like to use all kinds of social engineering. Learn what you can about it. Check a website’s privacy policy, especially whether it will or will not sell its mailing list. If so, do not register. Watch out for generic-looking requests for information. Never submit confidential information via forms embedded within email messages. Never use links in an email to connect to a website unless you are absolutely sure they are authentic.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "69f760d246e78ede0b214fc6961e1933",
    "u": "https://macos.tymyrddin.dev/docs/privacy/metadata",
    "t": "Remove metadata from files ",
    "c": "Remove metadata from files  Metadata is data about data. Metadata answers who, what, when, where, why, and how about every facet of the data that is being documented. Photos, and images in general, contain metadata. For photos this includes how large the picture is, colour depth, resolution, the date and time when it was created, the GPS coordinates of the location they were taken at, camera shutter setting details, and possibly even the name of the program used to edit them. Document metadata is information about one or more aspects of a document, spreadsheet, pdf file, that is not always visible to the person creating them, but can be found by the person who receives them next. Comments, track changes, hidden text, mark-ups, properties, attachments and bookmarks are all examples of document metadata. Office documents like pdf or Office automatically add author and organisation information to documents and spreadsheets. Web pages often include metadata in the form of meta tags. Description and keywords meta tags are commonly used to describe the Web page’s content. Most search engines use this data when adding pages to their search index. This type of metadata can be useful, but maybe you do not want to disclose this information on the web, because metadata can be used for other purposes as well: Metadata is collected by corporations for psychological manipulation in persuasion and advertising. Metadata also plays a number of important roles in computer forensics: It can provide corroborating information about the document data itself. It can reveal information that someone tried to hide, delete, or obscure. It can be used to automatically correlate documents from different sources. Metadata is used by hackers doing reconnaissance for an attack And last but not least, it can be used to correlate data in dragnet and targeted surveillance. Techniques for metadata removal  Metadata removal software like BleachBit Using a hex editor Edit exif metadata in images",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "191d8fbbc3a5524527870bb70c214311",
    "u": "https://macos.tymyrddin.dev/docs/services/ssh",
    "t": "Use SSH tunnels ",
    "c": "Use SSH tunnels  Secure Shell (SSH) can be used to securely acquire and use a remote terminal session and has other uses as well. You can use SSH to tunnel traffic, transfer files, mount remote file systems, and more. SSH also uses strong encryption, and you can set your SSH client to act as a Socks proxy. Once you have, you can configure applications on your computer – such as your web browser – to use the Socks proxy. The traffic enters the Socks proxy running on your local system and the SSH client forwards it through the SSH connection – this is known as SSH tunneling. This works similar to browsing the web over a Virtual Private Network (VPN) . From a web server perspective, traffic appears to be coming from the SSH server. The traffic between source and the SSH server is encrypted, so you can browse over an encrypted connection as you could with a VPN. You must configure each application to use the SSH tunnel’s proxy. Port forwarding or port mapping is a name given to the combined technique of: Translating the address and/or port number of a packet to a new destination. Possibly accepting such packet(s) in a packet filter (firewall). Forwarding the packet according to the routing table. SSH tunnels can be created in several ways using different kinds of port forwarding mechanisms. And you can protect SSH access with MFA . Tunnelling with local port forwarding  Imagine wikileaks being blocked using a proxy filter in a university network somewhere. An SSH tunnel can be used to bypass this restriction. Let’s name the machine in the university network socially-correct and a home machine home . The home machine has a public IP and is running an SSH server. The student in case has ssh user access on home and socially-correct has access to host:hostport (is not blocked). $ ssh -L localport:host:hostport user@home -N where: -L : port forwarding parameters localport : local port (choose a port that is not in use by other service) host : server that has the port (hostport) that you want to forward hostport : remote port -N : do not execute a remote command (you will not have the shell). user : user that has ssh access to the ssh server home : the machine/server running the ssh server that will be used for forwarding/tunneling For example, to create the SSH tunnel execute following from the socially-correct machine: $ ssh -L 9001:wikileaks.org:80 user@home Open a browser and go to http://localhost:9001 to see if the tunnel is working. The SSH client at socially-correct will connect to the SSH server running at home (usually running at port 22) binding port 9001 of socially-correct to listen for local requests thus creating an SSH tunnel between home and socially-correct. At the home end it will create a connection to wikileaks.org at port 80. So socially-correct doesn’t need to know how to connect to wikileaks.org. Only home needs to worry about that. The channel between socially-correct and home will be encrypted while the connection between home and wikileaks.org will be unencrypted. The home-to-wikileaks.org connection is only made when the browser makes the request, not at tunnel setup time. The SSH man pages say: -L port:host:hostport specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side. This works by allocating a socket to listen to port on the local side, and whenever a connection is made to this port, the connection is forwarded over the secure channel, and a connection is made to host port hostport from the remote machine. Port forwardings can also be specified in the configuration file. Only root can forward privileged ports. IPv6 addresses can be specified with an alternative syntax: port/host/hostport -N Do not execute a remote command. This is useful for just forwarding ports (protocol version 2 only). Local port forwarding can also be used to set up a VNC session between socially-correct and a home server. From socially-correct : $ ssh -L 5900:localhost:5900 user@home The localhost is relative to the gateway (home in this case), not the machine from where the tunnel is initiated. So this will make a connection to port 5900 of the home computer where the VNC client would be listening. Reverse tunnelling with remote port forwarding  To be able to SSH from the Internet into a machine behind a firewall, you need the machine in question to open an SSH connection to the outside world and include a -R tunnel whose “entry” point is the “remote” side of his connection. What if we wish to connect to an internal university website from home with a set-up like above in tunnelling with local port forwarding? The university firewall is blocking all incoming traffic. We can connect from home to the university internal network so that we can browse the internal site. We can initiate the tunnel from the socially-correct computer behind the firewall. This is possible since only incoming traffic is blocked and outgoing traffic is allowed. The client will now be at the home computer and instead of using the -L option, the -R option, which specifies a reverse tunnel is to be created, is used. From socially-correct : $ ssh -R 9001:internalsite.org:80 user@home The SSH client at socially-correct will connect to the SSH server running at home creating an SSH channel. The server will bind port 9001 on the home machine to listen for incoming requests that are then routed through the created SSH channel between home and socially-correct . Now it’s possible to browse the internal site by visiting http://localhost:9001 in a web browser on the home machine. The socially-correct machine for work at the university will then create a connection to internalsite.org and relay back the response to home via the created SSH channel. Even though the traffic is encrypted, the name resolution may not be encrypted => DNS leakage. Programs like firefox allow you to ensure that there is no such DNS leakage . For example, in Firefox, browse to about:config and make sure the setting for network.proxy.socks_remote_dns is set to true. Dynamic port forwarding  Dynamic port forwarding allows for configuring one local port for tunnelling data to all remote destinations. This requires Socket Secure SOCKS. At the client side of the tunnel a Socks proxy would be created and the application uses the Socks protocol to specify where the traffic should be sent when it leaves the other end of the ssh tunnel. In a set-up like used in local port forwarding and reverse port forwarding, from the socially-correct machine at university: $ ssh -D 9001 user@home SSH will create a Socks proxy listening in for connections at local port 9001 and when receiving a request routes the traffic via the SSH channel created between socially-correct and home. Configure the browser to point to the Socks proxy at port 9001 at localhost .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8505ea5f3dd8c4575172a574e6efdd63",
    "u": "https://macos.tymyrddin.dev/docs/guards/readme",
    "t": "Introduction ",
    "c": "Introduction  There are many types of devices and mechanisms within the security environment to provide a layered approach of defense. This is so that if an attacker is able to bypass one layer, another layer stands in the way to protect the network. Two of the most popular and significant tools used to secure networks are firewalls and intrusion detection systems. Choosing a firewall for a Mac  With a firewall, you can: Log hosts scanning services that aren’t running. Limit the services that applications can connect to. Segregate the local network into trust segments (Local Area Network (LAN), DeMilitarised Zone (DMZ), and Internet). Redirect ports to the hosts providing the service (Network address translation (NAT)). macOS has an built-in firewall , it is disabled by default, enable it with: Go to System Preferences -> Security & Privacy Click on the Firewall tab At the bottom of the window, click on the lock icon to enter your administrator password for changing the settings. Click the option to Turn On Firewall To configure the options for the firewall, click Firewall Options The built-in firewall on your Mac only blocks inbound traffic. It does not allow you to control outbound connections. If you download a piece of malware, your Mac’s firewall won’t prevent it from connecting to the internet and sending out information. If you’d like to be more secure, install an additional firewall. Murus Lite is an entry-stage firewall front end. It has inbound filtering and recording and can be used to safeguard applications. Although it is free, Murus Lite isn’t attempting to test or demonstrate. Instead, it is a fully-featured application that is a good beginning point for a new user. Scudo is a hybrid firewall for Mac that works as a combination of an outbound application-layer firewall and an inbound network-layer packet filter. The software offers enhanced protection to Mac’s network services from all the unwanted connections. It improves your privacy against remote computers trying to access your data through the network. LuLu is a free, open source firewall that aims to block outgoing traffic unless it’s explicitly approved by the user. Once installed, it will alert you about new or unauthorized attempts to create an outgoing network connection. Click the Allow or Block button to handle the connection. Radio Silence is the simplest firewall app for your Mac. After installation, the app automatically runs in the background without any menu bar icon or other visual indicators. Navigate to the Firewall tab and click the Block Application button. Once you add an app to the blacklist, it will no longer connect over the internet. Little Snitch is a host-based application firewall for Mac. The app provides detailed reports on processes, outgoing and incoming connections, ports, and protocols. It also shows the complete traffic history down to a one-minute interval time range. The Network Monitor shows a global map of the active connections from your system to the IP-derived or probable locations around the world in real-time. The left panel displays a list of apps sending and receiving data, while the right panel gives you a detailed summary. Choosing a HIDS for a Mac  Most of the HIDS tools for macOS are File Integrity Agents (FIAs) and use Error Detection algorithms. A FIA monitors the integrity and state of the files and objects on a machine. It creates a hash of all files to be monitored. That snapshot is periodically checked against the current hash of the files. If it detects changes to those files, then it alerts the administrator that an unauthorised access or change has taken place. OSSEC monitors the checksum signatures of all the log files to detect possible interference and any attempts to get to the root account.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "026e6148133ca2c51c801237d6922582",
    "u": "https://macos.tymyrddin.dev/docs/services/edit-hosts-file",
    "t": "Edit hosts file ",
    "c": "Edit hosts file  The hosts file is a system file on a device that lets you map specific domain names to an IP address. If you want to add new entries to the hosts file, you’ll need the IP address of the server that you want to map a hostname to. XXX.XXX.XXX.XXX some.domain.name The hosts file lets you override DNS entries for any domain name. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. Blocking is achieved by setting the IP address of the ad networks to a loopback address like 127.0.0.1 which will not return anything. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. If your device is infected with malware, then your hosts file may be compromised to included unknown entries for known domain names. That is NOT the IP address of your bank! This type of DNS attack is known as DNS pharming, and checking your hosts file can uncover potential infection. Open the Terminal application. (Click on the Finder icon and then go to Applications → Utilities) In the terminal, give the command sudo nano /private/etc/hosts Enter your administrator password after running the command Add as many entries as needed",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8fb92a8398a13350fdf5ca5087352012",
    "u": "https://macos.tymyrddin.dev/docs/services/readme",
    "t": "Introduction ",
    "c": "Introduction  Restrict which apps can run System integration protection (SIP) Use a VPN service Secure browsers that protect your privacy Use a secure messaging service Use a secure email service Use SSH tunnels Use a VPN service Use a firewall as a VPN fail-safe mechanism Use alternative DNS servers Use a Tor proxy Change MAC address Renew IP lease Edit hosts file",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3aec654b08be2ba08ddd46e6416dbdcd",
    "u": "https://macos.tymyrddin.dev/docs/authentication/mfa",
    "t": "Use multi-factor authentication (MFA) ",
    "c": "Use multi-factor authentication (MFA)  Many sites and applications offer two-factor authentication (2FA), also named multi-factor authentication (MFA). With 2FA enabled, logging into a website or application requires both a password and a unique code that is texted to your phone number or delivered via an authenticator app. You have to input this code in order to gain access to your account. Even if someone else has your password, they will not be able to break into your accounts if they can not get the code. When you use one of the authenticator apps included here, you bolster the password you know with the token, smartphone, or smartwatch that you have. Setting up MFA usually involves scanning a QR code on the site with your phone’s authenticator app. Note that you can scan the code to more than one phone, if you want a backup. Authenticator apps generate time-based, one-time passcodes (TOTP or OTP), which are usually six digits that refresh every 30 seconds. Once you set up MFA, every time you want to log in to a site, you enter the code into the secured app or site’s login page, and you’re in. The time limit means that if an adversary manages to get your one-time passcode, it won’t work for them after that 30 seconds. Something to look for when choosing one of these apps is whether it backs up the account info (encrypted, of course) in case you no longer have the phone you set everything up on. These all do (Google Authenticator does not). Authy Duo Mobile LastPass Authenticator Microsoft Authenticator",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b22c25aa085e39b564cacb1e46425dcc",
    "u": "https://macos.tymyrddin.dev/docs/guards/ossec",
    "t": "OSSEC ",
    "c": "OSSEC  OSSEC stands for Open Source HIDS Security. It is entirely free to use. As a host-based intrusion detection system, the program focuses on the log files on the computer where you install it. It monitors the checksum signatures of all the log files to detect possible interference. On Unix-like systems, it will monitor any attempts to get to the root account. Although OSSEC is an open-source project, it is owned by Trend Micro, a security software producer. How to Install OSSEC Agent on Mac OS",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "84e943d7a99cb64f77800159aa7e5cca",
    "u": "https://macos.tymyrddin.dev/docs/services/browsers",
    "t": "Secure browsers that protect your privacy ",
    "c": "Secure browsers that protect your privacy  DuckDuckGo Desktop browser for MacOS focuses on privacy that is not based on Chromium (as most would expect). Instead it relies on OS-provided rendering engines to build the browser (mostly WebKit). This makes it possible to remove all the unnecessary stuff usually available with popular web browsers. Brave is fast, secure, and privacy-focused by default. It has a built-in ad blocker and browser fingerprinting protection, while also giving you access to numerous add-ons and extensions. Ungoogled Chromium browser is an open source project to provide a Chromium browser, without the Google privacy issues. LibreWolf is a fork of Firefox focused on privacy, security, and freedom, only available for desktop operating systems. If the browser you choose is less secure and privacy-friendly, lock down the browser and the software it can invoke.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ac0e690853950ff13fe2577496ce6488",
    "u": "https://macos.tymyrddin.dev/docs/services/sip",
    "t": "System integration protection (SIP) ",
    "c": "System integration protection (SIP)  Apple introduced System Integration Protection (SIP), designed to protect the most vulnerable parts of the Mac: SIP protects a few core areas of the drive where the operating system is installed, including /System , /bin , /sbin , /usr (but not /usr/local ). Some symbolic links from /etc , /tmp , and /var are also protected, though the target directories themselves are not. The safety measure prevents processes without sufficient privileges (including admin users with root access) from writing to these folders and the files stored within. The technology also prevents other “risky” operations too, like code injection. Apple is concerned that changes made to these parts of your system could put your Mac at risk and cause damage to the OS. Locking out root admin access safeguards your Mac against sudo-level commands executed remotely and locally. If you want to use software that depends on modifications which change the way many core OS elements and first party apps function, you’re going to have to disable SIP first, and reenable it afterwards. I wouldn’t though. Why trust software that wants me to turn off such an important protection, even if only temporarily.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e3d9220499bac7f2870e063de76d9aa4",
    "u": "https://macos.tymyrddin.dev/docs/services/renew-lease",
    "t": "Renew IP lease ",
    "c": "Renew IP lease  A DHCP client can on occasion send information in DHCP requests: hostname, MAC address, operating system, and DHCP version. All operating systems provide their most recent IP address to the DHCP server. If you change your MAC address to minimise risk, best to also renew the IP leases on the router. Go to Apple menu -> System Preferences -> Network. In the list on the left, select the network service that needs a renewed IP address. Click Advanced, click TCP/IP, then click Renew DHCP Lease.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "158848630ba515b88c2fa2fb9c43a28d",
    "u": "https://macos.tymyrddin.dev/docs/services/vpn",
    "t": "Use a VPN service ",
    "c": "Use a VPN service  Internet providers are collecting your browsing data and handing this over to third parties (US, UK, Australia, and much of Europe). Public Wi-Fi remains a serious threat with adversaries targeting unsuspecting users. Many streaming services and websites restrict content to certain geographic locations. A VPN allows you to bypass such restrictions. A VPN will encrypt the connection and make the traffic unreadable. No logs policy  Meaning, not logging traffic, DNS requests, timestamps, bandwidth, IP address. NordVPN , Panama Mullvad , Sweden IVPN , Gibraltar Surfshark VPN , Netherlands Logs timestamps and bandwidth  Does not log directly identifiable information. ExpressVPN",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "44d9cc66de5b135d578ea386075a6c2c",
    "u": "https://macos.tymyrddin.dev/docs/opsec/browsing",
    "t": "Browse more safely ",
    "c": "Browse more safely  Keyloggers and other malware can be installed via a web page script which exploits a browser vulnerability. The program will automatically be launched when a user visits an infected site. Compromising a browser is relatively easy, and it is cross-platform, hence an often chosen target. Plus that browsers (for performance reasons) prefetch exposing users to more security risks by downloading more pages, or from un-requested sites (additionally compounded as drive-by downloads become more advanced and diverse). BeEF & other browser exploits, when not using browser vulnerabilities, rely on javascript. Choose a secure browser that protects your privacy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "92f6a361c141e1cc2d42ba5709a9b8d4",
    "u": "https://macos.tymyrddin.dev/docs/opsec/email-use",
    "t": "Use email securely ",
    "c": "Use email securely  Invented by Ray Tomlinson, email first entered limited use in the 1960s and by the mid-1970s had taken the form now recognized as email. It evolved, and so did its parasites: Email “spam”. A number of effective anti-spam techniques now largely mitigate the impact of spam by filtering or rejecting it for most users, but the volume sent is still very high, and increasingly consists not of advertisements, but malicious content or links. Phishing emails continue to be one of the most common initial attack vectors employed by attackers for malware delivery. Attacking the human element continues to be extremely effective. To infect a system, the attacker simply has to persuade a user to click on a link or open an attachment. Email spam and phishing methods typically use spoofing to mislead the recipient about the true message origin. Laws in many countries either allow or have loopholes in an existing law that allow the government to access stored emails without a warrant, and intelligence agencies can do and actually do so. Internet as well as intranet email may travel and be stored on networks and computers without the sender or the recipient having any control. During the transit time it is possible that third parties read or even modify the content. The ease and impersonality of email communications mean that the social norms that encourage civility do not exist and may be forgotten. Flaming, bullying, … To stay sane: Do not use public computers to access email with sensitive information. If you are not in a safe neighbourhood, use a VPN or Tor anonymity network to encrypt traffic from the user machine to a safer network. Use a privacy-focused email application (make sure not to use your own name or other personal information) GPG, PGP, SMEmail, can be used for end-to-end message encryption.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "aff08c998791d343735761cc01653e1d",
    "u": "https://windows.tymyrddin.dev/",
    "t": "Hardening Windows ",
    "c": "Hardening Windows  Version 0.1: These mitigations are all based on Windows 10. Supposedly, Windows 11 has better security . Some of these mitigations may still be applicable and useful. When we have an 11 key we will install, test it, and add mitigations. Accounts and authentication Introduction More secure login Require a password when resuming from a stand-by mode Make that more secure passwords Use a password manager Use multifactor authentication (MFA) Use a standard user account Protect SSH access with MFA Services and applications Introduction Start, stop, restart, enable, and disable services Restricting access to applications Block internet access to specific apps Maximise user account control (UAC) Unwanted application suggestions Secure browsers that protect your privacy Use a secure messaging service Use secure email services Use SSH tunnels Use a VPN service Make a VPN killswitch using routes Use alternative DNS servers Use a Tor proxy Change MAC address Renew IP lease Edit hosts file Data Introduction Create a restore point Enable full disk encryption using BitLocker File encryption Enable controlled folder access (CFA) Privacy Introduction Disable location tracking Disable Ad tracking by Microsoft Ad partners Turning devices on and off Remove metadata from files Edit exif metadata in images Remove metadata with hex editors Clean machine with BleachBit Malware Introduction Malware detection and removal Catch and remove malicious registry entries Analysing trojans Operations security Introduction Use email securely Detecting fake emails and phishing Browse more safely Check integrity of downloads ‘;–have i been pwned? Guards! Guards! Introduction Alphabet soup Windows intrusion detection systems",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f2d6516fd293cb2468c8f5e80e4ac3f5",
    "u": "https://windows.tymyrddin.dev/docs/services/odd-applications",
    "t": "Unwanted application suggestions ",
    "c": "Unwanted application suggestions  QuickTime is Apple’s video player, a current program on macOS, but the company hasn’t supported the Windows version since 2016, and TrendMicro sent out an urgent call to remove it . If you need a replacement for QuickTime, use VLC. CCleaner, once a trusted Windows app for cleaning junk, but its reputation went downhill after it was acquired by Avast. It became better again but is largely useless, as better tools and ways exist. Garbage like MyCleanPC or PC Optimizer Pro for cleaning your PC. These products range from useless to harmful. uTorrent was once considered the gold standard of torrenting software. Now a heap of ads, and in 2015, the app was found to bundle in cryptocurrency mining software without letting users know, wasting your system resources in the background to make money for the company. As in, a botnet of sorts. Try qBittorrent . Adobe Flash Player is no longer supported as of January 2021. It is blocked in all modern browsers, but if your machine still holds a local copy of Flash, remove it. A similar runtime plugin, Adobe Shockwave Player, was discontinued in 2019. Remove. Once common, Java is another media runtime to remove, both components: Java on the desktop, and the Java plugin for browsers (which is notorious for having security problems). Very few websites use it nowadays. Silverlight is a web framework, similar to Adobe Flash, that once enabled rich media content in your browser. Years ago, these plugins were necessary on a lot of websites. But now they’re deprecated and no longer useful. Google chrome extensions: Hola, The New NX, FindMeFreebies, Hover Zoom, All Antivirus Extensions, Any Unfamiliar Extensions. Toolbars like the Bing Bar, Google Toolbar, Ask Toolbar, Yahoo! Toolbar, or the Babylon Toolbar. Coupon Printer Manufacturer Bloatware. Anything from the manufacturer is probably not necessary, but it’s always good to double-check . Microsoft Bloatware, for example Store apps. Candy Crush Saga? Really??? WinRAR. 7-Zip is a free and simple tool that covers most people’s needs. … Tools  W3Techs Should I remove it?",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f7127af4d1128c0a937bf72be92acfdd",
    "u": "https://windows.tymyrddin.dev/docs/data/cfa",
    "t": "Enable controlled folder access (CFA) ",
    "c": "Enable controlled folder access (CFA)  Controlled folder access is supported on Windows Server 2019, Windows Server 2022, Windows 10, and Windows 11 clients. This feature has been tested against various ransomware samples. Controlled Folder Access achieved what it was designed to do; successfully block ransomware from encrypting files located in protected folders. Type “Windows Defender Security Center” in search box and Enter. Select Virus & threat protection -> Virus & threat protection settings option from the main window. Locate the Controlled folder access section. To enable the feature, click the On/Off toggle. Select the Protected folders sub-option underneath and add all the folders you want to restrict access to. The other sub-option underneath, Allow an app through Controlled folder access, will whitelist the apps that are allowed to access, edit, create or remove files from protected folders.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7ac776a892437bd563e2a128562a2b4e",
    "u": "https://windows.tymyrddin.dev/docs/authentication/mfa",
    "t": "Use multifactor authentication (MFA) ",
    "c": "Use multifactor authentication (MFA)  Many sites and applications offer two-factor authentication (2FA), also named multi-factor authentication (MFA). With 2FA enabled, logging into a website or application requires both a password and a unique code that is texted to your phone number or delivered via an authenticator app. You have to input this code in order to gain access to your account. Even if someone else has your password, they will not be able to break into your accounts if they can not get the code. When you use one of the authenticator apps included here, you bolster the password you know with the token, smartphone, or smartwatch that you have. Setting up MFA usually involves scanning a QR code on the site with your phone’s authenticator app. Note that you can scan the code to more than one phone, if you want a backup. Authenticator apps generate time-based, one-time passcodes (TOTP or OTP), which are usually six digits that refresh every 30 seconds. Once you set up MFA, every time you want to log in to a site, you enter the code into the secured app or site’s login page, and you’re in. The time limit means that if an adversary manages to get your one-time passcode, it won’t work for them after that 30 seconds. Something to look for when choosing one of these apps is whether it backs up the account info (encrypted, of course) in case you no longer have the phone you set everything up on. These all do (Google Authenticator does not). It’s a choice. Risks either way. Authy Duo Mobile LastPass Authenticator Microsoft Authenticator",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b31a576ceffe356fc29d0ab73588c762",
    "u": "https://windows.tymyrddin.dev/docs/guards/readme",
    "t": "Introduction ",
    "c": "Introduction  There are many types of devices and mechanisms within the security environment to provide a layered approach of defense. This is so that if an attacker is able to bypass one layer, another layer stands in the way to protect the network. Two of the most popular and significant tools used to secure networks are firewalls and intrusion detection systems. Choosing a firewall for a Windows PC  With a firewall, you can: Log hosts scanning services that aren’t running. Limit the services that applications can connect to. Segregate the local network into trust segments (Local Area Network (LAN), DeMilitarised Zone (DMZ), and Internet). Redirect ports to the hosts providing the service (Network address translation (NAT)). Windows comes with a built-in firewall in Windows 10, but this firewall may be turned off by default. Turn it on via Settings: Under Windows Settings section, click Update & Security. Select Windows Defender and then click Open Windows Defender Security Center. Choose Firewall & network protection and choose a network profile. Under the Windows Defender Firewall section, switch Off to On. In order to allow a specific application to pass through your Windows Firewall, you have to add it to the list of other permitted applications. You can do this by clicking Allow an app or feature through Windows Defender Firewall. If you’d like to be more secure, install a firewall (none of which offer exploit attack protection, by the way). ZoneAlarm Comodo TinyWall Choosing a HIDS for a Windows PC  Most of the HIDS tools for Windows are EventLog Analyzers.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7027c2ec2d34ca5e3663e08501f4c588",
    "u": "https://windows.tymyrddin.dev/docs/privacy/metadata",
    "t": "Remove metadata from files ",
    "c": "Remove metadata from files  Metadata is data about data. Metadata answers who, what, when, where, why, and how about every facet of the data that is being documented. Photos, and images in general, contain metadata. For photos this includes how large the picture is, colour depth, resolution, the date and time when it was created, the GPS coordinates of the location they were taken at, camera shutter setting details, and possibly even the name of the program used to edit them. Document metadata is information about one or more aspects of a document, spreadsheet, pdf file, that is not always visible to the person creating them, but can be found by the person who receives them next. Comments, track changes, hidden text, mark-ups, properties, attachments and bookmarks are all examples of document metadata. Office documents like pdf or Office automatically add author and organisation information to documents and spreadsheets. Web pages often include metadata in the form of meta tags. Description and keywords meta tags are commonly used to describe the Web page’s content. Most search engines use this data when adding pages to their search index. This type of metadata can be useful, but maybe you do not want to disclose this information on the web, because metadata can be used for other purposes as well: Metadata is collected by corporations for psychological manipulation in persuasion and advertising. Metadata also plays a number of important roles in computer forensics: It can provide corroborating information about the document data itself. It can reveal information that someone tried to hide, delete, or obscure. It can be used to automatically correlate documents from different sources. Metadata is used by hackers doing reconnaissance for an attack And last but not least, it can be used to correlate data in dragnet and targeted surveillance. Techniques for metadata removal  Metadata removal software like BleachBit Using a hex editor Edit exif metadata in images",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e53d358cf3fec4ce67ca53bba87f8947",
    "u": "https://windows.tymyrddin.dev/docs/services/vpn",
    "t": "Use a VPN service ",
    "c": "Use a VPN service  Internet providers are collecting your browsing data and handing this over to third parties (US, UK, Australia, and much of Europe). Public Wi-Fi remains a serious threat with adversaries targeting unsuspecting users. Many streaming services and websites restrict content to certain geographic locations. A VPN allows you to bypass such restrictions. A VPN will encrypt the connection and make the traffic unreadable. No logs policy  Meaning, not logging traffic, DNS requests, timestamps, bandwidth, IP address. NordVPN , Panama Mullvad , Sweden IVPN , Gibraltar Surfshark VPN , Netherlands Logs timestamps and bandwidth  Does not log directly identifiable information. ExpressVPN",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3b21fcd029fd7b3d38176a1c634d4f51",
    "u": "https://windows.tymyrddin.dev/docs/malware/analysing-trojans",
    "t": "Analysing trojans ",
    "c": "Analysing trojans  Check file properties. Be careful not to click on any links or attachments in the email accidentally. Is it what it seems to be? Run the file in a virtual machine and analyse it. Use an online Sandbox service. Related  Malware sandboxes Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d1d5aa12dce71562fe71bf7af4f5f0e2",
    "u": "https://windows.tymyrddin.dev/docs/authentication/password-manager",
    "t": "Use a password manager ",
    "c": "Use a password manager  The majority of people use very weak passwords and reuse them on different websites. How are you supposed to use strong, unique passwords on all the websites you use? The solution is a password manager. Password managers store your login information for all the websites you use and help you log into them automatically. They encrypt your password database with a master password — the master password is the only one you have to remember. Managers  Dashlane 1Password Bitwarden It does not protect from keyloggers  Most password manager work by copy-pasting data quickly from your manager to the field (on the website) or by simulating keystrokes for all the data on file. A keylogger captures keystrokes and would capture all passwords entered by a password manager that simulated keystrokes. Nearly all keyloggers even include the capability to take screenshots at particular intervals of time and save all the contents of the clipboard to a file. The last bit is important, because it sort of renders even password managers that use the clipboard to fill in these forms useless. The real solution to preventing these attacks is to monitor your system for any keyloggers or use some sort of AV solution .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "17cdd321a5a809b48081d1f60f1838d9",
    "u": "https://windows.tymyrddin.dev/docs/opsec/check-mail",
    "t": "Detecting fake emails and phishing ",
    "c": "Detecting fake emails and phishing  Fake emails  View the header info. Pay attention to the email address of a sender. It may imitate a legitimate sender. With only few characters altered or omitted, cybercriminals will often use an email address that closely resembles one from a reputable source. Look closely at the content: Hover your cursor over any links in the body of an email. Links not matching the text that appears raise a red flag. So does the use of URL shortening services. Email clients can be viewed in simple text instead of html, so one never forgets to do this. Poor grammar and sentence structure, misspellings, and inconsistent formatting can be other indicators of a possible phishing attempt. An unsolicited email requesting a user download and open an attachment is a common delivery mechanism for malware, even when it seems to come from a friend, or an employeur. A false sense of urgency or importance to help persuade a user to download or open an attachment without examining it first, completes this picture. Do not. Verify message source. Check the reply email. Reply and wait for the result. Phishing  Be wary of emails asking for confidential information. Don’t get pressured into providing sensitive information. Phishers like to use all kinds of social engineering. Learn what you can about it. Check a website’s privacy policy, especially whether it will or will not sell its mailing list. If so, do not register. Watch out for generic-looking requests for information. Never submit confidential information via forms embedded within email messages. Never use links in an email to connect to a website unless you are absolutely sure they are authentic.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d1edc50cca1985b4035bcd0a4cb09baa",
    "u": "https://windows.tymyrddin.dev/docs/data/disk-encryption",
    "t": "Enable full disk encryption using BitLocker ",
    "c": "Enable full disk encryption using BitLocker  Enabling full disk encryption minimizes the chance that data on your computer will ever be misused. Requirements  Windows 10 Pro and Windows 10 Enterprise include BitLocker, Windows 10 Home does not. A TPM chip. To check if your machine has a TPM chip: Type tpm.msc in the search box, and press enter. In the following window, check the TPM status. On some systems, TPM chips are disabled by default, and you will need to enable the chip in the BIOS menu: Under Security settings, look for a TPM subsection. Most likely it will allow Activation/Enabling by ticking some box or a toggle of sorts. If there is no TPM chip on your motherboard, you can still enable Bitlocker by editing the “Require additional authentication at startup” group policy. Enable via Control Panel  Either Control Panel -> Bitlocker Drive Encryption OR System and Security -> Bitlocker Drive Encryption Expand the drive you want to enable Bitlocker on, and click on the Turn on Bitlocker hyperlink If your TPM is already enabled, you will directly be brought to the BitLocker Startup Preferences selection window. If not: Go through the Bitlocker Drive Encryption startup by clicking on Next. Eject any connected USB drives and remove any CDS/DVDs sitting idle in the optical disc drive. Click on Shutdown. Follow the instructions that appear on the screen to activate the TPM. Activating the module is as simple as pressing a key (varies depending on manufacturer). The computer will most likely shut down again once you activate the TPM; turn on your computer back on. Choose to enter a password at every startup or connect a USB/Flash drive (Smart Card) containing the startup key. The latter is somewhat of a dangerous option. If the USB drive holding the key is damaged or lost you may lose access to the drive. Set a strong password and re-enter it to confirm. Next. Keep the recovery key securely locked away on both (dedicated) USB storage and paper. Encrypt a drive  Choose to either encrypt the entire hard drive or only the part used. On old buckets where most of the storage space is already being used, do the whole hard drive. On new machines, or machines with little data, choose to encrypt only the space that is currently filled with data. Bitlocker will automatically encrypt any new data you add to the disk. Choose encryption modes. Select the New encryption mode if the disk is a fixed one. Select compatible mode if you are encrypting a removable hard drive or USB flash drive. Depending on your system Run BitLocker system check (OR) Start encrypting Restart the computer to initiate the encryption process (can take from 20 minutes to hours) Now every time you boot on your computer, you will be prompted to enter the passkey in order to access the encrypted files.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1dd3ceb996fd934acfdbe7a7e04c3efd",
    "u": "https://windows.tymyrddin.dev/docs/services/block-internet-access",
    "t": "Block internet access to specific apps ",
    "c": "Block internet access to specific apps  There is a simple way to restrict internet access to specific apps in Windows 10 with the Windows Defender Firewall. Only restrict internet access to apps that do not need the internet to function properly. Examples  Type in Windows Defender Firewall in search box and open it. Go to Advanced Settings on the left sidebar. This will open a new window. Select Outbound Rules on the left sidebar. Go to New Rule on the right side of the window. Choose Program on the new window, and then click on Next. Next to This Program Path, click on the Browse button. Find the app you want to restrict internet access for. Click on Next again. Click on the Block the Connection circle, and then Next. Check the Domain, Private, and Public boxes and click Next. Give the rule a name and description. Finish.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3ffe1f2bfff0e0b56667f3f063912eea",
    "u": "https://windows.tymyrddin.dev/docs/services/max-uac",
    "t": "Maximise user account control (UAC) ",
    "c": "Maximise user account control (UAC)  Windows was designed as a single-user desktop system and has had various functionality added to it over time to address the weaknesses of the original design. A major weakness is that a desktop Windows user is also an admin-level user. User Account Control (UAC) was introduced in Windows Vista to create more of a barrier to installation and requires users to specifically authorise certain actions by clicking an OK button when prompted. By requiring administrator privileges to install programs, it is harder to deploy malware. In the search box type “Change user account control” and select the first result Move slider to Always notify me up top and click on OK Now the machine always asks for the user’s permission before making any changes. And, the weakest link in any security chain is people. While these privilege escalation tools are fully functional, many people will simply type in their administrator password, or click the OK button to allow highly privileged activities to occur whenever the prompt comes up, without further thought. In fact, this opens up another attack route for privilege escalation by an adversary. Presenting people with a spoofed pop-up box asking for the password, will usually work. For better separation, you can create a standard Windows account yourself.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "977c5ea8297420a0016a3279bd13b103",
    "u": "https://windows.tymyrddin.dev/docs/opsec/browsing",
    "t": "Browse more safely ",
    "c": "Browse more safely  Keyloggers and other malware can be installed via a web page script which exploits a browser vulnerability. The program will automatically be launched when a user visits an infected site. Compromising a browser is relatively easy, and it is cross-platform, hence an often chosen target. Plus that browsers (for performance reasons) prefetch exposing users to more security risks by downloading more pages, or from un-requested sites (additionally compounded as drive-by downloads become more advanced and diverse). BeEF & other browser exploits, when not using browser vulnerabilities, rely on javascript. Choose a secure browsers that protect your privacy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2243d157be8d2f656d63cdee40cf9bc8",
    "u": "https://windows.tymyrddin.dev/docs/authentication/resuming",
    "t": "Require a password when resuming from a stand-by mode ",
    "c": "Require a password when resuming from a stand-by mode  A screensaver password and a sleep/stand-by password are different settings. Screensaver  It is likely that your screensaver starts up before your computer goes to sleep, so that may be a better choice on a desktop. In searchbox type “Change screen saver”, then press Enter. In the Screen Saver Settings window, check the box On resume, display logon screen. OK Sleep/stand-by  A laptop is put to sleep when by closing the lid. A screensaver would not be active, and a screensaver password not needed. For a sleep/stand-by password: Control Panel -> Power Options On the left choose Require a password on wakeup You may have to click the link that says “Change settings that are currently unavailable” Select Require a password You will be able to wake the computer with your local password .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "524bc89a2bfcdbdb421e3488d7d6b831",
    "u": "https://windows.tymyrddin.dev/docs/services/restrict-services",
    "t": "Start, stop, restart, enable, and disable services ",
    "c": "Start, stop, restart, enable, and disable services  You must be signed in as an administrator to be able to do these. If you stop, start, or restart a service, any dependent services are also affected. Starting a service does not automatically restart its dependent services. Changing the default service settings may prevent key services from running correctly. It is especially important to use caution when changing the Startup type setting of services that are configured to start automatically. Some services, such as Remote Procedure Call (RPC), Event Log, and Plug and Play, cannot be stopped by using the Services snap-in window or the net stop command. These services are required for the operating system to function properly. Create a restore point before making changes to the services. If you disabled the wrong service and lost access to the computer, then try booting into Safe Mode to change the service back. “Startup Type” for Service  Automatic - With a service in this state, it will start at boot time. Some services, when no longer required, will also automatically stop when not needed. If you find you do not need a service, place it into Manual or Disabled. Automatic (Delayed Start) - With a service in this state, it will start just after boot time. Some services, when no longer required, will also automatically stop when not needed. If you find you do not need a service, place it into Manual or Disabled. Automatic (Delayed Start, Trigger Start) - With a service in this state, it will start just after boot when specifically called. Manual (Trigger Start) - This is a version of Manual mode that allows Windows to start a service when specifically called and Microsoft’s answer to “too many services running all the time”. Manual - Manual mode allows Windows to start a service when needed. However, very few services will start up when required in Manual mode. If you find you need a service, place it into Automatic. Disabled - This setting will stop a service from starting, even if needed. Errors in the Event Viewer will show up complaining of that fact. Some services, while Disabled, will constantly complain. However, this situation is taken care of if placed in Manual. The service descriptions identifies those that should be in Manual vice Disabled. Examples  Services window  Open the Services snap-in window (open the Run dialog, type services.msc OR Administrative Tools -> Services) Choose a service and double click it. You can Change its “Startup Type” (OR) Click the Stop button (OR) Enable/start a service: If the Startup type of the service is set to Disabled, then you will need to change it to either Manual, Automatic, or Automatic (Delayed Start) before you click the Start button (OR) Disable a service: If the service shows a status of running, then click/tap on the Stop button, and wait until the service status shows as stopped before you diable it. Using net Command  Requires the elevated command prompt, knowing the service name, and the double quotes. The Display name of a service is the name displayed in the Services snap-in window, and in the service’s properties. net stop \"service name\" net stop \"display name of service\" net start \"service name\" net start \"display name of service\"",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "be584bad1285129f01d3b408c84762a8",
    "u": "https://windows.tymyrddin.dev/docs/services/change-mac",
    "t": "Change MAC address ",
    "c": "Change MAC address  A MAC address identifies the device connected to a network and allows the network to track, restrict or allow access based on it. Routers identify and assign static IP addresses based on the MAC addresses of devices. Before you try to change the MAC address, you need to know the value that you want to use. Set the 2’s place bit (the “locally administered” bit) in the first byte, to differentiate it from a guaranteed globally unique MAC address. Usually the first three bytes an unicast MAC address is an “Organizationally Unique Identifier” (OUI) that the IEEE assigned to the manufacturer of your Ethernet device. Manufacturers are required to make sure they keep the last 3 bytes unique. Avoiding all of that knowledge, the MAC address generator tool can generate a valid address for you. Device Manager  In the Device Manager window, click the arrow next to Network adapters. Right-click the adapter for the network card that you want to change. Choose Properties from the menu. Select the Advanced tab. Select Network Address in the Property displayed list. Type the new MAC address value on the right side. Press the OK button. Control Panel  In the Control Panel window, search for “network connections” and choose “View network connections” in the results. Right-click on the network connection you want to change. Choose Properties from the menu. In the Properties window, click the Configure button. In the new Properties window that pops up, select the Advanced tab. Select Network Address in the Property displayed list. Type the new MAC address value on the right side. Press the OK button.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f2437a5075f6daf9c4871476c33a6a6a",
    "u": "https://windows.tymyrddin.dev/docs/services/tor-proxy",
    "t": "Use a Tor proxy ",
    "c": "Use a Tor proxy  Tor proxy  Install: $ sudo apt update $ sudo apt install tor Check it is installed: $ tor --version Tor version 0.4.6.9. Get your IP address: $ curl ifconfig.me; echo [IP address] Run the same command but preface it with torsocks. The command is now run through the tor client instead: $ torsocks curl ifconfig.me; echo [Some Tor IP address] To use the Tor network by default for shell commands, torify your shell with this command: $ source torsocks on Tor mode activated. Every command will be torified for this shell. Test with (must now be []): $ curl ifconfig.me; echo [Some Tor IP address] Notes  If a government makes their own national internet, or routes traffic through specific servers to use deep packet inspection (DPI), running Tor may not provide security if the government is able to see the entire path. Sometimes the Tor network is censored, and clients can’t connect to it. An increasing number of censoring countries are using Deep Packet Inspection (DPI) to classify Internet traffic flows by protocol. While Tor uses bridge relays to get around a censor that blocks by IP address, the censor can use DPI to recognize and filter Tor traffic flows even when they connect to unexpected IP addresses. With pluggable transports, censorship against Tor can be bypassed. Not only that. If an attacker can see your traffic, and can see the website you’re visiting, even with a path outside the adversary’s control - they will still be able to correlate the traffic and learn you are visiting the website. If the same connection (the same set of relays) were to be used for a longer period of time a Tor connection could be vulnerable to statistical analysis, which is why the client software changes the entry node every ten minutes.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6aede37dd8d610100aa023a3723b5cac",
    "u": "https://windows.tymyrddin.dev/docs/services/edit-hosts-file",
    "t": "Edit hosts file ",
    "c": "Edit hosts file  The hosts file is a system file on a device that lets you map specific domain names to an IP address. If you want to add new entries to the hosts file, you’ll need the IP address of the server that you want to map a hostname to. XXX.XXX.XXX.XXX some.domain.name The hosts file lets you override DNS entries for any domain name. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. Blocking is achieved by setting the IP address of the ad networks to a loopback address like 127.0.0.1 which will not return anything. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. If your device is infected with malware, then your hosts file may be compromised to included unknown entries for known domain names. That is NOT the IP address of your bank! This type of DNS attack is known as DNS pharming, and checking your hosts file can uncover potential infection. Windows  To edit the hosts file ( C:\\Windows\\System32\\Drivers\\etc\\hosts ) on Windows, you will need Administrator access. Right-click on your text editor’s icon (for example Notepad++) and choose //Run as administrator//. Go to File → Open in the text editor and navigate to C:\\Windows\\System32\\drivers\\etc\\ From the list, click on the hosts file and choose Open Add as many new entries as needed",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "54e22b5628bae6a435e99931d38a6530",
    "u": "https://windows.tymyrddin.dev/docs/services/renew-lease",
    "t": "Renew IP lease ",
    "c": "Renew IP lease  A DHCP client can on occasion send information in DHCP requests: hostname, MAC address, operating system, and DHCP version. All operating systems provide their most recent IP address to the DHCP server. If you change your MAC address to minimise risk, best to also renew the IP leases on the router. Windows  Using a /renew switch (This command won’t work if the computer is configured to use a static IP address): C : \\ > ipconfig / renew",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "13672a7d5524091c5421a5b9a4544cb8",
    "u": "https://windows.tymyrddin.dev/docs/malware/readme",
    "t": "Introduction ",
    "c": "Introduction  Windows has been struggling with malware for years and thus has decent protection layers built-in. Microsoft’s Defender is pretty good at detecting malware files, blocking exploits and network-based attacks, and flagging phishing sites. It even includes simple PC performance and health reports as well as parental controls with content filtering, usage limitations, and location tracking. Its malware detection rates are lower than for many third-party competitors and content filters are limited to the Microsoft Edge browser. Common signs of Windows 10 malware: Ads pop up in unexpected places, frequently Machine is running slower than usual Machine is consuming more power than necessary Strange behaviour, such as installing programs without your consent, even after rebooting it. Find these, or think you may have an infected system, or just wish to know more: Endpoint detection and response Malware analysis DIY: Malware detection and removal Catch and remove malicious registry entries Analysing trojans",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "af8d6c1d1c793758588aee1f33b38523",
    "u": "https://windows.tymyrddin.dev/docs/services/vpn-fail-open",
    "t": "Make a VPN killswitch using routes ",
    "c": "Make a VPN killswitch using routes  If you simply add a VPN using common instructions, it generally “fails open”. That means, if the VPN breaks down, because the connection is interrupted, traffic will be sent without the VPN. It is much safer when it “fails closed”, meaning that when the VPN connection breaks down, the whole internet connection must be down as long as the VPN connection is not restored. If your chosen VPN does not include being able to set a kill switch, you can use routes as a fail-safe mechanism: Make sure you’re connected to the OpenVPN server: Run the Command Prompt with admin rights. Delete the default route when the OpenVPN connection is established. > route delete 0.0.0.0 Now the default routing method is deleted, making VPN the only access method to the internet. Your internet connection will be cut off when VPN is inaccessible. The operating system will remain stasis until it can access that route again. Note that this state is ot persistent. If the router reboots or the adapter is disabled, the settings will be taken to a default state. To manually restore the default settings: Go to Control Panel -> Network and Internet -> Network and Sharing Center. Click Change adapter settings. Disable and then enable it again.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "849852b1f88396696d4707f4671ea3b4",
    "u": "https://windows.tymyrddin.dev/docs/opsec/integrity-downloads",
    "t": "Check integrity of downloads ",
    "c": "Check integrity of downloads  When downloading an ISO image of, for example, the latest Linux distro, installing or upgrading packages, or downloading software, you can verify the files have downloaded correctly and securely by using checksums. Checksums ensure the integrity of data portions for data transmission or storage. Checksums is a simple error-detection scheme in which each transmitted message is accompanied by a numerical value based on the number of set bits in the message. The receiving station then applies the same formula to the message and checks to make sure the accompanying numerical value is the same. If not, the receiver can assume that the message has been garbled (or was altered). Verifying downloaded software  When downloading software, .iso s and .deb s and the like, download the xxxsum (choose from what is available) as well as the software and check. Open Command Prompt or PowerShell and type: > certutil -hashfile [file_name] [hash-algorithm] For example: > certutil -hashfile .\\some-file.iso sha256sum and compare the output from the command with the key listed in the associated sha256 file.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5695d8dddd38e843f47d40e536d04836",
    "u": "https://windows.tymyrddin.dev/docs/services/email-services",
    "t": "Use secure email services ",
    "c": "Use secure email services  Mailfence , Belgium, provides a full suite of services, Messaging, s, Calendars, Groups, and Document storage. It can easily replace the G suite. It is a secure email suite that offers end-to-end encryption (through PGP support) and works with different email clients. There is some logging of IP address and some other data, and the code is not open source. Tutanota , Germany, is a small but serious player among secure email providers. It uses a hybrid encryption system that avoids some drawbacks of PGP, and is protected by the GDPR and other pro-privacy EU regulations. So, it does not work with PGP and there is no way to import existing emails (yet). ProtonMail , Switzerland, uses PGP encryption standards for email and stores all messages and attachments encrypted at rest on Swiss servers. ProtonMail has a unique feature for “self-destructing messages” and they have also added address verification and full PGP support. Articles  Reddit: Court forces mail provider Tutanota to perform a surveillance function Twitter: ProtonMail logging one of its users and providing IP address logs to French authorities Reading that carefully, if the message had already been encrypted and the IP address had been that of a VPN , these cases would not exist.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2b579ce55d01f323669c42df25af64c2",
    "u": "https://windows.tymyrddin.dev/docs/opsec/hibp",
    "t": "‘;–have i been pwned? ",
    "c": "‘;–have i been pwned?  ‘;–have i been pwned? (HIBP) is a database of several billion email addresses (and, separately, passwords) that have appeared in a publicly known past data breach. The service creates an SHA-1 hash of the submitted email address and passes the first six characters of that to HIBP’s hash range query API. HIBP then returns a range of possible matches, if any, to the six character string, without ever handling the full email address. Check if you have an account that has been compromised in a data breach, and if so, change your password and change it in any other place where you’ve used that password. Better yet, never use a password twice, and consider using a password manager.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3f7242b04a77966e9c394a0331557bb6",
    "u": "https://windows.tymyrddin.dev/docs/privacy/metadata-images",
    "t": "Edit exif metadata in images ",
    "c": "Edit exif metadata in images  Native  Click right then properties on the Image file Click on the Details In this tab, at the bottom left, click on “Delete properties and personal information” Select Create a copy with all possible properties removed or Remove the following properties from this file, and select the properties you want to remove. In Origin, you can edit the Author, Data taken, Date acquired, and Copyright. For more on metadata on Windows: The Details tab divides metadata properties in a number of sections, different for each file type. The image file is divided in six sections. The first section is called Description, and you can click the value field for Title, Subject, Tabs, Comments, and edit its information. Image shows relevant information about the image, all of which is automatically added and cannot be modified. The Camera section includes the details of the camera that was used to take the picture. Some of these fields can be modified. The Advanced photo section shows fields useful for photographers. Only some fields can be edited. File shows file name and type, location path, date created and modified, owner, and computer name where the file resides. These fields can not be edited. Using IrfanView  This may become complicated if needing to remove EXIF data on multiple images from a complete folder. IrfanView is a free image viewer software and photos that also gives the possibility to remove all data from an image or photo file. When saving an image, an option “Keep Original EXIF data” is present. Unchecking the option removes all EXIF data from the image file. Can be done in bulk. From the File -> Batch Conversion / rename menu, data on several image files can be deleted in one click.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "bb059a0b1fdc6ee35520851c51c66a57",
    "u": "https://windows.tymyrddin.dev/docs/services/restrict-access",
    "t": "Restricting access to applications ",
    "c": "Restricting access to applications  Examples  Program Blocker  There are many third-party programs on the Internet that you can use to restrict applications. They will simply lock the applications and password-protect them. Try AskAdmin or Program Blocker Restrict application access to email application  Go to Settings -> Privacy Click on Email from the left menu Toggle off the app access to emails. This will ensure that applications have no access to your emails, unless … Under the “Choose app that can access and send email” section, you can allow access to any specific applications that need email accessed. Any application to users using Group Policy Editor  This method is only possible if you have Windows 10 Pro or Enterprise: In the search box, type gpedit.msc , and select OK. Click on User Configuration on the left sidebar. Go to Administrative Templates folder. Go to the System folder. Locate the Don’t run specified Windows applications file on the right pane. Double-click on it. This will open a new window. On the left side of the window, check the Enabled circle. Under Options, go to Show. Type in the name of the app you want to restrict access to. Don’t forget to add the .exe extension after the name of the app. Apply. OK.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0516c474dd45bdbbb39c38c20d8284cf",
    "u": "https://windows.tymyrddin.dev/docs/malware/clean-registry",
    "t": "Catch and remove malicious registry entries ",
    "c": "Catch and remove malicious registry entries  Automagically  Restoro Iolo System Mechanic Manually  Windows Registry is one of the most important built-in tools on your Windows computer. Registered malware is not uncommon. Check the Windows Registry for malware because any operation on your PC can make a footprint in it. And you can remove malware from the Windows Registry. Create a system restore point Run regedit to open the Registry Editor Go to HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion Scroll down and find the folders which start with Run Click each folder to open the program list Be careful. Not all are malicious. Check for: Misspelled names Unfamiliar programs Search with DuckDuckGo to find confirmation either way If it turns out malicious, right-click on that entry and select Delete to remove it from Windows Registry. Also look in: HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\explorer\\User Shell Folders HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\explorer\\Shell Folders Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "501d65ca5ae4bbc80c9cff53c0777368",
    "u": "https://windows.tymyrddin.dev/docs/guards/soup",
    "t": "Alphabet soup ",
    "c": "Alphabet soup  Firewall  A firewall implements rules that prevent network traffic based on protocol, source/destination address, and/or source/destination port. Firewalls can implement access control lists and prevent the use of insecure protocols, such as blocking all traffic on TCP port 23 (Telnet’s default port). IDS  An IDS platform can analyse network traffic for patterns and recognize malicious attack patterns. It can create notifications, but it can not block the unwanted packets from entering the network. IDS can be deployed either at the host level or the network level. Host-based monitors (and protects) the specific host (for example a single PC) it is installed on. For example, a HIDS will look at log and config files for any unexpected rewrites. Network-based focuses on protecting an entire network. Usually, dedicated hardware appliances run such software. For example, a NIDS will look at the checksums in captured packets and message authentication integrity of systems such as SHA1. The fact that a NIDS is usually installed on a stand-alone piece of equipment means that it doesn’t drag down the processors of servers or PC’s. The activity of HIDS is not as aggressive as that of NIDS and can be implemented by a lightweight daemon on the computer which does not burn up too much CPU. Neither system generates extra network traffic. In addition to the two main types of IDS, there are also two main subsets of these IDS types: Signature-based Intrusion Detection System (SBIDS). An SBNIDS for example, tracks all the packets passing over the network and then compares them to a database containing attributes or signatures of familiar malicious threats. Anomaly-based Intrusion Detection System (ABIDS). An ABNIDS for example, tracks the traffic of a network and then compares it to an established measure (which could be machine learning based) and this allows the system to find what is normal for the network in terms of Ports, Protocols, Bandwidth, and other devices, thereby quickly alerting administrators about any unusual or potentially malicious activity in the network. IPS  IPS combines the analysis functionality of an IDS with the ability to intervene and prevent the delivery of malicious packets. IPS interact with firewalls and software applications by adjusting settings. Incorrectly calibrated IPSs can cause havoc and bring your legitimate network activity to a halt.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "67a3a3594c80d910bec5514ce8c2a4b4",
    "u": "https://windows.tymyrddin.dev/docs/services/ssh",
    "t": "Use SSH tunnels ",
    "c": "Use SSH tunnels  Secure Shell (SSH) can be used to securely acquire and use a remote terminal session and has other uses as well. You can use SSH to tunnel traffic, transfer files, mount remote file systems, and more. SSH also uses strong encryption, and you can set your SSH client to act as a Socks proxy. Once you have, you can configure applications on your computer – such as your web browser – to use the Socks proxy. The traffic enters the Socks proxy running on your local system and the SSH client forwards it through the SSH connection – this is known as SSH tunneling. This works similar to browsing the web over a Virtual Private Network (VPN) . From a web server perspective, traffic appears to be coming from the SSH server. The traffic between source and the SSH server is encrypted, so you can browse over an encrypted connection as you could with a VPN. You must configure each application to use the SSH tunnel’s proxy. Port forwarding or port mapping is a name given to the combined technique of: Translating the address and/or port number of a packet to a new destination. Possibly accepting such packet(s) in a packet filter (firewall). Forwarding the packet according to the routing table. SSH tunnels can be created in several ways using different kinds of port forwarding mechanisms. And you can protect SSH access with MFA . Tunnelling with local port forwarding  Imagine wikileaks being blocked using a proxy filter in a university network somewhere. An SSH tunnel can be used to bypass this restriction. Let’s name the machine in the university network socially-correct and a home machine home . The home machine has a public IP and is running an SSH server. The student in case has ssh user access on home and socially-correct has access to host:hostport (is not blocked). > ssh - L localport : host : hostport user @home - N where: -L : port forwarding parameters localport : local port (choose a port that is not in use by other service) host : server that has the port (hostport) that you want to forward hostport : remote port -N : do not execute a remote command (you will not have the shell). user : user that has ssh access to the ssh server home : the machine/server running the ssh server that will be used for forwarding/tunneling For example, to create the SSH tunnel execute following from the socially-correct machine: > ssh - L 9001 : wikileaks . org : 80 user @home Open a browser and go to http://localhost:9001 to see if the tunnel is working. The SSH client at socially-correct will connect to the SSH server running at home (usually running at port 22) binding port 9001 of socially-correct to listen for local requests thus creating an SSH tunnel between home and socially-correct. At the home end it will create a connection to wikileaks.org at port 80. So socially-correct doesn’t need to know how to connect to wikileaks.org. Only home needs to worry about that. The channel between socially-correct and home will be encrypted while the connection between home and wikileaks.org will be unencrypted. The home-to-wikileaks.org connection is only made when the browser makes the request, not at tunnel setup time. The SSH man pages say: -L port:host:hostport specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side. This works by allocating a socket to listen to port on the local side, and whenever a connection is made to this port, the connection is forwarded over the secure channel, and a connection is made to host port hostport from the remote machine. Port forwardings can also be specified in the configuration file. Only root can forward privileged ports. IPv6 addresses can be specified with an alternative syntax: port/host/hostport -N Do not execute a remote command. This is useful for just forwarding ports (protocol version 2 only). Local port forwarding can also be used to set up a VNC session between socially-correct and a home server. From socially-correct : > ssh - L 5900 : localhost : 5900 user @home The localhost is relative to the gateway (home in this case), not the machine from where the tunnel is initiated. So this will make a connection to port 5900 of the home computer where the VNC client would be listening. Reverse tunnelling with remote port forwarding  To be able to SSH from the Internet into a machine behind a firewall, you need the machine in question to open an SSH connection to the outside world and include a -R tunnel whose “entry” point is the “remote” side of his connection. What if we wish to connect to an internal university website from home with a set-up like above in tunnelling with local port forwarding? The university firewall is blocking all incoming traffic. We can connect from home to the university internal network so that we can browse the internal site. We can initiate the tunnel from the socially-correct computer behind the firewall. This is possible since only incoming traffic is blocked and outgoing traffic is allowed. The client will now be at the home computer and instead of using the -L option, the -R option, which specifies a reverse tunnel is to be created, is used. From socially-correct : > ssh - R 9001 : internalsite . org : 80 user @home The SSH client at socially-correct will connect to the SSH server running at home creating an SSH channel. The server will bind port 9001 on the home machine to listen for incoming requests that are then routed through the created SSH channel between home and socially-correct . Now it’s possible to browse the internal site by visiting http://localhost:9001 in a web browser on the home machine. The socially-correct machine for work at the university will then create a connection to internalsite.org and relay back the response to home via the created SSH channel. Even though the traffic is encrypted, the name resolution may not be encrypted => DNS leakage. Programs like firefox allow you to ensure that there is no such DNS leakage . For example, in Firefox, browse to about:config and make sure the setting for network.proxy.socks_remote_dns is set to true. Dynamic port forwarding  Dynamic port forwarding allows for configuring one local port for tunnelling data to all remote destinations. This requires Socket Secure SOCKS. At the client side of the tunnel a Socks proxy would be created and the application uses the Socks protocol to specify where the traffic should be sent when it leaves the other end of the ssh tunnel. In a set-up like used in local port forwarding and reverse port forwarding, from the socially-correct machine at university: > ssh - D 9001 user @home SSH will create a Socks proxy listening in for connections at local port 9001 and when receiving a request routes the traffic via the SSH channel created between socially-correct and home. Configure the browser to point to the Socks proxy at port 9001 at localhost .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "69f8214c7ea66b98b10489a415babd2f",
    "u": "https://windows.tymyrddin.dev/docs/services/messaging",
    "t": "Use a secure messaging service ",
    "c": "Use a secure messaging service  A secure messaging service is a critical tool for private and secure communications. In most countries, it is safe to assume that telecoms are recording all SMS message traffic. Signal is not as strong on privacy as it is on security. It collects some metadata, and relies on central servers to manage message flow and hold the metadata it does collect. Session is a fork of Signal. No geolocation data, device data, or metadata is collected. The Session network is decentralized, with no single point of failure, and no main server for bad guys to hack. Session moves messages using an onion routing system. And make it the default SMS messenger.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "45003c4ecb38760c6fcb676d6a468648",
    "u": "https://windows.tymyrddin.dev/docs/services/browsers",
    "t": "Secure browsers that protect your privacy ",
    "c": "Secure browsers that protect your privacy  DuckDuckGo Desktop browser for Windows focuses on privacy that is not based on Chromium (as most would expect). Instead it relies on OS-provided rendering engines to build the browser (mostly WebKit). This makes it possible to remove all the unnecessary stuff usually available with popular web browsers. LibreWolf is a fork of Firefox focused on privacy, security, and freedom, only available for desktop operating systems. If the browser you choose is less secure and privacy-friendly, lock down the browser and the software it can invoke.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4c3039cfd865ecb09ac81778a9f7b041",
    "u": "https://windows.tymyrddin.dev/docs/privacy/devices",
    "t": "Turning devices on and off ",
    "c": "Turning devices on and off  Adversaries can try to gain access with trojans - invisibly-installed malware that gives the adversary administrative control over targeted computers, including, the ability to remotely control devices. Depending on your location and context, you may want to turn devices off and later on again. Examples  Turning cam off/on  There a lot of scenarios where hackers have gained access to the camera even without the active light illuminated. It is better to have computer camera switched off. Here are the steps to disable camera access: Go to Settings -> Privacy From the left menu click on Camera and toggle the button to turn off the camera access any applications To allow access to any specific applications that need camera access, under the “Choose app that can access and send email” select the application and toggle for camera access Other devices can also be turned on and off in a similar way.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9b25d4aba1bbfe7b3027e78196094c73",
    "u": "https://windows.tymyrddin.dev/docs/data/file-encryption",
    "t": "File encryption ",
    "c": "File encryption  Filesystem level encryption, often called file/folder encryption or stacked level encryption, is a form of disk encryption where individual files or directories are encrypted by the file system itself. This is in contrast to full disk or block level device encryption where an entire partition or disk, in which the file system resides, is encrypted. EFS  Windows built-in Encrypting File System (EFS) is a tool that can encrypt all Windows files and folders on NTFS drives. It allows you to encrypt a specific folder rather than the whole hard drive partition . And if you move a file to an EFS-encrypted folder, the file will automatically be encrypted. To enable the EFS tool: Open an elevated Command Prompt. Type (and enter): fsutil behavior set disableencryption 0 To disable this tool, type (and enter): fsutil behavior set disableencryption 1 To encrypt files and folders: Right-click on a file or folder and click Properties. Click the Advanced button in the next window. Check the Encrypt contents to secure data box and click OK. VeraCrypt  VeraCrypt is a fork of the discontinued TrueCrypt project. It is a free and open-source utility for on-the-fly encryption (OTFE). The software can create a virtual encrypted disk that works just like a regular disk but within a file. It can also encrypt a partition or (in Windows) the entire storage device with pre-boot authentication.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1b1730c44779494cbed14eb1ad7dd7b7",
    "u": "https://windows.tymyrddin.dev/docs/services/dns-servers",
    "t": "Use alternative DNS servers ",
    "c": "Use alternative DNS servers  When you don’t set up DNS servers on your computer or router, your DNS queries will run on your ISP’s DNS servers. Without VPN (with killswitch and/or killswitch using routes ), DNS requests are most likely sent unencrypted, which can lead to common DNS attacks. Domain hijacking (Redirection) DNS flood attack (a type of DDoS attack) DNS spoofing or DNS cache poisoning DNS hijacking (malware infection on a local device to hijack DNS to redirect traffic to a phishing site) And any man in the middle of your traffic can see your online behaviour and the websites you visit. Your ISP’s DNS servers see every search you make in your browser. Using your ISP’s DNS servers as default DNS servers doesn’t do anything for security or privacy. Alternative DNS servers  OpenNIC is a group of volunteers who run an alternate DNS network offering free DNS servers. Depending on your location, you are offered different servers. OpenNIC offers DNS neutrality (it does not censor content), and you get the right to choose how much data OpenNIC logs. OpenDNS is a cloud-based service offering three solutions in their Home package, two of which are free. To connect with your nearest DNS server, and for faster page load times, it uses anycast routing. DNSWatch also offers DNS neutrality and does not log any DNS queries or record history. Quad9 DNS blocks malicious and suspicious domains using security intelligence from a group of companies to improve security. They do keep logs on some activity. Use Wireshark to check for leaks  To check if you have DNS leaks, fire up Wireshark : Start capturing on eth0 and connect to the VPN. After capturing either a fixed number of packets, or an amount of data or for a specific time period, go to //Statistics -> Endpoints// There should only be one public IP address, namely that of the VPN server that you’re connected to. The ‘’10.0.2.15’’ in this image is a local address.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "169506f71b9a74b01ed465b56315ef73",
    "u": "https://windows.tymyrddin.dev/docs/data/restore-point",
    "t": "Create a restore point ",
    "c": "Create a restore point  In case the Windows machine is compromised, going back to a previous restore point may fix the issue. Type Create a restore point in the search box System Properties -> C drive and click the Create button Add a description to the system restore point and click Create System Restore Point Creating Process The system restore point process will begin (wait, wait, wait for it) The restore point was created successfully",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6bc31f120d9493e4f5068c1cf9e1c573",
    "u": "https://windows.tymyrddin.dev/docs/privacy/hexeditors",
    "t": "Remove metadata with hex editors ",
    "c": "Remove metadata with hex editors  The hexadecimal notation is almost universally used in computing - and not without a reason. There are sixteen hex digits - 0 to 9, and A to F (which correspond to decimal values 10 to 15), and each hex digit represents exactly four bits. Exactly two hex digits represent a byte, which can have a value from 00 to FF. A hex byte is the only kind of object a computer handles, and hex bytes are used to represent anything. For example, a hex byte 50 may represent the capital letter P, the processor command push eax, the decimal number 80, a colour component with 50% brightness, or whatever else lives in the digital world. And that means we have editors, hex editors, that can be used to view and change files, all files, on a very low level. As in, they can be used to remove metadata from any and all files. Usage in general  backup the file before using a hex editor on it. switch to ASCII mode, turn off “read only” mode, and start searching through the file. For example, when scrubbing pdf’s from creation and modification information look through the entire file for “created” (metadata appears in the PDF file more than once). If and when you find metadata, change to fake data or delete. Then repeat your search again for the terms “create”, “creation”, “modified”, and “modify”, and similarly either replace or delete the dates, once again being sure to repeat each search so that any potential multiple instances of the field can be located and modified or blanked out. Native  On Windows, open file Properties in Windows Explorer for each file. In the Details tab, click “Remove Properties and Personal information”. Choose to “Remove the following properties from this file”, select which metadata to remove, and press OK. There may still be other data though. Windows do not have any pre-installed hex editor in their operating systems. Hex files can be stored in the text format or binary format. If you have a text-based hex file, then it can be opened with text editors like notepad. Using software  If you have a binary hex file, then the only option to open them is by using the third-party hex editing programs. HxD Freeware Hex Editor and Disk Editor Free Hex Editor Neo",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ca9080eac4745488e392794eef1378bc",
    "u": "https://windows.tymyrddin.dev/docs/services/readme",
    "t": "Introduction ",
    "c": "Introduction  Take control over services, applications, and their permissions. Start, Stop, Restart, Enable, and Disable Services Unwanted application suggestions Restrict which apps can run (without your permission) Restrict access to apps Block applications Secure browsers that protect your privacy Use a secure messaging service Use a secure email service Use SSH tunnels Use a VPN service Make a VPN killswitch using routes Use a Tor proxy Change MAC address Renew IP lease Edit hosts file",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4ee996df3117043847d96cc4c1d642aa",
    "u": "https://windows.tymyrddin.dev/docs/authentication/standard-user",
    "t": "Use a standard user account ",
    "c": "Use a standard user account  Users with administrator privileges have complete control over the OS and their apps have unrestricted access to the computer. Even when keeping up with system and antivirus updates, following the best security practices, and being careful using the internet and checking email attachments, there is still a chance that malware could gain access to your device. Running as administrator, an exploit can more easily gain control of your system. It can install rootkits, keyloggers, and other suspect services without you knowing. A malicious program can also modify and delete files, and even prevent devices from booting. Consider setting up a separate standard user account with fewer privileges for day-to-day use. This can block some attacks and make others much harder. Create a new administrator account  Settings -> Accounts -> Family & other people. Under Other People, click the Add someone else to this PC option. Click the “I don’t have this person’s sign-in information” link. Click the “Add a user without a Microsoft account link”: Because the account will only be used for administrative tasks you do not need to create a new Windows 10 account using a Microsoft account. Type the username and password you want to use for the admin account. Next Select the newly created account, and click Change account type. In the “Account type” drop-down menu, select Administrator. OK. Change your user account type  An Administrator account is a member of the Administrators and Users groups, which means that to make the account a Standard User, you only need to remove your account from the Administrators group. Sign-in to the newly created admin account to change your user account type to Standard User using the Settings app. Type Computer Management in search box and click the result to open the console. Go to System Tools -> Local Users and Groups -> Users Double-click your user account — the one you want to switch to remove the privileges from. Click on Member Of tab. Select Administrators from the list. Click the Remove button. Apply and OK. Sign out and sign back in to apply the changes. You have turned your account into a standard user account with fewer privileges and apps will not be allowed to make system changes, making your system more secure against malware. When you need to perform a task that requires administrator rights, you can right-click the app and use the Run as Administrator option with the credentials of the administrator account you just created.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3ac32b60ccebed4794b277ebc2d4395f",
    "u": "https://windows.tymyrddin.dev/docs/authentication/login",
    "t": "More secure login ",
    "c": "More secure login  Switch to a local login account  Windows 10 Home will default to your Windows account, as this makes it easier to log in across all devices with one account. If, say, your mail credentials were compromised, then your machine would also be compromised. Switch your Windows 10 device to a local account Set password if not exists  When you purchase a new Windows computer or if you have reformatted the computer with a fresh copy of Windows, the system will allow the user to login automatically without having the need to provide a password. This can prove costly because it gives opportunity for anyone to access information from your computer. It is perhaps annoying to have to enter your password every boot, but it is a small price for making it harder for someone to get into your account and access your system: Settings -> Account From the left column select Sign-in options Under Password click on Add, provide the password you wish to have and click on Finish This will ensure that the computer is password protected. Add Secure Sign-In  Programs such as malware and viruses can gain access to your login information by imitating the sign-in screen. As a user, it is impossible to tell whether the sign-in screen is safe to use or not. Windows 10 Secure Sign-In is not the “one solution to solve all problems”, but it cuts the root of this particular problem by blocking programs from displaying a fake sign-in screen. Type netplwiz in the search box and press Enter. This will open the User Accounts panel. Select the user that you want to enable Secure Sign-In for. Go to the Advanced tab and select “Require users to press Ctrl + Alt + Delete”. Apply Now, every time you start your computer, Windows will require you to press the key combination before entering your login details.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f6f9a6fdf733e670f6b10ea0b0727c55",
    "u": "https://windows.tymyrddin.dev/docs/malware/clean-machine",
    "t": "Malware detection and removal ",
    "c": "Malware detection and removal  Automagically  If you are on a private machine, choose your own scanner. Be careful, have a look at AV Comparatives’ test results for Windows . In an organisation, likely you can leave this to the SOC or IT team . Manually  Disconnect from the internet. Switch to Safe Mode  Go to Updates & Security -> Recovery Choose “Restart now” in the Advanced startup section When your machine restarts, a blue screen with a few options will appear Troubleshoot -> Advanced options -> Startup settings -> Restart Another blue window appears, find the “Enable Safe Mode” option. Click number 4 on your keyboard. Check for and remove unwanted applications  Go to Control Panel -> Uninstall a program Possibly unwanted apllications (bloatware, and some can even be considered malware) Check with DuckDuckGo whether unknown applications are legitimate or not (mind the spelling) If the issues are recent, you can click on “Installed on” to find any newly installed programs that might be suspicious If they are not legitimate, or if you are suspicious, delete them and empty your Trash. Note that this does not help much with trojans , evil files made to look like legitimate apps. Delete temporary files  Open the RUN window Type “%temp%” and click “OK” Delete all files and folders that are in this destination Empty trash Connect back to the internet. Note that this does not remove malicious Registry entries which can make the malware persistent. Fail  If all else fails, go to a previous restore point or backup. If that fails too, the BIOS or restore points or backups may even be infected. It is possible for malware to persist across a re-format and re-install, if it is sufficiently ingenious and sophisticated: if for example, it can persist in the BIOS, in the firmware for peripherals (some hardware devices have firmware that can be updated, and thus could be updated with malicious firmware), or with a virus infecting data files on removable storage or on your backups. Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e1681aa7ae260d647c2e84605075a8d7",
    "u": "https://windows.tymyrddin.dev/docs/authentication/passwords",
    "t": "Make that more secure passwords ",
    "c": "Make that more secure passwords  Do not use a password you have used in the past. Try to change the password at least every 3-6 months. Create a password that is at least six characters long. Create a password with both digits and letters, uppercase, and lowercase. Do not create a password with a family name, name of your pet, hobby, sports teams, favourite TV show, etc. Do not create a password that is your phone number, house number, etc. Create a password that is not in a dictionary. Create passwords with spaces and/or magics (&*^%$#) in them (if allowed). Have a password manager create a password for you.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "535f538851f59b549c4b49976204cd7d",
    "u": "https://windows.tymyrddin.dev/docs/opsec/email-use",
    "t": "Use email securely ",
    "c": "Use email securely  Invented by Ray Tomlinson, email first entered limited use in the 1960s and by the mid-1970s had taken the form now recognized as email. It evolved, and so did its parasites: Email “spam”. A number of effective anti-spam techniques now largely mitigate the impact of spam by filtering or rejecting it for most users, but the volume sent is still very high, and increasingly consists not of advertisements, but malicious content or links. Phishing emails continue to be one of the most common initial attack vectors employed by attackers for malware delivery. Attacking the human element continues to be extremely effective. To infect a system, the attacker simply has to persuade a user to click on a link or open an attachment. Email spam and phishing methods typically use spoofing to mislead the recipient about the true message origin. Laws in many countries either allow or have loopholes in an existing law that allow the government to access stored emails without a warrant, and intelligence agencies can do and actually do so. Internet as well as intranet email may travel and be stored on networks and computers without the sender or the recipient having any control. During the transit time it is possible that third parties read or even modify the content. The ease and impersonality of email communications mean that the social norms that encourage civility do not exist and may be forgotten. Flaming, bullying, … To stay sane: Do not use public computers to access email with sensitive information. If you are not in a safe neighbourhood, use a VPN or Tor anonymity network to encrypt traffic from the user machine to a safer network. Use a privacy-focused email application (make sure not to use your own name or other personal information) GPG, PGP, SMEmail, can be used for end-to-end message encryption.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9b8f60d52b770e1931cd9b9476f62856",
    "u": "https://linux.tymyrddin.dev/",
    "t": "Hardening GNU/Linux ",
    "c": "Hardening GNU/Linux  “Linux” is really GNU software operating with a Linux kernel, and GNU software there are many resulting in an incredible amount of distributions , all called “Linux”. Some even build on each other, such as Debian -> Ubuntu. It is impossible to cover them all. Version 0.1: These mitigations are kept as simple as possible, with tools found in most distros. Some things are harder to cover. For example, each distro has its own privacy settings somewhere, and there are even distro’s that have specialised in privacy. Accounts and authentication Introduction Disable and enable user accounts Make that secure passwords Use a password manager Password protect sleep and screen saver mode Use multi-factor authentication (MFA) Protect SSH access with MFA Design principles and sudo killers Services and applications Introduction Service management Application armour (AppArmor) Restrict access to at and cron Disable startup applications Choose a secure browser that protects your privacy Use a secure messaging service Use secure email services Use SSH tunnels Use a VPN service Use a firewall as a VPN fail-safe mechanism Use alternative DNS servers Use a Tor proxy Anonymise SSH sessions with Tor Change MAC address Renew IP lease Edit hosts file Data Introduction Use removable storage media Archiving and compressing Shift back and forth in time from past to present Disk encryption File encryption Shredding files and deleting data Privacy Introduction Turning devices on and off Remove metadata from files Edit exif metadata in images Removing metadata with hex editors Scrub machine with BleachBit Use Metadata Anonymisation Toolkit 2 (MAT2) Distros specialised in privacy Malware Introduction Malware detection and removal Analysing trojans Operations security Introduction Use email securely Detecting fake emails and phishing Browse more safely Check integrity of downloads ‘;–have i been pwned? Guards! Guards! Introduction Alphabet soup Netfilter and iptables NFTables Gufw and ufw Linux intrusion detection systems Aide OSSEC Tripwire",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cc7b74744d42069b8c3f5815b2916775",
    "u": "https://linux.tymyrddin.dev/docs/authentication/password-manager",
    "t": "Use a password manager ",
    "c": "Use a password manager  The majority of people use very weak passwords and reuse them on different websites. How are you supposed to use strong, unique passwords on all the websites you use? The solution is a password manager. Password managers store your login information for all the websites you use and help you log into them automatically. They encrypt your password database with a master password — the master password is the only one you have to remember. Managers  Dashlane 1Password Bitwarden It does not protect from keyloggers  Most password manager work by copy-pasting data quickly from your manager to the field (on the website) or by simulating keystrokes for all the data on file. A keylogger captures keystrokes and would capture all passwords entered by a password manager that simulated keystrokes. Nearly all keyloggers even include the capability to take screenshots at particular intervals of time and save all the contents of the clipboard to a file. The last bit is important, because it sort of renders even password managers that use the clipboard to fill in these forms useless. The real solution to preventing these attacks is to monitor your system for any keyloggers and use an AV solution .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "726c4f5d9d7b12a6280bdd6d3ff706cb",
    "u": "https://linux.tymyrddin.dev/docs/opsec/integrity-downloads",
    "t": "Check integrity of downloads ",
    "c": "Check integrity of downloads  When downloading an ISO image of, for example, the latest Linux distro, installing or upgrading packages, or downloading software, you can verify the files have downloaded correctly and securely by using checksums. Checksums ensure the integrity of data portions for data transmission or storage. Checksums is a simple error-detection scheme in which each transmitted message is accompanied by a numerical value based on the number of set bits in the message. The receiving station then applies the same formula to the message and checks to make sure the accompanying numerical value is the same. If not, the receiver can assume that the message has been garbled (or was altered). Verifying downloaded software  When downloading software ( .iso s and .deb s and the like), also download the xxxsum (choose from what is available) and check the integrity (it is the intended file, and nothing has changed underway). For example do: $ sha256sum some-file.iso and compare the output from the command with the key listed in the associated sha256 file. Troubleshooting unauthenticated packages  Integrity checks are integrated in linux package managers. Never ever continue with installation if you get a: WARNING: The following packages cannot be authenticated! It may be that your system is set to use a proxy server for a network you are not connected to. Set your Network Proxy method to None and Apply System Wide, and check if that helped. Check repositories are not corrupted in /etc/apt/sources.list . If so, repair with correct repositories and try again. Check GPG keys (apt-key) # apt-key list Update the local keyring with the keyring of archive keys and remove from the keyring the archive keys which are no longer valid: # apt-key update # apt-get update If still not works, reinstall the archive-keyring. # aptitude reinstall [distro]-archive-keyring For example: Kali Keyring – kali-archive-keyring Debian Keyring – debian-archive-keyring Ubuntu Keyring – ubuntu-archive-keyring Still not works? Hit the forums.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9b3102d7342f60e2f8521f02272a2cc4",
    "u": "https://linux.tymyrddin.dev/docs/services/restrict-access",
    "t": "Restrict access to at and cron ",
    "c": "Restrict access to at and cron  If malware is anything at all, it’s persistent. On Linux, just like Windows, malware once loaded wants to stay loaded. On Windows systems this is usually done with a variety of registry mechanisms. For Linux it’s often done using the crontab scheduling facility. Cron allows users to submit jobs for the system to do at a later time, possibly a recurring time. It can be very useful, but also has a potential for abuse by either users or adversaries to call back home at regular times. Users can be blocked from administrative access to the crontab command for scheduling and modifying cron jobs. The two configuration files that control user access to the cron daemon are cron.allow and cron.deny these two configuration files are located within the /etc directory and are similar to the at.deny and at.allow configuration files. The cron.allow file is used to allow users to schedule jobs using the cron daemon, if the username does not exist in the cron.allow configuration file the user will be denied access. The cron.deny configuration file houses the username of users that are not allowed to schedule jobs, both configuration files have the same syntax as the at.deny and at.allow configuration files. Each username should be specified on an individual line. Check the cron and at jobs!",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "776b7486379d95bbc86322423ea4781a",
    "u": "https://linux.tymyrddin.dev/docs/data/file-encryption",
    "t": "File encryption ",
    "c": "File encryption  Filesystem level encryption, often called file/folder encryption or stacked level encryption, is a form of disk encryption where individual files or directories are encrypted by the file system itself. This is in contrast to full disk or block level device encryption where an entire partition or disk, in which the file system resides, is encrypted. EncFS  EncFS provides an encrypted filesystem in user-space. It runs without any special permissions and uses the FUSE library and Linux kernel module to provide the filesystem interface. EncFS is open source software, licensed under the GPL. eCryptfs  eCryptfs stores cryptographic meta data in the header of each file written, so that encrypted files can be copied between hosts; the file will be decrypted with the proper key in the Linux kernel keyring. The eCryptfs kernel module is available in all Linux kernels since 2006. The eCryptfs user space utilities ( ecryptfs-utils ) are available in all major Linux distributions. VeraCrypt  VeraCrypt is a fork of the discontinued TrueCrypt project. It is a free and open-source utility for on-the-fly encryption (OTFE). The software can create a virtual encrypted disk that works just like a regular disk but within a file. It can also encrypt a partition or (in Windows) the entire storage device with pre-boot authentication.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "602b7b6f520d197a1d535cc1dc5a4fb9",
    "u": "https://linux.tymyrddin.dev/docs/data/removable-media",
    "t": "Use removable storage media ",
    "c": "Use removable storage media  A simple but straightforward security method is to keep all sensitive information on removable storage media like portable flash memory drives or external hard drives that you only mount the device when you need access to the data on it. You can turn old harddrives into external harddrives by taking them out of an old PC and putting them in a portable HDD USB storage kit (alias harddrive enclosure). These “DIY” kits are available for 2.5 inch and 3.5 inch HDD using either IDE or SATA connections and cost way less than a manufactured USB HDD.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e1e7eace759f0da904b937ad55e0e017",
    "u": "https://linux.tymyrddin.dev/docs/services/vpn",
    "t": "Use a VPN service ",
    "c": "Use a VPN service  Internet providers are collecting your browsing data and handing this over to third parties (US, UK, Australia, and much of Europe). Public Wi-Fi remains a serious threat with adversaries targeting unsuspecting users. Many streaming services and websites restrict content to certain geographic locations. A VPN allows you to bypass such restrictions. A VPN will encrypt the connection and make the traffic unreadable. No logs policy  Meaning, not logging traffic, DNS requests, timestamps, bandwidth, IP address. NordVPN , Panama Mullvad , Sweden IVPN , Gibraltar Surfshark VPN , Netherlands Logs timestamps and bandwidth  Does not log directly identifiable information. ExpressVPN",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d8ad565fc45dc229d4ab908240682b02",
    "u": "https://linux.tymyrddin.dev/docs/services/readme",
    "t": "Introduction ",
    "c": "Introduction  All linux distros let you control the services that run on your Linux installation, and you can make full use of this customisation feature to enhance security. Service management Application armour (AppArmor) Restrict access to at and cron Disble applications via startup applications Secure browsers that protect your privacy Use a secure messaging service Use a secure email service Use SSH tunnels Use a VPN service Use a firewall as a VPN fail-safe mechanism Use alternative DNS servers Use a Tor proxy Anonymise SSH sessions with Tor Change MAC address Renew IP lease Edit hosts file",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "db853fb0fe2a6a47bc90d94034965ab3",
    "u": "https://linux.tymyrddin.dev/docs/privacy/metadata",
    "t": "Remove metadata from files ",
    "c": "Remove metadata from files  Metadata is data about data. Metadata answers who, what, when, where, why, and how about every facet of the data that is being documented. Photos, and images in general, contain metadata. For photos this includes how large the picture is, colour depth, resolution, the date and time when it was created, the GPS coordinates of the location they were taken at, camera shutter setting details, and possibly even the name of the program used to edit them. Document metadata is information about one or more aspects of a document, spreadsheet, pdf file, that is not always visible to the person creating them, but can be found by the person who receives them next. Comments, track changes, hidden text, mark-ups, properties, attachments and bookmarks are all examples of document metadata. Office documents like pdf or Office automatically add author and organisation information to documents and spreadsheets. Web pages often include metadata in the form of meta tags. Description and keywords meta tags are commonly used to describe the Web page’s content. Most search engines use this data when adding pages to their search index. This type of metadata can be useful, but maybe you do not want to disclose this information on the web, because metadata can be used for other purposes as well: Metadata is collected by corporations for psychological manipulation in persuasion and advertising. Metadata also plays a number of important roles in computer forensics: It can provide corroborating information about the document data itself. It can reveal information that someone tried to hide, delete, or obscure. It can be used to automatically correlate documents from different sources. Metadata is used by hackers doing reconnaissance for an attack And last but not least, it can be used to correlate data in dragnet and targeted surveillance. Techniques for metadata removal  Metadata removal software like Metadata Anonymisation Toolkit 2 (MAT2) Bleachbit Using a hex editor Edit exif metadata in images",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6504bc697306a4773fa04336b7630905",
    "u": "https://linux.tymyrddin.dev/docs/services/messaging",
    "t": "Use a secure messaging service ",
    "c": "Use a secure messaging service  A secure messaging service is a critical tool for private and secure communications. In most countries, it is safe to assume that telecoms are recording all SMS message traffic. Signal is not as strong on privacy as it is on security. It collects some metadata, and relies on central servers to manage message flow and hold the metadata it does collect. Session is a fork of Signal. No geolocation data, device data, or metadata is collected. The Session network is decentralized, with no single point of failure, and no main server for bad guys to hack. Session moves messages using an onion routing system. And make it the default SMS messenger.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7ed0a37ab4ed0fefc32013783d505bdb",
    "u": "https://linux.tymyrddin.dev/docs/privacy/metadata-images",
    "t": "Edit exif metadata in images ",
    "c": "Edit exif metadata in images  ExifTool  ExifTool is a perl program that can be used to read and edit exif metadata in images. It is available for Windows, MacOS and *nix systems. $ exiftool imagename.jpg To remove, for example GPS data (not found in the above image file, but if you have it in yours) - replace image.jpg with your image file: $ exiftool -gps:all= -xmp:geotag= image.jpg imagemagick  The mogrify command of imagemagick can be used to strip Exif data from images. For the same file as above and then checked with exiftool again: $ mogrify -strip imagename.jpg $ exiftool imagename.jpg For removing Exif data from all jpg images in a directory and all of its sub-directories recursively: $ find ./path/directory -type f -iname '*.jpg' | xargs mogrify -strip exiv2  The exiv2 tool also has a command for deleting all Exif data from an image: $ exiv2 rm imagename.jpg For removing Exif data from all jpg images in the current directory: $ exiv2 rm *.jpg For removing Exif data from all jpg images in a directory and all of its subdirectories recursively: $ find ./path/directory -type f -iname '*.jpg' | xargs exiv2 rm",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0ac9d4ea169178145c2b4151819bb182",
    "u": "https://linux.tymyrddin.dev/docs/opsec/check-mail",
    "t": "Detecting fake emails and phishing ",
    "c": "Detecting fake emails and phishing  Fake emails  View the header info. Pay attention to the email address of a sender. It may imitate a legitimate sender. With only few characters altered or omitted, cybercriminals will often use an email address that closely resembles one from a reputable source. Look closely at the content: Hover your cursor over any links in the body of an email. Links not matching the text that appears raise a red flag. So does the use of URL shortening services. Email clients can be viewed in simple text instead of html, so one never forgets to do this. Poor grammar and sentence structure, misspellings, and inconsistent formatting can be other indicators of a possible phishing attempt. An unsolicited email requesting a user download and open an attachment is a common delivery mechanism for malware, even when it seems to come from a friend, or an employeur. A false sense of urgency or importance to help persuade a user to download or open an attachment without examining it first, completes this picture. Do not. Verify message source. Check the reply email. Reply and wait for the result. Phishing  Be wary of emails asking for confidential information. Don’t get pressured into providing sensitive information. Phishers like to use all kinds of social engineering. Learn what you can about it. Check a website’s privacy policy, especially whether it will or will not sell its mailing list. If so, do not register. Watch out for generic-looking requests for information. Never submit confidential information via forms embedded within email messages. Never use links in an email to connect to a website unless you are absolutely sure they are authentic.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "66136c996309127170bd7fb48b26a7b4",
    "u": "https://linux.tymyrddin.dev/docs/opsec/email-use",
    "t": "Use email securely ",
    "c": "Use email securely  Invented by Ray Tomlinson, email first entered limited use in the 1960s and by the mid-1970s had taken the form now recognized as email. It evolved, and so did its parasites: Email “spam”. A number of effective anti-spam techniques now largely mitigate the impact of spam by filtering or rejecting it for most users, but the volume sent is still very high, and increasingly consists not of advertisements, but malicious content or links. Phishing emails continue to be one of the most common initial attack vectors employed by attackers for malware delivery. Attacking the human element continues to be extremely effective. To infect a system, the attacker simply has to persuade a user to click on a link or open an attachment. Email spam and phishing methods typically use spoofing to mislead the recipient about the true message origin. Laws in many countries either allow or have loopholes in an existing law that allow the government to access stored emails without a warrant, and intelligence agencies can do and actually do so. Internet as well as intranet email may travel and be stored on networks and computers without the sender or the recipient having any control. During the transit time it is possible that third parties read or even modify the content. The ease and impersonality of email communications mean that the social norms that encourage civility do not exist and may be forgotten. Flaming, bullying, … To stay sane: Do not use public computers to access email with sensitive information. If you are not in a safe neighbourhood, use a VPN or Tor anonymity network to encrypt traffic from the user machine to a safer network. Use a privacy-focused email application (make sure not to use your own name or other personal information) GPG, PGP, SMEmail, can be used for end-to-end message encryption.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b030b5b307aa4f58201dd61bbcaf08b5",
    "u": "https://linux.tymyrddin.dev/docs/authentication/passwords",
    "t": "Make that secure passwords ",
    "c": "Make that secure passwords  Do not use a password you have used in the past. Try to change the password at least every 3-6 months. Create a password that is at least six characters long. Create a password with both digits and letters, uppercase, and lowercase. Do not create a password with a family name, name of your pet, hobby, sports teams, favourite TV show, etc. Do not create a password that is your phone number, house number, etc. Create a password that is not in a dictionary. Create passwords with spaces and/or magics (&*^%$#) in them (if allowed). Have a password manager create a password for you.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "365d779d4eb04fbd075dd024957ee600",
    "u": "https://linux.tymyrddin.dev/docs/privacy/hexeditors",
    "t": "Removing metadata with hex editors ",
    "c": "Removing metadata with hex editors  The hexadecimal notation is almost universally used in computing - and not without a reason. There are sixteen hex digits - 0 to 9, and A to F (which correspond to decimal values 10 to 15), and each hex digit represents exactly four bits. Exactly two hex digits represent a byte, which can have a value from 00 to FF. A hex byte is the only kind of object a computer handles, and hex bytes are used to represent anything. For example, a hex byte 50 may represent the capital letter P, the processor command push eax, the decimal number 80, a colour component with 50% brightness, or whatever else lives in the digital world. And that means we have editors, hex editors, that can be used to view and change files, all files, on a very low level. As in, they can be used to remove metadata from any and all files. Usage in general  backup the file before using a hex editor on it. switch to ASCII mode, turn off “read only” mode, and start searching through the file. For example, when scrubbing pdf’s from creation and modification information look through the entire file for “created” (metadata appears in the PDF file more than once). If and when you find metadata, change to fake data or delete. Then repeat your search again for the terms “create”, “creation”, “modified”, and “modify”, and similarly either replace or delete the dates, once again being sure to repeat each search so that any potential multiple instances of the field can be located and modified or blanked out. Native  You can use vi as a hex editor. It isn’t a real “hex mode”. What happens is that vi ’s buffer is streamed through the external program xxd, but it works well for some cases of scrubbing. Open a file in vi as usual, hit escape and to switch into hex mode type: :%!xxd And when done, to exit from hex mode, hit escape again and type: :%!xxd -r Using software  bless is a binary (hex) editor for the GNOME Desktop. wxhexeditor is a hexadecimal file editor suitable for editing very big files. Supported file size is up to 2**64 bytes. dhex provides a console based hex edit screen with menus like Goto, Search, and HexCal",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "de29e29275ec0fb386b61a547c4c8b05",
    "u": "https://linux.tymyrddin.dev/docs/authentication/mfa",
    "t": "Use multi-factor authentication (MFA) ",
    "c": "Use multi-factor authentication (MFA)  Many sites and applications offer two-factor authentication (2FA), also named multi-factor authentication (MFA). With 2FA enabled, logging into a website or application requires both a password and a unique code that is texted to your phone number or delivered via an authenticator app. You have to input this code in order to gain access to your account. Even if someone else has your password, they will not be able to break into your accounts if they can not get the code. When you use one of the authenticator apps included here, you bolster the password you know with the token, smartphone, or smartwatch that you have. Setting up MFA usually involves scanning a QR code on the site with your phone’s authenticator app. Note that you can scan the code to more than one phone, if you want a backup. Authenticator apps generate time-based, one-time passcodes (TOTP or OTP), which are usually six digits that refresh every 30 seconds. Once you set up MFA, every time you want to log in to a site, you enter the code into the secured app or site’s login page, and you’re in. The time limit means that if an adversary manages to get your one-time passcode, it won’t work for them after that 30 seconds. Something to look for when choosing one of these apps is whether it backs up the account info (encrypted, of course) in case you no longer have the phone you set everything up on. These all do (Google Authenticator does not). Authy Duo Mobile LastPass Authenticator Microsoft Authenticator",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d62709cb4761791a715df846d5ebe14b",
    "u": "https://linux.tymyrddin.dev/docs/guards/netfilter-and-iptables",
    "t": "Netfilter and iptables ",
    "c": "Netfilter and iptables  Installing persistence  iptables is installed by default. For rules to be persistent (automatically loaded) so they work after reboot, install iptables-persistent : $ sudo apt-get install iptables-persistent [sudo] password for user: Reading package lists... Done Building dependency tree Reading state information... Done The following extra packages will be installed: netfilter-persistent The following NEW packages will be installed: iptables-persistent netfilter-persistent 0 upgraded, 2 newly installed, 0 to remove and 0 not upgraded. Need to get 18.9 kB of archives. After this operation, 147 kB of additional disk space will be used. Rules  Status command  To list rules -L showing interface name, rule options, TOS masks, packet and byte counters -n, and IP address and port in numeric format without using DNS to resolve names -v: # iptables -L -n -v With line numbers (important for deleting or inserting new rules into the firewall): # iptables -n -L -v --line-numbers To display INPUT or OUTPUT chain rules: # iptables -L INPUT -n -v # iptables -L OUTPUT -n -v --line-numbers Deleting a rule  To delete line number 4 using -D to delete one or more rules from the selected chain: # iptables -D INPUT 4 Inserting a rule  # iptables -L INPUT -n --line-numbers Chain INPUT (policy DROP) num target prot opt source destination 1 DROP all -- xxx.xxx.xxx.1 0.0.0.0/0 2 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state NEW,ESTABLISHED Inserting a rule between 1 and 2: # iptables -I INPUT 2 -s xxx.xxx.xxx.2 -j DROP Gives: # iptables -L INPUT -n --line-numbers Chain INPUT (policy DROP) num target prot opt source destination 1 DROP all -- xxx.xxx.xxx.1 0.0.0.0/0 2 DROP all -- xxx.xxx.xxx.2 0.0.0.0/0 3 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state NEW,ESTABLISHED Saving the rules  For saving the rules so they can be loaded at every reboot (you need to have iptables-persistent installed) # iptables-save > /etc/iptables/rules.v4 # ip6tables-save > /etc/iptables/rules.v6 Stop/Restart  Some distros like CentOS have installed a service called iptables to start and stop the firewall and a configuration file to configure it. For all other distros, iptables is a command, not a service. Configuring iptables  To set it to deny everything except the bare minimum requirements that you need on your system(s) and only accept connections that have been explicitly allowed in the rules. Localhost: $ sudo iptables -A INPUT -i lo -j ACCEPT Accept data related to outbound connections your system has initiated (this includes apt mirrors): $ sudo iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT You can set up tables for rules for traffic you wish to accept on your system from external connections: # iptables -N accept_traffic # iptables -A INPUT -j accept_traffic You then can use it, for example on a server where you run SSH, with (change port to port you set): # iptables -A accept_traffic -p tcp --dport 22 -j ACCEPT The two most common cracks posted on the Ubuntu forums are ssh and vnc, both running with password authentication. This probably is true for all debian-based distro’s. You are recommended to secure ssh by using keys (and disabling password authentication) and either configuring iptables or using a service such as denyhosts or fail2ban. To reject all traffic for which there are no rules set (the first way sends a Host Unreachable ICMP packet then terminates the connection, the second way simply ignores): # iptables -A INPUT -j REJECT --reject-with icmp-host-unreachable or: # iptables -A INPUT -j DROP Configuring ip6tables  To set it to deny everything except the bare minimum requirements that you need on your system(s) and only accept connections that have been explicitly allowed in the rules: Localhost: $ sudo ip6tables -A INPUT -i lo -j ACCEPT Accepting data related to outbound connections your system has initiated: $ sudo ip6tables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT Setting up a table: # ip6tables -N accept_traffic # ip6tables -A INPUT -j accept_traffic Rejecting all traffic for which there are no rules set: # ip6tables -A INPUT -j REJECT --reject-with icmp6-addr-unreachable or # ip6tables -A INPUT -j DROP Usage examples  ICMP  For accepting “Time Exceeded” (necessary for time-restricted connection setups): $ sudo iptables -A INPUT -p icmp -m icmp --icmp-type 11 -j ACCEPT For accepting “Destination Unreachable”: $ sudo iptables -A INPUT -p icmp -m icmp --icmp-type 3/4 -j ACCEPT For accepting PING requests/responses (“Echo” ICMP, for keep-alive requests): $ sudo iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT For IPv6 there are a kazillion ICMP requests so if you are not blocking IPv6, it is recommended to not block ICMP packets: $ sudo ip6tables -A INPUT -p icmpv6 -j ACCEPT",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f19a9609556ebf975b80a54e73ede659",
    "u": "https://linux.tymyrddin.dev/docs/services/vpn-fail-open",
    "t": "Use a firewall as a VPN fail-safe mechanism ",
    "c": "Use a firewall as a VPN fail-safe mechanism  If you simply add a VPN using common instructions, it generally “fails open”. That means, if the VPN breaks down, because the connection is interrupted, traffic will be sent without the VPN. It is much safer when it “fails closed”, meaning that when the VPN connection breaks down, the whole internet connection must be down as long as the VPN connection is not restored. If your chosen VPN does not include being able to set a kill switch, you can use your firewall as a fail-safe mechanism: Get the IP address of the VPN gateway that the kill switch is intended for using the host command. Get the network interface name connected to your default gateway and the subnet of the local network using the route command. Modify the .ovpn configuration file. Change the tun device to -dev tun0 in the client configuration file. Then change the hostnames to IP addresses for the -remote option in the same configuration file. Kill switch using ufw  Make a shell script (killswitch-ufw.sh): ufw --force reset ufw default deny incoming ufw default deny outgoing ufw allow in on tun0 ufw allow out on tun0 ufw allow in on [network interface name] from 192.168.0.0/24 ufw allow out on [network interface name] to 192.168.0.0/24 ufw allow out on [network interface name] to [IP address of the VPN gateway] port 1194 proto udp ufw allow in on [network interface name] from [IP address of the VPN gateway] port 1194 proto udp ufw enable Make it executable: $ chmod +x killswitch-ufw.sh Execute: $ ./killswitch-ufw.sh Kill switch using iptables  Make a shell script (killswitch-iptables.sh): iptables --flush iptables --delete-chain iptables -t nat --flush iptables -t nat --delete-chain iptables -P OUTPUT DROP iptables -A INPUT -j ACCEPT -i lo iptables -A OUTPUT -j ACCEPT -o lo iptables -A INPUT --src 192.168.0.0/24 -j ACCEPT -i [network interface name] iptables -A OUTPUT -d 192.168.0.0/24 -j ACCEPT -o [network interface name] iptables -A OUTPUT -j ACCEPT -d [IP address of the VPN gateway] -o wlp6s0 -p udp -m udp --dport 1194 iptables -A INPUT -j ACCEPT -s [IP address of the VPN gateway] -i wlp6s0 -p udp -m udp --sport 1194 iptables -A INPUT -j ACCEPT -i tun0 iptables -A OUTPUT -j ACCEPT -o tun0 Make it executable: $ chmod +x killswitch-iptables.sh Execute: $ ./killswitch-iptables.sh",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "18d0f807783a993bcce4045af291f9fa",
    "u": "https://linux.tymyrddin.dev/docs/services/edit-hosts-file",
    "t": "Edit hosts file ",
    "c": "Edit hosts file  The hosts file is a system file on a device that lets you map specific domain names to an IP address. If you want to add new entries to the hosts file, you’ll need the IP address of the server that you want to map a hostname to. XXX.XXX.XXX.XXX some.domain.name The hosts file lets you override DNS entries for any domain name. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. Blocking is achieved by setting the IP address of the ad networks to a loopback address like 127.0.0.1 which will not return anything. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. If your device is infected with malware, then your hosts file may be compromised to included unknown entries for known domain names. That is NOT the IP address of your bank! This type of DNS attack is known as DNS pharming, and checking your hosts file can uncover potential infection. Open terminal application In the terminal, give the command sudo nano /etc/hosts Enter your administrator password after running the command Add as many entries as needed",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "dab58b9843b2700e76f1b27de5f7b3e1",
    "u": "https://linux.tymyrddin.dev/docs/guards/nftables",
    "t": "NFTables ",
    "c": "NFTables  The successor of iptables. So let me try. Still at it and //Warning: Not been tested yet//. Basic idea  flush ruleset table inet filter { set tcp_accept { type inet_service; flags interval; elements = { http, https, ssh, } } set udp_accept { type inet_service; flags interval; elements = { openvpn, } } chain base_checks { # allow established/related connections ct state {established, related} accept # early drop of invalid connections ct state invalid drop } chain input { type filter hook input priority 0; policy drop; # Accept on localhost iifname lo accept jump base_checks # Accept ICMPv6 meta l4proto ipv6-icmp icmpv6 type { destination-unreachable, packet-too-big, \\ time-exceeded, parameter-problem, mld-listener-query, mld-listener-report, \\ mld-listener-reduction, nd-router-solicit, nd-router-advert, nd-neighbor-solicit, \\ nd-neighbor-advert, ind-neighbor-solicit, ind-neighbor-advert, mld2-listener-report \\ } accept # Accept ICMP meta l4proto icmp icmp type { destination-unreachable, router-solicitation, \\ router-advertisement, time-exceeded, parameter-problem } accept # Accept mDNS udp dport mdns ip6 daddr ff02::fb accept udp dport mdns ip daddr 224.0.0.251 accept # Accept UPnP IGD port mapping reply udp sport 1900 udp dport >= 1024 ip6 saddr { fd00::/8, fe80::/10 } meta \\ pkttype unicast limit rate 4/second burst 20 packets accept udp sport 1900 udp dport >= 1024 ip saddr { 10.0.0.0/8, 172.16.0.0/12, \\ 192.168.0.0/16, 169.254.0.0/16 } meta pkttype unicast limit rate 4/second \\ burst 20 packets accept # Allow ports tcp dport @tcp_accept accept udp dport @udp_accept accept } # Not a gateway. We do not forward. chain forward { type filter hook forward priority 0; policy drop; jump base_checks } # Chain to accept all outgoing packets chain output { type filter hook output priority 0; policy accept; } }",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "665111039df3b8f523148d3e8c28cfd2",
    "u": "https://linux.tymyrddin.dev/docs/malware/clean-machine",
    "t": "Malware detection and removal ",
    "c": "Malware detection and removal  Automagically  ClamAV  Install with: $ sudo apt-get install clamav clamav-daemon Check it has been installed: $ clamscan --version To update the signatures, first stop the clamav-freshclam service: $ sudo systemctl stop clamav-freshclam The actual update: $ sudo freshclam Restart the clamav-freshclam service: $ sudo systemctl start clamav-freshclam Make a first run with --infected : prints only infected files --remove : removes infected files --recursive : all the subdirectories in the directory will be scanned $ clamscan --infected --remove --recursive [absolute/path/to/directory/to/start/scan] For example, scan your whole system by running the following command: $ sudo clamscan --infected --recursive --remove / ClamTK  ClamTK is a Graphical User Interface for ClamAV software program. $ sudo apt-get install clamtk Start it with $ clamtk Unable to read preferences! No such file or directory note: (re)creating prefs file. Beautiful. Add your preferences. And keep the signatures updated. Manually  Basic checks  Check /etc/passwd for new accounts. Especially new accounts you don’t recognise with a UID less than 500 are very suspicious. If a new account with a UID of 0 is in the list, definitely check it out. Also look for orphaned files, indicators of an account that has been deleted (may take a while): $ sudo find / -nouser -print Take a look at your processes with ps -aux , htop or pstree for unusual processes. Boot the machine from a known safe live-CD image and scan for suspicious files with a rootkit scanner. Check crontab, it may be that the keylogger is relaunched regularly when it is shut off or if the system reboots. Look at the email streams. When programs start sending email by using another IP than your email server (if you have one), it might be something fishy. It can of course also be legitimate. Also consider that a keylogger might just log in to your email server with valid credentials and email from there. Check for keylogger  A trick to try if a keylogger is present: Type a random unique string on your keyboard in the live running machine. Reboot the machine from a known LiveCD or LiveUsb and grep for that string. Find out where the string is stored, and you may have the temp file of the keylogger. Check the folder it is in, and check the folders upward in the tree. Remove  There’s no general recipe. The detection steps above, at best give clues for (further research into) what to remove where. Try DuckDuckGo to access the wisdoms on the internet. If your system has been infected by an unknown trojan , reinstall. To make this experience an enjoyable event if and when it happens, reinstall from the regular backups made on an external disk. If a VM was infected, revert to an earlier snapshot that you think was clean or import an earlier exported .ova of it. This will probably not help if the host was reached, of course. Fail  It is possible for malware to persist across a re-format and re-install, if it is sufficiently ingenious and sophisticated: if for example, it can persist in the BIOS, in the firmware for peripherals (some hardware devices have firmware that can be updated, and thus could be updated with malicious firmware), or with a virus infecting data files on removable storage or on your backups. However, most malware doesn’t do anything quite this nasty. Therefore, while there are no guarantees, re-formatting and re-installing should get rid of almost all malware you’re likely to encounter in the wild. Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a3a5026ec5a67f688460ca27b89f2bfb",
    "u": "https://linux.tymyrddin.dev/docs/data/timeshift",
    "t": "Shift back and forth in time from past to present ",
    "c": "Shift back and forth in time from past to present  Assume data loss is inevitable. It’s not a matter of if, it is a matter of when. You best protect your data with a solid backup strategy. Make an rsync Timeshift backup of your entire system, or synchronise files with a remote system using rsync . Rsync ( r emote sync ) (GPL v3) is an open source utility for fast incremental file transfer. It is a file-copying tool which can copy locally and to/from a remote host. It offers many options to control its behaviour, and its remote-update protocol can minimize network traffic to make transferring updates between machines fast and efficient. It is widely used for backups and mirroring and as an improved copy command for everyday use. The package provides both the rsync command line tool and optional daemon functionality. If you make a backup of a system for the first time to be able to restore a system from (the whole point of it), test it with an actual restore. Having done so helps keep calm when the bleep hits the fan. Rsync  Installing rsync  Installing it from the repository: $ sudo apt-get install rsync General usage  The general command is of the form: $ rsync [options] [source] [destination] Backup to external disk rsync uses an algorithm that minimises the amount of data copied by only moving the portions of files that have changed. It operates in a way similar to ssh, scp, and cp, for example: $ rsync -a [directoryname]/ /media/[path/to/external/disk]/[directoryname] The a option is a combination flag. It stands for “archive” and syncs recursively (includes all subdirectories and subdirectories of subdirectories) and preserves symbolic links, [[en:linux:files|special and device files]], modification times, group, owner, and permissions. There are a lot of different switches that you can use for rsync to personalize it to your specific needs, for example: -a means recursive (recurse into directories), links (copy symlinks as symlinks), perms (preserve permissions), times (preserve modification times), group (preserve group), owner (preserve owner), preserve device files, and preserve special files. -v means verbose and shows you what rsync is backing up. -z enables compression -h for human-readable, output numbers in a human-readable format -delete tells rsync to delete any files that are in the second directory that aren’t in the first directory. Synchronize files from local to remote  While doing synchronization with a remote server, you need to specify username and ip-address of the remote server. You should also specify the destination directory on the remote server. The format is username@machinename:path . $ rsync -avz tymyrddin/ [username protected]@192.168.100.10:/home/tymyrddin/ password: sending incremental file list ./ modsecurity-2.9.2.tar.gz [snip] sent 4993369 bytes received 91 bytes 2432411.23 bytes/sec total size is 4991313 speedup is 2.87 Copy a remote directory to a local machine  In this example, a directory /home/tymyrddin/pkgs on a remote server is being copied in a local computer in /tmp/mypkgs . # rsync -avzh [username protected]:/home/tymyrddin/pkgs /tmp/mypkgs password: receiving incremental file list created directory /tmp/mypkgs pkgs/ pkgs/lighttpd_1.4.45.orig.tar.xz [snip] sent 91 bytes received 4.99M bytes 322.16K bytes/sec total size is 4.99M speedup is 1.00 Rsync over ssh  rsync allows you to specify the remote shell which you want to use. You can use rsync ssh to enable the secured remote connection. To specify a protocol with rsync you need to give -e option with protocol name you want to use. Use rsync -e ssh to specify which remote shell to use. Example: # rsync -avzhe ssh [username protected]:/root/install.log /tmp/ password: receiving incremental file list install.log sent 30 bytes received 8.12K bytes 1.48K bytes/sec total size is 30.74K speedup is 3.77 Do not overwrite modified files at the destination  In a typical sync situation, if a file is modified at the destination, we might not want to overwrite the file with the old file from the source. Use the -u option. Timeshift  Timeshift is free and open source software (source code can be found on GitHub) released under the LGPL-3.0 and GPL-3 licenses. The application is available in the official repositories of the major Linux distributions. To install on Debian/Ubuntu: sudo apt install timeshift Timeshift can be launched from the desktop environment application menu, or from the command line. The first time the application runs, choose what kind of backend to use, rsync or btrfs. Btrsf-based snapshots are byte-for-byte copies of the original filesystem, and are created and restored in no time by using the native snapshot feature of the btrsf filesystem. They cannot be saved on external disks or devices. If the main disk fails, so does the snapshot. Rsync-based snapshots are based on the use of hard links, implementing an incremental strategy. The first backup is a full backup; subsequent backups will include only changed files. Snapshots created by rsync can be copied on external devices formatted with a Linux filesystem. Choose weekly, daily, hourly, on boot, and how many snapshots should be kept. Snapshots can also be created on demand. Choose whether and which users home directories should be included in the snapshots and what kind of files should be included (hidden ones or all). The snapshot will be kept inside the /timeshift directory on the selected filesystem. To explore the files included in the snapshot, select it in the list and click on the Browse button. A file manager window will be opened displaying the included files. In the same way, delete a snapshot by clicking on the Delete button and restore a snapshot by clicking on Restore. If no changes to system partitions were made, nothing needs to be modified.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "67f6ee409759b612cc793f30e35959be",
    "u": "https://linux.tymyrddin.dev/docs/opsec/hibp",
    "t": "‘;–have i been pwned? ",
    "c": "‘;–have i been pwned?  ‘;–have i been pwned? (HIBP) is a database of several billion email addresses (and, separately, passwords) that have appeared in a publicly known past data breach. The service creates an SHA-1 hash of the submitted email address and passes the first six characters of that to HIBP’s hash range query API. HIBP then returns a range of possible matches, if any, to the six character string, without ever handling the full email address. Check if you have an account that has been compromised in a data breach, and if so, change your password and change it in any other place where you’ve used that password. Better yet, never use a password twice, and consider using a password manager.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f2ef4be3d93033f9028d3eabd95015ce",
    "u": "https://linux.tymyrddin.dev/docs/malware/analysing-trojans",
    "t": "Analysing trojans ",
    "c": "Analysing trojans  Check file properties. Be careful not to click on any links or attachments in the email accidentally. Is it what it seems to be? Run the file in a virtual machine and analyse it. Use an online Sandbox service. Related  Malware sandboxes Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "efd32427f27866ce992dc73a78198203",
    "u": "https://linux.tymyrddin.dev/docs/data/disk-encryption",
    "t": "Disk encryption ",
    "c": "Disk encryption  Cryptsetup is a utility used to setup disk encryption based the on dm-crypt kernel module. LUKS (Linux Unified Key Setup) is the standard for Linux hard disk encryption, facilitating compatibility among distributions, and providing secure management of multiple user passwords. Installing cryptsetup  As root (on debian and its derivatives): # apt-get install cryptsetup Find drive  # fdisk -l Example: It has found /dev/sdb1 , my external drive. Wipe drive  If it is a new drive there was no previous sensitive data on it. If it is a disk that contained an encrypted volume, previous sensitive data is encrypted and sensitive data is not directly readable. In both cases you can continue with creating an encrypted volume If you previously had unencrypted sensitive data on the drive, you need to do something to obscure that data. Deleting it is not enough. Drives can be wiped with dd which overwrites it with zeros (quick) or random data (more secure, but it takes a whole night for example for a 120G drive). You can overwrite a partition, or overwrite the entire drive (you will have to repartition the drive afterward). To overwrite an entire drive, leave off the partition number of the device name (that you found with fdisk) in one of the following dd commands (use output file of=/dev/sd* instead of /dev/sd*1 ). # dd if=/dev/zero of=/dev/sdb1 or # dd if=/dev/urandom of=/dev/sdb1 Create encrypted volume  # cryptsetup luksFormat /dev/sdb1 Enter a passphrase when asked. Open the encrypted volume: # cryptsetup luksOpen /dev/sdb1 <name> Where <name> is a temporary name you pick (no special characters or spaces). Closing the volume removes the name. Creating filesystem For creating an ext4 filesystem: # mke2fs -t ext4 /dev/mapper/<name> Use ext2 for a small drive. Mount drive  If your partition has no label, it will be mounted in /media/UUID , where UUID refers to the UUID of the partition. For mounting linux drives: # mount /dev/mapper/<name> /mnt /mnt can be any mount point you choose. Own it  # chown -R [user] /mnt Where [user] is your user name. Unmount drive  Unmount drive and close the encrypted volume: # umount /mnt # cryptsetup luksClose <name> Using drive ",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5a5f62d2f07da280b41a3e7c9a043fc7",
    "u": "https://linux.tymyrddin.dev/docs/malware/readme",
    "t": "Introduction ",
    "c": "Introduction  Every computer connected to the internet is participating in that network and has the ability to receive malicious files. It costs nothing, literally, to run antivirus on Linux, so it is a mystery to me why some people feel that not using Linux antivirus is worth the risk. There is ample evidence of Linux malware in existence. Indicators of compromise: Machine is running slower than usual Machine is consuming more power than necessary Strange behaviour, such as installing programs without your consent, even after rebooting it. Find these, or think you may have an infected system, or just wish to know more: Endpoint detection and response Malware analysis DIY: Malware detection and removal Analysing trojans",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9ea768448c1e461c77bba22059360f0b",
    "u": "https://linux.tymyrddin.dev/docs/authentication/accounts",
    "t": "Disable and enable user accounts ",
    "c": "Disable and enable user accounts  Shadow file modification  The easiest way to disable a user account is to modify the /etc/shadow file, which holds encrypted passwords for users listed in /etc/passwd . An example user entry found in the /etc/shadow file: tester:$6dKR$Yku3LWgJmomsynpcle9BCA:15711:0:99999:7::: To disable this account add * or ! in front of the encrypted password: tester:!$6dKR$Yku3LWgJmomsynpcle9BCA:15711:0:99999:7::: This can also be achieved by: # usermod -L tester Any login method, which uses the /etc/shadow file to authenticate a user, will no longer be able to decrypt the user’s password and will not allow him/her to login: $ su tester Password: su: Authentication failure To enable the user account simply remove the added magic from the /etc/shadow file or use the usermod command: # usermod -U tester This method of disabling user accounts in the Linux system is only valid for programs or commands, which use the /etc/shadow file to authenticate users. If a user has already exchanged ssh keys he/she will still be able to log in despite such modifications. nologin User Shell  A more secure way of disabling a user account is to replace the existing user login shell with a pseudo shell such as /usr/sbin/nologin . nologin will display a message: This account is currently not available. To do this, modify the /etc/password file and change the user’s entry from: tester:x:1001:1001:Tester,User,,:/home/tester:/bin/bash to: tester:x:1001:1001:Tester,User,,:/home/tester:/usr/sbin/nologin User tester will no longer be able to log in with a valid password: $ su tester Password: This account is currently not available.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "caf1d4970051809ecc74d381e29ae065",
    "u": "https://linux.tymyrddin.dev/docs/services/renew-lease",
    "t": "Renew IP lease ",
    "c": "Renew IP lease  A DHCP client can on occasion send information in DHCP requests: hostname, MAC address, operating system, and DHCP version. All operating systems provide their most recent IP address to the DHCP server. If you change your MAC address to minimise risk, best to also renew the IP leases on the router. There are several ways to renew the IP lease, by using command line tools such as nmcli or dhclient , or by restarting network services. Restarting network service (Debian-based): $ sudo /etc/init.d/networking restart On the command-line with dhclient (The -r flag explicitly releases the current lease, and once released, the client exits): $ sudo dhclient -r Now a fresh IP can be obtained: $ sudo dhclient On the command-line with nmcli : $ nmcli con From the list that appears, get the NAME of the connection you wish to request a new lease for, then bring down and up: $ nmcli con down id 'NAME' $ nmcli con up id 'NAME'",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b728b3c77f1b31fdd48e4ceb6f47bee2",
    "u": "https://linux.tymyrddin.dev/docs/services/browsers",
    "t": "Choose a secure browser that protects your privacy ",
    "c": "Choose a secure browser that protects your privacy  Falkon uses QtWebEngine as its rendering engine, which is open-source. Falkon is primarily developed and maintained by the KDE community. QtWebEngine does use upstream code from the Chromium project, but removes binaries and Google-related services. Mullvad browser is the Tor browser without the Tor Network and instead of using the Tor Network, is designed to be used with a trustworthy virtual private network (VPN). Similar to the Tor browser, the Mullvad browser provides solid tracking and fingerprinting protection. Mullvad browser removes all telemetry and enables private browsing by default. uBlock Origin comes pre-installed as the default ad/tracker blocker. Vivaldi has no idea who you are or what sites you visit. Brave is fast, secure, and privacy-focused by default. It has a built-in ad blocker and browser fingerprinting protection, while also giving you access to numerous add-ons and extensions. Ungoogled Chromium browser is an open source project to provide a Chromium browser, without the Google privacy issues. LibreWolf is a fork of Firefox focused on privacy, security, and freedom, only available for desktop operating systems. Tor browser enables you to use Tor without needing to install the Tor proxy . If the browser you choose is not secure and privacy-friendly, lock down the browser and the software it can invoke.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "631cdb8b3879c02a11b0570db5b03d7a",
    "u": "https://linux.tymyrddin.dev/docs/services/ssh-tor",
    "t": "Anonymise SSH sessions with Tor ",
    "c": "Anonymise SSH sessions with Tor  In some countries, proving that you connected to a particular server is enough to be prosecuted, but SSH doesn’t provide a native way to obfuscate to whom it connects. For that, SSH with Tor proxy can be used. Configuration SSH  Install connect-proxy: $ apt-get install -y connect-proxy Set up OpenSSH to use Tor for a specific connection  Create or open ~/.ssh/config $ vi ~/.ssh/config Append the below entry (replacing mydomain.com with actual server domain name or IP and user with actual user): Host jumphost HostName mydomain.com User user CheckHostIP no Compression yes Protocol 2 ProxyCommand connect -4 -S localhost:9050 $(tor-resolve %h localhost:9050) %p Set up OpenSSH to use Tor for a bunch of connections  Host anonymous_* CheckHostIP no Compression yes Protocol 2 ProxyCommand connect -4 -S localhost:9050 $(tor-resolve %h localhost:9050) %p Host anonymous_mydomain HostName mydomain.com User user Host anonymous_mydomain2 HostName mydomain2.com User user Port 980",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2a220c77ca8e52980da9f9b3fdda642a",
    "u": "https://linux.tymyrddin.dev/docs/services/apparmor",
    "t": "Application armour (AppArmor) ",
    "c": "Application armour (AppArmor)  Application Armor (AppArmor) is a kernel-level Mandatory Access Control (MAC) feature that restricts applications from accessing classes of computer resources. For example, AppArmor can allow a word processor to read and write files to the local hard drive, but deny it to access the internet to send messages. A common way to spread malware is to wrap it (or hide it) in some completely different type of file. An application like AppArmor can be configured to disallow these files any write or internet capabilities. Any malware in the file would not be able to copy itself or “call home” as a newly recruited botnet member. AppArmor likely does not need much tuning for a standard desktop system as its default settings are good enough to fend off most malware attempts.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1d190076d1f26e7ba79bcedbf4ecb0c4",
    "u": "https://linux.tymyrddin.dev/docs/guards/readme",
    "t": "Introduction ",
    "c": "Introduction  There are many types of devices and mechanisms within the security environment to provide a layered approach of defense. This is so that if an attacker is able to bypass one layer, another layer stands in the way to protect the network. Two of the most popular and significant tools used to secure networks are firewalls and intrusion detection systems. Choosing a firewall for a GNU/Linux  With a firewall, you can: Log hosts scanning services that aren’t running. Limit the services that applications can connect to. Segregate the local network into trust segments (Local Area Network (LAN), DeMilitarised Zone (DMZ), and Internet). Redirect ports to the hosts providing the service (Network address translation (NAT)). If you need one for a personal PC at home, probably only the first two features are of interest. These are also the two that are most likely to cause issues for a beginning user. Linux firewall code includes the netfilter architecture, which was introduced in stable kernel 2.4. For configuring netfilter through its own command line interface ( iptables ), one has to specify the behaviour of all IP packets that make up a connection both inward and outward. It requires extensive knowledge of TCP/IP protocols, but many tools have been developed to automate the configuration of netfilter and iptables. So you have lots of choice . nftables is the successor of iptables, and allows for much more flexible, scalable and performance packet classification. Recommended for beginners is ufw and gufw because of its simplicity and ease of use. Gufw (GNU GPL v3) is for users bamboozled by firewalls. It has an easy-to-use interface for setting up inbound and outbound traffic rules for apps/services and ports. It is designed for beginners. Gufw is a GUI front-end to ufw , which is in itself a front-end to netfilter and iptables . Choosing a HIDS for a GNU/Linux  Most of the HIDS tools for Linux are File Integrity Agents (FIAs) and use Error Detection algorithms. A FIA monitors the integrity and state of the files and objects on a machine. It creates a hash of all files to be monitored. That snapshot is periodically checked against the current hash of the files. If it detects changes to those files, then it alerts the administrator that an unauthorised access or change has taken place. Aide is such a FIA, entirely open source and licensed via the GPL and easy in its configuration. For a Home PC, Aide will do. Tripwire OSSEC monitors the checksum signatures of all the log files to detect possible interference and any attempts to get to the root account.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "17acffe6798d51cf56eb051c4e252cba",
    "u": "https://linux.tymyrddin.dev/docs/guards/gufw-and-ufw",
    "t": "Gufw and ufw ",
    "c": "Gufw and ufw  Installation  Linux distributions come with a firewall installed (IPtables are built into the Linux kernel), but it is disabled because it would block some basic functionality for users on the local network. Specifically, it would block Samba and Avahi (zeroconf); limiting interoperability with other computers (like file and printer sharing) and disabling automatic discovery of network services. It is better to turn it on. Especially on mobile devices like laptops, which sometimes connect to other networks than your own. it’ll be in your menu items (the icon in mint is a brick wall). You can install ufw (command-line) or gufw , a GUI frontend to ufw , and that will also install ufw : Enabling  The firewall is called ufw ( u ncomplicated f ire w all), and can be operated from the terminal (//Menu > Accessories > Terminal//): $ sudo ufw enable Type your password when prompted for it; this will remain entirely invisible, not even asterisks will be shown. Ufw has a sensible set of default settings (profile), which are fine for the vast majority of home users. So unless you have special wishes: you’re done! Checking status  You can check the status of the firewall with this command: $ sudo ufw status verbose Status: active Logging: on (low) Default: deny (incoming), allow (outgoing), disabled (routed) New profiles: skip Usage examples  ICMP  By default, UFW allows ping requests. You may find you wish to leave (icmp) ping requests enabled to diagnose networking problems. To disable ping (ICMP) requests, edit /etc/ufw/before.rules and remove the following lines: # ok icmp codes -A ufw-before-input -p icmp --icmp-type destination-unreachable -j ACCEPT -A ufw-before-input -p icmp --icmp-type source-quench -j ACCEPT -A ufw-before-input -p icmp --icmp-type time-exceeded -j ACCEPT -A ufw-before-input -p icmp --icmp-type parameter-problem -j ACCEPT -A ufw-before-input -p icmp --icmp-type echo-request -j ACCEPT or change the “ACCEPT” to “DROP”: # ok icmp codes -A ufw-before-input -p icmp --icmp-type destination-unreachable -j DROP -A ufw-before-input -p icmp --icmp-type source-quench -j DROP -A ufw-before-input -p icmp --icmp-type time-exceeded -j DROP -A ufw-before-input -p icmp --icmp-type parameter-problem -j DROP -A ufw-before-input -p icmp --icmp-type echo-request -j DROP SSH  $ sudo ufw allow ssh $ sudo ufw enable $ sudo ufw status",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d56bfce2552a1e5bfdcae1490b64dd16",
    "u": "https://linux.tymyrddin.dev/docs/data/archive-compress",
    "t": "Archiving and compressing ",
    "c": "Archiving and compressing  Linux offers separate tools for gathering groups of files into a single archive and compressing that archive for efficient storage. Oh yuk, “efficient”, oh well. It’s about using less disk space and reducing transfer times over networks. And comes at a price. It can increase your CPU usage. tar  You can combine archiving and compressing together by using additional options to the tar ( t ape ar chiver) command. Tar can behave differently on different distros. The manual page contains descriptions of the myriad of features that come with tar . The basic operations of tar : Create a backup archive: c Extract files from an archive: x Compare differences between archives: d Update files in an archive: u Append files: r or A Delete files from an existing archive: d List contents of an archive: t When creating a tar archive, you can add options that compress the resulting archive. With j the archive will be compressed in bzip2 format, and with z in gzip format. For example, tar with bzip2 compression: $ tar xjvf funnybusiness.tar.bz2 *.txt You can also use other compression mechanisms like lzop with tar. It is faster, but the compression is less than with bzip2 which is around 10 times slower while only giving twice the amount of compression. You can also set the compression level in the compression commands themselves. gzip  gzip compresses the size of the given files using Lempel-Ziv coding (LZ77). Whenever possible, each file is replaced by one with the extension .gz. Compress a file: $ gzip funnybusiness.txt Compress all images with a .jpg extension in a directory: $ gzip *.jpg Compress all files in a directory: $ gzip -rv [directory] Test integrity of a gzip compressed file: $ gzip -tv funnybusiness.gz To uncompress a compressed file: $ gunzip -v funnybusiness.gz Fastest compression time, least compression: $ gzip -1 funnybusiness.gz Slowest compression time, most compression: $ gzip -9 funnybusiness.gz bzip2  bzip2 compresses files using the Burrows-Wheeler block sorting text compression algorithm and Huffman coding. Compression is generally considerably better than that achieved by bzip command (LZ77/LZ78-based compressors). Whenever possible, each file is replaced by one with the extension .bz2 . $ bzip2 [filename] Uncompress: $ bunzip [filename].bz2 lzop  lzop uses the LZO data compression library for compression services, and its main advantages over gzip are much higher compression and decompression speed (at the cost of some compression ratio). lzop is copyrighted under the terms of the GNU General Public License (GPL). You will probably have to install it first: $ sudo apt-get install lzop Compress: $ lzop [filename] Unlike gzip and bzip2 , lzop has no separate command for unlzopping. NO UNLZOPPING! Use the d option: $ lzop -dv [filename].lzo",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9a8c19caf75c01821ab8195db5d95c40",
    "u": "https://linux.tymyrddin.dev/docs/services/startup-applications",
    "t": "Disable startup applications ",
    "c": "Disable startup applications  For example, do you really need Samba for sharing files over the network, or the Bluetooth service to connect to Bluetooth devices on a computer that doesn’t have a Bluetooth adapter? Gnome  Go to Show applications -> Startup Applications Remove check marks next to the services you wish to disable at startup. Mate  In MATE, you can configure your startup applications in the main control centre, using the “Startup Applications” applet.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "15a3fa57c73121cd7d11daa366921163",
    "u": "https://linux.tymyrddin.dev/docs/authentication/sudo-killers",
    "t": "Design principles and sudo killers ",
    "c": "Design principles and sudo killers  GNU/Linux was built as a multi-user operating system from the start with two important principles: The Least Privilege principle states that any entity, user or otherwise, should only be granted the minimum amount of privileges required to do its job and no more. The second, equally important principle, is Isolation. This is implemented in user separation. The activities of one user should not be allowed to affect other users, and data belonging to one user should not be accessible to another user unless specifically allowed. Most GNU/Linux distributions create a non-privileged user account for daily use, but one can use sudo or download an and install an app to do things as administrator in desktop applications. With the users’ password! While the sudo system does not give unbridled root permissions, if an attacker has a limited shell that has access to certain programs using the command sudo he/she might be able to abuse sudo to escalate privileges. The sudo killer tool helps to identify misconfiguration within sudo rules, vulnerability within the version of sudo being used (CVEs and vulns) and the uses of dangerous binary, all of these could be abuse to elevate privilege to root . The tool will provide a list of commands or local exploits which could be exploited to elevate privilege. It does not perform any exploitation on your behalf, the exploitation will need to be performed manually and this is intended. Both red and blue team can use it to their benefit. Installation  Preferably on a kali machine. To pull from docker: service docker start docker pull th3xace/sudo_killer_demo docker run –rm -it th3xace/sudo_killer_demo To build locally using the Dockerfile: service docker start git clone https://github.com/TH3xACE/SUDO_KILLER.git cd SUDO_KILLER docker build -t th3xace/sudo_killer_demo . docker run –rm -it th3xace/sudo_killer_demo Download: https://github.com/TH3xACE/SUDO_KILLER Command usage  ./sudo_killer.sh -c -r report.txt -e /tmp/ Arguments: k : Keywords e : export location (export /etc/sudoers) c : include CVE checks with respect to sudo version s : supply user password for sudo checks (not recommended ++except for CTF) r : report name (save the output) h : help If you need to input a password to run sudo -l then the script will not work if you don’t provide a password with the argument -s . sudo_killer does not exploit automatically by itself, it was designed to check for misconguration and vulnerabilities and then offer: a list of commands to exploit a list of exploits some description on how and why the attack could be performed CVEs check  To update the CVE database: ./cve_update.sh Disclaimer  This script is for Educational purpose ONLY. Do not use it without permission. The usual disclaimer applies, especially the fact that TH3xACE is not liable for any damages caused by direct or indirect use of the information or functionality provided by these programs.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4a907115b0755f2b068a20d7699df63c",
    "u": "https://linux.tymyrddin.dev/docs/services/dns-servers",
    "t": "Use alternative DNS servers ",
    "c": "Use alternative DNS servers  When you don’t set up DNS servers on your computer or router, your DNS queries will run on your ISP’s DNS servers. Without VPN (with killswitch and/or firewall set as a VPN fail-safe mechanism ), DNS requests are most likely sent unencrypted, which can lead to common DNS attacks. Domain hijacking (Redirection) DNS flood attack (a type of DDoS attack) DNS spoofing or DNS cache poisoning DNS hijacking (malware infection on a local device to hijack DNS to redirect traffic to a phishing site) And any man in the middle of your traffic can see your online behaviour and the websites you visit. Your ISP’s DNS servers see every search you make in your browser. Using your ISP’s DNS servers as default DNS servers doesn’t do anything for security or privacy. Alternative DNS servers  OpenNIC is a group of volunteers who run an alternate DNS network offering free DNS servers. Depending on your location, you are offered different servers. OpenNIC offers DNS neutrality (it does not censor content), and you get the right to choose how much data OpenNIC logs. OpenDNS is a cloud-based service offering three solutions in their Home package, two of which are free. To connect with your nearest DNS server, and for faster page load times, it uses anycast routing. DNSWatch also offers DNS neutrality and does not log any DNS queries or record history. Quad9 DNS blocks malicious and suspicious domains using security intelligence from a group of companies to improve security. They do keep logs on some activity. Use wireshark to check for leaks  This is an example in a debian virtualbox VM, but is also valid in general for other setups. Virtual machines receive their network address and configuration on the private network from a DHCP server integrated into VirtualBox. The IP address assigned to the virtual machine is on a completely different network than the host (but can be seen with Traffic monitoring from the host). As more than one card of a virtual machine can be set up to use Network address translation (NAT), the first card is connected to the private network 10.0.2.0, the second card to the network 10.0.3.0 and so on. To check if you have DNS leaks, fire up wireshark: Start capturing on eth0 and connect to the VPN. After capturing either a fixed number of packets, or an amount of data or for a specific time period, go to //Statistics -> Endpoints// There should only be one public IP address, namely that of the VPN server that you’re connected to. The ‘’10.0.2.15’’ in this image is a local address.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2f4664aa21ecac45e852942f4f833cb8",
    "u": "https://linux.tymyrddin.dev/docs/services/email-services",
    "t": "Use secure email services ",
    "c": "Use secure email services  Mailfence , Belgium, provides a full suite of services, Messaging, s, Calendars, Groups, and Document storage. It can easily replace the G suite. It is a secure email suite that offers end-to-end encryption (through PGP support) and works with different email clients. There is some logging of IP address and some other data, and the code is not open source. Tutanota , Germany, is a small but serious player among secure email providers. It uses a hybrid encryption system that avoids some drawbacks of PGP, and is protected by the GDPR and other pro-privacy EU regulations. So, it does not work with PGP and there is no way to import existing emails (yet). ProtonMail , Switzerland, uses PGP encryption standards for email and stores all messages and attachments encrypted at rest on Swiss servers. ProtonMail has a unique feature for “self-destructing messages” and they have also added address verification and full PGP support. Articles  Reddit: Court forces mail provider Tutanota to perform a surveillance function Twitter: ProtonMail logging one of its users and providing IP address logs to French authorities Reading that carefully, if the message had already been encrypted and the IP address had been that of a VPN , these cases would not exist.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c02fb8b1b6e66d6ee327f8ba59894d1f",
    "u": "https://linux.tymyrddin.dev/docs/services/change-mac",
    "t": "Change MAC address ",
    "c": "Change MAC address  A MAC address identifies the device connected to a network and allows the network to track, restrict or allow access based on it. Routers identify and assign static IP addresses based on the MAC addresses of devices. Before you try to change the MAC address, you need to know the value that you want to use. Set the 2’s place bit (the “locally administered” bit) in the first byte, to differentiate it from a guaranteed globally unique MAC address. Usually the first three bytes an unicast MAC address is an “Organizationally Unique Identifier” (OUI) that the IEEE assigned to the manufacturer of your Ethernet device. Manufacturers are required to make sure they keep the last 3 bytes unique. Avoiding all of that knowledge, the MAC address generator tool can generate a valid address for you. With ‘macchanger’ you can change the MAC address of any Ethernet network device: Turn off your network interface: $ sudo ifconfig eth0 down Use ‘macchanger’ to randomly generate new MAC address and assign it to eth0 network interface: $ sudo macchanger -r eth0 Current MAC: 00:10:4C:25:7A:3F (unknown) Faked MAC: 32:cf:cb:6c:63:cd (unknown) Enable eth0 network interface and check new MAC address: $ sudo ifconfig eth0 up $ sudo ifconfig eth0 If a specific MAC address, like 00:0a:95:9d:68:16 , is required: $ sudo macchanger -m 00:0a:95:9d:68:16 eth0",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e9ea2729e433eb193400d9cbaf963008",
    "u": "https://linux.tymyrddin.dev/docs/data/shred-and-delete",
    "t": "Shredding files and deleting data ",
    "c": "Shredding files and deleting data  Even when you erase everything on your hard disk, sometimes it is possible to recover (pieces of) data with forensics software and/or hardware. If that data is confidential, delete files and data securely so that no-one will recover them. Solid State Drives (SSD) may have introduced dramatic changes to the principles of computer forensics, in particular for recovering files and partitions. When encrypting and compressing files, clear-text versions that existed before you compress/encrypt the file or clear-text copies that are created after you decrypt/decompress it remain on your hard drive. There may also be “temp” files left behind. Unless you purge — not just delete — those clear-text files. Echoes of your personal data — swap files, temp files, hibernation files, erased files, browser artifacts, etc — are l ikely to remain on any computer that you use to access (encrypted) data. It is a trivial task to extract those echos. A hidden access trap. Purge – not just delete – echoes. Shredding files  Linux, FreeBSD and many other *nix systems come with a command line tool called shred installed. The shred command can be useful for destroying files so that its contents are very difficult to recover, even using high-sensitivity data recovery equipment. It repeatedly overwrites the data and the associated file or device names with random data. When used without options, shred will overwrite given files or devices 25 times. A device can be a partition or an entire HDD, USB key drive, etc. $ shred [option(s)] file(s)_or_devices(s) For example $ shred filename1 filename2 will shred both files, and $ shred /dev/hda4 will shred the fourth partition on the first HDD. By default, shred does not delete files or partitions after overwriting them. Overwritten files can be deleted by using the -u option. $ shred -u filename1 filename2 This both frees up the disk space for other data and makes it harder to reconstruct the shredded data. shred relies on the assumption that the filesystem overwrites data in place. But journal filesystems like //Ext3// and //ReiserFS//, RAID-based filesystems, compressed filesystems, and filesystems that cache data in temporary locations do not satisfy this assumption. Plus that copies of files can be retained in filesystem backups and on remote mirrors. Shredding partitions is therefore more reliable than shredding files. And even when shredding partitions, most HDDs map out bad sectors invisibly to application programs and utilities, and that includes shred. Sensitive data in such sectors will not be destroyed by shred. Permanently delete files (including data in RAM or swap)  The Secure-Delete package comes with four commands: * srm - Secure remove; used for deleting files or directories currently on your hard disk smem - Secure memory wiper; used to wipe traces of data from your computer’s memory (RAM) sfill - Secure free space wiper; used to wipe all traces of data from the free space on your disk sswap - Secure swap wiper; used to wipe all traces of data from your swap partition| srm (secure remove) is a more advanced version of the shred command. It uses a combination of random data, zeros, and special values developed by cryptographer Peter Gutmann to make files irrecoverable. The shred tool allows you to specify the number of passes and the secure-delete tools use a default of 38 passes. It will also assign a random value for the filename, hiding that key piece of evidence: $ srm filename Removing a directory and all its subdirectories (recursive): $ srm -r directory/ smem (secure memory wipe) removes residual traces of data that remain in memory. It is relatively easy for someone with the right tools to figure out what you had stored in RAM, which may be the contents of important files, internet activity, or whatever else it is you do with your computer. smem is slow. There are options to speed things up, but they increase risk by performing fewer overwrite passes. Invoke with: $ smem sfill (secure free space wipe) wipes all the free space on your disk where past files have existed. This is particularly useful if you are getting rid of a hard disk for good; you can boot a LiveCD, delete everything on the disk, and then use sfill to make sure that nothing is recoverable (as root): # sfill mountpoint/ NOTE: If you have /home/ on a separate partition and you try /home/hilarious/mistake as mountpoint, sfill will happily wipe the free space on which the mistake directory resides (the entire /home/ partition). sswap (secure swap wipe) wipes swap partitions. Swap partitions store data of running programs when RAM is filled up. Find your mounted swap devices by running: $ cat /proc/swaps Or look in your /etc/fstab file for filesystems of type swap. It can be /dev/sda5 or /dev/dm-1 , etc. Disable the swap partition: $ sudo swapoff /dev/sda6 Wipe: $ sudo sswap /dev/sda6 Re-enable swap: $ sudo swapon /dev/sda6 Making deleted data hard to recover  A hack that might work for sensitive data in sectors that were not destroyed by shred is towrite zeroes or random data to a file on the drive until it fills up all of the available space, then delete it: $ dd if=/dev/urandom of=/path/filename1 Then delete: $ rm /path/filename1 This also works on partitions: $ dd if=/dev/urandom of=/dev/sda4 Then delete $ fdisk /dev/sda4 Command (m for help): d Partition number (1-4): 4 Use bleachbit to delete files  With BleachBit you can free cache, delete cookies, clear Internet history, shred temporary files, delete logs, and discard junk you didn’t know was there. The version of BleachBit in the repositories of many Linux distributions is often stale, so to use the best and latest version, use download .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d55fbb6233b1e09122da3e3d15c8a60b",
    "u": "https://linux.tymyrddin.dev/docs/privacy/mat2",
    "t": "Use Metadata Anonymisation Toolkit 2 (MAT2) ",
    "c": "Use Metadata Anonymisation Toolkit 2 (MAT2)  mat2 provides a command line tool, and graphical user interfaces via a service menu for Dolphin, the default file manager of KDE, and an extension for Nautilus, the default file manager of GNOME. This is a tool natively created under Debian-Ubuntu and available as Debian and Ubuntu package . For usage, read the Man page .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "19e6cefe0df3934901104afb485f1aa5",
    "u": "https://linux.tymyrddin.dev/docs/guards/tripwire",
    "t": "Tripwire ",
    "c": "Tripwire  Tripwire is a free software security and data integrity tool useful for monitoring and alerting on specific file change(s) on a range of systems. It functions as a host-based intrusion detection system. It is suitable for monitoring a small number of servers where centralized control and reporting is not needed and professional support is not a requirement. Tripwire was originally a free, open source product and is now a commercial product but a free version (branched in 2000) is still being developed. Problems  Needs gcc for compiling. Will not compile with newer gcc’s. Tripwire provides no details about modified/added/removed files, only path names, unless one uses twprint --report-level 4 , which is pretty verbose. Omits checksum if file size is zero, which is incorrect for Linux /proc files. Setting it up is hilariously hellish, hence I am spelling it out here. Installation  To install tripwire on a debian-based system: $ sudo apt-get install tripwire Use the arrow keys to navigate: “Remember that passphrase”, for example in keepassx (I also had keepassx generate the passphrase): Repeat: Generating site key (this may take several minutes)... Do the same for local passphrase. Configuration  Just after install the tripwire directory /etc/tripwire contains a number of files, two of which are useful for its configuration. //twcfg.txt// is for general configuration and can easily be the same for all the computers on the same local network. It contains “things” like the location of the tripwire database, instructions for minimising the amount of time the passphrases are kept in memory, and the number of redundant reports. //twpol.txt// contains the policy that declares all the objects that must be monitored and what to do when one of them is lost or altered. Unlike the configuration file, the policy could (and almost certainly will) vary across the several computers on the same network. For security reasons (preventing a malicious intruder from spoofing tripwire into giving a false “okay” message) tripwire uses these cleartext files to create binary files for database checking rather than the cleartext files (that are best immediately removed after the deed). If you make incorrect edits to either of these files, you will have to restore from backup or tripwire will not be able to create its database. Before making modifications to the configuration files, make a backup first: $ cd /etc/tripwire $ sudo cp twcfg.txt twcfg.txt.old $ sudo cp twpol.txt twpol.txt.old Initialisation  Install default policy as root (mind the capital P, and know the cursor does not move at all when copy/pasting the passphrase (right-click works on the command-line for copy/pasting)): # /usr/sbin/twadmin -m P /etc/tripwire/twpol.txt Please enter your site passphrase: Wrote policy file: /etc/tripwire/tw.pol Still as root, generate the initial database (You will be asked for your local passphrase): # /usr/sbin/tripwire -m i Please enter your local passphrase: Parsing policy file: /etc/tripwire/tw.pol Generating the database... *** Processing Unix File System *** It may take a while and then: ### Warning: File system error. ### Filename: /var/lib/tripwire/debian.twd ### No such file or directory ### Continuing... Of course no such database exists (yet). This is the initial run to create it. And a bunch of these appear with (hopefully) a success message at the end: ### Warning: File system error. ### Filename: /proc/5199/fd/4 ### No such file or directory ... The object: \"/proc/sys/fs/binfmt_misc\" is on a different file system...ignoring. Wrote database file: /var/lib/tripwire/debian.twd The database was successfully generated. The twpol.txt file distributed with tripwire contains anything that could be on a UNIX system, so it is guaranteed to complain about programs that you never installed or placed in a different location. These false positives are created when there is a discrepancy between the default policy and the actual local configuration. ACTUALLY!!!!! :D Some further customization is necessary to prevent these large numbers of false positives. The “thing” to do to create a good policy is to remove as many unneeded programs as possible before starting. Next, to make your usage as quick and effective as possible, your policy must cover everything you really need to monitor and nothing else. This includes, at least, all the system binary and library directories (minimally the contents of /bin , /sbin , /usr/bin , /lib ) and the corresponding configuration files in /etc . As of version 2.3.1.2-5, the tripwire package manages policy at a directory level: if a directory appears in the policy, tripwire will add the files in that directory. Not all directory policy entries are recursive and tripwire may not check the contents of those subdirectories. To generate a listing of the discrepancies between the local system and the default policy (or just do the first bit without grep and search for occurrences of “Filename”): # /usr/sbin/tripwire -m c | grep Filename >> twtest.txt Waaaait for it! When this listing has been generated, edit /etc/tripwire/twpol.txt again, and comment out or delete each of the filenames listed in twtest.txt . Use your preferred editor (mine is geany): # geany /etc/tripwire/twpol.txt And there are other files in the default policy that may not make sense to monitor on your local system. These include lock files (which identify that some process is in use) and //pid// files (which identify the //process ID// of some //daemons//). Such files are likely to change often, if not at every system boot, and they can cause tripwire to generate false positives. You can comment out all of the /var/lock/subsys entries as well as the entry for /var/run . After that you need to re-install default policy and generate the database again. This can result in: *** Processing Unix File System *** The object: \"/dev/hugepages\" is on a different file system...ignoring. The object: \"/dev/mqueue\" is on a different file system...ignoring. The object: \"/dev/pts\" is on a different file system...ignoring. The object: \"/dev/shm\" is on a different file system...ignoring. ### Warning: File system error. ### Filename: /proc/22273/fd/4 ### No such file or directory ### Continuing... ### Warning: File system error. ### Filename: /proc/22273/fdinfo/4 ### No such file or directory ### Continuing... ### Warning: File system error. ### Filename: /proc/22273/task/22273/fd/4 ### No such file or directory ### Continuing... ### Warning: File system error. ### Filename: /proc/22273/task/22273/fdinfo/4 ### No such file or directory ### Continuing... The object: \"/proc/sys/fs/binfmt_misc\" is on a different file system...ignoring. Any /dev entries spell that the /dev file system also has other file systems mounted as /dev/hugepages , /dev/mqueue , /dev/pts , and /dev/shm . Similar objects in proc are also ignored. Directories in /proc change all the time, and it is a pseudo-filesystem. My solution is to comment out both /dev and /proc and add the listed objects that have appeared and that appear. The object: \"/proc/sys/fs/binfmt_misc/register\" is on a different file system...ignoring. The object: \"/proc/sys/fs/binfmt_misc/status\" is on a different file system...ignoring. binfmt_misc is a capability of the Linux kernel which allows arbitrary executable file formats to be recognised and passed to certain user space applications, such as emulators and virtual machines. The executable formats are registered through a special purpose file system interface (similar to /proc ). Debian-based distributions provide the functionality through an extra //binfmt-support// package. Needs monitoring. So, added those two as well. After that you need to re-install default policy and generate the database again. Cleaning up  It is now safe to delete the clear text versions of the tripwire policy and configuration files: # rm /etc/tripwire/twcfg.txt /etc/tripwire/twpol.txt If they need to be restored,...",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b7b37faf290dcbffa569d58bec9bd82d",
    "u": "https://linux.tymyrddin.dev/docs/privacy/devices",
    "t": "Turning devices on and off ",
    "c": "Turning devices on and off  Adversaries can try to gain access with trojans - invisibly-installed malware that gives the adversary administrative control over targeted computers, including, the ability to remotely control devices. Depending on your location and context, you may want to turn devices off and later on again. Some devices can be turned on and off by software, others need blacklisting. Kernel modules are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. And modules can be blacklisted. Examples  Turn on/off camera/webcam  Tape the camera. It may even be possible to turn it off in BIOS (depending on your version). Better yet, if you know what driver module is controlling the webcam, you can disable and enable the driver with a single command on the commandline. uvc driver  Check with: $ lsmod | grep \"uvc\" If stuff like this appears, your webcam device uses an uvc driver : uvcvideo 79005 0 videobuf2_vmalloc 12816 1 uvcvideo videobuf2_core 47787 1 uvcvideo videodev 126451 3 uvcvideo,v4l2_common,videobuf2_core media 18305 2 uvcvideo,videodev usbcore 195340 7 uvcvideo,ums_realtek,usb_storage,ehci_hcd,ehci_pci,usbhid,xhci_hcd To disable the cam: $ sudo modprobe -r uvcvideo To enable the cam: $ sudo modprobe uvcvideo other driver  If not an uvcvideo driver, try $ sudo lsmod | grep \"media\" and use the modinfo command to find out more about the modules listed behind it to locate your webcam driver module: $ sudo modinfo [modulename] Then replace the uvcvideo in the above modprobe command with the name of your driver module. Completely turn it off  To disable the webcam at boot (if file not exists, create it, use your preferred editor): $ sudo geany /etc/modprobe.d/blacklist.conf At bottom of the file add this line: blacklist uvcvideo (or the name of your driver instead of uvcvideo). Save the file and reboot. Your webcam is no longer functioning. Turn on/off microphone  Use the alsa control panel for muting the microphone: $ sudo alsamixer You can also use the same modprobe enabling/disabling method as used for webcam above. The ALSA modules page may be helpful for finding your driver module. Blacklist firewire and thunderbolt  A direct memory access (DMA) attack is a type of side channel attack in which an adversary penetrates a device by exploiting the presence of high-speed expansion ports that permit Direct Memory Access. Firewire, thunderbolt and ExpressCard allow (by design) any connecting device full direct memory access to your system. They can be disabled in /etc/modprobe.d/blacklist-dma.conf (in debian): blacklist firewire-core blacklist thunderbolt The modules will be blacklisted upon reboot.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4a6b446a98f847631f8f77625cd76606",
    "u": "https://linux.tymyrddin.dev/docs/services/tor-proxy",
    "t": "Use a Tor proxy ",
    "c": "Use a Tor proxy  Tor proxy  Install: $ sudo apt update $ sudo apt install tor Check it is installed: $ tor --version Tor version 0.4.6.9. Get your IP address: $ curl ifconfig.me; echo [IP address] Run the same command but preface it with torsocks. The command is now run through the tor client instead: $ torsocks curl ifconfig.me; echo [Some Tor IP address] Shell  To use the Tor network by default for shell commands, torify your shell with this command: $ source torsocks on Tor mode activated. Every command will be torified for this shell. Test with (must now be []): $ curl ifconfig.me; echo [Some Tor IP address] Enable Tor control port  Password protect the Tor connection: $ torpass=$(tor --hash-password \"[password]\") Enable the Tor control port and insert the hashed password: $ printf \"HashedControlPassword $torpass\\nControlPort 9051\\n\" | sudo tee -a /etc/tor/torrc Check the contents of the /etc/tor/torrc configuration file. $ sudo systemctl restart tor Now tor is running on both ports 9050 and 9051. Use in app, for example Firefox  Go to Preferences -> Network Settings -> Settings button Select “Manual proxy configuration” and enter localhost in the “SOCKS Host” field. Use 9050 for port. OK Test by going to a IP site Notes  If a government makes their own national internet, or routes traffic through specific servers to use deep packet inspection (DPI), running Tor may not provide security if the government is able to see the entire path. Sometimes the Tor network is censored, and clients can’t connect to it. An increasing number of censoring countries are using Deep Packet Inspection (DPI) to classify Internet traffic flows by protocol. While Tor uses bridge relays to get around a censor that blocks by IP address, the censor can use DPI to recognize and filter Tor traffic flows even when they connect to unexpected IP addresses. With pluggable transports, censorship against Tor can be bypassed. Not only that. If an attacker can see your traffic, and can see the website you’re visiting, even with a path outside the adversary’s control - they will still be able to correlate the traffic and learn you are visiting the website. If the same connection (the same set of relays) were to be used for a longer period of time a Tor connection could be vulnerable to statistical analysis, which is why the client software changes the entry node every ten minutes.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b18ca2210477d593eb7d7ab89507e0d7",
    "u": "https://linux.tymyrddin.dev/docs/services/ssh",
    "t": "Use SSH tunnels ",
    "c": "Use SSH tunnels  Secure Shell (SSH) can be used to securely acquire and use a remote terminal session and has other uses as well. You can use SSH to tunnel traffic, transfer files, mount remote file systems, and more. SSH also uses strong encryption, and you can set your SSH client to act as a Socks proxy. Once you have, you can configure applications on your computer – such as your web browser – to use the Socks proxy. The traffic enters the Socks proxy running on your local system and the SSH client forwards it through the SSH connection – this is known as SSH tunneling. This works similar to browsing the web over a Virtual Private Network (VPN) . From a web server perspective, traffic appears to be coming from the SSH server. The traffic between source and the SSH server is encrypted, so you can browse over an encrypted connection as you could with a VPN. You must configure each application to use the SSH tunnel’s proxy. Port forwarding or port mapping is a name given to the combined technique of: Translating the address and/or port number of a packet to a new destination. Possibly accepting such packet(s) in a packet filter (firewall). Forwarding the packet according to the routing table. SSH tunnels can be created in several ways using different kinds of port forwarding mechanisms. And you can protect SSH access with MFA . Tunnelling with local port forwarding  Imagine wikileaks being blocked using a proxy filter in a university network somewhere. An SSH tunnel can be used to bypass this restriction. Let’s name the machine in the university network socially-correct and a home machine home . The home machine has a public IP and is running an SSH server. The student in case has ssh user access on home and socially-correct has access to host:hostport (is not blocked). $ ssh -L localport:host:hostport user@home -N where: -L : port forwarding parameters localport : local port (choose a port that is not in use by other service) host : server that has the port (hostport) that you want to forward hostport : remote port -N : do not execute a remote command (you will not have the shell). user : user that has ssh access to the ssh server home : the machine/server running the ssh server that will be used for forwarding/tunneling For example, to create the SSH tunnel execute following from the socially-correct machine: $ ssh -L 9001:wikileaks.org:80 user@home Open a browser and go to http://localhost:9001 to see if the tunnel is working. The SSH client at socially-correct will connect to the SSH server running at home (usually running at port 22) binding port 9001 of socially-correct to listen for local requests thus creating an SSH tunnel between home and socially-correct. At the home end it will create a connection to wikileaks.org at port 80. So socially-correct doesn’t need to know how to connect to wikileaks.org. Only home needs to worry about that. The channel between socially-correct and home will be encrypted while the connection between home and wikileaks.org will be unencrypted. The home-to-wikileaks.org connection is only made when the browser makes the request, not at tunnel setup time. The SSH man pages say: -L port:host:hostport specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side. This works by allocating a socket to listen to port on the local side, and whenever a connection is made to this port, the connection is forwarded over the secure channel, and a connection is made to host port hostport from the remote machine. Port forwardings can also be specified in the configuration file. Only root can forward privileged ports. IPv6 addresses can be specified with an alternative syntax: port/host/hostport -N Do not execute a remote command. This is useful for just forwarding ports (protocol version 2 only). Local port forwarding can also be used to set up a VNC session between socially-correct and a home server. From socially-correct : $ ssh -L 5900:localhost:5900 user@home The localhost is relative to the gateway (home in this case), not the machine from where the tunnel is initiated. So this will make a connection to port 5900 of the home computer where the VNC client would be listening. Reverse tunnelling with remote port forwarding  To be able to SSH from the Internet into a machine behind a firewall, you need the machine in question to open an SSH connection to the outside world and include a -R tunnel whose “entry” point is the “remote” side of his connection. What if we wish to connect to an internal university website from home with a set-up like above in tunnelling with local port forwarding? The university firewall is blocking all incoming traffic. We can connect from home to the university internal network so that we can browse the internal site. We can initiate the tunnel from the socially-correct computer behind the firewall. This is possible since only incoming traffic is blocked and outgoing traffic is allowed. The client will now be at the home computer and instead of using the -L option, the -R option, which specifies a reverse tunnel is to be created, is used. From socially-correct : $ ssh -R 9001:internalsite.org:80 user@home The SSH client at socially-correct will connect to the SSH server running at home creating an SSH channel. The server will bind port 9001 on the home machine to listen for incoming requests that are then routed through the created SSH channel between home and socially-correct . Now it’s possible to browse the internal site by visiting http://localhost:9001 in a web browser on the home machine. The socially-correct machine for work at the university will then create a connection to internalsite.org and relay back the response to home via the created SSH channel. Even though the traffic is encrypted, the name resolution may not be encrypted => DNS leakage. Programs like firefox allow you to ensure that there is no such DNS leakage . For example, in Firefox, browse to about:config and make sure the setting for network.proxy.socks_remote_dns is set to true. Dynamic port forwarding  Dynamic port forwarding allows for configuring one local port for tunnelling data to all remote destinations. This requires Socket Secure SOCKS. At the client side of the tunnel a Socks proxy would be created and the application uses the Socks protocol to specify where the traffic should be sent when it leaves the other end of the ssh tunnel. In a set-up like used in local port forwarding and reverse port forwarding, from the socially-correct machine at university: $ ssh -D 9001 user@home SSH will create a Socks proxy listening in for connections at local port 9001 and when receiving a request routes the traffic via the SSH channel created between socially-correct and home. Configure the browser to point to the Socks proxy at port 9001 at localhost .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8a1df405bdd267d46c76e2bf613446f6",
    "u": "https://linux.tymyrddin.dev/docs/guards/ossec",
    "t": "OSSEC ",
    "c": "OSSEC  OSSEC stands for Open Source HIDS Security. It is entirely free to use. As a host-based intrusion detection system, the program focuses on the log files on the computer where you install it. It monitors the checksum signatures of all the log files to detect possible interference. On Unix-like systems, it will monitor any attempts to get to the root account. Although OSSEC is an open-source project, it is owned by Trend Micro, a security software producer. Installation on Ubuntu/Debian",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "524d26dc53c3aa43cfc3edb7fa368aa8",
    "u": "https://linux.tymyrddin.dev/docs/guards/aide",
    "t": "Aide ",
    "c": "Aide  The Advanced Intrusion Detection Environment (Aide) , is a file integrity checker (FIA). It creates a database from the regular expression rules that it finds from the config file(s). Once this database is initialized it can be used to verify the integrity of the files. It has several message digest algorithms (md5, sha1, rmd160, tiger, crc32, sha256, sha512, whirlpool (additionally with libmhash: gost, haval, crc32b)) that are used to check the integrity of the file. All usual file attributes (//File type, Permissions, Inode, Uid, Gid, Link name, Size, Block count, Number of links, Mtime, Ctime// and //Atime//) can also be checked for inconsistencies. It can read databases from older or newer versions. Installation  To install aide on a debian based system: $ sudo apt-get install aide Open up /etc/default/aide with your favourite editor to change who to send its reports to: $ sudo geany /etc/default/aide Initialisation  Initialisation (this can take some time) on debian based: $ sudo aideinit Running aide --init... Start timestamp: 2018-03-02 20:54:13 +0000 (AIDE 0.16) AIDE initialized database at /var/lib/aide/aide.db.new Verbose level: 6 Number of entries: 163501 --------------------------------------------------- The attributes of the (uncompressed) database(s): --------------------------------------------------- /var/lib/aide/aide.db.new RMD160 : ST44/Xwdiok4RmbkV61xDP9gXdg= TIGER : TWH3gMXUUFA+MRy8iIdJPkPKxY39drxK SHA256 : K+TPo8r3/GANOt4L24mUnlAmM3BN4Ap7 7/xuFmq8xnU= SHA512 : xhZ9lhG50Xb8rmFF8AqFkd9TFqMDaE/T FxEAebvt5eNmd/ayYab1fFEyefdZnu8G HNkEo6H9f1Hn80+IN7sJdA== CRC32 : BdfVRg== HAVAL : hVkhsvx02hXF5YmIyuiJMlNtAweYuOTP Y2L043XMHW4= GOST : T690cFLlnZhUQsCL4GaSjrJ0yHslK0Au VRgW3dMWV4U= End timestamp: 2018-03-02 21:06:39 +0000 (run time: 12m 26s) On other distros: sudo aide --init Configuration  Most aide configuration can be found in /etc/aide/aide.conf . This file is pretty well documented and default rules are quite decent. Aide aims at reporting files that changed since the last snapshot (stored in /var/lib/aide/aide.db ). In hostile environments, a good security measure is to keep the database file on an external disk. If you have such a device, you can copy the current snapshot to it and use the snapshot from that device during later runs of aide. Before making modifications to the configuration file, make a backup first: $ sudo cp /etc/aide/aide.conf /etc/aide/aide.conf.old So let say that you have a copy of aide.db on an external disk. To use that snapshot, you can change //database=file:/var/lib/aide/aide.db// to //database=file:/media/user/drive/aide/aide.db//: $ sudo geany /etc/aide/aide.conf Read through the file to acquaint yourself with aide. By default, changes in //Binaries// and //Libraries// directories are checked. Those are matched to the //BinLib// rule, which basically checks for any changes in permissions, ownership, modification, access and creation date, size change, md5 and sha1 signature, inode, number of links and block count. Then, it also checks for modifications in the //log files// against the rule //Logs//. Because log files tend to grow, you cannot use a signature there, and you also have to ask aide not to check for size modification (S). Usage  On debian and friends, aide is run on a daily basis through the script /etc/cron.daily/aide . Default settings in /etc/default/aide tells aide to update its database. Using database_out value in /etc/aide/aide.conf , aide is going to output a new database any time it runs in /var/lib/aide/aide.db.new (if you kept the default settings). Any time you install new packages or change some configuration settings, run: $ sudo /etc/cron.daily/aide And check in the report that any modifications were only done to files you intended to modify and that added files are only coming from packages you have just installed and copy the new database to whatever place your database points to. Great way to learn about linux and non-intended changes too.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c403afd4a99fa39cc46668e8315b06b9",
    "u": "https://linux.tymyrddin.dev/docs/privacy/bleachbit",
    "t": "Scrub machine with BleachBit ",
    "c": "Scrub machine with BleachBit  With BleachBit you can free cache, delete cookies, clear Internet history, shred temporary files, delete logs, and discard junk you didn’t even know was there. It is available for Linux, Windows, BlackBerry, Email servers and Mac OS X. The version of BleachBit in the repositories of many Linux distributions is often stale, so to use the best and latest version, use the packages from the Download page .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5795eafc1c40c4ef4c8f8ef7f995f193",
    "u": "https://linux.tymyrddin.dev/docs/guards/soup",
    "t": "Alphabet soup ",
    "c": "Alphabet soup  Firewall  A firewall implements rules that prevent network traffic based on protocol, source/destination address, and/or source/destination port. Firewalls can implement access control lists and prevent the use of insecure protocols, such as blocking all traffic on TCP port 23 (Telnet’s default port). IDS  An IDS platform can analyse network traffic for patterns and recognize malicious attack patterns. It can create notifications, but it can not block the unwanted packets from entering the network. IDS can be deployed either at the host level or the network level. Host-based monitors (and protects) the specific host (for example a single PC) it is installed on. For example, a HIDS will look at log and config files for any unexpected rewrites. Network-based focuses on protecting an entire network. Usually, dedicated hardware appliances run such software. For example, a NIDS will look at the checksums in captured packets and message authentication integrity of systems such as SHA1. The fact that a NIDS is usually installed on a stand-alone piece of equipment means that it doesn’t drag down the processors of servers or PC’s. The activity of HIDS is not as aggressive as that of NIDS and can be implemented by a lightweight daemon on the computer which does not burn up too much CPU. Neither system generates extra network traffic. In addition to the two main types of IDS, there are also two main subsets of these IDS types: Signature-based Intrusion Detection System (SBIDS). An SBNIDS for example, tracks all the packets passing over the network and then compares them to a database containing attributes or signatures of familiar malicious threats. Anomaly-based Intrusion Detection System (ABIDS). An ABNIDS for example, tracks the traffic of a network and then compares it to an established measure (which could be machine learning based) and this allows the system to find what is normal for the network in terms of Ports, Protocols, Bandwidth, and other devices, thereby quickly alerting administrators about any unusual or potentially malicious activity in the network. IPS  IPS combines the analysis functionality of an IDS with the ability to intervene and prevent the delivery of malicious packets. IPS interact with firewalls and software applications by adjusting settings. Incorrectly calibrated IPSs can cause havoc and bring your legitimate network activity to a halt.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cae18ccd676a69a9e2375625535f1818",
    "u": "https://linux.tymyrddin.dev/docs/opsec/browsing",
    "t": "Browse more safely ",
    "c": "Browse more safely  Keyloggers and other malware can be installed via a web page script which exploits a browser vulnerability. The program will automatically be launched when a user visits an infected site. Compromising a browser is relatively easy, and it is cross-platform, hence an often chosen target. Plus that browsers (for performance reasons) prefetch exposing users to more security risks by downloading more pages, or from un-requested sites (additionally compounded as drive-by downloads become more advanced and diverse). BeEF & other browser exploits, when not using browser vulnerabilities, rely on javascript. Choose a secure browser that protects your privacy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1defcb2cdf6f597e0bb09aff93244594",
    "u": "https://linux.tymyrddin.dev/docs/services/service-management",
    "t": "Service management ",
    "c": "Service management  Be careful disabling/stopping services. Some other applications might stop functioning because they depend on a disabled service. Try one by one. Most recent distributions use the Systemd system manager. Some still use the old SysVinit system manager. The easiest way to discover which system manager is in use, is by using the use the pstree command and to check the first process ever run on your system: $ pstree | head -n 5 systemd-+-ModemManager---2*[{ModemManager}] |-NetworkManager---2*[{NetworkManager}] |-accounts-daemon---2*[{accounts-daemon}] |-acpid |-apache2-+-2*[apache2---26*[{apache2}]] Getting a list of services  To list services on Linux, when you are on a systemd system: $ systemctl list-units --type=service This command will show you only the services that are active or the services that have failed (in red) on the system. List all services: $ systemctl list-units --type=service --all Only loaded services are listed. On boot, systemd loads unit files and it may choose not to load a specific service if it finds that it won’t be used by the system. List services by state (active, inactive, activating, deactivating, failed, not-found or dead): $ systemctl list-units --state=<state1>,<state2> In order to list all service files available, use list-unit-files : $ systemctl list-unit-files --type=service Status of a service  To verify whether a service is active or not, run this command (for example, for apache2): $ sudo systemctl status apache2 Managing services  To start/stop/restart a service in Linux: $ sudo systemctl start <service> $ sudo systemctl stop <service> $ sudo systemctl restart <service> To force the service to reload its configuration files: $ sudo systemctl reload <service> Enable/disable a service at boot: $ sudo systemctl enable <service> $ sudo systemctl disable <service>",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "60d7cd19e0db8eb2125c92987c1f47c6",
    "u": "https://android.tymyrddin.dev/",
    "t": "Hardening Android ",
    "c": "Hardening Android  These mitigations to common mobile threats are kept as simple as possible, with tools found in most Androids and online. Other things are harder to cover. For example, each manufacturer has its own privacy settings somewhere, and there is a growing number of alternative apps that do not report everything you do to Google. Accounts and authentication Introduction Changing the SIM PIN Setting a password or PIN screen lock and a timeout Keeping notifications off the lock screen Services and applications Introduction Application stores Researching before installing apps Unwanted apps list Removing unwanted apps Browsers that protect your privacy Changing default apps Using more secure messaging services Using more secure email services Using SSH tunnels Using VPN services Using Tor proxies Changing MAC address Editing hosts file Data Introduction Encrypting SD cards Privacy Introduction Turning off diagnostics Putting the kibosh on Autofill with Google Shutting down location history Revoking the prying big eyed activity controls Terminating ad personalisation Privacy focused Android alternatives Malware Introduction Threat awareness Installing an anti malware app Finding the culprit and removing it Ransomware Operations security Introduction Threat awareness Not getting juice-jacked Not auto-joining Wi-Fi networks Using email more securely Browsing more safely Measuring Internet Censorship ‘;–have i been pwned? Guards! Guards! Introduction Firewall No Root NetGuard",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3cf432e72b78dad520ceeed181266fe2",
    "u": "https://android.tymyrddin.dev/docs/services/remove-apps",
    "t": "Removing unwanted apps ",
    "c": "Removing unwanted apps  Every app that exists on your device is a potential privacy and security problem. Google automatically grants every app permission to use the Internet, including unwanted apps . This means that every single app on your device can: Send any data it can get its hands on to points unknown somewhere on the Internet Receive all kinds of things from the Internet that could affect your device Removing third party apps  Go to Settings -> Apps . You should see a list of the apps on your device. Tap an app you do not absolutely need to have on your device. At the bottom, tap Uninstall . Then OK to uninstall the app. Repeat for each app you can do without.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "965d6d47f5833c715775453bdc740bc3",
    "u": "https://android.tymyrddin.dev/docs/privacy/autofill-google",
    "t": "Putting the kibosh on Autofill with Google ",
    "c": "Putting the kibosh on Autofill with Google  If you save things like credit card data on your Android device, that data ends up stored in your main Google account. You see what data you have stored in your Google account, and delete it if you wish. On a new phone, do not turn it on. If you are already using it: Go to the Privacy settings, and tap Autofill with Google . (On some phones this is under Privacy -> Advanced settings) Tap each of the options to see what data Google has stored under it. You will need to look around a bit in each area to find out how to edit or delete the data that Google has. Use a better way to keep all the personal information you want stored securely online where you can easily access it but no one else (including Google) has access to it.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "81a0d91931deb00d2fe8bb54f1104931",
    "u": "https://android.tymyrddin.dev/docs/privacy/alternatives",
    "t": "Privacy focused Android alternatives ",
    "c": "Privacy focused Android alternatives  Android stock versions  GrapheneOS offers a higher level of privacy and security. (Pixel phones) CalyxOS is hardened for more privacy and security. (Pixel phones, Xiaomi Mi A2) Replicant , an Android distribution with an emphasis on freedom, privacy, and security. LineageOS for phones and tablets. /e/ building privacy-enabled smartphone operating systems. Based on Linux  Ubuntu Touch , a mobile version of the Ubuntu operating system. Plasma Mobile , Linux-based. Sailfish OS , Linux-based mobile OS. Phones  Librem 5 , a phone that focuses on security by design and privacy protection by default. Outfitted with hardware kill switches and specially designed hardware, and (currently, 2022), a lead time for new orders of 52 weeks.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d66282be476aa073d4a4e4e2b86e6b1e",
    "u": "https://android.tymyrddin.dev/docs/services/vpn",
    "t": "Using VPN services ",
    "c": "Using VPN services  Internet providers are collecting your browsing data and handing this over to third parties (US, UK, Australia, and much of Europe). Public Wi-Fi remains a serious threat with adversaries targeting unsuspecting users. Many streaming services and websites restrict content to certain geographic locations. A VPN allows you to bypass such restrictions (Not always. Some such websites keep blacklists of VPN servers and will still block your traffic). A VPN will encrypt the connection and make the traffic unreadable. A VPN will encrypt the connection and make the traffic unreadable. VPNs not logging traffic, DNS requests, timestamps, bandwidth, IP address: ProtonVPN , Switzerland NordVPN , Panama Mullvad , Sweden IVPN , Gibraltar Surfshark VPN , Netherlands",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8df0e67896fcf432ca754ba3de725e5b",
    "u": "https://android.tymyrddin.dev/docs/services/research",
    "t": "Researching before installing apps ",
    "c": "Researching before installing apps  Search for the app name on Google Play Store or Fdroid store. If there are multiple apps with similar names and icons, most of them are probably fake ones. Tap the developer name, and it will show you all the apps published by the developer alongside user ratings. Genuine developers usually write informative descriptions alongside high-quality screenshots of their app’s interface. Look at the number of downloads. Take a close look at the permissions the app is asking for. Scroll down the page, past the reviews to the Additional Information section. Under Permissions , tap View Details . Google Play will list all the permissions requested by the app. If they are unrelated to the app’s function or what it claims to do, it could be fake or malicious. Unwanted in any case. Search the internet for more information on the app. Scan with an online virusscanner that accepts url’s before installing. If you decide to install an untrusted app, block internet access for the app. If it needs it, monitor its behaviour. To report an app on Google Play Store, go to the app page, and click the three dots in the top-right corner and click Flag as inappropriate . For fake apps, you can choose copycat or impersonation as reason, and submit. For problems related to the contents of the F-Droid repository (the apps in the app store), such as disappeared, outdated, or fake applications, please use this issue tracker .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e4d04a279ad4c55b226b8064c142c816",
    "u": "https://android.tymyrddin.dev/docs/opsec/autojoin",
    "t": "Not auto-joining Wi-Fi networks ",
    "c": "Not auto-joining Wi-Fi networks  Auto join is a feature that allows your phone to automatically join any Wi-Fi network it already has the credentials for, or open Wi-Fi networks, without having to ask you to do anything. This can be a time saver at home and at work. But, it carries two major issues: It can cause your phone to randomly leave a stronger Wi-Fi network for a weaker Wi-Fi network that has come into range. Both Android and iOS developers have tried to stop their operating systems from doing this, but have only had limited success. When your phone switches over to a weaker Wi-Fi, it terminates your first Internet connection, interrupting your Internet usage. Once on the weaker network, performance goes down. When you automatically join open public Wi-Fi networks you put your data and privacy at risk. You do not know that the network is secure. You could be joining a clever network clone (rogue wireless access point) that is really a MitM attack trying to steal your passwords and usernames to sensitive accounts. On an Android device, often carriers install their own Wi-Fi monitoring apps. Each app works differently. Try: Go to Settings -> Wi-Fi. You will see a list of Wi-Fi network profiles. Click the ones you want to (not) auto join with and toggle the switch to auto join. Alternatively, you can try and navigate to your device’s Connections Optimizer, if it has one: Go to Settings -> More -> Mobile Networks. In the Connections Optimizer you can disable/enable auto joining.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "dd8def2a36ceece6f63c77660a3cb30e",
    "u": "https://pap.tymyrddin.dev/docs/mitre/drive-by",
    "t": "Drive-by compromise ",
    "c": "Drive-by compromise  Drive by downloads are categorised by MITRE as Mobile Technique ID T1456 Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user’s web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring an Application Access Token. Note: Linux powers the Internet with 74.2% of all web servers running on it. Monitor for newly constructed network connections to untrusted hosts that are used to send or receive data, and for other unusual network traffic that may indicate additional tools transferred to the system. Use network intrusion detection systems (with SSL/TLS inspection), to look for known malicious scripts (recon, heap spray, and browser identification scripts have been frequently reused), common script obfuscation, and exploit code.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "88b3eb6bc7c5be75267f135a64e720d3",
    "u": "https://pap.tymyrddin.dev/docs/mobile/smishing",
    "t": "Smishing ",
    "c": "Smishing  Smishing is similar to phishing , except that it comes in a text message. A smishing text will often contain a fraudulent link that downloads malware onto the device. Detection  The message offers quick money from winning prizes or collecting cash after entering information. Coupon code offerings are also popular. Financial institutions and government agencies will never send a text asking for credentials or a money transfer. A sender number with only a few digits probably came from an email address, a sign of spam. Mitigation  Avoid responding to a phone number that you do not recognise. Never send credit card numbers, ATM PINs, or banking information to someone via text messages. Or on the phone, over email, … If a text claims to be from a specific organisation or individual, contact that entity directly using known contact information, not the details provided in the text. Prevention  Many smartphones and carriers now provide SMS filtering options to identify and block or flag suspicious texts. Some security applications for mobile devices can help identify phishing links in text messages and prevent users from accessing malicious sites. Even if attackers obtain some credentials through smishing, using Multifactor Authentication is an additional protective layer. Do not store banking information on a mobile device. Have two phone numbers, one for bureacratic matters and one for personal other use. Telecoms offer numbers to report attacks. To protect other users, report it so that it can be investigated. Be aware of current smishing tactics and threats. Awareness is the first line of defense.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "11b05d14d8238f5f55fc40b0f747fe3b",
    "u": "https://pap.tymyrddin.dev/docs/independent/phishing",
    "t": "Phishing ",
    "c": "Phishing  Phishing attempts to trick people into clicking on fraudulent links in emails. The link typically takes the person to a seemingly legitimate site with a malware download. Detection  Hover the cursor over the From address to confirm the email address and then cross-check the website the official email address and domain used. Take note of the spelling of the sender address and email subject line, which may contain small details. Look for inconsistencies in grammar and small spelling mistakes in content. Check links before you leap. Hover the cursor over the link, and the destination address displays in a tiny bar down the bottom of a browser. On mobile phones, hold down on the link, and a pop-up window with the link will appear. An urgent warning tries to frighten people into reacting without considering the consequences. “Clickbait” titles on social media, advertising or publications are attention-grabbing. Generic greetings are not the common practices of legitimate companies. Poor quality logos that are unclear or smaller than usual. Mind that with AI-driven content tools broadly available at a low or no cost, adversaries are using such tools to make their phishing emails and text messages appear more realistic than ever before. Trust your gut, and if suspicious, do some analysis. Analysis  Copy and paste the entire email header and run an email header analysis tool . It is good to use multiple resources as each tool might reveal information that another tool may not. Extract urls from the text for further analysis. Check sender’s IP address and urls found in the text . If the email has an attachment: Obtain the attachment safely. If you don’t know how, ask someone who does. Get its hash and check the file’s reputation with the hash to see if it’s a known malicious document. Upload it to a sandbox for dynamic analysis. Prevention  Never open an attachment unless certain that the communication is from a genuine source. Monitor personal and private accounts and look at the settings. Multifactor verification is a feature that secures email and work accounts. Set up at least two email addresses: a private address and a public address. The private address should not be your first and last name, and be protected by never being used on publicly accessible online resources. Or masked. Proton vault and other services allow for this. Or use a graphics file. If it is discovered, change it. The public address as a temporary address and needs to be changed frequently. Consider using a number of public addresses. That way you can perhaps trace which services may be selling addresses to spammers or have been compromised and its data sold on the black market. Only open email accounts with providers that include spam filtering. Do not respond to any spam, ever. Think before you click ‘unsubscribe’. Web browsers include settings to restrict access to dangerous websites, and when one attempts to access a bad site, an alert message appears. Do not ignore these warnings and do not visit that website or access that file. Keep your browser updated, and install the NoScript extension. Other mitigations  Email security (SPF, DKIM, DMARC) SPAM filters (flags or blocks incoming emails based on reputation) Email labels (alert users that an incoming email is from an outside source) Email address/domain/URL Blocking (based on reputation or explicit denylist, preferably whitelisting) Attachment blocking (based on the extension of the attachment) Attachment sandboxing (detonating email attachments in a sandbox environment to detect malicious activity) Security awareness training (internal phishing campaigns)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "39bdbee58d24a3ceaa02370bab06ef38",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/iaas",
    "t": "Infostealer-as-a-Service (IaaS) ",
    "c": "Infostealer-as-a-Service (IaaS)  Infostealer attacks are typically financially motivated. Infostealers are a type of MaaS that extracts data from infected devices. An adversary buys an InfoStealer from a marketplace , spreads the malware onto as many machines as possible, collects and organises the information, and then sells the information on the black market (dark web or Telegram). How infostealers are distributed  The InfoStealer is embedded into a document (for example, in a Microsoft Word document or a Microsoft Excel spreadsheet). Then the doc is sent out as an attachment in cleverly worded phishing , enticing people to open the file. Via a convincing site with a lookalike domain, the logo of a trusted brand, and a design that tricks unsuspecting users into voluntarily downloading the InfoStealer, thinking that it is a legitimate app. By squatting an app , and then making that corrupted application available for download from app stores. Then putting a social engineering cherry on top: Paying for advertising on Google Ads and Facebook Ads to trick more people into downloading the malware from a fake site or App store. Using paid ads to distribute malware works wonders because it leverages the trust that people have in both the advertising platform and the brand that they are impersonating on a fake site or the app in the store. If a user sees an ad after making a query in a search engine, they implicitly assume that it is safe to click because they trust the search engine. What info it tries to steal  Credentials used for online banking, email accounts, social media sites, and FTP services. Credit card details. Emails. Hardware information. Operating system information. Cryptocurrency wallets. Screenshots. Specific file types (commonly images, documents, spreadsheets, etc.) The stolen data is analysed and any valuable information is collated and organised into a database, which can then be sold on the black market . Who is targeted  Healthcare and financial services are the most targeted sectors with infostealers. How to defend  The increased sophistication and complexity is making it more difficult for defenders to detect and prevent infostealers. Resources  Your Guide to Top Infostealers in 2022",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d6281858f4080220374b654a69c42a48",
    "u": "https://pap.tymyrddin.dev/docs/thm/greenholt",
    "t": "The Greenholt Phish ",
    "c": "THM: The Greenholt Phish The Greenholt Phish  A Sales Executive at Greenholt PLC received an email that he didn’t expect to receive from a customer. He claims that the customer never uses generic greetings such as “Good day” and didn’t expect any amount of money to be transferred to his account. The email also contains an attachment that he never requested. He forwarded the email to the SOC (Security Operations Center) department for further investigation. Investigate the email sample to determine if it is legitimate. Questions  What is the email’s timestamp? (answer format: mm/dd/yyyy hh:mm) , Who is the email from? , What is his email address? , and What email address will receive a reply to this email? Looking at the headers in thunderbird: 06/10/2020 5:58 , Mr. James Jackson , info@mutawamarine.com , and info.mutawamarine@mail.com What is the Originating IP? NOT the answer 192.119.71.157 Who is the owner of the Originating IP? (Do not include the “.” in your answer.) I used domaintools whois Hostwinds Llc What is the SPF record for the Return-Path domain? and What is the DMARC record for the Return-Path domain? I used demarcian domain checker : v=spf1 include:spf.protection.outlook.com -all v=DMARC1; p=quarantine; fo=1 What is the name of the attachment? vSWT_#09674321____PDF__.CAB What is the SHA256 hash of the file attachment? sha256sum SWT_#09674321____PDF__.CAB 2e91c533615a9bb8929ac4bb76707b2444597ce063d84a4b33525e25074fff3f SWT_#09674321____PDF__.CAB What is the attachments file size? (Don’t forget to add “KB” to your answer, NUM KB) and What is the actual file extension of the attachment? I used VirusTotal : 400.26 KB resp RAR",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "31e915eaf224fbdc0207c465d71a7401",
    "u": "https://honey.tymyrddin.dev/",
    "t": "Active defence ",
    "c": "Active defence  With deception technology, the environment is populated with decoys: fake endpoints, files, services, databases, users, computers, and other resources that mimic assets. The intent is to lure adversaries away from legitimate targets and detect intruders in the early stages of an attack, both key to minimising damage. Vet all tactics in this strategy with a lawyer or legal team first. And whatever you do, do not become the petty tyrants you fight. Testlab Active defence tools Notes Introduction Tactics Traps Taxonomies of honeypots Honeypot roadmaps Detecting honeypots Avoiding honeypot detection Honeyports Honeyclients Books ",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d967014050b70593cdcb44e9493e642b",
    "u": "https://honey.tymyrddin.dev/docs/notes/tactics",
    "t": "Tactics ",
    "c": "Tactics  Decoys  Decoys can be used to distract attackers from real targets. Honeypots or honeynets are sets of devices designed to attract attackers, but record the actions of adversaries and alert administrators of potential breaches. Honeypots can be used for researching PTTs (procedures, tools and techniques) of adversaries and assist with generating effective defensive measures. There are lots of honeypots , but your selection will depend on your environment and what you want to get out of it . At home  A honeyclient is a tool designed to mimic the behaviour of a user-driven network client application, such as a web browser, and be exploited by an attacker’s content. Thug seems something to have fun with at home. Attribution  Getting attribution is particularly useful in combination with documents that are a beacon when opened, such as when integrated with a tool like Molehunt . The Browser Exploitation Framework (BeEF) is a tool often used by adversaries and in pentesting, and can also be used in defence by gathering information from the remote party from within his or her web browser. Another tool that can assist with attribution is honeypot systems that have built-in attribution capability features, like HoneyBadger , which has geolocation features to determine where an attacker is located. Traps  Another possible tactic is trapping adversary activity by generating a maze of fake web content using tools like Spidertrap, Weblabyrinth, and/or by creating a haystack of honeypot hosts using Nova is also a good tactic. An adversary can get lost within these, even when using crawlers, spending hours or days to sort out what is real and what is not.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "aa8df7ad020153dabb6ba70bdb5120a3",
    "u": "https://honey.tymyrddin.dev/docs/notes/honeyports",
    "t": "Honeyports ",
    "c": "Honeyports  Consider honeyports , an effective defence for air gapped/high security networks: They give you visibility. Current IDS IPS technologies fail at detecting attackers communicating with open ports over normal protocols (SMB, SSH, HTTP, and HTTPS). Some Next-Gen firewalls already have some of the deception capabilities. Most IPS/IDS technologies are still blind at detecting 0-day attacks. If anyone interacts with a honeyport, it can trigger an alert and/or create a dynamic blacklist entry. You can run them from the command line, and you can run them as Python, PowerShell, and Ruby scripts. How it works  Create a non-legitimate listening port on an external facing legitimate non-important server that are favorite for remote attacks, like telnet or ssh. The services need not be installed. Listen on that port using tools like honeyports. Most pentesters, redteamers and adversaries start with reconnaissance. When an attacker runs a recon scan against this server, sees this open port and tries to communicate, automatically block that IP at your perimeter so that all further actions are blocked. Take that a step further and check out portspoof . A port scan will take ages and becomes utterly meaningless with every port responding that it is up and running some service. Scanning tools will try to enumerate those services by running additional checks, over 65536 ports. Resources  Active Defense, Offensive Countermeasures, and Cyber Deception , John Strand, Bryce Galbraith and Paul Asadoorian, 2020",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b9478f7344930ba2a480cece24322e3a",
    "u": "https://honey.tymyrddin.dev/docs/notes/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Choices developers, system administrators, researchers, and threat hunters face: Which honeypots, honeyclients and honeyports? Which tools to integrate with? What kind of attacks to capture? What vulnerabilities to emit? How hard must it be to detect it? Why?  Wrong design decisions may result in collecting irrelevant information or even exposing the deception technology itself. How?  Tactics Taxonomies Roadmaps Detecting honeypots Avoiding honeypot detection Honeyports Honeyclients",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b063532314ab410630b9ff93392c63a4",
    "u": "https://honey.tymyrddin.dev/docs/notes/roadmaps",
    "t": "Honeypot roadmaps ",
    "c": "Honeypot roadmaps  Web-based  The in 2014 proposed Aggressive Web honeypot (Supeno Djanali et al.) is a low-interaction web honeypot equipped with obfuscated javascript code to detect cross-site scripting and SQL injection. The proposed framework is able to complement the limitation in the existing honeypot such as Glastopf, a low-interactive honeypot and HIHAT, a high-interactive honeypot. The goal of the OWASP Honeypot Project is to identify emerging attacks against web applications and report them to the community, in order to facilitate protection against such targeted attacks. It is based around the earlier OWASP/WASC Distributed Web Honeypots Project . A client honeypot is a honeypot that actively searches for malicious or compromised servers. Worm detection  Signature-based IDS is commonly included either as the main IDS or part of the IDS system. The Aho-Corasick algorithm used in Zero-day polymorphic worms honeypot stands out from the crowd. The Aho-Corasick Algorithm can generate signatures even if not all the variant of the polymorphic worm is captured. Bot detection  The implementation of a bot detection honeypot can be for studying its origin or can be used to contain the DDoS attack and keep the real server free from it. The Hybrid honeypot (Swapnali Sundar Sadamate) uses a client-server architecture. It consists of a server storing information collected by the honeypot, a honeypot to capture the attack information, a web-management interface and a threshold-based anomaly IDS system. The IDS system is implemented at the gateway of the network to detect the malicious traffic. The malicious packet is redirected to the honeypot. The honeypot is installed with sebek to record attacker behaviour, dionaea to collect the malware information and snort in the verification process to collect and analyse the packet received. The ODAIDS-HPS honeypot (Rajalakshmi Selvaraj) consists of an outlier IDS to detect the DoS packet, attack classifier and honeypot. The IDS adopts distance of the nearest neighbour method and requires a set of pure normal data to train the system. Honeytoken  A honeytoken is a digital entity perceived to be valuable by an attacker. It can be as simple as an ID with a password or be as complex as a spreadsheet with believable customer information. Honeytokens are most useful in the context of anti-phishing and insider threat. How it should be constructed? Who is it for? What information to keep and what to change? Maya Bercovitch et al. introduced honeygen for automatically creating complex honeytokens. The application has two difference modes which can be used to create the honeytoken. The first mode is an obfuscation mode where real data is used as input. This mode only changes the more sensitive values. The second mode is the generation mode. This mode creates the honeytoken from scratch based on given rules. Advanced Persistent Threat  APT attacks are often a slow process and hard to detect, especially when stealth techniques such as tunnelling are used. The APT detection system (Roman Jasek) consists of high-interactive honeypots, low-interactive honeypots, honeypots for production and honeypot agents. A honeypot agent acts like a normal human user with behaviour to attract the attack. A low-interactive honeypot emits a known vulnerability into the network. A high-interactive honeypots allows the attacker to interact and compromise its system. The act of compromising the honeypot in the honeyfarm is recorded and monitored by the administrator. Safety rules are derived from the compromise and are applied to the production system. The APT proactive detection system (Zainab Saud) architecture uses NIDS as a gateway to the server and low-interactive honeypot to emit data to attract the attacker. The focus of this system is to ensure that an administrator receives timely information on the intrusion when the honeypot is being compromised. The task of the NIDS is to provide a detailed picture of the attack, and its log and alerts can assist with analysis and correlating different events. Interaction between attacker and defender is usually an incomplete information game in which defender and attacker are not sure of the type of other players. A Bayesian game may be a fitting model. Dynamic  Dynamic honeypots can automatically adapt to the environment they are in. Usually some fingerprint method is used to collect information about its environment. Active fingerprinting methods use techniques such as port scanning to collect information from the server. Some dynamic honeypots are low-interactive honeypots, most likely for ease of configuration. For detecting unknown attacks those are not very effective. Some, like the Sophisticated honeypot mechanism (Liberios Vokorokos), Dynamic and Hybrid honeypot (Kartik Chawda), and the Versatile virtual honeynet framework (Wenjun Fan) have both high and low-interactive honeypots in their architecture. The low-interactive honeypot is preconfigured to blend in with the network, and the high-interactive honeypot will contain, monitor and store the attack information. The latter adopted the virtual high-interactive honeynet, capable of analysing multiple malwares in parallel. In current developments, applications such as Hadoop are used to cater for the huge amounts of network data. And attackers are always coming up with new ways of identifying and taking over honeypots. In this never-ending arms race, honeypots and how they are used must also be further developed. This project solves some of the inherent limitations of honeypots by designing, building and evaluating a novel honeypot deployment concept leveraging cloud technologies. This new concept, a small, substantial contribution in the field, shifts the approach of deploying honeypots into the cloud. AI  RASSH (Adrian Pauna) is a low-interactive honeypot leveraging reinforced learning game theory. The Intelligent honeypot (Wari Zanoramy, Ansiry Zakaria) is high-interactive and uses a past similar case and solution and applies it to the current case to create the honeypot. The if-then rule stored in the database is used in the decision-making of the content in the honeypot (case-based reasoning and expert system). These approaches were trained beforehand and did not learn from attacks. Enter DeepDig (DEcEPtion DIGging) (pdf). Shadow  Shadow honeypots take the concept of a traditional honeypot and enhance it by deploying a network of honeypots that are hidden behind the actual production systems. These shadow honeypots are designed to blend in with the rest of the network, making it difficult for attackers to distinguish between real systems and decoys. Unlike traditional honeypots, which are designed to actively engage with attackers and potentially pose risks to the production environment, shadow honeypots are passive monitoring systems that do not engage with attackers. Instead, they are designed to blend in with the production environment as much as possible, with the goal of attracting malicious activity that might otherwise go undetected. The Shadow honeypot (Anagnostakis Kostas) uses three different anomaly IDSs. If one IDS fails to detect an attack, the other may be able to detect it. The detection of malicious packet is based on knowledge of what constitutes normal packets. Configuring three detectors to an acceptable level of detection and the log delay for a packet to go through the three checks, could be somewhat time-consuming. AIPS (Maros Barabas) attempts to detect attacks with signature datasets of abnormal behaviour with a single IDS. High memory usage and could suffer from high false positive rates. I have not found many new developments for these types of honeypots. Concealment  Apate is a Linux Kernel Module for hardening High Interaction Honeypots. It works on a system call level, is able to log, block and manipulate these calls, and uses an easy to use yet powerful configuration language. The evaluation...",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "fd300df9828ccbd928e1afc8d9e70a7a",
    "u": "https://honey.tymyrddin.dev/docs/notes/honeyclients",
    "t": "Honeyclients ",
    "c": "Honeyclients  For most honeypots to work, you have to wait for the attacker to attack the honeypot from a remote location. This ignores that most attacks are client-side. A phishing e-mail arrives in an inbox, the user clicks and allows the remote malware to activate on the device and allows it to callback over TCP port 80, which is allowed by most firewalls. Meanwhile, drive-by downloads overtook file attachment phishing as the major means of initial access. Enter client-side honeypots (honeyclients), to track and analyse these types of attacks. A honeyclient mimics, either manually or automatically, the normal series of steps a regular user would make when visiting websites. It can be fully patched or be left vulnerable. The idea is to identify malware hosts, and possibly even gather attribution information. HoneyMonkey (dead since 2010) was a web browser based (IE) high interaction client honeypot built by Microsoft in 2005. It detected attacks on clients by monitoring files, registry, and processes. Thug is a Python low-interaction honeyclient aimed at mimicing the behaviour of a web browser in order to detect and emulate malicious contents. It is actively being developed. Many more such honeyclients exist.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "66da79bbce0ad12c27e603328766f4bb",
    "u": "https://honey.tymyrddin.dev/docs/notes/taxonomies",
    "t": "Taxonomies of honeypots ",
    "c": "Taxonomies of honeypots  A wide variety of honeypots exist, and some classification can be helpful. Purpose  According to purpose, honeypots can be divided into two main categories: A research honeypot is used to collect, monitor and analyse the activities of an attacker and the tools used to hack into the honeypot. It is used to discover an unknown vulnerability and attack. A production honeypot is focused on defence, and mainly implemented behind a firewall and usually concealed within the production network. Its purpose is to keep an attacker away from the actual system by creating an illusion of an actual system with vulnerabilities, and when attacked, alerts the system administrator of the intrusion. Interactivity  The level of interactivity provided to adversaries is also a useful distinction, with most honeypots falling into one of the below categories: Low-Interaction honeypots offer little interactivity to the adversary and are only capable of simulating the functions that are required to simulate a service and capture attacks against it. Adversaries are not able to perform any post-exploitation activity against these honeypots as they are unable to fully exploit the simulated service. Examples of low-interaction honeypots include mailoney and dionaea. Medium-Interaction honeypots collect data by emulating vulnerable services and the underlying OS, shell, and file systems. This allows adversaries to complete initial exploits and carry out post-exploitation activity. The system presented to adversaries is a simulation, and as a result, it is usually not possible for adversaries to complete their full range of post-exploitation activity as the simulation will be unable to function completely or accurately. Cowrie can function as a medium-interaction SSH honeypot. High-Interaction honeypots are fully complete systems, usually Virtual Machines, that include deliberate vulnerabilities. Adversaries should be able (but not necessarily allowed) to perform any action against the honeypot as it is a complete system. It is important that high-interaction honeypots are carefully managed, otherwise, there is a risk that an adversary could use the honeypot as a foothold to attack other resources. Cowrie can also operate as an SSH proxy and management system for high-interaction honeypots. Deployment location  Once deployed, honeypots can also be categorised by the exact location of deployment: Internal honeypots are deployed inside a LAN. This type can act as a way to monitor a network for threats originating from the inside, for example, attacks originating from trusted personnel or attacks that by-parse firewalls like phishing attacks. Ideally, these honeypots should never be compromised as this would indicate a significant breach. External honeypots are deployed on the open internet and are used to monitor attacks from outside the LAN. These honeypots are able to collect much more data on attacks since they are effectively guaranteed to be under attack at all times. Cyber kill chain  A must read : Three Decades of Deception Techniques in Active Cyber Defense - Retrospect and Outlook uses a tailored cyber kill chain model which can reflect the current threat landscape and a four-layer deception stack, a two-dimensional taxonomy is developed, based on which deception techniques are classified.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "553f557402dcdd1d275e079c9f6ab721",
    "u": "https://honey.tymyrddin.dev/docs/notes/concealed",
    "t": "Avoiding honeypot detection ",
    "c": "Avoiding honeypot detection  Automatic honeypot redeployment  Low interaction honeypots are more expensive to develop with built in anti-detection because their scope and functionality are limited in contrast to high interaction honeypots. On discovery by an attacker , modifying an existing honeypot configuration may be too costly. One approach for avoiding honeypot detection involves automated redeployment of the honeypot, which in turn reduces the need for anti-detection honeypot configurations. One study that has explored the development and implementation of such a mechanism automatically re-deploys a honeynet when it identifies that an attacker has detected it. Inbound and outbound Internet Control Message Protocol (ICMP) packets are monitored and any drop in the number of ICMP packets below a pre-determined threshold indicates that the attacker has disconnected (indicative of the honeypot being discovered). The honeypot is then automatically redeployed with an altered configuration with intent to trap the same attacker. This method reduces setup overheads and development of anti-detection mechanisms for honeypots. Honeypot delay reduction  One detection risk for honeypots comes from the introduction of arbitrary delays in processes that a honeypot mimics that would otherwise not have such delays. For example, authentication via SSH that is delayed due to logging or log forwarding required by a honeypot. These delays enable attackers to detect the honeypot. By reducing the time delay to match more closely that of a real infected host, the risk of detecting the honeypot is lowered. Delay reduction as an optimisation for honeypots has demonstrated its effectiveness in avoiding honeypot’s detection when applied to Honeyd. Honeyd is a virtual (software) honeypot that emulates the protocol stack (such as the TCP/IP stack), such that attackers are convinced they are attacking a real vulnerable system. But because Honeyd operates on a virtual network, the link latency can be used to detect the presence of the honeypot. Specifically, end-to-end latency in Honeyd’s design is a multiple of 10 milliseconds. By comparing latencies between a physical (real) network and a virtual (honeypot) network we can define a threshold in which the two latencies are different. Using that threshold we can detect honeypot networks that use Honeyd. Attackers can use measurements of round trip times (by using ICMP, TCP, or UDP echo-reply) to detect the presence of honeypots. The study found that camouflaging Honeyd by modifying it to have a lower link latency, was effective in avoiding the honeypot system being detected. The study concluded that although the method was successful with the Honeyd honeypot system, it can also be broadly applied to other virtual honeypot systems. Honeypot process transparency  Another side effect of the way honeypots operate is the lack of transparency that leads to revealing their deceptive design. An example of this can be observed in hybrid honeypot systems. In these types of honeypots, both low and high interaction honeypots are used with a frontend honeypot forwarding connections to a backend honeypot. Current TCP connection handover mechanisms in hybrid honeypot systems can easily be detected. One study proposed a transparent TCP connection handover mechanism that uses different ports of an OpenFlow-based switch to isolate honeypots while TCP connection parameters (SEQ, ACK numbers) remain the same. The hybrid honeypots require network traffic to be re-directed from the frontends to the backends and this traffic redirection is often not transparent enough to evade detection. An alternative mechanism consists of three phases: Phase one is initiated by an attacker sending a TCP connection request to the target honeypot. The honeypot controller forwards the request to the frontend which performs the TCP three-way handshake to establish a connection with the attacker. Phase two involves transferring the TCP session from the frontend to the backend using a TCP replaying approach. This approach replays the three-way handshake using the saved attacker’s SYN packet. SEQ and ACK numbers are then synchronised leading to the third phase. In phase three packets are exchanged directly between the attacker and the backend. The study concluded that this approach makes the hybrid honeypot much stealthier, but at the expense of reduced performance. In general, honeypots need to ensure that operations that are being emulated need to maintain transparency. In other words, they need to hide any modified sequence of events that is not realistic. Dedicated hardware  Although expensive, the use of dedicated hardware for honeypots can help minimise their detection rate (for example by reducing arbitrary software delays). Additionally, dedicated hardware can also provide an additional layer of security against honeypot compromise. These benefits were demonstrated in a study, An FPGA-based Scalable Platform for High-Speed Malware Collection in Large IP Networks : This architecture implemented honeypots using dedicated hardware instead of a general-purpose processor and it also made use of a high-speed implementation of the IP stack. Additionally, the approach used a specialised stateless TCP hardware. The stateless TCP hardware can manage hundreds of thousands of simultaneous connections thereby enabling the system to support large honeynets. An increased speed of execution of TCP operations may reduce the likelihood of a honeypot being detected by an attacker. An additional benefit of implementing honeypot operations in hardware instead of software using general-purpose processors is that it also reduces the risk of the honeypot software being compromised and used for attacks. Dynamic intelligence on honeypots  The advent of dynamic approaches to honeypot development as well as novel techniques in machine learning and artificial intelligence provide an opportunity for more diverse honeypots that alter their behaviour depending on the actions of an attacker. The result is a more adaptable honeypot that is more difficult to detect. In general, dynamic honeypots have a behaviour that is not fixed, but changes based on some condition and adapts to the current environment. In this case, configuration or re-configuration is not required. An example of such a system is a high interaction honeypot that uses reinforced learning in order to dynamically change its behaviour based on the interaction that it has with an attacker. The honeypot can strategically block program execution, alter program names in order to lure attackers and can deceive attackers with the intent of having them reveal their background, which is especially important for research honeypots.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f8931ee27728477101b6481f4c009e33",
    "u": "https://honey.tymyrddin.dev/docs/notes/detection",
    "t": "Detecting honeypots ",
    "c": "Detecting honeypots  Honeypot detection lies in an attacker’s ability to detect, and find out the deceptive nature (IoCs) of the honeypot. Often this relies on the limited ability of a honeypot to align with an attacker’s mental model. This mental model is based on the attacker’s expectation of what a realistic environment should look like. And that is based on experience. Note: If you manage to fingerprint any of the used honeypots, make sure to let the creators know. There are also some legal constraints that, due to the nature of defenders having to abide by the law, enter in the design. For example, a honeypot bot that is part of a botnet cannot legally perform denial of service attacks to systems. Attackers can knowingly look for signs of such legal constraints. And in this cycle, honeypot designs are improved to conceal them better .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "03e00a7aac1de7759b2956d68ba2e518",
    "u": "https://pap.tymyrddin.dev/docs/mitre/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Understanding our current defensive capabilities and mapping them against Mitre Att&Ck framework. MITRE offers a better understanding of the operations of threat actors, enabling systematic and repeatable categorisation. Why?  Helpful for discovering where and how best to invest our time and energy. Then layer the same with potential threats to our devices and (home) networks. The gaps discovered are the areas that should be focused first. How?  Phishing for information Application Layer Protocol: Mail Protocols Drive-by compromise Supply chain compromise Signs of a compromise @home",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e15a3035588ac812aefe44ef2c56d2a9",
    "u": "https://pap.tymyrddin.dev/docs/mobile/madware",
    "t": "Madware ",
    "c": "Madware  Madware (mobile adware) usually finds its way onto a mobile phone through the installation of a script or program and often without the consent of the user. The purpose of most forms of madware is to collect data from your phone in order to spam you with ads. Most madware variants include an element of spyware , which collects information about internet usage and sends it on to a third party. This data may include details about location, used passwords and contacts. Prevention  Updated operating systems and spam filters can help protect devices against adware.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "aff08c998791d343735761cc01653e1d",
    "u": "https://windows.tymyrddin.dev/",
    "t": "Hardening Windows ",
    "c": "Hardening Windows  Version 0.1: These mitigations are all based on Windows 10. Supposedly, Windows 11 has better security . Some of these mitigations may still be applicable and useful. When we have an 11 key we will install, test it, and add mitigations. Accounts and authentication Introduction More secure login Require a password when resuming from a stand-by mode Make that more secure passwords Use a password manager Use multifactor authentication (MFA) Use a standard user account Protect SSH access with MFA Services and applications Introduction Start, stop, restart, enable, and disable services Restricting access to applications Block internet access to specific apps Maximise user account control (UAC) Unwanted application suggestions Secure browsers that protect your privacy Use a secure messaging service Use secure email services Use SSH tunnels Use a VPN service Make a VPN killswitch using routes Use alternative DNS servers Use a Tor proxy Change MAC address Renew IP lease Edit hosts file Data Introduction Create a restore point Enable full disk encryption using BitLocker File encryption Enable controlled folder access (CFA) Privacy Introduction Disable location tracking Disable Ad tracking by Microsoft Ad partners Turning devices on and off Remove metadata from files Edit exif metadata in images Remove metadata with hex editors Clean machine with BleachBit Malware Introduction Malware detection and removal Catch and remove malicious registry entries Analysing trojans Operations security Introduction Use email securely Detecting fake emails and phishing Browse more safely Check integrity of downloads ‘;–have i been pwned? Guards! Guards! Introduction Alphabet soup Windows intrusion detection systems",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f2d6516fd293cb2468c8f5e80e4ac3f5",
    "u": "https://windows.tymyrddin.dev/docs/services/odd-applications",
    "t": "Unwanted application suggestions ",
    "c": "Unwanted application suggestions  QuickTime is Apple’s video player, a current program on macOS, but the company hasn’t supported the Windows version since 2016, and TrendMicro sent out an urgent call to remove it . If you need a replacement for QuickTime, use VLC. CCleaner, once a trusted Windows app for cleaning junk, but its reputation went downhill after it was acquired by Avast. It became better again but is largely useless, as better tools and ways exist. Garbage like MyCleanPC or PC Optimizer Pro for cleaning your PC. These products range from useless to harmful. uTorrent was once considered the gold standard of torrenting software. Now a heap of ads, and in 2015, the app was found to bundle in cryptocurrency mining software without letting users know, wasting your system resources in the background to make money for the company. As in, a botnet of sorts. Try qBittorrent . Adobe Flash Player is no longer supported as of January 2021. It is blocked in all modern browsers, but if your machine still holds a local copy of Flash, remove it. A similar runtime plugin, Adobe Shockwave Player, was discontinued in 2019. Remove. Once common, Java is another media runtime to remove, both components: Java on the desktop, and the Java plugin for browsers (which is notorious for having security problems). Very few websites use it nowadays. Silverlight is a web framework, similar to Adobe Flash, that once enabled rich media content in your browser. Years ago, these plugins were necessary on a lot of websites. But now they’re deprecated and no longer useful. Google chrome extensions: Hola, The New NX, FindMeFreebies, Hover Zoom, All Antivirus Extensions, Any Unfamiliar Extensions. Toolbars like the Bing Bar, Google Toolbar, Ask Toolbar, Yahoo! Toolbar, or the Babylon Toolbar. Coupon Printer Manufacturer Bloatware. Anything from the manufacturer is probably not necessary, but it’s always good to double-check . Microsoft Bloatware, for example Store apps. Candy Crush Saga? Really??? WinRAR. 7-Zip is a free and simple tool that covers most people’s needs. … Tools  W3Techs Should I remove it?",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f7127af4d1128c0a937bf72be92acfdd",
    "u": "https://windows.tymyrddin.dev/docs/data/cfa",
    "t": "Enable controlled folder access (CFA) ",
    "c": "Enable controlled folder access (CFA)  Controlled folder access is supported on Windows Server 2019, Windows Server 2022, Windows 10, and Windows 11 clients. This feature has been tested against various ransomware samples. Controlled Folder Access achieved what it was designed to do; successfully block ransomware from encrypting files located in protected folders. Type “Windows Defender Security Center” in search box and Enter. Select Virus & threat protection -> Virus & threat protection settings option from the main window. Locate the Controlled folder access section. To enable the feature, click the On/Off toggle. Select the Protected folders sub-option underneath and add all the folders you want to restrict access to. The other sub-option underneath, Allow an app through Controlled folder access, will whitelist the apps that are allowed to access, edit, create or remove files from protected folders.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7ac776a892437bd563e2a128562a2b4e",
    "u": "https://windows.tymyrddin.dev/docs/authentication/mfa",
    "t": "Use multifactor authentication (MFA) ",
    "c": "Use multifactor authentication (MFA)  Many sites and applications offer two-factor authentication (2FA), also named multi-factor authentication (MFA). With 2FA enabled, logging into a website or application requires both a password and a unique code that is texted to your phone number or delivered via an authenticator app. You have to input this code in order to gain access to your account. Even if someone else has your password, they will not be able to break into your accounts if they can not get the code. When you use one of the authenticator apps included here, you bolster the password you know with the token, smartphone, or smartwatch that you have. Setting up MFA usually involves scanning a QR code on the site with your phone’s authenticator app. Note that you can scan the code to more than one phone, if you want a backup. Authenticator apps generate time-based, one-time passcodes (TOTP or OTP), which are usually six digits that refresh every 30 seconds. Once you set up MFA, every time you want to log in to a site, you enter the code into the secured app or site’s login page, and you’re in. The time limit means that if an adversary manages to get your one-time passcode, it won’t work for them after that 30 seconds. Something to look for when choosing one of these apps is whether it backs up the account info (encrypted, of course) in case you no longer have the phone you set everything up on. These all do (Google Authenticator does not). It’s a choice. Risks either way. Authy Duo Mobile LastPass Authenticator Microsoft Authenticator",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b31a576ceffe356fc29d0ab73588c762",
    "u": "https://windows.tymyrddin.dev/docs/guards/readme",
    "t": "Introduction ",
    "c": "Introduction  There are many types of devices and mechanisms within the security environment to provide a layered approach of defense. This is so that if an attacker is able to bypass one layer, another layer stands in the way to protect the network. Two of the most popular and significant tools used to secure networks are firewalls and intrusion detection systems. Choosing a firewall for a Windows PC  With a firewall, you can: Log hosts scanning services that aren’t running. Limit the services that applications can connect to. Segregate the local network into trust segments (Local Area Network (LAN), DeMilitarised Zone (DMZ), and Internet). Redirect ports to the hosts providing the service (Network address translation (NAT)). Windows comes with a built-in firewall in Windows 10, but this firewall may be turned off by default. Turn it on via Settings: Under Windows Settings section, click Update & Security. Select Windows Defender and then click Open Windows Defender Security Center. Choose Firewall & network protection and choose a network profile. Under the Windows Defender Firewall section, switch Off to On. In order to allow a specific application to pass through your Windows Firewall, you have to add it to the list of other permitted applications. You can do this by clicking Allow an app or feature through Windows Defender Firewall. If you’d like to be more secure, install a firewall (none of which offer exploit attack protection, by the way). ZoneAlarm Comodo TinyWall Choosing a HIDS for a Windows PC  Most of the HIDS tools for Windows are EventLog Analyzers.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7027c2ec2d34ca5e3663e08501f4c588",
    "u": "https://windows.tymyrddin.dev/docs/privacy/metadata",
    "t": "Remove metadata from files ",
    "c": "Remove metadata from files  Metadata is data about data. Metadata answers who, what, when, where, why, and how about every facet of the data that is being documented. Photos, and images in general, contain metadata. For photos this includes how large the picture is, colour depth, resolution, the date and time when it was created, the GPS coordinates of the location they were taken at, camera shutter setting details, and possibly even the name of the program used to edit them. Document metadata is information about one or more aspects of a document, spreadsheet, pdf file, that is not always visible to the person creating them, but can be found by the person who receives them next. Comments, track changes, hidden text, mark-ups, properties, attachments and bookmarks are all examples of document metadata. Office documents like pdf or Office automatically add author and organisation information to documents and spreadsheets. Web pages often include metadata in the form of meta tags. Description and keywords meta tags are commonly used to describe the Web page’s content. Most search engines use this data when adding pages to their search index. This type of metadata can be useful, but maybe you do not want to disclose this information on the web, because metadata can be used for other purposes as well: Metadata is collected by corporations for psychological manipulation in persuasion and advertising. Metadata also plays a number of important roles in computer forensics: It can provide corroborating information about the document data itself. It can reveal information that someone tried to hide, delete, or obscure. It can be used to automatically correlate documents from different sources. Metadata is used by hackers doing reconnaissance for an attack And last but not least, it can be used to correlate data in dragnet and targeted surveillance. Techniques for metadata removal  Metadata removal software like BleachBit Using a hex editor Edit exif metadata in images",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e53d358cf3fec4ce67ca53bba87f8947",
    "u": "https://windows.tymyrddin.dev/docs/services/vpn",
    "t": "Use a VPN service ",
    "c": "Use a VPN service  Internet providers are collecting your browsing data and handing this over to third parties (US, UK, Australia, and much of Europe). Public Wi-Fi remains a serious threat with adversaries targeting unsuspecting users. Many streaming services and websites restrict content to certain geographic locations. A VPN allows you to bypass such restrictions. A VPN will encrypt the connection and make the traffic unreadable. No logs policy  Meaning, not logging traffic, DNS requests, timestamps, bandwidth, IP address. NordVPN , Panama Mullvad , Sweden IVPN , Gibraltar Surfshark VPN , Netherlands Logs timestamps and bandwidth  Does not log directly identifiable information. ExpressVPN",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3b21fcd029fd7b3d38176a1c634d4f51",
    "u": "https://windows.tymyrddin.dev/docs/malware/analysing-trojans",
    "t": "Analysing trojans ",
    "c": "Analysing trojans  Check file properties. Be careful not to click on any links or attachments in the email accidentally. Is it what it seems to be? Run the file in a virtual machine and analyse it. Use an online Sandbox service. Related  Malware sandboxes Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d1d5aa12dce71562fe71bf7af4f5f0e2",
    "u": "https://windows.tymyrddin.dev/docs/authentication/password-manager",
    "t": "Use a password manager ",
    "c": "Use a password manager  The majority of people use very weak passwords and reuse them on different websites. How are you supposed to use strong, unique passwords on all the websites you use? The solution is a password manager. Password managers store your login information for all the websites you use and help you log into them automatically. They encrypt your password database with a master password — the master password is the only one you have to remember. Managers  Dashlane 1Password Bitwarden It does not protect from keyloggers  Most password manager work by copy-pasting data quickly from your manager to the field (on the website) or by simulating keystrokes for all the data on file. A keylogger captures keystrokes and would capture all passwords entered by a password manager that simulated keystrokes. Nearly all keyloggers even include the capability to take screenshots at particular intervals of time and save all the contents of the clipboard to a file. The last bit is important, because it sort of renders even password managers that use the clipboard to fill in these forms useless. The real solution to preventing these attacks is to monitor your system for any keyloggers or use some sort of AV solution .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "17cdd321a5a809b48081d1f60f1838d9",
    "u": "https://windows.tymyrddin.dev/docs/opsec/check-mail",
    "t": "Detecting fake emails and phishing ",
    "c": "Detecting fake emails and phishing  Fake emails  View the header info. Pay attention to the email address of a sender. It may imitate a legitimate sender. With only few characters altered or omitted, cybercriminals will often use an email address that closely resembles one from a reputable source. Look closely at the content: Hover your cursor over any links in the body of an email. Links not matching the text that appears raise a red flag. So does the use of URL shortening services. Email clients can be viewed in simple text instead of html, so one never forgets to do this. Poor grammar and sentence structure, misspellings, and inconsistent formatting can be other indicators of a possible phishing attempt. An unsolicited email requesting a user download and open an attachment is a common delivery mechanism for malware, even when it seems to come from a friend, or an employeur. A false sense of urgency or importance to help persuade a user to download or open an attachment without examining it first, completes this picture. Do not. Verify message source. Check the reply email. Reply and wait for the result. Phishing  Be wary of emails asking for confidential information. Don’t get pressured into providing sensitive information. Phishers like to use all kinds of social engineering. Learn what you can about it. Check a website’s privacy policy, especially whether it will or will not sell its mailing list. If so, do not register. Watch out for generic-looking requests for information. Never submit confidential information via forms embedded within email messages. Never use links in an email to connect to a website unless you are absolutely sure they are authentic.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d1edc50cca1985b4035bcd0a4cb09baa",
    "u": "https://windows.tymyrddin.dev/docs/data/disk-encryption",
    "t": "Enable full disk encryption using BitLocker ",
    "c": "Enable full disk encryption using BitLocker  Enabling full disk encryption minimizes the chance that data on your computer will ever be misused. Requirements  Windows 10 Pro and Windows 10 Enterprise include BitLocker, Windows 10 Home does not. A TPM chip. To check if your machine has a TPM chip: Type tpm.msc in the search box, and press enter. In the following window, check the TPM status. On some systems, TPM chips are disabled by default, and you will need to enable the chip in the BIOS menu: Under Security settings, look for a TPM subsection. Most likely it will allow Activation/Enabling by ticking some box or a toggle of sorts. If there is no TPM chip on your motherboard, you can still enable Bitlocker by editing the “Require additional authentication at startup” group policy. Enable via Control Panel  Either Control Panel -> Bitlocker Drive Encryption OR System and Security -> Bitlocker Drive Encryption Expand the drive you want to enable Bitlocker on, and click on the Turn on Bitlocker hyperlink If your TPM is already enabled, you will directly be brought to the BitLocker Startup Preferences selection window. If not: Go through the Bitlocker Drive Encryption startup by clicking on Next. Eject any connected USB drives and remove any CDS/DVDs sitting idle in the optical disc drive. Click on Shutdown. Follow the instructions that appear on the screen to activate the TPM. Activating the module is as simple as pressing a key (varies depending on manufacturer). The computer will most likely shut down again once you activate the TPM; turn on your computer back on. Choose to enter a password at every startup or connect a USB/Flash drive (Smart Card) containing the startup key. The latter is somewhat of a dangerous option. If the USB drive holding the key is damaged or lost you may lose access to the drive. Set a strong password and re-enter it to confirm. Next. Keep the recovery key securely locked away on both (dedicated) USB storage and paper. Encrypt a drive  Choose to either encrypt the entire hard drive or only the part used. On old buckets where most of the storage space is already being used, do the whole hard drive. On new machines, or machines with little data, choose to encrypt only the space that is currently filled with data. Bitlocker will automatically encrypt any new data you add to the disk. Choose encryption modes. Select the New encryption mode if the disk is a fixed one. Select compatible mode if you are encrypting a removable hard drive or USB flash drive. Depending on your system Run BitLocker system check (OR) Start encrypting Restart the computer to initiate the encryption process (can take from 20 minutes to hours) Now every time you boot on your computer, you will be prompted to enter the passkey in order to access the encrypted files.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1dd3ceb996fd934acfdbe7a7e04c3efd",
    "u": "https://windows.tymyrddin.dev/docs/services/block-internet-access",
    "t": "Block internet access to specific apps ",
    "c": "Block internet access to specific apps  There is a simple way to restrict internet access to specific apps in Windows 10 with the Windows Defender Firewall. Only restrict internet access to apps that do not need the internet to function properly. Examples  Type in Windows Defender Firewall in search box and open it. Go to Advanced Settings on the left sidebar. This will open a new window. Select Outbound Rules on the left sidebar. Go to New Rule on the right side of the window. Choose Program on the new window, and then click on Next. Next to This Program Path, click on the Browse button. Find the app you want to restrict internet access for. Click on Next again. Click on the Block the Connection circle, and then Next. Check the Domain, Private, and Public boxes and click Next. Give the rule a name and description. Finish.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3ffe1f2bfff0e0b56667f3f063912eea",
    "u": "https://windows.tymyrddin.dev/docs/services/max-uac",
    "t": "Maximise user account control (UAC) ",
    "c": "Maximise user account control (UAC)  Windows was designed as a single-user desktop system and has had various functionality added to it over time to address the weaknesses of the original design. A major weakness is that a desktop Windows user is also an admin-level user. User Account Control (UAC) was introduced in Windows Vista to create more of a barrier to installation and requires users to specifically authorise certain actions by clicking an OK button when prompted. By requiring administrator privileges to install programs, it is harder to deploy malware. In the search box type “Change user account control” and select the first result Move slider to Always notify me up top and click on OK Now the machine always asks for the user’s permission before making any changes. And, the weakest link in any security chain is people. While these privilege escalation tools are fully functional, many people will simply type in their administrator password, or click the OK button to allow highly privileged activities to occur whenever the prompt comes up, without further thought. In fact, this opens up another attack route for privilege escalation by an adversary. Presenting people with a spoofed pop-up box asking for the password, will usually work. For better separation, you can create a standard Windows account yourself.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "977c5ea8297420a0016a3279bd13b103",
    "u": "https://windows.tymyrddin.dev/docs/opsec/browsing",
    "t": "Browse more safely ",
    "c": "Browse more safely  Keyloggers and other malware can be installed via a web page script which exploits a browser vulnerability. The program will automatically be launched when a user visits an infected site. Compromising a browser is relatively easy, and it is cross-platform, hence an often chosen target. Plus that browsers (for performance reasons) prefetch exposing users to more security risks by downloading more pages, or from un-requested sites (additionally compounded as drive-by downloads become more advanced and diverse). BeEF & other browser exploits, when not using browser vulnerabilities, rely on javascript. Choose a secure browsers that protect your privacy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2243d157be8d2f656d63cdee40cf9bc8",
    "u": "https://windows.tymyrddin.dev/docs/authentication/resuming",
    "t": "Require a password when resuming from a stand-by mode ",
    "c": "Require a password when resuming from a stand-by mode  A screensaver password and a sleep/stand-by password are different settings. Screensaver  It is likely that your screensaver starts up before your computer goes to sleep, so that may be a better choice on a desktop. In searchbox type “Change screen saver”, then press Enter. In the Screen Saver Settings window, check the box On resume, display logon screen. OK Sleep/stand-by  A laptop is put to sleep when by closing the lid. A screensaver would not be active, and a screensaver password not needed. For a sleep/stand-by password: Control Panel -> Power Options On the left choose Require a password on wakeup You may have to click the link that says “Change settings that are currently unavailable” Select Require a password You will be able to wake the computer with your local password .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "524bc89a2bfcdbdb421e3488d7d6b831",
    "u": "https://windows.tymyrddin.dev/docs/services/restrict-services",
    "t": "Start, stop, restart, enable, and disable services ",
    "c": "Start, stop, restart, enable, and disable services  You must be signed in as an administrator to be able to do these. If you stop, start, or restart a service, any dependent services are also affected. Starting a service does not automatically restart its dependent services. Changing the default service settings may prevent key services from running correctly. It is especially important to use caution when changing the Startup type setting of services that are configured to start automatically. Some services, such as Remote Procedure Call (RPC), Event Log, and Plug and Play, cannot be stopped by using the Services snap-in window or the net stop command. These services are required for the operating system to function properly. Create a restore point before making changes to the services. If you disabled the wrong service and lost access to the computer, then try booting into Safe Mode to change the service back. “Startup Type” for Service  Automatic - With a service in this state, it will start at boot time. Some services, when no longer required, will also automatically stop when not needed. If you find you do not need a service, place it into Manual or Disabled. Automatic (Delayed Start) - With a service in this state, it will start just after boot time. Some services, when no longer required, will also automatically stop when not needed. If you find you do not need a service, place it into Manual or Disabled. Automatic (Delayed Start, Trigger Start) - With a service in this state, it will start just after boot when specifically called. Manual (Trigger Start) - This is a version of Manual mode that allows Windows to start a service when specifically called and Microsoft’s answer to “too many services running all the time”. Manual - Manual mode allows Windows to start a service when needed. However, very few services will start up when required in Manual mode. If you find you need a service, place it into Automatic. Disabled - This setting will stop a service from starting, even if needed. Errors in the Event Viewer will show up complaining of that fact. Some services, while Disabled, will constantly complain. However, this situation is taken care of if placed in Manual. The service descriptions identifies those that should be in Manual vice Disabled. Examples  Services window  Open the Services snap-in window (open the Run dialog, type services.msc OR Administrative Tools -> Services) Choose a service and double click it. You can Change its “Startup Type” (OR) Click the Stop button (OR) Enable/start a service: If the Startup type of the service is set to Disabled, then you will need to change it to either Manual, Automatic, or Automatic (Delayed Start) before you click the Start button (OR) Disable a service: If the service shows a status of running, then click/tap on the Stop button, and wait until the service status shows as stopped before you diable it. Using net Command  Requires the elevated command prompt, knowing the service name, and the double quotes. The Display name of a service is the name displayed in the Services snap-in window, and in the service’s properties. net stop \"service name\" net stop \"display name of service\" net start \"service name\" net start \"display name of service\"",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "be584bad1285129f01d3b408c84762a8",
    "u": "https://windows.tymyrddin.dev/docs/services/change-mac",
    "t": "Change MAC address ",
    "c": "Change MAC address  A MAC address identifies the device connected to a network and allows the network to track, restrict or allow access based on it. Routers identify and assign static IP addresses based on the MAC addresses of devices. Before you try to change the MAC address, you need to know the value that you want to use. Set the 2’s place bit (the “locally administered” bit) in the first byte, to differentiate it from a guaranteed globally unique MAC address. Usually the first three bytes an unicast MAC address is an “Organizationally Unique Identifier” (OUI) that the IEEE assigned to the manufacturer of your Ethernet device. Manufacturers are required to make sure they keep the last 3 bytes unique. Avoiding all of that knowledge, the MAC address generator tool can generate a valid address for you. Device Manager  In the Device Manager window, click the arrow next to Network adapters. Right-click the adapter for the network card that you want to change. Choose Properties from the menu. Select the Advanced tab. Select Network Address in the Property displayed list. Type the new MAC address value on the right side. Press the OK button. Control Panel  In the Control Panel window, search for “network connections” and choose “View network connections” in the results. Right-click on the network connection you want to change. Choose Properties from the menu. In the Properties window, click the Configure button. In the new Properties window that pops up, select the Advanced tab. Select Network Address in the Property displayed list. Type the new MAC address value on the right side. Press the OK button.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f2437a5075f6daf9c4871476c33a6a6a",
    "u": "https://windows.tymyrddin.dev/docs/services/tor-proxy",
    "t": "Use a Tor proxy ",
    "c": "Use a Tor proxy  Tor proxy  Install: $ sudo apt update $ sudo apt install tor Check it is installed: $ tor --version Tor version 0.4.6.9. Get your IP address: $ curl ifconfig.me; echo [IP address] Run the same command but preface it with torsocks. The command is now run through the tor client instead: $ torsocks curl ifconfig.me; echo [Some Tor IP address] To use the Tor network by default for shell commands, torify your shell with this command: $ source torsocks on Tor mode activated. Every command will be torified for this shell. Test with (must now be []): $ curl ifconfig.me; echo [Some Tor IP address] Notes  If a government makes their own national internet, or routes traffic through specific servers to use deep packet inspection (DPI), running Tor may not provide security if the government is able to see the entire path. Sometimes the Tor network is censored, and clients can’t connect to it. An increasing number of censoring countries are using Deep Packet Inspection (DPI) to classify Internet traffic flows by protocol. While Tor uses bridge relays to get around a censor that blocks by IP address, the censor can use DPI to recognize and filter Tor traffic flows even when they connect to unexpected IP addresses. With pluggable transports, censorship against Tor can be bypassed. Not only that. If an attacker can see your traffic, and can see the website you’re visiting, even with a path outside the adversary’s control - they will still be able to correlate the traffic and learn you are visiting the website. If the same connection (the same set of relays) were to be used for a longer period of time a Tor connection could be vulnerable to statistical analysis, which is why the client software changes the entry node every ten minutes.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6aede37dd8d610100aa023a3723b5cac",
    "u": "https://windows.tymyrddin.dev/docs/services/edit-hosts-file",
    "t": "Edit hosts file ",
    "c": "Edit hosts file  The hosts file is a system file on a device that lets you map specific domain names to an IP address. If you want to add new entries to the hosts file, you’ll need the IP address of the server that you want to map a hostname to. XXX.XXX.XXX.XXX some.domain.name The hosts file lets you override DNS entries for any domain name. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. Blocking is achieved by setting the IP address of the ad networks to a loopback address like 127.0.0.1 which will not return anything. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. If your device is infected with malware, then your hosts file may be compromised to included unknown entries for known domain names. That is NOT the IP address of your bank! This type of DNS attack is known as DNS pharming, and checking your hosts file can uncover potential infection. Windows  To edit the hosts file ( C:\\Windows\\System32\\Drivers\\etc\\hosts ) on Windows, you will need Administrator access. Right-click on your text editor’s icon (for example Notepad++) and choose //Run as administrator//. Go to File → Open in the text editor and navigate to C:\\Windows\\System32\\drivers\\etc\\ From the list, click on the hosts file and choose Open Add as many new entries as needed",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "54e22b5628bae6a435e99931d38a6530",
    "u": "https://windows.tymyrddin.dev/docs/services/renew-lease",
    "t": "Renew IP lease ",
    "c": "Renew IP lease  A DHCP client can on occasion send information in DHCP requests: hostname, MAC address, operating system, and DHCP version. All operating systems provide their most recent IP address to the DHCP server. If you change your MAC address to minimise risk, best to also renew the IP leases on the router. Windows  Using a /renew switch (This command won’t work if the computer is configured to use a static IP address): C : \\ > ipconfig / renew",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "13672a7d5524091c5421a5b9a4544cb8",
    "u": "https://windows.tymyrddin.dev/docs/malware/readme",
    "t": "Introduction ",
    "c": "Introduction  Windows has been struggling with malware for years and thus has decent protection layers built-in. Microsoft’s Defender is pretty good at detecting malware files, blocking exploits and network-based attacks, and flagging phishing sites. It even includes simple PC performance and health reports as well as parental controls with content filtering, usage limitations, and location tracking. Its malware detection rates are lower than for many third-party competitors and content filters are limited to the Microsoft Edge browser. Common signs of Windows 10 malware: Ads pop up in unexpected places, frequently Machine is running slower than usual Machine is consuming more power than necessary Strange behaviour, such as installing programs without your consent, even after rebooting it. Find these, or think you may have an infected system, or just wish to know more: Endpoint detection and response Malware analysis DIY: Malware detection and removal Catch and remove malicious registry entries Analysing trojans",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "af8d6c1d1c793758588aee1f33b38523",
    "u": "https://windows.tymyrddin.dev/docs/services/vpn-fail-open",
    "t": "Make a VPN killswitch using routes ",
    "c": "Make a VPN killswitch using routes  If you simply add a VPN using common instructions, it generally “fails open”. That means, if the VPN breaks down, because the connection is interrupted, traffic will be sent without the VPN. It is much safer when it “fails closed”, meaning that when the VPN connection breaks down, the whole internet connection must be down as long as the VPN connection is not restored. If your chosen VPN does not include being able to set a kill switch, you can use routes as a fail-safe mechanism: Make sure you’re connected to the OpenVPN server: Run the Command Prompt with admin rights. Delete the default route when the OpenVPN connection is established. > route delete 0.0.0.0 Now the default routing method is deleted, making VPN the only access method to the internet. Your internet connection will be cut off when VPN is inaccessible. The operating system will remain stasis until it can access that route again. Note that this state is ot persistent. If the router reboots or the adapter is disabled, the settings will be taken to a default state. To manually restore the default settings: Go to Control Panel -> Network and Internet -> Network and Sharing Center. Click Change adapter settings. Disable and then enable it again.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "849852b1f88396696d4707f4671ea3b4",
    "u": "https://windows.tymyrddin.dev/docs/opsec/integrity-downloads",
    "t": "Check integrity of downloads ",
    "c": "Check integrity of downloads  When downloading an ISO image of, for example, the latest Linux distro, installing or upgrading packages, or downloading software, you can verify the files have downloaded correctly and securely by using checksums. Checksums ensure the integrity of data portions for data transmission or storage. Checksums is a simple error-detection scheme in which each transmitted message is accompanied by a numerical value based on the number of set bits in the message. The receiving station then applies the same formula to the message and checks to make sure the accompanying numerical value is the same. If not, the receiver can assume that the message has been garbled (or was altered). Verifying downloaded software  When downloading software, .iso s and .deb s and the like, download the xxxsum (choose from what is available) as well as the software and check. Open Command Prompt or PowerShell and type: > certutil -hashfile [file_name] [hash-algorithm] For example: > certutil -hashfile .\\some-file.iso sha256sum and compare the output from the command with the key listed in the associated sha256 file.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5695d8dddd38e843f47d40e536d04836",
    "u": "https://windows.tymyrddin.dev/docs/services/email-services",
    "t": "Use secure email services ",
    "c": "Use secure email services  Mailfence , Belgium, provides a full suite of services, Messaging, s, Calendars, Groups, and Document storage. It can easily replace the G suite. It is a secure email suite that offers end-to-end encryption (through PGP support) and works with different email clients. There is some logging of IP address and some other data, and the code is not open source. Tutanota , Germany, is a small but serious player among secure email providers. It uses a hybrid encryption system that avoids some drawbacks of PGP, and is protected by the GDPR and other pro-privacy EU regulations. So, it does not work with PGP and there is no way to import existing emails (yet). ProtonMail , Switzerland, uses PGP encryption standards for email and stores all messages and attachments encrypted at rest on Swiss servers. ProtonMail has a unique feature for “self-destructing messages” and they have also added address verification and full PGP support. Articles  Reddit: Court forces mail provider Tutanota to perform a surveillance function Twitter: ProtonMail logging one of its users and providing IP address logs to French authorities Reading that carefully, if the message had already been encrypted and the IP address had been that of a VPN , these cases would not exist.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2b579ce55d01f323669c42df25af64c2",
    "u": "https://windows.tymyrddin.dev/docs/opsec/hibp",
    "t": "‘;–have i been pwned? ",
    "c": "‘;–have i been pwned?  ‘;–have i been pwned? (HIBP) is a database of several billion email addresses (and, separately, passwords) that have appeared in a publicly known past data breach. The service creates an SHA-1 hash of the submitted email address and passes the first six characters of that to HIBP’s hash range query API. HIBP then returns a range of possible matches, if any, to the six character string, without ever handling the full email address. Check if you have an account that has been compromised in a data breach, and if so, change your password and change it in any other place where you’ve used that password. Better yet, never use a password twice, and consider using a password manager.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3f7242b04a77966e9c394a0331557bb6",
    "u": "https://windows.tymyrddin.dev/docs/privacy/metadata-images",
    "t": "Edit exif metadata in images ",
    "c": "Edit exif metadata in images  Native  Click right then properties on the Image file Click on the Details In this tab, at the bottom left, click on “Delete properties and personal information” Select Create a copy with all possible properties removed or Remove the following properties from this file, and select the properties you want to remove. In Origin, you can edit the Author, Data taken, Date acquired, and Copyright. For more on metadata on Windows: The Details tab divides metadata properties in a number of sections, different for each file type. The image file is divided in six sections. The first section is called Description, and you can click the value field for Title, Subject, Tabs, Comments, and edit its information. Image shows relevant information about the image, all of which is automatically added and cannot be modified. The Camera section includes the details of the camera that was used to take the picture. Some of these fields can be modified. The Advanced photo section shows fields useful for photographers. Only some fields can be edited. File shows file name and type, location path, date created and modified, owner, and computer name where the file resides. These fields can not be edited. Using IrfanView  This may become complicated if needing to remove EXIF data on multiple images from a complete folder. IrfanView is a free image viewer software and photos that also gives the possibility to remove all data from an image or photo file. When saving an image, an option “Keep Original EXIF data” is present. Unchecking the option removes all EXIF data from the image file. Can be done in bulk. From the File -> Batch Conversion / rename menu, data on several image files can be deleted in one click.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "bb059a0b1fdc6ee35520851c51c66a57",
    "u": "https://windows.tymyrddin.dev/docs/services/restrict-access",
    "t": "Restricting access to applications ",
    "c": "Restricting access to applications  Examples  Program Blocker  There are many third-party programs on the Internet that you can use to restrict applications. They will simply lock the applications and password-protect them. Try AskAdmin or Program Blocker Restrict application access to email application  Go to Settings -> Privacy Click on Email from the left menu Toggle off the app access to emails. This will ensure that applications have no access to your emails, unless … Under the “Choose app that can access and send email” section, you can allow access to any specific applications that need email accessed. Any application to users using Group Policy Editor  This method is only possible if you have Windows 10 Pro or Enterprise: In the search box, type gpedit.msc , and select OK. Click on User Configuration on the left sidebar. Go to Administrative Templates folder. Go to the System folder. Locate the Don’t run specified Windows applications file on the right pane. Double-click on it. This will open a new window. On the left side of the window, check the Enabled circle. Under Options, go to Show. Type in the name of the app you want to restrict access to. Don’t forget to add the .exe extension after the name of the app. Apply. OK.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0516c474dd45bdbbb39c38c20d8284cf",
    "u": "https://windows.tymyrddin.dev/docs/malware/clean-registry",
    "t": "Catch and remove malicious registry entries ",
    "c": "Catch and remove malicious registry entries  Automagically  Restoro Iolo System Mechanic Manually  Windows Registry is one of the most important built-in tools on your Windows computer. Registered malware is not uncommon. Check the Windows Registry for malware because any operation on your PC can make a footprint in it. And you can remove malware from the Windows Registry. Create a system restore point Run regedit to open the Registry Editor Go to HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion Scroll down and find the folders which start with Run Click each folder to open the program list Be careful. Not all are malicious. Check for: Misspelled names Unfamiliar programs Search with DuckDuckGo to find confirmation either way If it turns out malicious, right-click on that entry and select Delete to remove it from Windows Registry. Also look in: HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\explorer\\User Shell Folders HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\explorer\\Shell Folders Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "501d65ca5ae4bbc80c9cff53c0777368",
    "u": "https://windows.tymyrddin.dev/docs/guards/soup",
    "t": "Alphabet soup ",
    "c": "Alphabet soup  Firewall  A firewall implements rules that prevent network traffic based on protocol, source/destination address, and/or source/destination port. Firewalls can implement access control lists and prevent the use of insecure protocols, such as blocking all traffic on TCP port 23 (Telnet’s default port). IDS  An IDS platform can analyse network traffic for patterns and recognize malicious attack patterns. It can create notifications, but it can not block the unwanted packets from entering the network. IDS can be deployed either at the host level or the network level. Host-based monitors (and protects) the specific host (for example a single PC) it is installed on. For example, a HIDS will look at log and config files for any unexpected rewrites. Network-based focuses on protecting an entire network. Usually, dedicated hardware appliances run such software. For example, a NIDS will look at the checksums in captured packets and message authentication integrity of systems such as SHA1. The fact that a NIDS is usually installed on a stand-alone piece of equipment means that it doesn’t drag down the processors of servers or PC’s. The activity of HIDS is not as aggressive as that of NIDS and can be implemented by a lightweight daemon on the computer which does not burn up too much CPU. Neither system generates extra network traffic. In addition to the two main types of IDS, there are also two main subsets of these IDS types: Signature-based Intrusion Detection System (SBIDS). An SBNIDS for example, tracks all the packets passing over the network and then compares them to a database containing attributes or signatures of familiar malicious threats. Anomaly-based Intrusion Detection System (ABIDS). An ABNIDS for example, tracks the traffic of a network and then compares it to an established measure (which could be machine learning based) and this allows the system to find what is normal for the network in terms of Ports, Protocols, Bandwidth, and other devices, thereby quickly alerting administrators about any unusual or potentially malicious activity in the network. IPS  IPS combines the analysis functionality of an IDS with the ability to intervene and prevent the delivery of malicious packets. IPS interact with firewalls and software applications by adjusting settings. Incorrectly calibrated IPSs can cause havoc and bring your legitimate network activity to a halt.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "67a3a3594c80d910bec5514ce8c2a4b4",
    "u": "https://windows.tymyrddin.dev/docs/services/ssh",
    "t": "Use SSH tunnels ",
    "c": "Use SSH tunnels  Secure Shell (SSH) can be used to securely acquire and use a remote terminal session and has other uses as well. You can use SSH to tunnel traffic, transfer files, mount remote file systems, and more. SSH also uses strong encryption, and you can set your SSH client to act as a Socks proxy. Once you have, you can configure applications on your computer – such as your web browser – to use the Socks proxy. The traffic enters the Socks proxy running on your local system and the SSH client forwards it through the SSH connection – this is known as SSH tunneling. This works similar to browsing the web over a Virtual Private Network (VPN) . From a web server perspective, traffic appears to be coming from the SSH server. The traffic between source and the SSH server is encrypted, so you can browse over an encrypted connection as you could with a VPN. You must configure each application to use the SSH tunnel’s proxy. Port forwarding or port mapping is a name given to the combined technique of: Translating the address and/or port number of a packet to a new destination. Possibly accepting such packet(s) in a packet filter (firewall). Forwarding the packet according to the routing table. SSH tunnels can be created in several ways using different kinds of port forwarding mechanisms. And you can protect SSH access with MFA . Tunnelling with local port forwarding  Imagine wikileaks being blocked using a proxy filter in a university network somewhere. An SSH tunnel can be used to bypass this restriction. Let’s name the machine in the university network socially-correct and a home machine home . The home machine has a public IP and is running an SSH server. The student in case has ssh user access on home and socially-correct has access to host:hostport (is not blocked). > ssh - L localport : host : hostport user @home - N where: -L : port forwarding parameters localport : local port (choose a port that is not in use by other service) host : server that has the port (hostport) that you want to forward hostport : remote port -N : do not execute a remote command (you will not have the shell). user : user that has ssh access to the ssh server home : the machine/server running the ssh server that will be used for forwarding/tunneling For example, to create the SSH tunnel execute following from the socially-correct machine: > ssh - L 9001 : wikileaks . org : 80 user @home Open a browser and go to http://localhost:9001 to see if the tunnel is working. The SSH client at socially-correct will connect to the SSH server running at home (usually running at port 22) binding port 9001 of socially-correct to listen for local requests thus creating an SSH tunnel between home and socially-correct. At the home end it will create a connection to wikileaks.org at port 80. So socially-correct doesn’t need to know how to connect to wikileaks.org. Only home needs to worry about that. The channel between socially-correct and home will be encrypted while the connection between home and wikileaks.org will be unencrypted. The home-to-wikileaks.org connection is only made when the browser makes the request, not at tunnel setup time. The SSH man pages say: -L port:host:hostport specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side. This works by allocating a socket to listen to port on the local side, and whenever a connection is made to this port, the connection is forwarded over the secure channel, and a connection is made to host port hostport from the remote machine. Port forwardings can also be specified in the configuration file. Only root can forward privileged ports. IPv6 addresses can be specified with an alternative syntax: port/host/hostport -N Do not execute a remote command. This is useful for just forwarding ports (protocol version 2 only). Local port forwarding can also be used to set up a VNC session between socially-correct and a home server. From socially-correct : > ssh - L 5900 : localhost : 5900 user @home The localhost is relative to the gateway (home in this case), not the machine from where the tunnel is initiated. So this will make a connection to port 5900 of the home computer where the VNC client would be listening. Reverse tunnelling with remote port forwarding  To be able to SSH from the Internet into a machine behind a firewall, you need the machine in question to open an SSH connection to the outside world and include a -R tunnel whose “entry” point is the “remote” side of his connection. What if we wish to connect to an internal university website from home with a set-up like above in tunnelling with local port forwarding? The university firewall is blocking all incoming traffic. We can connect from home to the university internal network so that we can browse the internal site. We can initiate the tunnel from the socially-correct computer behind the firewall. This is possible since only incoming traffic is blocked and outgoing traffic is allowed. The client will now be at the home computer and instead of using the -L option, the -R option, which specifies a reverse tunnel is to be created, is used. From socially-correct : > ssh - R 9001 : internalsite . org : 80 user @home The SSH client at socially-correct will connect to the SSH server running at home creating an SSH channel. The server will bind port 9001 on the home machine to listen for incoming requests that are then routed through the created SSH channel between home and socially-correct . Now it’s possible to browse the internal site by visiting http://localhost:9001 in a web browser on the home machine. The socially-correct machine for work at the university will then create a connection to internalsite.org and relay back the response to home via the created SSH channel. Even though the traffic is encrypted, the name resolution may not be encrypted => DNS leakage. Programs like firefox allow you to ensure that there is no such DNS leakage . For example, in Firefox, browse to about:config and make sure the setting for network.proxy.socks_remote_dns is set to true. Dynamic port forwarding  Dynamic port forwarding allows for configuring one local port for tunnelling data to all remote destinations. This requires Socket Secure SOCKS. At the client side of the tunnel a Socks proxy would be created and the application uses the Socks protocol to specify where the traffic should be sent when it leaves the other end of the ssh tunnel. In a set-up like used in local port forwarding and reverse port forwarding, from the socially-correct machine at university: > ssh - D 9001 user @home SSH will create a Socks proxy listening in for connections at local port 9001 and when receiving a request routes the traffic via the SSH channel created between socially-correct and home. Configure the browser to point to the Socks proxy at port 9001 at localhost .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "69f8214c7ea66b98b10489a415babd2f",
    "u": "https://windows.tymyrddin.dev/docs/services/messaging",
    "t": "Use a secure messaging service ",
    "c": "Use a secure messaging service  A secure messaging service is a critical tool for private and secure communications. In most countries, it is safe to assume that telecoms are recording all SMS message traffic. Signal is not as strong on privacy as it is on security. It collects some metadata, and relies on central servers to manage message flow and hold the metadata it does collect. Session is a fork of Signal. No geolocation data, device data, or metadata is collected. The Session network is decentralized, with no single point of failure, and no main server for bad guys to hack. Session moves messages using an onion routing system. And make it the default SMS messenger.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "45003c4ecb38760c6fcb676d6a468648",
    "u": "https://windows.tymyrddin.dev/docs/services/browsers",
    "t": "Secure browsers that protect your privacy ",
    "c": "Secure browsers that protect your privacy  DuckDuckGo Desktop browser for Windows focuses on privacy that is not based on Chromium (as most would expect). Instead it relies on OS-provided rendering engines to build the browser (mostly WebKit). This makes it possible to remove all the unnecessary stuff usually available with popular web browsers. LibreWolf is a fork of Firefox focused on privacy, security, and freedom, only available for desktop operating systems. If the browser you choose is less secure and privacy-friendly, lock down the browser and the software it can invoke.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4c3039cfd865ecb09ac81778a9f7b041",
    "u": "https://windows.tymyrddin.dev/docs/privacy/devices",
    "t": "Turning devices on and off ",
    "c": "Turning devices on and off  Adversaries can try to gain access with trojans - invisibly-installed malware that gives the adversary administrative control over targeted computers, including, the ability to remotely control devices. Depending on your location and context, you may want to turn devices off and later on again. Examples  Turning cam off/on  There a lot of scenarios where hackers have gained access to the camera even without the active light illuminated. It is better to have computer camera switched off. Here are the steps to disable camera access: Go to Settings -> Privacy From the left menu click on Camera and toggle the button to turn off the camera access any applications To allow access to any specific applications that need camera access, under the “Choose app that can access and send email” select the application and toggle for camera access Other devices can also be turned on and off in a similar way.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9b25d4aba1bbfe7b3027e78196094c73",
    "u": "https://windows.tymyrddin.dev/docs/data/file-encryption",
    "t": "File encryption ",
    "c": "File encryption  Filesystem level encryption, often called file/folder encryption or stacked level encryption, is a form of disk encryption where individual files or directories are encrypted by the file system itself. This is in contrast to full disk or block level device encryption where an entire partition or disk, in which the file system resides, is encrypted. EFS  Windows built-in Encrypting File System (EFS) is a tool that can encrypt all Windows files and folders on NTFS drives. It allows you to encrypt a specific folder rather than the whole hard drive partition . And if you move a file to an EFS-encrypted folder, the file will automatically be encrypted. To enable the EFS tool: Open an elevated Command Prompt. Type (and enter): fsutil behavior set disableencryption 0 To disable this tool, type (and enter): fsutil behavior set disableencryption 1 To encrypt files and folders: Right-click on a file or folder and click Properties. Click the Advanced button in the next window. Check the Encrypt contents to secure data box and click OK. VeraCrypt  VeraCrypt is a fork of the discontinued TrueCrypt project. It is a free and open-source utility for on-the-fly encryption (OTFE). The software can create a virtual encrypted disk that works just like a regular disk but within a file. It can also encrypt a partition or (in Windows) the entire storage device with pre-boot authentication.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1b1730c44779494cbed14eb1ad7dd7b7",
    "u": "https://windows.tymyrddin.dev/docs/services/dns-servers",
    "t": "Use alternative DNS servers ",
    "c": "Use alternative DNS servers  When you don’t set up DNS servers on your computer or router, your DNS queries will run on your ISP’s DNS servers. Without VPN (with killswitch and/or killswitch using routes ), DNS requests are most likely sent unencrypted, which can lead to common DNS attacks. Domain hijacking (Redirection) DNS flood attack (a type of DDoS attack) DNS spoofing or DNS cache poisoning DNS hijacking (malware infection on a local device to hijack DNS to redirect traffic to a phishing site) And any man in the middle of your traffic can see your online behaviour and the websites you visit. Your ISP’s DNS servers see every search you make in your browser. Using your ISP’s DNS servers as default DNS servers doesn’t do anything for security or privacy. Alternative DNS servers  OpenNIC is a group of volunteers who run an alternate DNS network offering free DNS servers. Depending on your location, you are offered different servers. OpenNIC offers DNS neutrality (it does not censor content), and you get the right to choose how much data OpenNIC logs. OpenDNS is a cloud-based service offering three solutions in their Home package, two of which are free. To connect with your nearest DNS server, and for faster page load times, it uses anycast routing. DNSWatch also offers DNS neutrality and does not log any DNS queries or record history. Quad9 DNS blocks malicious and suspicious domains using security intelligence from a group of companies to improve security. They do keep logs on some activity. Use Wireshark to check for leaks  To check if you have DNS leaks, fire up Wireshark : Start capturing on eth0 and connect to the VPN. After capturing either a fixed number of packets, or an amount of data or for a specific time period, go to //Statistics -> Endpoints// There should only be one public IP address, namely that of the VPN server that you’re connected to. The ‘’10.0.2.15’’ in this image is a local address.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "169506f71b9a74b01ed465b56315ef73",
    "u": "https://windows.tymyrddin.dev/docs/data/restore-point",
    "t": "Create a restore point ",
    "c": "Create a restore point  In case the Windows machine is compromised, going back to a previous restore point may fix the issue. Type Create a restore point in the search box System Properties -> C drive and click the Create button Add a description to the system restore point and click Create System Restore Point Creating Process The system restore point process will begin (wait, wait, wait for it) The restore point was created successfully",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6bc31f120d9493e4f5068c1cf9e1c573",
    "u": "https://windows.tymyrddin.dev/docs/privacy/hexeditors",
    "t": "Remove metadata with hex editors ",
    "c": "Remove metadata with hex editors  The hexadecimal notation is almost universally used in computing - and not without a reason. There are sixteen hex digits - 0 to 9, and A to F (which correspond to decimal values 10 to 15), and each hex digit represents exactly four bits. Exactly two hex digits represent a byte, which can have a value from 00 to FF. A hex byte is the only kind of object a computer handles, and hex bytes are used to represent anything. For example, a hex byte 50 may represent the capital letter P, the processor command push eax, the decimal number 80, a colour component with 50% brightness, or whatever else lives in the digital world. And that means we have editors, hex editors, that can be used to view and change files, all files, on a very low level. As in, they can be used to remove metadata from any and all files. Usage in general  backup the file before using a hex editor on it. switch to ASCII mode, turn off “read only” mode, and start searching through the file. For example, when scrubbing pdf’s from creation and modification information look through the entire file for “created” (metadata appears in the PDF file more than once). If and when you find metadata, change to fake data or delete. Then repeat your search again for the terms “create”, “creation”, “modified”, and “modify”, and similarly either replace or delete the dates, once again being sure to repeat each search so that any potential multiple instances of the field can be located and modified or blanked out. Native  On Windows, open file Properties in Windows Explorer for each file. In the Details tab, click “Remove Properties and Personal information”. Choose to “Remove the following properties from this file”, select which metadata to remove, and press OK. There may still be other data though. Windows do not have any pre-installed hex editor in their operating systems. Hex files can be stored in the text format or binary format. If you have a text-based hex file, then it can be opened with text editors like notepad. Using software  If you have a binary hex file, then the only option to open them is by using the third-party hex editing programs. HxD Freeware Hex Editor and Disk Editor Free Hex Editor Neo",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ca9080eac4745488e392794eef1378bc",
    "u": "https://windows.tymyrddin.dev/docs/services/readme",
    "t": "Introduction ",
    "c": "Introduction  Take control over services, applications, and their permissions. Start, Stop, Restart, Enable, and Disable Services Unwanted application suggestions Restrict which apps can run (without your permission) Restrict access to apps Block applications Secure browsers that protect your privacy Use a secure messaging service Use a secure email service Use SSH tunnels Use a VPN service Make a VPN killswitch using routes Use a Tor proxy Change MAC address Renew IP lease Edit hosts file",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4ee996df3117043847d96cc4c1d642aa",
    "u": "https://windows.tymyrddin.dev/docs/authentication/standard-user",
    "t": "Use a standard user account ",
    "c": "Use a standard user account  Users with administrator privileges have complete control over the OS and their apps have unrestricted access to the computer. Even when keeping up with system and antivirus updates, following the best security practices, and being careful using the internet and checking email attachments, there is still a chance that malware could gain access to your device. Running as administrator, an exploit can more easily gain control of your system. It can install rootkits, keyloggers, and other suspect services without you knowing. A malicious program can also modify and delete files, and even prevent devices from booting. Consider setting up a separate standard user account with fewer privileges for day-to-day use. This can block some attacks and make others much harder. Create a new administrator account  Settings -> Accounts -> Family & other people. Under Other People, click the Add someone else to this PC option. Click the “I don’t have this person’s sign-in information” link. Click the “Add a user without a Microsoft account link”: Because the account will only be used for administrative tasks you do not need to create a new Windows 10 account using a Microsoft account. Type the username and password you want to use for the admin account. Next Select the newly created account, and click Change account type. In the “Account type” drop-down menu, select Administrator. OK. Change your user account type  An Administrator account is a member of the Administrators and Users groups, which means that to make the account a Standard User, you only need to remove your account from the Administrators group. Sign-in to the newly created admin account to change your user account type to Standard User using the Settings app. Type Computer Management in search box and click the result to open the console. Go to System Tools -> Local Users and Groups -> Users Double-click your user account — the one you want to switch to remove the privileges from. Click on Member Of tab. Select Administrators from the list. Click the Remove button. Apply and OK. Sign out and sign back in to apply the changes. You have turned your account into a standard user account with fewer privileges and apps will not be allowed to make system changes, making your system more secure against malware. When you need to perform a task that requires administrator rights, you can right-click the app and use the Run as Administrator option with the credentials of the administrator account you just created.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3ac32b60ccebed4794b277ebc2d4395f",
    "u": "https://windows.tymyrddin.dev/docs/authentication/login",
    "t": "More secure login ",
    "c": "More secure login  Switch to a local login account  Windows 10 Home will default to your Windows account, as this makes it easier to log in across all devices with one account. If, say, your mail credentials were compromised, then your machine would also be compromised. Switch your Windows 10 device to a local account Set password if not exists  When you purchase a new Windows computer or if you have reformatted the computer with a fresh copy of Windows, the system will allow the user to login automatically without having the need to provide a password. This can prove costly because it gives opportunity for anyone to access information from your computer. It is perhaps annoying to have to enter your password every boot, but it is a small price for making it harder for someone to get into your account and access your system: Settings -> Account From the left column select Sign-in options Under Password click on Add, provide the password you wish to have and click on Finish This will ensure that the computer is password protected. Add Secure Sign-In  Programs such as malware and viruses can gain access to your login information by imitating the sign-in screen. As a user, it is impossible to tell whether the sign-in screen is safe to use or not. Windows 10 Secure Sign-In is not the “one solution to solve all problems”, but it cuts the root of this particular problem by blocking programs from displaying a fake sign-in screen. Type netplwiz in the search box and press Enter. This will open the User Accounts panel. Select the user that you want to enable Secure Sign-In for. Go to the Advanced tab and select “Require users to press Ctrl + Alt + Delete”. Apply Now, every time you start your computer, Windows will require you to press the key combination before entering your login details.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f6f9a6fdf733e670f6b10ea0b0727c55",
    "u": "https://windows.tymyrddin.dev/docs/malware/clean-machine",
    "t": "Malware detection and removal ",
    "c": "Malware detection and removal  Automagically  If you are on a private machine, choose your own scanner. Be careful, have a look at AV Comparatives’ test results for Windows . In an organisation, likely you can leave this to the SOC or IT team . Manually  Disconnect from the internet. Switch to Safe Mode  Go to Updates & Security -> Recovery Choose “Restart now” in the Advanced startup section When your machine restarts, a blue screen with a few options will appear Troubleshoot -> Advanced options -> Startup settings -> Restart Another blue window appears, find the “Enable Safe Mode” option. Click number 4 on your keyboard. Check for and remove unwanted applications  Go to Control Panel -> Uninstall a program Possibly unwanted apllications (bloatware, and some can even be considered malware) Check with DuckDuckGo whether unknown applications are legitimate or not (mind the spelling) If the issues are recent, you can click on “Installed on” to find any newly installed programs that might be suspicious If they are not legitimate, or if you are suspicious, delete them and empty your Trash. Note that this does not help much with trojans , evil files made to look like legitimate apps. Delete temporary files  Open the RUN window Type “%temp%” and click “OK” Delete all files and folders that are in this destination Empty trash Connect back to the internet. Note that this does not remove malicious Registry entries which can make the malware persistent. Fail  If all else fails, go to a previous restore point or backup. If that fails too, the BIOS or restore points or backups may even be infected. It is possible for malware to persist across a re-format and re-install, if it is sufficiently ingenious and sophisticated: if for example, it can persist in the BIOS, in the firmware for peripherals (some hardware devices have firmware that can be updated, and thus could be updated with malicious firmware), or with a virus infecting data files on removable storage or on your backups. Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e1681aa7ae260d647c2e84605075a8d7",
    "u": "https://windows.tymyrddin.dev/docs/authentication/passwords",
    "t": "Make that more secure passwords ",
    "c": "Make that more secure passwords  Do not use a password you have used in the past. Try to change the password at least every 3-6 months. Create a password that is at least six characters long. Create a password with both digits and letters, uppercase, and lowercase. Do not create a password with a family name, name of your pet, hobby, sports teams, favourite TV show, etc. Do not create a password that is your phone number, house number, etc. Create a password that is not in a dictionary. Create passwords with spaces and/or magics (&*^%$#) in them (if allowed). Have a password manager create a password for you.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "535f538851f59b549c4b49976204cd7d",
    "u": "https://windows.tymyrddin.dev/docs/opsec/email-use",
    "t": "Use email securely ",
    "c": "Use email securely  Invented by Ray Tomlinson, email first entered limited use in the 1960s and by the mid-1970s had taken the form now recognized as email. It evolved, and so did its parasites: Email “spam”. A number of effective anti-spam techniques now largely mitigate the impact of spam by filtering or rejecting it for most users, but the volume sent is still very high, and increasingly consists not of advertisements, but malicious content or links. Phishing emails continue to be one of the most common initial attack vectors employed by attackers for malware delivery. Attacking the human element continues to be extremely effective. To infect a system, the attacker simply has to persuade a user to click on a link or open an attachment. Email spam and phishing methods typically use spoofing to mislead the recipient about the true message origin. Laws in many countries either allow or have loopholes in an existing law that allow the government to access stored emails without a warrant, and intelligence agencies can do and actually do so. Internet as well as intranet email may travel and be stored on networks and computers without the sender or the recipient having any control. During the transit time it is possible that third parties read or even modify the content. The ease and impersonality of email communications mean that the social norms that encourage civility do not exist and may be forgotten. Flaming, bullying, … To stay sane: Do not use public computers to access email with sensitive information. If you are not in a safe neighbourhood, use a VPN or Tor anonymity network to encrypt traffic from the user machine to a safer network. Use a privacy-focused email application (make sure not to use your own name or other personal information) GPG, PGP, SMEmail, can be used for end-to-end message encryption.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "250d9836fe98cacf97e1dd912077f363",
    "u": "https://pap.tymyrddin.dev/docs/mitre/c2",
    "t": "Application Layer Protocol: Mail Protocols ",
    "c": "Application Layer Protocol: Mail Protocols  MITRE ATT&CK T1071.003 reads: Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Analyse packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Network detection notes  Other protocols can also be used to hide in. Deep learning models can probably identify modified and incomplete C2 traffic packets and discover new variants of C2 traffic.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ccb9250e80dfc3c1e30ed4ab2d527939",
    "u": "https://pap.tymyrddin.dev/docs/independent/drive-by",
    "t": "Drive-by download ",
    "c": "Drive-by download  A drive-by download attack refers to the unintentional download of malicious code to your device that leaves you open to an attack. This can happen while browsing a legitimate website or through a malicious advertisement displayed on an otherwise safe site. This type of attack comes in authorised and unauthorised flavours. With the latter, for the device to become infected it is not necessary to click on anything, to download, or to open a malicious email attachment. It just happens magically. Drive-by downloads can install non-malicious potentially unwanted programs or applications (PUPs/PUAs in mobiles, which are clean, but may actually be madware at its worst) or malware-loaded attacks with intention to hijack a device, install spyware, or ruin data or disable the device (a targeted personal attack). Authorised downloads  Adversary creates an online message, ad, or a legitimate program download. You click the link, download the software, etc. You do not opt out of extra software, or are sent to a malware-infested site. Adversary and malware take control of your data. Unauthorised downloads  Adversary compromises a legitimate web page using a security flaw in website and adds a malicious component. You visit the page, and it finds your device’s security flaw. The flaw is exploited and malware is downloaded to your device. The adversary has control over your device. Prevention  Use your admin account for app installations. Admin privileges are necessary for drive by downloads to install without your consent. Use a second non-admin account for daily use. Keep browser and operating system up to date. New patches help seal gaps in defenses. Install immediately when released. The more code on the device, the more susceptible it is to infections. Prune often. Only keep what you trust and use often. Use a firewall and virus scanner on a PC and an internet security software solution on phones. Avoid websites that may contain malicious code. Sites that offer file-sharing or mature content are common points of infection. Carefully read and examine security popups on the web before clicking. Scammers use deceptive popup ads on desktop and mobile browsers that look like legitimate alerts. Watch for typos, odd grammar, and grainy images. Use an ad-blocker. Drive-by download attacks often use online ads to upload infections. Using an ad blocker can help reduce your exposure to this type of attack.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9541dc23a0b901630afebbb1ff900caf",
    "u": "https://pap.tymyrddin.dev/docs/mobile/tracking",
    "t": "Location tracking ",
    "c": "Location tracking  GPS-enabled devices can be small and easily hidden, and an abuser can hide a device in handbags, clothing, or car. The GPS in a phone can also be used to track a survivor (of abuse). The location information through the GPS in a phone is not automatically available to another person, but there are a variety of ways that an abuser could get that information. Tool Claims Platform AirTag Item trackers Android and Apple devices Tile Item trackers Android and Apple devices Cerberus Phone tracker Android The latest example of GPS-enabled devices is the AirTag, a small, puck-shaped tracker meant for locating misplaced or stolen items with the Find My app . AirTags use ultra-wideband technology and take advantage of Apple’s existing network of devices, which work as crowdsourced beacons to ping each other in order to determine your missing item’s location. Tracking an AirTag requires iOS 14.5 (iPhone or iPad). Precision Finding requires an iPhone 11 or 12. AirTags are being used by stalkers for tracking survivors, that goes public, Apple makes a few promises, and Google rolls out a safety feature on Android to be alerted automatically if an unknown Bluetooth device is travelling with them — a sign that could point to the possibility that someone is stalking them using an Apple AirTag or other Bluetooth tracking device. Users will also be able to manually scan for trackers with their Android device and be guided through tips on what to do next if a tracking device is found. Resources  How to track someone on Google Maps without them knowing , Brinksley Hong, Updated: September 19, 2022 Secretly Find & Track Someone’s Location on Google Maps , Jason Thompson, June 27, 2023 Android will now warn about unknown Bluetooth trackers, like AirTag, travelling with you , TechCrunch, July 27, 2023",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6004a462ead4f08aa0e526c2c483ea36",
    "u": "https://pap.tymyrddin.dev/docs/mobile/malware",
    "t": "Mobile malware ",
    "c": "Mobile malware  The most common types of mobile malware threats: “Advertising Click Fraud” is a type of malware that allows an attacker to hijack a device to generate income through fake ad clicks. Cryptomining malware enables attackers to covertly execute calculations on a another person’s device – allowing them to generate cryptocurrency. Cryptomining is often conducted through code hidden in squatted apps . Spyware and stalkerware offer access to data from infected victim devices and are often used for intelligence collection. These can typically access information such as installed applications, call history, address books, web browsing history, and SMS data. Some may also be used to send SMS messages, enable device cameras, and log GPS data. Bank trojans are often disguised as legitimate applications and seek to compromise users who conduct their banking business — including money transfers and bill payments — from their mobile devices. This type of trojan aims to steal financial login and password details. Ransomware is a type of malware used to lock out a user from their device and demand a “ransom” payment — usually in untraceable Bitcoin. Once the victim pays the ransom, access codes are provided to allow them to unlock their mobile device. Or not. Lists  Malware for iOS (iPhone wiki) Android malware apps master list (Phone arena) Indicators  Your battery is draining faster than normal Your phone is behaving abnormally Phone starts lagging You find strange apps being installed on your device, automatically Your device is getting heated up too quickly Your device may show you some kind of warning message Increase in data usage There may be calls you did not make or text messages you did not send Apps crash regularly You suddenly get pop-ups and ads banners in the notification area and the keyboard area Unexpected charges for SMS to premium numbers or purchases with your credit card you did not send or do Detection and mitigation (general)  Android iOS Prevention (general)  Keep applications updated so that you are running the version with the latest security patches and updates. Application developers will often release a new update or version if their software is compromised in any way. Install mobile security software (works like antivirus software on a workstation). The majority of mobile phones do not include firewall protection. Firewalls not only protect your online privacy when browsing, but can be used to only allow authorised apps to access the internet through a set of firewall rules. Many mobile devices are compromised when they are lost and stolen. Use a passcode to lock the screen. Only download apps from stores that vet applications: Apple App Store and Google Play have been vetted to ensure they are safe. This is not a guarantee that no app will slip through the vetting process. For example, attackers managed to distribute a fake “WhatsApp” app to millions of mobile users via the official Google Play Store by simply adding a Unicode-encoded space at the end of WhatsApp’s ID, and a fake app named Teligram sneaked into the Google Play, pretending to be a new version of the real Telegram app, but some vetting is better than the wild west without sherrif, and the vetting process is continuously being improved also.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1d7a6c0c42725729dd08d92ba26e46fe",
    "u": "https://ios.tymyrddin.dev/docs/malware/clean-machine",
    "t": "Finding the culprit and removing it ",
    "c": "Finding the culprit and removing it  If you think it will turn into a “legal issue”, DO NOT shut the device down or try to remove the malware, and call in a first responder instead. Detecting  If the symptoms appeared immediately after installing an app, that app may be the guilty party Look for unfamiliar apps: Swipe through the screen and look for the apps that you don’t remember installing. To see a list of every app you’ve installed from the App Store, tap the Apps icon at the bottom of the store, tap your profile photo, then tap Purchased . If there’s an app on your phone that is not in this list (and does not come from Apple), it is likely malware. Find out whether your phone is jailbroken: Check for the Cydia app on the iPhone in question. You can use Spotlight to search for it and if it comes up, the iPhone is jailbroken. Check for modifications. The whole point of jailbreaking an iPhone is to add features to it that are not available out of the box. They may not be obvious but a cursory look through the device can give clues. Go to Settings -> Battery and monitor usage . Tap on Show Detailed Usage to view the breakdown of foreground and background usage. If you find an app that you don’t recognise, it is a candidate for removal. Go to Settings > Mobile Network and scroll down to Mobile Data . Is that level normal for your device? Removing  Try these first  Restarting your iPhone can, in some cases, get rid of malware. Unlikely, but can. How to do this depends on your iPhone. Clear History & Website Data: Open Settings on your device and tap Safari . Tap Clear History and Website Data . Confirm. Deleting an app and its configuration profile  Deleting an app Touch and hold the app until it jiggles. Then tap the delete button in the upper-left corner of the app to delete it. If you see a message that says, “Deleting this app will also delete its data,” tap Delete . If the app has a configuration profile, delete it. Go to Settings -> General -> Profiles or Profiles & Device Management , then tap the app’s configuration profile. Then tap Delete Profile . If asked, enter your device passcode, then tap Delete . Restart Fail  If this did not work, do a Reset to factory settings Make an iTunes backup or iCloud backup Go to Settings -> General -> Reset -> Erase All Contents and Settings Enter your passcode to confirm the reset Set up device again Restore the backup to your device. If for any reason you are not able to restore, it most likely contains malware. Then restore one of the previous backups to your device instead, and delete the infected backup from iTunes or iCloud. If a factory reset did not work, replace device. Most cases of malware are user-made and involve acts like jailbreaking, and Apple’s warranty does not cover this issue. Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "54d3f06933de6f428f4f407db2aa148e",
    "u": "https://ios.tymyrddin.dev/docs/services/browsers",
    "t": "Browsers that protect your privacy ",
    "c": "Browsers that protect your privacy  DuckDuckGo Private Browser offers seamless protection while you search and browse - plus access to free tracking protection for your email inbox, secure password management, new beta features, and more. Brave is fast, secure, and privacy-focused by default. It has a built-in ad blocker and browser fingerprinting protection, while also giving you access to numerous add-ons and extensions. Onion browser enables you to use Tor without needing to install the Tor proxy . It is open source, uses Tor routing, and is developed by someone who works closely with the Tor Project. However, Apple requires browsers on iOS to use something called Webkit, which prevents Onion Browser from having the same privacy protections as Tor Browser. Tor Browser is not in the Apple Store. Out of the “big” and “mainstream” browsers, Safari is more secure. If you continue to use it, you will still have to increase your data privacy and security while using Safari. If the browser you choose is less secure and privacy-friendly, lock down the browser and the software it can invoke. Articles  Browser First-Run: iOS Edition Avoidthehack: How to Configure Safari for Privacy on iOS Devices (UPDATED FOR iOS 14)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3d33b570c71536d4039825757b1701e9",
    "u": "https://ios.tymyrddin.dev/docs/guards/readme",
    "t": "Introduction ",
    "c": "Introduction  Your iPhone lets you use content blockers to block trackers, cookies, ads and other malware. But these only apply to Safari. They do nothing to block other applications from communicating data they have on you, from your location, shopping times, work hours, sleep patterns and even passwords. Lockdown Privacy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2252de440ea5b63ba4c6324b2064b78e",
    "u": "https://ios.tymyrddin.dev/docs/opsec/autojoin",
    "t": "Not auto-joining Wi-Fi networks ",
    "c": "Not auto-joining Wi-Fi networks  Auto join is a feature that allows your phone to automatically join any Wi-Fi network it already has the credentials for, or open Wi-Fi networks, without having to ask you to do anything. This can be a time saver at home and at work. But, it carries two major issues: It can cause your phone to randomly leave a stronger Wi-Fi network for a weaker Wi-Fi network that has come into range. Both Android and iOS developers have tried to stop their operating systems from doing this, but have only had limited success. When your phone switches over to a weaker Wi-Fi, it terminates your first Internet connection, interrupting your Internet usage. Once on the weaker network, performance goes down. When you automatically join open public Wi-Fi networks you put your data and privacy at risk. You do not know that the network is secure. You could be joining a clever network clone (rogue wireless access point) that is really a MitM attack trying to steal your passwords and usernames to sensitive accounts. On iOS devices, you have to set this option for each Wi-Fi network individually. Go to Settings -> Wi-Fi. You will see a list of Wi-Fi network profiles. Click the ones you want to not auto join with and toggle the switch to auto join.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "50e4088250a2c2b452319c43aae526d9",
    "u": "https://ios.tymyrddin.dev/docs/malware/scanner",
    "t": "Installing a third party security app ",
    "c": "Installing a third party security app  Apple designed the iPhone’s software (iOS) in such a way that it is very difficult for malware, including viruses, to penetrate its defences. iPhone apps are sandboxed, an app can not access the data of another app, and iOS has several built-in security features to protect your device from malware threats. Meaning you do not need to install an antivirus app on iPhones and iPads. But do consider installing a third party security app, because iOS security apps cannot act as traditional “antivirus” scanners, while antivirus is only one type of the many threats that exist today . The built-in security apps can not protect your phone from other threats, like phishing emails disguised as Apple ID alerts, and iPhone malware does exist .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5180e688f36124ebc5757fadbc3fb724",
    "u": "https://ios.tymyrddin.dev/docs/services/messaging",
    "t": "Using more secure messaging services ",
    "c": "Using more secure messaging services  In most countries, it is safe to assume that telecoms are recording all SMS message traffic. And make it the default SMS messenger. Install a secure messanger app and make it the default SMS messenger. Signal is not as strong on privacy as it is on security. It collects some metadata, and relies on central servers to manage message flow and hold the metadata it does collect. Session is a fork of Signal. No geolocation data, device data, or metadata is collected. The Session network is decentralized, with no single point of failure, and no main server for bad guys to hack. Session moves messages using an onion routing system. Note : Signal no longer accepts SMS messages.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "410bf4a026203e9b3554c890f24c5eba",
    "u": "https://ios.tymyrddin.dev/docs/opsec/ooni",
    "t": "Measuring Internet Censorship ",
    "c": "Measuring Internet Censorship  The OONI Probe is a free app to measure Internet Censorship. With this app, you can examine the blocking of websites and instant messaging apps, measure your network’s speed and performance, and check whether systems that could be responsible for censorship and surveillance are in your network. OONI Probe is developed by the Open Observatory of Network Interference (OONI), a free software project (under The Tor Project) that aims to uncover internet censorship around the world.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "07856b450837919911a40533d588b478",
    "u": "https://ios.tymyrddin.dev/docs/malware/readme",
    "t": "Introduction ",
    "c": "Introduction  iOS malware is not as common as malware for other devices, but any device always has a risk of getting infected. Phones contain more sensitive information than PC’s and Workstations. It usually contains pictures, credit cards, private messages, and other valuable data. Mobile malware is a generic term for malicious software designed to target mobile devices (smartphones, tablets, and iOT devices) with the goal of gaining access to private data. Apparently it is still not as pervasive as malware that attacks traditional workstations, and that may have to do with the fact that SOC teams and SIEM stacks have focused mostly on detecting workstation and corporate network threats (before Covid and the BYOD wave), and that it was only a matter of time before hackers switched tactics. It is definitely a recognised growing threat and needs to be addressed. Threat awareness Installing an AV scanner Finding the culprit and removing it Ransomware",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5e975f2ca630b04ead50b24758dfbbe5",
    "u": "https://ios.tymyrddin.dev/docs/data/encryption",
    "t": "Encrypting the data ",
    "c": "Encrypting the data  Apple’s iPhone, iPod touch, and iPad smart devices all support basic built-in encryption when a passcode is enabled. To enable encryption: Settings -> Face ID & Passcode Make sure passcode is enabled. Data protection is enabled should be displayed at the bottom of the Face ID & Passcode screen. iOS’ data encryption does not prevent authorities from accessing your backup on Apple’s servers.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f96930f5255a0313f0bea56285edda5b",
    "u": "https://ios.tymyrddin.dev/docs/services/audit-and-block",
    "t": "Auditing and blocking the access apps have ",
    "c": "Auditing and blocking the access apps have  When considering if an app should continue to have access to certain types of your data or hardware, ask yourself if you use features in that app that requires such access? If you never check yourself into places in Facebook, why should the Facebook app continue to have access to your location data (which can be used for tracking your movements)? Go to Settings -> Privacy You will see a list of types of data, from location data to photos and items like camera and microphone. Tapping on an item takes you to a list of apps that have access to that type of data. To restrict an app from accessing that data, toggle its switch to off.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "534b302248435ff69e0e1981219b69c5",
    "u": "https://ios.tymyrddin.dev/docs/guards/lockdown",
    "t": "Lockdown Privacy ",
    "c": "Lockdown Privacy  The Lockdown Privacy: VPN & Proxy does all its blocking locally, on your device, and not through centralised servers. The app comes with several rules already in place, and it is easy to add more. It does use the iOS VPN framework, but the VPN server runs on your device. You have to add your own addresses to the block list. Block list  api.mixpanel.com data.flurry.com onesignal.com app-measurement.com sb.scorecardresearch.com Note: Apart from the built-in list, there is no way to detect what iss being shared by other apps on your devices.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3025db3507bb6b4a3c19132dcd8cabf4",
    "u": "https://ios.tymyrddin.dev/docs/services/ssh",
    "t": "Using SSH tunnels ",
    "c": "Using SSH tunnels  Secure Shell (SSH) can be used to securely acquire and use a remote terminal session, tunnel traffic, transfer files, mount remote file systems, and more. SSH uses strong encryption, and you can set your SSH client to act as a Socks proxy. The traffic enters the Socks proxy running on your local system and the SSH client forwards it through the SSH connection – this is known as SSH tunneling. Once you have set it up, you can configure applications on your computer – such as your web browser – to use the Socks proxy. Each application must be configured to use the SSH tunnel’s proxy. This setup works similar to browsing the web over a Virtual Private Network (VPN) . From a web server perspective, traffic appears to be coming from the SSH server. The traffic between source and the SSH server is encrypted, so you can browse over an encrypted connection as you could with a VPN. Port forwarding  Port forwarding or port mapping is a combined technique of: Translating the address and/or port number of a packet to a new destination. Possibly accepting such packet(s) in a packet filter (firewall). Forwarding the packet according to the routing table. SSH tunnels can be created in several ways using different kinds of port forwarding mechanisms. On iOS you can use Terminus, a terminal & SSH client. App Store Termius: Terminal & SSH client",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "32f86a7a3e9a5f2d9a6f69aa2dab8975",
    "u": "https://ios.tymyrddin.dev/docs/data/nuke",
    "t": "Worst case, nuking all data ",
    "c": "Worst case, nuking all data  If the worst happens and someone steals your phone, it would be good to know that the thief will not have endless opportunities to guess your passcode. Go to Settings -> Face ID & Passcode ( Touch ID & Passcode on an older iPhones) At the bottom of the screen, toggle the Erase Data switch to on. Now all data on the device will be deleted if the wrong passcode is entered 10 times in a row. Note: Allowing location data and enabling guest accounts to locate the phone could be a strategy, because it does not require location tracking turned off.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cf858f23f54a57da8b40d02697e3a054",
    "u": "https://ios.tymyrddin.dev/docs/privacy/search-engine",
    "t": "Changing default search engine ",
    "c": "Changing default search engine  By default, Safari uses Google’s search engine to return results when you do a web search. Google pays Apple billions every year for it to be the default search engine. And Apple also allows you to choose a different search engine, including offering the privacy-focused DuckDuckGo (its business model does not rely on collecting data about you). Go to Settings -> Safari -> Search Engine . Tap DuckDuckGo .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9c47bbf654081b19aba4ca15c620abd6",
    "u": "https://ios.tymyrddin.dev/docs/services/change-browser",
    "t": "Changing default browser app ",
    "c": "Changing default browser app  iOS devices come with Apple’s Safari browser pre-installed, but you can use a different browser if you wish. Unfortunately, on older iOS versions (< 14), you can not set a different browser as the default, so when you tap links in emails or messages, Safari will open them. Luckily most apps let you lightly tap-and-hold on links to copy the address to paste it into an alternative browser of your choice . If you are running iOS or iPad >14, you can set any third-party browser as the default on your iPhone or iPad. Install your replacement browser app. In the Settings menu, locate the section for the browser you’d like to set as your default. If it has been updated to support Apple’s default browser switching feature, you will find a Default Browser App option in its settings. Tap to make it the default. A checkmark appears to confirm it’s the default.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e9b002f7600bf02de79f3a48f30b290e",
    "u": "https://ios.tymyrddin.dev/docs/authentication/passwords",
    "t": "Automagically creating strong passwords ",
    "c": "Automagically creating strong passwords  If not on: Go to Settings -> Passwords -> Password Options . Turn on AutoFill Passwords . Next time you create an account in an app or at a website, when you select the Create password field, you’ll see iOS has automatically inserted a unique password in the field. Tap the Use Strong Password button to use the recommended password, and iOS will automatically store it in your Keychain . iOS never generates the same strong password twice.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7f39ff499e18f6b072c266c6916cbf09",
    "u": "https://ios.tymyrddin.dev/docs/authentication/sim-pin",
    "t": "Using a SIM PIN ",
    "c": "Using a SIM PIN  Put a PIN in your iPhone SIM . If you do not and the phone gets stolen, thieves can change the iPhone SIM and put it in another unlocked phone. And with the SIM in another phone they can request an SMS code for resetting the password to all your accounts, including iCloud, Facebook, Instagram, Twitter, etc. Even with two-factor authentication enabled, they can use this method to get the code and access your accounts.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2d0c8b42a3e1bbf961b4597b1e0c44f6",
    "u": "https://ios.tymyrddin.dev/docs/opsec/juice-jack",
    "t": "Not getting juice-jacked ",
    "c": "Not getting juice-jacked  A data blocker is a simple USB dongle that sits between the USB socket and your USB charging cable. it only connects the power lanes of the USB and will block the data pins. It is cheap, low tech, yet very effective and recommended when needing to charge your phone in public places.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "75b7fc14ffcf224a711e56d113918afb",
    "u": "https://ios.tymyrddin.dev/docs/services/readme",
    "t": "Introduction ",
    "c": "Introduction  Auditing and blocking the access apps have Unwanted third party apps (UAPs) Blocking apps from accessing Bluetooth data Checking for unknown configuration profiles Browsers that protect your privacy Changing default browser app Using more secure messaging services Using more secure email services Using SSH tunnels Using VPN services Using Tor proxies Changing MAC address Editing hosts file",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e6faad085e8290d9576ab4448de6dd03",
    "u": "https://ios.tymyrddin.dev/docs/opsec/email-use",
    "t": "Using email more securely ",
    "c": "Using email more securely  Do not use public computers to access email with sensitive information. If you are not in a safe neighbourhood, use a VPN or Tor anonymity network to encrypt traffic from the user machine to a safer network. Use privacy-focused email services , and have at least two email addresses, one for private use, and one for public use, (and do not use your own name or other personal information) GPG, PGP, SMEmail, can be used for end-to-end message encryption.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "550c4ee9a2304a2212abb88d5024daed",
    "u": "https://ios.tymyrddin.dev/docs/services/uap",
    "t": "Unwanted third party apps (UAPs) ",
    "c": "Unwanted third party apps (UAPs)  Everything typed on your iOS smartphone goes through your keyboard. This means the keyboard has access to those passwords, private emails, documents, and SMS messages you type on your phone. It can even see your credit card information. The perfect Trojan Horse. Sometimes malicious apps do sneak in, into the Apple Store, so keep yourself informed and research each app before installing. Articles  Snyke: SourMint Wandera discovered 17 malicious click fraud apps hosted on Apple’s iOS app store",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "42d04f7d2a66c1c522bcb182076794c7",
    "u": "https://ios.tymyrddin.dev/docs/opsec/hibp",
    "t": "‘;–have i been pwned? ",
    "c": "‘;–have i been pwned?  ‘;–have i been pwned? (HIBP) is a database of several billion email addresses (and, separately, passwords) that have appeared in a publicly known past data breach. Firefox Monitor is an online service developed by Mozilla. It informs users if their email address and passwords used have been leaked in data breaches, using the database provided by Have I Been Pwned? Check if you have an account that has been compromised in a data breach, and if so, change your password and change it in any other place where you’ve used that password. Better yet, never use a password twice, and consider using a password manager.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "80c40367a9a844324369dc3198018924",
    "u": "https://ios.tymyrddin.dev/docs/authentication/password-reuse",
    "t": "Auditing and changing password reuse ",
    "c": "Auditing and changing password reuse  Password reuse is a security problem. With password reuse auditing you can see which websites you’ve reused passwords on and then give them unique passwords. The real advantage is that it visualizes how vulnerable reusing the same password on multiple sites makes, and creates unique strong passwords for every site and app you use. Go to Settings -> Passwords & Accounts -> Website & App Passwords . This is where the Keychain is located. Authenticate, and you’ll be taken to a list of app and site passwords. Any site or app that has an exclamation mark in a triangle next to it means you are also using its password for another site or app. Tap the symbol Change Password on Website This will take you to that site’s password management screen where you can change your password.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5f844a8ef64db7b24cfd80e583f58099",
    "u": "https://ios.tymyrddin.dev/docs/services/bluetooth",
    "t": "Blocking apps from accessing Bluetooth data ",
    "c": "Blocking apps from accessing Bluetooth data  Bluetooth allows for wirelessly connecting accessories to an iPhone, including anything from AirPods to game controllers. Applications, when getting access to that connection, can track your location in physical space. The apps get this location data from beacons: small devices that can tell when you are nearby based on the Bluetooth signal the phone emits. Beacons in and of themselves are not malicious. They allow for sending location-based alerts to the phone, for guiding you around a museum exhibit. And some apps have also been using these Bluetooth beacon location data for more nefarious purposes, like tracking you without your knowledge. That’s why in iOS 13+, Apple created a new privacy setting showing you just what apps are using your Bluetooth data and gives you the ability to shut off those apps’ access to your Bluetooth connection. Go to Settings -> Privacy -> Bluetooth . You will see a list of all your apps that have access to your Bluetooth data. Toggle the switch next to an app to off (white) to deny it access to your Bluetooth data.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5c212da8fcb1bd829590036d1bda2c3b",
    "u": "https://ios.tymyrddin.dev/docs/services/change-mac",
    "t": "Changing MAC address ",
    "c": "Changing MAC address  A MAC address identifies the device connected to a network and allows the network to track, restrict or allow access based on it. Routers identify and assign static IP addresses based on the MAC addresses of devices. Before you try to change the MAC address, you need to know the value that you want to use. Set the 2’s place bit (the “locally administered” bit) in the first byte, to differentiate it from a guaranteed globally unique MAC address. Usually the first three bytes an unicast MAC address is an “Organizationally Unique Identifier” (OUI) that the IEEE assigned to the manufacturer of your Ethernet device. Manufacturers are required to make sure they keep the last 3 bytes unique. Avoiding all of that knowledge, the MAC address generator tool can generate a valid address for you. Changing it is not possible with versions <14. The iOS 14 update brought with it the Private Address feature that lets you hide your original MAC Address of iPhone. You can enable the private address on your iOS for a Wi-Fi connection. When enabled, your iOS will always use a private MAC for that (public) Wi-Fi network. Connect to the Wi-Fi network you want to hide the iPhone MAC address from. Open Settings . Tap on Wi-Fi . Tap the i icon next to the connected Wi-Fi network. Toggle on Private Address . Reconnect to the Wi-Fi network.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "20c282ebd99be86ccd88212d1edfee6d",
    "u": "https://ios.tymyrddin.dev/docs/authentication/mfa",
    "t": "Using multifactor authentication (MFA) ",
    "c": "Using multifactor authentication (MFA)  Many sites and applications offer multifactor authentication (MFA). With MFA enabled, logging into a website or application requires both a password and a unique code that is texted to your phone number or delivered via an authenticator app. You have to input this code in order to gain access to your account. Even if someone else has your password, they will not be able to break into your accounts if they can not get the code. MFA (alias 2FA) is a pain involving hopping back and forth and copying and pasting. So Apple introduced a feature in iOS 12+ called security code autofill. Now when you log into an app or website where you have MFA enabled, you no longer need to navigate to the Messages app to retrieve your texted MFA code. As soon as the text with the code arrives, it will be routed to the iPhone’s keyboard where you can just tap on the code to autofill it into the security field in an app or website. Security code autofill is built-in, so there is no need to enable it. You will need to enable 2FA on any apps or websites you want to use the security feature with. Enable 2FA on every social media and financial site you use. Note that MFA bypasses are becoming “common”.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0a01d13a8041fd50245788fc1077eb8e",
    "u": "https://ios.tymyrddin.dev/docs/services/edit-hosts-file",
    "t": "Editing hosts file ",
    "c": "Editing hosts file  The hosts file is a system file on a device that lets you map specific domain names to an IP address. If you want to add new entries to the hosts file, you’ll need the IP address of the server that you want to map a hostname to. XXX.XXX.XXX.XXX some.domain.name The hosts file lets you override DNS entries for any domain name. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. Blocking is achieved by setting the IP address of the ad networks to a loopback address like 127.0.0.1 which will not return anything. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. If your device is infected with malware, then your hosts file may be compromised to included unknown entries for known domain names. That is NOT the IP address of your bank! This type of DNS attack is known as DNS pharming, and checking your hosts file can uncover potential infection. iOS devices, such as the iPhone and iPad, use a hosts file to map hostnames to IP addresses. It can not be changed unless you Jailbreak the device Use a portable Wi-Fi router and set iOS cto get DNS from the router and the router will need the custom hosts set up. Tether it to an Android with custom hosts file. And that is most likely not enough in situations where governments are using DNS poisoning to block sites, like in China.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c25066e8553e296db3d711b0ad4c236c",
    "u": "https://ios.tymyrddin.dev/docs/opsec/browsing",
    "t": "Browsing more safely ",
    "c": "Browsing more safely  Keyloggers and other malware can be installed via a web page script which exploits a browser vulnerability. The program will automatically be launched when a user visits an infected site. Compromising a browser is relatively easy, and it is cross-platform, hence an often chosen target. Plus that browsers (for performance reasons) prefetch exposing users to more security risks by downloading more pages, or from un-requested sites (additionally compounded as drive-by downloads become more advanced and diverse). BeEF & other browser exploits, when not using browser vulnerabilities, rely on javascript. Choose a secure browser that protects your privacy Change your default browser",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "38fa04167597dbaee0a39ecf48996524",
    "u": "https://ios.tymyrddin.dev/docs/services/profiles",
    "t": "Checking for unknown configuration profiles ",
    "c": "Checking for unknown configuration profiles  Profiles are more dangerous than malware because they give adversaries access to more of the device than just one app, and they are not vetted to the same extent as apps entering the App Store. Go to Settings -> General Check and vet profiles",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cbf5cb88c78cfbc76cbfc5b657f9f3fb",
    "u": "https://ios.tymyrddin.dev/docs/malware/ransomware",
    "t": "Ransomware ",
    "c": "Ransomware  Most ransom messages on iPhone and iPad are scams. If you get a message in your browser, or an SMS or iMessage that your iPhone has been disabled or data has been encrypted, likely it is a scam. Do not pay, clear all browser data or delete the message, and report it to Apple. If not a scam, it is installed as an unremovable management profile from the Internet, sideloaded from an infected computer, or downloaded as the result of jailbreaking the device. Unless your device is jailbroken or using an outdated version of iOS, the most ransomware can do is hide your apps or control settings on your device, not encrypt your data. You will be able to restore your device from backup. Detecting  If many of your apps are missing from your home screen, you may have ransomware on your iOS device. Go to Settings -> General -> Profiles and Device Management and look for unknown management profiles. If your device (phone or pad) is infected, there will be some notification from an app that demands payment. These pop-ups may appear out of the blue, or they may occur when doing a specific action (like pressing the Home button). Try searching for the message you see in a search engine to find out more. Do not pay to get your data back. Even if you pay, there is no guarantee the ransomware will be removed. Try to remove it. If you can not, get help. Removing  Attempt to remove the found culprit management profile. Go to Settings -> General -> Profiles and Device Management , then tap on the management profile to remove. Tap on Remove Profile at the bottom of the screen, then enter your passcode. Backup the device. Power down the device (hard reset). While powered down, connect the device to your workstation. Put it in DFU mode . Choose Restore Device … to reinstall iOS. Restore data from backup. Some apps may need to be reinstalled too. Preventing  Only install apps from the App Store. Read app reviews. Back up iPhone or iPad often. If your device does get infected, you can restore your data right away. Always use the latest iOS version.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7788fd31ecda141c707836ea54a0daf6",
    "u": "https://ios.tymyrddin.dev/docs/services/tor-proxy",
    "t": "Using Tor proxies ",
    "c": "Using Tor proxies  Orbot is a free tor proxy app. It encrypts your Internet traffic and then hides it by bouncing through a series of computers around the world. Tor is free software and an open network that helps you defend against a form of network surveillance that threatens personal freedom and privacy, private activities and relationships, and state security known as traffic analysis. Notes  If a government makes their own national internet, or routes traffic through specific servers to use deep packet inspection (DPI), running Tor may not provide security if the government is able to see the entire path. Sometimes the Tor network is censored, and clients can’t connect to it. An increasing number of censoring countries are using Deep Packet Inspection (DPI) to classify Internet traffic flows by protocol. While Tor uses bridge relays to get around a censor that blocks by IP address, the censor can use DPI to recognize and filter Tor traffic flows even when they connect to unexpected IP addresses. With pluggable transports, censorship against Tor can be bypassed. Not only that. If an attacker can see your traffic, and can see the website you’re visiting, even with a path outside the adversary’s control - they will still be able to correlate the traffic and learn you are visiting the website. If the same connection (the same set of relays) were to be used for a longer period of time a Tor connection could be vulnerable to statistical analysis, which is why the client software changes the entry node every ten minutes.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "705f17877699e62fef01534739c97060",
    "u": "https://ios.tymyrddin.dev/docs/services/vpn",
    "t": "Using VPN services ",
    "c": "Using VPN services  Internet providers are collecting your browsing data and handing this over to third parties (US, UK, Australia, and most of Europe). Public Wi-Fi remains a serious threat with adversaries targeting unsuspecting users. Many streaming services and websites restrict content to certain geographic locations. A VPN allows you to bypass such restrictions (Not always. Some such websites keep blacklists of VPN servers and will still block your traffic). A VPN will encrypt the connection and make the traffic unreadable. VPNs not logging traffic, DNS requests, timestamps, bandwidth, IP address: ProtonVPN , Switzerland NordVPN , Panama Mullvad , Sweden IVPN , Gibraltar Surfshark VPN , Netherlands",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "271f5e34ba1b5e1b73ac1d4291e7e31d",
    "u": "https://ios.tymyrddin.dev/docs/services/email-services",
    "t": "Using more secure email services ",
    "c": "Using more secure email services  Mailfence , Belgium, provides a full suite of services, Messaging, s, Calendars, Groups, and Document storage. It can easily replace the G suite. It is a secure email suite that offers end-to-end encryption (through PGP support) and works with different email clients. There is some logging of IP address and some other data, and the code is not open source. Tutanota , Germany, is a small but serious player among secure email providers. It uses a hybrid encryption system that avoids some drawbacks of PGP, and is protected by the GDPR and other pro-privacy EU regulations. So, it does not work with PGP and there is no way to import existing emails (yet). ProtonMail , Switzerland, uses PGP encryption standards for email and stores all messages and attachments encrypted at rest on Swiss servers. ProtonMail has a unique feature for “self-destructing messages” and they have also added address verification and full PGP support. Articles  Reddit: Court forces mail provider Tutanota to perform a surveillance function Twitter: ProtonMail logging one of its users and providing IP address logs to French authorities Reading that carefully, if the message had already been encrypted and the IP address had been that of a VPN , these cases would not exist.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e995f413478420b22e426b9b73907b50",
    "u": "https://ios.tymyrddin.dev/docs/authentication/unlock",
    "t": "Touch ID and Face ID? ",
    "c": "Touch ID and Face ID?  Touch ID or Face ID to unlock your phone without needing to enter a password (passcode, PIN) is nice, but in some countries biometric authentication methods are not protected the way passwords are. In these countries, law enforcement can not compel someone to enter a password to unlock a device without a search warrant, but they can for Touch ID or Face ID. In addition, for all people in all countries, raw biometrics data in the form of fingerprints, face scans or voice recognition, for example, is analog data until a biometric system converts it to digital data that a computer can then process. That means this data must be stored somewhere. The convenience of biometric authentication is only worthwhile as long as the data being stored remains secure and untapped. For single-user devices, like an iPhone, this data can be stored on the local device. If data is stored somewhere, it could potentially get stolen. If the worst happens and your PIN or password get stolen, you can easily change them. What are you going to do if your fingerprint or Iris scan get stolen? Apple can promise to ensure no one, not even Apple itself, has rights to access the biometric data. Unless the iPhone gets hacked of course. Even if that were extremely hard, identity is the most significant and valuable possession and the protection of it is crucial. Law enforcement and Identity issues aside, while Touch ID and Face ID are convenient, both leave you vulnerable to unwanted unlocks when you are sleeping . Temporarily disable Touch ID or Face ID  Go to Settings -> Emergency SOS . Make sure the Call with Side Button toggle is on (green). Whenever you want to quickly disable Face ID or Touch ID, press the iPhone’s Side button five times. A screen will appear that shows three sliders: power off, Medical ID, and Emergency SOS. Below them will be a cancel button. Once this screen appears, Face ID and Touch ID are automatically disabled, and you’ll only be able to unlock your phone with your passcode (keep in mind, once you unlock it with a passcode, Face ID and Touch ID are reenabled). Disable Touch ID or Face ID permanently  Go to Settings -> Touch ID & Passcode (on an iPhone X, it’s Face ID & Passcode instead). You’ll be prompted to enter your passcode. On the Touch ID & Passcode page (or Face ID & Passcode page on the iPhone X), turn off all the settings in the Use Touch ID For section, iPhone Unlock and Apple Pay and iTunes & App Store . Now, you will only be able to unlock your iPhone, use Apple Pay, or pay for purchases from iTunes and the App Store by entering your passcode. The biggest problem with this is that you are more likely to use a weak passcode for convenience. It is recommended to use a more secure iPhone passcode that combines numbers and letters.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c107f84f9105926685fd5054c7860338",
    "u": "https://pap.tymyrddin.dev/docs/workstation/ransomware",
    "t": "Ransomware ",
    "c": "Ransomware  Prevention  Keep online backups of your data, and offline encrypted backups of critical data. Do not click on links in spam messages or on unknown websites. Do not give personal information. Do not open suspicious email attachments. Never use unknown USB sticks. Use VPN services on public Wi-Fi networks. Detection  The antivirus scanner or security app sounds an alarm (unless it was not installed or has been bypassed). File extensions change to an unfamiliar combination of letters. File names change. Increased CPU and disk activity. Suspicious network communication (with the gangsters). Encrypted files. A window containing a ransom demand. A locker ransomware virus locks the entire screen, while crypto ransomware encrypts individual files. Response  If you detect it before the ransom note is delivered, you may be able to stop it from spreading to other devices and files, and to remove it. Files already encrypted remain encrypted (of course you have a backup). Disconnect from wireless and wired devices, external hard drives, storage media, and cloud accounts (prevent it from spreading). Scan with AV scanner of security app (identify threat). In the case of screen-locking ransomware, you can probably not get to the security software. Start the device in Safe Mode , and you might get to it. Check the No More Ransom Project website for solutions. Restore encrypted data from backup.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "fe2c741e16a0922c423625ebaf0355a8",
    "u": "https://pap.tymyrddin.dev/docs/mitre/phishing",
    "t": "Phishing for information ",
    "c": "Phishing for information  Phishing , Smishing , and Vishing are classified as Technique ID 1598 (T1598) , and it contains three sub-techniques: Spearphishing Service, Spearphishing Attachment and Spearphishing Link. Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. For followed links, check for references to uncategorized or known-bad sites. URL inspection within email and messages (including expanding shortened links) can also help detect links leading to known malicious sites. Monitor social media traffic for suspicious activity, including messages requesting information as well as abnormal file or data transfers (especially those involving unknown, or otherwise suspicious accounts). Monitor and analyse traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (like extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (monitor anomalies in use of files that do not normally initiate connections for respective protocol(s)). Monitor network data for uncommon data flows. Processes using the network that do not normally have network communication or have never been seen before are suspicious. The NIST phishing incident response playbook contains the 7 steps of the NIST incident response process for investigating phishing. Network detection resources  Wireshark: SMTP SMTP codes Wireshark: IMF",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6186c08a76889a9d5f17fea0a17a8af6",
    "u": "https://pap.tymyrddin.dev/docs/mitre/iocs",
    "t": "Signs of a compromise @home ",
    "c": "Signs of a compromise @home  These patterns are based on business contexts, and most are not useful for home use, unless you run servers locally. The network patterns boldfaced are useful in a home context in this first strategy . If outbound traffic patterns are suspiciously unusual, you can keep a closer eye on it to check if something nefarious is happening. Anomalies in the behaviour (activity) of privileged user accounts. Login attempts from countries with which you have no exchanges otherwise. An existing user tries to log in many times. Failed logins for user accounts that do not exist. A wave in Database Read Volume (exfiltration). A sudden increase in Hypertext Markup Language (HTML) response size (exfiltration). The same file is requested many times (in different ways). Unusual ports are being used. Changes to the Windows registry or system files (persistence). Anomalous Domain Name System (DNS) requests from a specific host. Note that Indicators of compromise (IOCs) refer to data that indicates a system may have been infiltrated by a cyber threat. Indicators of attack are different from IOCs in that they focus on identifying the activity associated with the attack while the attack is happening, whereas IOCs focus on examining what happened after an attack has occurred.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3e9c2ee3bca4b825114baac873682150",
    "u": "https://ios.tymyrddin.dev/",
    "t": "Hardening iOS ",
    "c": "Hardening iOS  Keeping it as simple as possible. iOS evolves fast. An old and new iPhone are underway for further pentesting, after which these mitigations will be updated (when we have time). Accounts and authentication Introduction Using a SIM PIN Touch ID and Face ID? Auditing and changing password reuse Automagically creating strong passwords Using multifactor authentication (MFA) Services and applications Introduction Auditing and blocking the access apps have Unwanted third party apps (UAPs) Blocking apps from accessing Bluetooth data Checking for unknown configuration profiles Browsers that protect your privacy Changing default browser app Using more secure messaging services Using more secure email services Using SSH tunnels Using VPN services Using Tor proxies Changing MAC address Editing hosts file Data Introduction Encrypting the data Worst case, nuking all data Privacy Introduction Silencing spam callers Changing default search engine Malware Introduction Threat awareness Installing a third party security app Finding the culprit and removing it Ransomware Operations security Introduction Threat awareness Not getting juice-jacked Not auto-joining Wi-Fi networks Using email more securely Browsing more safely Measuring Internet Censorship ‘;–have i been pwned? Guards! Guards! Introduction Lockdown Privacy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "620ca01245ac96076b1589bad40d1138",
    "u": "https://pap.tymyrddin.dev/docs/diy/strategy",
    "t": "A first strategy ",
    "c": "A first strategy   a decade ago it was: Keep systems updated, patch, use strong passwords, install anti-malware, firewalls and proxies, etc. Now it is: Keep systems updated, patch more, use stronger passwords, use a password vault, MFA, biometric authentication, Next-Gen firewalls, Next-Gen anti-malware, and oh, there’s new proxies too, and more, and more overload, tool integrations, maintenance of tools, etc. And usually expensive! Defence strategies  Active defence employs limited offensive action and counterattacks with a defensive posture to deny a contested area or position to the enemy. It requires proactive, anticipatory, and reactionary actions against adversaries. The enemies are already inside the gates … Passive defence is all about measures taken to reduce the probability of and to minimize the effects of damage caused by hostile action without the intention of taking the initiative. It typically uses traditional static defenses and then hopes for the best … Prevent|Detect|Respond: Prevention is ideal ofcourse, and it requires detection, and detection without response is of little value … Keep calm and …  Prevent|Detect|Respond on mobiles and workstations . For home and small organisational networks, Raspberry Pi can be bought (not expensive), the PiRogue suite installed on it, and then used to catch indicators of compromise (IoAs and IoCs) on all our devices, including mobiles. We can do some mobile app vetting and malware analysis, and share results on Pithus. If we run a server, we can harden it And we can harden our webservers . If we run a mailserver, we can make it smarter . With all of that covered, we can add some active defence and set up a honeyclient and/or honeyports . … Design and organise security operations training. Not for users, not for employees, not for activists, for people! Make it fun, with posters, simulations and hands-on hardening exercises for all likely endpoints.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8317c192a4bd443f305a79a978c07902",
    "u": "https://webserver.tymyrddin.dev/",
    "t": "Hardening webserver ",
    "c": "Hardening webserver  Unlike other devices sitting behind layers of defenses and firewalls, web servers sit at the edge of the known network and are designed to share information with the outside, the unknown. These are some notes on hardening the two most used web servers, Nginx and Apache. Building a sound foundation Introduction Keep only required modules Disable unwanted services Restrict file and directory access Disable unwanted HTTP methods Create non-root users Install and use ModSecurity Install and use ModEvasive Set up and configure logging Resolving TLS issues Introduction (Re)configure TLS Manually specify cipher suite Configure forward secrecy Preventing information disclosure Introduction Hide web server information Disable directory listing Setting HTTP security headers Introduction Check your HTTP security headers HTTP Strict Transport Security (HSTS) X-Frame-Options Content Security Policy (CSP) Permissions-Policy Referrer-Policy X-Content-Type-Options X-XSS-Protection Set-Cookie Content-Type Using CORS Introduction CORS best practices CORS on Nginx CORS on Apache",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "66c5676f8651c63767a38eb6f22ae285",
    "u": "https://webserver.tymyrddin.dev/docs/disclosure/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  To protect web applications against the most obvious information disclosure issues, make sure that the web server does not send out response headers or background information that reveal technical details about the backend technology type, version or setup. Why?  Make it harder for attackers to fingerprint your tech stack . How?  Hide web server information Disable directory listing",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3d60b4ed1dbbce2247274f26d2955f8c",
    "u": "https://webserver.tymyrddin.dev/docs/http/cookie",
    "t": "Set-Cookie ",
    "c": "Set-Cookie  The Set-Cookie HTTP response header is used to send a cookie from the server to the user agent, so the user agent can send it back to the server later. To send multiple cookies, multiple Set-Cookie headers should be sent in the same response. For example (the Domain attribute has been removed intentionally): Set-Cookie: name=value; Secure; HttpOnly; SameSite=Strict Resources  MDN Web docs: Using HTTP cookies",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "67155429117a82bae2abb96249c61c4f",
    "u": "https://webserver.tymyrddin.dev/docs/encryption/cipher",
    "t": "Manually specify cipher suite ",
    "c": "Manually specify cipher suite  To secure the transfer of data, TLS/SSL uses one or more cipher suites. A cipher suite is a combination of authentication, encryption, and message authentication code (MAC) algorithms. They are used during the negotiation of security settings for a TLS/SSL connection and the transfer of data. Depending on context, the need to support legacy browsers and regulatory requirements, you can choose different cipher suite configurations (modern, intermediate, or old). TLS 1.3 does not require manually specifying cipher suites.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "131ca0eae40688d10c6da264bf16582a",
    "u": "https://webserver.tymyrddin.dev/docs/http/content",
    "t": "Content-Type ",
    "c": "Content-Type  The Content-Type representation header is used to indicate the original media type of the resource (before any content encoding is applied for sending). For example: Content-Type: text/html; charset=UTF-8 The charset attribute is necessary to prevent XSS in HTML pages The text/html can be any of the possible MIME types Resources  MDN Web docs: Content-Type",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7158354ad25fcb1e28bb10f5f78aa23b",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/file-system",
    "t": "Restrict file and directory access ",
    "c": "Restrict file and directory access  Apache  To restrict a directory from access by users, deny all users using the Directory directive: < Directory \"/var/www/directory\" > Order Deny , Allow Deny from all Allow from 192.168.1.0 / 24 Allow from .core.com </ Directory > To restrict a file using the File directive: # The following lines prevent .htaccess and .htpasswd files from being # viewed by Web clients. # < Files ~ \"^\\.ht\" > Order allow , deny Deny from all Satisfy all </ Files > To limit the scope of enclosed directives by URL use the Location directive: < Location / admin > Order Deny , Allow Deny from all Allow from 192.168.1.0 / 24 Allow from .core.com </ Location > Nginx  The Apache .htaccess is comparable to the server{} block in Nginx, but Nginx has a much more lightweight approach to parsing configuration, and it will not scan site directories for additional configurations. To restrict access to multiple directories in one location entry will give a 403 because of the deny all : ... location ~ /(dir1|dir2|dir3) { deny all; return 404; } ... To allow public access to a /data/public directory and execution of php scripts in it while denying public access to its subdirectories, put the php location in another file called php.conf and include that file in the server block and in the /data/public/ block. The config: server { location ^~ /data/public/ { allow all; try_files $uri $uri/ /index.php?args; # include to avoid writing it twice.. include php.conf } location ^~ /data/ { deny all; } # ..... # Some other config blocks # ..... # This line instead of the php config block to avoid writing the php part twice include php.conf } And the php.conf file: location ~ \\.php$ { fastcgi_split_path_info ^(.+\\.php)(/.+)$; fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock; fastcgi_index index.php; include fastcgi_params; }",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cf2ff06306fcb60a1eeaa2e8e836b8af",
    "u": "https://webserver.tymyrddin.dev/docs/cors/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  You can send GET and POST requests cross domain even if a target does not use CORS, but there are restrictions. Most importantly, the response can not be read. This restriction is built into browsers as part of the Single Origin Policy (SOP) and it protects against data leaking across domains. It also stops publishing an API that can be read from other domains. Why?  CORS allows for loosening that restriction, allowing the domain that is hosting the API to announce to browsers that it allows cross domain calls from either all or some defined domains. If misconfigured, these controlled and intended SOP bypasses can have adverse effects. Such exploits can cause private information leaks and lead to more vulnerabilities, such as authentication bypass, account takeover, and large data breaches. Proper configuration of CORS is therefor essential. How?  CORS best practices CORS on Nginx CORS on Apache",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e5d0a6bd29e4d1bd113858f684568c6d",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/logging",
    "t": "Set up and configure logging ",
    "c": "Set up and configure logging  Logging provides detailed information about client requests made on the web server, and will prove useful when investigating the cause of particular issues. Nginx  The nginx access and error logs are enabled by default and are located in logs/error.log and logs/access.log respectively. A crit severity level will cause nginx to log critical issues and all issues that have a higher severity level than crit . To set the severity level to crit , use the error_log directive : error_log logs/error.log crit; The level of logging can be, in order of increasing severity, debug , info , notice , warn , error , crit , alert , or emerg . Monitoring and managing nginx log files makes it easier to understand requests made to the web server and notice errors. This will aid in discovering any attack attempts and identifying what can be done to optimise server performance. Log management tools, such as logrotate, can be used to rotate and compress old logs and free up disk space. The ngx_http_stub_status_module module provides access to basic status information. Apache  To enable logging on Apache, the mod_log_config module needs to be included from the Apache httpd.conf file. This module provides the TransferLog , LogFormat , and CustomLog directives which are respectively used to create a log file, specify a custom format, and creating and formatting a log file, all in one go. For example, to log the referrer and browser of each request along with the default logging parameters and use the CustomLog directive to instruct Apache to use this logging format: LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" detailed CustomLog logs/access.log detailed",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1ebfeb4352a75168686a6a30a88ed42e",
    "u": "https://webserver.tymyrddin.dev/docs/http/hsts",
    "t": "HTTP Strict Transport Security (HSTS) ",
    "c": "HTTP Strict Transport Security (HSTS)  HTTP Strict Transport Security (HSTS) is a method used by websites to declare that they should only be accessed using a secure connection (HTTPS). If a website declares an HSTS policy, the browser refuses all HTTP connections and prevents users from accepting insecure SSL certificates. Nginx  To add an HSTS header to a Nginx server, add the Strict-Transport-Security directive to the server section: add_header Strict-Transport-Security \"max-age=31536000; includeSubdomains; preload\"; Example of the Nginx config file with the added HTTP Strict Transport Security (HSTS) header: upstream example { server localhost:8080; } server { listen 80; server_name example.test; add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload'; location / { proxy_pass http://example; } } Apache  Header set Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" Resources  MDN Web docs: Strict-Transport-Security",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a382c9b9e94658e46d90875f801bfc14",
    "u": "https://webserver.tymyrddin.dev/docs/http/permissions",
    "t": "Permissions-Policy ",
    "c": "Permissions-Policy  The HTTP Permissions-Policy header provides a mechanism to allow and deny the use of browser features in a document or within any frame elements in the document. It allows a site to control which APIs or features can be used in the browser. Apache  Header always set Permissions-Policy \"geolocation=(),midi=(),sync-xhr=(),microphone=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()\" Nginx  add_header Permissions-Policy \"geolocation=(),midi=(),sync-xhr=(),microphone=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()\"; Resources  MDN Web docs: Permissions-Policy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5d3af8d6179c2873cecb4c7909a06374",
    "u": "https://webserver.tymyrddin.dev/docs/http/csp",
    "t": "Content Security Policy (CSP) ",
    "c": "Content Security Policy (CSP)  Content Security Policy (CSP) protects the web server against certain types of attacks, including Cross-site Scripting attacks (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement to distribution of malware. It defines the approved content sources that allow the browser to load them (or not). For example, to restrict most of the resource types to the same site and subdomains of example.com : Content-Security-Policy: default-src 'self' *.example.com; block-all-mixed-content; font-src 'self' https: data:; img-src 'self' data: blob:; object-src 'none'; script-src-attr 'none'; style-src 'self' https: 'unsafe-inline'; upgrade-insecure-requests; Inline script elements and inline script event handlers like onload will stop working with the above header. This is required to neutralize XSS attacks. You may see mentions of the X-Content-Security-Policy header, but that’s an older version. Add the Content-Security-Policy header to match your requirements. Nginx  add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always; Apache  Header always set Content-Security-Policy \"default-src 'self'; font-src *;img-src * data:; script-src *; style-src *;\" Resources  MDN Web docs: Content Security Policy (CSP)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3ac8e8ad7961f50dcc809c7facb39092",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/services",
    "t": "Disable unwanted services ",
    "c": "Disable unwanted services  The biggest threat to server security is the code that is written for the server to execute. Two sources of these problems are Common Gateway Interface (CGI) programs and Server Side Includes (SSI). Intruders exploit poor code by forcing buffer overflows or by passing shell commands through the program to the system. Server Side Includes are processed by the server before they are sent to the client. These files can include other files or execute code from script files. If user input is used to dynamically modify the SSI file, it is vulnerable to the same type of attacks as CGI scripts. Administrators have two options: Disable Server Side Includes (SSI) and CGI execution completely. Review all programs included in the cgi-bin directory, don’t allow ExecCGI in any other directory unless you’re positive no one can place a script there that have not been reviewed, write programs that do not allow free-form user input, use drop-down menus instead of keyboard input and never trust user input. Apache  Disallowing can be done by defining a Directory tag in the configuration file: < Directory \"/directory\" > Options - Includes - ExecCGI - FollowSymLinks </ Directory > The most secure way to operate a server is to disallow all SSI processing. This is the default unless All or Includes is specified by an Options directive. A compromise setting is to allow SSI, but to disallow the #include and #exec commands, which are the greatest security threat. Use IncludesNOEXEC on the Options directive for this setting. Nginx  Nginx and OpenBSD httpd authors decided not to include CGI interpretation but instead use FastCGI.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "90ee373e76409e19c3e10f1423e1b7f6",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/modules",
    "t": "Keep only required modules ",
    "c": "Keep only required modules  Minimise the risk of potential attacks by limiting allowed operations. The more services and functions a web server is running, the more opportunities an attacker will have to exploit the network. There are 65,535 available ports each server could possibly service. The server probably does not need all of them open and receptive. Disable and turn off any unnecessary modules, services, ports or functions. Nginx  Default, Nginx includes many modules, and it is not possible to choose modules at runtime. To disable modules, Nginx needs to be recompiled and the configure option during installation to disable modules that are not required. For example, to disable the autoindex module, which generates automatic directory listings: # ./configure --without-http_autoindex_module # make # make install Apache  Default installation may include many pre-installed and enabled modules that are not needed. The Apache module documentation lists and explains all the modules available for Apache. Research the enabled modules to make sure that they are really required for the functionality of the website. Unnecessary modules can be disabled by commenting out a specific LoadModule line.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b6bd82d2d1395250c3ee57b132fdc24d",
    "u": "https://webserver.tymyrddin.dev/docs/cors/requirements",
    "t": "CORS best practices ",
    "c": "CORS best practices  Origins specified in the Access-Control-Allow-Origin header should only be sites that are trusted. Dynamically reflecting origins from cross-origin requests without validation is exploitable and to be avoided. Also avoid using the header Access-Control-Allow-Origin: null . Cross-origin resource calls from internal documents and sandboxed requests can specify the null origin. CORS headers must be defined in respect of trusted origins for private and public servers. Avoid using wildcards in internal networks. Trusting network configuration alone to protect internal resources is not sufficient when internal browsers can access untrusted external domains. CORS defines browser behaviours and is not a replacement for server-side protection of sensitive data - an attacker can directly forge a request from any trusted origin. Web servers should apply protections for sensitive data, such as authentication and session management, in addition to properly configured CORS.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "31c2c9c575648cf13070c4ab0783c888",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/mod_evasive",
    "t": "Install and use ModEvasive ",
    "c": "Install and use ModEvasive  ModEvasive (mod_evasive) provides a web server with built-in evasive capabilities if it detects that a website may be under attack. ModEvasive is used to help to prevent DDOS attacks by closing connections if too many requests come into a website too quickly, if a certain child process request is attempting to create too many concurrent requests or if any host IP is trying to access the web server even if blacklisted.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a2e1f191304d01a8d091b86d31745249",
    "u": "https://webserver.tymyrddin.dev/docs/encryption/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Do not use old versions of the TLS protocol (TLSv1 TLSv1.1) on web servers, because they open the door to SSL attacks . Why?  All the TLS versions older than 1.2 are having lots of known vulnerabilities, which is why the latest browsers have removed support for these vulnerable protocols. How?  (Re)configure TLS Manually specify cipher suite Configure forward secrecy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9a73d1c1cf7a3fccd73d35af436600f7",
    "u": "https://webserver.tymyrddin.dev/docs/http/xframe",
    "t": "X-Frame-Options ",
    "c": "X-Frame-Options  The X-Frame-Options HTTP response header defends an application from clickjacking attacks . It can be used to indicate whethera browser is allowed to render a page in a frame , iframe , embed or object . For example, to disallow displaying of a page in a frame: X-Frame-Options: DENY This header can be configured in three ways: DENY – disables the iframe features completely. SAMEORIGIN – allows iframe to be used by anyone from the same origin. ALLOW-FROM – allows iframes from specific URLs Nginx  Add the following parameter to the nginx configuration file in the server section: add_header X-Frame-Options \"SAMEORIGIN\"; Apache  Header always set X-Frame-Options \"SAMEORIGIN\" Resources  MDN Web docs: X-Frame-Options",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4222bae609e436e97f87563fff45bfe3",
    "u": "https://webserver.tymyrddin.dev/docs/encryption/forward-secrecy",
    "t": "Configure forward secrecy ",
    "c": "Configure forward secrecy  Perfect Forward Secrecy (PFS) is a style of encryption that enables short-term, private key exchanges between clients and servers. PFS can be found within transport layer security (SSL/TLS) and prevents adversaries from decrypting data from other sessions, past or future, even if the private keys used in an individual session are stolen at some point. It does this by using unique session keys, generated automatically each time a connection is made. The keys do not use prior knowledge when they are generated, eliminating the need for long-term storage of keys and preventing sensitive data from being accessed using existing ones that have been compromised. This makes it much harder for attackers to obtain the session key through decryption. PFS is supported by all major internet browsers. How to Configure Nginx for Forward Secrecy How to Configure Apache for Forward Secrecy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "514aefc73fdfd2a1ff3b2ddc91a114de",
    "u": "https://webserver.tymyrddin.dev/docs/http/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Turn on additional protection for web applications. Why?  Setting security headers in web applications and web server settings is an easy way to improve the resilience of your web application against many common attacks, including cross-site scripting (XSS) , clickjacking attacks , and information disclosure . How?  These headers can be applied globally or to a specific site in the Nginx/Apache virtual host file by adding the HTTP Security Headers to the server block. Check your HTTP security headers HTTP Strict Transport Security (HSTS) X-Frame-Options Content Security Policy (CSP) Permissions-Policy Referrer-Policy X-Content-Type-Options X-XSS-Protection Set-Cookie Content-Type",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4ccd8630562a5fd2d1d976240eeba111",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/http-methods",
    "t": "Disable unwanted HTTP methods ",
    "c": "Disable unwanted HTTP methods  HTTP TRACE and TRACK requests can be used for legitimate purposes, such as debugging connection errors within the network, but these protocols can also compromise the security of a web server. One of the most common exploitation methods are [cross-site scripting (XSS) attacks], where attackers use and manipulate the TRACE and TRACK methods to intercept normal traffic connections, session cookies and possibly any data in transit. Disable any HTTP methods, which are not going to be used and which are not required to be implemented on the web server. Nginx  Add this condition in the location block of the nginx virtual host configuration file, location / { limit_except GET HEAD POST { deny all; } } The server will only allow GET , HEAD , and POST methods and will filter out methods such as PUT , DELETE , PATCH , TRACE , TRACK , and OPTIONS . Or for a more universal solution, add this condition to the server section (or server block): if ($request_method !~ ^(GET|HEAD|POST)$ ) { return 444; } Note: Be very careful with if statements in the location context. Apache  Make sure that the mod_rewrite module and .htaccess are enabled. To enable the mod_rewrite module: # a2enmod rewrite Add AllowOverride All in the VirtualHost configuration file: <VirtualHost *:80> ServerName www.example.com DocumentRoot /var/www/html <Directory /var/www/html> AllowOverride All </Directory> </VirtualHost> Or enable it globally by editing the Apache main configuration file. <Directory /var/www/html> Options Indexes FollowSymLinks AllowOverride All </Directory> Restart Apache, and create a .htaccess file under the document root directory with the following code. RewriteEngine On RewriteCond %{REQUEST_METHOD} ^(PUT|DELETE|PATCH|TRACE|OPTIONS) RewriteRule .* - [F] The above configuration will disable PUT , DELETE , PATCH , TRACE , TRACK , and OPTIONS methods.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f488c0ebf84f08a45d618659b9417f35",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Remove all unnecessary web server modules. A lot of web servers by default come with several modules that introduce security risks. Modify default configuration settings. Install and run a web application firewall (WAF). Most web servers support the open-source ModSecurity firewall. If possible, either patch server software to the latest version automatically or turn on notifications for manual patching. Why?  Build a more secure foundation for web applications. How?  Keep only required modules Disable unwanted services Restrict file and directory access Disable unwanted HTTP methods Create non-root users Install and use ModSecurity Install and use ModEvasive Set up and configure logging",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5a2d39b18b660de72833c4fe6843c0e9",
    "u": "https://webserver.tymyrddin.dev/docs/http/xcontent",
    "t": "X-Content-Type-Options ",
    "c": "X-Content-Type-Options  The X-Content-Type-Options response HTTP header is used by the server to prevent browsers from guessing the media type (MIME type). This is known as MIME sniffing in which the browser guesses the correct MIME type by looking at the contents of the resource. The absence of this header might cause browsers to transform non-executable content into executable content. This header helps mitigate the danger of drive-by downloads. Apache  Header always set X-Content-Type-Options \"nosniff\" Nginx  X-Content-Type-Options: nosniff Resources  MDN Web docs: X-Content-Type-Options",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "049d13e0487a8fb9646bf5ebc0978bce",
    "u": "https://webserver.tymyrddin.dev/docs/encryption/tls",
    "t": "(Re)configure TLS ",
    "c": "(Re)configure TLS  Transport Layer Security (TLS) and its predecessor, Secure Socket Layer (SSL), are widely used protocols. They were designed to secure the transfer of data between the client and the server through authentication, encryption, and integrity protection. All the SSL and TLS versions older than 1.2 are having lots of known vulnerabilities, which is why the latest browsers have removed support for these vulnerable protocols. Likewise, do not use old versions of the TLS protocol (TLSv1 TLSv1.1) on web servers, because they open the door to SSL attacks . TLS 1.3 is preferred as it does not require manually specifying cipher suites in configuration. Nginx  Add this directive in the server section of the Nginx configuration file: ssl_protocols TLSv1.2 TLSv1.3; Restart Nginx service. Apache: TLS 1.2 only  Edit the virtual host section for your domain in the Apache SSL configuration file on the server to disable all older protocols except TLSv1.2: <VirtualHost *:443> ServerName www.example.com DocumentRoot /var/www/html SSLEngine on SSLProtocol -all +TLSv1.2 SSLCertificateFile /etc/letsencrypt/live/example.com/cert.pem SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem </VirtualHost> Restart Apache service. Apache: TLS 1.3 and 1.2  <VirtualHost *:443> ServerName www.example.com DocumentRoot /var/www/html SSLEngine on SSLProtocol -all +TLSv1.2 +TLSv1.3 SSLCertificateFile /etc/letsencrypt/live/example.com/cert.pem SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem </VirtualHost> Restart Apache service.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cc5839ec6084ea3929a987b9f809a2fb",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/mod_security",
    "t": "Install and use ModSecurity ",
    "c": "Install and use ModSecurity  ModSecurity ( mod_security ) is an open-source IDS and prevention engine, originally developed for Apache, and now also available for Nginx (and other platforms) in a “standalone” version. ModSecurity works as a supplemental firewall for the web server, allowing you to monitor traffic in real-time, and disabling host connections if the module suspects potential brute-force password attacks. Nginx  To install it without (re)compiling Nginx, install the dependencies: # apt-get install libxml2 libxml2-dev libxml2-utils libaprutil1 libaprutil1-dev And download, compile and install mod_security : # git clone https://github.com/SpiderLabs/ModSecurity.git mod_security # cd mod_security ~/mod_security# ./autogen.sh ~/mod_security# ./configure --enable-standalone-module ~/mod_security# make To compile Nginx from source with the modsecurity module (check for latest version here: http://nginx.org/en/download.html) # wget http://www.nginx.org/download/nginx-1.9.5.tar.gz # tar -xvpzf nginx-1.9.5.tar.gz # cd nginx-1.9.5 ~/nginx-1.9.5# ./configure --add-module=../mod_security/nginx/modsecurity ~/nginx-1.9.5# make ~/nginx-1.9.5# make install The ModSecurity configuration file must be defined in the nginx.conf file, something like this: server { listen 80; server_name localhost; location / { ModSecurityEnabled on; ModSecurityConfig modsecurity.conf; } } For custom rules applied to different directories, create new mod_security.conf files, for example: location /secured { ModSecurityConfig modsecurity3.conf; proxy_pass http://secured.core.com/; proxy_read_timeout 180s; } To turn it off for a particular directory: location /unsecured/ { ModSecurityEnabled off; proxy_pass http://unsecured.core.com/; proxy_read_timeout 180s; } Restart Nginx. Apache  Compile and embed the ModSecurity module or install from repository: # apt-get install libapache2-modsecurity Check it was loaded: # apachectl -M | grep --color security Rename the recommended-labeled configuration file: # mv /etc/modsecurity/modsecurity.conf-recommended /etc/modsecurity/modsecurity.conf Restart Apache. Usage  A new logfile named /var/log/apache2/modsec_audit.log has been created. Check that the default configuration file is not set to DetectionOnly , which logs requests according to rule matches and doesn’t block anything. Edit the /etc/modsecurity/modsecurity.conf file to change it if need be (set it to On ). Some possible changes: # Prevent path traversal (..) attacks SecFilter \"../\" # Weaker XSS protection but allows common HTML tags SecFilter \"<[[:space:]]*script\" # Prevent XSS atacks (HTML/Javascript injection) SecFilter \"<(.|n)+>\" # Very crude filters to prevent SQL injection attacks SecFilter \"delete[[:space:]]+from\" SecFilter \"insert[[:space:]]+into\" SecFilter \"select.+from\" SecFilter \"drop[[:space:]]table\" # Protecting from XSS attacks through the PHP session cookie SecFilterSelective ARG_PHPSESSID \"!^[0-9a-z]*$\" SecFilterSelective COOKIE_PHPSESSID \"!^[0-9a-z]*$\" Restart Apache. Configuration resources  Have a look at the OWASP ModSecurity Core Rule Set Project (CRS) for making more secure changes. The CRS aims to protect web applications from a wide range of attacks, with a minimum of false alerts.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c6377b5a3b18c57d4131e53f1d18cc4f",
    "u": "https://webserver.tymyrddin.dev/docs/disclosure/directory-listing",
    "t": "Disable directory listing ",
    "c": "Disable directory listing  Web servers by default display the content of the documents and files in the root directory when an index.html file is missing. This means that a potential attacker could possibly view all of the files and subdirectories that are presented to the browser. As with the hiding of version and OS identity , this is not a direct security threat as it only allows the attacker to gain information. Apache  Add the following configuration in /etc/apache2/apache2.conf to disable directory listing globally (server wide): < Directory /> Options - Indexes </ Directory > Do not overwrite this inside any directory. Your root directory may look like this: < Directory /> Options FollowSymLinks AllowOverride None </ Directory > AllowOverride None will prevent any accidental changes in .htaccess files. After that you can enable listing per directory by adding the Indexes option: < Directory / www / directory > Options Indexes FollowSymLinks AllowOverride None </ Directory > This enables the generation of Indexes only in that folder. Nginx  Nginx cannot directly execute external programs (CGI). Phew. But if you really really want it to, use fcgi securely. Disable SSI and autoindex execution  The ngx_http_autoindex_module processes requests ending with the slash character / and produces a directory listing. Usually a request is passed to the ngx_http_autoindex_module when the ngx_http_index_module cannot find an index file. You can configure and install Nginx using only required modules. To see which modules can be turned on or off while compiling the Nginx server: # ./configure --help | less To disable the SSI and autoindex module: # ./configure --without-http_autoindex_module --without-http_ssi_module # make # make install",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ba855fd37849dfa11e1094c6077de4c0",
    "u": "https://webserver.tymyrddin.dev/docs/http/xxss",
    "t": "X-XSS-Protection ",
    "c": "X-XSS-Protection  The HTTP X-XSS-Protection response header is a feature of Safari, Internet Explorer 8+, and Google Chrome that stops pages from loading when they detect reflected cross-site scripting (XSS) attacks. For example, to prevent browsers from rendering pages if an attack is detected: X-XSS-Protection: 1; mode=block The header can be implemented in three ways: X-XSS-Protection: 0 – disables the filter completely. X-XSS-Protection: 1 – enforces the header but only sanitises potential malicious scripts. X-XSS-Protection: 1; mode=block – enforces the feature and completely blocks the page. These protections are largely unnecessary in modern browsers when sites implement a strong Content-Security-Policy that disables the use of inline JavaScript (‘unsafe-inline’). Apache  Header always set X-XSS-Protection \"1; mode=block\" Nginx  add_header X-XSS-Protection \"1; mode=block\" always; Resources  MDN Web docs: X-XSS-Protection",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "efc28bdc7830dab0929e546608d8b1a9",
    "u": "https://webserver.tymyrddin.dev/docs/http/referrer",
    "t": "Referrer-Policy ",
    "c": "Referrer-Policy  The Referrer-Policy HTTP header controls how much referrer information (sent via the Referer header) should be included with requests. For example: Referrer-Policy: strict-origin-when-cross-origin Meaning, send the origin, path, and querystring when performing a same-origin request. For cross-origin requests send the origin (only) when the protocol security level stays same (HTTPS → HTTPS). Do not send the Referrer header to less secure destinations (HTTPS → HTTP). By checking the referrer, the new webpage can see where the request originated. The Referrer-Policy can be configured to cause the browser to not inform the destination site any URL information. Apache  Header always set Referrer-Policy \"strict-origin\" Nginx  add_header Referrer-Policy \"strict-origin\"; Resources  MDN Web docs: Referrer-Policy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c8c2d542023a8d99d5e5fc1e5c2622d4",
    "u": "https://webserver.tymyrddin.dev/docs/disclosure/hide-info",
    "t": "Hide web server information ",
    "c": "Hide web server information  Apache  If the <Location /server-info> directive in the httpd.conf configuration file is enabled, information about the Apache configuration can be read by accessing the /server-info page. The information includes server version, system paths, database names, library information, etc. This directive can be disabled by commenting out the mod_info module in the httpd.conf Apache configuration file: #LoadModule info_module modules/mod_info.so The <Location /server-status> directive lists information about server performance, such as server uptime, server load, current HTTP requests, and client IP addresses. To disable this directive, comment it out in the httpd.conf Apache configuration file: #<Location /server-status> # SetHandler server-status # Order deny,allow # Deny from all # Allow from .domain.com #</Location> The ServerSignature directive adds a footer to server-generated documents. The footer includes the version of Apache and the operating system. To disable this directive in the httpd.conf Apache configuration file: ServerSignature Off The ServerTokens directive controls the information that is sent back in the Server response header field. To set it to Prod to instruct Apache to return only Apache in the server response headers, include this directive in the httpd.conf Apache configuration file: ServerTokens Prod And restart Apache web server. Nginx  Find nginx.conf in nginx installation directory/conf on Windows systems, and in /etc/nginx or /usr/local/etc/nginx on Linux systems. You may also need to do some changes to virtual host configuration files in the sites-available subdirectory. By default, the server_tokens directive in nginx displays the nginx version number. It is directly visible in all automatically generated error pages but also present in all HTTP responses in the Server header. To disable the server_tokens directive: server_tokens off If you want to remove the Server header completely, you have to compile the Headers More module in, because the header is hard coded in the Nginx source, and it allows changing any http headers. Then, to clear the Server header: more_clear_headers Server; Or to set a custom string as Server more_set_headers 'Server: some-string-here';",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "fd94666ac24f0b4e1bc082559f0c1bea",
    "u": "https://server.tymyrddin.dev/",
    "t": "Hardening Linux server ",
    "c": "Hardening Linux server  The below writeups were initially based on debian 9 hosts, and then later on ubuntu 18.04 LTS, and on CentOS 8. Everything in these writeups will probably also apply to newer versions. If something does not work, check the documentation for your distro and version for what you are trying to do. Securing user accounts Introduction Configuring sudo Disabling root access Locking home directories Configuring password complexity Configuring other password requirements Dangers of the lxd group Audit services Introduction Auditing system services with systemctl Auditing network services with netstat Auditing network services with nmap Firewalls Introduction iptables UFW NFTables FirewallD FireHOL Packet filtering Fail2ban SSHguard Web Application Firewall WAF Port spoofing Encryption technologies Introduction GNU Privacy Guard OpenVPN strongSwan Installing SSH Harden ssh server Key management Jumping hosts Virtual network computing (VNC) Introduction TigerVNC TightVNC Securing sessions Access control Introduction Discretionary access control (DAC) Access control lists (ACL) and shared directory management (SDM) Mandatory access control (MAC) Public key infrastructure (PKI) Introduction Problems Internal PKI Pluggable Authentication Modules (PAM) Let’s Encrypt TLS/SSL Logfiles Introduction Syslog log commands Path of a common intruder Logrotate Centralised logging Guards! Guards! Introduction Samhain Maltrail Incidents Introduction Preventing incidents Using git for configuration management Implementing a backup plan Using bootable recovery media Troubleshooting Overview Authentication error Connection refused",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8aa7dc9e13f51af021194a10aa6c6368",
    "u": "https://server.tymyrddin.dev/docs/firewall/port-spoofing",
    "t": "Port spoofing ",
    "c": "Port spoofing  Scanning software usually tries to determine a service that is running on an open port to identify port numbers on which you are running your services on a system. For delaying reconnaissance phase, spoof all ports to seem to be open and emulate valid services on every port. Any attackers port scan results will become fairly meaningless and it will require hours of effort to accurately identify which ports have real services and which do not. Portspoof is a tool that is meant to be a lightweight, fast, portable and secure addition to any firewall system or security system. Techniques used by Portspoof: All configured TCP ports are always open: returns SYN+ACK for every connection attempt making it difficult to determine if a valid software is listening on a particular port and impractical to use stealth. Every open TCP port emulates a valid services: It has a huge dynamic service signature database, that will be used to generate responses to your adversaries scanning software service probes. Portspoof will respond to every service probe with a valid service signature, that is dynamically generated based on a service signature regular expression database. Portspoof can also be used as an Exploitation Framework Frontend, turning your system into a responsive and aggressive machine for exploiting your attackers’ tools and exploits. Some example exploits can be found in the configuration file portspoof.conf . Limitations: An attacker can still determine if a service is emulated by using a protocol probe (for 65k open ports)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "04d901bddf84d96822458570af0c50ff",
    "u": "https://server.tymyrddin.dev/docs/access/readme",
    "t": "Introduction ",
    "c": "THM Room: Hardening basics Introduction  What?  Configuring access control Why?  Protecting sensitive files and directories by setting proper permissions and ownership, and by using Extended Attributes (xattr). Avoiding security related problems with Set User ID (SUID) and Set Group ID (SGID). How?  Discretionary access control (DAC) Access control lists (ACL) and shared directory management (SDM) Mandatory access control (MAC) Mastering Linux Security and Hardening, Donald A. Tevault, Second Edition",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "bca2d3f5673072305e2c4a2b2f9a4456",
    "u": "https://server.tymyrddin.dev/docs/encryption/harden-ssh",
    "t": "Harden ssh server ",
    "c": "Harden ssh server  Configuration file  Changes to the /etc/ssh/sshd_config file: Root access: Root access has prohibit-password set by default. Deactivate using the root account (change PermitRootLogin prohibit-password to PermitRootLogin no ). There’s a configurationless workaround, by logging in as an ordinary user and becoming root with: $ su - Get rid of passwords: Use SSH keys authentication instead of passwords and deactivate using passwords for authentication ( PasswordAuthentication no ) in the config file. Limit access: Only allow login by certain users or groups (users and groups). This does not improve security directly but in some cases helps in resisting a brute force attack a little longer. Set a custom SSH port: By default, ssh listens on port 22, which is widely known among attackers and security tools/port scanners that launch brute force attacks against it. Though security by obscurity (which is no security), it does help eliminate a lot of noise on port 22. Change it in the config file and close port 22 and punch a hole for the new port in the firewall. Choose a port not in use by another service (woops) Disable X11 forwarding: As admins we are unlikely to use graphic tools, and the X11 protocol was never built with security in mind. It can be used by adversaries to open up a channel to the client and send remote commands. Change X11Forwarding yes to X11Forwarding no in the config file. After changing the /etc/ssh/sshd_config file, restart the ssh server with $ sudo systemctl restart ssh for changes to take effect. Additional security  Use of TCP wrappers: Only do this when all needing access to a server have a static IP address. For example, not on a jump host, but when using nc and routing tables with ProxyCommand for the servers one can jump to from the jump host. TCP wrappers can be made by using two files: /etc/hosts.allow and /etc/hosts.deny Append ALL:ALL to /etc/hosts.deny to deny all connections from unknown hosts. Append sshd : XXX.XXX.XXX.XXX to /etc/hosts.allow for each IP address you wish to allow. Use fail2ban for automatically blacklisting IPs (attempting to brute force the SSH server) with the help of a firewall.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9aafcc19059d395ece44e56f05357f35",
    "u": "https://server.tymyrddin.dev/docs/trouble/ssh-auth-error",
    "t": "Authentication error ",
    "c": "Authentication error  By default, the SSH client verifies the identity of the host to which it connects. If the remote host key is unknown, a user trying to connect is asked to accept it by typing “yes” or “no”. And it may fail. @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that a host key has just been changed. The fingerprint for the ECDSA key sent by the remote host is <redacted>. Please contact your system administrator. Add correct host key in /home/user/.ssh/known_hosts to get rid of this message. Offending ECDSA key in /home/user/.ssh/known_hosts:10 remove with: ssh-keygen -f \"/home/user/.ssh/known_hosts\" -R jumphost ECDSA host key for jumphost has changed and you have requested strict checking. Host key verification failed. ssh_exchange_identification: Connection closed by remote host Besides a MitM attack (Make sure this is not the case from a trusted source. An adversary may be spoofing the host and continuing may give the adversary the information they seek to attack your server), this can also happen after changing a key : edit ~/.ssh/known_hosts file and remove the offending line. In the above example that is line 10. when using ssh on a LAN (where DHCP is used and IP addresses change) when jumping to multiple hosts from a jump host. Bypassing verification (not recommended)  To disable the host key checking and the warnings, set StrictHostKeyChecking no in ~/.ssh/config and UserKnownHostsFile=/dev/null to send the key to a null known_hosts file to avoid future mismatches, and both defeat the intended verification security purpose . For all hosts Host * StrictHostKeyChecking no UserKnownHostsFile=/dev/null For 192.168.0.0/24 Host 192.168.0.* StrictHostKeyChecking no UserKnownHostsFile=/dev/null Even with StrictHostKeyChecking set to no , a user may still be refused to connect when connecting via ProxyJump or ProxyCommand with multiple hosts through a jumphost. ProxyJump issues another ssh process, that does not inherit the command-line arguments that were specified on the command-line of the first ssh command. Host jumphost User jumpuser StrictHostKeyChecking=no UserKnownHostsFile=/dev/null IdentityFile ~/.ssh/id_jumpuser_rsa Get more information on what is happening with the ProxyCommand: ssh -o ProxyCommand=\"ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_jumpuser_rsa -W %h:%p jumpuser@jumphost\" -i ~/.ssh/id_jumpuser_rsa jumpuser@XXX.XXX.XXX.XXX HostKeyAlias  HostKeyAlias specifies an alias that should be used instead of the real host name when looking up or saving the host key in the host key database files. This option is useful for tunnelling SSH connections or for multiple servers running on a single host . It caches the remote public under the alias name. Useful if different openSSH servers are listening on different ports of the same physical server, because normally the port number is not stored when caching public host keys. If the key has a different name (alias) both keys can be cached and valid. Host jumphost HostName XXX.XXX.XXX.XXX User user HostKeyAlias jumphost ProxyCommand ssh anotheruser@backendserver nc %h %p CheckHostIP  And what if there are 2 different host keys for the same IP, or when the IP’s change (DHCP on a LAN for example)? If CheckHostIP is set to yes (default), ssh will check the host IP address in the known_hosts file. This allows ssh to detect if a host key changed due to DNS spoofing. If the option is set to no , the check will not be executed. Host server1 Hostname whatever1.com HostKeyAlias server1 CheckHostIP no Port 22001 User user Host server2 Hostname whatever2.com HostKeyAlias server2 CheckHostIP no Port 22002 User user",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0616552662b98931841c2e9e0354bde9",
    "u": "https://server.tymyrddin.dev/docs/firewall/waf",
    "t": "Web Application Firewall WAF ",
    "c": "Web Application Firewall WAF  A web application firewall (or WAF) filters, monitors, and blocks HTTP traffic to and from a web application. A WAF is differentiated from a regular firewall in that a WAF is able to filter the content of specific web applications while regular firewalls serve as a safety gate between servers. mod_security  The mod_security module is a free Web Application Firewall (WAF) that works with Apache, Nginx and IIS. It supports a flexible rule engine to perform simple and complex operations and comes with a Core Rule Set (CRS) which has rules for SQL injection, cross site scripting, Trojans, bad user agents, session hijacking and a lot of other exploits. For Apache, it is an additional module, easy to install and configure. For Nginx and other web servers there is a stand-alone version.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4aa9cf5e02a623bd00d9a4f4ca313010",
    "u": "https://server.tymyrddin.dev/docs/users/readme",
    "t": "Introduction ",
    "c": "THM Room: Hardening basics Introduction  What?  Securing user accounts through smart configuration of sudo, using complex passwords, disabling root access and locking down home directories. Why?  The principle of least privilege states that each user should only have enough access to perform their daily tasks. How?  Configuring sudo Disabling root access Locking home directories Configuring password complexity Configuring other password requirements Dangers of the lxd group Mastering Linux Security and Hardening, Donald A. Tevault, Second Edition",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "00cf5a9435b916bc7548f880f33afe40",
    "u": "https://server.tymyrddin.dev/docs/pki/pam",
    "t": "Pluggable Authentication Modules (PAM) ",
    "c": "Pluggable Authentication Modules (PAM)  Pluggable Authentication Modules (PAM) is a suite of shared libraries, providing an abstraction layer between the various methods available that provide authentication and the applications that require authentication and would otherwise have to support those methods directly. With PAM, all that is necessary for these components to cooperate is that a specific PAM module be available for each of them. Passwords  Never reuse old passwords ever. . Open /etc/pam.d/common-password : To restrict users from using their old passwords on the same machine, in the auth section, enter the following line: auth sufficient pam_unix.so likeauth nullok If you want to allow a user to reuse his/her password from a number of passwords that were last used, add the following line in the password section: password sufficient pam_unix.so nullok use_authtok md5 shadow remember=3 SSH  The pam_listfile.so module authenticates users based on the contents of a specified file. For example, if username exists in a file /etc/ssh/ssh.allow , ssh will grant login access. Deny access  Append /etc/pam.d/ssh : auth required pam_listfile.so item=user sense=deny file=/etc/ssh/ssh.deny onerr=succeed Add all usernames you wish to deny access for to a /etc/ssh/ssh.deny file. Allow access  Append /etc/pam.d/ssh : auth required pam_listfile.so item=user sense=allow file=/etc/ssh/ssh.allow onerr=fail Add all usernames to allow access for to a /etc/ssh/ssh.deny file. SASL  SASL can use different authentication methods. The default one is PAM (as configured in /etc/conf.d/saslauthd ) Create /etc/pam.d/smtp #%PAM-1.0 auth required pam_unix.so account required pam_unix.so",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b503d7843800d3de1d2610a232d0ade2",
    "u": "https://server.tymyrddin.dev/docs/encryption/gnupg",
    "t": "GNU Privacy Guard ",
    "c": "GNU Privacy Guard  GNU Privacy Guard (GPG) is based on Pretty Good Privacy, the OpenPGP standard. Pretty Good Privacy (PGP) is used widely to encrypt and decrypt email by using asymmetrical and symmetrical systems. When you first send your email, it is encrypted with your own public key, as well as a session key, which is a one-time use random number called a nonce . The session key is then encrypted into the public key and sent with the cipher text. To decrypt your email, the receiving end must use their private key in order to discover the session key. The session key combined with the private key are then used to decrypt the cipher text back into the original document. GPG comes pre-installed on Ubuntu. Its main advantages: Easy encryption for email and files. Mentioned in 2017 by Snowden, referring to 2014, supposedly, then, the NSA could not crack PGP. Asymmetric encryption removes the need to provide a password for decrypting or unlocking files thus improving security overall. Using GPG  To create keys: gpg --gen-key To verify the keys were created: gpg --list-keys Encrypting files with GPG  Symmetric  gpg -c <file> This will prompt the user to enter a passphrase to protect the file. This is not the passphrase you used to create your keys The -d option while targeting our gpg file that was encrypted, will print out the contents of the file after prompting for the secret passphrase. Asymmetric  Asymmetric encryption works by using two keys - one to encrypt, and one to decrypt. The public key is used to encrypt the data while the private key is used to decrypt the data. So using the typical Bob and Alice example, let’s say Bob wants to send Alice an encrypted file. He would first encrypt the file using Alice’s public key and then send the file away. Once Alice receives the file, she can decrypt it with her private key. The big takeaway here is that public keys can be shared, private keys should be kept private and held onto for dear life. NEVER SHARE YOUR PRIVATE KEY! To use the scheme, users need to extract their public keys and send them to each other. Go to the .gnupg folder and extract with: gpg --export -a -o <filename> This will export the user’s public key as ASCII armored output as the filename specified. In order to import the file, (be in .gnupg directory or know the path). gpg --import <filename.txt> To encrypt a document asymmetrically: gpg -e <document> When the other party wishes to decrypt it, he/she will be prompted for his/her passphrase for his/her private key. After entering that he/she is greeted with the text from the file. gpg -d <document>.gpg",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f9dc896153c53990b225d2909e4997d7",
    "u": "https://server.tymyrddin.dev/docs/firewall/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Monitor traffic to and from a host, and only allow legitimate traffic. Why?  Prevent unauthorised remote access, but while a firewall should block backdoor access via a Trojan, there is a chance that this can be bypassed. Block unsuitable or immoral content, but consider the ethics of reading private content to be able to do so. How?  iptables nftables UFW firewalld FireHOL Packet filtering with I/O Control Fail2ban SSHguard WAF Port spoofing Notes  Deny All and then add exceptions to restrict access to everything except the specific services you need to remain open. Avoid using ANY in Allow rules. A rule where the service field is ANY can open up 65,535 attack vectors, I mean, TCP ports. Document all rules and use comments for relevant information (purpose, service, users/servers/devices affected, permanent or temporary, name of person that added it) Review proposed and changed firewall rules before implementation Consider a WAF. Mind that it requires a lot of support work because the defaults are all very strict. Users can not ven make linux documentation pages in a dokuwiki without getting thrown out.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "df519fa87b90827b0edfdb4ac68fde59",
    "u": "https://server.tymyrddin.dev/docs/vnc/tigervnc",
    "t": "TigerVNC ",
    "c": "TigerVNC  TigerVNC is not as lightweight as TightVNC , but it provides extensions for advanced authentication methods and TLS encryption , hence a proper candidate for a fallback when ssh fails. Installation  Install the Xfce desktop environment on the server: # apt-get install xfce4 xfce4-goodies xorg dbus-x11 x11-xserver-utils Install the vnc server: # apt-get install tigervnc-standalone-server tigervnc-common Create a new user to access the server. # useradd vncuser Add the user to the sudo group: # usermod -aG sudo vncuser As the vncuser, run the vncserver command to create the initial configuration and set up the password. Do not use sudo. $ vncserver You will require a password to access your desktops. Password: Verify: Would you like to enter a view-only password (y/n)? n /usr/bin/xauth: file /home/vncuser/.Xauthority does not exist New 'debian9.localdomain:1 (vncuser)' desktop at :1 on machine debian9.localdomain Starting applications specified in /etc/X11/Xvnc-session Log file is /home/vncuser/.vnc/debian9.localdomain:1.log Use xtigervncviewer -SecurityTypes VncAuth -passwd /home/vncuser/.vnc/passwd :1 to connect to the VNC server. Configuration  Default for the service is on port 5901 (display port :1 ). Stop the service: $ vncserver -kill :1 Make a backup of the xstartup file: $ mv ~/.vnc/xstartup ~/.vnc/xstartup.old Create a new xstartup file and open it (empty file): $ vi ~/.vnc/xstartup To have VNC read the server user’s .Xresources file and launch Xfce (in the background), append: #!/bin/sh unset SESSION_MANAGER unset DBUS_SESSION_BUS_ADDRESS exec startxfce4 Write and quit file, and (as root) make it executable. # chmod u+x ~/.vnc/xstartup Restart the service: $ vncserver Firewall  Open ports in the firewall for inbound communication. Control  For starting, stopping, and restarting the service, create a new (empty) systemd unit file /etc/systemd/system/vncserver@.service # vi /etc/systemd/system/vncserver@.service The @ symbol will allow for passing an argument (the VNC display port). Append: [Unit] Description=Remote desktop service (VNC) After=syslog.target network.target [Service] Type=simple User=vncuser PAMName=login PIDFile=/home/%u/.vnc/%H%i.pid ExecStartPre=/bin/sh -c '/usr/bin/vncserver -kill :%i > /dev/null 2>&1 || :' ExecStart=/usr/bin/vncserver :%i -geometry 1280x800 -alwaysshared -fg ExecStop=/usr/bin/vncserver -kill :%i [Install] WantedBy=multi-user.targetReload systemd manager configuration # systemctl daemon-reload Enable the unit file # systemctl enable vncserver@1.service Kill the vncserver $ vncserver -kill :1 And start it as any other systemd service. $ sudo systemctl start vncserver@1 Verify $ sudo systemctl status vncserver@1 Clients  Linux: xvnc4viewer Configuration resources  TigerVNC",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5e2a19851b9ec675864a435d1aec5e88",
    "u": "https://server.tymyrddin.dev/docs/services/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Never have anything that you don’t absolutely need installed on a server. Especially not any unnecessary network services. Why?  Do not give adversaries extra ways to get into the systems. How?  Auditing system services with systemctl Auditing network services with netstat Auditing network services with nmap Mastering Linux Security and Hardening, Donald A. Tevault, Second Edition",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "230b5e9e61df79f9727abf25a72e0224",
    "u": "https://server.tymyrddin.dev/docs/vnc/secure-sessions",
    "t": "Securing sessions ",
    "c": "Securing sessions  TLS  Start the VNC server with: # vncserver -SecurityTypes=VeNCrypt,TLSVnc On the client, connect with vncviewer: $ vncviewer -SecurityTypes=VeNCrypt,TLSVnc XXX.XXX.XXX.XXX:1 With TLSVnc, there is standard VNC authentication and traffic is encrypted with GNUTLS but the identity of the server is not verified. TigerVNC also supports other security schemes such as X509Vnc. X509  X509 combines standard VNC authentication with GNUTLS encryption and server identification, and is the recommended mode for a secure connection. Do not set SecurityTypes on the server to a non-encrypted option as high-priority (such as None, VncAuth, Plain, TLSNone, TLSPlain, X509None, X509Plain) because then it is not possible to use encryption. When running vncviewer, it is safer to explicitly set SecurityTypes and not accept any unencrypted traffic. Any other mode is to be used only when accessing a vncserver via SSH tunnels. SSH  On the server install ssh. On the client: $ ssh -L 5901:127.0.0.1:5901 -C -N -l vncuser XXX.XXX.XXX.XXX The -L switch specifies binding port 5901 of the remote connection to port 5901 on the local machine (client), -C enables compression, -N specifies there will be no remote command, and -l the remote login name.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d85a985b8eb633d043dc2b4780415f18",
    "u": "https://server.tymyrddin.dev/docs/users/homes",
    "t": "Locking home directories ",
    "c": "Locking home directories  This is another area where different Linux distribution families are different from each other. Each distribution family comes with different default security settings. A security administrator who oversees a mixed environment of different Linux distributions will need to take this into account. The UMASK line is in the login.defs file for all Linux distributions, but Red Hat-type distributions are the only ones that have UMASK set to a restrictive value of 077 by default, which removes all permissions from the group and others. Other distros set it to 022 by default, which creates home directories with a permissions value of 755 . This allows everybody to enter everybody else’s home directories and access each others’ files. Red Hat and CentOS  Red Hat Enterprise Linux and all of its descendants have better out-of-the-box security than any other Linux distribution. One thing that’s already been done is locking down users’ home directories. By default, the useradd utility on Red Hat-type systems creates user home directories with a permissions setting of 700 . Only the user who owns the home directory can access it. The UMASK is set in /etc/login.defs . CREATE_HOME yes UMASK 077 Debian and Ubuntu  Debian and its offspring, such as Ubuntu, have two user creation utilities: useradd and adduser . useradd  Using useradd : sudo useradd -m -d /home/username -s /bin/bash username Otherwise, username would have no home directory and would be assigned the wrong default shell. Home directories are wide open, with execute and read privileges for everybody. cd /home sudo chmod 700 * To change the default permissions setting for home directories, open /etc/login.defs and change UMASK 022 to UMASK 077 . Now, new users’ home directories will get locked down on creation, just as they do with Red Hat. adduser  The adduser utility is an interactive way to create user accounts and passwords with a single command, which is unique to the Debian family of Linux distributions. Most of the default settings that are missing from the Debian implementation of useradd are already set for adduser. The only thing wrong with the default settings is that it creates user home directories with the wide-open 755 permissions value. 777 is the numerical equivalent of rwxrwxrwx in Linux, subtracting that from the UMASK of 022 , you get the resulting permissions that will be set on a user’s home directory and files. Change the UMASK to 077 in /etc/login.defs .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f11d2a745a20faf20877cb4d2025fb31",
    "u": "https://server.tymyrddin.dev/docs/access/acl",
    "t": "Access control lists (ACL) and shared directory management (SDM) ",
    "c": "Access control lists (ACL) and shared directory management (SDM)  With access control list (ACL), we can allow only a certain person to access a file, or we can allow multiple people to access a file with different permissions for each person. To view an ACL for a file or directory: getfacl <file> Creating an ACL  For setting an ACL, remove all permissions from everyone except for the user of the file. That’s because the default permissions settings allow members of the group to have read/write access, and others to have read access. chmod 600 <file> To allow a user or a group to have any combination of read, write, or execute privileges: setfacl -m u:<username>:rw <file> -m modify or create an ACL. u:username:r : user’s name, followed by another colon, and the list of permissions to grant this user. In this case, read and write access. Set an ACL for group access by replacing u: with g: . Creating an inherited ACL for a directory  To have all files that get created in a shared directory use the same ACL: setfacl -m d:u:<username>:r <directory> Using an ACL mask  Remove an ACL from a file or directory with the -x option: setfacl -x u:<username> <file> The -x option removes the entire ACL. To remove permissions with a mask, in this case read permission: setfacl -m m::r <file> m::r sets a read-only mask on the ACL. Other permissions stay intact. Preventing the loss of ACLs during a backup  When using tar to create a backup and then doing a restore, the ACL’s are gone. Use the --acls option: tar cJvf directory_backup.tar.xz dir/ --acls User groups  To create a group: sudo groupadd <groupname> Adding members when creating user accounts, on CentOS: sudo useradd -G <groupname> <username> on Debian/Ubuntu: sudo useradd -m -d /home/<username> -s /bin/bash -G <groupname> <username> And assign a password. To add an existing user to a group (CentOS and Debian families): sudo usermod -a -G <groupname> <username> Adding users to a group by editing the /etc/group file: ... <groupname>>:x:1005:<list of comma separated usernames> ... This method is extremely handy for when you need to add lots of members to a group at the same time. Creating a shared directory  sudo mkdir <directoryname> The new directory belongs to the root user and has a permissions setting of 755 , which permits read and execute access to everybody and write access only to the root user. To allow only members of a specific group to access the directory, change ownership and group association, and then set the permissions: sudo chown nobody:<groupname> <directoryname> sudo chmod 770 <directoryname> Setting the SGID bit and the sticky bit on the shared directory (it is safe and useful to set SGID on a shared directory): sudo chmod 2770 <directoryname> But now users in the group can delete each other’s files. When the sticky bit is set on files, Linux just ignores it, whereas for directories it has the effect of preventing users from deleting or even renaming the files it contains unless the user owns the directory, the file, or is root. sudo chmod o+t <directoryname> To set the sticky bit in octal form, prepend the number 1 to the current (or desired) basic permissions. Since the SGID bit has a value of 2000, and the sticky bit has a value of 1000, we can just add the two together to get a value of 3000 to add to the permissions: sudo chmod 3770 <directoryname> Having the sticky bit set will prevent group members from deleting anybody else’s files.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1c5a85eade4241a538fa53c4d231fe37",
    "u": "https://server.tymyrddin.dev/docs/ids/samhain",
    "t": "Samhain ",
    "c": "Samhain  The Samhain host-based intrusion detection system (HIDS) provides file integrity checking, log file monitoring/analysis, rootkit detection, port monitoring, detection of rogue SUID executables, and hidden processes. Like having tripwire when it was still working plus rkhunter rolled into one. Plus, it can be expanded to include more (remote) clients if set up in client-server mode and getting Beltane II as well (not GPL licensed and can be used on a limited amount of (10) machines for a small donation). Something that can maybe be used for guarding client machines remotely. Yum. Problems  A steeper learning curve than for other programs. No binaries available, setting it up is not easy for non-techies Download  Download samhain-current.tar.gz from Samhain Labs . Verification  cd Downloads/ $ gunzip samhain-current.tar.gz $ tar -xf samhain-current.tar $ gpg --keyserver pgp.mit.edu --recv-key 0F571F6C gpg: key 1AAD26C80F571F6C: 3 duplicate signatures removed gpg: key 1AAD26C80F571F6C: 96 signatures not checked due to missing keys gpg: key 1AAD26C80F571F6C: \"Rainer Wichmann <rwichmann@la-samhna.de>\" not changed gpg: key 3A2AAE330F571F6C: 21 signatures not checked due to missing keys gpg: key 3A2AAE330F571F6C: \"Rainer Wichmann <rwichmann@la-samhna.de>\" not changed gpg: Total number processed: 2 gpg: unchanged: 2 $ gpg --fingerprint 0F571F6C pub dsa1024 1999-10-31 [SCA] EF6C EF54 701A 0AFD B86A F4C3 1AAD 26C8 0F57 1F6C uid [ unknown] Rainer Wichmann <rwichmann@la-samhna.de> uid [ unknown] Rainer Wichmann <rwichmann@hs.uni-hamburg.de> sub elg1024 1999-10-31 [E] pub rsa1024 2014-07-21 [SCEA] [revoked: 2016-08-16] 5B17 5A1C 8C1B 7BC3 CB12 0FAA 3A2A AE33 0F57 1F6C uid [ revoked] Rainer Wichmann <rwichmann@la-samhna.de> [nina@archlinux Downloads]$ gpg --verify samhain-4.2.4.tar.gz.asc samhain-4.2.4.tar.gz gpg: Signature made Thu 21 Dec 2017 09:05:24 PM CET gpg: using DSA key 1AAD26C80F571F6C gpg: Good signature from \"Rainer Wichmann <rwichmann@la-samhna.de>\" [unknown] gpg: aka \"Rainer Wichmann <rwichmann@hs.uni-hamburg.de>\" [unknown] gpg: WARNING: This key is not certified with a trusted signature! gpg: There is no indication that the signature belongs to the owner. Primary key fingerprint: EF6C EF54 701A 0AFD B86A F4C3 1AAD 26C8 0F57 1F6C And that fits with the key given on the site. Simple configuration stand-alone  Configure stand-alone version : $ ./configure checking for a BSD-compatible install... /usr/bin/install -c checking whether make sets $(MAKE)... yes checking build system type... x86_64-unknown-linux-gnu checking host system type... x86_64-unknown-linux-gnu checking for gcc... gcc . . . [snip] . . . config.status: creating deploy.sh config.status: creating config.h config.status: executing default commands samhain has been configured as follows: System binaries: /usr/local/sbin Configuration file: /etc/samhainrc Manual pages: /usr/local/man Data directory: /var/lib/samhain Database file: /var/lib/samhain/samhain_file PID file: /run/samhain.pid Log file: /var/log/samhain_log Base key: 1617215581,281009996 Selected rc file: samhainrc.linux $ Configuration for watching logins, mounts and rootkits  Watching over logins: $ ./configure --enable-login-watch Over mountings: ./configure --enable-mount-check Samhain can check for kernel rootkits on FreeBSD and Linux with: $ ./configure --with-kcheck=systemmap where systemmap is the System.map file for a particular system. Configuration for stealth  If an intruder cannot discover that samhain is running, he cannot compromise it. You can, for example, use: $ ./configure --enable-install-name=somename where somename is an innocuous-sounding executable name. To make it less likely that the program isn’t accidentally discovered, samhain can be set to never respond to the command line. Or, it can be set to respond to the command line only after a certain password is given: $./configure --enable-nocl=somepass If somepass is set to an empty string it disables command-line interaction completely. Otherwise, invoke samhain with somepass as the first argument followed by the other arguments. There are many other interesting stealth options available, all documented along with the rest of the compilation switches in Appendix A of the documentation . Build  Next step is to Build : $ make gcc -I. -o depend-gen ./src/depend-gen.c update depend.dep ... gcc -I. -o mkhdr ./src/mkhdr.c gcc -I. -o encode ./src/encode.c encode 0 config.h ./encode 0 ./src/sh_files.c --> x_sh_files.c gcc -DHAVE_CONFIG_H -I. -I./include -O2 -D_FORTIFY_SOURCE=2 -fstack-protector-all -pthread -DUSE_MALLOC_LOCK=1 -fPIE -Wall -W -fno-strength-reduce -fno-omit-frame-pointer -Wno-empty-body -Wno-invalid-source-encoding -DSH_STANDALONE -o sh_files.o -c x_sh_files.c . . . [snip] . . . sh_string.o sh_inotify.o dnmalloc.o sh_audit.o sh_registry.o sh_ipvx.o sh_restrict.o sh_filetype.o sh_sub.o sh_fInotify.o sh_checksum.o sh_guid.o sh_sem.o sh_dbIO.o sh_dbCheck.o sh_dbCreate.o -lz -lresolv -lnsl -lnsl -lattr -lacl gcc -I. -o sstrip ./src/sstrip.c $ Installation  Install : $ make install /usr/bin/install -c -m 700 samhain /usr/local/sbin/samhain /usr/bin/install: cannot create regular file '/usr/local/sbin/samhain': Permission denied chmod: cannot access '/usr/local/sbin/samhain': No such file or directory make: *** [Makefile:518: install-program] Error 1 Ah yes, installing an application and using ./configure without the --prefix= option, the make install process will install the compiled files in to the predefined paths in the system’s file system, and that means special permissions for writing the files is required: $ sudo make install [sudo] password for nina: /usr/bin/install -c -m 700 samhain /usr/local/sbin/samhain /bin/sh ./mkinstalldirs /usr/local/man/man8 mkdir /usr/local/man/man8 /bin/sh ./mkinstalldirs /usr/local/man/man5 mkdir /usr/local/man/man5 /usr/bin/install -c -m 644 ./man/samhain.8 /usr/local/man/man8/samhain.8 /usr/bin/install -c -m 644 ./man/samhainrc.5 /usr/local/man/man5/samhainrc.5 gcc -DHAVE_CONFIG_H -I. -I./include -O2 -D_FORTIFY_SOURCE=2 -fstack-protector-all -pthread -DUSE_MALLOC_LOCK=1 -fPIE -Wall -W -fno-strength-reduce -fno-omit-frame-pointer -Wno-empty-body -Wno-invalid-source-encoding -DSH_STANDALONE -DSH_IDENT=\\\"daemon\\\" -DTRUST_MAIN -DSL_ALWAYS_TRUSTED=0 -o trustfile ./src/trustfile.c mkdir /var/lib/samhain ./samhain-install.sh --destdir= --express --verbose install-data cp samhainrc.linux samhainrc cp samhainrc samhainrc.pre mv -f samhainrc.pre samhainrc.install ./samhain-install.sh --install-sh -m 600 samhainrc.install /etc/samhainrc checking whether paths are trustworthy configuration file /etc/samhainrc ... OK state directory /run ... OK state directory /var/log ... OK data directory /var/lib/samhain ... OK You can use 'samhain-install.sh uninstall' for uninstalling i.e. you might consider saving that script for future use Use 'make install-boot' if you want samhain to start on system boot Customisation  Customize : $ sudo vi /etc/samhainrc I will run with defaults for now, and make changes later. Initialisation  Initialize the baseline database ( do NOT do twice ): $ samhain -t init [snip] CRIT : [2018-03-04T22:01:33+0100] interface=<lstat>, msg=<No such file or directory>, userid=<0>, path=</var/lib/urandom/random-seed> CRIT : [2018-03-04T22:01:33+0100] msg=<POLICY MISSING>, path=</var/lib/urandom/random-seed> MARK : [2018-03-04T22:01:33+0100] msg=<File check completed.>, time=<593>, kBps=<9067.752000> NOTICE : [2018-03-04T22:01:33+0100] msg=<Finished writing baseline database.> ALERT : [2018-03-04T22:01:33+0100] msg=<EXIT>, program=<Samhain>, status=<exit_success> Aaaaand a sheitload of errors and garble passed by on my screen for about ten minutes, including all kinds of critical issues on missing files and policies. This was on a worst-case linux, an archlinux halfway in the making (by me), and to be expected. I be reading them logs then. :D Usage  Run samhain : $ samhain -t check...",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "401b8190c4e25ae1a89f62efdd801abc",
    "u": "https://server.tymyrddin.dev/docs/users/passwords",
    "t": "Configuring password complexity ",
    "c": "Configuring password complexity  NIST has come to agree with Bill Burr’s changed mind and have now changed their password implementation criteria to match Mr. Burr’s new recommendations: Passphrases do not meet any complexity criteria, and use dictionary words. How is that secure? It is a phrase with distinct words separated by blank spaces. That makes it secure and very difficult to brute-force. Passphrases are more difficult to crack than traditional passwords, and they are easier for users to remember. And, there is the reality that many organizations are still using complex passwords that regularly expire, and you’ll have to abide by their rules if you can’t convince them otherwise. And besides, if you are using traditional passwords, you do want them to be strong enough to resist any sort of password attack. Pwquality  pwquality is a PAM module that allows configuring password complexity requirements for users. It is fairly easy to install on Ubuntu. sudo apt-get install libpam-pwquality Once installed, it automatically adds an entry into the /etc/pam.d/common-password file. The pam.d directory is just another location where PAM adds files for basic services like ssh , basic login , etc. The pwquality.conf file found in /etc/security , has many options the administrator can set for password quality. The lines just need to be uncommented and modified. Resources  You Might Not Need Complex, Alphanumeric Passwords After All The New NIST Guidelines: We Had it All Wrong Before",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "98afa3056fd07053498c95b6bf9b0c6c",
    "u": "https://server.tymyrddin.dev/docs/pki/lets-encrypt",
    "t": "Let’s Encrypt ",
    "c": "Let’s Encrypt  Web PKI being yet another golden goose in the context of the business model that underpins the digital world. , we also have an alternative. Let’s Encrypt is a free, automated, and open Certificate Authority. The below is for debian (stretch). Installation certbot  Certbot is in active development, so the packages provided by Debian with stable releases tend to be outdated. Get a more up-to-date package by enabling the backports repository. Create the /etc/apt/sources.list.d/letsencrypt.list file and append: # echo 'deb http://deb.debian.org/debian <distribution>-backports main contrib non-free' >> /etc/apt/sources.list.d/letsencrypt.list # echo 'deb-src http://deb.debian.org/debian <distribution>-backports main contrib non-free' >> /etc/apt/sources.list.d/letsencrypt.list Update the package list to pick up the new repository’s package information: # apt update Install on Nginx with: # apt install python-certbot-nginx -t <distribution>-backports Get SSL certificate  Get a certificate and have Certbot edit your Nginx configuration automatically to serve it, turning on HTTPS access in a single step. # certbot --nginx Verification  Check the /etc/letsencrypt/live/<your-domain>/ directory for the presence of cert.pem , privkey.pem and chain.pem . Certbot looks for a server_name directive that matches your domain. Open the server block file for your domain: # vi /etc/nginx/sites-available/yourdomain.tld If necessary, change the server_name directive to: server_name yourdomain.tld www.yourdomain.tld; Verify the syntax of your configuration file: # nginx -t Reload Nginx to load the new configuration: # systemctl reload nginx Firewall  Punch a hole in the firewall to allow HTTPS traffic (allow the Nginx Full profile) and delete the redundant Nginx HTTP profile allowance. Auto renewal  Certbot comes with a renew script in /etc/cron.d that will renew your certificates automatically before they expire (they last for 90 days). Test automatic renewal: # certbot renew --dry-run Configuration resources  Certbot instructions , EFF",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a7c610ca928d678ffe31fca44e269e18",
    "u": "https://server.tymyrddin.dev/docs/logfiles/log-commands",
    "t": "log commands ",
    "c": "log commands  Less, more and zmore  # less /var/log/syslog less opens the syslog log file at the top. Use the arrow keys to scroll down one line at a time, the space bar to scroll down one page at a time, or the mouse wheel to scroll through the file. Use the [Shift]+[g] combination to immediately go to the end of the log file. Grep and zgrep  # grep \"user@whateverdomain.tld\" /var/log/mail.log > /tmp/result.txt zgrep is useful for compressed files: # zgrep -i Error *.gz Tail  tail prints the last part of files to output, for example the last 10 lines with the -n option. Adding the -f option will continue watching the log file and print out the next line written to the file. As soon as a new line is written to syslog, it removes the oldest. # tail -f -n 10 /var/log/syslog Escape it with the [Ctrl]+[x] key combination. Last and lastb  The last command reads from the system file called /var/log/wtmp or the file designated by the -f option. Names of users and tty’s can be given, in which case last will show only those entries matching the arguments. Names of tty’s can be abbreviated, thus last 0 is the same as last tty0 . When last catches a process signal like SIGINT (generated by the interrupt key, usually control-C) or a SIGQUIT (generated by the quit key, usually control-\\), last will show how far it has searched through the file; in the case of the SIGINT signal, last will then terminate. For the login history of sysadmin: # last | grep sysadmin To find out when the system was last rebooted: # last reboot lastb is the same as last , except that by default it shows a log of the file /var/log/btmp , which contains all the bad login attempts. dmesg  dmesg displays by default all messages from the kernel ring buffer. Use the scroll wheel to browse through the buffer or pipe the output of dmesg to the less command. For example, to print the log entries for the user facility: # dmesg --facility=user | less",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0ce29b9aeed5f95a4e86803e38bb2bcd",
    "u": "https://server.tymyrddin.dev/docs/logfiles/intruder-path",
    "t": "Path of a common intruder ",
    "c": "Path of a common intruder  Scenario  Assume an intruder gains access to the system through a vulnerability. Most likely, he/she wishes to gain elevated privileges in order to be able to take action, like install software, get user data that can possibly give access to other servers or systems, destroy or alter audit trails to hide tracks of having been there, etc. This can be done by installing malware (a rootkit) or manually. Assume he/she is successful. Note that there are more than zero users with uid=0 (superuser privileges)| Less likely but possible, the intruder creates a user without password. Note a new user has been created He or she will try to capture information of other computers on the same network (in particular users and passwords). This can be done with a sniffer. Note that a network interface is put into promiscuous mode. Binaries of the sniffer, configuration files, captured information are usually hidden in the /dev directory. Note regular files appearing in /dev A somewhat more knowledgeable intruder will try to modify certain binaries of the system to conceal the indicators of their presence ( su to not let on to elevated privileges, ifconfig to hide that the network interface is in promiscuous mode, ls to hide where their files are, ps to conceal the execution of the sniffer, find, netstat, top, etc). FIA’s can detect these alterations Important events for reconstructing an attack  Logging off and logging in (location) User and group management (changes in permissions and ability to gain access) Security policy changes Shutdowns and restarts System changes: Changes to the operating system (hardware and/or software events, configuration changes) Changes to hardware configuration Device driver installation Starting and stopping of services Applications: Many utilities send messages to application related logs Exceptions to this are web servers and FTP servers (have their own logging mechanisms, but can be included in syslog ) Accounts and group record changes: Creation, deletion and modification of users Modifications to groups",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "45d514489b18b4f5874d0f910dab7101",
    "u": "https://server.tymyrddin.dev/docs/vnc/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Virtual network computing, or VNC, is a graphical desktop sharing system that uses the Remote Frame Buffer protocol (RFB) to allow for controlling a server remotely. A VNC server transfers keyboard and mouse events, and displays the remote host’s screen via a network connection (relaying the graphical screen updates back). Servers are best set up as minimal environment, and installing GUI might lead to high hardware utilization. Virtual Network Computing (VNC) is a graphical desktop sharing system to remotely control another computer. Why?  In our context, only to be used as a fallback when ssh fails. How?  TightVNC TigerVNC Securing sessions Notes  VNC is not an encrypted protocol and can be subject to packet sniffing. Sessions can be secured: TightVNC is lightweight and connections will be smooth and stable even on slower internet connections. SSH tunnelling can be used. TigerVNC supports security schemes such as X509 that combines standard VNC authentication with GNUTLS encryption and server identification. <=",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ffcf9816017dbdcdc6bbfbc41f5c218d",
    "u": "https://server.tymyrddin.dev/docs/firewall/nftables",
    "t": "NFTables ",
    "c": "NFTables  Available upstream since Linux kernel 3.13. Basic idea  Got an idea! Working on it … Warning: untested! flush ruleset table inet filter { set inet filter tcp_port_out { type inet_service; elements = { 53, # DNS 11371, # OpenPGP HTTP Keyserver 2200, # SSH 80, # HTTP 443, # HTTPS } } set inet filter tcp_port_in { type inet_service; elements = { 2200, # SSH } } set inet filter udp_port_out { type inet_service; elements = { 53, # DNS 123, # NTP } } set inet filter udp_port_in { type inet_service; elements = { } } set inet filter user_out { type uid; elements = { } } set inet filter user_in { type uid; elements = { } } set tcp_scan_ports { type inet_service; elements = { 22, # SSH 23, # Telnet 1433, # MS SQL Login 8080, # HTTP Alternate 50661, # Apple Xsan } } set udp_scan_ports { type inet_service; elements = { 53, # DNS 5060, # SIP 53413, # Netis backdoor } } chain base_checks { # allow established/related connections ct state {established, related} accept # early drop of invalid connections ct state invalid log prefix \"Invalid \" drop } chain input { type filter hook input priority 0; # Accept on localhost iifname lo accept jump base_checks # Accept neighbour discovery ip6 nexthdr icmpv6 icmpv6 type { nd-neighbor-solicit, nd-router-advert, \\ nd-neighbor-advert } accept # Accept ping ip protocol icmp type { echo-request } accept # Allow IGMP ip protocol igmp accept tcp dport @tcp_port_in ct state new accept udp dport @udp_port_in ct state new accept meta skuid @user_in ct state new accept tcp dport @tcp_scan_ports drop udp dport @udp_scan_ports drop # Count and drop any other traffic counter log prefix \"Drop_in \" drop } # Not a gateway. We do not forward. chain forward { type filter hook forward priority 0; policy drop; jump base_checks } chain output { type filter hook output priority 0; # Accept from localhost oifname lo accept jump base_checks # Accept neighbour discovery ip6 nexthdr icmpv6 icmpv6 type { nd-neighbor-solicit, nd-router-advert, \\ nd-neighbor-advert } accept # Accept ping ip protocol icmp type { echo-request } accept tcp dport @tcp_port_out ct state new accept udp dport @udp_port_out ct state new accept meta skuid @user_out ct state new accept # Count and drop any other traffic counter log prefix \"Drop_out \" drop } kernel  [*] Networking support ---> Networking options ---> [*] Network packet filtering framework (Netfilter) ---> Core Netfilter Configuration ---> <M> Netfilter nf_tables support <M> Netfilter nf_tables conntrack module <M> Netfilter nf_tables counter module <M> Netfilter nf_tables log module <M> Netfilter nf_tables limit module <M> Netfilter nf_tables masquerade support <M> Netfilter nf_tables nat module IP: Netfilter Configuration ---> <M> IPv4 nf_tables support <M> IPv4 nf_tables route chain support <M> IPv4 packet rejection <M> IPv4 NAT <M> IPv4 nf_tables nat chain support <M> IPv4 masquerade support <M> IPv4 masquerading support for nf_tables Configuration files  Create a main table, for example A file /etc/nftables/main_config.conf where elements can be added A file /etc/nftables/main.conf with a skeleton inet table Set up the activation scripts /etc/nftables.conf as startup script (flushes rule set) /etc/nftables/reload_main.conf as reload script (deletes table) SSHguard  To integrate with SSHguard , edit /etc/sshguard.conf and change the value of BACKEND : BACKEND=\"/usr/lib/sshguard/sshg-fw-nft-sets\" When starting or enabling the sshguard.service , two new tables named sshguard in the ip and ip6 address families are added which filter incoming traffic through sshguard’s list of IP addresses. The chains in the sshguard table have a priority of -10 and will be processed before other rules of lower priority.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "790f5a899ae9c454c96e353c14aa69a8",
    "u": "https://server.tymyrddin.dev/docs/encryption/openvpn",
    "t": "OpenVPN ",
    "c": "OpenVPN  Installation  # apt-get install openvpn Server configuration  The sample server configuration file that comes with OpenVPN is a good starting point. It will create a VPN using a virtual tun network interface (for routing), will listen for client connections on udp port 1194 , and distribute virtual addresses to connecting clients from the 10.8.0.0/24 subnet. # cd /etc/openvpn/server # cp /usr/share/openvpn/examples/server.conf . # vi /etc/openvpn/server/server.conf The server will start as root, but for security, can be set to drop to lower privileges after startup, by removing the semicolons (uncommenting) the user nobody and group nogroup directives. Also uncomment out the client-to-client directive if you want clients to not only be able to reach the server over VPN (the default), but also each other. Set the ca , cert , key , and dh parameters in the config file to point to the files generated in the PKI setup . If you have set the DH key size to 2048 instead of the default 1024, change dh dh1024.pem accordingly. For assigning the different clients static IP addresses from the OpenVPN server, uncomment client-config-dir ccd Enabling compression is not recommended; it opens the server up to the VORACLE attack vector. It is recommended to use OpenVPN over UDP, because TCP over TCP is a bad idea. Write and quit. Assign static IP addresses  Create the client configuration directory: # mkdir /etc/openvpn/ccd For each client, create a configuration file assigning it to a static IP address. For example: In /etc/openvpn/ccd/<clientname1> ifconfig-push 10.8.0.5 10.8.0.6 The first client will use 10.8.0.6 as its IP address, and 10.8.0.5 is the VPN tunnel endpoint. The second address is only used to route traffic through the tunnel. This is because each client uses a CIDR/30 network. Per client 4 IP addresses are used. In /etc/openvpn/ccd/<clientname2> ifconfig-push 10.8.0.9 10.8.0.10 And in /etc/openvpn/ccd/<clientname3> ifconfig-push 10.8.0.13 10.8.0.14 To use a virtual IP address range other than 10.8.0.0/24 , modify the server directive. Mind that the virtual IP address range must be a private range currently unused on the network. Firewall server  Limit the incoming OpenVPN connections to the IP addresses of the servers you want the backend server to connect with in the firewall. Start the OpenVPN server  # systemctl openvpn start Client configurations  On a client: Copy the example client configuration file # cd /etc/openvpn/client/ # cp /usr/share/openvpn/examples/client.conf . # vi /etc/openvpn/client.conf Make changes: Add the address of the OpenVPN server to the configuration file: Look for remote my-server-1 1194 and change my-server-1 into the IP address of the server. Look for cert client.crt and key client.key and change them to the names of the keys that were copied over. Firewall client  Punch a hole for the server address in your firewall. Fire it up!  # systemctl openvpn start",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2485ece87355ee5023d46b3c03bec24e",
    "u": "https://server.tymyrddin.dev/docs/vnc/tightvnc",
    "t": "TightVNC ",
    "c": "TightVNC  TightVNC is a fast and lightweight remote control package. This choice will ensure that our VNC connection will be smooth and stable even on slower internet connections. It encrypts VNC passwords sent over the net (DES-encrypted challenge-response scheme and the password is limited by 8 characters), but the rest of the traffic is sent in the clear and are a security risk. Recommended is using TightVNC with ssh (and that defeats our purpose of only using it when ssh fails) Installation  Install the Xfce desktop environment on the server: # apt-get install xfce4 xfce4-goodies Install the vnc server: # apt-get install tightvncserver Create a new user to access the server. # useradd vncuser Add the user to the sudo group: # usermod -aG sudo vncuser As the vncuser, set up a secure password and create the initial configuration files: vncuser@localhost $ vncserver You will require a password to access your desktops. Password: Verify: Creating default startup script /home/vncuser/.vnc/xstartup Starting applications specified in /home/vncuser/.vnc/xstartup Log file is /home/vncuser/.vnc/localhost.localdomain:1.log Enter and verify a password to access the server remotely. It must be between six and eight characters long. More than 8 characters will be truncated automatically. The process then creates the necessary default configuration files and connection information for the server. Configuration  Default for the service is on port 5901 (display port :1 ). Stop the service: $ vncserver -kill :1 Make a backup of the xstartup file: $ mv ~/.vnc/xstartup ~/.vnc/xstartup.old Create a new xstartup file and open it (empty file): $ vi ~/.vnc/xstartup To have VNC read the server user’s .Xresources file and launch Xfce (in the background), append: #!/bin/bash xrdb $HOME/.Xresources startxfce4 & Write and quit file, and (as root) make it executable. # chmod +x ~/.vnc/xstartup Restart VNC: $ vncserver Firewall  Open ports in the firewall for inbound communication. Control  For starting, stopping, and restarting the service, create a new (empty) systemd unit file /etc/systemd/system/vncserver@.service # vi /etc/systemd/system/vncserver@.service The @ symbol will allow for passing an argument (the VNC display port). Append: [Unit] Description=Start TightVNC server at startup After=syslog.target network.target [Service] Type=forking User=vncuser Group=vncuser WorkingDirectory=/home/vncuser PIDFile=/home/vncuser/.vnc/%H:%i.pid ExecStartPre=-/usr/bin/vncserver -kill :%i > /dev/null 2>&1 ExecStart=/usr/bin/vncserver -depth 24 -geometry 1280x800 :%i ExecStop=/usr/bin/vncserver -kill :%i [Install] WantedBy=multi-user.target Reload systemd manager configuration # systemctl daemon-reload Enable the unit file # systemctl enable vncserver@1.service Kill the vncserver $ vncserver -kill :1 And start it as any other systemd service. $ sudo systemctl start vncserver@1 Verify $ sudo systemctl status vncserver@1 Clients  Windows: TightVNC, RealVNC, or UltraVNC. MacOS: Apple Remote or RealVNC. Linux: vinagre, krdc, RealVNC, or TightVNC. Configuration resources  TightVNC",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e879fe1c9d9bc31e710fb0acbd9e7f41",
    "u": "https://server.tymyrddin.dev/docs/incidents/prevention",
    "t": "Preventing incidents ",
    "c": "Preventing incidents  Use the principle of least privilege . The idea is to give users as few permissions as possible. While the sudo command is useful, it is often misused. By default, anyone that is a member of the sudo group can use sudo to do whatever they want. Restrict sudo access to particular commands. In regard to network shares, it’s always best to default to read-only whenever possible. This is not just because of the chance of a user accidentally deleting data; it’s always possible for applications to malfunction and delete data as well. With a read-only share, the modification or deletion of files is not possible. Additional read-write shares can be created for those who need them, but if possible, always default to read-only. Physical security is every bit as important as securing operating systems, applications, and data. Ensure security updates are installed in a timely fashion, utilizing security applications such as failure monitors and firewalls, and ensuring secure settings for OpenSSH.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c28590bcea6bb8bd483e139bb30ad1e3",
    "u": "https://server.tymyrddin.dev/docs/incidents/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  A good incident response plan will include a list of guidelines to be followed with regard to implementing new servers and managing current ones (isolating compromised servers, strategically patching and recovering servers). Create guidelines for things such as user management, server management, application installations, security, and procedure documents. Why?  We always do our best to design the most stable and fault-tolerant server implementations we possibly can. We can not prevent every type of incident that could possibly happen but having a good plan in place and following that plan will lessen the likelihood an incident becomes a disaster. How?  Preventing incidents Using git for configuration management Implementing a backup plan Using bootable recovery media Notes  Do not store backups or old versions of software on the production system. Automate making backups. Mastering Ubuntu Server, Jay LaCroix, Fourth Edition",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "95d3a27393444a24400ba6800acb21ef",
    "u": "https://server.tymyrddin.dev/docs/logfiles/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Server logs contain information that cannot be found anywhere else. For example, server errors and user access records. Why?  Having the ability to review these logs gives the ability to determine what caused an issue on the server. How?  rsyslogd Log commands Path of a common intruder Logrotate Centralised logging Notes  Make sure logs are working properly. syslog on Debian contains everything except authentication-related messages. Authentication related events can be found in auth.log . Use it to investigate failed login attempts, brute-force attacks and other vulnerabilities related to user authorisation mechanisms. RedHat and CentOS based systems use the secure file for tracking all security related messages including authentication failures, sudo logins, ssh logins and other errors logged by the system security services daemon and is very useful for detecting hacking attempts. Additional logs that may give clues are faillog containing information on failed login attempts and can be used to detect attempted security breaches involving username/password hacking and brute-force attacks. Normally I am all for distributed and decentralised systems, but for an infrastructure with multiple servers, centralised logging saves a lot of time and energy. When setting up a machine to act as log server, harden it and only use it to collect logs from other machines on your network. It should not be running anything else. Log what is needed to track the path of a common intruder . If and when it is all running well, consider setting up for intrusion detection and log correlation.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d7db2b4d3470b6d526b682e7c02c6e78",
    "u": "https://server.tymyrddin.dev/docs/pki/tls-ssl",
    "t": "TLS/SSL ",
    "c": "TLS/SSL  The CA is always the first subsystem to be configured; every other subsystem depends on the CA for its configuration. The CA, along with setting up the CA hierarchy for the PKI, issues certificates which every subsystem uses to function and sets up a security domain which establishes trusted relationships between subsystems. Installation  On all systems and subsystems install openssl. # apt-get install openssl Use the script that comes with the openssl package: # /usr/lib/ssl/misc/CA.pl -newca The script will take you through all the steps of creating your CA. The fields do not matter much. It is rather self-explanatory. Configuration  The script has created a new directory demoCA with the CA’s private key and public key/certificate in it. Demo useful. # vi /etc/ssl/openssl.cnf Change: dir = /etc/ssl/ca ... default_days = 730 default_bits = 2048 Edit the script too: # vi /usr/lib/ssl/misc/CA.pl Change: $DAYS=\"-days 730\"; # 2 year $CADAYS=\"-days 3650\"; # 10 years ... default_bits = 2048 And change (further down): system (\"$REQ -new -keyout \" . to system (\"$REQ -newkey rsa:2048 -keyout \" . Generating keys  For creating digital certificates for servers on your LAN, for VPN clients or for whatever service you need to use with SSL, two steps are needed: To create a private key and a certificate request (Many questions. Not important, except that the CN of the certificate must be the domain name of the site you wish to secure): # /usr/lib/ssl/misc/CA.pl -newreq Sign the request and generate a newcert.pem with the signed certificate. You will have to enter the password for your CA key which you supplied when creating the CA key, certificate and store. # /usr/lib/ssl/misc/CA.pl -sign The certificate’s key has a passphrase assigned during the -newreq phase. If you want your software to be able to autostart this won’t work. To remove a passphrase: # openssl rsa -in newkey.pem -out newkey.nopass.pem Rename newkey.pem and newcert.pem to something useful, like hostname.key and hostname.cert . Configuration resources  OpenSSL PKI Tutorial v1.1 Building a Root CA and an Intermediate CA using OpenSSL and Debian Stretch",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5c7f02a776f445962324450dcfb7f440",
    "u": "https://server.tymyrddin.dev/docs/firewall/pf",
    "t": "Packet filtering ",
    "c": "Packet filtering  PF is a packet filtering tool with simple syntax, user-friendliness, and extensive features. The packet filtering takes place in the kernel. A pseudo-device, /dev/pf , allows userland processes to control the behaviour of the packet filter ( ioctl interface). There are commands to enable and disable a filter, load rule sets, add and remove individual rules or state table entries, and retrieve statistics. The most commonly used functions are covered by pfctl . Configuration resources  OpenBSD Handbook Packet Filter",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7b89826a04dd3131264722bfb7878414",
    "u": "https://server.tymyrddin.dev/docs/firewall/fail2ban",
    "t": "Fail2ban ",
    "c": "Fail2ban  Note: Fail2Ban can reduce the rate of incorrect authentications attempts but cannot eliminate the risk weak authentication presents. Installation  Installing fail2ban package in Debian: # apt-get install fail2ban Check it was properly installed: # fail2ban-client -h Configuration  To configure fail2ban, make a local copy of the jail.conf file in /etc/fail2ban : # cd /etc/fail2ban # cp jail.conf jail.local Edit the file: # vi jail.local Set the IPs you want fail2ban to ignore (the list of clients that are not subject to the fail2ban policies), the ban time (in seconds) and maximum number of user attempts: [DEFAULT] # \"ignoreip\" can be an IP address, a CIDR mask or a DNS host ignoreip = 127.0.0.1 bantime = 3600 maxretry = 3 Jails are the rules which fail2ban apply to a given application/log. To enable log monitoring for Nginx login attempts, enable the nginx-http-auth jail: [nginx-http-auth] enabled = true filter = nginx-http-auth port = http,https logpath = /var/log/nginx/error.log maxretry = 6 For apache: [apache] enabled = true port = http,https filter = apache-auth logpath = /var/log/apache*/*error.log maxretry = 6 To tweak or add log filters, see the files in /etc/fail2ban/filter.d . Restart fail2ban. Test  To test fail2ban, look at the iptable rules before and after attempting to log in to a service that fail2ban is monitoring from another machine and look at the iptable rules to see if that IP source gets added: # iptables -L Usage  To check if an IP is banned (in Nginx): $ sudo fail2ban-client status nginx-naxsi To unban an IP address: $ sudo fail2ban-client set nginx-naxsi unbanip xxx.xxx.xxx.xxx To see all jails: $ sudo fail2ban-client status [sudo] password for nina: Status |- Number of jail: 25 `- Jail list: http-get-dos, nginx-noscript, proftpd, WP-Login-POST, nginx-login, spam-log, wppingback, postfix-sasl, nginx-conn-limit, nginx-proxy, nginx-auth, block-scanners, nginx-naxsi, nginx-badbots, BASH, sshd, pam-generic, named-refused-udp, postfix, WP-Login, ssh-ddos, wordpress, webmin-auth, dovecot, ssh Note for Apache  Fail2ban scans log files like /var/log/apache/error_log , /var/log/auth.log and /var/log/apache/access.log and temporarily or persistently bans failure-prone addresses by updating existing firewall rules. Out of the box Fail2Ban comes with filters for various services (apache, courier, ssh, etc).",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "92ae258b797328e0d65cc2e9781b5526",
    "u": "https://server.tymyrddin.dev/docs/pki/problems",
    "t": "Problems ",
    "c": "Problems  PKI is failing by trying to be all things to all people and things. PKIs have experienced a hype and many companies and organizations announced to provide certification services to the general public. Only a few of these have succeeded and actually provide certification services that can be taken seriously. X.509 standard  X.509 is a complex standard and X.509 certificates are complex data structures with a lot of fields, many of which are critical and/or non-critical extension fields. Complex technology is not easy to deploy on a large-scale. Since Peter Gutmann from Auckland University published the X.509 Style Guide in 2000, little has improved. X.509 certificates are specified with ASN.1 and the resulting data structures are not very meaningful for humans (and hard to parse). The X.509 specification is scattered across many standards, drafts and amendments from multiple standard bodies, leading to confusion and numerous profiles that lack interoperability. Parts of the standard, even some that are related to key elements, are underspecified. That leads to ambiguity, unknown semantics and interoperability issues, like the country code, date/time formats in validity or path validation. Technical  Public key pairs must be generated in an efficient and secure (centralized or decentralized) way, and require a cryptographically strong pseudo-random bit generator, something which is not always available to end-users. Private keys must be securely stored in a personal security environment (and not a vulnerable endpoint), and for Web PKI public CA’s certificates must be made publicly available in a certificate repository or directory service. Hierarchical trust models are dangerous, because they provide a single point of attack. Alternative models (for example the mesh model) are poorly scalable in time and in space. Certificate authorities (CA’s) have to periodically send out a list of certificates that have been revoked (CRL’s), meaning that a user will not only have to get the corresponding certificates from the certification chain, but will also have to check that those certificates are not in the CRL. The definition and maintenance of a global name space is not as simple in practice. Cross-certification does not work in practice because competition is rule. Economical  The establishment and operation of a top CA requires large investments. One needs protection from adversaries trying to break into the facility, intercepting electromagnetic signals, and exploitation of other weaknesses of the used hardware and software, and one needs qualified personnel able to withstand all of the regulation and bureaucratic stuff. The ROI of a top CA is difficult to determine and quantify. Like many other infrastructure components, public key certificates do not provide a specific function in and of themselves, but provides only the means to secure functions and applications of other infrastructures. IOW, business cases for PKI’s are extremely hard to make. That part got solved, with some scary stuff happening, web PKI next in the chain, and hosting companies (re)selling certificates. Juridical  If a digital signature is generated according to some digital signature law, then somebody must be made liable if something goes wrong. If that is the Credential service provider (CSP), the insurance protection must be taken into account in a business case. As Bruce Schneier pointed out in Secrets and Lies , CA’s usually limit their liability to the protection of their private key. As the CA plays the role of a trusted third party users of certificates are put at a disadvantage. CA’s are like a notary who would only be liable to keep his stamp secure. Nothing changed much there either. The owner of a public key certificate cannot repudiate a signature that is generated with the appropriate signing key, which may lead to the situation in which a certificate owner may be held liable and accountable for statements that are digitally signed with the proper key, even if he or she does not know (and does not agree) with the statements. Social  In the real world, trust is based on two-way relationships and experiences that have been made over time. This can only insufficiently be modelled with hierarchical certificate models. Poor usability is a common feature of many products that employ (public key) cryptography. Secure cryptographic solutions and usability seem mutually exclusive. But then, there is not much focus on end users and UX design in general. What’s new? The users of public key cryptography are often not aware of the vulnerabilities and pitfalls. Privacy and security  X.509 uses features from other standards, like DNs from X.500 which are in itself complex and have little value and provides unanticipated attack vectors. SSL in the context of web browsers used to be target of several successful attacks, either directly on SSL (e.g. SSL renegotiation bug), the combination of https and http (SSL Strip), URL-forgery, and X.509-based attacks on ASN.1 and DN-parsing. Integration of PKI with the surrounding environment (end points, web applications) may allow compromise. Should a private key be compromised, an attacker would have access to data intended for the recipient. Attackers that gain access to private keys can also eavesdrop on content intended for a recipient and decrypt data as it’s collected. This is the biggest threat to the PKI system, because compromised keys require new keys to be issued, and old ones revoked. There is no easy, fast and effective method to revoke a root certificate. Anything less that a full compromise of the root key will tempt a CA to downplay the incident and revoke only certain certificates. This occurred with the DigiNotar-Hack, because the revocation of the root-CA would have interrupted the operation of many services. Revocation services are suspect to DoS-attacks. CAs are included in browsers by OS- and browser vendors without a common consistent policy. To be included in the trust store the vendor has to pay a fee. Only Microsoft requires a formal audit. As a result there is a sufficient number of weak and very weak CAs that are included in default certificate stores. In addition there is suspicion in the security community that governments use compelled certificates to tap Internet communication. Clients certificates and their attributes have zero security value, because there are CAs that do not validate the attributes including attributes with arbitrary OIDs (P. Gutmann). Some certificate stores contain funny root certificates that should be excluded on any serious security review. Alternatives  A variety of alternative approaches, ranging from simple workarounds to designing the application to sidestep PKI’s shortcomings, can help solve the problems inherent in the standard X.509 model. For example, in simple public key infrastructure (SPKI) and simple distributed security infrastructure (SDSI), keys are not bound to identities, but to roles or authorisations and names only have to be unique locally. Resources  PKI interoperability: Still an issue? A solution in the X.509 realm , Ahmad Samer Wazan Romain Laborde, François Barrere, Abdelmalek Benzekri, David W Chadwick, 2017 Why have public key infrastructures failed so far? , Javier Lopez, Rolf Oppliger, Gunther Pernu, 2005 PKI: It’s Not Dead, Just Resting , Peter Gutmann, 2002 The Emperor’s New Clothes: The Shocking Truth  Digital Signatures and Internet Commerce , Jane K. Winn, 2001 X.509 Style Guide, Peter Gutmann , 2000",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "43d8aedb9740b5cce9e491449c8e9bf8",
    "u": "https://server.tymyrddin.dev/docs/access/mac",
    "t": "Mandatory access control (MAC) ",
    "c": "Mandatory access control (MAC)  Mandatory Access Control (MAC) is a type of Access Control. It goes along with Discretionary Access Control, Role Based Access Control, and Rule Based Access Control. MAC is considered the strongest form of access control due to allowing more control over who has access over what. In a Linux system, there are multiple ways to implement MAC. Two of which being SELinux and AppArmor. SELinux  SELinux is a free open source software project that was developed by the U.S. National Security Agency. While it can theoretically be installed on any Linux distribution, Red Hat-type distributions are the only ones that come with it already set up and enabled. It uses code in Linux kernel modules, along with extended filesystem attributes, to help ensure that only authorised users and processes can access either sensitive files or system resources. There are three ways in which SELinux can be used: It can help prevent intruders from exploiting a system. It can be used to ensure that only users with the proper security clearance can access files that are labeled with a security classification. In addition to MAC, SELinux can also be used as a type of role-based access control. AppArmor  AppArmor is the MAC system that comes installed with the SUSE and the Ubuntu families of Linux. Although it’s designed to do pretty much the same job as SELinux, its mode of operation is substantially different: SELinux labels all system processes and all objects such as files, directories, or network ports. For files and directories, SELinux stores the labels in their respective inodes as extended attributes. (An inode is the basic filesystem component that contains all information about a file, except for the filename.) AppArmor uses pathname enforcement, which means that you specify the path to the executable file that you want AppArmor to control. This way, there’s no need to insert labels into the extended attributes of files or directories. With SELinux, you have system-wide protection out of the box. With AppArmor, you have a profile for each individual application. With either SELinux or AppArmor, you might occasionally find yourself having to create custom policy modules from scratch, especially if you’re dealing with either third-party applications or home-grown software. With AppArmor, this is easier, because the syntax for writing AppArmor profiles is much easier than the syntax for writing SELinux policies. And AppArmor comes with utilities that can help you automate the process. Just as SELinux can, AppArmor can help prevent malicious actors from ruining your day and can help protect user data. The AppArmor directory is located at /etc/apparmor.d . This directory contains all the AppArmor profiles. The sbin.dhclient and usr.* files are AppArmor profiles. The abstractions directory is a sort of “includes” folder that has partially written profiles that can be used and included in custom profiles. Part of the work has already been done. Additional profiles can be installed with: sudo apt install apparmor-profiles apparmor-profiles-extra",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "046648d4934643901a204f6789f5cab5",
    "u": "https://server.tymyrddin.dev/docs/firewall/iptables",
    "t": "iptables ",
    "c": "iptables  iptables is not the name of Linux’s firewall. It is just one way of interacting with netfilter which every Linux distribution comes with. As such, iptables is a command line utility for configuring the Linux kernel firewall implemented within the Netfilter project. And it gets complex rather quickly which increases the risk of making mistakes. For a bare metal server running only a dedicated application, such as a Schleuder list, iptables is the simplest (and minimalistic) choice. For Ubuntu, it comes with the Uncomplicated Firewall ( ufw ), which is an easy-to-use frontend for iptables. As of CentOS version 7, FirewallD replaces iptables as default. The four components of iptables  iptables has 4 different components to it that all come together to give the utility its overall functionality: Filter table - offers the basic protection that you’d expect a firewall to provide Network Address Translation table - connects the public interwebs to the private networks Mangle table - for mangling them packets as they go through the firewall Security table - only used by SELinux Install and enable IPTables  In case it is not installed and you wish to install it: # yum install iptables-services Start the service: # systemctl start iptables # systemctl start iptables6 Enable automatic start on system boot # systemctl enable iptables # systemctl enable iptables6 Check iptables service status # systemctl status iptables # systemctl status iptables6 Chains  INPUT - packets coming into the firewall FORWARD - packets routed to another NIC on the network; for packets on the local network that are being forwarded on. OUTPUT - packets going out of the firewall Rules  Status command  To list rules -L showing interface name, rule options, TOS masks, packet and byte counters -n , and IP address and port in numeric format without using DNS to resolve names -v : # iptables -L -n -v With line numbers (important for deleting or inserting new rules into the firewall): # iptables -n -L -v --line-numbers To display INPUT or OUTPUT chain rules: # iptables -L INPUT -n -v # iptables -L OUTPUT -n -v --line-numbers Deleting a rule  To delete line number 4 using -D to delete one or more rules from the selected chain: # iptables -D INPUT 4 Inserting a rule  # iptables -L INPUT -n --line-numbers Chain INPUT (policy DROP) num target prot opt source destination 1 DROP all -- xxx.xxx.xxx.1 0.0.0.0/0 2 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state NEW,ESTABLISHED Inserting a rule between 1 and 2: # iptables -I INPUT 2 -s xxx.xxx.xxx.2 -j DROP Gives: # iptables -L INPUT -n --line-numbers Chain INPUT (policy DROP) num target prot opt source destination 1 DROP all -- xxx.xxx.xxx.1 0.0.0.0/0 2 DROP all -- xxx.xxx.xxx.2 0.0.0.0/0 3 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state NEW,ESTABLISHED Saving the rules  For saving the rules so they can be loaded at every reboot (you need to have iptables-persistent installed) # iptables-save > /etc/iptables/rules.v4 # ip6tables-save > /etc/iptables/rules.v6 Stop/Restart  Some distros like CentOS have installed a service called iptables to start and stop the firewall and a configuration file to configure it. For all other distros, iptables is a command, not a service. If you edited the configuration file manually, you have to reload iptables. Or load it directly through iptables: # iptables-restore < /etc/iptables/iptables.rules Usage  To deny all incoming and allow all outgoing connections ON A BARE METAL MACHINE where you have ACCESS TO THE CONSOLE: # Set default chain policies iptables -P INPUT DROP iptables -P FORWARD DROP iptables -P OUTPUT ACCEPT # Accept on localhost iptables -A INPUT -i lo -j ACCEPT iptables -A OUTPUT -o lo -j ACCEPT # Allow established sessions to receive traffic iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT SSH  For SSH access (-I inserts it before all other rules in INPUT): # iptables -I INPUT -p tcp --dport 22 -j ACCEPT If your SSH service is listening on another port, use that port instead of 22. OpenVPN  Create an iptables rule for NAT forwarding. An example (assuming the interface to forward to is named eth0): # iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE If the server cannot be pinged through the VPN, rules to open up TUN/TAP interfaces to all traffic may be needed: # iptables -A INPUT -i tun+ -j ACCEPT # iptables -A FORWARD -i tun+ -j ACCEPT # iptables -A INPUT -i tap+ -j ACCEPT # iptables -A FORWARD -i tap+ -j ACCEPT Set up rules for accepting connections from the OpenVPN port (default 1194) and through the physical interface, and make the changes permanent. SMTP Secure Sockets Layer  With SMTP Secure Sockets Layer (SSL) enabled, allow connections to port 587 (similar for 465). Add the rule for this port: # iptables -I INPUT 2 -p tcp --dport 587 -j ACCEPT Add the POP and IMAP ports and their secure counterparts: # iptables -I INPUT 3 -p tcp --dport 110 -j ACCEPT # iptables -I INPUT 4 -p tcp --dport 143 -j ACCEPT # iptables -I INPUT 5 -p tcp --dport 993 -j ACCEPT # iptables -I INPUT 6 -p tcp --dport 995 -j ACCEPT Save the iptables rules and restart iptables.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4b4c9c8b914e5d29f5b83b3a52376968",
    "u": "https://server.tymyrddin.dev/docs/firewall/ufw",
    "t": "UFW ",
    "c": "UFW  ufw is a program for managing a netfilter firewall with ease. It uses a command-line interface consisting of a small number of simple commands. Installation  On the backend server, install Uncomplicated Firewall (UFW) for configuring iptables. # apt-get install ufw Control  Start and enable: # systemctl start ufw # systemctl enable ufw Usage  To deny all incoming and allow all outgoing connections: # ufw default allow outgoing # default deny incoming SSH  # ufw allow ssh/tcp Or if you have changed port: # ufw allow <port>/tcp Nginx HTTP  # ufw allow 'Nginx HTTP' Nginx HTTPS  To allow HTTPS traffic, allow the Nginx Full profile and delete the redundant Nginx HTTP profile allowance: # ufw allow 'Nginx Full' # ufw delete allow 'Nginx HTTP' Logging  # ufw logging on OpenVPN  For openvpn: # vi /etc/default/ufw To allow ufw forwarding (VPN) traffic, append: DEFAULT_FORWARD_POLICY=\"ACCEPT\" Write and quit. Change /etc/ufw/before.rules : # NAT (Network Address Translation) table rules *nat :POSTROUTING ACCEPT [0:0] # Allow traffic from clients to the interface -A POSTROUTING -s 10.8.0.0/24 -o interface -j MASQUERADE # Optionally duplicate this line for each subnet if your setup requires it -A POSTROUTING -s 10.8.1.0/24 -o interface -j MASQUERADE # do not delete the \"COMMIT\" line or the NAT table rules above will not be processed COMMIT # Don't delete these required lines, otherwise there will be errors *filter ... Write and quit. Open the chosen openvpn port (default 1194/udp): # ufw allow 1194/udp Reload/restart ufw: # ufw reload",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "62e007e849431769363e8bca2a580393",
    "u": "https://server.tymyrddin.dev/docs/incidents/backup",
    "t": "Implementing a backup plan ",
    "c": "Implementing a backup plan  Backups are one of those things that some people don’t seem to take seriously until it’s too late. Data loss can be a catastrophic event for an organisation, so it’s imperative that you implement a solid backup plan. There’s no one best backup solution, since it all depends on what kind of data you need to secure, and what software and hardware resources are available to you. This may mean that you’ll need to make some compromises, such as creating regular snapshots of your database server’s storage volume or regularly dumping a backup of your important databases to an external storage device. The rsync utility is one of the most valuable pieces of software around to server administrators. It allows us to do some really wonderful things. In some cases, it can save us quite a bit of money. For example, online backup solutions are wonderful in the sense that we can use them to store off-site copies of our important files. And depending on the volume of data, they can be quite expensive. With rsync , we can back up our data in much the same way, with not only our current files copied over to a backup target but also differentials. If we have another server to send the backup to, even better. sudo rsync -a /home /backup Where the -a option, the archive mode, is a wrapper option that includes the following options all at the same time: -rlptgoD To point rsync to another server, rather than to another directory on the local server: sudo rsync -av /home/myuser admin@IP_ADDRESS:/backup By default, rsync copies data between two locations, but it doesn’t remove anything. With the --delete option, you can synchronise two points, telling rsync to make them the same by allowing it to delete files in the target that are no longer in the source. Incremental backups  sudo rsync -avb --delete --backup-dir=/backup/incremental /src /target Copying files from /src to /target , but now sending replaced files to the /backup/incremental directory. This means that when a file is going to be replaced on the target, the original file will be copied to /backup/incremental . This works because we used the -b option (backup) and the --backup-dir option, which means that the replaced files will not be renamed; they’ll simply be moved to the designated directory. This allows us to effectively perform incremental backups. Using the Bash shell to make incremental backups work even better: CURDATE=$(date +%m-%d-%Y) sudo rsync -avb --delete --backup-dir=/backup/incremental/$CURDATE /src /target Simple script  \"\"\" Simple backup script which just creates the root structure in an other folder and syncs everything which recursively lies within one of the source folders. For files bigger than a threshold they are first gziped.\"\"\" import argparse import gzip import os import shutil import sys import threading def parse_input (): parser = argparse . ArgumentParser () parser . add_argument ( '-target' , nargs = 1 , required = True , help = 'Target Backup folder' ) parser . add_argument ( '-source' , nargs = '+' , required = True , help = 'Source Files to be added' ) parser . add_argument ( '-compress' , nargs = 1 , type = int , help = 'Gzip threshold in bytes' , default = [ 100000 ]) # no input means show me the help if len ( sys . argv ) == 1 : parser . print_help () sys . exit () return parser . parse_args () def size_if_newer ( source , target ): # If newer it returns size, otherwise it returns False src_stat = os . stat ( source ) try : target_ts = os . stat ( target ) . st_mtime except FileNotFoundError : try : target_ts = os . stat ( target + '.gz' ) . st_mtime except FileNotFoundError : target_ts = 0 # The time difference of one second is necessary since subsecond accuracy # of os.st_mtime is striped by copy2 return src_stat . st_size if ( src_stat . st_mtime - target_ts > 1 ) else False def threaded_sync_file ( source , target , compress ): size = size_if_newer ( source , target ) if size : thread = threading . Thread ( target = transfer_file , args = ( source , target , size > compress )) thread . start () return thread def sync_file ( source , target , compress ): size = size_if_newer ( source , target ) if size : transfer_file ( source , target , size > compress ) def transfer_file ( source , target , compress ): \"\"\" Either copy or compress and copies the file \"\"\" try : if compress : with gzip . open ( target + '.gz' , 'wb' ) as target_fid : with open ( source , 'rb' ) as source_fid : target_fid . writelines ( source_fid ) print ( 'Compress {} ' . format ( source )) else : shutil . copy2 ( source , target ) print ( 'Copy {} ' . format ( source )) except FileNotFoundError : os . makedirs ( os . path . dirname ( target )) transfer_file ( source , target , compress ) def sync_root ( root , arg ): target = arg . target [ 0 ] compress = arg . compress [ 0 ] threads = [] for path , _ , files in os . walk ( root ): for source in files : source = path + '/' + source threads . append ( threaded_sync_file ( source , target + source , compress )) # sync_file(source, target + source, compress) for thread in threads : thread . join () if __name__ == '__main__' : arg = parse_input () print ( '### Start copy ####' ) for root in arg . source : sync_root ( root , arg ) print ( '### Done ###' )",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "515df808ba646b11fd5dda53057ac3e8",
    "u": "https://server.tymyrddin.dev/docs/users/disable-root",
    "t": "Disabling root access ",
    "c": "Disabling root access  Disabling the root login shell  When creating a virtual private server on a cloud service (Rackspace, DigitalOcean, Vultr), the cloud service will have you log in to that virtual machine as the root user. (Even with Ubuntu). The first thing that you will want to do is to create a normal user account and give it full sudo privileges. Then, log out of the root account and log back in with the normal user account, and disable the root account: sudo passwd -l root Disabling root SSH login  To disable the root SSH login, set #PermitRootLogin to no in /etc/ssh/sshd_config.conf . Disabling root using PAM  The PAM is “a powerful suite of shared libraries used to dynamically authenticate a user to applications (or services) in a Linux system”. The PAM settings are controlled by the conf file in /etc/pam.d or /etc/pam.conf . $ sudo vim /etc/pam.d/sshd OR $ sudo vim /etc/pam.d/login !!! WARNING !!! Editing the /etc/pam.d/* or /etc/pam.conf files can lock you out of your system. Add this rule in both files: auth required pam_listfile.so \\ onerr=succeed item=user sense=deny file=/etc/ssh/deniedusers auth : is the module type (or context). required : is a control-flag that means if the module is used, it must pass or the overall result will be fail, regardless of the status of other modules. pam_listfile.so : is a module which provides a way to deny or allow services based on an arbitrary file. onerr=succeed : module argument. item=user : module argument which specifies what is listed in the file and should be checked for. sense=deny : module argument which specifies action to take if found in file, if the item is NOT found in the file, then the opposite action is requested. file=/etc/ssh/deniedusers : module argument which specifies file containing one item per line. Next, create the file /etc/ssh/deniedusers and add the name root in it: $ sudo vim /etc/ssh/deniedusers Save the changes and close the file, then set the required permissions on it: $ sudo chmod 600 /etc/ssh/deniedusers From now on, the above rule will tell PAM to consult the /etc/ssh/deniedusers file and deny access to the SSH and login services for any listed user. Resources  How to Configure and Use PAM in Linux",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "210b3551e3bb184057550445304f8042",
    "u": "https://server.tymyrddin.dev/docs/services/systemctl",
    "t": "Auditing system services with systemctl ",
    "c": "Auditing system services with systemctl  On Linux systems that come with systemd , the systemctl command is pretty much a universal command. To view the status of services: sudo systemctl -t service --state=active With: -t service : We want to view information about the services – or, what used to be called daemons – on the system. --state=active : This specifies that we want to view information about all the system services that are actually running. This command shows the status of every service that’s running on your system. Generally, you do not want to see much information, although you might at times. Candidates for removal  Depending on what the server is for: smbd and nmbd indicates a Samba Process. Do you really need to export smb share on windows or other machine? telnet for bidirectional interactive text-oriented communication over internet or local area network? rlogin to log in to another host over network? rexec to execute shell commands on a remote computer. ftp to transfer files from one host to another host over Internet? automount to mount different file systems automatically to bring up network file system? named to run NameServer (DNS)? lpd to print to the server. inetd ? If you are running standalone applications like ssh which uses other standalone application like mysql , Apache , etc. then you don’t need inetd. portmap , an Open Network Computing Remote Procedure Call (ONC RPC) which uses rpc.portmap and rpcbind . If these processes are running, you are running NFS server. Really? NFS server is running unnoticed? Stop and disable  To stop a service, then prevent it from restarting at reboot: sudo systemctl stop <service> sudo systemctl disable <service> Example: sudo systemctl stop smbd sudo systemctl disable smbd",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "42e33c9f2848bdec00d57e3bd26d66dc",
    "u": "https://server.tymyrddin.dev/docs/logfiles/rsyslogd",
    "t": "Syslog ",
    "c": "Syslog  The rsyslogd service is a system utility providing support for message logging. Support of both internet and unix domain sockets enables this utility to be used for remote and local logging. Rsyslog is a multi-threaded implementation of syslogd. It is by default installed on Ubuntu, Debian, OpenSUSE and CentOS, next to systemd’s journald. A combined audit system for linux Allows for local and remote log collection. Remote logging makes day-to-day maintenance and incident response easier, log storage more secure, auditing more effective and analysis easier across multiple platforms. Allows for a single point of management Controlled per device in /etc/syslog.conf All reported messages are collected in a message file Log replication can copy the audit data to multiple remote-logging hosts It is recommended to also setup logrotate and compression. Setting it up  Set up a separate server for only logging purposes. Keep it in a secure location behind a (physical) firewall. Have no unnecessary services running on it. Delete all other user accounts. Add two snort boxes (IDS) that are actually syslog servers (yet have no IP address) and copy each packet intended for syslog server. With two boxes doing that independently from one another, court cases can be very convincingly supported. Thank you, Dean Bushmiller, that is a very, very good idea . Promiscuous mode Rule: Only listen for this IP address on this port (of syslog server) Server  Installation  # apt install rsyslog Start the service, enable it to auto-start at boot and check status: # systemctl start rsyslog # systemctl enable rsyslog # systemctl status rsyslog Configuration  Configuring rsyslog involves setting up input sources (where rsyslog receives logs), and destination rules for where and how logs are written. Rsyslog uses RainerScript for its configuration syntax. # vi /etc/rsyslog.conf By default, rsyslog uses the imjournal (importing structured log messages from systemd journal) and imusock modules (accepting syslog messages from applications running on the local system via Unix sockets). To configure it as a network and central logging server, the protocol (either UDP or TCP or both) it will use for remote syslog reception and the port it listens on must be configured. $ModLoad imudp $UDPServerRun <port> $ModLoad imtcp $InputTCPServerRun <port> Define the # rules for processing the remote logs . There be Templates . $template RemoteLogs,\"/var/log/remote/%HOSTNAME%/%PROGRAMNAME%.log\" *.* ?RemoteLogs & ~ Gather and write the received remote messages to distinct logs under /var/log/remote/ , based on the hostname client machine name and remote client application that generated the messages as defined in the RemoteLogs template. Record messages from all applications at all severity levels using the RemoteLogs template configuration. Stop processing the messages once it is written to a file. If not set, it would be written to the local files. OR for example, for allowing all hosts (but not applications) in a subnet XXX.XXX.XXX.XXX/24 to log to the machine, using only UDP. $ModLoad imudp $UDPServerRun <port> $AllowedSender UDP, XXX.XXX.XXX.XXX/24 $template RemoteStore, \"/var/log/remote/%HOSTNAME%/%timegenerated:1:10:date-rfc3339%\" :source, !isequal, \"localhost\" -?RemoteStore :source, isequal, \"last\" ~ Write and quit. Restart rsyslog daemon: # systemctl restart rsyslog Clients  Install rsyslog , and edit /etc/rsyslog.conf : *.* @XXX.XXX.XXX.XXX:<port> Configuration resources  rsyslog Configuring remote syslog from Unix/Linux and BSD/macOS Configuring remote syslog from Windows",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f637fbc5b318c3b6891cdbe0f3a52b35",
    "u": "https://server.tymyrddin.dev/docs/incidents/git",
    "t": "Using git for configuration management ",
    "c": "Using git for configuration management  One of the most valuable assets on a server is its configuration. This is second only to the data the server stores. Often, when we implement new technology on a server, we’ll spend a great deal of time editing configuration files all over the server to make it work as best as we can. This can include any number of things, from Apache virtual host files to DHCP server configuration, DNS zone files, and more. If a server were to encounter a disaster from which the only recourse was to completely rebuild it, the last thing we’d want to do is re-engineer all of this configuration from scratch. This is where Git comes in. Git isn’t just useful for software engineers. It is also a good tool we can leverage for keeping track of configuration files on our servers, for documentation, and for developing guidelines. When we make configuration changes, we can push the changes back to our Git server. If for some reason we need to restore the configuration after a server fails or is compromised via the config files, we can simply download configuration files from Git back onto the (new) server. Another useful aspect of this approach is that if an administrator implements a change to a configuration file that breaks a service, we can simply revert to a known working commit, and we’ll be immediately back up and running. Install git : sudo apt install git On the server, create a directory to host the repositories. For example, /git : sudo mkdir /git Modify this directory to be owned by the administrative user you use on your Ubuntu servers. Typically, this is the user that was created during the installation of the distribution. Use any user you want, just make sure the user is allowed to use OpenSSH to access the Git server. Change the ownership of the /git directory, so it is owned by this user. sudo chown lela:lela /git Create a Git repository in the /git directory. For Apache, a bare repository, a skeleton of a Git repository that does not contain any useful data, just some default configuration to allow it to act as a Git folder. To create the bare repository, cd into the /git directory and execute: git init --bare apache2 Initialized empty Git repository in /git/apache2/ On the client (the server that houses the configuration you want to place under version control), copy this bare repository by cloning it. To set that up, create a /git directory on the Apache server (or whatever kind of server you’re backing up) just as we did before. Then, cd into that directory and clone the repository: git clone IP_ADDRESS:/git/apache2 Replace the IP_address with either the IP address of the Git server or its hostname (if you’ve created a DNS entry for it). warning: You appear to have cloned an empty repository Make a backup of the current /etc/apache2 directory on the web server, in case we make a mistake while converting it to being version controlled: sudo cp -rp /etc/apache2 /etc/apache2.bak Then,move all the contents of /etc/apache2 into the repository: sudo mv /etc/apache2/* /git/apache2 The /etc/apache2 directory is now empty. Be careful not to restart Apache at this point; it won’t see its configuration files and will fail. Remove the (now empty) /etc/apache2 directory: sudo rm /etc/apache2 Make sure that Apache’s files are owned by root. Using the chown command, as we normally would to change ownership, we’ll also change the .git directory to be owned by root as well. We don’t want that, because the user responsible for pushing changes should be the owner of the .git folder. To change the ownership of the files to root, without touching hidden directories such as .git : sudo find /git/apache2 -name '.?*' -prune -o -exec chown root:root {} + Create a symbolic link to the Git repository so the apache2 daemon can find it: sudo ln -s /git/apache2 /etc/apache2 Check with: ls -l /etc | grep apache2 Reloading Apache, nothing should change, and it should find the same configuration files as it did before. sudo systemctl reload apache2 To push the changes back to the Git server, associate the files within the /git/apache2 directory into version control: git add . If you run the git status command from within your Git repository, you should see output indicating that Git has new files that haven’t been committed yet. A Git commit simply finalizes the changes locally. Basically, it packages up your current changes to prepare them for being copied to the server. To create a commit of all the files we’ve added so far, cd into the /git/apache2 directory and run: git commit -a -m \"Initial commit.\" the -a option tells Git to include anything that’s changed in the repository. The -m option allows attaching a message to the commit, which is required. If you don’t use the -m option, it will open your default text editor and allow you to add a comment from there. Push the changes back to the Git server: git push origin main By default, the git suite of commands utilizes OpenSSH, so our git push command should create an ssh connection back to the Git server and push the files there. You won’t be able to inspect the contents of the Git directory on your Git server, because it won’t contain the same file structure as your original directory. But when you pull a Git repository though, the resulting directory structure will be just as you left it. If you need to restore a repository onto another server, all you should need to do is perform a Git clone . To clone the repository into your current working directory: git clone IP_ADDRESS:/git/apache2 And each time you make changes to the configuration files, you can perform a git commit and then push the changes up to the server to keep the content safe: git commit -a -m \"Updated config: details.\" git push origin main To revert changes should the configuration get changed with non-working files, locate a known working commit and get its commit hash. A good method is using the tig command. The tig package must be installed for this to work: sudo apt install tig To use it, execute the tig command from within a Git repository. This will give a semi-graphical interface to browse through the Git commits. Select the best commit to go back to and get the commit hash. Exit tig by pressing q , then revert to that commit: git checkout <commit hash> Test the application to make sure that the issue is completely fixed. When finished testing, you can make the change permanent. Switch back to the most recent commit: git checkout main Then, permanently switch back to the commit that was found to be working properly: git revert --no-commit <commit hash> Then, commit the reverted Git repository and push it back to the server: git commit -a -m \"The previous commit broke the application. Reverting.\" git push origin main",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "760863b7ad4682ee152a2fbaeeb6164c",
    "u": "https://server.tymyrddin.dev/docs/encryption/ssh",
    "t": "Installing SSH ",
    "c": "Installing SSH  SSH (Secure Shell) is used for managing networks, operating systems, and configurations. It is also used inside many file transfer tools and configuration management tools. Functionally SSH keys resemble passwords. SSH keys are a pair of cryptographic keys using a public key cryptosystem that can be used to authenticate to an SSH server as an alternative to password-based logins. A private and public key pair are created prior to authentication. The private key is kept secret and secure by the user, while the public key can be shared with anyone. The advantage SSH authentication has over traditional password authentication is that you can be authenticated by the server without having to send your password over the network. Anyone eavesdropping on unencrypted connections will not be able to intercept and crack the password. It also allows for disabling password-based authentication. openSSH server  # apt-get install openssh-server # systemctl enable ssh # systemctl start ssh Control  On Debian, the default behaviour of an OpenSSH server is that it will start automatically as soon as it is installed. Verify it is running: # systemctl status ssh If it is not running, try to start it with: # systemctl start ssh Stop it with # systemctl stop ssh If you wish to disable OpenSSH server from starting up at boot: # systemctl disable ssh And enable for starting up at boot: # systemctl enable ssh Filtering  Allow SSH connections in the firewall. openSSH client  § sudo apt-get install openssh-client Generate a key Punch a hole in the firewall If ufw is installed on client, open port (22, oruse the port you need) Copy key to server. Connect and login. Resources  OpenSSH Security OpenBSD Security",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b85647f9699ff39e83fb859122f1c48a",
    "u": "https://server.tymyrddin.dev/docs/ids/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  A host-based intrusion detection system (HIDS) is a system that monitors a host on which it is installed to detect an intrusion and/or misuse, and responds by logging the activity and notifying the system administrators. Why?  Defend against a live attack How?  Samhain Maltrail Notes  Install HIDS right after installing the system. Tripwire creates a database of information related to your system, then compares that to what it finds when ran regularly, which it should, in order to get some real use out of it. Rkhunter is a Unix-based tool that scans for rootkits, backdoors and possible local exploits. Samhain provides file integrity checking, log file monitoring/analysis, rootkit detection, port monitoring, detection of rogue SUID executables, and hidden processes. Like having tripwire and rkhunter rolled into one. <=",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "06bf0b23ed4e96afda5a27a1e16f250e",
    "u": "https://server.tymyrddin.dev/docs/pki/internal-pki",
    "t": "Internal PKI ",
    "c": "Internal PKI  An Internal PKI consists of A master-your-own master Certificate Authority (CA) certificate and key which is used to sign each of the server and client certificates. A separate certificate (also known as a public key) and private key for the server and each client. The most secure way of doing this is to generate the Certificate Authority keys on a stand-alone (not Internet-connected) machine in a secure location. Master Certificate Authority (CA)  easy-rsa is a CLI utility to build and manage a PKI CA. It has a quickstart documentation and OpenVPN has example files. cd /etc/openvpn/ mkdir easy-rsa cd easy-rsa cp -r /usr/share/doc/openvpn/examples/easy-rsa/2.0/* . Edit the /etc/openvpn/easy-rsa/vars file #vi /etc/openvpn/easy-rsa/vars Append content to some of its variables. This will make the next step in the process faster. You can also skip this. The only parameter which must be explicitly entered is the Common Name. Now create the Certificate Authority Certificate and Key: # source vars # ./clean-all # ./build-ca Generating a 2048 bit RSA private key ............++++++ ...........++++++ writing new private key to 'ca.key' ----- You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [KG]: State or Province Name (full name) [NA]: Locality Name (eg, city) [BISHKEK]: Organization Name (eg, company) [OpenVPN-TEST]: Organizational Unit Name (eg, section) []: Common Name (eg, your name or your server's hostname) []: <hostname> Email Address [me@myhost.mydomain]: Hit enter, and again, and again … Later more master certificates and keys can be added, and when doing so do NOT use the ./clean-all instruction again. It wipes the Certificate Authority. Server key  Generate the server certificate and key with: # ./build-key-server <servername> Hit enter, and again, and again … including when it asks you to add a pass phrase. This is between servers. When it asks you if you wish to sign, answers yes, and you also want to commit. Client keys  For security, each client will get its own certificate and key. Per client: # ./build-key <clientname> Hit enter, and again, and again … including when it asks you to add a pass phrase. This is between servers. When it asks you if you wish to sign, answers yes, and you also want to commit. Diffie-Hellman parameters  Use the build-dh script to determine the encryption parameters necessary for the server end of a SSL/​TLS connection: ./build-dh And the system will get very busy with prime numbers. Copy keys  In the most secure possible way (for instance with scp ), copy keys and certs to their respective locations. ca.crt , dh2048.pem , <servername>.crt , and <servername>.key to /etc/openvpn on <servername> ca.crt , <clientname>.crt , and <clientname>.key to /etc/openvpn on <clientname> for each client server. Security improvement  All keys were created, signed and then distributed to the clients. A more secure way would be to generate the keys in their locations, submit a Certificate Signing Request (CSR) to the key-signing machine or transfer the CSR to the offline CA, the key-signing machine could have processed the request and returned a signed certificate which could have been transferred back to the clients. That way, the secret .key files stay on the machine on which they were generated.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "29f3ee54c8f211d86ecd5a113d66b2fc",
    "u": "https://server.tymyrddin.dev/docs/encryption/jumping",
    "t": "Jumping hosts ",
    "c": "Jumping hosts  Sometimes it is only possible to access a remote server using ssh by first logging in to another server (or firewall/jump host). This means having to authenticate twice and the chain can be long and not limited to just two hosts. I can only access the remote “Backend server” via ssh by first login into an intermediary Firewall/Bastion server called “jumphost”. First, login to jumphost: $ ssh user@jumphost Next, ssh through the intermediary system: $ ssh user@backendserver Or, use -tt , forcing “pseudo-tty” allocation: $ ssh -tt jumphost ssh -tt backendserver Alternatives to manually jumping about and making life much easier are ForwardAgent, ProxyCommand and ProxyJump. Starting from OpenSSH 7.3, released August 2016, the easiest way to pass through one or more jump hosts is with the ProxyJump directive. ForwardAgent  SSH agent forwarding can be used to make access to a server. It allows for the use of local SSH keys instead of leaving keys (without passphrases!) sitting on the server. The -A option enables forwarding of the authentication agent connection: ssh -A user@server.com It forwards the SSH authentication schema to the remote host to allow for the use of SSH on the jump host as if the user was on the local machine. A forwarding socket will be set up so that the SSH client on the first host can connect to the ssh-agent on the client machine to perform authentication on its behalf. The key is not forwarded, but the agent, meaning many keys can be added. Configuration  Create or open ~/.ssh/config : $ vi ~/.ssh/config Append the below entry (replacing XXX.XXX.XXX.XXX with actual server domain name or the IP): Host jumphost HostName XXX.XXX.XXX.XXX User user ForwardAgent yes Security problem  The problem is that while being connected to the first host, anyone with sufficient permission on the first host will be able to use that socket to connect to and use that local ssh-agent. A rogue root or evil admin with root access can eavesdrop on the ongoing session and impersonate the user for authentication to other servers during the time that user is connected to that server. A mentioned mitigation is using the -c option, which will show a confirmation window each time some program wants to use the agent to authenticate somewhere. Recommended is using ProxyCommand instead. Or even better, ProxyJump. ProxyCommand  ProxyCommand is an alternative for that is supposedly more secure than the above SSH agent forwarding. It is possible to connect via an intermediate machine using a SOCKS proxy. SOCKS4 and SOCKS5 proxies are both supported by OpenSSH. SOCKS5 allows for transparent traversal of a firewall or other application barrier by strong authentication with the help of GSS-API. Dynamic application-level port forwarding allows the outgoing port to be allocated on the fly thereby creating a proxy at the TCP session level. Using the ProxyCommand option to invoke netcat as the last in the chain is a variation of this for very old clients. The SSH protocol is forwarded by ‘’nc’’ (netcat) instead of ‘’ssh’’. Attention must also be paid to whether or not the username changes from host to host in the chain of SSH connections. The somewhat outdated netcat method does not allow a change of username. Other methods do. ssh -o ProxyCommand='ssh user@jumphost nc backendserver 22' user@backendserver The ‘’nc’’ command sets and establish a TCP pipe between jumphost (or firewall) and backendserver. Note: It is not possible to use both the ProxyJump and ProxyCommand directives in the same host configuration. The first one found is used and then the other blocked. Configuration  Create or open ~/.ssh/config $ vi ~/.ssh/config Append the below entry (replacing ‘’XXX.XXX.XXX.XXX’’ with actual server domain name or IP and ‘’user’’ with actual user): Host jumphost HostName XXX.XXX.XXX.XXX User user ProxyCommand ssh user@backendserver nc %h %p ProxyJump  Starting from OpenSSH 7.3, released August 2016, the easiest way to pass through one or more jump hosts is with the ProxyJump directive. The main method here is to use an SSH connection to forward the SSH protocol through one or more jump hosts, using the ProxyJump directive, to an SSH server running on a destination host (this method cannot be used if an intermediate host denies port forwarding). This is considered the most secure method because encryption is end-to-end. $ ssh -J user1@jumphost.whatever.org:22 anotherusername@XXX.XXX.XXX.XXX And can be chained: $ ssh -J user1@jumphost1.whatever.org:22,user2@jumphost2.whatever.org:2222 anotherusername@XXX.XXX.XXX.XXX Configuration  Host server2 HostName XXX.XXX.XXX.XXX ProxyJump user1@jumphost1.whatever.org:22 User anotherusername Host server3 HostName XXX.XXX.XXX.XXX ProxyJump user1@jumphost1.whatever.org:22,user2@jumphost2.whatever.org:2222 User anotherusername",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d0d5d020d5de0fa0c33d9726f2209558",
    "u": "https://server.tymyrddin.dev/docs/users/other-reqs",
    "t": "Configuring other password requirements ",
    "c": "Configuring other password requirements  Password expiration  Password expiration can be set in /etc/login.defs . scroll down to the “Password aging controls” section: PASS_MAX_DAYS : Default 99999 ; Sets the maximum number of days a password may be used. PASS_MIN_DAYS : Default 0 ; Sets the minimum number of days a user must keep their password before changing it. PASS_WARN_AGE : Default 7 ; Sets the number of days out from expiration that the system will warn the user. Password history  When configuring the password history of any system, it is generally considered best practice to remember the previous 10 passwords. This will ensure that the user’s passwords stay different and are not reused. Setting a minimum age of 1 and a password history of 10 means that somebody would need to wait at least 11 days before they’re able to get back to their original password. Usually this is enough to dissuade anyone from trying. To configure password history in Ubuntu, use /etc/pam.d/common-password : password : module type we are referencing. required : module where failure returns a failure to the PAM-API. pam_pwhistory.so : module that configures the password history requirements. remember=2 : option for the pam_pwhistory.so module to remember the last n passwords ( n = 2 ). These passwords are saved in /etc/security/opasswd . retry=3 : option for the pam_pwhistory.so module to prompt the user 3 times before returning a failure. Resources  pam.d(5) - Linux man page",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ec2e0d518232acf629a71c1d1e66e8b3",
    "u": "https://server.tymyrddin.dev/docs/firewall/firewalld",
    "t": "FirewallD ",
    "c": "FirewallD  FirewallD uses the concepts of zones and services, instead of IPTables chain and rules. As of CentOS version 7, FirewallD replaces IPTables as the default firewall management tool. FirewallD can be configured and managed using the firewall-cmd command line utility. Install and enable FirewallD  If not installed on the system, install with # yum install firewalld Firewalld is disabled by default. Check status with: # firewall-cmd --state Start and enable it on boot # systemctl start firewalld # systemctl enable firewalld Zones  Zones are predefined sets of rules specifying what traffic should be allowed based on the level of trust on the networks a computer is connected to. Network interfaces and sources can be assigned to a zone. From untrusted to trusted: Zones Meaning drop All incoming connections are dropped without any notification. Only outgoing connections are allowed. block All incoming connections are rejected with an icmp-host-prohibited message for IPv4 and icmp6-adm-prohibited for IPv6n. Only outgoing connections are allowed. public For use in untrusted public areas. Do not trust other computers on the network but allow selected incoming connections. external For use on external networks with NAT masquerading enabled - system acts as a gateway or router. Only selected incoming connections are allowed. internal For use on internal networks - system acts as a gateway or router. Other systems on the network are generally trusted. Only selected incoming connections are allowed. dmz Used for computers in a demilitarized zone, giving limited access to the rest of the network. Only selected incoming connections are allowed. work Used for work machines. Other computers on the network are generally trusted. Only selected incoming connections are allowed. home Used for home machines. Other computers on the network are generally trusted. Only selected incoming connections are allowed. trusted All network connections are accepted. Trust all of the computers in the network. The public zone is set as a default zone # firewall-cmd --get-default-zone Check what zones are used by network interface(s) # firewall-cmd --get-active-zones Print zone configuration settings # firewall-cmd --zone=public --list-all Configuration of all zones # firewall-cmd --list-all-zones Changing zone of an interface # firewall-cmd --zone=work --change-interface=eth1 Ports and services  Listing all default available services ( /usr/lib/firewalld/services/ contains xml files with details for each service): # firewall-cmd --get-services Allow incoming HTTP traffic (port 80) for interfaces in the public zone, only for the current session (runtime configuration) # firewall-cmd --zone=public --add-service=http To keep the port open after reboot use the --permanent flag # firewall-cmd --permanent --zone=public --add-service=http Forward traffic from one port to another on the same server # firewall-cmd --zone=external --add-forward-port=port=80:proto=tcp:toport=8080 Creating rulesets  The dmz (demilitarized) zone only allows SSH traffic. To change the default zone to dmz and to assign it to the eth0 interface # firewall-cmd --set-default-zone=dmz # firewall-cmd --zone=dmz --add-interface=eth0 To open HTTP and HTTPS ports add permanent service rules to the dmz zone # firewall-cmd --permanent --zone=dmz --add-service=http # firewall-cmd --permanent --zone=dmz --add-service=https Start building the firewall! Usage examples  OpenVPN  When using the default port 1194, enable the openvpn service. Otherwise, create a new service with a different port. # firewall-cmd --zone=public --add-service openvpn To add masquerade to the zone: # firewall-cmd --zone=server --add-masquerade Make changes permanent: # firewall-cmd --runtime-to-permanent SMTP  # firewall-cmd --permanent --add-service=smtp success Disable FirewallD  Stop the FirewallD service # systemctl stop firewalld Disable it to start automatically on system boot # systemctl disable firewalld Mask it to prevent it from being started by other services # systemctl mask --now firewalld",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b303e57e930a7387dd0f026591e283ab",
    "u": "https://server.tymyrddin.dev/docs/users/lxd",
    "t": "Dangers of the lxd group ",
    "c": "Dangers of the lxd group  Ubuntu places users (unless otherwise specified) into the lxd group. This group is known to be a point of privilege escalation and should be removed from any user that is a part of it. It is so popular that Linux-Smart-Enumeration even checks for it. Remove it from any user that has it assigned. Using adduser does not add the user to any predefined groups and should probably be used when adding new users. Resources  diego-treitos/linux-smart-enumeration",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c0d8a4632d1584ca3691a5bbeb45d4aa",
    "u": "https://server.tymyrddin.dev/docs/access/dac",
    "t": "Discretionary access control (DAC) ",
    "c": "Discretionary access control (DAC)  Discretionary Access Control (DAC) really just means that each user has the ability to control who can get into their stuff. Using chown  One unique thing about chown is that you must have sudo privileges to use it, even if you’re working with your own files in your own directory. You can use it to change the user of a file or directory, the group that’s associated with a file or directory, or both. To change the file ownership from me to username : sudo chown <username>>: <file> To change the group association without changing the user: sudo chown :<group> <file> To change the user without changing the group, list the username without the trailing colon: sudo chown <username> <file> These commands work the same way on a directory as they do on a file. If you also want to change the ownership and/or the group association of the contents of a directory, while also making the change on the directory itself, use the -R option. Using chmod  On Unix and Linux systems, you would use the chmod utility to set permissions values on files and directories. You can set permissions for the user of the file or directory, the group that’s associated with the file or directory, and more. There are two ways to use chmod to change permissions settings: symbolic and numerical. Symbolic  chmod u+x cript.sh chmod g+x script.sh chmod o+x script.sh chmod u+x,g+x script.sh chmod a+x script.sh The first three commands add the executable permission for the user, the group, and others. The fourth command adds executable permissions for both the user and the group, while the last command adds executable permissions for everybody (a for all). You can also remove the executable permissions by replacing + with - . Similarly, you can add or remove read ( r ) or write ( w ) permissions. Numerical  With the numerical method, you’ll use an octal value to represent the permissions settings on a file or directory. For the r , w , and x permissions, you assign the numerical values 4, 2, and 1, respectively. You would do this for the user, group, and others positions, and then add them all up to get the permissions value for the file or directory: User Group Others rwx rwx rwx 421 421 421 7 7 7 With all permissions set for everybody, a file or directory will have a value of 777 . Using SUID and SGID  When a regular file has its SUID permission set, whoever accesses the file will have the same privileges as the user of the file. A file with the SUID permission set has an s in the executable position for the user: -rwsr-xr-x. A file with the SGID permission set has an s in the executable position for the group: -rwxr-sr-x. The numerical value for SUID is 4000 , and for SGID is 2000 . To set SUID on a file, add 4000 to whichever permissions value to be set. As useful as it may be to have SUID or SGID permissions on executable files, it is just a necessary evil. While having SUID or SGID set on certain operating system files is essential for the operation of the system, it becomes a security risk when users can set SUID or SGID on other files. If intruders find an executable file that belongs to the root user and has the SUID bit set, they can use that to exploit the system. They may leave behind their own root-owned file with an SUID set, which will allow them to regain entry to the system the next time. If the intruder’s SUID file isn’t found, the intruder will still have access, even if the original problem has been fixed. Finding SUID or SGID files  sudo find / -type f \\( -perm -4000 -o -perm -2000 \\) > suid_sgid_files.txt / : searching through the entire filesystem. Since some directories are only accessible to someone with root privileges, we need to use sudo. -type f : searching for regular files, which includes executable program files and shell scripts. -perm 4000 : searching for files with the 4000 , or SUID permission bit set. -o : or operator. -perm 2000 : searching for files with the 2000 , or SGID , permission bit set. > : redirecting the output into the suid_sgid_files.txt text file. Preventing SUID and SGID usage on a partition  Prevent SUID and SGID usage on a partition by mounting it with the nosuid option. Do not set nosuid for the / partition. The operating system doesn’t function properly. Using extended file attributes to protect sensitive files  Extended file attributes will not keep intruders from accessing files, but they can help prevent sensitive files from being altered or deleted. a : You can append text to the end of a file that has this attribute, but you can’t overwrite it. Only someone with proper sudo privileges can set or delete this attribute. i : This makes a file immutable, and only someone with proper sudo privileges can set or delete it. Files with this attribute can’t be deleted or changed in any way. It is also not possible to create hard links to files that have this attribute. sudo chattr +a <file> Securing system configuration files  With IoT devices, you have a bit more to worry about than you do with normal servers. Normal servers are protected with a high degree of physical security, while IoT devices often have little to no physical security. In this context, the open “all can read” is often considered not a good idea. Yo ensure that all the configuration files on the devices are set with the 600 permissions setting: sudo find / -iname '*.conf' -exec chmod 600 {} \\; Only the owner of the files – root user or a system account – can read them. Test things thoroughly to ensure that you haven’t broken anything. Most things work just fine with their configuration files set to a 600 permissions setting, and some do not.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "47637dfb988018b65c4bae141f992eb3",
    "u": "https://server.tymyrddin.dev/docs/encryption/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Protect data at rest and data in transit. Why?  Confidentiality: This ensures that only people who are authorised to see the data can see it. Integrity: This ensures that original data has not been altered by unauthorised people. Availability: This ensures that sensitive data is always available, and can not be deleted by unauthorised people. How?  GNU Privacy Guard OpenVPN strongSwan Installing SSH Harden ssh server Key management Jumping hosts Notes  Using a VPN is a way to map out a private network that only the servers can see. Communication will be fully private and secure. Other applications can be configured to pass their traffic over the virtual interface that the VPN software exposes. This way, only services that are meant to be used by clients on the public internet need to be exposed on the public network. Install and configure ssh keys and make your servers require them to minimise the risk posed by adversaries. Harden the ssh server (also harden default service settings in web server and other services) Do not leave passphrase empty - An adversary who gets hold of your private key can otherwise connect to the hosts where you put you public key. Use a separate key per client you ssh from to the same server. If one key is compromised the damage is more limited and easier to clean up. Limit the number of clients you ssh from. If a client is compromised an adversary has your key, they can install a binary to get your passwords/passphrases. If any, disable the ssh-server on the client machine you ssh from. Limit the attack surface. Don’t make jump host chains too long. If one client in the chain is compromised, an adversary can use that to compromise the rest of the clients down the chain. Don’t use Agent Forwarding. While being connected to the first host, anyone with sufficient permission on the first host will be able to use that socket to connect to and use that local ssh-agent. A rogue root or evil admin with root access can eavesdrop on the ongoing session and impersonate the user for authentication to other servers during the time that user is connected to that server. Instead, use ProxyJump (it uses E2EE) or, if that is not possible, use ProxyCommand. In some countries, proving that you connected to a particular server is enough to be prosecuted, but SSH doesn’t provide a native way to obfuscate to whom it connects. For that, SSH with Tor can be used. Don’t ignore authentication errors. This warning is protecting you. The remote host key is different than the client knows. Make sure the key really did change. An adversary may be spoofing the host and continuing may give the adversary the information they seek to attack your server. Another reason to not use passwords.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5c9294ef74b9df0a751dfbbbf4ed5e45",
    "u": "https://server.tymyrddin.dev/docs/services/nmap",
    "t": "Auditing network services with nmap ",
    "c": "Auditing network services with nmap  To remotely aud* the network to see what services are running on each host, without having to log in to each one, you need a tool like nmap . * is available for all the major operating systems, including Windows. The version that’s in the Linux repositories is usually quite old. So, if you’re using something other than Kali, your can download nmap . sudo nmap -sS IP_ADDRESS -sS : The lowercase s denotes the type of scan that we want to do. The uppercase S denotes that we’re doing a SYN packet scan. IP_ADDRESS : scanning a single machine or a group of machines or an entire network. Something like Not shown: 996 closed ports : The fact that it’s showing all of these closed ports instead of filtered ports tells me that there’s no firewall on this machine. Port states  An Nmap scan will show the target machine’s ports in one of three states: filtered : This means that the port is blocked by a firewall. open : This means that the port is not blocked by a firewall and that the service that’s associated with that port is running. closed : This means that the port is not blocked by a firewall, and that the service that’s associated with that port is not running. Scan types  There are lots of different scanning options, each with its own purpose. The SYN packet scan that we’re using here is considered a stealthy type of scan because * generates less network traffic and fewer system log entries than certain other types of scans. With this type of scan, Nmap sends a SYN packet to a port on the target machine, as if * were trying to create a TCP connection to that machine. If the target machine responds with a SYN/ACK packet, * means that the port is in an open state and is ready to create the TCP connection. If the target machine responds with an RST packet, * means that the port is in a closed state. If there’s no response at all, * means that the port is filtered, blocked by a firewall. As a normal Linux administrator, this is one of the types of scans that you would do most of the time. A discovery scan is useful for when you need to just see what devices are on the network: sudo nmap -sn IP_ADDRESS/24 With the -sn option, nmap will detect whether you’re scanning the local subnet or a remote subnet. If the subnet is local, nmap will send out an Address Resolution Protocol (ARP) broadcast that requests the IPv4 addresses of every device on the subnet. That is a reliable way of discovering devices because ARP isn’t something that will ever be blocked by a firewall. sudo nmap -A IP_ADDRESS This scan: identifies open , closed , and filtered TCP ports. identifies the version of the running services. runs a set of vulnerability scanning scripts that come with nmap. attempts to identify the operating system of the target host. 5900/tcp open vnc Apple remote desktop vnc | vnc-info: | Protocol version: 3.889 | Security types: |_ Mac OS X security type (30) 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at http://www.insecure.org/cgi-bin/servicefp-submit.cgi : SF-Port515-TCP:V=6.47%I=7%D=12/24%Time=5A40479E%P=x86_64-suse-linux-gnu%r( SF:GetRequest,1,\"\\x01\"); MAC Address: 00:0A:95:8B:E0:C0 (Apple) Device type: general purpose VNC can be handy at times. It’s like Microsoft’s Remote Desktop service for Windows, except that it’s free, open source software. But it’s also a security problem because it’s an unencrypted protocol. So, all your information goes across the network in plain text. If you must use VNC, run it through an SSH tunnel.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4dedab5686eea66d58233866f08b621d",
    "u": "https://server.tymyrddin.dev/docs/ids/maltrail",
    "t": "Maltrail ",
    "c": "Maltrail  Maltrail is a malicious traffic detection system, using publicly available (black)lists containing malicious and/or generally suspicious trails, static trails compiled from various AV reports and custom user-defined lists, and (optionally) advanced heuristic mechanisms that can help in the discovery of unknown threats (for example, new malware). It is based on a Traffic -> Sensor <-> Server <-> Client Architecture. Trail can be anything from a: domain name (like zvpprsensinaix.com for Banjori malware) URL (like http://109.162.38.120/harsh02.exe for known malicious executable) IP address (for example 185.130.5.231 for known attacker) HTTP User-Agent header value (like sqlmap for automatic SQL injection and database takeover tool). It can be found on Github stamparm/maltrail .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "fbf35dc5c99e6563252c4b10a6237a96",
    "u": "https://server.tymyrddin.dev/docs/encryption/key-management",
    "t": "Key management ",
    "c": "Key management  Generate a key  $ ssh-keygen -t Enter a passphrase. It will create 2 files in the ~/.ssh directory: id_rsa , a private key and id_rsa.pub , a public key. Note: Do not leave the passphrase empty. An attacker who gets hold of your private key can otherwise connect to the hosts where you put you public key. Choose a loooooong and complex passphrase. Remember the passphrase. Better yet, put it in a password manager. Copy key to server  $ scp ~/.ssh/id_rsa.pub user@server:~/.ssh/authorized_keys The authenticity of host 'XXX.XXX.XXX.XXX (XXX.XXX.XXX.XXX)' can't be established. ECDSA key fingerprint is [fingerprint]. Are you sure you want to continue connecting (yes/no)? yes If ssh access is already available, by using the cat command to read the contents of the public key on the local computer and piping that through an SSH connection to the remote server (and avoiding overriding already existing keys): $ cat ~/.ssh/id_rsa.pub | ssh user@server \"mkdir -p ~/.ssh && touch ~/.ssh/authorized_keys && chmod -R go= ~/.ssh && cat >> ~/.ssh/authorized_keys\" The authenticity of host 'XXX.XXX.XXX.XXX (XXX.XXX.XXX.XXX)' can't be established. ECDSA key fingerprint is [fingerprint]. Are you sure you want to continue connecting (yes/no)? yes For password-less login install the public key using the ssh-copy-id command: $ ssh-copy-id user@server $ ssh-copy-id -i ~/.ssh/id_rsa.pub user@server The authenticity message means that the local computer does not recognize the remote host. This will happen the first time connecting to a new host. Type “yes” and press ENTER to continue. /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys user@XXX.XXX.XXX.XXX's password: Enter password (not displayed for security purposes) and the following response is given: Number of key(s) added: 1 Connect  ssh to the server: $ ssh user@server Changing passphrase  ssh-keygen -p Or: cd ~/.ssh/ ssh-keygen -f id_rsa -p And upload it to the server. If you then connect, you may get an authentication error",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cf95dea78ebe621a0e02f17589928900",
    "u": "https://server.tymyrddin.dev/docs/logfiles/centralised",
    "t": "Centralised logging ",
    "c": "Centralised logging  Why?  Makes searching through log data for relevant events easier and faster, especially important when the infrastructure uses separation and isolation and there are multiple servers. This makes troubleshooting and solving issues easier and faster, and without directly accessing systems. Logs are backed up in a separate location, protecting them from accidental or unintentional loss, and are accessible in case one of the servers goes down or becomes unresponsive. Not using computing resources for complex searches on internet facing servers. Depending on how it is set up, reduces the amount of disk space used by log files. Why not?  Uses bandwidth. How?  Set up a separate server for only logging purposes. Keep it in a secure location behind a (physical) firewall. Have no unnecessary services running on it. Delete all other user accounts. Which one?  Rsyslog (default installed on debian) and syslog-ng are both light-weight. The configuration syntax of ‘’rsyslog’’ is simpler than the syntax of ‘’syslog-ng’’, but complex configuration is more clear in ‘’syslog-ng’’. Future considerations  To protect from intentional tampering with logs (intruder deleting indicators of presence): Add another server, a snort box (IDS) that is actually another central server (yet has no IP address) and copy each packet intended for the already existing central server. Promiscuous mode Rule: Only listen for this IP address on this port (of existing central server)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ca105558fe7c55c1dabbce4899e3874a",
    "u": "https://server.tymyrddin.dev/docs/logfiles/rotate",
    "t": "Logrotate ",
    "c": "Logrotate  On most Linux distributions, logrotate is installed by default. If not the case install it using the package manager. The below is for debian and friends. Installation  # apt-get install logrotate Configuration  The main configuration file is at /etc/logrotate.conf . Creating config files for each service separately can use the folder /etc/logrotate.d/ . # vi /etc/logrotate.d/remote Append: /var/log/remote/*/* { rotate 7 daily size=10M missingok compress delaycompress } This will compress and rotate logs every day and keep them for 90 days (3 months). Keep last 7 logs The logs will be rotated daily Each log will not be rotated until it reaches 10MB If the log file is missing, go on to the next one without issuing an error message. All rotated logs, with the exception of the most recent one, should be compressed.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "528e24c944fbce77eb2b0bda911674ed",
    "u": "https://server.tymyrddin.dev/docs/pki/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Public key infrastructure (PKI) is the umbrella term for everything needed in order to issue, distribute, store, use, verify, revoke, and otherwise manage and interact with certificates and keys. It’s an intentionally vague term, like “database infrastructure”. Certificates are the building blocks of most PKIs, and certificate authorities are the foundation. Why?  Establishing a certificate authority (CA) and managing certificates for the servers allows each entity within the infrastructure to validate the other members’ identities and encrypt their traffic. This can prevent MitM attacks where an attacker imitates a server in the infrastructure to intercept traffic. How?  Problems Internal PKI Pluggable Authentication Modules (PAM) Let’s Encrypt TLS/SSL Notes  Many simple PKIs don’t even use certificates. When editing ~/.ssh/authorized_keys you’re configuring a simple certificate-less form of PKI that SSH uses to bind public keys to names in flat files. Because the PKI system is asymmetric, users need access to a public key and recipients of a message need a private key to decrypt the information. X.509 is a complex standard and complex technology is not easy to deploy on a large-scale. Use a specific profile of X.509 and validate it in a narrow set of implementations. Web PKI is mostly defined by RFC 5280 and refined by the CA/Browser Forum. It’s hierarchical, based on trusting authorities, and for some such authorities a big cash cow. Web PKI being a money-spinner, we also have an alternative. Let’s Encrypt is a free, automated, and open Certificate Authority. Lost keys are also an issue for individuals that rely on encrypted data. Lost keys restrict access to messages, and these messages are unavailable forever unless the cryptographic algorithm is weak and can be cracked. Enter the Internet of Things (IoT), the Internet of Everything (IoE) and the Industrial Internet: all the devices that want confidentiality, integrity and authentication related to their identity and that of others too: implanted medical devices, robots on the plant floor, smart light bulbs, … We have a veritable explosion of checks and balances, not to mention issuances, revocations and expirations … problems, old ones not solved and new ones. SSL and PKI infrastructures are essential components in client device security, because they are used to bootstrap into higher-level security services such as software updates and digital signature services. Their vulnerability puts other security services at risk. Internal PKI is PKI we run ourselves, for our own stuff: infrastructures with services, containers, and VMs; applications; endpoints like laptops and phones; and any other code or device we want to identify. Use only the minimal set of features in certificates and PKI; That is to use the binding of an identifier and name to a key pair and understand whether the certificate may sign other certificates or not. No additional attributes should be relied on, no complex path validations allowed. SSL refers to Secure Socket Layer. It is a protocol for providing security to connections between a server and a client and uses cryptography and hashing to provide confidentiality, integrity, and endpoint authentication to connections between a server and a client. It has a lot of known security bugs of its own. TLS refers to Transport Layer Security, and is the successor of SSL, which includes bug fixes and improvements over SSL. SSL came up to versions 3.0 and after that the name was changed to TLS. Hence, often TLS/SSL is used.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "450b15a09a582ab262c724cfaa0155ab",
    "u": "https://server.tymyrddin.dev/docs/firewall/firehol",
    "t": "FireHOL ",
    "c": "FireHOL  FireHOL (based on bash) makes it very simple to set up a complex firewall. Installation  On the backend server, install FireHOL for configuring iptables . # apt-get install firehol Configuration (example)  # vi /etc/firehol/firehol.conf A configuration which only allows incoming ssh connections and openvpn: interface eth0 inet client all accept // allow all outgoing connections server ssh accept // allow all incoming SSH connections server openvpn accept src \"XXX.XXX.XXX.XXX XXX.XXX.XXX.XXX\" // allow incoming OpenVPN connections // from these designated addresses // NOTE: EDIT THE XXX.XXX.XXX.XXX ADDRESSES interface tun0 vpn server all accept // allow all incoming connections on the VPN client all accept // allow all outgoing connections on the VPN router inet2vpn inface eth0 outface tun0 route all accept // route freely to the VPN router vpn2inet inface tun0 outface eth0 masquerade // use NAT masquerading from the VPN route all accept // route freely to the VPN",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e1cb272b91b58f317d10879d8a97c878",
    "u": "https://server.tymyrddin.dev/docs/incidents/brm",
    "t": "Using bootable recovery media ",
    "c": "Using bootable recovery media  The concept of live media is a wonderful thing, as we can boot into a completely different working environment from the operating system installed on our device and perform tasks without disrupting installed software on the host system. The desktop version of Ubuntu, for example, offers a complete computing environment we can use in order to not only test hardware and troubleshoot our systems but also browse the web just as we would on an installed system. In terms of recovering from disasters, live media becomes a saving grace. Ubuntu’s live media is great, and it doesn’t work for absolutely everything. Tools such as Clonezilla specialize in working with hard disks. Practical Linux Forensics, Bruce Nikkel, 2021",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a3a59f60433064429e8a9112fafe3244",
    "u": "https://server.tymyrddin.dev/docs/services/netstat",
    "t": "Auditing network services with netstat ",
    "c": "Auditing network services with netstat  Two reasons why you would want to keep track of what network services running on systems: To ensure that no legitimate network services that you don’t need are running To ensure that you don’t have any malware that’s listening for network connections from its master C&C To see a list of network services that are listening, waiting for someone to connect to them: netstat -lp -A inet With: -lp : The l means that we want to see which network ports are listening. In other words, we want to see which network ports are waiting for someone to connect to them. The p means that we want to see the name and process ID number of the program or service that is listening on each port. -A inet : This means that we only want to see information about the network protocols that are members of the inet family. In other words, we want to see information about the raw, tcp, and udp network sockets, but we don’t want to see anything about the Unix sockets that only deal with interprocess communications within the operating system. If you want to see port numbers and IP addresses instead of network names, add the n option to the -lp . To view the established TCP connections is to leave out the l option. Something to keep in mind is that rootkits can replace legitimate Linux utilities with their own trojaned versions. For example, a rootkit could have its own trojaned version of netstat that would show all network processes except for those that are associated with the rootkit. That’s why you want something such as Rootkit Hunter in your toolbox. Resources  What Port Is - Network Port and Protocol Database",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "74d3c1bc5f8d0fea986342319e926687",
    "u": "https://server.tymyrddin.dev/docs/users/sudo",
    "t": "Configuring sudo ",
    "c": "Configuring sudo  sudo stands for “super-user do”. Sudo allows any non-root user to run applications as root. When sudo is configured correctly, it greatly increases the security of the environment. Slowing hackers down. Since the root login will most likely be disabled and your users are properly granted sudo, any attacker will not know which account to go after, thus slowing them down. If they are slowed down enough, they may stop the attack and give up. Allow non-privileged users to perform privileged tasks by entering their own passwords. Keeps in line with the principle of least privilege by allowing administrators to assign certain users full privileges, while assigning other users only the privileges they need to complete their daily tasks. Adding users to the sudo group  On Ubuntu 18.04, unless otherwise specified upon account creation, the user is automatically added to the sudo group. To add a user who is not part of the sudo group already, add him/her with: usermod -aG sudo <username> Using the -a option helps username retain any previously existing groups. To directly add a user to the sudo group upon username account creation: useradd -G sudo <username> By default, Ubuntu allows sudo users to execute any program as root with their password. There are a few ways we can check this information. The first way is as user with sudo -l . Another way to view this information is with visudo . This opens the sudo policy file. The sudo policy file is stored in /etc/sudoers . This gives the same information as sudo -l but with one difference; the %sudo indicates that it is for the group, sudo. There can be other groups in this file such as admin . This is where administrators can set what programs a user in a certain group can perform and whether they need a password. In the %sudo ALL=(ALL:ALL) ALL NOPASSWD: ALL , the NOPASSWD part says that the user that is part of the sudo group does not need to enter their local password to use sudo privileges. Generally, this is not recommended - not even for home use. Users can also be added to the sudoers using the sudo policy file. Always edit sudoers with the sudo visudo command. If you are managing users in a network across multiple flavours of Linux (CentOS, Red Hat, etc.), where the sudo group may be called something different, this method may be more preferable: add a User Alias to the policy file and add users to that alias, or add lines for individual users. User_Alias ADMINS = lela, barzh and: ADMINS ALL=(ALL) ALL or for an individual user: username ALL=(ALL) ALL It is not recommended to use individual user aliases in a large network since this can become unwieldy very quickly. The first option is going to be your best bet as you can simply add users to this alias and control which commands they have access to with sudo easily. Setting up sudo for only certain delegated privileges  To ensure that users are assigned to the groups they belong to and only are allowed access to the programs they need to complete their daily tasks, set Command Aliases in the sudo policy file: Use sudo visudo , and edit the line under the comment # Cmnd alias specification . Cmnd_Alias SOFTWARE = /bin/rpm, /usr/bin/up2date, /usr/bin/yum To assign the SOFTWARE command alias to the SOFTWAREADMINS user alias: SOFTWAREADMINS ALL=(ALL) SOFTWARE You can also assign Command Aliases to individual users, specific commands to individual users, and Command Aliases to groups. Host aliases  Host Aliases are a way to trickle down a sudo policy across the network and different servers. For example, you may have a MAILSERVERS Host Alias which contains servers mail1 and mail2 . This Host Alias has certain users or groups assigned to it, and that Host Alias has a Command Alias assigned to it stating which commands those users are able to run. When those users run a command on mail1 or mail2 , the server will check the sudo policy file to see if they can do what they are trying to do. In a home environment and small-medium business environments, it probably is just easier to copy the sudo policy file to each server in the network. This will really only come into play with large enterprise networks and even then they will probably be using a centralised Ansible or other automation in effect. Preventing users from using shell escapes  Programs like text editors and pagers have a handy shell escape feature. This allows a user to run a shell command without having to exit the program first. For example, from the command mode of the vi and vim editors, someone could run the ls command by running :!ls . To allow a user to edit the sshd_config file and only that file, add a line to the sudo configuration: username ALL=(ALL) sudoedit /etc/ssh/sshd_config sudoedit has no shell escape feature. Other programs that have a shell escape feature: emacs , less , view , and more . Preventing users from using other dangerous programs  Some programs that don’t have shell escapes can still be dangerous if you give users unrestricted privileges to use them, like cat , cut , awk , and sed . If you must give someone sudo privileges to use one of these programs, limit their use to only specific files. Preventing abuse via user’s shell scripts  A rule for Fritz so he can create scripts running with elevated privileges: fritz ALL=(ALL) /home/fritz/fritz_script.sh And his script reads: #!/bin/bash echo \"This script belongs to Fritz the Cat.\" sudo -i What can happen next: fritz@server:~$ sudo ./fritz_script.sh This script belongs to Fritz the Cat. root@server:~# sudo -i logs a person in to the root user’s shell, the same way that sudo su - does. To remedy this, move Fritz’ script to the /usr/local/sbin directory and change the ownership to the root user so that Fritz will not be able to edit it. And delete that sudo -i line in it.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "60dd2959baa6da7c1da8b6b818b87777",
    "u": "https://mailserver.tymyrddin.dev/",
    "t": "Smarter mail servers ",
    "c": "Smarter mail servers  Version 0.1: Notes on setting up a mailserver to detect phishing attacks and prevent MitM attacks. The below configurations were for a debian 9, and need to be updated and DMARC added. A work in progress … Mail servers Mail servers Cyrus Dovecot MTA Message Transfer Agent (MTA) Postfix configuration SASL configuration DNSSEC Domain Name System Security Extensions (DNSSEC) TLS Transport Layer Security (TLS) TLS configuration DANE configuration MTA-STS configuration SPF Sender Policy Framework (SPF) SPF configuration DKIM Domain Keys Identified Mail (DKIM) DKIM configuration Rspamd configuration DMARC Domain-based Message Authentication, Reporting and Conformance (DMARC) DMARC configuration",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "350396704891a510710bad93bc9aa01e",
    "u": "https://mailserver.tymyrddin.dev/docs/spf/spf",
    "t": "SPF configuration ",
    "c": "SPF configuration  Add SPF records to DNS  In order that receiving servers can check your SPF record it must be publicly visible. This means publishing it to the DNS server for the chosen domain(s). Go to their domain zone pages and add a new TXT record. For example, to allow mail from all hosts listed in the MX records for the domain: v=spf1 mx -all To allow mail from a specific host: v=spf1 a:mail.somedomain.tld -all Exact format may vary per DNS provider. Check the documentation for the exact style required. Installation  The Python SPF policy agent adds SPF policy-checking to Postfix. The SPF record for the sender’s domain for incoming mail will be checked and, if it exists, mail will be handled accordingly. Configuration  policyd-spf.conf  /etc/postfix-policyd-spf-python/policyd-spf.conf looks something like: debugLevel = 1 defaultSeedOnly = 1 HELO_reject = SPF_Not_Pass Mail_From_reject = Fail PermError_reject = False TempError_Defer = False skip_addresses = 127.0.0.0/8,::ffff:127.0.0.0/104,::1 debugLevel controls the amount of information logged by the policy server. The default, level 1, logs no debugging messages, just basic SPF results and errors generated through the policy server. The policy server can operate in a test only mode. This allows you to see the potential impact of SPF checking in your mail logs without rejecting mail. Headers are prepended in messages, but message delivery is not affected. This mode is not enabled by default. To enable it, set TestOnly = 0 . This option was previously named defaultSeedOnly . This is still accepted, but logs an error. The default HELO check rejection policy is SPF_Not_Pass , meaning reject if the SPF result is Fail, Softfail, Neutral, PermError. Not fully RFC 4408 compliant but HELO/EHLO is known first in the SMTP dialogue and there is no reason to waste resources on Mail From checks if the HELO check will already reject the message. Postfix integration  master.cf  In /etc/postfix/master.cf append: policyd-spf unix - n n - 0 spawn user=nobody argv=/usr/bin/policyd-spf main.cf  To increase the Postfix policy agent timeout, which will prevent Postfix from aborting the agent if transactions run a bit slowly policyd-spf_time_limit = 3600 And append check_policy_service unix:private/policyd-spf after reject_unauth_destination , for example: smtpd_recipient_restrictions = reject_non_fqdn_recipient,reject_unknown_recipient_domain,permit_mynetworks,permit_sasl_authenticated,reject_unauth_destination,reject_non_fqdn_sender,reject_unlisted_recipient,check_policy_service unix:private/policyd-spf Restart postfix  # systemctl restart postfix Testing  Check the operation of the policy agent by looking at raw headers on incoming email messages for the SPF results header. The SPF policy agent also logs to /var/log/mail.log . In the mail.log file you’ll see messages like this from the policy agent Configuration resources  Man policyd-spf - policyd-spf python configuration parameters Kitterman Technical Services offers tools for setting up an SPF record. appmaildev.com also allows for testing SPF records. MX Toolbox allows users to look up their SPF records , making it possible to publish a list of domains that are authorised to send an email on their behalf, and a check if your mail server is blacklisted .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "947dba71caabf05e9586d5857fc7651e",
    "u": "https://mailserver.tymyrddin.dev/docs/tls/readme",
    "t": "Transport Layer Security (TLS) ",
    "c": "Transport Layer Security (TLS)  STARTTLS is a method of upgrading a plain text communication channel to a secure, encrypted communication channel. It makes it possible to create a secure, encrypted Simple Mail Transfer Protocol (SMTP) connection between mail servers. There is a serious issue with STARTTLS — it is vulnerable to Man-in-the-Middle (MITM) attacks. This issue can be mitigated by using either DNS-Based Authentication of Named Entities (DANE) for SMTP or SMTP Mail Transfer Agent Strict Transport Security (MTA-STS). With MTA-STS, DNSSEC is not required but is, of course, highly recommended. A valid X.509 certificate is required. Self-signed certificates are not allowed to be used in combination with MTA-STS. As mentioned before, DANE allows users of self-signed certificates, but a full DNSSEC implementation is required. DNS-based Authentication of Named Entities (DANE)  DANE is an alternative to Public Key Infrastructure (PKI) Certificate Authorities. It complements Domain Name System Security Extensions (DNSSEC), which must be implemented first. It is an Internet security protocol to allow X.509 digital certificates, commonly used for Transport Layer Security (TLS), to be bound to domain names using Domain Name System Security Extensions (DNSSEC). TLSA resource record is a type of DNS record. MTA Strict Transport Security (MTA-STS)  MTA-STS can be seen as a way to implement HTTP Strict Transport Security (HSTS) for SMTP. It is a mechanism to declare the ability to support TLS for SMTP and to specify whether sending mail servers must refuse to deliver an email to an authoritative receiving mail server that does not offer TLS with a trusted X.509 certificate. MTA-STS solves the problem that TLS is entirely optional with SMTP. With MTA-STS, DNSSEC is not required but is, of course, highly recommended. A valid X.509 certificate is required. Self-signed certificates are not allowed to be used in combination with MTA-STS.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7e07b89ae648eab3b3e798b700e981d1",
    "u": "https://mailserver.tymyrddin.dev/docs/dkim/readme",
    "t": "Domain Keys Identified Mail (DKIM) ",
    "c": "Domain Keys Identified Mail (DKIM)  DKIM is a method for detecting forged sender addresses in emails, a common technique used in phishing attacks. It lets official mail servers add a signature to headers of outgoing email and identifies a domain’s public key so other mail servers can verify the signature. As with SPF, DKIM helps keep mail from being considered spam. It also lets mail servers detect when mail has been tampered with in transit. Senders choose which elements of the email are to be included in the DKIM signing process: The whole message (header and body) or one or more fields of the email header. These elements must remain unchanged in transit, or the DKIM signature will fail authentication. The sender configures the mailserver to automatically create a hash of the parts of the email that are to be signed. The email provider receiving the email sees that it has a DKIM signature (and which “domain/selector” combination signed the encryption). It will run a DNS query to find the public key for that “domain/selector” combination. A keypair match enables the email provider to decrypt the DKIM signature back to the original hash string. The receiving email provider takes the elements of the email signed by DKIM, generates its own hash of these elements, and compares that hash with the decrypted hash from the signature. Depending on the implementation, DKIM can also ensure that a message has not been modified or tampered with in transit. It is complex and has not been adopted widely. => No DKIM signature does not mean an email is fake. The DKIM domain is not visible to end users and one needs to have a bit of a techie to make it visible and understand it. It is over many heads. Woosh! DKIM does not prevent spoofing of the visible header “From:” domain. These configuration notes are for debian 9 (will probably also work on buster) Rspamd is an e-mail filter system, which replaces Amavis and Spamassassin. It also is capable of signing outbound e-mails with DKIM keys. The status of Rspamd can be monitored via a simple web interface.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "362d6fe33428aa1950cc48bbaf76d421",
    "u": "https://mailserver.tymyrddin.dev/docs/mta/sasl",
    "t": "SASL configuration ",
    "c": "SASL configuration  Once Postfix is up and running, add SASL authentication to avoid open relaying. In order to prevent anonymous users from spamming, only authenticated and trusted users will be able to send emails. Postfix supports two SASL implementations: Cyrus SASL (SMTP client and server) and Dovecot SASL (SMTP server only). Both implementations can be built into Postfix simultaneously. Cyrus  Install: # apt-get install libsasl2-modules sasl2-bin SASL can use different authentication methods. The default one is PAM (as configured in /etc/conf.d/saslauthd ), but to set it up properly you have to create /etc/sasl2/smtpd.conf . Pambase 20190105.1-1 and newer use restrictive fallback for “other” PAM service, and a pam configuration file is required. Create a file /etc/postfix/sasl/smtpd.conf : pwcheck_method: saslauthd mech_list: PLAIN LOGIN log_level: 7 Setup a separate saslauthd process to be used from Postfix. Create a copy of saslauthd’s config file: # cp /etc/default/saslauthd /etc/default/saslauthd-postfix Append: START=yes DESC=\"SASL Auth. Daemon for Postfix\" NAME=\"saslauthd-postf\" # max. 15 char. # Option -m sets working dir for saslauthd (contains socket) OPTIONS=\"-c -m /var/spool/postfix/var/run/saslauthd\" # postfix/smtp in chroot() Create the required subdirectories in postfix chroot directory: dpkg-statoverride --add root sasl 710 /var/spool/postfix/var/run/saslauthd Add user postfix to the group sasl : adduser postfix sasl Restart saslauthd: # systemctl saslauthd restart [ ok ] Stopping SASL Auth. Daemon: saslauthd. [ ok ] Stopping SASL Auth. Daemon for Postfix: saslauthd-postf. [ ok ] Starting SASL Auth. Daemon: saslauthd. [ ok ] Starting SASL Auth. Daemon for Postfix: saslauthd-postf. Edit /etc/postfix/main.cf : smtpd_sasl_local_domain = $myhostname smtpd_sasl_auth_enable = yes broken_sasl_auth_clients = yes smtpd_sasl_security_options = noanonymous smtpd_recipient_restrictions = permit_sasl_authenticated, permit_mynetworks, reject_unauth_destination Restart (reloading is not enough): # systemctl postfix restart SMTP  To enable SASL for accepting mail from other users, in /etc/postfix/master.cf under the submission or smtp section (depending on what is used) append/uncomment: submission inet n - n - - smtpd -o syslog_name=postfix/submission -o smtpd_tls_security_level=encrypt -o smtpd_sasl_auth_enable=yes -o smtpd_reject_unlisted_recipient=no # -o smtpd_client_restrictions=$mua_client_restrictions # -o smtpd_helo_restrictions=$mua_helo_restrictions # -o smtpd_sender_restrictions=$mua_sender_restrictions -o smtpd_recipient_restrictions=permit_sasl_authenticated,reject -o milter_macro_daemon_name=ORIGINATING The three restriction options (client, helo, sender) can also be left commented out, since smtpd_recipient_restrictions already handles SASL users. Start/enable the saslauthd service and restart the postfix service. Dovecot  If Dovecot is used as IMAP or POP mail server and all users already authenticate (such as with PAM ), then there is no need to configure another package. SMTP  Edit /etc/postfix/master.cf and append/uncomment under the submission or smtp section (depending on what is used): # SASL authentication with dovecot -o smtpd_tls_security_level=encrypt -o smtpd_sasl_auth_enable=yes -o smtpd_sasl_type=dovecot -o smtpd_sasl_path=private/auth -o smtpd_sasl_security_options=noanonymous -o smtpd_sasl_local_domain=$myhostname -o smtpd_client_restrictions=permit_sasl_authenticated,reject -o smtpd_recipient_restrictions=reject_non_fqdn_recipient,reject_unknown_recipient_domain,permit_sasl_authenticated,reject In /etc/postfix/main.cf : smtpd_relay_restrictions = permit_mynetworks,permit_sasl_authenticated,reject_unauth_destination smtpd_sasl_local_domain = $myhostname smtpd_sender_restrictions filters mails based on the MAIL FROM command; This command is easy faked by telneting an open relay and typing in this command, therefore mail counl be sent with a valid MAIL FROM address. Use smtpd_client_restrictions instead, which checks the hostname or IP address of the smtpd client (the other MTA/SMTP connecting to the internal smtpd) in a black list, if listed mail is denied. If mails are marked as NoBounceOpenRelay try: smtpd_sasl_authenticated_header = yes To configure Postfix to enable email clients to connect to the SMTP server. In /etc/postfix/main.cf : smtpd_sasl_auth_enable = yes smtpd_sasl_security_options = noanonymous smtpd_sasl_local_domain = $myhostname smtpd_recipient_restrictions = permit_sasl_authenticated,permit_mynetworks, reject_unauth_destination broken_sasl_auth_clients = yes smtpd_sasl_type = dovecot smtpd_sasl_path = private/auth broken_sasl_auth_clients enables interoperability with remote SMTP clients that implement an obsolete version of the AUTH command. Default is no . Setting it to yes makes Postfix advertise AUTH support in a non-standard way. Restart both dovecot and postfix. Configuration resources  Postfix and Dovecot SASL",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "67a139b838a6ea1da56f277b7d543f0b",
    "u": "https://mailserver.tymyrddin.dev/docs/spf/readme",
    "t": "Sender Policy Framework (SPF) ",
    "c": "Sender Policy Framework (SPF)  SPF is a method for email authentication and is designed to detect fraudulent mail servers. SPF allows the recipient’s mail server to check that an authorized mail server sent the email. It is an open standard specifying a technical method to prevent sender address forgery. In plain language, it is a method of informing servers whether a specific mail server is authorised to send an email for a particular domain. With that, it can detect whether an email address is authentic or fake, before allowing it to pass into an inbox. An SPF record increases the likelihood that emails sent by valid addresses are delivered. Without it, genuine email could be categorised as spam. It also protects against malicious emails sent through your domain by spammers. A email provider publishes SPF records in the Domain Name System (DNS). These records list which IP addresses are authorised to send email on behalf of their domains. In an SPF check, email providers verify the SPF record by looking up the domain name listed in the return path address in the DNS. If the IP address sending email on behalf of the “return path” domain is not listed the record, the message fails authentication. SPF records must be kept updated. If a message fails SPF check, that doesn’t mean it will always be blocked. Breaks when a message is forwarded. Does not protect against spoofing of the visible “From” address in messages.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5fc40c56c8ce22580281fbb42de65381",
    "u": "https://mailserver.tymyrddin.dev/docs/servers/readme",
    "t": "Mail servers ",
    "c": "Mail servers  Dovecot is a minimal open-source IMAP and POP3 email server for Linux/ Unix operating systems. It supports different authentication methods, requires minimal memory, and supports Postfix and Exim. Cyrus is a robust open-source Linux mail server that offers speed, security and support for dozens of protocols and authentication methods. It is a rich configurable mail-server with a large set of options and third-party integrations.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "88d208a5e9828fbbb381faf5587d392f",
    "u": "https://mailserver.tymyrddin.dev/docs/tls/dane",
    "t": "DANE configuration ",
    "c": "DANE configuration  Postfix supports DANE In Postfix, certificate usage 0 is unsupported, 1 is mapped to 3, and 2 is optional, thus it is recommended to publish a “3” record. Configuration  In /etc/postfix/main.cf smtpd_use_tls = yes smtp_dns_support_level = dnssec smtp_tls_security_level = dane In /etc/postfix/master.cf dane unix - - n - - smtp -o smtp_dns_support_level=dnssec -o smtp_tls_security_level=dane Multiple domains  To use per-domain policies, for example for opportunistic DANE for domain.org and mandatory DANE for domain.com: In /etc/postfix/main.cf indexed = ${default_database_type}:${config_directory}/ # Per-destination TLS policy # smtp_tls_policy_maps = ${indexed}tls_policy # default_transport = smtp, but some destinations are special: # transport_maps = ${indexed}transport In transport : domain.com dane domain.org dane In tls_policy : domain.com dane-only Configuration resources  DANE: Common mistakes DANE validator Generate TLSA Record online RFC6698: The DNS-Based Authentication of Named Entities (DANE) Transport Layer Security (TLS) Protocol: TLSA SMTP Security via Opportunistic DNS-Based Authentication of Named Entities (DANE) Transport Layer Security (TLS)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "277e682ad4ae66b23022242f16768008",
    "u": "https://mailserver.tymyrddin.dev/docs/tls/tls",
    "t": "TLS configuration ",
    "c": "TLS configuration  Email servers wrap SMTP via direct TLS or a connection upgrade with STARTTLS at ports 465/587 A Postfix SMTP server needs a certificate and a private key in .pem format. The private key must not be encrypted (= must be accessible without a password). Public Internet MX hosts without certificates signed by a well-known public CA must still generate, and be prepared to present to most clients, a self-signed or private-CA signed certificate. For non-public Internet MX hosts, Postfix supports configurations with no certificates. This entails the use of anonymous TLS ciphers, which are not supported by typical SMTP clients. Creating keys and certificates  By default, Postfix will not accept secure mail. To set Postfix up to accept secure mail, obtain a certificate. A certificate can be obtained either from a certificate authority with a Certificate Signing Request (CSR) or Let’s Encrypt certbot, or self-signed. Self-signed certificates can be generated easily, but clients will reject them by default, unless each and every client is configured to trust the self-signed certificate. Point Postfix to your TLS certificates by appending to /etc/postfix/main.cf : smtpd_tls_cert_file = /etc/letsencrypt/live/$domain.$tld/fullchain.pem smtpd_tls_key_file = /etc/letsencrypt/live/$domain.$tld/privkey.pem smtpd_tls_dh1024_param_file = /etc/ssl/private/2048.dh smtpd_tls_dh512_param_file = /etc/ssl/private/512.dh If you want the Postfix SMTP server to accept remote SMTP client certificates issued by one or more root CAs, append the root certificate to $smtpd_tls_CAfile or install it in the $smtpd_tls_CApath directory. smtpd_tls_CApath = /etc/ssl/certs Configuration  SMTP (sending)  By default, Postfix/sendmail will not send email encrypted to other SMTP servers. To use TLS when available, in /etc/postfix/main.cf , set: smtp_tls_security_level = may Sending AUTH data over an unencrypted channel poses a security risk. When TLS layer encryption is not required but optional ( smtpd_tls_security_level = may ), it is still useful to only offer AUTH when TLS is active. To maintain compatibility with non-TLS clients, the default is to accept AUTH without encryption. In order to change this behaviour: In /etc/postfix/main.cf : smtpd_tls_auth_only = yes SMTP (receiving)  There are two ways to accept secure mail. For STARTTLS over SMTP (port 587) uncomment in /etc/postfix/master.cf : submission inet n - n - - smtpd -o syslog_name=postfix/submission -o smtpd_tls_security_level=encrypt -o smtpd_sasl_auth_enable=yes -o smtpd_tls_auth_only=yes -o smtpd_reject_unlisted_recipient=no # -o smtpd_client_restrictions=$mua_client_restrictions # -o smtpd_helo_restrictions=$mua_helo_restrictions # -o smtpd_sender_restrictions=$mua_sender_restrictions -o smtpd_recipient_restrictions= -o smtpd_relay_restrictions=permit_sasl_authenticated,reject -o milter_macro_daemon_name=ORIGINATING For SMTPS (port 465), uncomment in /etc/postfix/master.cf : smtps inet n - n - - smtpd -o syslog_name=postfix/smtps -o smtpd_tls_wrappermode=yes -o smtpd_sasl_auth_enable=yes -o smtpd_reject_unlisted_recipient=no # -o smtpd_client_restrictions=$mua_client_restrictions # -o smtpd_helo_restrictions=$mua_helo_restrictions # -o smtpd_sender_restrictions=$mua_sender_restrictions -o smtpd_recipient_restrictions= -o smtpd_relay_restrictions=permit_sasl_authenticated,reject -o milter_macro_daemon_name=ORIGINATING When the TLS information is not included in the headers of the message it has processed from another server or SMTP client that uses TLS, it can be added with: smtpd_tls_received_header = yes The “smtp server” part of Postfix (the first daemon that listens on port 25) then adds the TLS information to the “Received” message header of an incoming message. Logging  To get more information about Postfix SMTP client TLS activity you can increase the loglevel from 0..4. Each logging level also includes the information that is logged at a lower logging level. 0 Disable logging of TLS activity. 1 Log TLS handshake and certificate information. 2 Log levels during TLS negotiation. 3 Log hexadecimal and ASCII dump of TLS negotiation process. 4 Log hexadecimal and ASCII dump of complete transmission after STARTTLS. In /etc/postfix/main.cf : smtpd_tls_loglevel = 0 Cipher controls  The Postfix SMTP server supports 5 distinct cipher grades as specified by the smtpd_tls_mandatory_ciphers parameter, which determines the minimum cipher grade with mandatory TLS encryption. Default is medium. smtpd_tls_mandatory_ciphers = high Cipher grade high enables only “HIGH” grade OpenSSL ciphers specified in the tls_high_cipherlist configuration parameter, which you are strongly encouraged to not change. The smtpd_tls_ciphers parameter controls the minimum cipher grade used with opportunistic TLS. Default is medium . smtpd_tls_ciphers = medium By default, anonymous ciphers are enabled. They are automatically disabled when remote SMTP client certificates are requested. For excluding cipher types from the SMTP server cipher list at all TLS security levels: smtpd_tls_exclude_ciphers = aNULL, MD5, DES, 3DES, DES-CBC3-SHA, RC4-SHA, AES256-SHA, AES128-SHA, eNULL, EXPORT, RC4, PSK, aECDH, EDH-DSS-DES-CBC3-SHA, EDH-RSA-DES-CDC3-SHA, KRB5-DE5, CBC3-SHA The Postfix SMTP server security grade for ephemeral elliptic-curve Diffie-Hellman (EECDH) key exchange: smtpd_tls_eecdh_grade = strong strong means use EECDH with approximately 128 bits of security at a reasonable computational cost. This is the current best-practice trade-off between security and computational efficiency. By default, the OpenSSL server selects the client’s most preferred cipher-suite that the server supports. With SSLv3 and later, the server may choose its own most preferred cipher-suite that is supported (offered) by the client. The default OpenSSL behaviour applies with “tls_preempt_cipherlist = no” To enable server cipher-suite preferences: tls_preempt_cipherlist = yes Entropy  The security of cryptographic software such as TLS depends critically on the ability to generate unpredictable numbers for keys and other information. The tlsmgr process maintains a Pseudo Random Number Generator (PRNG) pool for the purpose. This is queried by the smtp and smtpd processes when they initialize. By default, these daemons request 32 bytes, the equivalent to 256 bits, more than enough to generate a 128 bit (or 168 bit) session key. A good entropy source is /dev/urandom tls_random_source = dev:/dev/urandom Session cache  The remote SMTP server and the Postfix SMTP client negotiate a session, which takes some computer time and network bandwidth. Cached Postfix SMTP server session information expires after a certain amount of time. Postfix/TLS does not use the OpenSSL default of 300s, but a longer time of 3600sec. RFC 2246 even recommends a maximum of 24 hours. smtpd_tls_session_cache_timeout = 3600s Obsolete TLS parameters  smtpd_tls_mandatory_protocols = TLSv1 Firewall  Allow connections to port 587 and 465 (depending) by opening the port for your server in the server firewall. Configuration resources  Guide to Deploying Diffie-Hellman for TLS",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "64eade5fd86f1ff1a95b732047845a90",
    "u": "https://mailserver.tymyrddin.dev/docs/servers/cyrus",
    "t": "Cyrus ",
    "c": "Cyrus  The Cyrus IMAP server is electronic mail server open source software developed by Carnegie Mellon University. It differs from other Internet Message Access Protocol (IMAP) server implementations in that it is generally intended to be run on sealed servers, where normal users cannot log in. And it is not lightweight. Installation  # apt-get install cyrus-imapd cyrus-sasl cyrus-sasl-plain You will be asked to set a password for the default administrative user cyrus Get SSL certificate  Using Let’s Encrypt, request a certificate for the mail server by (replacing mail.mydomain.com with the fully qualified domain name (FQDN) of your server): certbot certonly --standalone -d mail.mydomain.com Integration with postfix  Firewall  To access the mail server from another computer, configure the server firewall to allow connections to the server on the necessary ports. The default ports are IMAP - 143; IMAPS - 993; POP3 - 110; and POP3S - 995. Configuration resources  Cyrus IMAP",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e798deee75ddaa94fc96699ea0567a29",
    "u": "https://mailserver.tymyrddin.dev/docs/dkim/dkim",
    "t": "DKIM configuration ",
    "c": "DKIM configuration  Installation  # apt-get install opendkim opendkim-tools Unix socket  Postfix and opendkim communicate through a unix socket. Socket address is usually the one specified in /etc/postfix/main.cf , but the default configuration of postfix in debian runs under a chroot ( /var/spool/postfix ) so the socket must be created in the jail: # sockdir=/var/spool/postfix/var/run/opendkim # mkdir -p $sockdir # chown opendkim. $sockdir # chmod go-rwx $sockdir # chmod g+x $sockdir Generate keys  Generate the key pair. To generate a secret signing key, you need to specify the domain used to send mails and a selector which is used to refer to the key (choose anything you like, alpha-numeric strings will do). # opendkim-genkey -r -s myselector -b 2048 -d $domain.tld This creates two files in /etc/dkimkeys/ : myselector.private and myselector.txt , the private and public key. Make sure that only the opendkim user can read them: chgrp opendkim /etc/dkimkeys/* chmod go-rwx /etc/dkimkeys/* Configuration  Copy the sample configuration file /etc/opendkim/opendkim.conf.sample (or /usr/share/doc/opendkim/opendkim.conf.sample ) to /etc/opendkim/opendkim.conf and change: Domain $domain.tld KeyFile /path/to/keys/myselector.private Selector myselector Socket inet:8891@localhost UserID opendkim On debian, for the unix socket: Syslog yes # Required to use local socket with MTAs that access the socket as a non- # privileged user (e.g. Postfix) UMask 007 # DO NOT BELIEVE that /etc/default/opendkim overrides the following : # (In stretch, it does not on 2019-08-13) Socket local:/var/spool/postfix/var/run/opendkim/opendkim.sock Multiple domains  If you are providing mail server service to multiple virtual domains on the same server, provide these directives: KeyTable refile:/etc/opendkim/KeyTable SigningTable refile:/etc/opendkim/SigningTable ExternalIgnoreList refile:/etc/opendkim/TrustedHosts InternalHosts refile:/etc/opendkim/TrustedHosts You have to create/move/copy DKIM keys in a separate domain folder for each domain, for example /etc/opendkim/keys/domain1.com/ . Otherwise you will receive dkim: FAILED, invalid (public key: not available)” error message with DKIM email test . You can use the same key for all the domains or generate a separate key for each domain. Edit the /etc/opendkim/KeyTable file to specify key locations: myselector._domainkey.domain1.com domain1.com:mail:/etc/opendkim/keys/domain1.com/myselector.private myselector._domainkey.domain2.com domain2.com:mail:/etc/opendkim/keys/domain2.com/myselector.private Edit the /etc/opendkim/SigningTable file to specify which key will sign a domain. *@domain1.com myselector._domainkey.domain1.com *@domain2.com myselector._domainkey.domain2.com In /etc/opendkim/TrustedHosts , add trusted domain and IP addresses who can use the keys. If needed, include localhost as it is not implicit. 127.0.0.1 ::1 localhost <some_server_ip> hostname.domain1.com domain1.com hostname.domain2.com domain2.com ... This is referenced by the ExternalIgnoreList directive. Opendkim will ignore this list of hosts when verifying incoming mail. It is also referenced by the InternalHosts directive, this same list of hosts will be considered “internal,” and opendkim will sign their outgoing mail. The flow for DKIM lookup starts with the sender’s address. The signing table is scanned until an entry whose pattern matches the address is found. Then, the second item’s value is used to locate the entry in the key table whose key information will be used. For incoming mail the domain and selector are then used to find the public key TXT record in DNS and that public key is used to validate the signature. For outgoing mail the private key is read from the named file and used to generate the signature on the message. Postfix integration  To make Postfix listen to the unix socket on debian (set up as above): Add user postfix to the opendkim group (postfix needs to be able to access the socket): # adduser postfix opendkim And append to /etc/postfix/main.cf : milter_default_action = accept milter_protocol = 6 # from inside the chroot, the socket will be in /var/run/opendkim smtpd_milters = unix:/var/run/opendkim/opendkim.sock non_smtpd_milters = unix:/var/run/opendkim/opendkim.sock Restart postfix  # systemctl restart postfix DNS Configuration  Add a TXT record for your domain(s). For example: As a Hostname, use the myselector followed by the literal string ._domainkey and use as Text: v=DKIM1; p=yourPublicKey Or v=DKIM1; h=sha256; k=rsa; s=email; p=yourPublicKey Exact format may vary per DNS provider. Check the documentation for the exact style required. Testing  Try to send a mail. Check /var/log/mail.log Test the installation with opendkim-testkey : # opendkim-testkey -d $domain.tld -s myselector -vvv Configuration resources  Breaking DKIM - on Purpose and by Chance , October 2017, Update 08/2018 Debian: opendkim",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8fdb41b25653820c4fce47d53823a387",
    "u": "https://mailserver.tymyrddin.dev/docs/mta/postfix",
    "t": "Postfix configuration ",
    "c": "Postfix configuration  The two most important configuration files are: /etc/postfix/master.cf , defining what Postfix services are enabled and how clients connect to them /etc/postfix/main.cf , the main configuration file, the bulk, the meat. Most configuration changes only need a reload of postfix in order to take effect. Only some require a restart. Don’t manage mailboxes from postfix. Check configuration with the postfix check command. To see all of the configuration files use the postconf command. To see how the setup differs from the defaults, use postconf -n . On debian, Postfix runs by default in a chroot jail. On other distro’s where this is not the case, it is recommended to set it up in a jail. Limit use of Postfix services Restrict which hosts are granted or refused access with the smtpd_*_restrictions directives. The vrfy command allows an attacker to determine if an account exists on a system, providing significant assistance to a brute force attack on user accounts. vrfy may provide additional information about users on the system, such as the full names of account owners. Default is no . Set to disable_vrfy_command = yes . Client control rules can be based on the sender or receiver address and limitations of the number and size of email messages. Consider greylisting: In greylisting the server sends a request to have the email resent, after temporarily rejecting the email. The server saves in a list the sender IP and the recipient and returns a temporary error. All valid servers will then resend the emails, spamming scripts will not. Other efficient protocol level solutions in Postfix can be used to make sure the mail server is RFC compliant and prevent email looping (a very simple method would be setting a maximum numbers of “Received” headers per email). With policy services Postfix’ behaviour of mail delivery can be fine-tuned. Making changes to configurations of such services require a restart of Postfix. Installation  # apt-get install postfix You will be asked a series of questions. On the first prompt, select //Internet Site// option as the general type for Postfix configuration, continue, and then add domain name to system mail name. Basic configuration  Configure the basics: # cp /etc/postfix/main.cf{,.old} # vi /etc/postfix/main.cf myhostname = $hostname //Use command \"hostname\" to display your hostname myorigin = $mydomain //Add domain, so others can not abuse the mailsystem relay_domains = domain1.com, domain2.com, domain3.com //Add the domains the system will handle Multiple local domains  Postfix can be configured for more than one domain via the use of a hash file. This file contains the list of domains postfix will accept for local delivery. Open the /etc/postfix/main.cf configuration file and append: virtual_alias_domains = hash:/etc/postfix/virtual_domains Create the file, and add all the domains postfix should accept in it (one per line). The postmap program expects the file to have 2 columns but the second column is ignored. Do add that second column and add comments like #something in it. It will work without, but you get warnings. To make the hashfile: # postmap /etc/postfix/virtual_domains Remote access  The postfix SMTP server access table contains the list for access control for remote SMTP clients: Open the /etc/postfix/main.cf configuration file and append: check_sender_access = hash:/etc/postfix/access Create the file, and add all the host names, network addresses, and envelope sender or recipient addresses postfix should accept in it (one per line) To make the hashfile: # postmap /etc/postfix/access Managing mailboxes  Don’t manage mailboxes from postfix. Redirect messages for delivery via POP/IMAP server. In case of dovecot there is dovecot-lda aka deliver that do everything and much more, like user-controlled message filtering, quota management, autoreplying etc. Most modern POP/IMAP servers have a lot of utilities for common tasks in infrastructures. Maildir is the newer and preferrable format due to the lot of improvements comparatively to mailbox. It has an index for each folder that allow to control duplicates, expiration times and even full-text search and is faster on a huge pile of messages. Dovecot can easily operate maildir with 300k messages in it without any visible slowdown. Abuse and spam  SMTP restrictions  The smtpd_*_restrictions directives can be used to set what data is accepted for any SMTP command, for example in /etc/postfix/main.cf : # smtpd_recipient_restrictions = reject_invalid_hostname, reject_unknown_recipient_domain, reject_unauth_destination, reject_rbl_client sbl.spamhaus.org, permit # smtpd_helo_restrictions = reject_invalid_helo_hostname, reject_non_fqdn_helo_hostname, reject_unknown_helo_hostname Blacklisting  Manually blacklisting incoming emails by sender address can easily be done with Postfix. Create and open an /etc/postfix/blacklist_incoming file and append sender email addresses: user@domain.com REJECT To create a database, use postmap command: # postmap hash:blacklist_incoming And append before the first permit rule in /etc/postfix/main.cf : smtpd_recipient_restrictions = check_sender_access hash:/etc/postfix/blacklist_incoming Use of others’ lists is also possible. An RBL list is a spammer blacklist of domains. In /etc/postfix/main.cf : smtpd_client_restrictions = reject_rbl_client dnsbl.sorbs.net Greylisting  Install the postgrey package. Open up /etc/postfix/main.cf and append smtpd_recipient_restrictions = check_policy_service inet:127.0.0.1:10030 Then start/enable the postgrey service and after that reload the postfix service. Its configuration is done via editing the postgrey.service file. Copy it over to edit it. # cp /usr/lib/systemd/system/postgrey.service /etc/systemd/system/ Using postgrey it is also possible to add automatic whitelisting based on successful deliveries. These then don’t have to wait any more. This can be done by , you could add the adding the --auto-whitelist-clients=5 (default is 5) but the preferred method is the override: # cat /etc/systemd/system/postgrey.service.d/override.conf [Service] ExecStart= ExecStart=/usr/bin/postgrey --inet=127.0.0.1:10030 \\ --pidfile=/run/postgrey/postgrey.pid \\ --group=postgrey --user=postgrey \\ --daemonize \\ --greylist-text=\"Greylisted for %%s seconds\" \\ --auto-whitelist-clients Add your own list of whitelisted clients in addition to the default ones by creating the file /etc/postfix/whitelist_clients.local (one host or domain per line). Restart the postgrey.service for the changes to take effect. Header filtering  Postfix header or body_checks are designed to stop a flood of mail from worms or viruses. Optional lookup tables for content inspection of primary non-MIME message headers are used. This does not decode attachments or unzip archives. Default is empty . In this mechanism checks can be made against regular expressions. For example, postfix can search for any string in an incoming email. In /etc/postfix/main.cf set: header_checks = regexp: /etc/postfix/headers_checks Then in /etc/postfix/header_checks append regular expressions for what to check for: /^(.*)@domain.com/ REJECT //Match any recipient/sender for a specific domain The mechanism can also be used to hide a sender’s IP and user agent in the Received header. This is a privacy concern mostly for sending email with Thunderbird. The received header will contain LAN and WAN IP and info about the email client used. Append to main.cf : smtp_header_checks = regexp:/etc/postfix/smtp_header_checks Create /etc/postfix/smtp_header_checks and append: /^Received: .*/ IGNORE /^User-Agent: .*/ IGNORE Relaying  Relaying means that a sender with host in domain A, connects to our mailer in domain B to send an email to someone in domain C. A party for spammers. The easiest way to control relaying is to use the smtpd_recipient_restrictions directive; If this directive is left undefined, Postfix uses the information given in the directives...",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8d791eba755fcea7b9bff345f4cfb4e4",
    "u": "https://mailserver.tymyrddin.dev/docs/dmarc/dmarc",
    "t": "DMARC configuration ",
    "c": "DMARC configuration  DMARC allows the domain owner to specify what happens with failed emails and get feedback when they arrive. Basically, there are three actions receiving servers can take if BOTH SPF and DKIM checks fail: none , quarantine , and reject . Setting it up takes five-steps as listed on the DMARC website Deploy DKIM & SPF . You have to cover the basics, first. Ensure that your mailers are correctly aligning the appropriate identifiers. Publish a DMARC record with the “none” flag set for the policies, which requests data reports. Analyze the data and modify your mail streams as appropriate. Modify your DMARC policy flags from “none” to “quarantine” to “reject” as you gain experience. Flaws as per the infosec institute We may think that, using SPF and DMARC would complete the holes in the mail filtering system. There is a small side effect for this method, i.e. the mail reaches the receiver end if either one of SPF or DKIM passes it in. If an attacker manages to find a way to pass SPF or DKIM, it will reach the inbox. An attacker can bypass the DMARC by creating a perfect mail copy if the following steps are followed: If the attacker uses a server IP that passes through SPF policy. This could be done by selecting the same email provider as the sender. Attacker can make use of any authorized server to create a mail; this mail will be given proper DKIM keys as other legitimate mail and would reach the receiver end. Let’s say that the senders side is fully configured with SPF, DKIM, DMARC and the receiver side is left without any proper configuration, the mail could easily reach the receivers end, since there are no properly established filters. Don’t fall asleep. Keep checking emails , and add PGP signing of messages.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6be683b6cc26ce267a61a3d9b53959fc",
    "u": "https://mailserver.tymyrddin.dev/docs/servers/dovecot",
    "t": "Dovecot ",
    "c": "Dovecot  Dovecot is an open source IMAP and POP3 server for Linux/UNIX-like systems, written primarily with security in mind. Dovecot aims to be a lightweight, fast and easy to set up open source mailserver. The below is for debian 9 (probably also works on buster) Installation  apt-get install dovecot-common dovecot-imapd dovecot-pop3d Get SSL certificate  Using Let’s Encrypt, request a certificate for the mail server by (replacing mail.mydomain.com with the fully qualified domain name (FQDN) of your server): certbot certonly --standalone -d mail.mydomain.com Configuration  Dovecot’s configuration files are in /etc/dovecot/conf.d/ . The default configuration is ok for most systems, but make sure to read through the configuration files to see what options are available. By default dovecot will try to detect what mail storage system is in use on the system. To use the Maildir format edit /etc/dovecot/conf.d/10-mail.conf to set it: mail_location = maildir:~/Maildir To configure it for the SSL certificates, open /etc/dovecot/conf.d/10-ssl.conf and append: ssl = required ssl_cert = </etc/letsencrypt/live/mail.mydomain.com/fullchain.pem ssl_key = </etc/letsencrypt/live/mail.mydomain.com/privkey.pem To force SSL/TLS encryption, open /etc/dovecot/conf.d/10-auth.conf and make sure: disable_plaintext_auth = yes SASL  In the main configuration file /etc/dovecot/conf.d/10-master.conf , uncomment the paragraph for Postfix in the auth service block: service auth { # Postfix smtp-auth unix_listener /var/spool/postfix/private/auth { mode = 0660 } } This will create the private/auth path for the SASL configuration of Postfix. Because Postfix runs chrooted in /var/spool/postfix , a relative path must be used. Integration with postfix  In /etc/postfix/master.cf append: dovecot unix - n n - - pipe flags=DRhu user=email:email argv=/usr/lib/dovecot/deliver -f ${sender} -d ${recipient} Firewall  To access the mail server from another computer, configure the server firewall to allow connections to the server on the necessary ports. The default ports are IMAP - 143; IMAPS - 993; POP3 - 110; and POP3S - 995. Configuration resources  Dovecot configuration Dovecot Quick Configuration",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7ebab8b4532c5ef47e3ce812b894baf5",
    "u": "https://pap.tymyrddin.dev/docs/mobile/spyware",
    "t": "Spyware ",
    "c": "Spyware  Spyware infects a device via the installation of a malicious app that has disguised itself as harmless . This means you could unknowingly infect your device with malware by downloading a malicious file from the web. Spyware can be spread to a device via pishing , smishing, and vishing. Spyware is designed to track activity on whatever device, or devices, it is installed on: websites visited, contacts, applications used, and login details for various online accounts, meaning payment details, social media logins, sensitive files, and other confidential data become vulnerable. Detection  Spyware uses the device resources, making the battery drain unusually fast. Spyware causes an increase in CPU usage. This causes the CPU to overload and overheat. Unusual changes and charges. Suspicious credit card activities. Increased data usage. Because spyware runs in the background continuously, it interferes with the shutdown process, making it slower. Spyware can record calls. While recording, it can create weird background noises like taps, static noises, distant voices, echoes, or random sounds. These noises can be heard on mobile phone calls or during video conferences. Mitigation  Manual removal does not require any tool or technical knowledge. Factory reset. Using Spyware Removal Software. Prevention  Have antivirus software installed on all devices. Many antivirus subscriptions offer multi-device cover, so check to see if your existing plan offers this, or whether you can find a provider that does. Keep device operating systems as up to date as possible. Having the most recent upgrade can improve security levels. Always use strong passwords on your social media accounts, user profiles, and apps. Use a different password for each account.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "87a6b4aaa47253207af374a21496c933",
    "u": "https://pap.tymyrddin.dev/docs/mobile/stalkerware",
    "t": "Stalkerware ",
    "c": "Stalkerware  Spyware and stalkerware are similar, yet not the same. Both are types of malware used to track a person’s activity on a device. But stalkerware is a more personal way of invading another person’s privacy. Stalkerware has to be physically installed, meaning that the attacker has to have direct access to the devices they are trying to compromise. Stalkerware is most likely used by a parent or partner. Stalkerware is less likely to masquerade as something else entirely. Not always. In some cases it claims to be a child protection app, featuring disguise, in which case it is clear it is used to spy on a partner without him/her knowing. Even without, when intended to track children’s activities, its intent is always considered malicious, as it invades privacy. With stalkerware installed on another person’s device, the adversary can activate the camera or microphone, view login details to different accounts, and sometimes even intercept phone calls. Growing list of found stalkerware  Tool Claims Platform mSpy Chats, photos, videos, and location. Android and iOS XNSPY Photos, videos, and social media chats Android eyeZy Feature-heavy phone spying app Android and iOS ClevGuard Activities Android, iOS, and Windows SpyBubble Real-time complete phone tracking iOS and Android Cocospy Control and Remote Surveillance Android and iOS uMobix Remote streaming of audio and video Android and iOS Hoverwatch Full-Featured Invisible Android Tracker Android and iOS FlexiSPY Emails, IM and browser activity Android pcTattetale Activities Android & Windows TheOneSpy Activities including live streaming Android Spyine Monitoring smartphone in stealth mode Android and iOS TheWiSpy Tracking location and monitoring files Android Detection  Stalkerware is designed to be stealthy so that the victim never realises their smartphone has been infected. Many of the usual tell-tale signs of spyware (unwanted pop-ups, slow performance, over-heating) are not present with stalkerware. Mitigation  Use a security app to scan the device. If you find stalkerware, report it to law enforcement (may not always and everywhere be an option). Prevention  Equip devices with a password, fingerprint login, or similar. This adds an extra layer of protection, as stalkerware cannot be remotely installed. Use routine malware scans (security app).",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ca1d9f37a6650ee60cb466197067ab49",
    "u": "https://pap.tymyrddin.dev/docs/mobile/vishing",
    "t": "Vishing ",
    "c": "Vishing  Vishing is a type of phishing that uses phone, robocall, voicemail, voice over internet protocol (VoIP), and social engineering to contact you in an attempt to gather personal information about you. Robocalls  A robocall is an automated telephone call that delivers a pre-recorded message. Organisations, telemarketers, and adversaries use robocalls to reach millions of phones every single day. They make people’s phones ring with natural-sounding recorded voices and offer everything from auto warranties to games. In some cases it can even issues a threat to get your attention. Some robocalls can even respond to your questions. Robocalls are made using auto-dialing software, and may use caller ID spoofing technology to make it seem as if the phone call is coming from someone else. Detection  If callers are legitimate, it should not be difficult to authenticate their professional affiliation with another phone call. If they do not provide the information necessary to verify their identity, they can not be trusted. Callers creating a sense of urgency is a huge social engineering red flag. Caller sending unsolicited email or SMS messages is another red flag. Mitigation  Hang up as soon as you notice it is a robocall. Never say “yes” to any question. Ignore any and all instructions, not even seemingly harmless instructions. Slippery social engineering slope. Write down any information the person or robot provides on the call — without providing any details of your own. Do not give out any personal information over a phone, ever. Do not click on links in emails or in mobile phone SMS text messages the caller might send. Phone technology that locks a phone line after hanging up and redirecting next calls to the fraudulent caller exists. Do not call back using the same phone on which you received the call. Note the number, what they said/did and report the call to a “Do Not Call” registry and/or anti-fraud program (if existing in your country). Prevention  Keep your phone number private (including on social media). Be aware of caller ID spoofing. Do not answer unknown numbers. Many mobiles offer a “whitelisting” tool that will allow calls only from numbers in your contact list. Use it: On iPhones (iOS 13 and later), go to Settings -> Phone , scroll down, tap Silence Unknown Callers , and turn it on. Calls from unknown numbers are silenced and sent to your voicemail, and will appear in your recent calls list. On Android phones, tap the phone icon at the bottom of the home screen, then in the top right corner of the screen, tap the three dots -> Settings -> Blocked Numbers . Enable Block Calls From Unidentified Callers by tapping the toggle switch on the right. Google’s Pixel phones have a tool called Call Screen . When you receive a call from any number, you can tap Screen Call on your home screen and Google Assistant will answer it for you and ask the caller to identify himself or herself and the reason for calling. When a caller responds, a real-time transcript of the response is displayed. Ask governments for “Do Not Call” registries and Anti-fraud programs, if not available yet.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "dd8b586d2a7d41882e6a74daa1074fae",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/raas",
    "t": "Ransomware-as-a-Service (RaaS) ",
    "c": "Ransomware-as-a-Service (RaaS)  Think of Ransomware-as-a-service (RaaS) in the larger Malware-as-a-Service (MaaS) ecosystem. RaaS allows less experienced adversaries to carry out attacks. While phishing is still used, drive-by download , VPN vulnerabilities and distribution over botnets are more likely used. For workstations (Windows, macOS, *nix), a ransomware infection means that data on the device has been encrypted or the operating system is being blocked, and its owner receives a message to pay a ransom. Mobile ransomware (Android, iOS) variants can also encrypt, but most use other techniques. While individuals, companies, and NGOs are all targets, the compromise of a small number of user accounts that have additional access or privileges, are especially valuable to adversaries . A ransomware attack can mean the loss of data, spending large sums of money, or both. We do it for [insert reasons here]  RansomedVC published the data of nine victims on its leak site in August 2023. The group has adopted the ideology of many other ransomware actors: “We are doing it for pentesting”, and humorously adds that any vulnerabilities found must also be reported to Europe’s General Data Protection Regulation (GDPR), threatening victims with data breach fines if the ransom is not paid.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d438285f31a6238711a491427a4dee9c",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/botnets",
    "t": "Botnet activity increase ",
    "c": "Botnet activity increase  A botnet is a collection of devices connected via the internet, each running a single bot or series of bots. Distributed Denial of Service Attacks (DDoS), crypto mining and click fraud are common activities done by botnets to enable adversaries to access a device. Attackers use Command and Control (C&C) software to control devices. Nearly all malware families use botnets for command and control (C&C) communications. With the growth in malware families and variants, it was to be expected that botnet activity increases as well. The number of “active days” increased - Measured by researchers as the time between when botnet activity was first detected by their sensors and when the botnet stopped communicating. The time between running C&C’s if detected has decreased, thanks to using attack infrastructure as code (IAC) . Current  Live botnet threatmap worldwide - Spamhaus",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c50d429621d33232df07e67720dfa8fa",
    "u": "https://pap.tymyrddin.dev/docs/mobile/swapping",
    "t": "SIM swapping ",
    "c": "SIM swapping  In SIM swapping an adversary steals your number and assigns it to a new SIM card in a phone they control. It is the same process you go through when you get a new phone and the mobile carrier gives you a new SIM card. The adversary can now use your SIM card to steal further information to log in to your accounts and either enter a verification code or reset the account password using the code or link sent to the phone. Prevention   the mobile phone operator and add extra security or temporarily freeze number porting to help protect yourself from SIM swapping. Check if your accounts let you use a non-SMS multifactor authentication option, in which you provide two pieces of proof to verify your identity.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cda1331e87cff4008d0ffe5771715666",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/maas",
    "t": "Malware-as-a-Service (MaaS) ",
    "c": "Malware-as-a-Service (MaaS)  Think of Malware-as-a-Service (MaaS) and the larger Crime-as-a-Service (CaaS or Craas) market as a variation of the Software-as-a-Service (SaaS) business model. For a reasonable monthly fee, adversaries who do not know how to write their own InfoStealer or Ransomware yet, can simply pay to use one written by an expert. It works similar to legitimate subscription services. In this business model, developers offer negotiations, cryptocurrency transfers, leak site management, ransomware development, botnets, etc. to multiple affiliates, in trade for cryptocurrency and not running the risk of getting identified and arrested. We only had to wait for it. Anyone with a few hundred euros worth of cryptocurrency can get started with a few clicks. Tongue, cheek  Deploy Disaster-Recovery-as-a-Service (DRaaS) to ensure quick recovery in case of an attack.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "35416cea473fc5bcc202d1b7256cddfd",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/adversaries",
    "t": "Unusual suspects ",
    "c": "Unusual suspects  Nation state  Nation-state actors and criminals-with-license from China and Russia, similar actors from the Five Eyes (make that many eyes), adversaries from other nation states, for information and profit. These have virtually unlimited resources (from taxpayers), direct access (including through confiscating equipment), and if not for that, never-ending exploits/backdoors (gifts that keep giving), anonymisation and C&C, immunity from prosecution (laws are for subjects, they stand above it), and plausible deniability (lying). These adversaries believe it is their right/obligation/duty. Digital crime gangs  Organised digital crime gangs, in it for profit. These have virtually unlimited resources too (from previous attacks), reverse engineered or copied never-ending exploits/backdoors (gifts that keep giving), and lying. Insiders  If you are defending an organisation, insiders working for either of the two groups (for money), or just unhappy people out for some (personal) revenge for something. Anyone, really  If you have bitcoin and can click, you can be an adversary, thanks to Malware-as-a-Service (MaaS) . All of ‘em  In all cases, adversaries are highly motivated and/or conditioned, and are lying, including to themselves with “We do it for [insert reasons here]”. In general, attackers are multiplying, diversifying their exploits, and making attacks more targeted. Cybercrime organisations and nation-state offensive groups operate much more like traditional companies, with responsibilities, deliverables, and objectives. They quickly adopt new technologies, and have deep pockets from past exploits or from nation-state sponsors, allowing experimenting with and incorporating new technologies like generative AI, which make their attacks more complex and much harder to detect. Distribution seems to have become more concentrated with adversaries carrying out more targeted attacks using quickly adaptable and sophisticated playbooks ( which were probably adopted from red teaming ).",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "fe4e93e0a0862d23d04eef7287e0533f",
    "u": "https://pap.tymyrddin.dev/docs/thm/cases",
    "t": "Basic phishing labs ",
    "c": "Basic phishing labs  DIY on TryHackMe: Phishing Analysis Fundamentals - Learn all the components that make up an email. Phishing Emails in Action - Learn the different indicators of phishing attempts by examining actual phishing emails. Phishing Analysis Tools - Learn the tools used to aid an analyst to investigate suspicious emails.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1ee9b53c306897b2bd103c7da1282804",
    "u": "https://macos.tymyrddin.dev/",
    "t": "Hardening macOS ",
    "c": "Hardening macOS  Version 0.1: These mitigations are all based on Catalina. Supposedly, Big Sur has better security . Some of the below is still applicable and useful. When we have a Big Sur set up we will test it, and split and update these mitigations. Authentication Introduction Disable automatic login Require a password when resuming Make that more secure passwords Use a password manager Use multi-factor authentication (MFA) Protect SSH access with MFA Services and applications Introduction Restrict which apps can run System integration protection (SIP) Secure browsers that protect your privacy Use a secure messaging service Use secure email services Use SSH tunnels Use a VPN service Use a firewall as a VPN fail-safe mechanism Use alternative DNS servers Use a Tor proxy Change MAC address Renew IP lease Edit hosts file Data Introduction Set up the time machine and backups in macOS Enable full disk encryption using FileVault Password protect files and folders Privacy Introduction Disable location services and other privacy settings Remove metadata from files Edit exif metadata in images Remove metadata with hex editors Clean machine with BleachBit Malware Introduction Mac myths Scan and clean machine Catch and remove daemons and launch agents Analysing trojans Operations security Introduction Use email securely Detecting fake emails and phishing Browse more safely Check integrity of downloads ‘;–have i been pwned? Guards! Guards! Introduction Alphabet soup macOS intrusion detection systems OSSEC",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "66316622b4941ff48a4787b7a15dc9ea",
    "u": "https://macos.tymyrddin.dev/docs/services/dns-servers",
    "t": "Use alternative DNS servers ",
    "c": "Use alternative DNS servers  When you don’t set up DNS servers on your computer or router, your DNS queries will run on your ISP’s DNS servers. Without VPN (with killswitch and/or firewall set as a VPN fail-safe mechanism ), DNS requests are most likely sent unencrypted, which can lead to common DNS attacks. Domain hijacking (Redirection) DNS flood attack (a type of DDoS attack) DNS spoofing or DNS cache poisoning DNS hijacking (malware infection on a local device to hijack DNS to redirect traffic to a phishing site) And any man in the middle of your traffic can see your online behaviour and the websites you visit. Your ISP’s DNS servers see every search you make in your browser. Using your ISP’s DNS servers as default DNS servers doesn’t do anything for security or privacy. Alternative DNS servers  OpenNIC is a group of volunteers who run an alternate DNS network offering free DNS servers. Depending on your location, you are offered different servers. OpenNIC offers DNS neutrality (it does not censor content), and you get the right to choose how much data OpenNIC logs. OpenDNS is a cloud-based service offering three solutions in their Home package, two of which are free. To connect with your nearest DNS server, and for faster page load times, it uses anycast routing. DNSWatch also offers DNS neutrality and does not log any DNS queries or record history. Quad9 DNS blocks malicious and suspicious domains using security intelligence from a group of companies to improve security. They do keep logs on some activity. Use wireshark to check for leaks  To check if you have DNS leaks, fire up Wireshark : Start capturing on the active interface and connect to the VPN. After capturing either a fixed number of packets, or an amount of data or for a specific time period, go to //Statistics -> Endpoints// There should only be one public IP address, namely that of the VPN server that you’re connected to. The ‘’10.0.2.15’’ in this image is a local address.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "bcff69e0287204853b3686eb8a3a6a3f",
    "u": "https://macos.tymyrddin.dev/docs/authentication/resuming",
    "t": "Require a password when resuming ",
    "c": "Require a password when resuming  Password protect your Mac when it goes to sleep or when the screen saver begins. Go to Apple > System Preferences and click Security & Privacy. Make sure the General tab is selected. Check the Require password box. Select how soon after your Mac goes to sleep, or the screen saver begins. It’s a good idea to choose Immediately, especially in a public place, or anywhere there are other people around. You will be able to wake the computer with your local password .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "852dc5e3454f47b2891e51d3af654da7",
    "u": "https://macos.tymyrddin.dev/docs/services/vpn-fail-open",
    "t": "Use a firewall as a VPN fail-safe mechanism ",
    "c": "Use a firewall as a VPN fail-safe mechanism  If you simply add a VPN using common instructions, it generally “fails open”. That means, if the VPN breaks down, because the connection is interrupted, traffic will be sent without the VPN. It is much safer when it “fails closed”, meaning that when the VPN connection breaks down, the whole internet connection must be down as long as the VPN connection is not restored. If your chosen VPN does not include being able to set a kill switch, you can use your firewall as a fail-safe mechanism: Kill switch using pf  Get the IP address of the VPN gateway that the kill switch is intended for using the host command. Get the network interface name connected to your default gateway and the subnet of the local network using the route command. After connecting to the VPN, by running the command `ifconfig -a and searching for POINTOPOINT, find the interface used by the VPN: $ ifconfig -a | grep -i POINTOPOINT utun0: flags=8051<UP,POINTOPOINT,RUNNING,MULTICAST> mtu 2000 Create a killswitch.pf.conf configuration file (The file can be created on the user $HOME directory and have any name): int_en1 = \"[network interface name]\" vpn_utun1 = \"[interface used by the VPN]\" vpn_ip = \"[IP address of the VPN gateway]\" set block-policy drop set ruleset-optimization basic set skip on lo0 block all block out inet6 # dns pass quick proto {tcp, udp} from any to any port 53 keep state # Allow broadcasts on internal interface pass from any to 255.255.255.255 keep state pass from 255.255.255.255 to any keep state # Allow multicast pass proto udp from any to 224.0.0.0/4 keep state pass proto udp from 224.0.0.0/4 to any keep state # Allow ping pass on $int_en1 inet proto icmp all icmp-type 8 code 0 keep state # Allow dhcp pass on $int_en1 proto {tcp,udp} from any port 67:68 to any port 67:68 keep state # Use only the vpn pass on $int_en1 proto {tcp, udp} from any to $vpn_ip pass on $vpn_utun1 all Load the PF rules: $ sudo pfctl -Fa -f ~/killswitch.pf.conf -e To disable: $ sudo pfctl -d To load your system defaults (no kill switch): $ sudo pfctl -Fa -f /etc/pf.conf -e",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "916c7d6b922056a13594fe1cb80c5eaf",
    "u": "https://macos.tymyrddin.dev/docs/opsec/integrity-downloads",
    "t": "Check integrity of downloads ",
    "c": "Check integrity of downloads  When downloading an ISO image of, for example, the latest Linux distro, installing or upgrading packages, or downloading software, you can verify the files have downloaded correctly and securely by using checksums. Checksums ensure the integrity of data portions for data transmission or storage. Checksums is a simple error-detection scheme in which each transmitted message is accompanied by a numerical value based on the number of set bits in the message. The receiving station then applies the same formula to the message and checks to make sure the accompanying numerical value is the same. If not, the receiver can assume that the message has been garbled (or was altered). Verifying downloaded software  AMFI: checking file integrity on your Mac",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "71aea0e81c79127169fb3f47178da7ce",
    "u": "https://macos.tymyrddin.dev/docs/data/disk-encryption",
    "t": "Enable full disk encryption using FileVault ",
    "c": "Enable full disk encryption using FileVault  FileVault is a built-in utility on your Mac that encrypts all the data on your hard drive. When FileVault is enabled, the contents of your drive cannot be accessed without a login password or recovery key. FileVault is off by default, as most users may find that encrypting the entire drive is a bit overkill. Having to type a password to open a file and the time required to initially encrypt your entire drive may outweigh the security FileVault provides. For home use, in a non-threatening environment, maybe. As activist protecting land, animal and/or human rights, most likely not. Enable FileVault  Go to System Preferences -> Security & Privacy and click the FileVault tab. Click the lock at the bottom to be able to make changes and enter your administrator password. Click Turn On FileVault Choose how to unlock your disk and reset your password if you ever forget it: Use iCloud (easier, but less secure) Create a FileVault recovery key (store on paper and/or dedicated USB stick) Create a Vault  On a Mac, DMG files are usually associated with installing apps. DMG files can also be used as encrypted vaults to store sensitive files and folders. This feature is like using a program like VeraCrypt on Linux. Go to Disk Utility -> File -> New Image -> Blank Image and enter the information for the DMG file File name in Save As Where to save the file Size of Vault Format Encryption type Enter a password when asked to secure the DMG file. Once it is created, it is opened. It shows up in Finder and on the desktop as another drive. Move your private files and folders in it. To lock it, eject it from its desktop icon like any other external hard drive connected to your Mac. To open it, double-click on the file and enter your password.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3697818c2651fef9ead96f6486c818ee",
    "u": "https://macos.tymyrddin.dev/docs/services/restrict-apps",
    "t": "Restrict which apps can run ",
    "c": "Restrict which apps can run  The Gatekeeper allows you to choose from where apps can be installed. You can choose to only allow apps from the App Store to be installed or apps from the App Store and from identified developers. To choose one of these option, go to Apple -> System Preferences -> Security & Privacy -> General You can still install apps from anywhere, but you must specifically approve each app separately on the General tab on the Security & Privacy screen in the System Preferences.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "351cfd07039d20b28d587fce37414dc3",
    "u": "https://macos.tymyrddin.dev/docs/services/tor-proxy",
    "t": "Use a Tor proxy ",
    "c": "Use a Tor proxy  Tor proxy  Install: $ brew install tor Start it: $ tor Set network proxy settings via System Preferences  Go to System Preferences > Network From Location dropdown at the top, select Edit Locations Create a new location by hitting the plus button and name it Tor. Hitting Done will select the new location which is now ready to be configured. Go to Advanced > Proxies and activate SOCKS Proxy and add: SOCKS proxy server: localhost Port: 9050 Now you can switch to this location from your menu bar under Location whenever you start up Tor. Switching to the Tor location routes all network traffic on your system through Tor. You have to repeat these steps for every network interface, ethernet, Wi-Fi. Notes  If a government makes their own national internet, or routes traffic through specific servers to use deep packet inspection (DPI), running Tor may not provide security if the government is able to see the entire path. Sometimes the Tor network is censored, and clients can’t connect to it. An increasing number of censoring countries are using Deep Packet Inspection (DPI) to classify Internet traffic flows by protocol. While Tor uses bridge relays to get around a censor that blocks by IP address, the censor can use DPI to recognize and filter Tor traffic flows even when they connect to unexpected IP addresses. With pluggable transports, censorship against Tor can be bypassed. Not only that. If an attacker can see your traffic, and can see the website you’re visiting, even with a path outside the adversary’s control - they will still be able to correlate the traffic and learn you are visiting the website. If the same connection (the same set of relays) were to be used for a longer period of time a Tor connection could be vulnerable to statistical analysis, which is why the client software changes the entry node every ten minutes.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "41e93c2df0a437f82dc06adb857a0c79",
    "u": "https://macos.tymyrddin.dev/docs/malware/daemons-and-agents",
    "t": "Catch and remove daemons and launch agents ",
    "c": "Catch and remove daemons and launch agents  Automagically assisted  EtreCheck (free for the first five reports) Lingon X KnockKnock BlockBlock Manually  Open the Activity Monitor app, and choose View -> All Processes. At the top are two main processes: kernel_task and launchd , with process ID (PID) 0 and 1 respectively. launchd is the primary parent process when the system starts. It is also the last process to exit when the system shuts down. Do NOT remove it. The core responsibility of launchd is to launch other processes or jobs on a scheduled or on-demand basis. These processes come in two flavours: LaunchDaemons and LaunchAgents. LaunchDaemons typically run as root, and can be found in /System/Library/LaunchDaemons (native macOS processes) and /Library/LaunchDaemons (installed third-party apps). LaunchAgents start when a user logs in. They can access the user interface and display information, and can be found in Library/LaunchAgents (all user accounts), ~/Library/LaunchAgents (user account), and /System/Library/LaunchAgents (macOS only). Before logging in, launchd runs services and other components specified in .plist files from the LaunchDaemons folder. After logging in, launchd runs services and components defined in .plist files from the LaunchAgents folders. Those in /System/Library are all part of macOS and protected by System Integrity Protection. .plist files follow the standard reverse domain naming system: company name, followed by an application identifier, and ending with the property list file extension (.plist). For example, co.clario.Clario.plist . The public LaunchDaemon and LaunchAgent folders are open to both legitimate and illegitimate apps. You can monitor these folders with Folder Actions. Folder actions  Open the AppleScript Editor app. Click Preferences and choose General -> Show Script menu in menu bar Click the Script Menu icon and choose Folder Actions -> Enable Folder Actions Select Attach Script to Folder in that same menu A dialog box will pop up. Select add - new item alert Click OK to open a Finder window. Select the user LaunchDaemon folder and click Choose Repeat the procedure for every LaunchAgents folder. Then: Open Finder and click Go > Go to Folder Type ~/Library/LaunchAgents and click Go Right-click the LaunchAgents folder, and choose Services -> Folder Actions Setup to bind the new item alert script to each folder. In the dialog box that pops up, you’ll see the list of folders in the left column and script in the right column. If there are no scripts, click the plus (+) button and add new item alert.scpt. Now macOS will show an alert popup whenever a new item is added to one of these folders, allowing you to immediately know when illegitimate apps try to inject themselves into the system in the background. Remove items  Be careful. Not all third-party .plist files are malicious. They can be: Components of legitimate installed apps Remnants of old apps you no longer use Leftovers from previous macOS upgrades Migration Assistant leftovers PUPs (potentially unwanted programs), adware, and malware DO NOT delete any components of installed apps. To remove remnants of old apps, leftovers from previous macOS upgrades, PUP’s, adware and malware, just delete the .plist file and reboot. Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "95a445b888e0e5c47a2f407fbadacb54",
    "u": "https://macos.tymyrddin.dev/docs/malware/clean-machine",
    "t": "Scan and clean machine ",
    "c": "Scan and clean machine  Automagically  Choose your scanner carefully, have a look at AV Comparatives’ test results for macOS . Manually  Check activity monitor  Open Activity Monitor from Applications -> Utilities Go to the CPU tab Click the % CPU column to sort high to low, and look for high CPU use If you see a process that looks suspicious, do a DuckDuckGo search on it Check for unwanted applications  Go to the Applications folder Look for any apps you do not recognize or do not remember installing Check with DuckDuckGo whether they are legitimate or not If they are not, or if you are suspicious, delete them and empty your Trash Note that this does not help much with trojans , evil files made to look like legitimate apps. Look at login items  In System Preferences, select Users & Groups Go to the Login Items tab Look through the list, and select anything suspicious Click the minus button to remove it Note that LaunchDaemons and LaunchAgents will not appear in this list. Fail  If all else fails, go to a previous point in time or backup. If that fails too, the NVRAM or Time Machine or backups may even be infected. It is possible for malware to persist across a re-format and re-install, if it is sufficiently ingenious and sophisticated: if for example, it can persist in NVRAM, in the firmware for peripherals (some hardware devices have firmware that can be updated, and thus could be updated with malicious firmware), or with a virus infecting data files on removable storage or on your backups. Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "eb8e602fd39b3da8a0e81a60c0304298",
    "u": "https://macos.tymyrddin.dev/docs/malware/myths",
    "t": "Mac myths ",
    "c": "Mac myths  There are no viruses for Mac  On the contrary, that macOS has been less affected by viruses in the past has resulted in weaker defence mechanisms. And this myth is exactly what makes macOS attractive for virus creators and social engineers. Sleepy users and weakened defences. Apple quickly fixes vulnerabilities  Nope. In May 2019 Filippo Cavallarin discovered a vulnerability in the Gatekeeper, gave Apple 90 days to fix it, and having had no response, went public with it on his blog . Gatekeeper is the tool that prevents unauthorised apps from being installed on a Mac. And Filippo Cavallarin was not the first. Independent virus researchers who discover fresh security holes often get vague responses from Apple. And even when, the solution take a long time.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ee3a5cb39d38e3a2566126352ac35865",
    "u": "https://macos.tymyrddin.dev/docs/data/time-machine",
    "t": "Set up the time machine and backups in macOS ",
    "c": "Set up the time machine and backups in macOS  The Time Machine works by creating historic backups of your Mac. It keeps older copies of files even after you edit or delete them, until a time when you need more storage for newer backups. Thanks to these historic backups, you can travel back in time to restore your Mac’s data from days, weeks, or months ago. Requirements are a large speedy solid-state drive with two partitions: a partition for the Time Machine backup and the other partition to store files. Partitioning the drive  Connect the external hard drive to the Mac. Go to Applications -> Utilities and launch Disk Utility Select the external drive from the sidebar and click the Partition button. Use the Add (+) option to create a new partition and choose Name, Format, and Size for each partition by selecting it in the diagram. The Time Machine partition must use the Mac OS Extended (Journaled) format. The file storage partition can use any format. Choose ExFat if you plan to use it with Windows. Otherwise, choose Mac OS Extended (Journaled). Click Apply, followed by Partition. Set up time machine  Go to System Preferences -> Time Machine Click Select Disk and choose the Time Machine partition Time Machine backups will start from scratch from this date forward. After the first backup, you can automatically start a backup with Time Machine (check the Backup Up Automatically box), or start a backup manually by accessing the Time Machine menu and starting the backup from there. Backups for the file storage partition  Create separate backups for anything in your file storage partition. Acronis True Image Carbon Copy Cloner ChronoSync Get Backup Pro SuperDuper",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "935923c87edd8ad51a064d2488741922",
    "u": "https://macos.tymyrddin.dev/docs/malware/readme",
    "t": "Introduction ",
    "c": "Introduction  MacOS has built-in protection against malware . XProtect scans for malware using a database of virus signatures maintained by Apple, but is limited. Apple is not a dedicated security company, and it has not struggled much with malware in the past, leading to two major myths . Big Sur is available as a free upgrade, promising the most secure version of macOS. The biggest threats to a macOS come from potentially unwanted programs, adware, ransomware and other code that finds its way onto a Mac because it is bundled with legitimate-looking software or because it was downloaded as something else. Common signs of Mac malware: Extremely slow performance A browser homepage change Pop-ups and other intrusive ads Freeze-up and restarts Browser redirection Find these, or think you may have an infected system, or just wish to know more: Endpoint detection and response Malware analysis DIY: Scan and clean machine Catch and remove daemons and launch agents Analysing trojans",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b4dc7fc4686a1ed74eab1de1cb823eb7",
    "u": "https://macos.tymyrddin.dev/docs/privacy/metadata-images",
    "t": "Edit exif metadata in images ",
    "c": "Edit exif metadata in images  Native  Open Photos app on your Mac. With Photos tab selected in the left pane, rght click any thumbnail on the right and select Get Info. A window opens, showing the file name and format, camera data, and profile photos of people that Photos recognizes. Click in the window, and you can add or edit title, description, keywords and location. For more data: Open image in Finder. Click Tools > Show Inspector in the top toolbar. This opens a window containing four tabs. The first tab provides summary information, and clicking on the second tab reveals 5 more tabs: General, IPTC, EXIF, JFIF and TIFF. Click on these to see all the metadata information. ExifEdit  ExifEdit gives an intuitive way to edit EXIF & IPTC metadata for thousands of photos in a single click.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9125eebd7a5667fe9e789b23066ae9da",
    "u": "https://macos.tymyrddin.dev/docs/data/pwprotect",
    "t": "Password protect files and folders ",
    "c": "Password protect files and folders  You can protect all the files on your Mac by encrypting a Vault (or entire drive) with FileVault . If you consider FileVault a bit of an overkill for your purposes, you can password protect your files and folders in different ways. iWork suite documents  If you have Pages, Keynote, or Numbers files with sensitive information, you can password protect those files. Open the file you want to protect Go to File -> Set Password Enter a Password Verify the password If you want a hint to help you remember your password, enter a Password Hint Set Password PDF Files in Preview  Open the PDF file you want to protect (does not work for image files) Go to the File menu and then press the Option key. The Duplicate menu option becomes Save As. Select the Save As option. On the Save dialog box, check the Encrypt box towards the bottom. Enter a Password Verify the password Save To remove the password protection from a PDF file, open the file, enter the password, use the Option key to access the Save As option again and uncheck the Encrypt option on the Save dialog box. Save the file with a new name and delete the old password protected file. Microsoft Word files  Open the Word file you want to protect Click the Review tab, and then click Protect Document On the Password Protect dialog box, enter Password Optionally require a Password to modify the document Optionally add other Protection to the document Optionally Remove personal information from this file on save Save Microsoft PowerPoint and Excel files  Password protecting a Microsoft Excel workbook is similar to protecting a PowerPoint presentation, but the dialog box is different. Go to File -> Passwords Under Password to open, check the “Encrypt this presentation and require a password to open” box. On the Set a password for this presentation dialog box, enter New password Verify the password Click Set Password OK To remove the password from the presentation, open it, go to File -> Passwords, and uncheck the “Encrypt this presentation and require a password to open” box. Password protect folders  Disk Utility can erase, format, repair, and partition hard drives. It can also can create an encrypted disk image, or a single file that contains the entire contents of a drive or other media like external USB drives, CDs, or DVDs. Copy the files you want to protect into a folder Open Disk Utility Go to File -> New Image -> Image from Folder Select the folder you want to encrypt and click Choose. In box enter Enter a name for the disk image in the Save As box Where to store the DMG file Encryption type (128-bit or 256-bit AES) (Enter a Password and then Verify the password) Select read/write from the Image Format dropdown list Save A progress dialog box appears and a message saying that the operation was successful Click Done Use Eraser to securely delete the original files Disk Utility adds the disk image to your desktop. Double-click the disk image icon to access the files inside it. To access the files you added to the disk image, double-click on the DMG file and enter the password when prompted. Eject the disk image when you’re done using it, so the files are password protected again.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d1f266ac84b9294e67e8444cedc28d48",
    "u": "https://macos.tymyrddin.dev/docs/privacy/hexeditors",
    "t": "Remove metadata with hex editors ",
    "c": "Remove metadata with hex editors  The hexadecimal notation is almost universally used in computing - and not without a reason. There are sixteen hex digits - 0 to 9, and A to F (which correspond to decimal values 10 to 15), and each hex digit represents exactly four bits. Exactly two hex digits represent a byte, which can have a value from 00 to FF. A hex byte is the only kind of object a computer handles, and hex bytes are used to represent anything. For example, a hex byte 50 may represent the capital letter P, the processor command push eax, the decimal number 80, a colour component with 50% brightness, or whatever else lives in the digital world. And that means we have editors, hex editors, that can be used to view and change files, all files, on a very low level. As in, they can be used to remove metadata from any and all files. Usage in general  backup the file before using a hex editor on it. switch to ASCII mode, turn off “read only” mode, and start searching through the file. For example, when scrubbing pdf’s from creation and modification information look through the entire file for “created” (metadata appears in the PDF file more than once). If and when you find metadata, change to fake data or delete. Then repeat your search again for the terms “create”, “creation”, “modified”, and “modify”, and similarly either replace or delete the dates, once again being sure to repeat each search so that any potential multiple instances of the field can be located and modified or blanked out. Using software  iBored Online  Hexed.it HTML5/JS => will be cached on local machine and can then be used.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "04946ec5c5653825b875155e63b4d5ab",
    "u": "https://macos.tymyrddin.dev/docs/guards/soup",
    "t": "Alphabet soup ",
    "c": "Alphabet soup  Firewall  A firewall implements rules that prevent network traffic based on protocol, source/destination address, and/or source/destination port. Firewalls can implement access control lists and prevent the use of insecure protocols, such as blocking all traffic on TCP port 23 (Telnet’s default port). IDS  An IDS platform can analyse network traffic for patterns and recognize malicious attack patterns. It can create notifications, but it can not block the unwanted packets from entering the network. IDS can be deployed either at the host level or the network level. Host-based monitors (and protects) the specific host (for example a single PC) it is installed on. For example, a HIDS will look at log and config files for any unexpected rewrites. Network-based focuses on protecting an entire network. Usually, dedicated hardware appliances run such software. For example, a NIDS will look at the checksums in captured packets and message authentication integrity of systems such as SHA1. The fact that a NIDS is usually installed on a stand-alone piece of equipment means that it doesn’t drag down the processors of servers or PC’s. The activity of HIDS is not as aggressive as that of NIDS and can be implemented by a lightweight daemon on the computer which does not burn up too much CPU. Neither system generates extra network traffic. In addition to the two main types of IDS, there are also two main subsets of these IDS types: Signature-based Intrusion Detection System (SBIDS). An SBNIDS for example, tracks all the packets passing over the network and then compares them to a database containing attributes or signatures of familiar malicious threats. Anomaly-based Intrusion Detection System (ABIDS). An ABNIDS for example, tracks the traffic of a network and then compares it to an established measure (which could be machine learning based) and this allows the system to find what is normal for the network in terms of Ports, Protocols, Bandwidth, and other devices, and alerting administrators about any unusual or potentially malicious activity in the network. IPS  IPS combines the analysis functionality of an IDS with the ability to intervene and prevent the delivery of malicious packets. IPS interact with firewalls and software applications by adjusting settings. Incorrectly calibrated IPSs can cause havoc and bring your legitimate network activity to a halt.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "264ff24bc4555ff262d676a8c55b8035",
    "u": "https://macos.tymyrddin.dev/docs/authentication/login",
    "t": "Disable automatic login ",
    "c": "Disable automatic login  It is perhaps annoying to have to enter your password every boot, but it is a little price for preventing someone getting into your account and accessing your data. Go to Apple > System Preferences and click Users & Groups. Click Login Options at the bottom of the list of users on the left. Click the lock at the bottom of dialog box and enter your password when prompted. This allows you to make changes to the settings. Select Off from the Automatic login dropdown list. You will have to enter your password every time you boot your Mac.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "56817de221bf72b51eb450047c042b97",
    "u": "https://macos.tymyrddin.dev/docs/services/change-mac",
    "t": "Change MAC address ",
    "c": "Change MAC address  A MAC address identifies the device connected to a network and allows the network to track, restrict or allow access based on it. Routers identify and assign static IP addresses based on the MAC addresses of devices. Before you try to change the MAC address, you need to know the value that you want to use. Set the 2’s place bit (the “locally administered” bit) in the first byte, to differentiate it from a guaranteed globally unique MAC address. Usually the first three bytes an unicast MAC address is an “Organizationally Unique Identifier” (OUI) that the IEEE assigned to the manufacturer of your Ethernet device. Manufacturers are required to make sure they keep the last 3 bytes unique. Avoiding all of that knowledge, the MAC address generator tool can generate a valid address for you. If a specific MAC address, like 00:0a:95:9d:68:16 , is required: $ sudo ifconfig en0 00:0a:95:9d:68:16 To randomly generate new MAC address and assign it to en0 network interface: $ openssl rand –hex6 | sed ‘s/(..)/1:/g; s/.$//’ | xargs sudo ifconfig en0 ether When you restart your Mac computer, the Mac address reverts to the default.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "191d8fbbc3a5524527870bb70c214311",
    "u": "https://macos.tymyrddin.dev/docs/services/ssh",
    "t": "Use SSH tunnels ",
    "c": "Use SSH tunnels  Secure Shell (SSH) can be used to securely acquire and use a remote terminal session and has other uses as well. You can use SSH to tunnel traffic, transfer files, mount remote file systems, and more. SSH also uses strong encryption, and you can set your SSH client to act as a Socks proxy. Once you have, you can configure applications on your computer – such as your web browser – to use the Socks proxy. The traffic enters the Socks proxy running on your local system and the SSH client forwards it through the SSH connection – this is known as SSH tunneling. This works similar to browsing the web over a Virtual Private Network (VPN) . From a web server perspective, traffic appears to be coming from the SSH server. The traffic between source and the SSH server is encrypted, so you can browse over an encrypted connection as you could with a VPN. You must configure each application to use the SSH tunnel’s proxy. Port forwarding or port mapping is a name given to the combined technique of: Translating the address and/or port number of a packet to a new destination. Possibly accepting such packet(s) in a packet filter (firewall). Forwarding the packet according to the routing table. SSH tunnels can be created in several ways using different kinds of port forwarding mechanisms. And you can protect SSH access with MFA . Tunnelling with local port forwarding  Imagine wikileaks being blocked using a proxy filter in a university network somewhere. An SSH tunnel can be used to bypass this restriction. Let’s name the machine in the university network socially-correct and a home machine home . The home machine has a public IP and is running an SSH server. The student in case has ssh user access on home and socially-correct has access to host:hostport (is not blocked). $ ssh -L localport:host:hostport user@home -N where: -L : port forwarding parameters localport : local port (choose a port that is not in use by other service) host : server that has the port (hostport) that you want to forward hostport : remote port -N : do not execute a remote command (you will not have the shell). user : user that has ssh access to the ssh server home : the machine/server running the ssh server that will be used for forwarding/tunneling For example, to create the SSH tunnel execute following from the socially-correct machine: $ ssh -L 9001:wikileaks.org:80 user@home Open a browser and go to http://localhost:9001 to see if the tunnel is working. The SSH client at socially-correct will connect to the SSH server running at home (usually running at port 22) binding port 9001 of socially-correct to listen for local requests thus creating an SSH tunnel between home and socially-correct. At the home end it will create a connection to wikileaks.org at port 80. So socially-correct doesn’t need to know how to connect to wikileaks.org. Only home needs to worry about that. The channel between socially-correct and home will be encrypted while the connection between home and wikileaks.org will be unencrypted. The home-to-wikileaks.org connection is only made when the browser makes the request, not at tunnel setup time. The SSH man pages say: -L port:host:hostport specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side. This works by allocating a socket to listen to port on the local side, and whenever a connection is made to this port, the connection is forwarded over the secure channel, and a connection is made to host port hostport from the remote machine. Port forwardings can also be specified in the configuration file. Only root can forward privileged ports. IPv6 addresses can be specified with an alternative syntax: port/host/hostport -N Do not execute a remote command. This is useful for just forwarding ports (protocol version 2 only). Local port forwarding can also be used to set up a VNC session between socially-correct and a home server. From socially-correct : $ ssh -L 5900:localhost:5900 user@home The localhost is relative to the gateway (home in this case), not the machine from where the tunnel is initiated. So this will make a connection to port 5900 of the home computer where the VNC client would be listening. Reverse tunnelling with remote port forwarding  To be able to SSH from the Internet into a machine behind a firewall, you need the machine in question to open an SSH connection to the outside world and include a -R tunnel whose “entry” point is the “remote” side of his connection. What if we wish to connect to an internal university website from home with a set-up like above in tunnelling with local port forwarding? The university firewall is blocking all incoming traffic. We can connect from home to the university internal network so that we can browse the internal site. We can initiate the tunnel from the socially-correct computer behind the firewall. This is possible since only incoming traffic is blocked and outgoing traffic is allowed. The client will now be at the home computer and instead of using the -L option, the -R option, which specifies a reverse tunnel is to be created, is used. From socially-correct : $ ssh -R 9001:internalsite.org:80 user@home The SSH client at socially-correct will connect to the SSH server running at home creating an SSH channel. The server will bind port 9001 on the home machine to listen for incoming requests that are then routed through the created SSH channel between home and socially-correct . Now it’s possible to browse the internal site by visiting http://localhost:9001 in a web browser on the home machine. The socially-correct machine for work at the university will then create a connection to internalsite.org and relay back the response to home via the created SSH channel. Even though the traffic is encrypted, the name resolution may not be encrypted => DNS leakage. Programs like firefox allow you to ensure that there is no such DNS leakage . For example, in Firefox, browse to about:config and make sure the setting for network.proxy.socks_remote_dns is set to true. Dynamic port forwarding  Dynamic port forwarding allows for configuring one local port for tunnelling data to all remote destinations. This requires Socket Secure SOCKS. At the client side of the tunnel a Socks proxy would be created and the application uses the Socks protocol to specify where the traffic should be sent when it leaves the other end of the ssh tunnel. In a set-up like used in local port forwarding and reverse port forwarding, from the socially-correct machine at university: $ ssh -D 9001 user@home SSH will create a Socks proxy listening in for connections at local port 9001 and when receiving a request routes the traffic via the SSH channel created between socially-correct and home. Configure the browser to point to the Socks proxy at port 9001 at localhost .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8505ea5f3dd8c4575172a574e6efdd63",
    "u": "https://macos.tymyrddin.dev/docs/guards/readme",
    "t": "Introduction ",
    "c": "Introduction  There are many types of devices and mechanisms within the security environment to provide a layered approach of defense. This is so that if an attacker is able to bypass one layer, another layer stands in the way to protect the network. Two of the most popular and significant tools used to secure networks are firewalls and intrusion detection systems. Choosing a firewall for a Mac  With a firewall, you can: Log hosts scanning services that aren’t running. Limit the services that applications can connect to. Segregate the local network into trust segments (Local Area Network (LAN), DeMilitarised Zone (DMZ), and Internet). Redirect ports to the hosts providing the service (Network address translation (NAT)). macOS has an built-in firewall , it is disabled by default, enable it with: Go to System Preferences -> Security & Privacy Click on the Firewall tab At the bottom of the window, click on the lock icon to enter your administrator password for changing the settings. Click the option to Turn On Firewall To configure the options for the firewall, click Firewall Options The built-in firewall on your Mac only blocks inbound traffic. It does not allow you to control outbound connections. If you download a piece of malware, your Mac’s firewall won’t prevent it from connecting to the internet and sending out information. If you’d like to be more secure, install an additional firewall. Murus Lite is an entry-stage firewall front end. It has inbound filtering and recording and can be used to safeguard applications. Although it is free, Murus Lite isn’t attempting to test or demonstrate. Instead, it is a fully-featured application that is a good beginning point for a new user. Scudo is a hybrid firewall for Mac that works as a combination of an outbound application-layer firewall and an inbound network-layer packet filter. The software offers enhanced protection to Mac’s network services from all the unwanted connections. It improves your privacy against remote computers trying to access your data through the network. LuLu is a free, open source firewall that aims to block outgoing traffic unless it’s explicitly approved by the user. Once installed, it will alert you about new or unauthorized attempts to create an outgoing network connection. Click the Allow or Block button to handle the connection. Radio Silence is the simplest firewall app for your Mac. After installation, the app automatically runs in the background without any menu bar icon or other visual indicators. Navigate to the Firewall tab and click the Block Application button. Once you add an app to the blacklist, it will no longer connect over the internet. Little Snitch is a host-based application firewall for Mac. The app provides detailed reports on processes, outgoing and incoming connections, ports, and protocols. It also shows the complete traffic history down to a one-minute interval time range. The Network Monitor shows a global map of the active connections from your system to the IP-derived or probable locations around the world in real-time. The left panel displays a list of apps sending and receiving data, while the right panel gives you a detailed summary. Choosing a HIDS for a Mac  Most of the HIDS tools for macOS are File Integrity Agents (FIAs) and use Error Detection algorithms. A FIA monitors the integrity and state of the files and objects on a machine. It creates a hash of all files to be monitored. That snapshot is periodically checked against the current hash of the files. If it detects changes to those files, then it alerts the administrator that an unauthorised access or change has taken place. OSSEC monitors the checksum signatures of all the log files to detect possible interference and any attempts to get to the root account.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "026e6148133ca2c51c801237d6922582",
    "u": "https://macos.tymyrddin.dev/docs/services/edit-hosts-file",
    "t": "Edit hosts file ",
    "c": "Edit hosts file  The hosts file is a system file on a device that lets you map specific domain names to an IP address. If you want to add new entries to the hosts file, you’ll need the IP address of the server that you want to map a hostname to. XXX.XXX.XXX.XXX some.domain.name The hosts file lets you override DNS entries for any domain name. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. Blocking is achieved by setting the IP address of the ad networks to a loopback address like 127.0.0.1 which will not return anything. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. If your device is infected with malware, then your hosts file may be compromised to included unknown entries for known domain names. That is NOT the IP address of your bank! This type of DNS attack is known as DNS pharming, and checking your hosts file can uncover potential infection. Open the Terminal application. (Click on the Finder icon and then go to Applications → Utilities) In the terminal, give the command sudo nano /private/etc/hosts Enter your administrator password after running the command Add as many entries as needed",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8fb92a8398a13350fdf5ca5087352012",
    "u": "https://macos.tymyrddin.dev/docs/services/readme",
    "t": "Introduction ",
    "c": "Introduction  Restrict which apps can run System integration protection (SIP) Use a VPN service Secure browsers that protect your privacy Use a secure messaging service Use a secure email service Use SSH tunnels Use a VPN service Use a firewall as a VPN fail-safe mechanism Use alternative DNS servers Use a Tor proxy Change MAC address Renew IP lease Edit hosts file",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3aec654b08be2ba08ddd46e6416dbdcd",
    "u": "https://macos.tymyrddin.dev/docs/authentication/mfa",
    "t": "Use multi-factor authentication (MFA) ",
    "c": "Use multi-factor authentication (MFA)  Many sites and applications offer two-factor authentication (2FA), also named multi-factor authentication (MFA). With 2FA enabled, logging into a website or application requires both a password and a unique code that is texted to your phone number or delivered via an authenticator app. You have to input this code in order to gain access to your account. Even if someone else has your password, they will not be able to break into your accounts if they can not get the code. When you use one of the authenticator apps included here, you bolster the password you know with the token, smartphone, or smartwatch that you have. Setting up MFA usually involves scanning a QR code on the site with your phone’s authenticator app. Note that you can scan the code to more than one phone, if you want a backup. Authenticator apps generate time-based, one-time passcodes (TOTP or OTP), which are usually six digits that refresh every 30 seconds. Once you set up MFA, every time you want to log in to a site, you enter the code into the secured app or site’s login page, and you’re in. The time limit means that if an adversary manages to get your one-time passcode, it won’t work for them after that 30 seconds. Something to look for when choosing one of these apps is whether it backs up the account info (encrypted, of course) in case you no longer have the phone you set everything up on. These all do (Google Authenticator does not). Authy Duo Mobile LastPass Authenticator Microsoft Authenticator",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b22c25aa085e39b564cacb1e46425dcc",
    "u": "https://macos.tymyrddin.dev/docs/guards/ossec",
    "t": "OSSEC ",
    "c": "OSSEC  OSSEC stands for Open Source HIDS Security. It is entirely free to use. As a host-based intrusion detection system, the program focuses on the log files on the computer where you install it. It monitors the checksum signatures of all the log files to detect possible interference. On Unix-like systems, it will monitor any attempts to get to the root account. Although OSSEC is an open-source project, it is owned by Trend Micro, a security software producer. How to Install OSSEC Agent on Mac OS",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "84e943d7a99cb64f77800159aa7e5cca",
    "u": "https://macos.tymyrddin.dev/docs/services/browsers",
    "t": "Secure browsers that protect your privacy ",
    "c": "Secure browsers that protect your privacy  DuckDuckGo Desktop browser for MacOS focuses on privacy that is not based on Chromium (as most would expect). Instead it relies on OS-provided rendering engines to build the browser (mostly WebKit). This makes it possible to remove all the unnecessary stuff usually available with popular web browsers. Brave is fast, secure, and privacy-focused by default. It has a built-in ad blocker and browser fingerprinting protection, while also giving you access to numerous add-ons and extensions. Ungoogled Chromium browser is an open source project to provide a Chromium browser, without the Google privacy issues. LibreWolf is a fork of Firefox focused on privacy, security, and freedom, only available for desktop operating systems. If the browser you choose is less secure and privacy-friendly, lock down the browser and the software it can invoke.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ac0e690853950ff13fe2577496ce6488",
    "u": "https://macos.tymyrddin.dev/docs/services/sip",
    "t": "System integration protection (SIP) ",
    "c": "System integration protection (SIP)  Apple introduced System Integration Protection (SIP), designed to protect the most vulnerable parts of the Mac: SIP protects a few core areas of the drive where the operating system is installed, including /System , /bin , /sbin , /usr (but not /usr/local ). Some symbolic links from /etc , /tmp , and /var are also protected, though the target directories themselves are not. The safety measure prevents processes without sufficient privileges (including admin users with root access) from writing to these folders and the files stored within. The technology also prevents other “risky” operations too, like code injection. Apple is concerned that changes made to these parts of your system could put your Mac at risk and cause damage to the OS. Locking out root admin access safeguards your Mac against sudo-level commands executed remotely and locally. If you want to use software that depends on modifications which change the way many core OS elements and first party apps function, you’re going to have to disable SIP first, and reenable it afterwards. I wouldn’t though. Why trust software that wants me to turn off such an important protection, even if only temporarily.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e3d9220499bac7f2870e063de76d9aa4",
    "u": "https://macos.tymyrddin.dev/docs/services/renew-lease",
    "t": "Renew IP lease ",
    "c": "Renew IP lease  A DHCP client can on occasion send information in DHCP requests: hostname, MAC address, operating system, and DHCP version. All operating systems provide their most recent IP address to the DHCP server. If you change your MAC address to minimise risk, best to also renew the IP leases on the router. Go to Apple menu -> System Preferences -> Network. In the list on the left, select the network service that needs a renewed IP address. Click Advanced, click TCP/IP, then click Renew DHCP Lease.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "44d9cc66de5b135d578ea386075a6c2c",
    "u": "https://macos.tymyrddin.dev/docs/opsec/browsing",
    "t": "Browse more safely ",
    "c": "Browse more safely  Keyloggers and other malware can be installed via a web page script which exploits a browser vulnerability. The program will automatically be launched when a user visits an infected site. Compromising a browser is relatively easy, and it is cross-platform, hence an often chosen target. Plus that browsers (for performance reasons) prefetch exposing users to more security risks by downloading more pages, or from un-requested sites (additionally compounded as drive-by downloads become more advanced and diverse). BeEF & other browser exploits, when not using browser vulnerabilities, rely on javascript. Choose a secure browser that protects your privacy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "afa28284e8ed2bc82e8177cde0dbe56c",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/youtoo",
    "t": "No device can ever be called secure ",
    "c": "No device can ever be called secure  The Linux ecosystem was considered more secure by many, which possibly explains why Google, NASA, and the US DoD use it for their online infrastructures and systems. Wishful thinking. Likewise the misconception that Apple devices are immune to hacking and malware infection. Linux is on the list of the most used operating systems, for workstations, servers, mobiles (android is linux based), and IoT devices. Linux powers the Internet with 74.2% of all web servers running on it. Hence, an attractive target for cybercriminals . Any ransomware tool development must be lucrative for the threat actor, which used to be far less likely in the case of locking a mobile device, as compared with locking all the Windows systems in an organisation. The bring-your-own-device (BYOD) trend has been growing for many years though. With Android the most common operating system for mobile devices, ransomwares targeting Android are on the rise. Publicly known ransomware threats to iOS seem still less prevalent. *nix  Linux is on the list of the most used operating systems, for workstations, servers, mobiles (android is linux based), and IoT devices. Linux powers the Internet with 74.2% of all web servers running on it. Hence, a profitable target. RansomEXX (or Defrat777) is one of the most common recent ransomware attacks against Linux. It was used against high-end targets in 2020 and 2021. It does not use C&C communication and targets was hard-coded. Tycoon is one of the most common Linux ransomwares. In late 2019 it was used in attacks against education organisations and companies in the software industry. Its payload is in a ZIP archive with a malicious Java Runtime Environment (JRE) component, hidden in a Java image file. Both Linux and Windows are vulnerable to Tycoon attacks. Erebus was originally Windows-based, and repurposed to target Linux servers. QNAPCrypt focuses on infecting network-attached storage (NAS) Linux devices. KillDisk also started on Windows and was later adapted for Linux environments. macOS  LockBit operators created encryptors to target Mac devices for the first time. Supposedly the first-ever ransomware campaign focusing on macOS in particular. ThiefQuest (also known as EvilQuest) became a threat in June 2020, having been discovered by researcher Dinesh Devadoss. The program was found hiding in pirated versions of the Little Snitch app, which could be found on a Russian torrent platform. Inventive attackers have used the “Geacon” Cobalt Strike tool attack for data theft, privilege elevation, and remote device control. MacStealer malware stole sensitive data from Apple users. Documents, iCloud keychain data, browser cookies, credit card credentials, etc. CloudMensis spreads through email attachments and can steal sensitive information and grant unauthorised access to users’ systems. JockerSpy can infiltrate a system through fake websites or bundled with seemingly harmless software . Once installed, it can monitor users’ activities, capture keystrokes, and access personal data. Apparently porting is well underway too  Some malware can infect Linux and Windows systems. StripedFly for example, is capable of a lot more than just mining cryptocurrency: it can execute commands remotely, grab screenshots and execute shellcodes, steal passwords and other sensitive data, record sounds using the integrated microphone, move to near endpoints using previously stolen credentials, abuse the EternalBlue exploit to worm into other systems, and mine Monero. Monero mining is now seen as a distraction, to prevent researchers from analysing the code further. This malware has infected over 1 million Windows and Linux computers around the globe since 2016, according to Kaspersky . Resources  URLhaus Database Linux virus Windows global threat activity",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "affefe36a816e67746385218fe9688c0",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/c2",
    "t": "Red team takeover ",
    "c": "Red team takeover  Penetration testing tools such as Cobalt Strike and Brute Ratel are developed for red teaming and adversarial attack simulations like cracking passwords, launching spear phishing attacks, remotely controlling and monitoring attacks with a command and control (C&C) framework, and creating reports on the effectiveness of these simulated attacks. Some are even designed to avoid detection by antivirus solutions and endpoint detection and response (EDR) . And are now used by adversaries for real attacks. Resources  When Pentest Tools Go Brutal: Red-Teaming Tool Being Abused by Malicious Actors",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e367b918eac928237b1aeb966ba41af5",
    "u": "https://pap.tymyrddin.dev/docs/mitre/supply-chain",
    "t": "Supply chain compromise ",
    "c": "Supply chain compromise  App squatting and fake apps are listed by MITRE as Mobile Technique ID T1474 : Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise can take place at any stage of the supply chain. Detection involves application vetting of API calls, network communication, permissions requests, and protected configuration. Static analysis notes  Static analysis can be done with various tools to decompile the binary, such as jadx , radare2 , rizin , and jeb . Tools such as droidlysis for automatic offline static analysis can also be used. A high level description of the process can be found here , and is applied in Android malware analysis (Pithus and jadx) as example.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d7ed31ea7e6afd501bd65eb80656d89a",
    "u": "https://pap.tymyrddin.dev/docs/mobile/ransomware",
    "t": "Ransomware ",
    "c": "Ransomware  Mobile ransomware sneaks onto your device using social engineering tactics that trick you into downloading malicious content, such as fake apps from third party app stores, app squatting , infected system or software updates, phishing , or smishing . Traditional ransomware encrypts the files on a device, and some, but not all, Android ransomware variants do encrypt. WannaLocker uses AES encryption to encrypt files. Different types of living of the land techniques” techniques can be used to deny a victim access to the device: Abusing functionalities (MalLocker). Hijacking permissions (Strandhogg attack). Resetting device PIN (DoubleLocker and CovidLock). Both iPhone and Android users have easy access to cheap, cloud-based backup tools (Apple iCloud and Google One), which makes it easy to wipe and restore devices, in the event of a ransomware attack, with minimal loss of data. Resources  CovidLock: Mobile Coronavirus Tracking App Coughs Up Ransomware , 2020 Sophisticated Android Ransomware Executes with the Home Button , 2020 WannaLocker - The WannaCry Copycat Targeting Android Users in China , 2017",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3f7c5e155879c3b134ce2799161a45f3",
    "u": "https://pap.tymyrddin.dev/docs/independent/mfa",
    "t": "MFA bypass attacks ",
    "c": "MFA bypass attacks  Attackers use various methods to MFA bypass attacks, including social engineering, phishing, and exploiting vulnerabilities in the authentication process. MFA fatigue  After having obtained stolen username and password credentials from a black market, attackers can attempt repeated logins to the targeted user accounts, who then are bombarded with login verification requests. Through sheer frustration or by accident, users eventually click on the link or confirmation request. That action then gives the threat actor a way in. MitM  “In the olden days”, adversaries only needed to get username and password combinations, so they made a fake authentication webpage and attempt to trick users into entering their credentials. With MFA everywhere, adversaries need username and password combination and the digital token or one-time password used as the second form of authentication. A new tactic is to use MitM instead, and insert themselves between the user and the legitimate login page. Users will receive a request to access their MFA provider, through phishing , smishing , vishing or OTP bots , that entices users to click on a link, which then directs them through a malicious proxy server to the legitimate login page. The adversaries capture the credentials on the proxy server and then modify the session cookie to gain access. And variations on that scenario. Token stealing  Making life easier for users, “session cookies” are stored on endpoint devices, so users don’t have to re-authenticate during sessions. These can be stolen and placed within the session of the adversary, making the browser believe the actual trusted user is being authenticated. Future  MFA was invented to protect authentication. Do we need another layer to protect MFA? There are discussions about mechanisms going beyond something one knows (password) and/or something one possesses (phone, fob) and/or even what one is (fingerprint, retinal print). Maybe we’ll be using who one is, in the form of episodic memory because who are we but the stories we tell (ourselves), or in the form of our thoughts, because “I think therefor I am” … ? Do we really want who we are externalised on the web, our memories, our imagination, up for grabs?",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a7ef2748ffdba4d590973ae5df35199a",
    "u": "https://pap.tymyrddin.dev/docs/mobile/otp-bots",
    "t": "OTP bots ",
    "c": "OTP bots  Most websites now offer and use multifactor authentication to protect user accounts; with OTP bots, that protection is rendered useless. Using an OTP bot enables an attacker to intercept, redirect, or even spoof authentication codes or tokens. Using social engineering to trick people into giving their authentication codes is a time-intensive process. But OTP bots, with the right contact information for the victim (bough on Telegram or Darkweb for example), can do this automatically. They can intercept large numbers of OTPs and increase the number of victims and profit for the adversary. OTP bots use the normal process of getting a one-time password for authentication online by tricking the victim into thinking they’re from the company in question, such as a bank. The adversary gives the victim’s information to the OTP bot. The OTP bot contacts the victim and asks for the account OTP. This can be by smishing or by robocall for example, asking for authorisation of a charge, or whether a given code is correct, and if not, please give us the correct code. The victim provides or enters the OTP. The bot distracts the victim while the adversary accesses the account instead. The adversary then steals money or card information from the victim’s account. Prevention  Companies and organisations can use powerful bot management systems that can identify malicious bots and stop their requests before they get to a website, app, or API. Resources  Threat Spotlight: Illicit Telegram Markets & OTP Bots , 2022 Bots for Stealing One-Time Passwords Simplify Fraud Schemes , 2022 How secure are one-time passwords from attacks? , 2022 OTP Bot Setup for MFA Bypass Affecting P2P Services , 2022",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9b8f60d52b770e1931cd9b9476f62856",
    "u": "https://linux.tymyrddin.dev/",
    "t": "Hardening GNU/Linux ",
    "c": "Hardening GNU/Linux  “Linux” is really GNU software operating with a Linux kernel, and GNU software there are many resulting in an incredible amount of distributions , all called “Linux”. Some even build on each other, such as Debian -> Ubuntu. It is impossible to cover them all. Version 0.1: These mitigations are kept as simple as possible, with tools found in most distros. Some things are harder to cover. For example, each distro has its own privacy settings somewhere, and there are even distro’s that have specialised in privacy. Accounts and authentication Introduction Disable and enable user accounts Make that secure passwords Use a password manager Password protect sleep and screen saver mode Use multi-factor authentication (MFA) Protect SSH access with MFA Design principles and sudo killers Services and applications Introduction Service management Application armour (AppArmor) Restrict access to at and cron Disable startup applications Choose a secure browser that protects your privacy Use a secure messaging service Use secure email services Use SSH tunnels Use a VPN service Use a firewall as a VPN fail-safe mechanism Use alternative DNS servers Use a Tor proxy Anonymise SSH sessions with Tor Change MAC address Renew IP lease Edit hosts file Data Introduction Use removable storage media Archiving and compressing Shift back and forth in time from past to present Disk encryption File encryption Shredding files and deleting data Privacy Introduction Turning devices on and off Remove metadata from files Edit exif metadata in images Removing metadata with hex editors Scrub machine with BleachBit Use Metadata Anonymisation Toolkit 2 (MAT2) Distros specialised in privacy Malware Introduction Malware detection and removal Analysing trojans Operations security Introduction Use email securely Detecting fake emails and phishing Browse more safely Check integrity of downloads ‘;–have i been pwned? Guards! Guards! Introduction Alphabet soup Netfilter and iptables NFTables Gufw and ufw Linux intrusion detection systems Aide OSSEC Tripwire",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cc7b74744d42069b8c3f5815b2916775",
    "u": "https://linux.tymyrddin.dev/docs/authentication/password-manager",
    "t": "Use a password manager ",
    "c": "Use a password manager  The majority of people use very weak passwords and reuse them on different websites. How are you supposed to use strong, unique passwords on all the websites you use? The solution is a password manager. Password managers store your login information for all the websites you use and help you log into them automatically. They encrypt your password database with a master password — the master password is the only one you have to remember. Managers  Dashlane 1Password Bitwarden It does not protect from keyloggers  Most password manager work by copy-pasting data quickly from your manager to the field (on the website) or by simulating keystrokes for all the data on file. A keylogger captures keystrokes and would capture all passwords entered by a password manager that simulated keystrokes. Nearly all keyloggers even include the capability to take screenshots at particular intervals of time and save all the contents of the clipboard to a file. The last bit is important, because it sort of renders even password managers that use the clipboard to fill in these forms useless. The real solution to preventing these attacks is to monitor your system for any keyloggers and use an AV solution .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "726c4f5d9d7b12a6280bdd6d3ff706cb",
    "u": "https://linux.tymyrddin.dev/docs/opsec/integrity-downloads",
    "t": "Check integrity of downloads ",
    "c": "Check integrity of downloads  When downloading an ISO image of, for example, the latest Linux distro, installing or upgrading packages, or downloading software, you can verify the files have downloaded correctly and securely by using checksums. Checksums ensure the integrity of data portions for data transmission or storage. Checksums is a simple error-detection scheme in which each transmitted message is accompanied by a numerical value based on the number of set bits in the message. The receiving station then applies the same formula to the message and checks to make sure the accompanying numerical value is the same. If not, the receiver can assume that the message has been garbled (or was altered). Verifying downloaded software  When downloading software ( .iso s and .deb s and the like), also download the xxxsum (choose from what is available) and check the integrity (it is the intended file, and nothing has changed underway). For example do: $ sha256sum some-file.iso and compare the output from the command with the key listed in the associated sha256 file. Troubleshooting unauthenticated packages  Integrity checks are integrated in linux package managers. Never ever continue with installation if you get a: WARNING: The following packages cannot be authenticated! It may be that your system is set to use a proxy server for a network you are not connected to. Set your Network Proxy method to None and Apply System Wide, and check if that helped. Check repositories are not corrupted in /etc/apt/sources.list . If so, repair with correct repositories and try again. Check GPG keys (apt-key) # apt-key list Update the local keyring with the keyring of archive keys and remove from the keyring the archive keys which are no longer valid: # apt-key update # apt-get update If still not works, reinstall the archive-keyring. # aptitude reinstall [distro]-archive-keyring For example: Kali Keyring – kali-archive-keyring Debian Keyring – debian-archive-keyring Ubuntu Keyring – ubuntu-archive-keyring Still not works? Hit the forums.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9b3102d7342f60e2f8521f02272a2cc4",
    "u": "https://linux.tymyrddin.dev/docs/services/restrict-access",
    "t": "Restrict access to at and cron ",
    "c": "Restrict access to at and cron  If malware is anything at all, it’s persistent. On Linux, just like Windows, malware once loaded wants to stay loaded. On Windows systems this is usually done with a variety of registry mechanisms. For Linux it’s often done using the crontab scheduling facility. Cron allows users to submit jobs for the system to do at a later time, possibly a recurring time. It can be very useful, but also has a potential for abuse by either users or adversaries to call back home at regular times. Users can be blocked from administrative access to the crontab command for scheduling and modifying cron jobs. The two configuration files that control user access to the cron daemon are cron.allow and cron.deny these two configuration files are located within the /etc directory and are similar to the at.deny and at.allow configuration files. The cron.allow file is used to allow users to schedule jobs using the cron daemon, if the username does not exist in the cron.allow configuration file the user will be denied access. The cron.deny configuration file houses the username of users that are not allowed to schedule jobs, both configuration files have the same syntax as the at.deny and at.allow configuration files. Each username should be specified on an individual line. Check the cron and at jobs!",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "776b7486379d95bbc86322423ea4781a",
    "u": "https://linux.tymyrddin.dev/docs/data/file-encryption",
    "t": "File encryption ",
    "c": "File encryption  Filesystem level encryption, often called file/folder encryption or stacked level encryption, is a form of disk encryption where individual files or directories are encrypted by the file system itself. This is in contrast to full disk or block level device encryption where an entire partition or disk, in which the file system resides, is encrypted. EncFS  EncFS provides an encrypted filesystem in user-space. It runs without any special permissions and uses the FUSE library and Linux kernel module to provide the filesystem interface. EncFS is open source software, licensed under the GPL. eCryptfs  eCryptfs stores cryptographic meta data in the header of each file written, so that encrypted files can be copied between hosts; the file will be decrypted with the proper key in the Linux kernel keyring. The eCryptfs kernel module is available in all Linux kernels since 2006. The eCryptfs user space utilities ( ecryptfs-utils ) are available in all major Linux distributions. VeraCrypt  VeraCrypt is a fork of the discontinued TrueCrypt project. It is a free and open-source utility for on-the-fly encryption (OTFE). The software can create a virtual encrypted disk that works just like a regular disk but within a file. It can also encrypt a partition or (in Windows) the entire storage device with pre-boot authentication.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "602b7b6f520d197a1d535cc1dc5a4fb9",
    "u": "https://linux.tymyrddin.dev/docs/data/removable-media",
    "t": "Use removable storage media ",
    "c": "Use removable storage media  A simple but straightforward security method is to keep all sensitive information on removable storage media like portable flash memory drives or external hard drives that you only mount the device when you need access to the data on it. You can turn old harddrives into external harddrives by taking them out of an old PC and putting them in a portable HDD USB storage kit (alias harddrive enclosure). These “DIY” kits are available for 2.5 inch and 3.5 inch HDD using either IDE or SATA connections and cost way less than a manufactured USB HDD.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d8ad565fc45dc229d4ab908240682b02",
    "u": "https://linux.tymyrddin.dev/docs/services/readme",
    "t": "Introduction ",
    "c": "Introduction  All linux distros let you control the services that run on your Linux installation, and you can make full use of this customisation feature to enhance security. Service management Application armour (AppArmor) Restrict access to at and cron Disble applications via startup applications Secure browsers that protect your privacy Use a secure messaging service Use a secure email service Use SSH tunnels Use a VPN service Use a firewall as a VPN fail-safe mechanism Use alternative DNS servers Use a Tor proxy Anonymise SSH sessions with Tor Change MAC address Renew IP lease Edit hosts file",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "db853fb0fe2a6a47bc90d94034965ab3",
    "u": "https://linux.tymyrddin.dev/docs/privacy/metadata",
    "t": "Remove metadata from files ",
    "c": "Remove metadata from files  Metadata is data about data. Metadata answers who, what, when, where, why, and how about every facet of the data that is being documented. Photos, and images in general, contain metadata. For photos this includes how large the picture is, colour depth, resolution, the date and time when it was created, the GPS coordinates of the location they were taken at, camera shutter setting details, and possibly even the name of the program used to edit them. Document metadata is information about one or more aspects of a document, spreadsheet, pdf file, that is not always visible to the person creating them, but can be found by the person who receives them next. Comments, track changes, hidden text, mark-ups, properties, attachments and bookmarks are all examples of document metadata. Office documents like pdf or Office automatically add author and organisation information to documents and spreadsheets. Web pages often include metadata in the form of meta tags. Description and keywords meta tags are commonly used to describe the Web page’s content. Most search engines use this data when adding pages to their search index. This type of metadata can be useful, but maybe you do not want to disclose this information on the web, because metadata can be used for other purposes as well: Metadata is collected by corporations for psychological manipulation in persuasion and advertising. Metadata also plays a number of important roles in computer forensics: It can provide corroborating information about the document data itself. It can reveal information that someone tried to hide, delete, or obscure. It can be used to automatically correlate documents from different sources. Metadata is used by hackers doing reconnaissance for an attack And last but not least, it can be used to correlate data in dragnet and targeted surveillance. Techniques for metadata removal  Metadata removal software like Metadata Anonymisation Toolkit 2 (MAT2) Bleachbit Using a hex editor Edit exif metadata in images",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7ed0a37ab4ed0fefc32013783d505bdb",
    "u": "https://linux.tymyrddin.dev/docs/privacy/metadata-images",
    "t": "Edit exif metadata in images ",
    "c": "Edit exif metadata in images  ExifTool  ExifTool is a perl program that can be used to read and edit exif metadata in images. It is available for Windows, MacOS and *nix systems. $ exiftool imagename.jpg To remove, for example GPS data (not found in the above image file, but if you have it in yours) - replace image.jpg with your image file: $ exiftool -gps:all= -xmp:geotag= image.jpg imagemagick  The mogrify command of imagemagick can be used to strip Exif data from images. For the same file as above and then checked with exiftool again: $ mogrify -strip imagename.jpg $ exiftool imagename.jpg For removing Exif data from all jpg images in a directory and all of its sub-directories recursively: $ find ./path/directory -type f -iname '*.jpg' | xargs mogrify -strip exiv2  The exiv2 tool also has a command for deleting all Exif data from an image: $ exiv2 rm imagename.jpg For removing Exif data from all jpg images in the current directory: $ exiv2 rm *.jpg For removing Exif data from all jpg images in a directory and all of its subdirectories recursively: $ find ./path/directory -type f -iname '*.jpg' | xargs exiv2 rm",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b030b5b307aa4f58201dd61bbcaf08b5",
    "u": "https://linux.tymyrddin.dev/docs/authentication/passwords",
    "t": "Make that secure passwords ",
    "c": "Make that secure passwords  Do not use a password you have used in the past. Try to change the password at least every 3-6 months. Create a password that is at least six characters long. Create a password with both digits and letters, uppercase, and lowercase. Do not create a password with a family name, name of your pet, hobby, sports teams, favourite TV show, etc. Do not create a password that is your phone number, house number, etc. Create a password that is not in a dictionary. Create passwords with spaces and/or magics (&*^%$#) in them (if allowed). Have a password manager create a password for you.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "365d779d4eb04fbd075dd024957ee600",
    "u": "https://linux.tymyrddin.dev/docs/privacy/hexeditors",
    "t": "Removing metadata with hex editors ",
    "c": "Removing metadata with hex editors  The hexadecimal notation is almost universally used in computing - and not without a reason. There are sixteen hex digits - 0 to 9, and A to F (which correspond to decimal values 10 to 15), and each hex digit represents exactly four bits. Exactly two hex digits represent a byte, which can have a value from 00 to FF. A hex byte is the only kind of object a computer handles, and hex bytes are used to represent anything. For example, a hex byte 50 may represent the capital letter P, the processor command push eax, the decimal number 80, a colour component with 50% brightness, or whatever else lives in the digital world. And that means we have editors, hex editors, that can be used to view and change files, all files, on a very low level. As in, they can be used to remove metadata from any and all files. Usage in general  backup the file before using a hex editor on it. switch to ASCII mode, turn off “read only” mode, and start searching through the file. For example, when scrubbing pdf’s from creation and modification information look through the entire file for “created” (metadata appears in the PDF file more than once). If and when you find metadata, change to fake data or delete. Then repeat your search again for the terms “create”, “creation”, “modified”, and “modify”, and similarly either replace or delete the dates, once again being sure to repeat each search so that any potential multiple instances of the field can be located and modified or blanked out. Native  You can use vi as a hex editor. It isn’t a real “hex mode”. What happens is that vi ’s buffer is streamed through the external program xxd, but it works well for some cases of scrubbing. Open a file in vi as usual, hit escape and to switch into hex mode type: :%!xxd And when done, to exit from hex mode, hit escape again and type: :%!xxd -r Using software  bless is a binary (hex) editor for the GNOME Desktop. wxhexeditor is a hexadecimal file editor suitable for editing very big files. Supported file size is up to 2**64 bytes. dhex provides a console based hex edit screen with menus like Goto, Search, and HexCal",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d62709cb4761791a715df846d5ebe14b",
    "u": "https://linux.tymyrddin.dev/docs/guards/netfilter-and-iptables",
    "t": "Netfilter and iptables ",
    "c": "Netfilter and iptables  Installing persistence  iptables is installed by default. For rules to be persistent (automatically loaded) so they work after reboot, install iptables-persistent : $ sudo apt-get install iptables-persistent [sudo] password for user: Reading package lists... Done Building dependency tree Reading state information... Done The following extra packages will be installed: netfilter-persistent The following NEW packages will be installed: iptables-persistent netfilter-persistent 0 upgraded, 2 newly installed, 0 to remove and 0 not upgraded. Need to get 18.9 kB of archives. After this operation, 147 kB of additional disk space will be used. Rules  Status command  To list rules -L showing interface name, rule options, TOS masks, packet and byte counters -n, and IP address and port in numeric format without using DNS to resolve names -v: # iptables -L -n -v With line numbers (important for deleting or inserting new rules into the firewall): # iptables -n -L -v --line-numbers To display INPUT or OUTPUT chain rules: # iptables -L INPUT -n -v # iptables -L OUTPUT -n -v --line-numbers Deleting a rule  To delete line number 4 using -D to delete one or more rules from the selected chain: # iptables -D INPUT 4 Inserting a rule  # iptables -L INPUT -n --line-numbers Chain INPUT (policy DROP) num target prot opt source destination 1 DROP all -- xxx.xxx.xxx.1 0.0.0.0/0 2 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state NEW,ESTABLISHED Inserting a rule between 1 and 2: # iptables -I INPUT 2 -s xxx.xxx.xxx.2 -j DROP Gives: # iptables -L INPUT -n --line-numbers Chain INPUT (policy DROP) num target prot opt source destination 1 DROP all -- xxx.xxx.xxx.1 0.0.0.0/0 2 DROP all -- xxx.xxx.xxx.2 0.0.0.0/0 3 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state NEW,ESTABLISHED Saving the rules  For saving the rules so they can be loaded at every reboot (you need to have iptables-persistent installed) # iptables-save > /etc/iptables/rules.v4 # ip6tables-save > /etc/iptables/rules.v6 Stop/Restart  Some distros like CentOS have installed a service called iptables to start and stop the firewall and a configuration file to configure it. For all other distros, iptables is a command, not a service. Configuring iptables  To set it to deny everything except the bare minimum requirements that you need on your system(s) and only accept connections that have been explicitly allowed in the rules. Localhost: $ sudo iptables -A INPUT -i lo -j ACCEPT Accept data related to outbound connections your system has initiated (this includes apt mirrors): $ sudo iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT You can set up tables for rules for traffic you wish to accept on your system from external connections: # iptables -N accept_traffic # iptables -A INPUT -j accept_traffic You then can use it, for example on a server where you run SSH, with (change port to port you set): # iptables -A accept_traffic -p tcp --dport 22 -j ACCEPT The two most common cracks posted on the Ubuntu forums are ssh and vnc, both running with password authentication. This probably is true for all debian-based distro’s. You are recommended to secure ssh by using keys (and disabling password authentication) and either configuring iptables or using a service such as denyhosts or fail2ban. To reject all traffic for which there are no rules set (the first way sends a Host Unreachable ICMP packet then terminates the connection, the second way simply ignores): # iptables -A INPUT -j REJECT --reject-with icmp-host-unreachable or: # iptables -A INPUT -j DROP Configuring ip6tables  To set it to deny everything except the bare minimum requirements that you need on your system(s) and only accept connections that have been explicitly allowed in the rules: Localhost: $ sudo ip6tables -A INPUT -i lo -j ACCEPT Accepting data related to outbound connections your system has initiated: $ sudo ip6tables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT Setting up a table: # ip6tables -N accept_traffic # ip6tables -A INPUT -j accept_traffic Rejecting all traffic for which there are no rules set: # ip6tables -A INPUT -j REJECT --reject-with icmp6-addr-unreachable or # ip6tables -A INPUT -j DROP Usage examples  ICMP  For accepting “Time Exceeded” (necessary for time-restricted connection setups): $ sudo iptables -A INPUT -p icmp -m icmp --icmp-type 11 -j ACCEPT For accepting “Destination Unreachable”: $ sudo iptables -A INPUT -p icmp -m icmp --icmp-type 3/4 -j ACCEPT For accepting PING requests/responses (“Echo” ICMP, for keep-alive requests): $ sudo iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT For IPv6 there are a kazillion ICMP requests so if you are not blocking IPv6, it is recommended to not block ICMP packets: $ sudo ip6tables -A INPUT -p icmpv6 -j ACCEPT",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f19a9609556ebf975b80a54e73ede659",
    "u": "https://linux.tymyrddin.dev/docs/services/vpn-fail-open",
    "t": "Use a firewall as a VPN fail-safe mechanism ",
    "c": "Use a firewall as a VPN fail-safe mechanism  If you simply add a VPN using common instructions, it generally “fails open”. That means, if the VPN breaks down, because the connection is interrupted, traffic will be sent without the VPN. It is much safer when it “fails closed”, meaning that when the VPN connection breaks down, the whole internet connection must be down as long as the VPN connection is not restored. If your chosen VPN does not include being able to set a kill switch, you can use your firewall as a fail-safe mechanism: Get the IP address of the VPN gateway that the kill switch is intended for using the host command. Get the network interface name connected to your default gateway and the subnet of the local network using the route command. Modify the .ovpn configuration file. Change the tun device to -dev tun0 in the client configuration file. Then change the hostnames to IP addresses for the -remote option in the same configuration file. Kill switch using ufw  Make a shell script (killswitch-ufw.sh): ufw --force reset ufw default deny incoming ufw default deny outgoing ufw allow in on tun0 ufw allow out on tun0 ufw allow in on [network interface name] from 192.168.0.0/24 ufw allow out on [network interface name] to 192.168.0.0/24 ufw allow out on [network interface name] to [IP address of the VPN gateway] port 1194 proto udp ufw allow in on [network interface name] from [IP address of the VPN gateway] port 1194 proto udp ufw enable Make it executable: $ chmod +x killswitch-ufw.sh Execute: $ ./killswitch-ufw.sh Kill switch using iptables  Make a shell script (killswitch-iptables.sh): iptables --flush iptables --delete-chain iptables -t nat --flush iptables -t nat --delete-chain iptables -P OUTPUT DROP iptables -A INPUT -j ACCEPT -i lo iptables -A OUTPUT -j ACCEPT -o lo iptables -A INPUT --src 192.168.0.0/24 -j ACCEPT -i [network interface name] iptables -A OUTPUT -d 192.168.0.0/24 -j ACCEPT -o [network interface name] iptables -A OUTPUT -j ACCEPT -d [IP address of the VPN gateway] -o wlp6s0 -p udp -m udp --dport 1194 iptables -A INPUT -j ACCEPT -s [IP address of the VPN gateway] -i wlp6s0 -p udp -m udp --sport 1194 iptables -A INPUT -j ACCEPT -i tun0 iptables -A OUTPUT -j ACCEPT -o tun0 Make it executable: $ chmod +x killswitch-iptables.sh Execute: $ ./killswitch-iptables.sh",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "18d0f807783a993bcce4045af291f9fa",
    "u": "https://linux.tymyrddin.dev/docs/services/edit-hosts-file",
    "t": "Edit hosts file ",
    "c": "Edit hosts file  The hosts file is a system file on a device that lets you map specific domain names to an IP address. If you want to add new entries to the hosts file, you’ll need the IP address of the server that you want to map a hostname to. XXX.XXX.XXX.XXX some.domain.name The hosts file lets you override DNS entries for any domain name. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. Blocking is achieved by setting the IP address of the ad networks to a loopback address like 127.0.0.1 which will not return anything. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. If your device is infected with malware, then your hosts file may be compromised to included unknown entries for known domain names. That is NOT the IP address of your bank! This type of DNS attack is known as DNS pharming, and checking your hosts file can uncover potential infection. Open terminal application In the terminal, give the command sudo nano /etc/hosts Enter your administrator password after running the command Add as many entries as needed",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "dab58b9843b2700e76f1b27de5f7b3e1",
    "u": "https://linux.tymyrddin.dev/docs/guards/nftables",
    "t": "NFTables ",
    "c": "NFTables  The successor of iptables. So let me try. Still at it and //Warning: Not been tested yet//. Basic idea  flush ruleset table inet filter { set tcp_accept { type inet_service; flags interval; elements = { http, https, ssh, } } set udp_accept { type inet_service; flags interval; elements = { openvpn, } } chain base_checks { # allow established/related connections ct state {established, related} accept # early drop of invalid connections ct state invalid drop } chain input { type filter hook input priority 0; policy drop; # Accept on localhost iifname lo accept jump base_checks # Accept ICMPv6 meta l4proto ipv6-icmp icmpv6 type { destination-unreachable, packet-too-big, \\ time-exceeded, parameter-problem, mld-listener-query, mld-listener-report, \\ mld-listener-reduction, nd-router-solicit, nd-router-advert, nd-neighbor-solicit, \\ nd-neighbor-advert, ind-neighbor-solicit, ind-neighbor-advert, mld2-listener-report \\ } accept # Accept ICMP meta l4proto icmp icmp type { destination-unreachable, router-solicitation, \\ router-advertisement, time-exceeded, parameter-problem } accept # Accept mDNS udp dport mdns ip6 daddr ff02::fb accept udp dport mdns ip daddr 224.0.0.251 accept # Accept UPnP IGD port mapping reply udp sport 1900 udp dport >= 1024 ip6 saddr { fd00::/8, fe80::/10 } meta \\ pkttype unicast limit rate 4/second burst 20 packets accept udp sport 1900 udp dport >= 1024 ip saddr { 10.0.0.0/8, 172.16.0.0/12, \\ 192.168.0.0/16, 169.254.0.0/16 } meta pkttype unicast limit rate 4/second \\ burst 20 packets accept # Allow ports tcp dport @tcp_accept accept udp dport @udp_accept accept } # Not a gateway. We do not forward. chain forward { type filter hook forward priority 0; policy drop; jump base_checks } # Chain to accept all outgoing packets chain output { type filter hook output priority 0; policy accept; } }",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "665111039df3b8f523148d3e8c28cfd2",
    "u": "https://linux.tymyrddin.dev/docs/malware/clean-machine",
    "t": "Malware detection and removal ",
    "c": "Malware detection and removal  Automagically  ClamAV  Install with: $ sudo apt-get install clamav clamav-daemon Check it has been installed: $ clamscan --version To update the signatures, first stop the clamav-freshclam service: $ sudo systemctl stop clamav-freshclam The actual update: $ sudo freshclam Restart the clamav-freshclam service: $ sudo systemctl start clamav-freshclam Make a first run with --infected : prints only infected files --remove : removes infected files --recursive : all the subdirectories in the directory will be scanned $ clamscan --infected --remove --recursive [absolute/path/to/directory/to/start/scan] For example, scan your whole system by running the following command: $ sudo clamscan --infected --recursive --remove / ClamTK  ClamTK is a Graphical User Interface for ClamAV software program. $ sudo apt-get install clamtk Start it with $ clamtk Unable to read preferences! No such file or directory note: (re)creating prefs file. Beautiful. Add your preferences. And keep the signatures updated. Manually  Basic checks  Check /etc/passwd for new accounts. Especially new accounts you don’t recognise with a UID less than 500 are very suspicious. If a new account with a UID of 0 is in the list, definitely check it out. Also look for orphaned files, indicators of an account that has been deleted (may take a while): $ sudo find / -nouser -print Take a look at your processes with ps -aux , htop or pstree for unusual processes. Boot the machine from a known safe live-CD image and scan for suspicious files with a rootkit scanner. Check crontab, it may be that the keylogger is relaunched regularly when it is shut off or if the system reboots. Look at the email streams. When programs start sending email by using another IP than your email server (if you have one), it might be something fishy. It can of course also be legitimate. Also consider that a keylogger might just log in to your email server with valid credentials and email from there. Check for keylogger  A trick to try if a keylogger is present: Type a random unique string on your keyboard in the live running machine. Reboot the machine from a known LiveCD or LiveUsb and grep for that string. Find out where the string is stored, and you may have the temp file of the keylogger. Check the folder it is in, and check the folders upward in the tree. Remove  There’s no general recipe. The detection steps above, at best give clues for (further research into) what to remove where. Try DuckDuckGo to access the wisdoms on the internet. If your system has been infected by an unknown trojan , reinstall. To make this experience an enjoyable event if and when it happens, reinstall from the regular backups made on an external disk. If a VM was infected, revert to an earlier snapshot that you think was clean or import an earlier exported .ova of it. This will probably not help if the host was reached, of course. Fail  It is possible for malware to persist across a re-format and re-install, if it is sufficiently ingenious and sophisticated: if for example, it can persist in the BIOS, in the firmware for peripherals (some hardware devices have firmware that can be updated, and thus could be updated with malicious firmware), or with a virus infecting data files on removable storage or on your backups. However, most malware doesn’t do anything quite this nasty. Therefore, while there are no guarantees, re-formatting and re-installing should get rid of almost all malware you’re likely to encounter in the wild. Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a3a5026ec5a67f688460ca27b89f2bfb",
    "u": "https://linux.tymyrddin.dev/docs/data/timeshift",
    "t": "Shift back and forth in time from past to present ",
    "c": "Shift back and forth in time from past to present  Assume data loss is inevitable. It’s not a matter of if, it is a matter of when. You best protect your data with a solid backup strategy. Make an rsync Timeshift backup of your entire system, or synchronise files with a remote system using rsync . Rsync ( r emote sync ) (GPL v3) is an open source utility for fast incremental file transfer. It is a file-copying tool which can copy locally and to/from a remote host. It offers many options to control its behaviour, and its remote-update protocol can minimize network traffic to make transferring updates between machines fast and efficient. It is widely used for backups and mirroring and as an improved copy command for everyday use. The package provides both the rsync command line tool and optional daemon functionality. If you make a backup of a system for the first time to be able to restore a system from (the whole point of it), test it with an actual restore. Having done so helps keep calm when the bleep hits the fan. Rsync  Installing rsync  Installing it from the repository: $ sudo apt-get install rsync General usage  The general command is of the form: $ rsync [options] [source] [destination] Backup to external disk rsync uses an algorithm that minimises the amount of data copied by only moving the portions of files that have changed. It operates in a way similar to ssh, scp, and cp, for example: $ rsync -a [directoryname]/ /media/[path/to/external/disk]/[directoryname] The a option is a combination flag. It stands for “archive” and syncs recursively (includes all subdirectories and subdirectories of subdirectories) and preserves symbolic links, [[en:linux:files|special and device files]], modification times, group, owner, and permissions. There are a lot of different switches that you can use for rsync to personalize it to your specific needs, for example: -a means recursive (recurse into directories), links (copy symlinks as symlinks), perms (preserve permissions), times (preserve modification times), group (preserve group), owner (preserve owner), preserve device files, and preserve special files. -v means verbose and shows you what rsync is backing up. -z enables compression -h for human-readable, output numbers in a human-readable format -delete tells rsync to delete any files that are in the second directory that aren’t in the first directory. Synchronize files from local to remote  While doing synchronization with a remote server, you need to specify username and ip-address of the remote server. You should also specify the destination directory on the remote server. The format is username@machinename:path . $ rsync -avz tymyrddin/ [username protected]@192.168.100.10:/home/tymyrddin/ password: sending incremental file list ./ modsecurity-2.9.2.tar.gz [snip] sent 4993369 bytes received 91 bytes 2432411.23 bytes/sec total size is 4991313 speedup is 2.87 Copy a remote directory to a local machine  In this example, a directory /home/tymyrddin/pkgs on a remote server is being copied in a local computer in /tmp/mypkgs . # rsync -avzh [username protected]:/home/tymyrddin/pkgs /tmp/mypkgs password: receiving incremental file list created directory /tmp/mypkgs pkgs/ pkgs/lighttpd_1.4.45.orig.tar.xz [snip] sent 91 bytes received 4.99M bytes 322.16K bytes/sec total size is 4.99M speedup is 1.00 Rsync over ssh  rsync allows you to specify the remote shell which you want to use. You can use rsync ssh to enable the secured remote connection. To specify a protocol with rsync you need to give -e option with protocol name you want to use. Use rsync -e ssh to specify which remote shell to use. Example: # rsync -avzhe ssh [username protected]:/root/install.log /tmp/ password: receiving incremental file list install.log sent 30 bytes received 8.12K bytes 1.48K bytes/sec total size is 30.74K speedup is 3.77 Do not overwrite modified files at the destination  In a typical sync situation, if a file is modified at the destination, we might not want to overwrite the file with the old file from the source. Use the -u option. Timeshift  Timeshift is free and open source software (source code can be found on GitHub) released under the LGPL-3.0 and GPL-3 licenses. The application is available in the official repositories of the major Linux distributions. To install on Debian/Ubuntu: sudo apt install timeshift Timeshift can be launched from the desktop environment application menu, or from the command line. The first time the application runs, choose what kind of backend to use, rsync or btrfs. Btrsf-based snapshots are byte-for-byte copies of the original filesystem, and are created and restored in no time by using the native snapshot feature of the btrsf filesystem. They cannot be saved on external disks or devices. If the main disk fails, so does the snapshot. Rsync-based snapshots are based on the use of hard links, implementing an incremental strategy. The first backup is a full backup; subsequent backups will include only changed files. Snapshots created by rsync can be copied on external devices formatted with a Linux filesystem. Choose weekly, daily, hourly, on boot, and how many snapshots should be kept. Snapshots can also be created on demand. Choose whether and which users home directories should be included in the snapshots and what kind of files should be included (hidden ones or all). The snapshot will be kept inside the /timeshift directory on the selected filesystem. To explore the files included in the snapshot, select it in the list and click on the Browse button. A file manager window will be opened displaying the included files. In the same way, delete a snapshot by clicking on the Delete button and restore a snapshot by clicking on Restore. If no changes to system partitions were made, nothing needs to be modified.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "efd32427f27866ce992dc73a78198203",
    "u": "https://linux.tymyrddin.dev/docs/data/disk-encryption",
    "t": "Disk encryption ",
    "c": "Disk encryption  Cryptsetup is a utility used to setup disk encryption based the on dm-crypt kernel module. LUKS (Linux Unified Key Setup) is the standard for Linux hard disk encryption, facilitating compatibility among distributions, and providing secure management of multiple user passwords. Installing cryptsetup  As root (on debian and its derivatives): # apt-get install cryptsetup Find drive  # fdisk -l Example: It has found /dev/sdb1 , my external drive. Wipe drive  If it is a new drive there was no previous sensitive data on it. If it is a disk that contained an encrypted volume, previous sensitive data is encrypted and sensitive data is not directly readable. In both cases you can continue with creating an encrypted volume If you previously had unencrypted sensitive data on the drive, you need to do something to obscure that data. Deleting it is not enough. Drives can be wiped with dd which overwrites it with zeros (quick) or random data (more secure, but it takes a whole night for example for a 120G drive). You can overwrite a partition, or overwrite the entire drive (you will have to repartition the drive afterward). To overwrite an entire drive, leave off the partition number of the device name (that you found with fdisk) in one of the following dd commands (use output file of=/dev/sd* instead of /dev/sd*1 ). # dd if=/dev/zero of=/dev/sdb1 or # dd if=/dev/urandom of=/dev/sdb1 Create encrypted volume  # cryptsetup luksFormat /dev/sdb1 Enter a passphrase when asked. Open the encrypted volume: # cryptsetup luksOpen /dev/sdb1 <name> Where <name> is a temporary name you pick (no special characters or spaces). Closing the volume removes the name. Creating filesystem For creating an ext4 filesystem: # mke2fs -t ext4 /dev/mapper/<name> Use ext2 for a small drive. Mount drive  If your partition has no label, it will be mounted in /media/UUID , where UUID refers to the UUID of the partition. For mounting linux drives: # mount /dev/mapper/<name> /mnt /mnt can be any mount point you choose. Own it  # chown -R [user] /mnt Where [user] is your user name. Unmount drive  Unmount drive and close the encrypted volume: # umount /mnt # cryptsetup luksClose <name> Using drive ",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5a5f62d2f07da280b41a3e7c9a043fc7",
    "u": "https://linux.tymyrddin.dev/docs/malware/readme",
    "t": "Introduction ",
    "c": "Introduction  Every computer connected to the internet is participating in that network and has the ability to receive malicious files. It costs nothing, literally, to run antivirus on Linux, so it is a mystery to me why some people feel that not using Linux antivirus is worth the risk. There is ample evidence of Linux malware in existence. Indicators of compromise: Machine is running slower than usual Machine is consuming more power than necessary Strange behaviour, such as installing programs without your consent, even after rebooting it. Find these, or think you may have an infected system, or just wish to know more: Endpoint detection and response Malware analysis DIY: Malware detection and removal Analysing trojans",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9ea768448c1e461c77bba22059360f0b",
    "u": "https://linux.tymyrddin.dev/docs/authentication/accounts",
    "t": "Disable and enable user accounts ",
    "c": "Disable and enable user accounts  Shadow file modification  The easiest way to disable a user account is to modify the /etc/shadow file, which holds encrypted passwords for users listed in /etc/passwd . An example user entry found in the /etc/shadow file: tester:$6dKR$Yku3LWgJmomsynpcle9BCA:15711:0:99999:7::: To disable this account add * or ! in front of the encrypted password: tester:!$6dKR$Yku3LWgJmomsynpcle9BCA:15711:0:99999:7::: This can also be achieved by: # usermod -L tester Any login method, which uses the /etc/shadow file to authenticate a user, will no longer be able to decrypt the user’s password and will not allow him/her to login: $ su tester Password: su: Authentication failure To enable the user account simply remove the added magic from the /etc/shadow file or use the usermod command: # usermod -U tester This method of disabling user accounts in the Linux system is only valid for programs or commands, which use the /etc/shadow file to authenticate users. If a user has already exchanged ssh keys he/she will still be able to log in despite such modifications. nologin User Shell  A more secure way of disabling a user account is to replace the existing user login shell with a pseudo shell such as /usr/sbin/nologin . nologin will display a message: This account is currently not available. To do this, modify the /etc/password file and change the user’s entry from: tester:x:1001:1001:Tester,User,,:/home/tester:/bin/bash to: tester:x:1001:1001:Tester,User,,:/home/tester:/usr/sbin/nologin User tester will no longer be able to log in with a valid password: $ su tester Password: This account is currently not available.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "caf1d4970051809ecc74d381e29ae065",
    "u": "https://linux.tymyrddin.dev/docs/services/renew-lease",
    "t": "Renew IP lease ",
    "c": "Renew IP lease  A DHCP client can on occasion send information in DHCP requests: hostname, MAC address, operating system, and DHCP version. All operating systems provide their most recent IP address to the DHCP server. If you change your MAC address to minimise risk, best to also renew the IP leases on the router. There are several ways to renew the IP lease, by using command line tools such as nmcli or dhclient , or by restarting network services. Restarting network service (Debian-based): $ sudo /etc/init.d/networking restart On the command-line with dhclient (The -r flag explicitly releases the current lease, and once released, the client exits): $ sudo dhclient -r Now a fresh IP can be obtained: $ sudo dhclient On the command-line with nmcli : $ nmcli con From the list that appears, get the NAME of the connection you wish to request a new lease for, then bring down and up: $ nmcli con down id 'NAME' $ nmcli con up id 'NAME'",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b728b3c77f1b31fdd48e4ceb6f47bee2",
    "u": "https://linux.tymyrddin.dev/docs/services/browsers",
    "t": "Choose a secure browser that protects your privacy ",
    "c": "Choose a secure browser that protects your privacy  Falkon uses QtWebEngine as its rendering engine, which is open-source. Falkon is primarily developed and maintained by the KDE community. QtWebEngine does use upstream code from the Chromium project, but removes binaries and Google-related services. Mullvad browser is the Tor browser without the Tor Network and instead of using the Tor Network, is designed to be used with a trustworthy virtual private network (VPN). Similar to the Tor browser, the Mullvad browser provides solid tracking and fingerprinting protection. Mullvad browser removes all telemetry and enables private browsing by default. uBlock Origin comes pre-installed as the default ad/tracker blocker. Vivaldi has no idea who you are or what sites you visit. Brave is fast, secure, and privacy-focused by default. It has a built-in ad blocker and browser fingerprinting protection, while also giving you access to numerous add-ons and extensions. Ungoogled Chromium browser is an open source project to provide a Chromium browser, without the Google privacy issues. LibreWolf is a fork of Firefox focused on privacy, security, and freedom, only available for desktop operating systems. Tor browser enables you to use Tor without needing to install the Tor proxy . If the browser you choose is not secure and privacy-friendly, lock down the browser and the software it can invoke.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "631cdb8b3879c02a11b0570db5b03d7a",
    "u": "https://linux.tymyrddin.dev/docs/services/ssh-tor",
    "t": "Anonymise SSH sessions with Tor ",
    "c": "Anonymise SSH sessions with Tor  In some countries, proving that you connected to a particular server is enough to be prosecuted, but SSH doesn’t provide a native way to obfuscate to whom it connects. For that, SSH with Tor proxy can be used. Configuration SSH  Install connect-proxy: $ apt-get install -y connect-proxy Set up OpenSSH to use Tor for a specific connection  Create or open ~/.ssh/config $ vi ~/.ssh/config Append the below entry (replacing mydomain.com with actual server domain name or IP and user with actual user): Host jumphost HostName mydomain.com User user CheckHostIP no Compression yes Protocol 2 ProxyCommand connect -4 -S localhost:9050 $(tor-resolve %h localhost:9050) %p Set up OpenSSH to use Tor for a bunch of connections  Host anonymous_* CheckHostIP no Compression yes Protocol 2 ProxyCommand connect -4 -S localhost:9050 $(tor-resolve %h localhost:9050) %p Host anonymous_mydomain HostName mydomain.com User user Host anonymous_mydomain2 HostName mydomain2.com User user Port 980",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2a220c77ca8e52980da9f9b3fdda642a",
    "u": "https://linux.tymyrddin.dev/docs/services/apparmor",
    "t": "Application armour (AppArmor) ",
    "c": "Application armour (AppArmor)  Application Armor (AppArmor) is a kernel-level Mandatory Access Control (MAC) feature that restricts applications from accessing classes of computer resources. For example, AppArmor can allow a word processor to read and write files to the local hard drive, but deny it to access the internet to send messages. A common way to spread malware is to wrap it (or hide it) in some completely different type of file. An application like AppArmor can be configured to disallow these files any write or internet capabilities. Any malware in the file would not be able to copy itself or “call home” as a newly recruited botnet member. AppArmor likely does not need much tuning for a standard desktop system as its default settings are good enough to fend off most malware attempts.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1d190076d1f26e7ba79bcedbf4ecb0c4",
    "u": "https://linux.tymyrddin.dev/docs/guards/readme",
    "t": "Introduction ",
    "c": "Introduction  There are many types of devices and mechanisms within the security environment to provide a layered approach of defense. This is so that if an attacker is able to bypass one layer, another layer stands in the way to protect the network. Two of the most popular and significant tools used to secure networks are firewalls and intrusion detection systems. Choosing a firewall for a GNU/Linux  With a firewall, you can: Log hosts scanning services that aren’t running. Limit the services that applications can connect to. Segregate the local network into trust segments (Local Area Network (LAN), DeMilitarised Zone (DMZ), and Internet). Redirect ports to the hosts providing the service (Network address translation (NAT)). If you need one for a personal PC at home, probably only the first two features are of interest. These are also the two that are most likely to cause issues for a beginning user. Linux firewall code includes the netfilter architecture, which was introduced in stable kernel 2.4. For configuring netfilter through its own command line interface ( iptables ), one has to specify the behaviour of all IP packets that make up a connection both inward and outward. It requires extensive knowledge of TCP/IP protocols, but many tools have been developed to automate the configuration of netfilter and iptables. So you have lots of choice . nftables is the successor of iptables, and allows for much more flexible, scalable and performance packet classification. Recommended for beginners is ufw and gufw because of its simplicity and ease of use. Gufw (GNU GPL v3) is for users bamboozled by firewalls. It has an easy-to-use interface for setting up inbound and outbound traffic rules for apps/services and ports. It is designed for beginners. Gufw is a GUI front-end to ufw , which is in itself a front-end to netfilter and iptables . Choosing a HIDS for a GNU/Linux  Most of the HIDS tools for Linux are File Integrity Agents (FIAs) and use Error Detection algorithms. A FIA monitors the integrity and state of the files and objects on a machine. It creates a hash of all files to be monitored. That snapshot is periodically checked against the current hash of the files. If it detects changes to those files, then it alerts the administrator that an unauthorised access or change has taken place. Aide is such a FIA, entirely open source and licensed via the GPL and easy in its configuration. For a Home PC, Aide will do. Tripwire OSSEC monitors the checksum signatures of all the log files to detect possible interference and any attempts to get to the root account.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "17acffe6798d51cf56eb051c4e252cba",
    "u": "https://linux.tymyrddin.dev/docs/guards/gufw-and-ufw",
    "t": "Gufw and ufw ",
    "c": "Gufw and ufw  Installation  Linux distributions come with a firewall installed (IPtables are built into the Linux kernel), but it is disabled because it would block some basic functionality for users on the local network. Specifically, it would block Samba and Avahi (zeroconf); limiting interoperability with other computers (like file and printer sharing) and disabling automatic discovery of network services. It is better to turn it on. Especially on mobile devices like laptops, which sometimes connect to other networks than your own. it’ll be in your menu items (the icon in mint is a brick wall). You can install ufw (command-line) or gufw , a GUI frontend to ufw , and that will also install ufw : Enabling  The firewall is called ufw ( u ncomplicated f ire w all), and can be operated from the terminal (//Menu > Accessories > Terminal//): $ sudo ufw enable Type your password when prompted for it; this will remain entirely invisible, not even asterisks will be shown. Ufw has a sensible set of default settings (profile), which are fine for the vast majority of home users. So unless you have special wishes: you’re done! Checking status  You can check the status of the firewall with this command: $ sudo ufw status verbose Status: active Logging: on (low) Default: deny (incoming), allow (outgoing), disabled (routed) New profiles: skip Usage examples  ICMP  By default, UFW allows ping requests. You may find you wish to leave (icmp) ping requests enabled to diagnose networking problems. To disable ping (ICMP) requests, edit /etc/ufw/before.rules and remove the following lines: # ok icmp codes -A ufw-before-input -p icmp --icmp-type destination-unreachable -j ACCEPT -A ufw-before-input -p icmp --icmp-type source-quench -j ACCEPT -A ufw-before-input -p icmp --icmp-type time-exceeded -j ACCEPT -A ufw-before-input -p icmp --icmp-type parameter-problem -j ACCEPT -A ufw-before-input -p icmp --icmp-type echo-request -j ACCEPT or change the “ACCEPT” to “DROP”: # ok icmp codes -A ufw-before-input -p icmp --icmp-type destination-unreachable -j DROP -A ufw-before-input -p icmp --icmp-type source-quench -j DROP -A ufw-before-input -p icmp --icmp-type time-exceeded -j DROP -A ufw-before-input -p icmp --icmp-type parameter-problem -j DROP -A ufw-before-input -p icmp --icmp-type echo-request -j DROP SSH  $ sudo ufw allow ssh $ sudo ufw enable $ sudo ufw status",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d56bfce2552a1e5bfdcae1490b64dd16",
    "u": "https://linux.tymyrddin.dev/docs/data/archive-compress",
    "t": "Archiving and compressing ",
    "c": "Archiving and compressing  Linux offers separate tools for gathering groups of files into a single archive and compressing that archive for efficient storage. Oh yuk, “efficient”, oh well. It’s about using less disk space and reducing transfer times over networks. And comes at a price. It can increase your CPU usage. tar  You can combine archiving and compressing together by using additional options to the tar ( t ape ar chiver) command. Tar can behave differently on different distros. The manual page contains descriptions of the myriad of features that come with tar . The basic operations of tar : Create a backup archive: c Extract files from an archive: x Compare differences between archives: d Update files in an archive: u Append files: r or A Delete files from an existing archive: d List contents of an archive: t When creating a tar archive, you can add options that compress the resulting archive. With j the archive will be compressed in bzip2 format, and with z in gzip format. For example, tar with bzip2 compression: $ tar xjvf funnybusiness.tar.bz2 *.txt You can also use other compression mechanisms like lzop with tar. It is faster, but the compression is less than with bzip2 which is around 10 times slower while only giving twice the amount of compression. You can also set the compression level in the compression commands themselves. gzip  gzip compresses the size of the given files using Lempel-Ziv coding (LZ77). Whenever possible, each file is replaced by one with the extension .gz. Compress a file: $ gzip funnybusiness.txt Compress all images with a .jpg extension in a directory: $ gzip *.jpg Compress all files in a directory: $ gzip -rv [directory] Test integrity of a gzip compressed file: $ gzip -tv funnybusiness.gz To uncompress a compressed file: $ gunzip -v funnybusiness.gz Fastest compression time, least compression: $ gzip -1 funnybusiness.gz Slowest compression time, most compression: $ gzip -9 funnybusiness.gz bzip2  bzip2 compresses files using the Burrows-Wheeler block sorting text compression algorithm and Huffman coding. Compression is generally considerably better than that achieved by bzip command (LZ77/LZ78-based compressors). Whenever possible, each file is replaced by one with the extension .bz2 . $ bzip2 [filename] Uncompress: $ bunzip [filename].bz2 lzop  lzop uses the LZO data compression library for compression services, and its main advantages over gzip are much higher compression and decompression speed (at the cost of some compression ratio). lzop is copyrighted under the terms of the GNU General Public License (GPL). You will probably have to install it first: $ sudo apt-get install lzop Compress: $ lzop [filename] Unlike gzip and bzip2 , lzop has no separate command for unlzopping. NO UNLZOPPING! Use the d option: $ lzop -dv [filename].lzo",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9a8c19caf75c01821ab8195db5d95c40",
    "u": "https://linux.tymyrddin.dev/docs/services/startup-applications",
    "t": "Disable startup applications ",
    "c": "Disable startup applications  For example, do you really need Samba for sharing files over the network, or the Bluetooth service to connect to Bluetooth devices on a computer that doesn’t have a Bluetooth adapter? Gnome  Go to Show applications -> Startup Applications Remove check marks next to the services you wish to disable at startup. Mate  In MATE, you can configure your startup applications in the main control centre, using the “Startup Applications” applet.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "15a3fa57c73121cd7d11daa366921163",
    "u": "https://linux.tymyrddin.dev/docs/authentication/sudo-killers",
    "t": "Design principles and sudo killers ",
    "c": "Design principles and sudo killers  GNU/Linux was built as a multi-user operating system from the start with two important principles: The Least Privilege principle states that any entity, user or otherwise, should only be granted the minimum amount of privileges required to do its job and no more. The second, equally important principle, is Isolation. This is implemented in user separation. The activities of one user should not be allowed to affect other users, and data belonging to one user should not be accessible to another user unless specifically allowed. Most GNU/Linux distributions create a non-privileged user account for daily use, but one can use sudo or download an and install an app to do things as administrator in desktop applications. With the users’ password! While the sudo system does not give unbridled root permissions, if an attacker has a limited shell that has access to certain programs using the command sudo he/she might be able to abuse sudo to escalate privileges. The sudo killer tool helps to identify misconfiguration within sudo rules, vulnerability within the version of sudo being used (CVEs and vulns) and the uses of dangerous binary, all of these could be abuse to elevate privilege to root . The tool will provide a list of commands or local exploits which could be exploited to elevate privilege. It does not perform any exploitation on your behalf, the exploitation will need to be performed manually and this is intended. Both red and blue team can use it to their benefit. Installation  Preferably on a kali machine. To pull from docker: service docker start docker pull th3xace/sudo_killer_demo docker run –rm -it th3xace/sudo_killer_demo To build locally using the Dockerfile: service docker start git clone https://github.com/TH3xACE/SUDO_KILLER.git cd SUDO_KILLER docker build -t th3xace/sudo_killer_demo . docker run –rm -it th3xace/sudo_killer_demo Download: https://github.com/TH3xACE/SUDO_KILLER Command usage  ./sudo_killer.sh -c -r report.txt -e /tmp/ Arguments: k : Keywords e : export location (export /etc/sudoers) c : include CVE checks with respect to sudo version s : supply user password for sudo checks (not recommended ++except for CTF) r : report name (save the output) h : help If you need to input a password to run sudo -l then the script will not work if you don’t provide a password with the argument -s . sudo_killer does not exploit automatically by itself, it was designed to check for misconguration and vulnerabilities and then offer: a list of commands to exploit a list of exploits some description on how and why the attack could be performed CVEs check  To update the CVE database: ./cve_update.sh Disclaimer  This script is for Educational purpose ONLY. Do not use it without permission. The usual disclaimer applies, especially the fact that TH3xACE is not liable for any damages caused by direct or indirect use of the information or functionality provided by these programs.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4a907115b0755f2b068a20d7699df63c",
    "u": "https://linux.tymyrddin.dev/docs/services/dns-servers",
    "t": "Use alternative DNS servers ",
    "c": "Use alternative DNS servers  When you don’t set up DNS servers on your computer or router, your DNS queries will run on your ISP’s DNS servers. Without VPN (with killswitch and/or firewall set as a VPN fail-safe mechanism ), DNS requests are most likely sent unencrypted, which can lead to common DNS attacks. Domain hijacking (Redirection) DNS flood attack (a type of DDoS attack) DNS spoofing or DNS cache poisoning DNS hijacking (malware infection on a local device to hijack DNS to redirect traffic to a phishing site) And any man in the middle of your traffic can see your online behaviour and the websites you visit. Your ISP’s DNS servers see every search you make in your browser. Using your ISP’s DNS servers as default DNS servers doesn’t do anything for security or privacy. Alternative DNS servers  OpenNIC is a group of volunteers who run an alternate DNS network offering free DNS servers. Depending on your location, you are offered different servers. OpenNIC offers DNS neutrality (it does not censor content), and you get the right to choose how much data OpenNIC logs. OpenDNS is a cloud-based service offering three solutions in their Home package, two of which are free. To connect with your nearest DNS server, and for faster page load times, it uses anycast routing. DNSWatch also offers DNS neutrality and does not log any DNS queries or record history. Quad9 DNS blocks malicious and suspicious domains using security intelligence from a group of companies to improve security. They do keep logs on some activity. Use wireshark to check for leaks  This is an example in a debian virtualbox VM, but is also valid in general for other setups. Virtual machines receive their network address and configuration on the private network from a DHCP server integrated into VirtualBox. The IP address assigned to the virtual machine is on a completely different network than the host (but can be seen with Traffic monitoring from the host). As more than one card of a virtual machine can be set up to use Network address translation (NAT), the first card is connected to the private network 10.0.2.0, the second card to the network 10.0.3.0 and so on. To check if you have DNS leaks, fire up wireshark: Start capturing on eth0 and connect to the VPN. After capturing either a fixed number of packets, or an amount of data or for a specific time period, go to //Statistics -> Endpoints// There should only be one public IP address, namely that of the VPN server that you’re connected to. The ‘’10.0.2.15’’ in this image is a local address.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c02fb8b1b6e66d6ee327f8ba59894d1f",
    "u": "https://linux.tymyrddin.dev/docs/services/change-mac",
    "t": "Change MAC address ",
    "c": "Change MAC address  A MAC address identifies the device connected to a network and allows the network to track, restrict or allow access based on it. Routers identify and assign static IP addresses based on the MAC addresses of devices. Before you try to change the MAC address, you need to know the value that you want to use. Set the 2’s place bit (the “locally administered” bit) in the first byte, to differentiate it from a guaranteed globally unique MAC address. Usually the first three bytes an unicast MAC address is an “Organizationally Unique Identifier” (OUI) that the IEEE assigned to the manufacturer of your Ethernet device. Manufacturers are required to make sure they keep the last 3 bytes unique. Avoiding all of that knowledge, the MAC address generator tool can generate a valid address for you. With ‘macchanger’ you can change the MAC address of any Ethernet network device: Turn off your network interface: $ sudo ifconfig eth0 down Use ‘macchanger’ to randomly generate new MAC address and assign it to eth0 network interface: $ sudo macchanger -r eth0 Current MAC: 00:10:4C:25:7A:3F (unknown) Faked MAC: 32:cf:cb:6c:63:cd (unknown) Enable eth0 network interface and check new MAC address: $ sudo ifconfig eth0 up $ sudo ifconfig eth0 If a specific MAC address, like 00:0a:95:9d:68:16 , is required: $ sudo macchanger -m 00:0a:95:9d:68:16 eth0",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e9ea2729e433eb193400d9cbaf963008",
    "u": "https://linux.tymyrddin.dev/docs/data/shred-and-delete",
    "t": "Shredding files and deleting data ",
    "c": "Shredding files and deleting data  Even when you erase everything on your hard disk, sometimes it is possible to recover (pieces of) data with forensics software and/or hardware. If that data is confidential, delete files and data securely so that no-one will recover them. Solid State Drives (SSD) may have introduced dramatic changes to the principles of computer forensics, in particular for recovering files and partitions. When encrypting and compressing files, clear-text versions that existed before you compress/encrypt the file or clear-text copies that are created after you decrypt/decompress it remain on your hard drive. There may also be “temp” files left behind. Unless you purge — not just delete — those clear-text files. Echoes of your personal data — swap files, temp files, hibernation files, erased files, browser artifacts, etc — are l ikely to remain on any computer that you use to access (encrypted) data. It is a trivial task to extract those echos. A hidden access trap. Purge – not just delete – echoes. Shredding files  Linux, FreeBSD and many other *nix systems come with a command line tool called shred installed. The shred command can be useful for destroying files so that its contents are very difficult to recover, even using high-sensitivity data recovery equipment. It repeatedly overwrites the data and the associated file or device names with random data. When used without options, shred will overwrite given files or devices 25 times. A device can be a partition or an entire HDD, USB key drive, etc. $ shred [option(s)] file(s)_or_devices(s) For example $ shred filename1 filename2 will shred both files, and $ shred /dev/hda4 will shred the fourth partition on the first HDD. By default, shred does not delete files or partitions after overwriting them. Overwritten files can be deleted by using the -u option. $ shred -u filename1 filename2 This both frees up the disk space for other data and makes it harder to reconstruct the shredded data. shred relies on the assumption that the filesystem overwrites data in place. But journal filesystems like //Ext3// and //ReiserFS//, RAID-based filesystems, compressed filesystems, and filesystems that cache data in temporary locations do not satisfy this assumption. Plus that copies of files can be retained in filesystem backups and on remote mirrors. Shredding partitions is therefore more reliable than shredding files. And even when shredding partitions, most HDDs map out bad sectors invisibly to application programs and utilities, and that includes shred. Sensitive data in such sectors will not be destroyed by shred. Permanently delete files (including data in RAM or swap)  The Secure-Delete package comes with four commands: * srm - Secure remove; used for deleting files or directories currently on your hard disk smem - Secure memory wiper; used to wipe traces of data from your computer’s memory (RAM) sfill - Secure free space wiper; used to wipe all traces of data from the free space on your disk sswap - Secure swap wiper; used to wipe all traces of data from your swap partition| srm (secure remove) is a more advanced version of the shred command. It uses a combination of random data, zeros, and special values developed by cryptographer Peter Gutmann to make files irrecoverable. The shred tool allows you to specify the number of passes and the secure-delete tools use a default of 38 passes. It will also assign a random value for the filename, hiding that key piece of evidence: $ srm filename Removing a directory and all its subdirectories (recursive): $ srm -r directory/ smem (secure memory wipe) removes residual traces of data that remain in memory. It is relatively easy for someone with the right tools to figure out what you had stored in RAM, which may be the contents of important files, internet activity, or whatever else it is you do with your computer. smem is slow. There are options to speed things up, but they increase risk by performing fewer overwrite passes. Invoke with: $ smem sfill (secure free space wipe) wipes all the free space on your disk where past files have existed. This is particularly useful if you are getting rid of a hard disk for good; you can boot a LiveCD, delete everything on the disk, and then use sfill to make sure that nothing is recoverable (as root): # sfill mountpoint/ NOTE: If you have /home/ on a separate partition and you try /home/hilarious/mistake as mountpoint, sfill will happily wipe the free space on which the mistake directory resides (the entire /home/ partition). sswap (secure swap wipe) wipes swap partitions. Swap partitions store data of running programs when RAM is filled up. Find your mounted swap devices by running: $ cat /proc/swaps Or look in your /etc/fstab file for filesystems of type swap. It can be /dev/sda5 or /dev/dm-1 , etc. Disable the swap partition: $ sudo swapoff /dev/sda6 Wipe: $ sudo sswap /dev/sda6 Re-enable swap: $ sudo swapon /dev/sda6 Making deleted data hard to recover  A hack that might work for sensitive data in sectors that were not destroyed by shred is towrite zeroes or random data to a file on the drive until it fills up all of the available space, then delete it: $ dd if=/dev/urandom of=/path/filename1 Then delete: $ rm /path/filename1 This also works on partitions: $ dd if=/dev/urandom of=/dev/sda4 Then delete $ fdisk /dev/sda4 Command (m for help): d Partition number (1-4): 4 Use bleachbit to delete files  With BleachBit you can free cache, delete cookies, clear Internet history, shred temporary files, delete logs, and discard junk you didn’t know was there. The version of BleachBit in the repositories of many Linux distributions is often stale, so to use the best and latest version, use download .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d55fbb6233b1e09122da3e3d15c8a60b",
    "u": "https://linux.tymyrddin.dev/docs/privacy/mat2",
    "t": "Use Metadata Anonymisation Toolkit 2 (MAT2) ",
    "c": "Use Metadata Anonymisation Toolkit 2 (MAT2)  mat2 provides a command line tool, and graphical user interfaces via a service menu for Dolphin, the default file manager of KDE, and an extension for Nautilus, the default file manager of GNOME. This is a tool natively created under Debian-Ubuntu and available as Debian and Ubuntu package . For usage, read the Man page .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "19e6cefe0df3934901104afb485f1aa5",
    "u": "https://linux.tymyrddin.dev/docs/guards/tripwire",
    "t": "Tripwire ",
    "c": "Tripwire  Tripwire is a free software security and data integrity tool useful for monitoring and alerting on specific file change(s) on a range of systems. It functions as a host-based intrusion detection system. It is suitable for monitoring a small number of servers where centralized control and reporting is not needed and professional support is not a requirement. Tripwire was originally a free, open source product and is now a commercial product but a free version (branched in 2000) is still being developed. Problems  Needs gcc for compiling. Will not compile with newer gcc’s. Tripwire provides no details about modified/added/removed files, only path names, unless one uses twprint --report-level 4 , which is pretty verbose. Omits checksum if file size is zero, which is incorrect for Linux /proc files. Setting it up is hilariously hellish, hence I am spelling it out here. Installation  To install tripwire on a debian-based system: $ sudo apt-get install tripwire Use the arrow keys to navigate: “Remember that passphrase”, for example in keepassx (I also had keepassx generate the passphrase): Repeat: Generating site key (this may take several minutes)... Do the same for local passphrase. Configuration  Just after install the tripwire directory /etc/tripwire contains a number of files, two of which are useful for its configuration. //twcfg.txt// is for general configuration and can easily be the same for all the computers on the same local network. It contains “things” like the location of the tripwire database, instructions for minimising the amount of time the passphrases are kept in memory, and the number of redundant reports. //twpol.txt// contains the policy that declares all the objects that must be monitored and what to do when one of them is lost or altered. Unlike the configuration file, the policy could (and almost certainly will) vary across the several computers on the same network. For security reasons (preventing a malicious intruder from spoofing tripwire into giving a false “okay” message) tripwire uses these cleartext files to create binary files for database checking rather than the cleartext files (that are best immediately removed after the deed). If you make incorrect edits to either of these files, you will have to restore from backup or tripwire will not be able to create its database. Before making modifications to the configuration files, make a backup first: $ cd /etc/tripwire $ sudo cp twcfg.txt twcfg.txt.old $ sudo cp twpol.txt twpol.txt.old Initialisation  Install default policy as root (mind the capital P, and know the cursor does not move at all when copy/pasting the passphrase (right-click works on the command-line for copy/pasting)): # /usr/sbin/twadmin -m P /etc/tripwire/twpol.txt Please enter your site passphrase: Wrote policy file: /etc/tripwire/tw.pol Still as root, generate the initial database (You will be asked for your local passphrase): # /usr/sbin/tripwire -m i Please enter your local passphrase: Parsing policy file: /etc/tripwire/tw.pol Generating the database... *** Processing Unix File System *** It may take a while and then: ### Warning: File system error. ### Filename: /var/lib/tripwire/debian.twd ### No such file or directory ### Continuing... Of course no such database exists (yet). This is the initial run to create it. And a bunch of these appear with (hopefully) a success message at the end: ### Warning: File system error. ### Filename: /proc/5199/fd/4 ### No such file or directory ... The object: \"/proc/sys/fs/binfmt_misc\" is on a different file system...ignoring. Wrote database file: /var/lib/tripwire/debian.twd The database was successfully generated. The twpol.txt file distributed with tripwire contains anything that could be on a UNIX system, so it is guaranteed to complain about programs that you never installed or placed in a different location. These false positives are created when there is a discrepancy between the default policy and the actual local configuration. ACTUALLY!!!!! :D Some further customization is necessary to prevent these large numbers of false positives. The “thing” to do to create a good policy is to remove as many unneeded programs as possible before starting. Next, to make your usage as quick and effective as possible, your policy must cover everything you really need to monitor and nothing else. This includes, at least, all the system binary and library directories (minimally the contents of /bin , /sbin , /usr/bin , /lib ) and the corresponding configuration files in /etc . As of version 2.3.1.2-5, the tripwire package manages policy at a directory level: if a directory appears in the policy, tripwire will add the files in that directory. Not all directory policy entries are recursive and tripwire may not check the contents of those subdirectories. To generate a listing of the discrepancies between the local system and the default policy (or just do the first bit without grep and search for occurrences of “Filename”): # /usr/sbin/tripwire -m c | grep Filename >> twtest.txt Waaaait for it! When this listing has been generated, edit /etc/tripwire/twpol.txt again, and comment out or delete each of the filenames listed in twtest.txt . Use your preferred editor (mine is geany): # geany /etc/tripwire/twpol.txt And there are other files in the default policy that may not make sense to monitor on your local system. These include lock files (which identify that some process is in use) and //pid// files (which identify the //process ID// of some //daemons//). Such files are likely to change often, if not at every system boot, and they can cause tripwire to generate false positives. You can comment out all of the /var/lock/subsys entries as well as the entry for /var/run . After that you need to re-install default policy and generate the database again. This can result in: *** Processing Unix File System *** The object: \"/dev/hugepages\" is on a different file system...ignoring. The object: \"/dev/mqueue\" is on a different file system...ignoring. The object: \"/dev/pts\" is on a different file system...ignoring. The object: \"/dev/shm\" is on a different file system...ignoring. ### Warning: File system error. ### Filename: /proc/22273/fd/4 ### No such file or directory ### Continuing... ### Warning: File system error. ### Filename: /proc/22273/fdinfo/4 ### No such file or directory ### Continuing... ### Warning: File system error. ### Filename: /proc/22273/task/22273/fd/4 ### No such file or directory ### Continuing... ### Warning: File system error. ### Filename: /proc/22273/task/22273/fdinfo/4 ### No such file or directory ### Continuing... The object: \"/proc/sys/fs/binfmt_misc\" is on a different file system...ignoring. Any /dev entries spell that the /dev file system also has other file systems mounted as /dev/hugepages , /dev/mqueue , /dev/pts , and /dev/shm . Similar objects in proc are also ignored. Directories in /proc change all the time, and it is a pseudo-filesystem. My solution is to comment out both /dev and /proc and add the listed objects that have appeared and that appear. The object: \"/proc/sys/fs/binfmt_misc/register\" is on a different file system...ignoring. The object: \"/proc/sys/fs/binfmt_misc/status\" is on a different file system...ignoring. binfmt_misc is a capability of the Linux kernel which allows arbitrary executable file formats to be recognised and passed to certain user space applications, such as emulators and virtual machines. The executable formats are registered through a special purpose file system interface (similar to /proc ). Debian-based distributions provide the functionality through an extra //binfmt-support// package. Needs monitoring. So, added those two as well. After that you need to re-install default policy and generate the database again. Cleaning up  It is now safe to delete the clear text versions of the tripwire policy and configuration files: # rm /etc/tripwire/twcfg.txt /etc/tripwire/twpol.txt If they need to be restored,...",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b7b37faf290dcbffa569d58bec9bd82d",
    "u": "https://linux.tymyrddin.dev/docs/privacy/devices",
    "t": "Turning devices on and off ",
    "c": "Turning devices on and off  Adversaries can try to gain access with trojans - invisibly-installed malware that gives the adversary administrative control over targeted computers, including, the ability to remotely control devices. Depending on your location and context, you may want to turn devices off and later on again. Some devices can be turned on and off by software, others need blacklisting. Kernel modules are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. And modules can be blacklisted. Examples  Turn on/off camera/webcam  Tape the camera. It may even be possible to turn it off in BIOS (depending on your version). Better yet, if you know what driver module is controlling the webcam, you can disable and enable the driver with a single command on the commandline. uvc driver  Check with: $ lsmod | grep \"uvc\" If stuff like this appears, your webcam device uses an uvc driver : uvcvideo 79005 0 videobuf2_vmalloc 12816 1 uvcvideo videobuf2_core 47787 1 uvcvideo videodev 126451 3 uvcvideo,v4l2_common,videobuf2_core media 18305 2 uvcvideo,videodev usbcore 195340 7 uvcvideo,ums_realtek,usb_storage,ehci_hcd,ehci_pci,usbhid,xhci_hcd To disable the cam: $ sudo modprobe -r uvcvideo To enable the cam: $ sudo modprobe uvcvideo other driver  If not an uvcvideo driver, try $ sudo lsmod | grep \"media\" and use the modinfo command to find out more about the modules listed behind it to locate your webcam driver module: $ sudo modinfo [modulename] Then replace the uvcvideo in the above modprobe command with the name of your driver module. Completely turn it off  To disable the webcam at boot (if file not exists, create it, use your preferred editor): $ sudo geany /etc/modprobe.d/blacklist.conf At bottom of the file add this line: blacklist uvcvideo (or the name of your driver instead of uvcvideo). Save the file and reboot. Your webcam is no longer functioning. Turn on/off microphone  Use the alsa control panel for muting the microphone: $ sudo alsamixer You can also use the same modprobe enabling/disabling method as used for webcam above. The ALSA modules page may be helpful for finding your driver module. Blacklist firewire and thunderbolt  A direct memory access (DMA) attack is a type of side channel attack in which an adversary penetrates a device by exploiting the presence of high-speed expansion ports that permit Direct Memory Access. Firewire, thunderbolt and ExpressCard allow (by design) any connecting device full direct memory access to your system. They can be disabled in /etc/modprobe.d/blacklist-dma.conf (in debian): blacklist firewire-core blacklist thunderbolt The modules will be blacklisted upon reboot.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4a6b446a98f847631f8f77625cd76606",
    "u": "https://linux.tymyrddin.dev/docs/services/tor-proxy",
    "t": "Use a Tor proxy ",
    "c": "Use a Tor proxy  Tor proxy  Install: $ sudo apt update $ sudo apt install tor Check it is installed: $ tor --version Tor version 0.4.6.9. Get your IP address: $ curl ifconfig.me; echo [IP address] Run the same command but preface it with torsocks. The command is now run through the tor client instead: $ torsocks curl ifconfig.me; echo [Some Tor IP address] Shell  To use the Tor network by default for shell commands, torify your shell with this command: $ source torsocks on Tor mode activated. Every command will be torified for this shell. Test with (must now be []): $ curl ifconfig.me; echo [Some Tor IP address] Enable Tor control port  Password protect the Tor connection: $ torpass=$(tor --hash-password \"[password]\") Enable the Tor control port and insert the hashed password: $ printf \"HashedControlPassword $torpass\\nControlPort 9051\\n\" | sudo tee -a /etc/tor/torrc Check the contents of the /etc/tor/torrc configuration file. $ sudo systemctl restart tor Now tor is running on both ports 9050 and 9051. Use in app, for example Firefox  Go to Preferences -> Network Settings -> Settings button Select “Manual proxy configuration” and enter localhost in the “SOCKS Host” field. Use 9050 for port. OK Test by going to a IP site Notes  If a government makes their own national internet, or routes traffic through specific servers to use deep packet inspection (DPI), running Tor may not provide security if the government is able to see the entire path. Sometimes the Tor network is censored, and clients can’t connect to it. An increasing number of censoring countries are using Deep Packet Inspection (DPI) to classify Internet traffic flows by protocol. While Tor uses bridge relays to get around a censor that blocks by IP address, the censor can use DPI to recognize and filter Tor traffic flows even when they connect to unexpected IP addresses. With pluggable transports, censorship against Tor can be bypassed. Not only that. If an attacker can see your traffic, and can see the website you’re visiting, even with a path outside the adversary’s control - they will still be able to correlate the traffic and learn you are visiting the website. If the same connection (the same set of relays) were to be used for a longer period of time a Tor connection could be vulnerable to statistical analysis, which is why the client software changes the entry node every ten minutes.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8a1df405bdd267d46c76e2bf613446f6",
    "u": "https://linux.tymyrddin.dev/docs/guards/ossec",
    "t": "OSSEC ",
    "c": "OSSEC  OSSEC stands for Open Source HIDS Security. It is entirely free to use. As a host-based intrusion detection system, the program focuses on the log files on the computer where you install it. It monitors the checksum signatures of all the log files to detect possible interference. On Unix-like systems, it will monitor any attempts to get to the root account. Although OSSEC is an open-source project, it is owned by Trend Micro, a security software producer. Installation on Ubuntu/Debian",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "524d26dc53c3aa43cfc3edb7fa368aa8",
    "u": "https://linux.tymyrddin.dev/docs/guards/aide",
    "t": "Aide ",
    "c": "Aide  The Advanced Intrusion Detection Environment (Aide) , is a file integrity checker (FIA). It creates a database from the regular expression rules that it finds from the config file(s). Once this database is initialized it can be used to verify the integrity of the files. It has several message digest algorithms (md5, sha1, rmd160, tiger, crc32, sha256, sha512, whirlpool (additionally with libmhash: gost, haval, crc32b)) that are used to check the integrity of the file. All usual file attributes (//File type, Permissions, Inode, Uid, Gid, Link name, Size, Block count, Number of links, Mtime, Ctime// and //Atime//) can also be checked for inconsistencies. It can read databases from older or newer versions. Installation  To install aide on a debian based system: $ sudo apt-get install aide Open up /etc/default/aide with your favourite editor to change who to send its reports to: $ sudo geany /etc/default/aide Initialisation  Initialisation (this can take some time) on debian based: $ sudo aideinit Running aide --init... Start timestamp: 2018-03-02 20:54:13 +0000 (AIDE 0.16) AIDE initialized database at /var/lib/aide/aide.db.new Verbose level: 6 Number of entries: 163501 --------------------------------------------------- The attributes of the (uncompressed) database(s): --------------------------------------------------- /var/lib/aide/aide.db.new RMD160 : ST44/Xwdiok4RmbkV61xDP9gXdg= TIGER : TWH3gMXUUFA+MRy8iIdJPkPKxY39drxK SHA256 : K+TPo8r3/GANOt4L24mUnlAmM3BN4Ap7 7/xuFmq8xnU= SHA512 : xhZ9lhG50Xb8rmFF8AqFkd9TFqMDaE/T FxEAebvt5eNmd/ayYab1fFEyefdZnu8G HNkEo6H9f1Hn80+IN7sJdA== CRC32 : BdfVRg== HAVAL : hVkhsvx02hXF5YmIyuiJMlNtAweYuOTP Y2L043XMHW4= GOST : T690cFLlnZhUQsCL4GaSjrJ0yHslK0Au VRgW3dMWV4U= End timestamp: 2018-03-02 21:06:39 +0000 (run time: 12m 26s) On other distros: sudo aide --init Configuration  Most aide configuration can be found in /etc/aide/aide.conf . This file is pretty well documented and default rules are quite decent. Aide aims at reporting files that changed since the last snapshot (stored in /var/lib/aide/aide.db ). In hostile environments, a good security measure is to keep the database file on an external disk. If you have such a device, you can copy the current snapshot to it and use the snapshot from that device during later runs of aide. Before making modifications to the configuration file, make a backup first: $ sudo cp /etc/aide/aide.conf /etc/aide/aide.conf.old So let say that you have a copy of aide.db on an external disk. To use that snapshot, you can change //database=file:/var/lib/aide/aide.db// to //database=file:/media/user/drive/aide/aide.db//: $ sudo geany /etc/aide/aide.conf Read through the file to acquaint yourself with aide. By default, changes in //Binaries// and //Libraries// directories are checked. Those are matched to the //BinLib// rule, which basically checks for any changes in permissions, ownership, modification, access and creation date, size change, md5 and sha1 signature, inode, number of links and block count. Then, it also checks for modifications in the //log files// against the rule //Logs//. Because log files tend to grow, you cannot use a signature there, and you also have to ask aide not to check for size modification (S). Usage  On debian and friends, aide is run on a daily basis through the script /etc/cron.daily/aide . Default settings in /etc/default/aide tells aide to update its database. Using database_out value in /etc/aide/aide.conf , aide is going to output a new database any time it runs in /var/lib/aide/aide.db.new (if you kept the default settings). Any time you install new packages or change some configuration settings, run: $ sudo /etc/cron.daily/aide And check in the report that any modifications were only done to files you intended to modify and that added files are only coming from packages you have just installed and copy the new database to whatever place your database points to. Great way to learn about linux and non-intended changes too.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c403afd4a99fa39cc46668e8315b06b9",
    "u": "https://linux.tymyrddin.dev/docs/privacy/bleachbit",
    "t": "Scrub machine with BleachBit ",
    "c": "Scrub machine with BleachBit  With BleachBit you can free cache, delete cookies, clear Internet history, shred temporary files, delete logs, and discard junk you didn’t even know was there. It is available for Linux, Windows, BlackBerry, Email servers and Mac OS X. The version of BleachBit in the repositories of many Linux distributions is often stale, so to use the best and latest version, use the packages from the Download page .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1defcb2cdf6f597e0bb09aff93244594",
    "u": "https://linux.tymyrddin.dev/docs/services/service-management",
    "t": "Service management ",
    "c": "Service management  Be careful disabling/stopping services. Some other applications might stop functioning because they depend on a disabled service. Try one by one. Most recent distributions use the Systemd system manager. Some still use the old SysVinit system manager. The easiest way to discover which system manager is in use, is by using the use the pstree command and to check the first process ever run on your system: $ pstree | head -n 5 systemd-+-ModemManager---2*[{ModemManager}] |-NetworkManager---2*[{NetworkManager}] |-accounts-daemon---2*[{accounts-daemon}] |-acpid |-apache2-+-2*[apache2---26*[{apache2}]] Getting a list of services  To list services on Linux, when you are on a systemd system: $ systemctl list-units --type=service This command will show you only the services that are active or the services that have failed (in red) on the system. List all services: $ systemctl list-units --type=service --all Only loaded services are listed. On boot, systemd loads unit files and it may choose not to load a specific service if it finds that it won’t be used by the system. List services by state (active, inactive, activating, deactivating, failed, not-found or dead): $ systemctl list-units --state=<state1>,<state2> In order to list all service files available, use list-unit-files : $ systemctl list-unit-files --type=service Status of a service  To verify whether a service is active or not, run this command (for example, for apache2): $ sudo systemctl status apache2 Managing services  To start/stop/restart a service in Linux: $ sudo systemctl start <service> $ sudo systemctl stop <service> $ sudo systemctl restart <service> To force the service to reload its configuration files: $ sudo systemctl reload <service> Enable/disable a service at boot: $ sudo systemctl enable <service> $ sudo systemctl disable <service>",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2d0d5cfbfc313b7538b4d5e56fda8b1b",
    "u": "https://pap.tymyrddin.dev/docs/mobile/squatting",
    "t": "App squatting ",
    "c": "App squatting  Fake apps repackage an app and are relatively easy discovered as the identifiers (app name or package name) are changed. In “App Squatting”, attackers release apps with identifiers that are confusingly similar to those of popular apps or well-known Internet brands. Related labs  Android malware analysis (Pithus and jadx) Resources  Yangyu Hu, Mobile App Squatting , 2020, IW3C2 PiRogue tool suite: Beginner guide - How to handle a potentially malicious mobile app",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a373645557189025eab2068c15fa2b3c",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/lol",
    "t": "More LOL ",
    "c": "More LOL  Adversaries are embracing conventional and commercially available development tools to make attacks faster and harder to detect, more often using “living off the land” (lol) : Exploits using built-in tools and programs for operating systems ( LOLBAS , GTFOBins and loldrivers ) can deceive threat detection and response systems.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f0b8c0cc7f2e7b018e415fab855950e1",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/marketplace",
    "t": "Marketplaces ",
    "c": "Marketplaces  There seems to have been a move from the Darkweb to Telegram, probably due to increased pressure from law enforcement and other threat actors. Darkweb is still on though, with sites like InTheBox, a marketplace for mobile malware, 2Easy, where threat actors buy and sell harvested data, and Russian Market (despite the name it is english), where you can buy stolen credit cards, credentials, or cookies, and buy access to specific remote desktop protocol clients/servers.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "374e2d70f6c5e64e1a5bd02a2813f0f0",
    "u": "https://pap.tymyrddin.dev/docs/mobile/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Mobile malware is a generic term for malicious software designed to target mobile devices (smartphones, tablets, and iOT devices) with the goal of gaining access to private data. Apparently it is still not as pervasive as malware designed for workstations, and that may have to do with the fact that SOC teams and SIEM stacks have focused mostly on detecting workstation and corporate network threats, and that it was only a matter of time before hackers switched tactics. Why?  It is definitely a recognised/growing threat, and needs to be addressed. How?  First off, by some research into known threats. Mobile malware Smishing Vishing SIM swapping OTP bots App squatting Ransomware Madware Spyware Location tracking Stalkerware",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "048cc17539aea8a53cb927198dd5b1eb",
    "u": "https://android.tymyrddin.dev/docs/privacy/diagnostics",
    "t": "Turning off diagnostics ",
    "c": "Turning off diagnostics  The privacy settings contain an option to send diagnostic data to the phone manufacturer. Tapping this option pops up a message explaining why you should let your device send unspecified types and amounts of data to the phone manufacturer for, “improving our products and services.” Sending this data to the manufacturer is optional, and can be considered a voluntary privacy leak. A default opt-in. To opt-out: Go to the Privacy settings, and look for a Send diagnostic data option. Make sure it is set to Off .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "807b216b739910e453d67507f3deacd6",
    "u": "https://android.tymyrddin.dev/docs/services/app-stores",
    "t": "Application stores ",
    "c": "Application stores  I do not like Google and its collection of all our data , but apps that do not come from the Google Play Store or my device manufacturer’s app store are almost always a bad idea. Google and the device manufacturers try to keep their stores clean. They do what they can, and the vetting process is improved continuously, but Google Play (and other app stores) can feature unwanted apps though. F-Droid is an alternative to the Google Play that is a trusted source for Android apps, many of which do not send any data to Google or Facebook. Apparently, it is the most scrutinised alternative Play stores. Stay aware, awake and alert and research each app thorougly before installing .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0813f69fbaa1a8a347f1d4bbfc0603eb",
    "u": "https://android.tymyrddin.dev/docs/services/messaging",
    "t": "Using more secure messaging services ",
    "c": "Using more secure messaging services  In most countries, it is safe to assume that telecoms are recording all SMS message traffic. Install a secure messanger app and make it the default SMS messenger. Signal is not as strong on privacy as it is on security. It collects some metadata, and relies on central servers to manage message flow and hold the metadata it does collect. Session is a fork of Signal. No geolocation data, device data, or metadata is collected. The Session network is decentralized, with no single point of failure, and no main server for bad guys to hack. Session moves messages using an onion routing system. Note : Signal no longer accepts SMS messages.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "386cf0209f8540e4b067cb71fc7e2df0",
    "u": "https://android.tymyrddin.dev/docs/malware/readme",
    "t": "Introduction ",
    "c": "Introduction  Phones contain more sensitive information than PC’s and Workstations. It usually contains pictures, credit cards, private messages, and other valuable data. Mobile malware is a generic term for malicious software designed to target mobile devices (smartphones, tablets, and iOT devices) with the goal of gaining access to private data. Apparently it is still not as pervasive as malware that attacks traditional workstations, and that may have to do with the fact that SOC teams and SIEM stacks have focused mostly on detecting workstation and corporate network threats (before Covid and the BYOD wave), and that it was only a matter of time before hackers switched tactics. It is definitely a recognised growing threat and needs to be addressed. Threat awareness Installing an anti malware app Finding the culprit and removing it Ransomware",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7a824f2ecf702ddc515e45e32674862c",
    "u": "https://android.tymyrddin.dev/docs/services/browsers",
    "t": "Browsers that protect your privacy ",
    "c": "Browsers that protect your privacy  DuckDuckGo Private Browser you get an everyday private Internet browser that offers seamless protection while you search and browse, and access to tracking protection for emails you receive and apps you use. Many of these protections are not offered in most popular web browsers by default. Firefox Fast & Private Browser - Data privacy and security practices may vary based on your use, region and age The developer provided this information and may update it over time. Brave is fast, secure, and privacy-focused by default. It has a built-in ad blocker and browser fingerprinting protection, while also giving you access to numerous add-ons and extensions. Ungoogled Chromium browser is an open source project to provide a Chromium browser, without the Google privacy issues. Bromite is a Chromium-based browser for Android only (no desktop support). It comes with some great features by default, including ad blocking and various privacy enhancements. Tor browser enables you to use Tor without needing to install the Tor proxy . If the browser you choose is less secure and privacy-friendly, lock down the browser and the software it can invoke.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "69a7a03b81a571d0f2c640bbeaa5949f",
    "u": "https://android.tymyrddin.dev/docs/services/email-services",
    "t": "Using more secure email services ",
    "c": "Using more secure email services  Mailfence , Belgium, provides a full suite of services, Messaging, s, Calendars, Groups, and Document storage. It can easily replace the G suite. It is a secure email suite that offers end-to-end encryption (through PGP support) and works with different email clients. There is some logging of IP address and some other data, and the code is not open source. Tutanota , Germany, is a small but serious player among secure email providers. It uses a hybrid encryption system that avoids some drawbacks of PGP, and is protected by the GDPR and other pro-privacy EU regulations. There is no support for PGP, IMAP, POP, or SMTP, and you cannot import existing emails into your encrypted Tutanota inbox. ProtonMail , Switzerland, uses PGP encryption standards for email and stores all messages and attachments encrypted at rest on Swiss servers. ProtonMail has a unique feature for “self-destructing messages” and they have also added address verification and full PGP support. Articles  Reddit: Court forces mail provider Tutanota to perform a surveillance function Twitter: ProtonMail logging one of its users and providing IP address logs to French authorities Reading that carefully, if the message had already been encrypted and the IP address had been that of a VPN , these cases would not exist.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2cd25fe07df5af7ff7b89f0d4e76a91a",
    "u": "https://android.tymyrddin.dev/docs/data/encryption",
    "t": "Encrypting SD cards ",
    "c": "Encrypting SD cards  SD card encryption is a default Android security feature. Enabling SD encryption is a very straightforward process, and many phones even have it enabled right out of the box. In order to complete the encryption process, your phone must be unrooted, plugged in, and have at least 80 percent battery remaining. If the process is interrupted for any reason, you’re likely to lose access to all the data on your device. Thus, it is advisable to run a full backup first, just to be safe. Go to Settings -> Biometrics and Security -> Encrypt SD card . Tap Encrypt SD card .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "96401bd4c82f9ccb8ad759a01481fcd6",
    "u": "https://android.tymyrddin.dev/docs/services/unwanted-apps",
    "t": "Unwanted apps list ",
    "c": "Unwanted apps list  Potentially Unwanted Programs (PUPs) or Potentially Unwanted Applications (PUAs) are programs/applications in the form of toolbars, adware, plugins or other downloads that sneak onto your computer. PUPs are not classified as malware, because they are not always harmful (but pretty much always annoying) and make the companies that bundle them a lot of money, hence the name “potentially” unwanted. A few years back Emsisoft found that most free antivirus suites were bundled with PUPs. Here were the culprits: Comodo AV Free, Avast Free, Panda AV Free, AdAware Free, Avira Free, and ZoneAlarm Free Antivirus + Firewall, and AVG Free. If you are not paying for the service, you are probably the product. Many browsers today are actually data collection tools for advertising companies. This is the case for Google Chrome, the largest and most popular browser. By collecting data through your browser, these companies can make money through their advertising partners with targeted ads. We see this same privacy-abusing business model with search engines, email services, and even free mobile apps. Some PUPs will track your search history or browser behaviour and sell the data to third parties, others compromise your security, affect system performance, and/or hinder productivity. Keep unwanted applications off of your computer by research before installing an app , carefully reading installation options during the setup process and only installing the software and features you need. Definitely unwanted apps  Everything typed on the Android smartphone goes through the keyboard. This means the keyboard has access to those passwords, private emails, documents, and SMS messages typed on your phone. It can even see your credit card information. The perfect Trojan Horse. The Joker family is capable of executing arbitrary code and surreptitiously subscribing victims to paid services. It is a gift that keeps giving. Remove Poco Launcher, 4K Pro Camera and Heart Emoji Stickers if they are in your app list. YouToon – AI Cartoon Effect and Pista – Cartoon Photo Effect (same code base) steal data that attackers use to hack into Facebook accounts. … Articles  Has the antivirus industry gone mad? AVG can sell your browsing and search history to advertisers",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e33203ac14b045adb27788a505a4724f",
    "u": "https://android.tymyrddin.dev/docs/services/tor-proxy",
    "t": "Using Tor proxies ",
    "c": "Using Tor proxies  Orbot is a free tor proxy app. It encrypts your Internet traffic and then hides it by bouncing through a series of computers around the world. Tor is free software and an open network that helps you defend against a form of network surveillance that threatens personal freedom and privacy, private activities and relationships, and state security known as traffic analysis. If you wish to get it from F-droid and not the Play Google store, you will need to enable the Guardian repository in the F-Droid settings to have the Orbot app (and other apps like Tor Browser) show up. Notes  If a government makes their own national internet, or routes traffic through specific servers to use deep packet inspection (DPI), running Tor may not provide security if the government is able to see the entire path. Sometimes the Tor network is censored, and clients can’t connect to it. An increasing number of censoring countries are using Deep Packet Inspection (DPI) to classify Internet traffic flows by protocol. While Tor uses bridge relays to get around a censor that blocks by IP address, the censor can use DPI to recognize and filter Tor traffic flows even when they connect to unexpected IP addresses. With pluggable transports, censorship against Tor can be bypassed. Not only that. If an attacker can see your traffic, and can see the website you’re visiting, even with a path outside the adversary’s control - they will still be able to correlate the traffic and learn you are visiting the website. If the same connection (the same set of relays) were to be used for a longer period of time a Tor connection could be vulnerable to statistical analysis, which is why the client software changes the entry node every ten minutes.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ef88b271b70a1b5dd2b4dd4f23581625",
    "u": "https://android.tymyrddin.dev/docs/authentication/screen-lock",
    "t": "Setting a password or PIN screen lock and a timeout ",
    "c": "Setting a password or PIN screen lock and a timeout  Without screen lock, anyone getting their hands on your device will have complete access to everything on it, and you can not enable on-device encryption . Touch or retinal scans to unlock your phone without needing to enter a password (passcode, PIN) is nice, but in some countries biometric authentication methods are not protected the way passwords are. In these countries, law enforcement can not compel someone to enter a password to unlock a device without a search warrant, but they can for access by touch or retinal scan. In addition, for all people in all countries, raw biometrics data in the form of fingerprints, face or retinal scans or voice recognition, for example, is analog data until a biometric system converts it to digital data that a computer can then process. This data must be stored somewhere. The convenience of biometric authentication is only worthwhile as long as the data being stored remains secure and untapped. For single-user devices, like an Android, this data can be stored on the local device. And if data is stored somewhere, it could potentially get stolen. If the worst happens and your PIN or password get stolen, you can easily change them. What are you going to do if your fingerprint or Iris scan get stolen? Depending on your Android: Settings -> Privacy -> Lock Screen -> Screen Lock Type -> Select one of the screen lock types (OR) Settings -> Security -> Screen lock (OR) Settings -> Lock screen And somewhere else in your settings (maybe Display), set a screen timeout.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "331fb687fa06ee7315a1c6e684240929",
    "u": "https://android.tymyrddin.dev/docs/privacy/location",
    "t": "Shutting down location history ",
    "c": "Shutting down location history  Even if you are not using any services that track your location, Android does. It uploads that information to Google to store it in your Google account. The data is used to send you personalised maps and recommendations, and targeted ads. On a new phone, don’t turn it on. If you are already using it, you can stop Google from tracking you by pausing it. This will not keep apps from using location information from your device, but it will stop Google from filling up their databases with a detailed profile of your movements. Go to Privacy settings -> Google location history . This takes you to the Location History page of your Google account. Pause Location History .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "bf76932db29bc882ee14cbb098e0d896",
    "u": "https://android.tymyrddin.dev/docs/privacy/personalised-ads",
    "t": "Terminating ad personalisation ",
    "c": "Terminating ad personalisation  Google uses data it collects about you to offer personalised ads. Part of this is assigning you a personal advertising ID that is used to accumulate data about you. This can be turned off. Apps can be told not to use that ID to build profiles or to show you personalised ads. Go to Privacy settings -> Ads . In the screen that appears, Opt out of Ads Personalization by turning On the slider. If you leave the slider in the Off position you are telling Google to continue to apply Ads personalisation. Note : If you disable Ads personalisation you will still be forced to see ads, but they will not be customised for maximum impact on you. And if you clear your cache, it will automatically turn Ads Personalization back ON.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "bdc67db9a0388b29da105b99904b3375",
    "u": "https://android.tymyrddin.dev/docs/guards/firewall-no-root",
    "t": "Firewall No Root ",
    "c": "Firewall No Root  Firewall No Root uses artificial intelligence to block spy servers automatically on detection. When getting started with it, you get a choice to select a default startup option: Silent mode allows all connections, and you can block individual connections as required (the recommended setting for beginners). Warn mode is for checking which apps are silently connecting to an unsecured server. After selecting warn mode, the firewall will block all apps and services from connecting to the internet. You have to manually allow apps from the quick settings panel or in the app.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1e42db14d4d44cd1dc66c58bfb584ed9",
    "u": "https://android.tymyrddin.dev/docs/services/edit-hosts-file",
    "t": "Editing hosts file ",
    "c": "Editing hosts file  The hosts file is a system file on a device that lets you map specific domain names to an IP address. If you want to add new entries to the hosts file, you’ll need the IP address of the server that you want to map a hostname to. XXX.XXX.XXX.XXX some.domain.name The hosts file lets you override DNS entries for any domain name. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. Blocking is achieved by setting the IP address of the ad networks to a loopback address like 127.0.0.1 which will not return anything. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. If your device is infected with malware, then your hosts file may be compromised to included unknown entries for known domain names. That is NOT the IP address of your bank! This type of DNS attack is known as DNS pharming, and checking your hosts file can uncover potential infection. For Android there is a way using Android Debug Bridge (adb) : Open a terminal window. Pull the hosts file out of the phone to your PC. Edit it. disable READ_ONLY of SYSTEM $ su # mount -o rw,remount /system Push the file back. Put SYSTEM back to READ_ONLY: # mount -o ro,remount /system",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "957f877b6cc72ba6e8779b113379d051",
    "u": "https://android.tymyrddin.dev/docs/services/change-mac",
    "t": "Changing MAC address ",
    "c": "Changing MAC address  A MAC address identifies the device connected to a network and allows the network to track, restrict or allow access based on it. Routers identify and assign static IP addresses based on the MAC addresses of devices. Before you try to change the MAC address, you need to know the value that you want to use. Set the 2’s place bit (the “locally administered” bit) in the first byte, to differentiate it from a guaranteed globally unique MAC address. Usually the first three bytes an unicast MAC address is an “Organizationally Unique Identifier” (OUI) that the IEEE assigned to the manufacturer of your Ethernet device. Manufacturers are required to make sure they keep the last 3 bytes unique. Avoiding all of that knowledge, the MAC address generator tool can generate a valid address for you. Go to Settings ->  Phone -> Status . Open a terminal app To get the name of the interface: ip link show The rootless option is only temporary until you restart your phone: ip link set [name of interface] 00:0a:95:9d:68:16 For a persistent MAC address change use busybox or adb with su .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "385559ad86f4f8bdc8b18caa7f1a089e",
    "u": "https://android.tymyrddin.dev/docs/malware/ransomware",
    "t": "Ransomware ",
    "c": "Ransomware  Removing  Boot into the mobile phone’s Safe Mode and uninstalling the suspected application: Hold down the physical Power button until you see the Power off prompt on your screen. Long-press the Power off button on your screen until the Reboot to safe mode dialog box appears. Press OK . The device reboots. The words Safe Mode appear in the lower left corner of your screen. Go to Settings -> Apps . Uninstall the ransomware and related application. If you can not get rid of the ransomware by booting into Safe Mode , you can try to reset your Android device to factory settings . A factory reset erases all data on the device, so make sure you make a back-up first. Prevention  Download applications only from the app stores that vet. Keep the device updated. Android developers regularly release new patches and updates. Make sure to install the offered updates as soon as you receive notifications on your device. Back up your mobile data on your computer hard drive, one a portable device, or in the cloud. Install anti-malware applications Disallow non-official app installations: Go to Settings -> Security . Uncheck the Unknown sources box.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a020d63a284914e986dfde919c3139ae",
    "u": "https://pap.tymyrddin.dev/",
    "t": "Threat landscape @home ",
    "c": "Threat landscape @home  The below writeups are based on reading the usual threat landscapes, picking up what is reuseful for defending people’s devices, researching and adding what seems to be missing for @home contexts, updating passive defence strategies, and linking in some device hardening how-tos and hands-on exercises. With that as foundation, we can develop the more unusual active defence strategies. Threats  Background Introduction Unusual suspects Marketplaces Red team takeover Malware-as-a-Service (MaaS) Ransomware-as-a-Service (RaaS) Infostealer-as-a-Service (IaaS) Distribution shifts More LOL Botnet activity increase No device can ever be called secure Mitre Att&Ck Introduction Drive-by compromise Supply chain compromise Phishing for information Application Layer Protocol: Mail Protocols Signs of a compromise @home Prevent|Detect|Respond  Device independent Introduction Phishing Drive-by download MFA bypass attacks Workstation specific Introduction Ransomware Mobile specific Introduction Mobile malware Smishing Vishing SIM swapping OTP bots App squatting Ransomware Madware Spyware Location tracking Stalkerware DIY  Hardening endpoints Introduction A first strategy Android hardening iOS hardening Hardening Windows Hardening GNU/Linux Hardening macOS Smarter mail servers Active defence Testlab Phishing analysis tools Mobile tools Reverse engineering tools TryHackMe rooms Introduction Basic phishing labs The Greenholt Phish Android malware analysis (Pithus and jadx) iOS forensics (SQLiteDB) Root-me challenges APK anti-debug",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0ff01bbb4239e0b2821e80228bb18df7",
    "u": "https://android.tymyrddin.dev/docs/opsec/ooni",
    "t": "Measuring Internet Censorship ",
    "c": "Measuring Internet Censorship  The OONI Probe is a free app to measure Internet Censorship. With this app, you can examine the blocking of websites and instant messaging apps, measure your network’s speed and performance, and check whether systems that could be responsible for censorship and surveillance are in your network. OONI Probe is developed by the Open Observatory of Network Interference (OONI), a free software project (under The Tor Project) that aims to uncover internet censorship around the world.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e2f1d06c57ec6e8351317dbd85d4907e",
    "u": "https://android.tymyrddin.dev/docs/authentication/notifications",
    "t": "Keeping notifications off the lock screen ",
    "c": "Keeping notifications off the lock screen  Android displays app notifications on the lock screen. Anyone who happens to be looking (shoulder surfing) can also see those notifications, even though your device is locked. Go to Settings -> Lock screen. Scroll down the Lock screen to Notifications and set the slider to Off. There are a lot of options. Just use the slider at the top of the screen to turn it all Off. Check that lock screen notifications are still turned off any time you make changes to the lock screen.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "86fb8ed783fc431b9be4844653929db7",
    "u": "https://android.tymyrddin.dev/docs/malware/clean-machine",
    "t": "Finding the culprit and removing it ",
    "c": "Finding the culprit and removing it  If you think it will turn into a “legal issue”, DO NOT shut the device down or try to remove the malware, and call in a first responder instead. Detecting malware  If the symptoms appeared immediately after installing an app, that app may be the guilty party. If you get ads in the notification bar, then long tap those and then touch on All Categories to learn which app is displaying the ads. Go to Settings -> Battery and monitor usage . If you recently charged, Battery usage data is not available. Wait a few hours for the data to become available. Go to Settings -> Network & Internet -> Data usage -> Mobile data usage / Wi-Fi data usage . Removing malware  Go to Settings and tap on Apps (& Notifications) . Locate the app. Tap on it, and choose Uninstall . If the Uninstall option is greyed out or not there at all, then it means that the app has gained privileges. Removing admin rights  Go to Settings -> Security & location -> Device admin apps . Tap on the checkbox and then tap on Deactivate this device admin app . Go back to the Apps & notifications to remove it. Fail  If removing admin rights did not work, do a Factory reset If a factory reset does not work, it is probably a very persistent malware ( like xHelper ) You may wish to analyse it further and/or get help. Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3a4c2350a590313cbcda3691927649bd",
    "u": "https://android.tymyrddin.dev/docs/privacy/activity-controls",
    "t": "Revoking the prying big eyed activity controls ",
    "c": "Revoking the prying big eyed activity controls  The data saved in your account helps give you more personalized experiences across all Google services. Chills up and down my spine. In other words, Google tracks everything you do, and uses that data to predict what you will do next, influence what you think and do, and serve you targeted ads that are designed to convince you to buy stuff. On a new phone do not turn it on. If you already have, and want out: Go to Privacy settings -> Activity Controls . You will see a screen full of the kinds of things that Google tracks, along with a pitch on why them tracking this information is good for you. Turn off Web & App Activity . Google will give you a long message trying to convince you to let them keep tracking you. This does not put an end to Google collecting this data on you. It only pauses the collection. Nor will this delete the data Google has already collected on you. To delete the data Google has already collected in the Web & App Activity category, go to myactivity.google.com. Repeat for YouTube History .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "86cbd00b093fec8ea8c067a064b3205a",
    "u": "https://android.tymyrddin.dev/docs/guards/netguard",
    "t": "NetGuard ",
    "c": "NetGuard  NetGuard offers advanced features such as network statistics, custom notifications, and rules backup. NetGuard uses a local VPN connection to filter your internet traffic and allows you to block any app from accessing the internet via Wi-Fi or data. You can manage and create your own firewall rules for system apps. You can not connect to more than one VPN because of Android limitations, so you can not use this app with any other VPN app .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "94c435d458416ed1e09b7676051e9853",
    "u": "https://android.tymyrddin.dev/docs/services/ssh",
    "t": "Using SSH tunnels ",
    "c": "Using SSH tunnels  Secure Shell (SSH) can be used to securely acquire and use a remote terminal session, tunnel traffic, transfer files, mount remote file systems, and more. SSH uses strong encryption, and you can set your SSH client to act as a Socks proxy. The traffic enters the Socks proxy running on your local system and the SSH client forwards it through the SSH connection – this is known as SSH tunneling. Once you have set it up, you can configure applications on your computer – such as your web browser – to use the Socks proxy. Each application must be configured to use the SSH tunnel’s proxy. This setup works similar to browsing the web over a Virtual Private Network (VPN) . From a web server perspective, traffic appears to be coming from the SSH server. The traffic between source and the SSH server is encrypted, so you can browse over an encrypted connection as you could with a VPN. Port forwarding  Port forwarding or port mapping is a combined technique of: Translating the address and/or port number of a packet to a new destination. Possibly accepting such packet(s) in a packet filter (firewall). Forwarding the packet according to the routing table. SSH tunnels can be created in several ways using different kinds of port forwarding mechanisms. On Android you can use ConnectBot ( Google Play Store ConnectBot , F-Droid ConnectBot ), a traditional-style SSH client, providing command-line access to computers running SSH server software. A GUI interface is available for setting up connections. ConnectBot can run pretty much all SSH commands, and fully supports persistent connections, key management, and port forward management.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5a764df496b897027cdb1a025ab2f167",
    "u": "https://android.tymyrddin.dev/docs/authentication/sim-pin",
    "t": "Changing the SIM PIN ",
    "c": "Changing the SIM PIN  The SIM card PIN code is meant to protect your data against unauthorised access. Each SIM you insert into a smartphone has a PIN code that you need to enter in order to activate the card. Some mobile providers use standard PIN codes, like 0000 or 1234, for all their SIM cards, while others generate unique PIN codes for each SIM. Whatever the case, it is safer to change the default SIM PIN code to one of your choosing. If you do not and the phone gets stolen, thieves can change the SIM and put it in another unlocked phone. And with the SIM in another phone they can request an SMS code for resetting the password to all your accounts, including iCloud, Facebook, Instagram, Twitter, etc. Even with two-factor authentication enabled, they can use this method to get the code and access your accounts.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "167babce2ef701ab0bef7fbde7d54dd9",
    "u": "https://android.tymyrddin.dev/docs/services/default-apps",
    "t": "Changing default apps ",
    "c": "Changing default apps  Pick the default app you wish to change, for example, for your bowser you can pick one of these , or for swapping Google apps, Simple Mobile Tools Changing apps on newer androids  Install your replacement app. You will be asked if you want to make it your default. Yes. In the next window, tap to select it and tap to make default. On older androids  Install your replacement app. Go to Settings -> Apps . On the Apps screen, tap the three-dot menu on the top right. In the menu that appears, tap Default Apps . A handful of default apps appears. Tap the default app you wish to replace. Android will display a list of the apps you have installed on your device. Tap the app you want to use as the default.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6519344803d7260be29118cf31881e39",
    "u": "https://android.tymyrddin.dev/docs/malware/scanner",
    "t": "Installing an anti malware app ",
    "c": "Installing an anti malware app  Google Play Protect is a feature that automatically scans your apps and your device for problems. It will warn you if it finds anything. Play Protect is not enough. It is a Google product and will protect you against any threats, except Google. Google Play Protect is unlikely to protect from malicious apps that did not come from its store. Clean antivirus vendors which are not on the unwanted apps list : Emsisoft Bitdefender Free Perhaps  LibreAV is an attempt to detect malwares on android devices by utilizing machine learning approach. Hypatia (available on FDroid) is powered by ClamAV style signature databases. AFAIK, the app has NOT been audited, and antivirus apps have the potential to be very bad in terms of privacy. The name “us.spotco.malwarescanner” contains “spot”. Will keep an eye out. Do not install yet.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6c1a1392292403f9b5d78a753471ecb4",
    "u": "https://android.tymyrddin.dev/docs/opsec/hibp",
    "t": "‘;–have i been pwned? ",
    "c": "‘;–have i been pwned?  ‘;–have i been pwned? (HIBP) is a database of several billion email addresses (and, separately, passwords) that have appeared in a publicly known past data breach. Firefox Monitor is an online service developed by Mozilla It informs users if their email address and passwords used have been leaked in data breaches, using the database provided by Have I Been Pwned? Check if you have an account that has been compromised in a data breach, and if so, change your password and change it in any other place where you’ve used that password. Better yet, never use a password twice, and consider using a password manager.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3e9c2ee3bca4b825114baac873682150",
    "u": "https://ios.tymyrddin.dev/",
    "t": "Hardening iOS ",
    "c": "Hardening iOS  Keeping it as simple as possible. iOS evolves fast. An old and new iPhone are underway for further pentesting, after which these mitigations will be updated (when we have time). Accounts and authentication Introduction Using a SIM PIN Touch ID and Face ID? Auditing and changing password reuse Automagically creating strong passwords Using multifactor authentication (MFA) Services and applications Introduction Auditing and blocking the access apps have Unwanted third party apps (UAPs) Blocking apps from accessing Bluetooth data Checking for unknown configuration profiles Browsers that protect your privacy Changing default browser app Using more secure messaging services Using more secure email services Using SSH tunnels Using VPN services Using Tor proxies Changing MAC address Editing hosts file Data Introduction Encrypting the data Worst case, nuking all data Privacy Introduction Silencing spam callers Changing default search engine Malware Introduction Threat awareness Installing a third party security app Finding the culprit and removing it Ransomware Operations security Introduction Threat awareness Not getting juice-jacked Not auto-joining Wi-Fi networks Using email more securely Browsing more safely Measuring Internet Censorship ‘;–have i been pwned? Guards! Guards! Introduction Lockdown Privacy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "54d3f06933de6f428f4f407db2aa148e",
    "u": "https://ios.tymyrddin.dev/docs/services/browsers",
    "t": "Browsers that protect your privacy ",
    "c": "Browsers that protect your privacy  DuckDuckGo Private Browser offers seamless protection while you search and browse - plus access to free tracking protection for your email inbox, secure password management, new beta features, and more. Brave is fast, secure, and privacy-focused by default. It has a built-in ad blocker and browser fingerprinting protection, while also giving you access to numerous add-ons and extensions. Onion browser enables you to use Tor without needing to install the Tor proxy . It is open source, uses Tor routing, and is developed by someone who works closely with the Tor Project. However, Apple requires browsers on iOS to use something called Webkit, which prevents Onion Browser from having the same privacy protections as Tor Browser. Tor Browser is not in the Apple Store. Out of the “big” and “mainstream” browsers, Safari is more secure. If you continue to use it, you will still have to increase your data privacy and security while using Safari. If the browser you choose is less secure and privacy-friendly, lock down the browser and the software it can invoke. Articles  Browser First-Run: iOS Edition Avoidthehack: How to Configure Safari for Privacy on iOS Devices (UPDATED FOR iOS 14)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3d33b570c71536d4039825757b1701e9",
    "u": "https://ios.tymyrddin.dev/docs/guards/readme",
    "t": "Introduction ",
    "c": "Introduction  Your iPhone lets you use content blockers to block trackers, cookies, ads and other malware. But these only apply to Safari. They do nothing to block other applications from communicating data they have on you, from your location, shopping times, work hours, sleep patterns and even passwords. Lockdown Privacy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ca1d9f37a6650ee60cb466197067ab49",
    "u": "https://pap.tymyrddin.dev/docs/mobile/vishing",
    "t": "Vishing ",
    "c": "Vishing  Vishing is a type of phishing that uses phone, robocall, voicemail, voice over internet protocol (VoIP), and social engineering to contact you in an attempt to gather personal information about you. Robocalls  A robocall is an automated telephone call that delivers a pre-recorded message. Organisations, telemarketers, and adversaries use robocalls to reach millions of phones every single day. They make people’s phones ring with natural-sounding recorded voices and offer everything from auto warranties to games. In some cases it can even issues a threat to get your attention. Some robocalls can even respond to your questions. Robocalls are made using auto-dialing software, and may use caller ID spoofing technology to make it seem as if the phone call is coming from someone else. Detection  If callers are legitimate, it should not be difficult to authenticate their professional affiliation with another phone call. If they do not provide the information necessary to verify their identity, they can not be trusted. Callers creating a sense of urgency is a huge social engineering red flag. Caller sending unsolicited email or SMS messages is another red flag. Mitigation  Hang up as soon as you notice it is a robocall. Never say “yes” to any question. Ignore any and all instructions, not even seemingly harmless instructions. Slippery social engineering slope. Write down any information the person or robot provides on the call — without providing any details of your own. Do not give out any personal information over a phone, ever. Do not click on links in emails or in mobile phone SMS text messages the caller might send. Phone technology that locks a phone line after hanging up and redirecting next calls to the fraudulent caller exists. Do not call back using the same phone on which you received the call. Note the number, what they said/did and report the call to a “Do Not Call” registry and/or anti-fraud program (if existing in your country). Prevention  Keep your phone number private (including on social media). Be aware of caller ID spoofing. Do not answer unknown numbers. Many mobiles offer a “whitelisting” tool that will allow calls only from numbers in your contact list. Use it: On iPhones (iOS 13 and later), go to Settings -> Phone , scroll down, tap Silence Unknown Callers , and turn it on. Calls from unknown numbers are silenced and sent to your voicemail, and will appear in your recent calls list. On Android phones, tap the phone icon at the bottom of the home screen, then in the top right corner of the screen, tap the three dots -> Settings -> Blocked Numbers . Enable Block Calls From Unidentified Callers by tapping the toggle switch on the right. Google’s Pixel phones have a tool called Call Screen . When you receive a call from any number, you can tap Screen Call on your home screen and Google Assistant will answer it for you and ask the caller to identify himself or herself and the reason for calling. When a caller responds, a real-time transcript of the response is displayed. Ask governments for “Do Not Call” registries and Anti-fraud programs, if not available yet.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "dd8def2a36ceece6f63c77660a3cb30e",
    "u": "https://pap.tymyrddin.dev/docs/mitre/drive-by",
    "t": "Drive-by compromise ",
    "c": "Drive-by compromise  Drive by downloads are categorised by MITRE as Mobile Technique ID T1456 Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user’s web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring an Application Access Token. Note: Linux powers the Internet with 74.2% of all web servers running on it. Monitor for newly constructed network connections to untrusted hosts that are used to send or receive data, and for other unusual network traffic that may indicate additional tools transferred to the system. Use network intrusion detection systems (with SSL/TLS inspection), to look for known malicious scripts (recon, heap spray, and browser identification scripts have been frequently reused), common script obfuscation, and exploit code.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "88b3eb6bc7c5be75267f135a64e720d3",
    "u": "https://pap.tymyrddin.dev/docs/mobile/smishing",
    "t": "Smishing ",
    "c": "Smishing  Smishing is similar to phishing , except that it comes in a text message. A smishing text will often contain a fraudulent link that downloads malware onto the device. Detection  The message offers quick money from winning prizes or collecting cash after entering information. Coupon code offerings are also popular. Financial institutions and government agencies will never send a text asking for credentials or a money transfer. A sender number with only a few digits probably came from an email address, a sign of spam. Mitigation  Avoid responding to a phone number that you do not recognise. Never send credit card numbers, ATM PINs, or banking information to someone via text messages. Or on the phone, over email, … If a text claims to be from a specific organisation or individual, contact that entity directly using known contact information, not the details provided in the text. Prevention  Many smartphones and carriers now provide SMS filtering options to identify and block or flag suspicious texts. Some security applications for mobile devices can help identify phishing links in text messages and prevent users from accessing malicious sites. Even if attackers obtain some credentials through smishing, using Multifactor Authentication is an additional protective layer. Do not store banking information on a mobile device. Have two phone numbers, one for bureacratic matters and one for personal other use. Telecoms offer numbers to report attacks. To protect other users, report it so that it can be investigated. Be aware of current smishing tactics and threats. Awareness is the first line of defense.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "11b05d14d8238f5f55fc40b0f747fe3b",
    "u": "https://pap.tymyrddin.dev/docs/independent/phishing",
    "t": "Phishing ",
    "c": "Phishing  Phishing attempts to trick people into clicking on fraudulent links in emails. The link typically takes the person to a seemingly legitimate site with a malware download. Detection  Hover the cursor over the From address to confirm the email address and then cross-check the website the official email address and domain used. Take note of the spelling of the sender address and email subject line, which may contain small details. Look for inconsistencies in grammar and small spelling mistakes in content. Check links before you leap. Hover the cursor over the link, and the destination address displays in a tiny bar down the bottom of a browser. On mobile phones, hold down on the link, and a pop-up window with the link will appear. An urgent warning tries to frighten people into reacting without considering the consequences. “Clickbait” titles on social media, advertising or publications are attention-grabbing. Generic greetings are not the common practices of legitimate companies. Poor quality logos that are unclear or smaller than usual. Mind that with AI-driven content tools broadly available at a low or no cost, adversaries are using such tools to make their phishing emails and text messages appear more realistic than ever before. Trust your gut, and if suspicious, do some analysis. Analysis  Copy and paste the entire email header and run an email header analysis tool . It is good to use multiple resources as each tool might reveal information that another tool may not. Extract urls from the text for further analysis. Check sender’s IP address and urls found in the text . If the email has an attachment: Obtain the attachment safely. If you don’t know how, ask someone who does. Get its hash and check the file’s reputation with the hash to see if it’s a known malicious document. Upload it to a sandbox for dynamic analysis. Prevention  Never open an attachment unless certain that the communication is from a genuine source. Monitor personal and private accounts and look at the settings. Multifactor verification is a feature that secures email and work accounts. Set up at least two email addresses: a private address and a public address. The private address should not be your first and last name, and be protected by never being used on publicly accessible online resources. Or masked. Proton vault and other services allow for this. Or use a graphics file. If it is discovered, change it. The public address as a temporary address and needs to be changed frequently. Consider using a number of public addresses. That way you can perhaps trace which services may be selling addresses to spammers or have been compromised and its data sold on the black market. Only open email accounts with providers that include spam filtering. Do not respond to any spam, ever. Think before you click ‘unsubscribe’. Web browsers include settings to restrict access to dangerous websites, and when one attempts to access a bad site, an alert message appears. Do not ignore these warnings and do not visit that website or access that file. Keep your browser updated, and install the NoScript extension. Other mitigations  Email security (SPF, DKIM, DMARC) SPAM filters (flags or blocks incoming emails based on reputation) Email labels (alert users that an incoming email is from an outside source) Email address/domain/URL Blocking (based on reputation or explicit denylist, preferably whitelisting) Attachment blocking (based on the extension of the attachment) Attachment sandboxing (detonating email attachments in a sandbox environment to detect malicious activity) Security awareness training (internal phishing campaigns)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "39bdbee58d24a3ceaa02370bab06ef38",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/iaas",
    "t": "Infostealer-as-a-Service (IaaS) ",
    "c": "Infostealer-as-a-Service (IaaS)  Infostealer attacks are typically financially motivated. Infostealers are a type of MaaS that extracts data from infected devices. An adversary buys an InfoStealer from a marketplace , spreads the malware onto as many machines as possible, collects and organises the information, and then sells the information on the black market (dark web or Telegram). How infostealers are distributed  The InfoStealer is embedded into a document (for example, in a Microsoft Word document or a Microsoft Excel spreadsheet). Then the doc is sent out as an attachment in cleverly worded phishing , enticing people to open the file. Via a convincing site with a lookalike domain, the logo of a trusted brand, and a design that tricks unsuspecting users into voluntarily downloading the InfoStealer, thinking that it is a legitimate app. By squatting an app , and then making that corrupted application available for download from app stores. Then putting a social engineering cherry on top: Paying for advertising on Google Ads and Facebook Ads to trick more people into downloading the malware from a fake site or App store. Using paid ads to distribute malware works wonders because it leverages the trust that people have in both the advertising platform and the brand that they are impersonating on a fake site or the app in the store. If a user sees an ad after making a query in a search engine, they implicitly assume that it is safe to click because they trust the search engine. What info it tries to steal  Credentials used for online banking, email accounts, social media sites, and FTP services. Credit card details. Emails. Hardware information. Operating system information. Cryptocurrency wallets. Screenshots. Specific file types (commonly images, documents, spreadsheets, etc.) The stolen data is analysed and any valuable information is collated and organised into a database, which can then be sold on the black market . Who is targeted  Healthcare and financial services are the most targeted sectors with infostealers. How to defend  The increased sophistication and complexity is making it more difficult for defenders to detect and prevent infostealers. Resources  Your Guide to Top Infostealers in 2022",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "60d7cd19e0db8eb2125c92987c1f47c6",
    "u": "https://android.tymyrddin.dev/",
    "t": "Hardening Android ",
    "c": "Hardening Android  These mitigations to common mobile threats are kept as simple as possible, with tools found in most Androids and online. Other things are harder to cover. For example, each manufacturer has its own privacy settings somewhere, and there is a growing number of alternative apps that do not report everything you do to Google. Accounts and authentication Introduction Changing the SIM PIN Setting a password or PIN screen lock and a timeout Keeping notifications off the lock screen Services and applications Introduction Application stores Researching before installing apps Unwanted apps list Removing unwanted apps Browsers that protect your privacy Changing default apps Using more secure messaging services Using more secure email services Using SSH tunnels Using VPN services Using Tor proxies Changing MAC address Editing hosts file Data Introduction Encrypting SD cards Privacy Introduction Turning off diagnostics Putting the kibosh on Autofill with Google Shutting down location history Revoking the prying big eyed activity controls Terminating ad personalisation Privacy focused Android alternatives Malware Introduction Threat awareness Installing an anti malware app Finding the culprit and removing it Ransomware Operations security Introduction Threat awareness Not getting juice-jacked Not auto-joining Wi-Fi networks Using email more securely Browsing more safely Measuring Internet Censorship ‘;–have i been pwned? Guards! Guards! Introduction Firewall No Root NetGuard",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3cf432e72b78dad520ceeed181266fe2",
    "u": "https://android.tymyrddin.dev/docs/services/remove-apps",
    "t": "Removing unwanted apps ",
    "c": "Removing unwanted apps  Every app that exists on your device is a potential privacy and security problem. Google automatically grants every app permission to use the Internet, including unwanted apps . This means that every single app on your device can: Send any data it can get its hands on to points unknown somewhere on the Internet Receive all kinds of things from the Internet that could affect your device Removing third party apps  Go to Settings -> Apps . You should see a list of the apps on your device. Tap an app you do not absolutely need to have on your device. At the bottom, tap Uninstall . Then OK to uninstall the app. Repeat for each app you can do without.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "965d6d47f5833c715775453bdc740bc3",
    "u": "https://android.tymyrddin.dev/docs/privacy/autofill-google",
    "t": "Putting the kibosh on Autofill with Google ",
    "c": "Putting the kibosh on Autofill with Google  If you save things like credit card data on your Android device, that data ends up stored in your main Google account. You see what data you have stored in your Google account, and delete it if you wish. On a new phone, do not turn it on. If you are already using it: Go to the Privacy settings, and tap Autofill with Google . (On some phones this is under Privacy -> Advanced settings) Tap each of the options to see what data Google has stored under it. You will need to look around a bit in each area to find out how to edit or delete the data that Google has. Use a better way to keep all the personal information you want stored securely online where you can easily access it but no one else (including Google) has access to it.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "81a0d91931deb00d2fe8bb54f1104931",
    "u": "https://android.tymyrddin.dev/docs/privacy/alternatives",
    "t": "Privacy focused Android alternatives ",
    "c": "Privacy focused Android alternatives  Android stock versions  GrapheneOS offers a higher level of privacy and security. (Pixel phones) CalyxOS is hardened for more privacy and security. (Pixel phones, Xiaomi Mi A2) Replicant , an Android distribution with an emphasis on freedom, privacy, and security. LineageOS for phones and tablets. /e/ building privacy-enabled smartphone operating systems. Based on Linux  Ubuntu Touch , a mobile version of the Ubuntu operating system. Plasma Mobile , Linux-based. Sailfish OS , Linux-based mobile OS. Phones  Librem 5 , a phone that focuses on security by design and privacy protection by default. Outfitted with hardware kill switches and specially designed hardware, and (currently, 2022), a lead time for new orders of 52 weeks.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d66282be476aa073d4a4e4e2b86e6b1e",
    "u": "https://android.tymyrddin.dev/docs/services/vpn",
    "t": "Using VPN services ",
    "c": "Using VPN services  Internet providers are collecting your browsing data and handing this over to third parties (US, UK, Australia, and much of Europe). Public Wi-Fi remains a serious threat with adversaries targeting unsuspecting users. Many streaming services and websites restrict content to certain geographic locations. A VPN allows you to bypass such restrictions (Not always. Some such websites keep blacklists of VPN servers and will still block your traffic). A VPN will encrypt the connection and make the traffic unreadable. A VPN will encrypt the connection and make the traffic unreadable. VPNs not logging traffic, DNS requests, timestamps, bandwidth, IP address: ProtonVPN , Switzerland NordVPN , Panama Mullvad , Sweden IVPN , Gibraltar Surfshark VPN , Netherlands",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8df0e67896fcf432ca754ba3de725e5b",
    "u": "https://android.tymyrddin.dev/docs/services/research",
    "t": "Researching before installing apps ",
    "c": "Researching before installing apps  Search for the app name on Google Play Store or Fdroid store. If there are multiple apps with similar names and icons, most of them are probably fake ones. Tap the developer name, and it will show you all the apps published by the developer alongside user ratings. Genuine developers usually write informative descriptions alongside high-quality screenshots of their app’s interface. Look at the number of downloads. Take a close look at the permissions the app is asking for. Scroll down the page, past the reviews to the Additional Information section. Under Permissions , tap View Details . Google Play will list all the permissions requested by the app. If they are unrelated to the app’s function or what it claims to do, it could be fake or malicious. Unwanted in any case. Search the internet for more information on the app. Scan with an online virusscanner that accepts url’s before installing. If you decide to install an untrusted app, block internet access for the app. If it needs it, monitor its behaviour. To report an app on Google Play Store, go to the app page, and click the three dots in the top-right corner and click Flag as inappropriate . For fake apps, you can choose copycat or impersonation as reason, and submit. For problems related to the contents of the F-Droid repository (the apps in the app store), such as disappeared, outdated, or fake applications, please use this issue tracker .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e4d04a279ad4c55b226b8064c142c816",
    "u": "https://android.tymyrddin.dev/docs/opsec/autojoin",
    "t": "Not auto-joining Wi-Fi networks ",
    "c": "Not auto-joining Wi-Fi networks  Auto join is a feature that allows your phone to automatically join any Wi-Fi network it already has the credentials for, or open Wi-Fi networks, without having to ask you to do anything. This can be a time saver at home and at work. But, it carries two major issues: It can cause your phone to randomly leave a stronger Wi-Fi network for a weaker Wi-Fi network that has come into range. Both Android and iOS developers have tried to stop their operating systems from doing this, but have only had limited success. When your phone switches over to a weaker Wi-Fi, it terminates your first Internet connection, interrupting your Internet usage. Once on the weaker network, performance goes down. When you automatically join open public Wi-Fi networks you put your data and privacy at risk. You do not know that the network is secure. You could be joining a clever network clone (rogue wireless access point) that is really a MitM attack trying to steal your passwords and usernames to sensitive accounts. On an Android device, often carriers install their own Wi-Fi monitoring apps. Each app works differently. Try: Go to Settings -> Wi-Fi. You will see a list of Wi-Fi network profiles. Click the ones you want to (not) auto join with and toggle the switch to auto join. Alternatively, you can try and navigate to your device’s Connections Optimizer, if it has one: Go to Settings -> More -> Mobile Networks. In the Connections Optimizer you can disable/enable auto joining.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "048cc17539aea8a53cb927198dd5b1eb",
    "u": "https://android.tymyrddin.dev/docs/privacy/diagnostics",
    "t": "Turning off diagnostics ",
    "c": "Turning off diagnostics  The privacy settings contain an option to send diagnostic data to the phone manufacturer. Tapping this option pops up a message explaining why you should let your device send unspecified types and amounts of data to the phone manufacturer for, “improving our products and services.” Sending this data to the manufacturer is optional, and can be considered a voluntary privacy leak. A default opt-in. To opt-out: Go to the Privacy settings, and look for a Send diagnostic data option. Make sure it is set to Off .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "807b216b739910e453d67507f3deacd6",
    "u": "https://android.tymyrddin.dev/docs/services/app-stores",
    "t": "Application stores ",
    "c": "Application stores  I do not like Google and its collection of all our data , but apps that do not come from the Google Play Store or my device manufacturer’s app store are almost always a bad idea. Google and the device manufacturers try to keep their stores clean. They do what they can, and the vetting process is improved continuously, but Google Play (and other app stores) can feature unwanted apps though. F-Droid is an alternative to the Google Play that is a trusted source for Android apps, many of which do not send any data to Google or Facebook. Apparently, it is the most scrutinised alternative Play stores. Stay aware, awake and alert and research each app thorougly before installing .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0813f69fbaa1a8a347f1d4bbfc0603eb",
    "u": "https://android.tymyrddin.dev/docs/services/messaging",
    "t": "Using more secure messaging services ",
    "c": "Using more secure messaging services  In most countries, it is safe to assume that telecoms are recording all SMS message traffic. Install a secure messanger app and make it the default SMS messenger. Signal is not as strong on privacy as it is on security. It collects some metadata, and relies on central servers to manage message flow and hold the metadata it does collect. Session is a fork of Signal. No geolocation data, device data, or metadata is collected. The Session network is decentralized, with no single point of failure, and no main server for bad guys to hack. Session moves messages using an onion routing system. Note : Signal no longer accepts SMS messages.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "386cf0209f8540e4b067cb71fc7e2df0",
    "u": "https://android.tymyrddin.dev/docs/malware/readme",
    "t": "Introduction ",
    "c": "Introduction  Phones contain more sensitive information than PC’s and Workstations. It usually contains pictures, credit cards, private messages, and other valuable data. Mobile malware is a generic term for malicious software designed to target mobile devices (smartphones, tablets, and iOT devices) with the goal of gaining access to private data. Apparently it is still not as pervasive as malware that attacks traditional workstations, and that may have to do with the fact that SOC teams and SIEM stacks have focused mostly on detecting workstation and corporate network threats (before Covid and the BYOD wave), and that it was only a matter of time before hackers switched tactics. It is definitely a recognised growing threat and needs to be addressed. Threat awareness Installing an anti malware app Finding the culprit and removing it Ransomware",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7a824f2ecf702ddc515e45e32674862c",
    "u": "https://android.tymyrddin.dev/docs/services/browsers",
    "t": "Browsers that protect your privacy ",
    "c": "Browsers that protect your privacy  DuckDuckGo Private Browser you get an everyday private Internet browser that offers seamless protection while you search and browse, and access to tracking protection for emails you receive and apps you use. Many of these protections are not offered in most popular web browsers by default. Firefox Fast & Private Browser - Data privacy and security practices may vary based on your use, region and age The developer provided this information and may update it over time. Brave is fast, secure, and privacy-focused by default. It has a built-in ad blocker and browser fingerprinting protection, while also giving you access to numerous add-ons and extensions. Ungoogled Chromium browser is an open source project to provide a Chromium browser, without the Google privacy issues. Bromite is a Chromium-based browser for Android only (no desktop support). It comes with some great features by default, including ad blocking and various privacy enhancements. Tor browser enables you to use Tor without needing to install the Tor proxy . If the browser you choose is less secure and privacy-friendly, lock down the browser and the software it can invoke.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "69a7a03b81a571d0f2c640bbeaa5949f",
    "u": "https://android.tymyrddin.dev/docs/services/email-services",
    "t": "Using more secure email services ",
    "c": "Using more secure email services  Mailfence , Belgium, provides a full suite of services, Messaging, s, Calendars, Groups, and Document storage. It can easily replace the G suite. It is a secure email suite that offers end-to-end encryption (through PGP support) and works with different email clients. There is some logging of IP address and some other data, and the code is not open source. Tutanota , Germany, is a small but serious player among secure email providers. It uses a hybrid encryption system that avoids some drawbacks of PGP, and is protected by the GDPR and other pro-privacy EU regulations. There is no support for PGP, IMAP, POP, or SMTP, and you cannot import existing emails into your encrypted Tutanota inbox. ProtonMail , Switzerland, uses PGP encryption standards for email and stores all messages and attachments encrypted at rest on Swiss servers. ProtonMail has a unique feature for “self-destructing messages” and they have also added address verification and full PGP support. Articles  Reddit: Court forces mail provider Tutanota to perform a surveillance function Twitter: ProtonMail logging one of its users and providing IP address logs to French authorities Reading that carefully, if the message had already been encrypted and the IP address had been that of a VPN , these cases would not exist.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2cd25fe07df5af7ff7b89f0d4e76a91a",
    "u": "https://android.tymyrddin.dev/docs/data/encryption",
    "t": "Encrypting SD cards ",
    "c": "Encrypting SD cards  SD card encryption is a default Android security feature. Enabling SD encryption is a very straightforward process, and many phones even have it enabled right out of the box. In order to complete the encryption process, your phone must be unrooted, plugged in, and have at least 80 percent battery remaining. If the process is interrupted for any reason, you’re likely to lose access to all the data on your device. Thus, it is advisable to run a full backup first, just to be safe. Go to Settings -> Biometrics and Security -> Encrypt SD card . Tap Encrypt SD card .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "96401bd4c82f9ccb8ad759a01481fcd6",
    "u": "https://android.tymyrddin.dev/docs/services/unwanted-apps",
    "t": "Unwanted apps list ",
    "c": "Unwanted apps list  Potentially Unwanted Programs (PUPs) or Potentially Unwanted Applications (PUAs) are programs/applications in the form of toolbars, adware, plugins or other downloads that sneak onto your computer. PUPs are not classified as malware, because they are not always harmful (but pretty much always annoying) and make the companies that bundle them a lot of money, hence the name “potentially” unwanted. A few years back Emsisoft found that most free antivirus suites were bundled with PUPs. Here were the culprits: Comodo AV Free, Avast Free, Panda AV Free, AdAware Free, Avira Free, and ZoneAlarm Free Antivirus + Firewall, and AVG Free. If you are not paying for the service, you are probably the product. Many browsers today are actually data collection tools for advertising companies. This is the case for Google Chrome, the largest and most popular browser. By collecting data through your browser, these companies can make money through their advertising partners with targeted ads. We see this same privacy-abusing business model with search engines, email services, and even free mobile apps. Some PUPs will track your search history or browser behaviour and sell the data to third parties, others compromise your security, affect system performance, and/or hinder productivity. Keep unwanted applications off of your computer by research before installing an app , carefully reading installation options during the setup process and only installing the software and features you need. Definitely unwanted apps  Everything typed on the Android smartphone goes through the keyboard. This means the keyboard has access to those passwords, private emails, documents, and SMS messages typed on your phone. It can even see your credit card information. The perfect Trojan Horse. The Joker family is capable of executing arbitrary code and surreptitiously subscribing victims to paid services. It is a gift that keeps giving. Remove Poco Launcher, 4K Pro Camera and Heart Emoji Stickers if they are in your app list. YouToon – AI Cartoon Effect and Pista – Cartoon Photo Effect (same code base) steal data that attackers use to hack into Facebook accounts. … Articles  Has the antivirus industry gone mad? AVG can sell your browsing and search history to advertisers",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "429c223392bcb7dd2cb3d79e5b4d5cbf",
    "u": "https://android.tymyrddin.dev/docs/opsec/juice-jack",
    "t": "Not getting juice-jacked ",
    "c": "Not getting juice-jacked  A data blocker is a simple USB dongle that sits between the USB socket and your USB charging cable. it only connects the power lanes of the USB and will block the data pins. It is cheap, low tech, yet very effective and recommended when needing to charge your phone in public places.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e33203ac14b045adb27788a505a4724f",
    "u": "https://android.tymyrddin.dev/docs/services/tor-proxy",
    "t": "Using Tor proxies ",
    "c": "Using Tor proxies  Orbot is a free tor proxy app. It encrypts your Internet traffic and then hides it by bouncing through a series of computers around the world. Tor is free software and an open network that helps you defend against a form of network surveillance that threatens personal freedom and privacy, private activities and relationships, and state security known as traffic analysis. If you wish to get it from F-droid and not the Play Google store, you will need to enable the Guardian repository in the F-Droid settings to have the Orbot app (and other apps like Tor Browser) show up. Notes  If a government makes their own national internet, or routes traffic through specific servers to use deep packet inspection (DPI), running Tor may not provide security if the government is able to see the entire path. Sometimes the Tor network is censored, and clients can’t connect to it. An increasing number of censoring countries are using Deep Packet Inspection (DPI) to classify Internet traffic flows by protocol. While Tor uses bridge relays to get around a censor that blocks by IP address, the censor can use DPI to recognize and filter Tor traffic flows even when they connect to unexpected IP addresses. With pluggable transports, censorship against Tor can be bypassed. Not only that. If an attacker can see your traffic, and can see the website you’re visiting, even with a path outside the adversary’s control - they will still be able to correlate the traffic and learn you are visiting the website. If the same connection (the same set of relays) were to be used for a longer period of time a Tor connection could be vulnerable to statistical analysis, which is why the client software changes the entry node every ten minutes.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b11f347c3827c200b8566c6ae7ef08ad",
    "u": "https://android.tymyrddin.dev/docs/opsec/browsing",
    "t": "Browsing more safely ",
    "c": "Browsing more safely  Keyloggers and other malware can be installed via a web page script which exploits a browser vulnerability. The program will automatically be launched when a user visits an infected site. Compromising a browser is relatively easy, and it is cross-platform, hence an often chosen target. Plus that browsers (for performance reasons) prefetch exposing users to more security risks by downloading more pages, or from un-requested sites (additionally compounded as drive-by downloads become more advanced and diverse). BeEF & other browser exploits, when not using browser vulnerabilities, rely on javascript. Choose a secure browser that protects your privacy Change your default browser",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ef88b271b70a1b5dd2b4dd4f23581625",
    "u": "https://android.tymyrddin.dev/docs/authentication/screen-lock",
    "t": "Setting a password or PIN screen lock and a timeout ",
    "c": "Setting a password or PIN screen lock and a timeout  Without screen lock, anyone getting their hands on your device will have complete access to everything on it, and you can not enable on-device encryption . Touch or retinal scans to unlock your phone without needing to enter a password (passcode, PIN) is nice, but in some countries biometric authentication methods are not protected the way passwords are. In these countries, law enforcement can not compel someone to enter a password to unlock a device without a search warrant, but they can for access by touch or retinal scan. In addition, for all people in all countries, raw biometrics data in the form of fingerprints, face or retinal scans or voice recognition, for example, is analog data until a biometric system converts it to digital data that a computer can then process. This data must be stored somewhere. The convenience of biometric authentication is only worthwhile as long as the data being stored remains secure and untapped. For single-user devices, like an Android, this data can be stored on the local device. And if data is stored somewhere, it could potentially get stolen. If the worst happens and your PIN or password get stolen, you can easily change them. What are you going to do if your fingerprint or Iris scan get stolen? Depending on your Android: Settings -> Privacy -> Lock Screen -> Screen Lock Type -> Select one of the screen lock types (OR) Settings -> Security -> Screen lock (OR) Settings -> Lock screen And somewhere else in your settings (maybe Display), set a screen timeout.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d0c8880d9a5e5568d6ec2b2a852c8e4a",
    "u": "https://android.tymyrddin.dev/docs/opsec/email-use",
    "t": "Using email more securely ",
    "c": "Using email more securely  Do not use public computers to access email with sensitive information. If you are not in a safe neighbourhood, use a VPN or Tor anonymity network to encrypt traffic from the user machine to a safer network. Use privacy-focused email services , and have at least two email addresses, one for private use, and one for public use, (and do not use your own name or other personal information) GPG, PGP, SMEmail, can be used for end-to-end message encryption.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "331fb687fa06ee7315a1c6e684240929",
    "u": "https://android.tymyrddin.dev/docs/privacy/location",
    "t": "Shutting down location history ",
    "c": "Shutting down location history  Even if you are not using any services that track your location, Android does. It uploads that information to Google to store it in your Google account. The data is used to send you personalised maps and recommendations, and targeted ads. On a new phone, don’t turn it on. If you are already using it, you can stop Google from tracking you by pausing it. This will not keep apps from using location information from your device, but it will stop Google from filling up their databases with a detailed profile of your movements. Go to Privacy settings -> Google location history . This takes you to the Location History page of your Google account. Pause Location History .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "bf76932db29bc882ee14cbb098e0d896",
    "u": "https://android.tymyrddin.dev/docs/privacy/personalised-ads",
    "t": "Terminating ad personalisation ",
    "c": "Terminating ad personalisation  Google uses data it collects about you to offer personalised ads. Part of this is assigning you a personal advertising ID that is used to accumulate data about you. This can be turned off. Apps can be told not to use that ID to build profiles or to show you personalised ads. Go to Privacy settings -> Ads . In the screen that appears, Opt out of Ads Personalization by turning On the slider. If you leave the slider in the Off position you are telling Google to continue to apply Ads personalisation. Note : If you disable Ads personalisation you will still be forced to see ads, but they will not be customised for maximum impact on you. And if you clear your cache, it will automatically turn Ads Personalization back ON.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "bdc67db9a0388b29da105b99904b3375",
    "u": "https://android.tymyrddin.dev/docs/guards/firewall-no-root",
    "t": "Firewall No Root ",
    "c": "Firewall No Root  Firewall No Root uses artificial intelligence to block spy servers automatically on detection. When getting started with it, you get a choice to select a default startup option: Silent mode allows all connections, and you can block individual connections as required (the recommended setting for beginners). Warn mode is for checking which apps are silently connecting to an unsecured server. After selecting warn mode, the firewall will block all apps and services from connecting to the internet. You have to manually allow apps from the quick settings panel or in the app.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1e42db14d4d44cd1dc66c58bfb584ed9",
    "u": "https://android.tymyrddin.dev/docs/services/edit-hosts-file",
    "t": "Editing hosts file ",
    "c": "Editing hosts file  The hosts file is a system file on a device that lets you map specific domain names to an IP address. If you want to add new entries to the hosts file, you’ll need the IP address of the server that you want to map a hostname to. XXX.XXX.XXX.XXX some.domain.name The hosts file lets you override DNS entries for any domain name. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. Blocking is achieved by setting the IP address of the ad networks to a loopback address like 127.0.0.1 which will not return anything. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. If your device is infected with malware, then your hosts file may be compromised to included unknown entries for known domain names. That is NOT the IP address of your bank! This type of DNS attack is known as DNS pharming, and checking your hosts file can uncover potential infection. For Android there is a way using Android Debug Bridge (adb) : Open a terminal window. Pull the hosts file out of the phone to your PC. Edit it. disable READ_ONLY of SYSTEM $ su # mount -o rw,remount /system Push the file back. Put SYSTEM back to READ_ONLY: # mount -o ro,remount /system",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "957f877b6cc72ba6e8779b113379d051",
    "u": "https://android.tymyrddin.dev/docs/services/change-mac",
    "t": "Changing MAC address ",
    "c": "Changing MAC address  A MAC address identifies the device connected to a network and allows the network to track, restrict or allow access based on it. Routers identify and assign static IP addresses based on the MAC addresses of devices. Before you try to change the MAC address, you need to know the value that you want to use. Set the 2’s place bit (the “locally administered” bit) in the first byte, to differentiate it from a guaranteed globally unique MAC address. Usually the first three bytes an unicast MAC address is an “Organizationally Unique Identifier” (OUI) that the IEEE assigned to the manufacturer of your Ethernet device. Manufacturers are required to make sure they keep the last 3 bytes unique. Avoiding all of that knowledge, the MAC address generator tool can generate a valid address for you. Go to Settings ->  Phone -> Status . Open a terminal app To get the name of the interface: ip link show The rootless option is only temporary until you restart your phone: ip link set [name of interface] 00:0a:95:9d:68:16 For a persistent MAC address change use busybox or adb with su .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "385559ad86f4f8bdc8b18caa7f1a089e",
    "u": "https://android.tymyrddin.dev/docs/malware/ransomware",
    "t": "Ransomware ",
    "c": "Ransomware  Removing  Boot into the mobile phone’s Safe Mode and uninstalling the suspected application: Hold down the physical Power button until you see the Power off prompt on your screen. Long-press the Power off button on your screen until the Reboot to safe mode dialog box appears. Press OK . The device reboots. The words Safe Mode appear in the lower left corner of your screen. Go to Settings -> Apps . Uninstall the ransomware and related application. If you can not get rid of the ransomware by booting into Safe Mode , you can try to reset your Android device to factory settings . A factory reset erases all data on the device, so make sure you make a back-up first. Prevention  Download applications only from the app stores that vet. Keep the device updated. Android developers regularly release new patches and updates. Make sure to install the offered updates as soon as you receive notifications on your device. Back up your mobile data on your computer hard drive, one a portable device, or in the cloud. Install anti-malware applications Disallow non-official app installations: Go to Settings -> Security . Uncheck the Unknown sources box.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0ff01bbb4239e0b2821e80228bb18df7",
    "u": "https://android.tymyrddin.dev/docs/opsec/ooni",
    "t": "Measuring Internet Censorship ",
    "c": "Measuring Internet Censorship  The OONI Probe is a free app to measure Internet Censorship. With this app, you can examine the blocking of websites and instant messaging apps, measure your network’s speed and performance, and check whether systems that could be responsible for censorship and surveillance are in your network. OONI Probe is developed by the Open Observatory of Network Interference (OONI), a free software project (under The Tor Project) that aims to uncover internet censorship around the world.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e2f1d06c57ec6e8351317dbd85d4907e",
    "u": "https://android.tymyrddin.dev/docs/authentication/notifications",
    "t": "Keeping notifications off the lock screen ",
    "c": "Keeping notifications off the lock screen  Android displays app notifications on the lock screen. Anyone who happens to be looking (shoulder surfing) can also see those notifications, even though your device is locked. Go to Settings -> Lock screen. Scroll down the Lock screen to Notifications and set the slider to Off. There are a lot of options. Just use the slider at the top of the screen to turn it all Off. Check that lock screen notifications are still turned off any time you make changes to the lock screen.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "86fb8ed783fc431b9be4844653929db7",
    "u": "https://android.tymyrddin.dev/docs/malware/clean-machine",
    "t": "Finding the culprit and removing it ",
    "c": "Finding the culprit and removing it  If you think it will turn into a “legal issue”, DO NOT shut the device down or try to remove the malware, and call in a first responder instead. Detecting malware  If the symptoms appeared immediately after installing an app, that app may be the guilty party. If you get ads in the notification bar, then long tap those and then touch on All Categories to learn which app is displaying the ads. Go to Settings -> Battery and monitor usage . If you recently charged, Battery usage data is not available. Wait a few hours for the data to become available. Go to Settings -> Network & Internet -> Data usage -> Mobile data usage / Wi-Fi data usage . Removing malware  Go to Settings and tap on Apps (& Notifications) . Locate the app. Tap on it, and choose Uninstall . If the Uninstall option is greyed out or not there at all, then it means that the app has gained privileges. Removing admin rights  Go to Settings -> Security & location -> Device admin apps . Tap on the checkbox and then tap on Deactivate this device admin app . Go back to the Apps & notifications to remove it. Fail  If removing admin rights did not work, do a Factory reset If a factory reset does not work, it is probably a very persistent malware ( like xHelper ) You may wish to analyse it further and/or get help. Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3a4c2350a590313cbcda3691927649bd",
    "u": "https://android.tymyrddin.dev/docs/privacy/activity-controls",
    "t": "Revoking the prying big eyed activity controls ",
    "c": "Revoking the prying big eyed activity controls  The data saved in your account helps give you more personalized experiences across all Google services. Chills up and down my spine. In other words, Google tracks everything you do, and uses that data to predict what you will do next, influence what you think and do, and serve you targeted ads that are designed to convince you to buy stuff. On a new phone do not turn it on. If you already have, and want out: Go to Privacy settings -> Activity Controls . You will see a screen full of the kinds of things that Google tracks, along with a pitch on why them tracking this information is good for you. Turn off Web & App Activity . Google will give you a long message trying to convince you to let them keep tracking you. This does not put an end to Google collecting this data on you. It only pauses the collection. Nor will this delete the data Google has already collected on you. To delete the data Google has already collected in the Web & App Activity category, go to myactivity.google.com. Repeat for YouTube History .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "86cbd00b093fec8ea8c067a064b3205a",
    "u": "https://android.tymyrddin.dev/docs/guards/netguard",
    "t": "NetGuard ",
    "c": "NetGuard  NetGuard offers advanced features such as network statistics, custom notifications, and rules backup. NetGuard uses a local VPN connection to filter your internet traffic and allows you to block any app from accessing the internet via Wi-Fi or data. You can manage and create your own firewall rules for system apps. You can not connect to more than one VPN because of Android limitations, so you can not use this app with any other VPN app .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "94c435d458416ed1e09b7676051e9853",
    "u": "https://android.tymyrddin.dev/docs/services/ssh",
    "t": "Using SSH tunnels ",
    "c": "Using SSH tunnels  Secure Shell (SSH) can be used to securely acquire and use a remote terminal session, tunnel traffic, transfer files, mount remote file systems, and more. SSH uses strong encryption, and you can set your SSH client to act as a Socks proxy. The traffic enters the Socks proxy running on your local system and the SSH client forwards it through the SSH connection – this is known as SSH tunneling. Once you have set it up, you can configure applications on your computer – such as your web browser – to use the Socks proxy. Each application must be configured to use the SSH tunnel’s proxy. This setup works similar to browsing the web over a Virtual Private Network (VPN) . From a web server perspective, traffic appears to be coming from the SSH server. The traffic between source and the SSH server is encrypted, so you can browse over an encrypted connection as you could with a VPN. Port forwarding  Port forwarding or port mapping is a combined technique of: Translating the address and/or port number of a packet to a new destination. Possibly accepting such packet(s) in a packet filter (firewall). Forwarding the packet according to the routing table. SSH tunnels can be created in several ways using different kinds of port forwarding mechanisms. On Android you can use ConnectBot ( Google Play Store ConnectBot , F-Droid ConnectBot ), a traditional-style SSH client, providing command-line access to computers running SSH server software. A GUI interface is available for setting up connections. ConnectBot can run pretty much all SSH commands, and fully supports persistent connections, key management, and port forward management.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5a764df496b897027cdb1a025ab2f167",
    "u": "https://android.tymyrddin.dev/docs/authentication/sim-pin",
    "t": "Changing the SIM PIN ",
    "c": "Changing the SIM PIN  The SIM card PIN code is meant to protect your data against unauthorised access. Each SIM you insert into a smartphone has a PIN code that you need to enter in order to activate the card. Some mobile providers use standard PIN codes, like 0000 or 1234, for all their SIM cards, while others generate unique PIN codes for each SIM. Whatever the case, it is safer to change the default SIM PIN code to one of your choosing. If you do not and the phone gets stolen, thieves can change the SIM and put it in another unlocked phone. And with the SIM in another phone they can request an SMS code for resetting the password to all your accounts, including iCloud, Facebook, Instagram, Twitter, etc. Even with two-factor authentication enabled, they can use this method to get the code and access your accounts.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "167babce2ef701ab0bef7fbde7d54dd9",
    "u": "https://android.tymyrddin.dev/docs/services/default-apps",
    "t": "Changing default apps ",
    "c": "Changing default apps  Pick the default app you wish to change, for example, for your bowser you can pick one of these , or for swapping Google apps, Simple Mobile Tools Changing apps on newer androids  Install your replacement app. You will be asked if you want to make it your default. Yes. In the next window, tap to select it and tap to make default. On older androids  Install your replacement app. Go to Settings -> Apps . On the Apps screen, tap the three-dot menu on the top right. In the menu that appears, tap Default Apps . A handful of default apps appears. Tap the default app you wish to replace. Android will display a list of the apps you have installed on your device. Tap the app you want to use as the default.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6519344803d7260be29118cf31881e39",
    "u": "https://android.tymyrddin.dev/docs/malware/scanner",
    "t": "Installing an anti malware app ",
    "c": "Installing an anti malware app  Google Play Protect is a feature that automatically scans your apps and your device for problems. It will warn you if it finds anything. Play Protect is not enough. It is a Google product and will protect you against any threats, except Google. Google Play Protect is unlikely to protect from malicious apps that did not come from its store. Clean antivirus vendors which are not on the unwanted apps list : Emsisoft Bitdefender Free Perhaps  LibreAV is an attempt to detect malwares on android devices by utilizing machine learning approach. Hypatia (available on FDroid) is powered by ClamAV style signature databases. AFAIK, the app has NOT been audited, and antivirus apps have the potential to be very bad in terms of privacy. The name “us.spotco.malwarescanner” contains “spot”. Will keep an eye out. Do not install yet.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6c1a1392292403f9b5d78a753471ecb4",
    "u": "https://android.tymyrddin.dev/docs/opsec/hibp",
    "t": "‘;–have i been pwned? ",
    "c": "‘;–have i been pwned?  ‘;–have i been pwned? (HIBP) is a database of several billion email addresses (and, separately, passwords) that have appeared in a publicly known past data breach. Firefox Monitor is an online service developed by Mozilla It informs users if their email address and passwords used have been leaked in data breaches, using the database provided by Have I Been Pwned? Check if you have an account that has been compromised in a data breach, and if so, change your password and change it in any other place where you’ve used that password. Better yet, never use a password twice, and consider using a password manager.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d6281858f4080220374b654a69c42a48",
    "u": "https://pap.tymyrddin.dev/docs/thm/greenholt",
    "t": "The Greenholt Phish ",
    "c": "THM: The Greenholt Phish The Greenholt Phish  A Sales Executive at Greenholt PLC received an email that he didn’t expect to receive from a customer. He claims that the customer never uses generic greetings such as “Good day” and didn’t expect any amount of money to be transferred to his account. The email also contains an attachment that he never requested. He forwarded the email to the SOC (Security Operations Center) department for further investigation. Investigate the email sample to determine if it is legitimate. Questions  What is the email’s timestamp? (answer format: mm/dd/yyyy hh:mm) , Who is the email from? , What is his email address? , and What email address will receive a reply to this email? Looking at the headers in thunderbird: 06/10/2020 5:58 , Mr. James Jackson , info@mutawamarine.com , and info.mutawamarine@mail.com What is the Originating IP? NOT the answer 192.119.71.157 Who is the owner of the Originating IP? (Do not include the “.” in your answer.) I used domaintools whois Hostwinds Llc What is the SPF record for the Return-Path domain? and What is the DMARC record for the Return-Path domain? I used demarcian domain checker : v=spf1 include:spf.protection.outlook.com -all v=DMARC1; p=quarantine; fo=1 What is the name of the attachment? vSWT_#09674321____PDF__.CAB What is the SHA256 hash of the file attachment? sha256sum SWT_#09674321____PDF__.CAB 2e91c533615a9bb8929ac4bb76707b2444597ce063d84a4b33525e25074fff3f SWT_#09674321____PDF__.CAB What is the attachments file size? (Don’t forget to add “KB” to your answer, NUM KB) and What is the actual file extension of the attachment? I used VirusTotal : 400.26 KB resp RAR",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "31e915eaf224fbdc0207c465d71a7401",
    "u": "https://honey.tymyrddin.dev/",
    "t": "Active defence ",
    "c": "Active defence  With deception technology, the environment is populated with decoys: fake endpoints, files, services, databases, users, computers, and other resources that mimic assets. The intent is to lure adversaries away from legitimate targets and detect intruders in the early stages of an attack, both key to minimising damage. Vet all tactics in this strategy with a lawyer or legal team first. And whatever you do, do not become the petty tyrants you fight. Testlab Active defence tools Notes Introduction Tactics Traps Taxonomies of honeypots Honeypot roadmaps Detecting honeypots Avoiding honeypot detection Honeyports Honeyclients Books ",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d967014050b70593cdcb44e9493e642b",
    "u": "https://honey.tymyrddin.dev/docs/notes/tactics",
    "t": "Tactics ",
    "c": "Tactics  Decoys  Decoys can be used to distract attackers from real targets. Honeypots or honeynets are sets of devices designed to attract attackers, but record the actions of adversaries and alert administrators of potential breaches. Honeypots can be used for researching PTTs (procedures, tools and techniques) of adversaries and assist with generating effective defensive measures. There are lots of honeypots , but your selection will depend on your environment and what you want to get out of it . At home  A honeyclient is a tool designed to mimic the behaviour of a user-driven network client application, such as a web browser, and be exploited by an attacker’s content. Thug seems something to have fun with at home. Attribution  Getting attribution is particularly useful in combination with documents that are a beacon when opened, such as when integrated with a tool like Molehunt . The Browser Exploitation Framework (BeEF) is a tool often used by adversaries and in pentesting, and can also be used in defence by gathering information from the remote party from within his or her web browser. Another tool that can assist with attribution is honeypot systems that have built-in attribution capability features, like HoneyBadger , which has geolocation features to determine where an attacker is located. Traps  Another possible tactic is trapping adversary activity by generating a maze of fake web content using tools like Spidertrap, Weblabyrinth, and/or by creating a haystack of honeypot hosts using Nova is also a good tactic. An adversary can get lost within these, even when using crawlers, spending hours or days to sort out what is real and what is not.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "aa8df7ad020153dabb6ba70bdb5120a3",
    "u": "https://honey.tymyrddin.dev/docs/notes/honeyports",
    "t": "Honeyports ",
    "c": "Honeyports  Consider honeyports , an effective defence for air gapped/high security networks: They give you visibility. Current IDS IPS technologies fail at detecting attackers communicating with open ports over normal protocols (SMB, SSH, HTTP, and HTTPS). Some Next-Gen firewalls already have some of the deception capabilities. Most IPS/IDS technologies are still blind at detecting 0-day attacks. If anyone interacts with a honeyport, it can trigger an alert and/or create a dynamic blacklist entry. You can run them from the command line, and you can run them as Python, PowerShell, and Ruby scripts. How it works  Create a non-legitimate listening port on an external facing legitimate non-important server that are favorite for remote attacks, like telnet or ssh. The services need not be installed. Listen on that port using tools like honeyports. Most pentesters, redteamers and adversaries start with reconnaissance. When an attacker runs a recon scan against this server, sees this open port and tries to communicate, automatically block that IP at your perimeter so that all further actions are blocked. Take that a step further and check out portspoof . A port scan will take ages and becomes utterly meaningless with every port responding that it is up and running some service. Scanning tools will try to enumerate those services by running additional checks, over 65536 ports. Resources  Active Defense, Offensive Countermeasures, and Cyber Deception , John Strand, Bryce Galbraith and Paul Asadoorian, 2020",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b9478f7344930ba2a480cece24322e3a",
    "u": "https://honey.tymyrddin.dev/docs/notes/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Choices developers, system administrators, researchers, and threat hunters face: Which honeypots, honeyclients and honeyports? Which tools to integrate with? What kind of attacks to capture? What vulnerabilities to emit? How hard must it be to detect it? Why?  Wrong design decisions may result in collecting irrelevant information or even exposing the deception technology itself. How?  Tactics Taxonomies Roadmaps Detecting honeypots Avoiding honeypot detection Honeyports Honeyclients",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b063532314ab410630b9ff93392c63a4",
    "u": "https://honey.tymyrddin.dev/docs/notes/roadmaps",
    "t": "Honeypot roadmaps ",
    "c": "Honeypot roadmaps  Web-based  The in 2014 proposed Aggressive Web honeypot (Supeno Djanali et al.) is a low-interaction web honeypot equipped with obfuscated javascript code to detect cross-site scripting and SQL injection. The proposed framework is able to complement the limitation in the existing honeypot such as Glastopf, a low-interactive honeypot and HIHAT, a high-interactive honeypot. The goal of the OWASP Honeypot Project is to identify emerging attacks against web applications and report them to the community, in order to facilitate protection against such targeted attacks. It is based around the earlier OWASP/WASC Distributed Web Honeypots Project . A client honeypot is a honeypot that actively searches for malicious or compromised servers. Worm detection  Signature-based IDS is commonly included either as the main IDS or part of the IDS system. The Aho-Corasick algorithm used in Zero-day polymorphic worms honeypot stands out from the crowd. The Aho-Corasick Algorithm can generate signatures even if not all the variant of the polymorphic worm is captured. Bot detection  The implementation of a bot detection honeypot can be for studying its origin or can be used to contain the DDoS attack and keep the real server free from it. The Hybrid honeypot (Swapnali Sundar Sadamate) uses a client-server architecture. It consists of a server storing information collected by the honeypot, a honeypot to capture the attack information, a web-management interface and a threshold-based anomaly IDS system. The IDS system is implemented at the gateway of the network to detect the malicious traffic. The malicious packet is redirected to the honeypot. The honeypot is installed with sebek to record attacker behaviour, dionaea to collect the malware information and snort in the verification process to collect and analyse the packet received. The ODAIDS-HPS honeypot (Rajalakshmi Selvaraj) consists of an outlier IDS to detect the DoS packet, attack classifier and honeypot. The IDS adopts distance of the nearest neighbour method and requires a set of pure normal data to train the system. Honeytoken  A honeytoken is a digital entity perceived to be valuable by an attacker. It can be as simple as an ID with a password or be as complex as a spreadsheet with believable customer information. Honeytokens are most useful in the context of anti-phishing and insider threat. How it should be constructed? Who is it for? What information to keep and what to change? Maya Bercovitch et al. introduced honeygen for automatically creating complex honeytokens. The application has two difference modes which can be used to create the honeytoken. The first mode is an obfuscation mode where real data is used as input. This mode only changes the more sensitive values. The second mode is the generation mode. This mode creates the honeytoken from scratch based on given rules. Advanced Persistent Threat  APT attacks are often a slow process and hard to detect, especially when stealth techniques such as tunnelling are used. The APT detection system (Roman Jasek) consists of high-interactive honeypots, low-interactive honeypots, honeypots for production and honeypot agents. A honeypot agent acts like a normal human user with behaviour to attract the attack. A low-interactive honeypot emits a known vulnerability into the network. A high-interactive honeypots allows the attacker to interact and compromise its system. The act of compromising the honeypot in the honeyfarm is recorded and monitored by the administrator. Safety rules are derived from the compromise and are applied to the production system. The APT proactive detection system (Zainab Saud) architecture uses NIDS as a gateway to the server and low-interactive honeypot to emit data to attract the attacker. The focus of this system is to ensure that an administrator receives timely information on the intrusion when the honeypot is being compromised. The task of the NIDS is to provide a detailed picture of the attack, and its log and alerts can assist with analysis and correlating different events. Interaction between attacker and defender is usually an incomplete information game in which defender and attacker are not sure of the type of other players. A Bayesian game may be a fitting model. Dynamic  Dynamic honeypots can automatically adapt to the environment they are in. Usually some fingerprint method is used to collect information about its environment. Active fingerprinting methods use techniques such as port scanning to collect information from the server. Some dynamic honeypots are low-interactive honeypots, most likely for ease of configuration. For detecting unknown attacks those are not very effective. Some, like the Sophisticated honeypot mechanism (Liberios Vokorokos), Dynamic and Hybrid honeypot (Kartik Chawda), and the Versatile virtual honeynet framework (Wenjun Fan) have both high and low-interactive honeypots in their architecture. The low-interactive honeypot is preconfigured to blend in with the network, and the high-interactive honeypot will contain, monitor and store the attack information. The latter adopted the virtual high-interactive honeynet, capable of analysing multiple malwares in parallel. In current developments, applications such as Hadoop are used to cater for the huge amounts of network data. And attackers are always coming up with new ways of identifying and taking over honeypots. In this never-ending arms race, honeypots and how they are used must also be further developed. This project solves some of the inherent limitations of honeypots by designing, building and evaluating a novel honeypot deployment concept leveraging cloud technologies. This new concept, a small, substantial contribution in the field, shifts the approach of deploying honeypots into the cloud. AI  RASSH (Adrian Pauna) is a low-interactive honeypot leveraging reinforced learning game theory. The Intelligent honeypot (Wari Zanoramy, Ansiry Zakaria) is high-interactive and uses a past similar case and solution and applies it to the current case to create the honeypot. The if-then rule stored in the database is used in the decision-making of the content in the honeypot (case-based reasoning and expert system). These approaches were trained beforehand and did not learn from attacks. Enter DeepDig (DEcEPtion DIGging) (pdf). Shadow  Shadow honeypots take the concept of a traditional honeypot and enhance it by deploying a network of honeypots that are hidden behind the actual production systems. These shadow honeypots are designed to blend in with the rest of the network, making it difficult for attackers to distinguish between real systems and decoys. Unlike traditional honeypots, which are designed to actively engage with attackers and potentially pose risks to the production environment, shadow honeypots are passive monitoring systems that do not engage with attackers. Instead, they are designed to blend in with the production environment as much as possible, with the goal of attracting malicious activity that might otherwise go undetected. The Shadow honeypot (Anagnostakis Kostas) uses three different anomaly IDSs. If one IDS fails to detect an attack, the other may be able to detect it. The detection of malicious packet is based on knowledge of what constitutes normal packets. Configuring three detectors to an acceptable level of detection and the log delay for a packet to go through the three checks, could be somewhat time-consuming. AIPS (Maros Barabas) attempts to detect attacks with signature datasets of abnormal behaviour with a single IDS. High memory usage and could suffer from high false positive rates. I have not found many new developments for these types of honeypots. Concealment  Apate is a Linux Kernel Module for hardening High Interaction Honeypots. It works on a system call level, is able to log, block and manipulate these calls, and uses an easy to use yet powerful configuration language. The evaluation...",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "fd300df9828ccbd928e1afc8d9e70a7a",
    "u": "https://honey.tymyrddin.dev/docs/notes/honeyclients",
    "t": "Honeyclients ",
    "c": "Honeyclients  For most honeypots to work, you have to wait for the attacker to attack the honeypot from a remote location. This ignores that most attacks are client-side. A phishing e-mail arrives in an inbox, the user clicks and allows the remote malware to activate on the device and allows it to callback over TCP port 80, which is allowed by most firewalls. Meanwhile, drive-by downloads overtook file attachment phishing as the major means of initial access. Enter client-side honeypots (honeyclients), to track and analyse these types of attacks. A honeyclient mimics, either manually or automatically, the normal series of steps a regular user would make when visiting websites. It can be fully patched or be left vulnerable. The idea is to identify malware hosts, and possibly even gather attribution information. HoneyMonkey (dead since 2010) was a web browser based (IE) high interaction client honeypot built by Microsoft in 2005. It detected attacks on clients by monitoring files, registry, and processes. Thug is a Python low-interaction honeyclient aimed at mimicing the behaviour of a web browser in order to detect and emulate malicious contents. It is actively being developed. Many more such honeyclients exist.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "66da79bbce0ad12c27e603328766f4bb",
    "u": "https://honey.tymyrddin.dev/docs/notes/taxonomies",
    "t": "Taxonomies of honeypots ",
    "c": "Taxonomies of honeypots  A wide variety of honeypots exist, and some classification can be helpful. Purpose  According to purpose, honeypots can be divided into two main categories: A research honeypot is used to collect, monitor and analyse the activities of an attacker and the tools used to hack into the honeypot. It is used to discover an unknown vulnerability and attack. A production honeypot is focused on defence, and mainly implemented behind a firewall and usually concealed within the production network. Its purpose is to keep an attacker away from the actual system by creating an illusion of an actual system with vulnerabilities, and when attacked, alerts the system administrator of the intrusion. Interactivity  The level of interactivity provided to adversaries is also a useful distinction, with most honeypots falling into one of the below categories: Low-Interaction honeypots offer little interactivity to the adversary and are only capable of simulating the functions that are required to simulate a service and capture attacks against it. Adversaries are not able to perform any post-exploitation activity against these honeypots as they are unable to fully exploit the simulated service. Examples of low-interaction honeypots include mailoney and dionaea. Medium-Interaction honeypots collect data by emulating vulnerable services and the underlying OS, shell, and file systems. This allows adversaries to complete initial exploits and carry out post-exploitation activity. The system presented to adversaries is a simulation, and as a result, it is usually not possible for adversaries to complete their full range of post-exploitation activity as the simulation will be unable to function completely or accurately. Cowrie can function as a medium-interaction SSH honeypot. High-Interaction honeypots are fully complete systems, usually Virtual Machines, that include deliberate vulnerabilities. Adversaries should be able (but not necessarily allowed) to perform any action against the honeypot as it is a complete system. It is important that high-interaction honeypots are carefully managed, otherwise, there is a risk that an adversary could use the honeypot as a foothold to attack other resources. Cowrie can also operate as an SSH proxy and management system for high-interaction honeypots. Deployment location  Once deployed, honeypots can also be categorised by the exact location of deployment: Internal honeypots are deployed inside a LAN. This type can act as a way to monitor a network for threats originating from the inside, for example, attacks originating from trusted personnel or attacks that by-parse firewalls like phishing attacks. Ideally, these honeypots should never be compromised as this would indicate a significant breach. External honeypots are deployed on the open internet and are used to monitor attacks from outside the LAN. These honeypots are able to collect much more data on attacks since they are effectively guaranteed to be under attack at all times. Cyber kill chain  A must read : Three Decades of Deception Techniques in Active Cyber Defense - Retrospect and Outlook uses a tailored cyber kill chain model which can reflect the current threat landscape and a four-layer deception stack, a two-dimensional taxonomy is developed, based on which deception techniques are classified.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "553f557402dcdd1d275e079c9f6ab721",
    "u": "https://honey.tymyrddin.dev/docs/notes/concealed",
    "t": "Avoiding honeypot detection ",
    "c": "Avoiding honeypot detection  Automatic honeypot redeployment  Low interaction honeypots are more expensive to develop with built in anti-detection because their scope and functionality are limited in contrast to high interaction honeypots. On discovery by an attacker , modifying an existing honeypot configuration may be too costly. One approach for avoiding honeypot detection involves automated redeployment of the honeypot, which in turn reduces the need for anti-detection honeypot configurations. One study that has explored the development and implementation of such a mechanism automatically re-deploys a honeynet when it identifies that an attacker has detected it. Inbound and outbound Internet Control Message Protocol (ICMP) packets are monitored and any drop in the number of ICMP packets below a pre-determined threshold indicates that the attacker has disconnected (indicative of the honeypot being discovered). The honeypot is then automatically redeployed with an altered configuration with intent to trap the same attacker. This method reduces setup overheads and development of anti-detection mechanisms for honeypots. Honeypot delay reduction  One detection risk for honeypots comes from the introduction of arbitrary delays in processes that a honeypot mimics that would otherwise not have such delays. For example, authentication via SSH that is delayed due to logging or log forwarding required by a honeypot. These delays enable attackers to detect the honeypot. By reducing the time delay to match more closely that of a real infected host, the risk of detecting the honeypot is lowered. Delay reduction as an optimisation for honeypots has demonstrated its effectiveness in avoiding honeypot’s detection when applied to Honeyd. Honeyd is a virtual (software) honeypot that emulates the protocol stack (such as the TCP/IP stack), such that attackers are convinced they are attacking a real vulnerable system. But because Honeyd operates on a virtual network, the link latency can be used to detect the presence of the honeypot. Specifically, end-to-end latency in Honeyd’s design is a multiple of 10 milliseconds. By comparing latencies between a physical (real) network and a virtual (honeypot) network we can define a threshold in which the two latencies are different. Using that threshold we can detect honeypot networks that use Honeyd. Attackers can use measurements of round trip times (by using ICMP, TCP, or UDP echo-reply) to detect the presence of honeypots. The study found that camouflaging Honeyd by modifying it to have a lower link latency, was effective in avoiding the honeypot system being detected. The study concluded that although the method was successful with the Honeyd honeypot system, it can also be broadly applied to other virtual honeypot systems. Honeypot process transparency  Another side effect of the way honeypots operate is the lack of transparency that leads to revealing their deceptive design. An example of this can be observed in hybrid honeypot systems. In these types of honeypots, both low and high interaction honeypots are used with a frontend honeypot forwarding connections to a backend honeypot. Current TCP connection handover mechanisms in hybrid honeypot systems can easily be detected. One study proposed a transparent TCP connection handover mechanism that uses different ports of an OpenFlow-based switch to isolate honeypots while TCP connection parameters (SEQ, ACK numbers) remain the same. The hybrid honeypots require network traffic to be re-directed from the frontends to the backends and this traffic redirection is often not transparent enough to evade detection. An alternative mechanism consists of three phases: Phase one is initiated by an attacker sending a TCP connection request to the target honeypot. The honeypot controller forwards the request to the frontend which performs the TCP three-way handshake to establish a connection with the attacker. Phase two involves transferring the TCP session from the frontend to the backend using a TCP replaying approach. This approach replays the three-way handshake using the saved attacker’s SYN packet. SEQ and ACK numbers are then synchronised leading to the third phase. In phase three packets are exchanged directly between the attacker and the backend. The study concluded that this approach makes the hybrid honeypot much stealthier, but at the expense of reduced performance. In general, honeypots need to ensure that operations that are being emulated need to maintain transparency. In other words, they need to hide any modified sequence of events that is not realistic. Dedicated hardware  Although expensive, the use of dedicated hardware for honeypots can help minimise their detection rate (for example by reducing arbitrary software delays). Additionally, dedicated hardware can also provide an additional layer of security against honeypot compromise. These benefits were demonstrated in a study, An FPGA-based Scalable Platform for High-Speed Malware Collection in Large IP Networks : This architecture implemented honeypots using dedicated hardware instead of a general-purpose processor and it also made use of a high-speed implementation of the IP stack. Additionally, the approach used a specialised stateless TCP hardware. The stateless TCP hardware can manage hundreds of thousands of simultaneous connections thereby enabling the system to support large honeynets. An increased speed of execution of TCP operations may reduce the likelihood of a honeypot being detected by an attacker. An additional benefit of implementing honeypot operations in hardware instead of software using general-purpose processors is that it also reduces the risk of the honeypot software being compromised and used for attacks. Dynamic intelligence on honeypots  The advent of dynamic approaches to honeypot development as well as novel techniques in machine learning and artificial intelligence provide an opportunity for more diverse honeypots that alter their behaviour depending on the actions of an attacker. The result is a more adaptable honeypot that is more difficult to detect. In general, dynamic honeypots have a behaviour that is not fixed, but changes based on some condition and adapts to the current environment. In this case, configuration or re-configuration is not required. An example of such a system is a high interaction honeypot that uses reinforced learning in order to dynamically change its behaviour based on the interaction that it has with an attacker. The honeypot can strategically block program execution, alter program names in order to lure attackers and can deceive attackers with the intent of having them reveal their background, which is especially important for research honeypots.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f8931ee27728477101b6481f4c009e33",
    "u": "https://honey.tymyrddin.dev/docs/notes/detection",
    "t": "Detecting honeypots ",
    "c": "Detecting honeypots  Honeypot detection lies in an attacker’s ability to detect, and find out the deceptive nature (IoCs) of the honeypot. Often this relies on the limited ability of a honeypot to align with an attacker’s mental model. This mental model is based on the attacker’s expectation of what a realistic environment should look like. And that is based on experience. Note: If you manage to fingerprint any of the used honeypots, make sure to let the creators know. There are also some legal constraints that, due to the nature of defenders having to abide by the law, enter in the design. For example, a honeypot bot that is part of a botnet cannot legally perform denial of service attacks to systems. Attackers can knowingly look for signs of such legal constraints. And in this cycle, honeypot designs are improved to conceal them better .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "03e00a7aac1de7759b2956d68ba2e518",
    "u": "https://pap.tymyrddin.dev/docs/mitre/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Understanding our current defensive capabilities and mapping them against Mitre Att&Ck framework. MITRE offers a better understanding of the operations of threat actors, enabling systematic and repeatable categorisation. Why?  Helpful for discovering where and how best to invest our time and energy. Then layer the same with potential threats to our devices and (home) networks. The gaps discovered are the areas that should be focused first. How?  Phishing for information Application Layer Protocol: Mail Protocols Drive-by compromise Supply chain compromise Signs of a compromise @home",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e15a3035588ac812aefe44ef2c56d2a9",
    "u": "https://pap.tymyrddin.dev/docs/mobile/madware",
    "t": "Madware ",
    "c": "Madware  Madware (mobile adware) usually finds its way onto a mobile phone through the installation of a script or program and often without the consent of the user. The purpose of most forms of madware is to collect data from your phone in order to spam you with ads. Most madware variants include an element of spyware , which collects information about internet usage and sends it on to a third party. This data may include details about location, used passwords and contacts. Prevention  Updated operating systems and spam filters can help protect devices against adware.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "aff08c998791d343735761cc01653e1d",
    "u": "https://windows.tymyrddin.dev/",
    "t": "Hardening Windows ",
    "c": "Hardening Windows  Version 0.1: These mitigations are all based on Windows 10. Supposedly, Windows 11 has better security . Some of these mitigations may still be applicable and useful. When we have an 11 key we will install, test it, and add mitigations. Accounts and authentication Introduction More secure login Require a password when resuming from a stand-by mode Make that more secure passwords Use a password manager Use multifactor authentication (MFA) Use a standard user account Protect SSH access with MFA Services and applications Introduction Start, stop, restart, enable, and disable services Restricting access to applications Block internet access to specific apps Maximise user account control (UAC) Unwanted application suggestions Secure browsers that protect your privacy Use a secure messaging service Use secure email services Use SSH tunnels Use a VPN service Make a VPN killswitch using routes Use alternative DNS servers Use a Tor proxy Change MAC address Renew IP lease Edit hosts file Data Introduction Create a restore point Enable full disk encryption using BitLocker File encryption Enable controlled folder access (CFA) Privacy Introduction Disable location tracking Disable Ad tracking by Microsoft Ad partners Turning devices on and off Remove metadata from files Edit exif metadata in images Remove metadata with hex editors Clean machine with BleachBit Malware Introduction Malware detection and removal Catch and remove malicious registry entries Analysing trojans Operations security Introduction Use email securely Detecting fake emails and phishing Browse more safely Check integrity of downloads ‘;–have i been pwned? Guards! Guards! Introduction Alphabet soup Windows intrusion detection systems",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f2d6516fd293cb2468c8f5e80e4ac3f5",
    "u": "https://windows.tymyrddin.dev/docs/services/odd-applications",
    "t": "Unwanted application suggestions ",
    "c": "Unwanted application suggestions  QuickTime is Apple’s video player, a current program on macOS, but the company hasn’t supported the Windows version since 2016, and TrendMicro sent out an urgent call to remove it . If you need a replacement for QuickTime, use VLC. CCleaner, once a trusted Windows app for cleaning junk, but its reputation went downhill after it was acquired by Avast. It became better again but is largely useless, as better tools and ways exist. Garbage like MyCleanPC or PC Optimizer Pro for cleaning your PC. These products range from useless to harmful. uTorrent was once considered the gold standard of torrenting software. Now a heap of ads, and in 2015, the app was found to bundle in cryptocurrency mining software without letting users know, wasting your system resources in the background to make money for the company. As in, a botnet of sorts. Try qBittorrent . Adobe Flash Player is no longer supported as of January 2021. It is blocked in all modern browsers, but if your machine still holds a local copy of Flash, remove it. A similar runtime plugin, Adobe Shockwave Player, was discontinued in 2019. Remove. Once common, Java is another media runtime to remove, both components: Java on the desktop, and the Java plugin for browsers (which is notorious for having security problems). Very few websites use it nowadays. Silverlight is a web framework, similar to Adobe Flash, that once enabled rich media content in your browser. Years ago, these plugins were necessary on a lot of websites. But now they’re deprecated and no longer useful. Google chrome extensions: Hola, The New NX, FindMeFreebies, Hover Zoom, All Antivirus Extensions, Any Unfamiliar Extensions. Toolbars like the Bing Bar, Google Toolbar, Ask Toolbar, Yahoo! Toolbar, or the Babylon Toolbar. Coupon Printer Manufacturer Bloatware. Anything from the manufacturer is probably not necessary, but it’s always good to double-check . Microsoft Bloatware, for example Store apps. Candy Crush Saga? Really??? WinRAR. 7-Zip is a free and simple tool that covers most people’s needs. … Tools  W3Techs Should I remove it?",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f7127af4d1128c0a937bf72be92acfdd",
    "u": "https://windows.tymyrddin.dev/docs/data/cfa",
    "t": "Enable controlled folder access (CFA) ",
    "c": "Enable controlled folder access (CFA)  Controlled folder access is supported on Windows Server 2019, Windows Server 2022, Windows 10, and Windows 11 clients. This feature has been tested against various ransomware samples. Controlled Folder Access achieved what it was designed to do; successfully block ransomware from encrypting files located in protected folders. Type “Windows Defender Security Center” in search box and Enter. Select Virus & threat protection -> Virus & threat protection settings option from the main window. Locate the Controlled folder access section. To enable the feature, click the On/Off toggle. Select the Protected folders sub-option underneath and add all the folders you want to restrict access to. The other sub-option underneath, Allow an app through Controlled folder access, will whitelist the apps that are allowed to access, edit, create or remove files from protected folders.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7ac776a892437bd563e2a128562a2b4e",
    "u": "https://windows.tymyrddin.dev/docs/authentication/mfa",
    "t": "Use multifactor authentication (MFA) ",
    "c": "Use multifactor authentication (MFA)  Many sites and applications offer two-factor authentication (2FA), also named multi-factor authentication (MFA). With 2FA enabled, logging into a website or application requires both a password and a unique code that is texted to your phone number or delivered via an authenticator app. You have to input this code in order to gain access to your account. Even if someone else has your password, they will not be able to break into your accounts if they can not get the code. When you use one of the authenticator apps included here, you bolster the password you know with the token, smartphone, or smartwatch that you have. Setting up MFA usually involves scanning a QR code on the site with your phone’s authenticator app. Note that you can scan the code to more than one phone, if you want a backup. Authenticator apps generate time-based, one-time passcodes (TOTP or OTP), which are usually six digits that refresh every 30 seconds. Once you set up MFA, every time you want to log in to a site, you enter the code into the secured app or site’s login page, and you’re in. The time limit means that if an adversary manages to get your one-time passcode, it won’t work for them after that 30 seconds. Something to look for when choosing one of these apps is whether it backs up the account info (encrypted, of course) in case you no longer have the phone you set everything up on. These all do (Google Authenticator does not). It’s a choice. Risks either way. Authy Duo Mobile LastPass Authenticator Microsoft Authenticator",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b31a576ceffe356fc29d0ab73588c762",
    "u": "https://windows.tymyrddin.dev/docs/guards/readme",
    "t": "Introduction ",
    "c": "Introduction  There are many types of devices and mechanisms within the security environment to provide a layered approach of defense. This is so that if an attacker is able to bypass one layer, another layer stands in the way to protect the network. Two of the most popular and significant tools used to secure networks are firewalls and intrusion detection systems. Choosing a firewall for a Windows PC  With a firewall, you can: Log hosts scanning services that aren’t running. Limit the services that applications can connect to. Segregate the local network into trust segments (Local Area Network (LAN), DeMilitarised Zone (DMZ), and Internet). Redirect ports to the hosts providing the service (Network address translation (NAT)). Windows comes with a built-in firewall in Windows 10, but this firewall may be turned off by default. Turn it on via Settings: Under Windows Settings section, click Update & Security. Select Windows Defender and then click Open Windows Defender Security Center. Choose Firewall & network protection and choose a network profile. Under the Windows Defender Firewall section, switch Off to On. In order to allow a specific application to pass through your Windows Firewall, you have to add it to the list of other permitted applications. You can do this by clicking Allow an app or feature through Windows Defender Firewall. If you’d like to be more secure, install a firewall (none of which offer exploit attack protection, by the way). ZoneAlarm Comodo TinyWall Choosing a HIDS for a Windows PC  Most of the HIDS tools for Windows are EventLog Analyzers.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7027c2ec2d34ca5e3663e08501f4c588",
    "u": "https://windows.tymyrddin.dev/docs/privacy/metadata",
    "t": "Remove metadata from files ",
    "c": "Remove metadata from files  Metadata is data about data. Metadata answers who, what, when, where, why, and how about every facet of the data that is being documented. Photos, and images in general, contain metadata. For photos this includes how large the picture is, colour depth, resolution, the date and time when it was created, the GPS coordinates of the location they were taken at, camera shutter setting details, and possibly even the name of the program used to edit them. Document metadata is information about one or more aspects of a document, spreadsheet, pdf file, that is not always visible to the person creating them, but can be found by the person who receives them next. Comments, track changes, hidden text, mark-ups, properties, attachments and bookmarks are all examples of document metadata. Office documents like pdf or Office automatically add author and organisation information to documents and spreadsheets. Web pages often include metadata in the form of meta tags. Description and keywords meta tags are commonly used to describe the Web page’s content. Most search engines use this data when adding pages to their search index. This type of metadata can be useful, but maybe you do not want to disclose this information on the web, because metadata can be used for other purposes as well: Metadata is collected by corporations for psychological manipulation in persuasion and advertising. Metadata also plays a number of important roles in computer forensics: It can provide corroborating information about the document data itself. It can reveal information that someone tried to hide, delete, or obscure. It can be used to automatically correlate documents from different sources. Metadata is used by hackers doing reconnaissance for an attack And last but not least, it can be used to correlate data in dragnet and targeted surveillance. Techniques for metadata removal  Metadata removal software like BleachBit Using a hex editor Edit exif metadata in images",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e53d358cf3fec4ce67ca53bba87f8947",
    "u": "https://windows.tymyrddin.dev/docs/services/vpn",
    "t": "Use a VPN service ",
    "c": "Use a VPN service  Internet providers are collecting your browsing data and handing this over to third parties (US, UK, Australia, and much of Europe). Public Wi-Fi remains a serious threat with adversaries targeting unsuspecting users. Many streaming services and websites restrict content to certain geographic locations. A VPN allows you to bypass such restrictions. A VPN will encrypt the connection and make the traffic unreadable. No logs policy  Meaning, not logging traffic, DNS requests, timestamps, bandwidth, IP address. NordVPN , Panama Mullvad , Sweden IVPN , Gibraltar Surfshark VPN , Netherlands Logs timestamps and bandwidth  Does not log directly identifiable information. ExpressVPN",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3b21fcd029fd7b3d38176a1c634d4f51",
    "u": "https://windows.tymyrddin.dev/docs/malware/analysing-trojans",
    "t": "Analysing trojans ",
    "c": "Analysing trojans  Check file properties. Be careful not to click on any links or attachments in the email accidentally. Is it what it seems to be? Run the file in a virtual machine and analyse it. Use an online Sandbox service. Related  Malware sandboxes Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d1d5aa12dce71562fe71bf7af4f5f0e2",
    "u": "https://windows.tymyrddin.dev/docs/authentication/password-manager",
    "t": "Use a password manager ",
    "c": "Use a password manager  The majority of people use very weak passwords and reuse them on different websites. How are you supposed to use strong, unique passwords on all the websites you use? The solution is a password manager. Password managers store your login information for all the websites you use and help you log into them automatically. They encrypt your password database with a master password — the master password is the only one you have to remember. Managers  Dashlane 1Password Bitwarden It does not protect from keyloggers  Most password manager work by copy-pasting data quickly from your manager to the field (on the website) or by simulating keystrokes for all the data on file. A keylogger captures keystrokes and would capture all passwords entered by a password manager that simulated keystrokes. Nearly all keyloggers even include the capability to take screenshots at particular intervals of time and save all the contents of the clipboard to a file. The last bit is important, because it sort of renders even password managers that use the clipboard to fill in these forms useless. The real solution to preventing these attacks is to monitor your system for any keyloggers or use some sort of AV solution .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "17cdd321a5a809b48081d1f60f1838d9",
    "u": "https://windows.tymyrddin.dev/docs/opsec/check-mail",
    "t": "Detecting fake emails and phishing ",
    "c": "Detecting fake emails and phishing  Fake emails  View the header info. Pay attention to the email address of a sender. It may imitate a legitimate sender. With only few characters altered or omitted, cybercriminals will often use an email address that closely resembles one from a reputable source. Look closely at the content: Hover your cursor over any links in the body of an email. Links not matching the text that appears raise a red flag. So does the use of URL shortening services. Email clients can be viewed in simple text instead of html, so one never forgets to do this. Poor grammar and sentence structure, misspellings, and inconsistent formatting can be other indicators of a possible phishing attempt. An unsolicited email requesting a user download and open an attachment is a common delivery mechanism for malware, even when it seems to come from a friend, or an employeur. A false sense of urgency or importance to help persuade a user to download or open an attachment without examining it first, completes this picture. Do not. Verify message source. Check the reply email. Reply and wait for the result. Phishing  Be wary of emails asking for confidential information. Don’t get pressured into providing sensitive information. Phishers like to use all kinds of social engineering. Learn what you can about it. Check a website’s privacy policy, especially whether it will or will not sell its mailing list. If so, do not register. Watch out for generic-looking requests for information. Never submit confidential information via forms embedded within email messages. Never use links in an email to connect to a website unless you are absolutely sure they are authentic.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d1edc50cca1985b4035bcd0a4cb09baa",
    "u": "https://windows.tymyrddin.dev/docs/data/disk-encryption",
    "t": "Enable full disk encryption using BitLocker ",
    "c": "Enable full disk encryption using BitLocker  Enabling full disk encryption minimizes the chance that data on your computer will ever be misused. Requirements  Windows 10 Pro and Windows 10 Enterprise include BitLocker, Windows 10 Home does not. A TPM chip. To check if your machine has a TPM chip: Type tpm.msc in the search box, and press enter. In the following window, check the TPM status. On some systems, TPM chips are disabled by default, and you will need to enable the chip in the BIOS menu: Under Security settings, look for a TPM subsection. Most likely it will allow Activation/Enabling by ticking some box or a toggle of sorts. If there is no TPM chip on your motherboard, you can still enable Bitlocker by editing the “Require additional authentication at startup” group policy. Enable via Control Panel  Either Control Panel -> Bitlocker Drive Encryption OR System and Security -> Bitlocker Drive Encryption Expand the drive you want to enable Bitlocker on, and click on the Turn on Bitlocker hyperlink If your TPM is already enabled, you will directly be brought to the BitLocker Startup Preferences selection window. If not: Go through the Bitlocker Drive Encryption startup by clicking on Next. Eject any connected USB drives and remove any CDS/DVDs sitting idle in the optical disc drive. Click on Shutdown. Follow the instructions that appear on the screen to activate the TPM. Activating the module is as simple as pressing a key (varies depending on manufacturer). The computer will most likely shut down again once you activate the TPM; turn on your computer back on. Choose to enter a password at every startup or connect a USB/Flash drive (Smart Card) containing the startup key. The latter is somewhat of a dangerous option. If the USB drive holding the key is damaged or lost you may lose access to the drive. Set a strong password and re-enter it to confirm. Next. Keep the recovery key securely locked away on both (dedicated) USB storage and paper. Encrypt a drive  Choose to either encrypt the entire hard drive or only the part used. On old buckets where most of the storage space is already being used, do the whole hard drive. On new machines, or machines with little data, choose to encrypt only the space that is currently filled with data. Bitlocker will automatically encrypt any new data you add to the disk. Choose encryption modes. Select the New encryption mode if the disk is a fixed one. Select compatible mode if you are encrypting a removable hard drive or USB flash drive. Depending on your system Run BitLocker system check (OR) Start encrypting Restart the computer to initiate the encryption process (can take from 20 minutes to hours) Now every time you boot on your computer, you will be prompted to enter the passkey in order to access the encrypted files.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1dd3ceb996fd934acfdbe7a7e04c3efd",
    "u": "https://windows.tymyrddin.dev/docs/services/block-internet-access",
    "t": "Block internet access to specific apps ",
    "c": "Block internet access to specific apps  There is a simple way to restrict internet access to specific apps in Windows 10 with the Windows Defender Firewall. Only restrict internet access to apps that do not need the internet to function properly. Examples  Type in Windows Defender Firewall in search box and open it. Go to Advanced Settings on the left sidebar. This will open a new window. Select Outbound Rules on the left sidebar. Go to New Rule on the right side of the window. Choose Program on the new window, and then click on Next. Next to This Program Path, click on the Browse button. Find the app you want to restrict internet access for. Click on Next again. Click on the Block the Connection circle, and then Next. Check the Domain, Private, and Public boxes and click Next. Give the rule a name and description. Finish.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3ffe1f2bfff0e0b56667f3f063912eea",
    "u": "https://windows.tymyrddin.dev/docs/services/max-uac",
    "t": "Maximise user account control (UAC) ",
    "c": "Maximise user account control (UAC)  Windows was designed as a single-user desktop system and has had various functionality added to it over time to address the weaknesses of the original design. A major weakness is that a desktop Windows user is also an admin-level user. User Account Control (UAC) was introduced in Windows Vista to create more of a barrier to installation and requires users to specifically authorise certain actions by clicking an OK button when prompted. By requiring administrator privileges to install programs, it is harder to deploy malware. In the search box type “Change user account control” and select the first result Move slider to Always notify me up top and click on OK Now the machine always asks for the user’s permission before making any changes. And, the weakest link in any security chain is people. While these privilege escalation tools are fully functional, many people will simply type in their administrator password, or click the OK button to allow highly privileged activities to occur whenever the prompt comes up, without further thought. In fact, this opens up another attack route for privilege escalation by an adversary. Presenting people with a spoofed pop-up box asking for the password, will usually work. For better separation, you can create a standard Windows account yourself.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "977c5ea8297420a0016a3279bd13b103",
    "u": "https://windows.tymyrddin.dev/docs/opsec/browsing",
    "t": "Browse more safely ",
    "c": "Browse more safely  Keyloggers and other malware can be installed via a web page script which exploits a browser vulnerability. The program will automatically be launched when a user visits an infected site. Compromising a browser is relatively easy, and it is cross-platform, hence an often chosen target. Plus that browsers (for performance reasons) prefetch exposing users to more security risks by downloading more pages, or from un-requested sites (additionally compounded as drive-by downloads become more advanced and diverse). BeEF & other browser exploits, when not using browser vulnerabilities, rely on javascript. Choose a secure browsers that protect your privacy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2243d157be8d2f656d63cdee40cf9bc8",
    "u": "https://windows.tymyrddin.dev/docs/authentication/resuming",
    "t": "Require a password when resuming from a stand-by mode ",
    "c": "Require a password when resuming from a stand-by mode  A screensaver password and a sleep/stand-by password are different settings. Screensaver  It is likely that your screensaver starts up before your computer goes to sleep, so that may be a better choice on a desktop. In searchbox type “Change screen saver”, then press Enter. In the Screen Saver Settings window, check the box On resume, display logon screen. OK Sleep/stand-by  A laptop is put to sleep when by closing the lid. A screensaver would not be active, and a screensaver password not needed. For a sleep/stand-by password: Control Panel -> Power Options On the left choose Require a password on wakeup You may have to click the link that says “Change settings that are currently unavailable” Select Require a password You will be able to wake the computer with your local password .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "524bc89a2bfcdbdb421e3488d7d6b831",
    "u": "https://windows.tymyrddin.dev/docs/services/restrict-services",
    "t": "Start, stop, restart, enable, and disable services ",
    "c": "Start, stop, restart, enable, and disable services  You must be signed in as an administrator to be able to do these. If you stop, start, or restart a service, any dependent services are also affected. Starting a service does not automatically restart its dependent services. Changing the default service settings may prevent key services from running correctly. It is especially important to use caution when changing the Startup type setting of services that are configured to start automatically. Some services, such as Remote Procedure Call (RPC), Event Log, and Plug and Play, cannot be stopped by using the Services snap-in window or the net stop command. These services are required for the operating system to function properly. Create a restore point before making changes to the services. If you disabled the wrong service and lost access to the computer, then try booting into Safe Mode to change the service back. “Startup Type” for Service  Automatic - With a service in this state, it will start at boot time. Some services, when no longer required, will also automatically stop when not needed. If you find you do not need a service, place it into Manual or Disabled. Automatic (Delayed Start) - With a service in this state, it will start just after boot time. Some services, when no longer required, will also automatically stop when not needed. If you find you do not need a service, place it into Manual or Disabled. Automatic (Delayed Start, Trigger Start) - With a service in this state, it will start just after boot when specifically called. Manual (Trigger Start) - This is a version of Manual mode that allows Windows to start a service when specifically called and Microsoft’s answer to “too many services running all the time”. Manual - Manual mode allows Windows to start a service when needed. However, very few services will start up when required in Manual mode. If you find you need a service, place it into Automatic. Disabled - This setting will stop a service from starting, even if needed. Errors in the Event Viewer will show up complaining of that fact. Some services, while Disabled, will constantly complain. However, this situation is taken care of if placed in Manual. The service descriptions identifies those that should be in Manual vice Disabled. Examples  Services window  Open the Services snap-in window (open the Run dialog, type services.msc OR Administrative Tools -> Services) Choose a service and double click it. You can Change its “Startup Type” (OR) Click the Stop button (OR) Enable/start a service: If the Startup type of the service is set to Disabled, then you will need to change it to either Manual, Automatic, or Automatic (Delayed Start) before you click the Start button (OR) Disable a service: If the service shows a status of running, then click/tap on the Stop button, and wait until the service status shows as stopped before you diable it. Using net Command  Requires the elevated command prompt, knowing the service name, and the double quotes. The Display name of a service is the name displayed in the Services snap-in window, and in the service’s properties. net stop \"service name\" net stop \"display name of service\" net start \"service name\" net start \"display name of service\"",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "be584bad1285129f01d3b408c84762a8",
    "u": "https://windows.tymyrddin.dev/docs/services/change-mac",
    "t": "Change MAC address ",
    "c": "Change MAC address  A MAC address identifies the device connected to a network and allows the network to track, restrict or allow access based on it. Routers identify and assign static IP addresses based on the MAC addresses of devices. Before you try to change the MAC address, you need to know the value that you want to use. Set the 2’s place bit (the “locally administered” bit) in the first byte, to differentiate it from a guaranteed globally unique MAC address. Usually the first three bytes an unicast MAC address is an “Organizationally Unique Identifier” (OUI) that the IEEE assigned to the manufacturer of your Ethernet device. Manufacturers are required to make sure they keep the last 3 bytes unique. Avoiding all of that knowledge, the MAC address generator tool can generate a valid address for you. Device Manager  In the Device Manager window, click the arrow next to Network adapters. Right-click the adapter for the network card that you want to change. Choose Properties from the menu. Select the Advanced tab. Select Network Address in the Property displayed list. Type the new MAC address value on the right side. Press the OK button. Control Panel  In the Control Panel window, search for “network connections” and choose “View network connections” in the results. Right-click on the network connection you want to change. Choose Properties from the menu. In the Properties window, click the Configure button. In the new Properties window that pops up, select the Advanced tab. Select Network Address in the Property displayed list. Type the new MAC address value on the right side. Press the OK button.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f2437a5075f6daf9c4871476c33a6a6a",
    "u": "https://windows.tymyrddin.dev/docs/services/tor-proxy",
    "t": "Use a Tor proxy ",
    "c": "Use a Tor proxy  Tor proxy  Install: $ sudo apt update $ sudo apt install tor Check it is installed: $ tor --version Tor version 0.4.6.9. Get your IP address: $ curl ifconfig.me; echo [IP address] Run the same command but preface it with torsocks. The command is now run through the tor client instead: $ torsocks curl ifconfig.me; echo [Some Tor IP address] To use the Tor network by default for shell commands, torify your shell with this command: $ source torsocks on Tor mode activated. Every command will be torified for this shell. Test with (must now be []): $ curl ifconfig.me; echo [Some Tor IP address] Notes  If a government makes their own national internet, or routes traffic through specific servers to use deep packet inspection (DPI), running Tor may not provide security if the government is able to see the entire path. Sometimes the Tor network is censored, and clients can’t connect to it. An increasing number of censoring countries are using Deep Packet Inspection (DPI) to classify Internet traffic flows by protocol. While Tor uses bridge relays to get around a censor that blocks by IP address, the censor can use DPI to recognize and filter Tor traffic flows even when they connect to unexpected IP addresses. With pluggable transports, censorship against Tor can be bypassed. Not only that. If an attacker can see your traffic, and can see the website you’re visiting, even with a path outside the adversary’s control - they will still be able to correlate the traffic and learn you are visiting the website. If the same connection (the same set of relays) were to be used for a longer period of time a Tor connection could be vulnerable to statistical analysis, which is why the client software changes the entry node every ten minutes.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6aede37dd8d610100aa023a3723b5cac",
    "u": "https://windows.tymyrddin.dev/docs/services/edit-hosts-file",
    "t": "Edit hosts file ",
    "c": "Edit hosts file  The hosts file is a system file on a device that lets you map specific domain names to an IP address. If you want to add new entries to the hosts file, you’ll need the IP address of the server that you want to map a hostname to. XXX.XXX.XXX.XXX some.domain.name The hosts file lets you override DNS entries for any domain name. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. Blocking is achieved by setting the IP address of the ad networks to a loopback address like 127.0.0.1 which will not return anything. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. If your device is infected with malware, then your hosts file may be compromised to included unknown entries for known domain names. That is NOT the IP address of your bank! This type of DNS attack is known as DNS pharming, and checking your hosts file can uncover potential infection. Windows  To edit the hosts file ( C:\\Windows\\System32\\Drivers\\etc\\hosts ) on Windows, you will need Administrator access. Right-click on your text editor’s icon (for example Notepad++) and choose //Run as administrator//. Go to File → Open in the text editor and navigate to C:\\Windows\\System32\\drivers\\etc\\ From the list, click on the hosts file and choose Open Add as many new entries as needed",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "54e22b5628bae6a435e99931d38a6530",
    "u": "https://windows.tymyrddin.dev/docs/services/renew-lease",
    "t": "Renew IP lease ",
    "c": "Renew IP lease  A DHCP client can on occasion send information in DHCP requests: hostname, MAC address, operating system, and DHCP version. All operating systems provide their most recent IP address to the DHCP server. If you change your MAC address to minimise risk, best to also renew the IP leases on the router. Windows  Using a /renew switch (This command won’t work if the computer is configured to use a static IP address): C : \\ > ipconfig / renew",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "13672a7d5524091c5421a5b9a4544cb8",
    "u": "https://windows.tymyrddin.dev/docs/malware/readme",
    "t": "Introduction ",
    "c": "Introduction  Windows has been struggling with malware for years and thus has decent protection layers built-in. Microsoft’s Defender is pretty good at detecting malware files, blocking exploits and network-based attacks, and flagging phishing sites. It even includes simple PC performance and health reports as well as parental controls with content filtering, usage limitations, and location tracking. Its malware detection rates are lower than for many third-party competitors and content filters are limited to the Microsoft Edge browser. Common signs of Windows 10 malware: Ads pop up in unexpected places, frequently Machine is running slower than usual Machine is consuming more power than necessary Strange behaviour, such as installing programs without your consent, even after rebooting it. Find these, or think you may have an infected system, or just wish to know more: Endpoint detection and response Malware analysis DIY: Malware detection and removal Catch and remove malicious registry entries Analysing trojans",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "af8d6c1d1c793758588aee1f33b38523",
    "u": "https://windows.tymyrddin.dev/docs/services/vpn-fail-open",
    "t": "Make a VPN killswitch using routes ",
    "c": "Make a VPN killswitch using routes  If you simply add a VPN using common instructions, it generally “fails open”. That means, if the VPN breaks down, because the connection is interrupted, traffic will be sent without the VPN. It is much safer when it “fails closed”, meaning that when the VPN connection breaks down, the whole internet connection must be down as long as the VPN connection is not restored. If your chosen VPN does not include being able to set a kill switch, you can use routes as a fail-safe mechanism: Make sure you’re connected to the OpenVPN server: Run the Command Prompt with admin rights. Delete the default route when the OpenVPN connection is established. > route delete 0.0.0.0 Now the default routing method is deleted, making VPN the only access method to the internet. Your internet connection will be cut off when VPN is inaccessible. The operating system will remain stasis until it can access that route again. Note that this state is ot persistent. If the router reboots or the adapter is disabled, the settings will be taken to a default state. To manually restore the default settings: Go to Control Panel -> Network and Internet -> Network and Sharing Center. Click Change adapter settings. Disable and then enable it again.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "849852b1f88396696d4707f4671ea3b4",
    "u": "https://windows.tymyrddin.dev/docs/opsec/integrity-downloads",
    "t": "Check integrity of downloads ",
    "c": "Check integrity of downloads  When downloading an ISO image of, for example, the latest Linux distro, installing or upgrading packages, or downloading software, you can verify the files have downloaded correctly and securely by using checksums. Checksums ensure the integrity of data portions for data transmission or storage. Checksums is a simple error-detection scheme in which each transmitted message is accompanied by a numerical value based on the number of set bits in the message. The receiving station then applies the same formula to the message and checks to make sure the accompanying numerical value is the same. If not, the receiver can assume that the message has been garbled (or was altered). Verifying downloaded software  When downloading software, .iso s and .deb s and the like, download the xxxsum (choose from what is available) as well as the software and check. Open Command Prompt or PowerShell and type: > certutil -hashfile [file_name] [hash-algorithm] For example: > certutil -hashfile .\\some-file.iso sha256sum and compare the output from the command with the key listed in the associated sha256 file.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5695d8dddd38e843f47d40e536d04836",
    "u": "https://windows.tymyrddin.dev/docs/services/email-services",
    "t": "Use secure email services ",
    "c": "Use secure email services  Mailfence , Belgium, provides a full suite of services, Messaging, s, Calendars, Groups, and Document storage. It can easily replace the G suite. It is a secure email suite that offers end-to-end encryption (through PGP support) and works with different email clients. There is some logging of IP address and some other data, and the code is not open source. Tutanota , Germany, is a small but serious player among secure email providers. It uses a hybrid encryption system that avoids some drawbacks of PGP, and is protected by the GDPR and other pro-privacy EU regulations. So, it does not work with PGP and there is no way to import existing emails (yet). ProtonMail , Switzerland, uses PGP encryption standards for email and stores all messages and attachments encrypted at rest on Swiss servers. ProtonMail has a unique feature for “self-destructing messages” and they have also added address verification and full PGP support. Articles  Reddit: Court forces mail provider Tutanota to perform a surveillance function Twitter: ProtonMail logging one of its users and providing IP address logs to French authorities Reading that carefully, if the message had already been encrypted and the IP address had been that of a VPN , these cases would not exist.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2b579ce55d01f323669c42df25af64c2",
    "u": "https://windows.tymyrddin.dev/docs/opsec/hibp",
    "t": "‘;–have i been pwned? ",
    "c": "‘;–have i been pwned?  ‘;–have i been pwned? (HIBP) is a database of several billion email addresses (and, separately, passwords) that have appeared in a publicly known past data breach. The service creates an SHA-1 hash of the submitted email address and passes the first six characters of that to HIBP’s hash range query API. HIBP then returns a range of possible matches, if any, to the six character string, without ever handling the full email address. Check if you have an account that has been compromised in a data breach, and if so, change your password and change it in any other place where you’ve used that password. Better yet, never use a password twice, and consider using a password manager.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3f7242b04a77966e9c394a0331557bb6",
    "u": "https://windows.tymyrddin.dev/docs/privacy/metadata-images",
    "t": "Edit exif metadata in images ",
    "c": "Edit exif metadata in images  Native  Click right then properties on the Image file Click on the Details In this tab, at the bottom left, click on “Delete properties and personal information” Select Create a copy with all possible properties removed or Remove the following properties from this file, and select the properties you want to remove. In Origin, you can edit the Author, Data taken, Date acquired, and Copyright. For more on metadata on Windows: The Details tab divides metadata properties in a number of sections, different for each file type. The image file is divided in six sections. The first section is called Description, and you can click the value field for Title, Subject, Tabs, Comments, and edit its information. Image shows relevant information about the image, all of which is automatically added and cannot be modified. The Camera section includes the details of the camera that was used to take the picture. Some of these fields can be modified. The Advanced photo section shows fields useful for photographers. Only some fields can be edited. File shows file name and type, location path, date created and modified, owner, and computer name where the file resides. These fields can not be edited. Using IrfanView  This may become complicated if needing to remove EXIF data on multiple images from a complete folder. IrfanView is a free image viewer software and photos that also gives the possibility to remove all data from an image or photo file. When saving an image, an option “Keep Original EXIF data” is present. Unchecking the option removes all EXIF data from the image file. Can be done in bulk. From the File -> Batch Conversion / rename menu, data on several image files can be deleted in one click.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "bb059a0b1fdc6ee35520851c51c66a57",
    "u": "https://windows.tymyrddin.dev/docs/services/restrict-access",
    "t": "Restricting access to applications ",
    "c": "Restricting access to applications  Examples  Program Blocker  There are many third-party programs on the Internet that you can use to restrict applications. They will simply lock the applications and password-protect them. Try AskAdmin or Program Blocker Restrict application access to email application  Go to Settings -> Privacy Click on Email from the left menu Toggle off the app access to emails. This will ensure that applications have no access to your emails, unless … Under the “Choose app that can access and send email” section, you can allow access to any specific applications that need email accessed. Any application to users using Group Policy Editor  This method is only possible if you have Windows 10 Pro or Enterprise: In the search box, type gpedit.msc , and select OK. Click on User Configuration on the left sidebar. Go to Administrative Templates folder. Go to the System folder. Locate the Don’t run specified Windows applications file on the right pane. Double-click on it. This will open a new window. On the left side of the window, check the Enabled circle. Under Options, go to Show. Type in the name of the app you want to restrict access to. Don’t forget to add the .exe extension after the name of the app. Apply. OK.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0516c474dd45bdbbb39c38c20d8284cf",
    "u": "https://windows.tymyrddin.dev/docs/malware/clean-registry",
    "t": "Catch and remove malicious registry entries ",
    "c": "Catch and remove malicious registry entries  Automagically  Restoro Iolo System Mechanic Manually  Windows Registry is one of the most important built-in tools on your Windows computer. Registered malware is not uncommon. Check the Windows Registry for malware because any operation on your PC can make a footprint in it. And you can remove malware from the Windows Registry. Create a system restore point Run regedit to open the Registry Editor Go to HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion Scroll down and find the folders which start with Run Click each folder to open the program list Be careful. Not all are malicious. Check for: Misspelled names Unfamiliar programs Search with DuckDuckGo to find confirmation either way If it turns out malicious, right-click on that entry and select Delete to remove it from Windows Registry. Also look in: HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\explorer\\User Shell Folders HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\explorer\\Shell Folders Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "501d65ca5ae4bbc80c9cff53c0777368",
    "u": "https://windows.tymyrddin.dev/docs/guards/soup",
    "t": "Alphabet soup ",
    "c": "Alphabet soup  Firewall  A firewall implements rules that prevent network traffic based on protocol, source/destination address, and/or source/destination port. Firewalls can implement access control lists and prevent the use of insecure protocols, such as blocking all traffic on TCP port 23 (Telnet’s default port). IDS  An IDS platform can analyse network traffic for patterns and recognize malicious attack patterns. It can create notifications, but it can not block the unwanted packets from entering the network. IDS can be deployed either at the host level or the network level. Host-based monitors (and protects) the specific host (for example a single PC) it is installed on. For example, a HIDS will look at log and config files for any unexpected rewrites. Network-based focuses on protecting an entire network. Usually, dedicated hardware appliances run such software. For example, a NIDS will look at the checksums in captured packets and message authentication integrity of systems such as SHA1. The fact that a NIDS is usually installed on a stand-alone piece of equipment means that it doesn’t drag down the processors of servers or PC’s. The activity of HIDS is not as aggressive as that of NIDS and can be implemented by a lightweight daemon on the computer which does not burn up too much CPU. Neither system generates extra network traffic. In addition to the two main types of IDS, there are also two main subsets of these IDS types: Signature-based Intrusion Detection System (SBIDS). An SBNIDS for example, tracks all the packets passing over the network and then compares them to a database containing attributes or signatures of familiar malicious threats. Anomaly-based Intrusion Detection System (ABIDS). An ABNIDS for example, tracks the traffic of a network and then compares it to an established measure (which could be machine learning based) and this allows the system to find what is normal for the network in terms of Ports, Protocols, Bandwidth, and other devices, thereby quickly alerting administrators about any unusual or potentially malicious activity in the network. IPS  IPS combines the analysis functionality of an IDS with the ability to intervene and prevent the delivery of malicious packets. IPS interact with firewalls and software applications by adjusting settings. Incorrectly calibrated IPSs can cause havoc and bring your legitimate network activity to a halt.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "67a3a3594c80d910bec5514ce8c2a4b4",
    "u": "https://windows.tymyrddin.dev/docs/services/ssh",
    "t": "Use SSH tunnels ",
    "c": "Use SSH tunnels  Secure Shell (SSH) can be used to securely acquire and use a remote terminal session and has other uses as well. You can use SSH to tunnel traffic, transfer files, mount remote file systems, and more. SSH also uses strong encryption, and you can set your SSH client to act as a Socks proxy. Once you have, you can configure applications on your computer – such as your web browser – to use the Socks proxy. The traffic enters the Socks proxy running on your local system and the SSH client forwards it through the SSH connection – this is known as SSH tunneling. This works similar to browsing the web over a Virtual Private Network (VPN) . From a web server perspective, traffic appears to be coming from the SSH server. The traffic between source and the SSH server is encrypted, so you can browse over an encrypted connection as you could with a VPN. You must configure each application to use the SSH tunnel’s proxy. Port forwarding or port mapping is a name given to the combined technique of: Translating the address and/or port number of a packet to a new destination. Possibly accepting such packet(s) in a packet filter (firewall). Forwarding the packet according to the routing table. SSH tunnels can be created in several ways using different kinds of port forwarding mechanisms. And you can protect SSH access with MFA . Tunnelling with local port forwarding  Imagine wikileaks being blocked using a proxy filter in a university network somewhere. An SSH tunnel can be used to bypass this restriction. Let’s name the machine in the university network socially-correct and a home machine home . The home machine has a public IP and is running an SSH server. The student in case has ssh user access on home and socially-correct has access to host:hostport (is not blocked). > ssh - L localport : host : hostport user @home - N where: -L : port forwarding parameters localport : local port (choose a port that is not in use by other service) host : server that has the port (hostport) that you want to forward hostport : remote port -N : do not execute a remote command (you will not have the shell). user : user that has ssh access to the ssh server home : the machine/server running the ssh server that will be used for forwarding/tunneling For example, to create the SSH tunnel execute following from the socially-correct machine: > ssh - L 9001 : wikileaks . org : 80 user @home Open a browser and go to http://localhost:9001 to see if the tunnel is working. The SSH client at socially-correct will connect to the SSH server running at home (usually running at port 22) binding port 9001 of socially-correct to listen for local requests thus creating an SSH tunnel between home and socially-correct. At the home end it will create a connection to wikileaks.org at port 80. So socially-correct doesn’t need to know how to connect to wikileaks.org. Only home needs to worry about that. The channel between socially-correct and home will be encrypted while the connection between home and wikileaks.org will be unencrypted. The home-to-wikileaks.org connection is only made when the browser makes the request, not at tunnel setup time. The SSH man pages say: -L port:host:hostport specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side. This works by allocating a socket to listen to port on the local side, and whenever a connection is made to this port, the connection is forwarded over the secure channel, and a connection is made to host port hostport from the remote machine. Port forwardings can also be specified in the configuration file. Only root can forward privileged ports. IPv6 addresses can be specified with an alternative syntax: port/host/hostport -N Do not execute a remote command. This is useful for just forwarding ports (protocol version 2 only). Local port forwarding can also be used to set up a VNC session between socially-correct and a home server. From socially-correct : > ssh - L 5900 : localhost : 5900 user @home The localhost is relative to the gateway (home in this case), not the machine from where the tunnel is initiated. So this will make a connection to port 5900 of the home computer where the VNC client would be listening. Reverse tunnelling with remote port forwarding  To be able to SSH from the Internet into a machine behind a firewall, you need the machine in question to open an SSH connection to the outside world and include a -R tunnel whose “entry” point is the “remote” side of his connection. What if we wish to connect to an internal university website from home with a set-up like above in tunnelling with local port forwarding? The university firewall is blocking all incoming traffic. We can connect from home to the university internal network so that we can browse the internal site. We can initiate the tunnel from the socially-correct computer behind the firewall. This is possible since only incoming traffic is blocked and outgoing traffic is allowed. The client will now be at the home computer and instead of using the -L option, the -R option, which specifies a reverse tunnel is to be created, is used. From socially-correct : > ssh - R 9001 : internalsite . org : 80 user @home The SSH client at socially-correct will connect to the SSH server running at home creating an SSH channel. The server will bind port 9001 on the home machine to listen for incoming requests that are then routed through the created SSH channel between home and socially-correct . Now it’s possible to browse the internal site by visiting http://localhost:9001 in a web browser on the home machine. The socially-correct machine for work at the university will then create a connection to internalsite.org and relay back the response to home via the created SSH channel. Even though the traffic is encrypted, the name resolution may not be encrypted => DNS leakage. Programs like firefox allow you to ensure that there is no such DNS leakage . For example, in Firefox, browse to about:config and make sure the setting for network.proxy.socks_remote_dns is set to true. Dynamic port forwarding  Dynamic port forwarding allows for configuring one local port for tunnelling data to all remote destinations. This requires Socket Secure SOCKS. At the client side of the tunnel a Socks proxy would be created and the application uses the Socks protocol to specify where the traffic should be sent when it leaves the other end of the ssh tunnel. In a set-up like used in local port forwarding and reverse port forwarding, from the socially-correct machine at university: > ssh - D 9001 user @home SSH will create a Socks proxy listening in for connections at local port 9001 and when receiving a request routes the traffic via the SSH channel created between socially-correct and home. Configure the browser to point to the Socks proxy at port 9001 at localhost .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "69f8214c7ea66b98b10489a415babd2f",
    "u": "https://windows.tymyrddin.dev/docs/services/messaging",
    "t": "Use a secure messaging service ",
    "c": "Use a secure messaging service  A secure messaging service is a critical tool for private and secure communications. In most countries, it is safe to assume that telecoms are recording all SMS message traffic. Signal is not as strong on privacy as it is on security. It collects some metadata, and relies on central servers to manage message flow and hold the metadata it does collect. Session is a fork of Signal. No geolocation data, device data, or metadata is collected. The Session network is decentralized, with no single point of failure, and no main server for bad guys to hack. Session moves messages using an onion routing system. And make it the default SMS messenger.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "45003c4ecb38760c6fcb676d6a468648",
    "u": "https://windows.tymyrddin.dev/docs/services/browsers",
    "t": "Secure browsers that protect your privacy ",
    "c": "Secure browsers that protect your privacy  DuckDuckGo Desktop browser for Windows focuses on privacy that is not based on Chromium (as most would expect). Instead it relies on OS-provided rendering engines to build the browser (mostly WebKit). This makes it possible to remove all the unnecessary stuff usually available with popular web browsers. LibreWolf is a fork of Firefox focused on privacy, security, and freedom, only available for desktop operating systems. If the browser you choose is less secure and privacy-friendly, lock down the browser and the software it can invoke.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4c3039cfd865ecb09ac81778a9f7b041",
    "u": "https://windows.tymyrddin.dev/docs/privacy/devices",
    "t": "Turning devices on and off ",
    "c": "Turning devices on and off  Adversaries can try to gain access with trojans - invisibly-installed malware that gives the adversary administrative control over targeted computers, including, the ability to remotely control devices. Depending on your location and context, you may want to turn devices off and later on again. Examples  Turning cam off/on  There a lot of scenarios where hackers have gained access to the camera even without the active light illuminated. It is better to have computer camera switched off. Here are the steps to disable camera access: Go to Settings -> Privacy From the left menu click on Camera and toggle the button to turn off the camera access any applications To allow access to any specific applications that need camera access, under the “Choose app that can access and send email” select the application and toggle for camera access Other devices can also be turned on and off in a similar way.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9b25d4aba1bbfe7b3027e78196094c73",
    "u": "https://windows.tymyrddin.dev/docs/data/file-encryption",
    "t": "File encryption ",
    "c": "File encryption  Filesystem level encryption, often called file/folder encryption or stacked level encryption, is a form of disk encryption where individual files or directories are encrypted by the file system itself. This is in contrast to full disk or block level device encryption where an entire partition or disk, in which the file system resides, is encrypted. EFS  Windows built-in Encrypting File System (EFS) is a tool that can encrypt all Windows files and folders on NTFS drives. It allows you to encrypt a specific folder rather than the whole hard drive partition . And if you move a file to an EFS-encrypted folder, the file will automatically be encrypted. To enable the EFS tool: Open an elevated Command Prompt. Type (and enter): fsutil behavior set disableencryption 0 To disable this tool, type (and enter): fsutil behavior set disableencryption 1 To encrypt files and folders: Right-click on a file or folder and click Properties. Click the Advanced button in the next window. Check the Encrypt contents to secure data box and click OK. VeraCrypt  VeraCrypt is a fork of the discontinued TrueCrypt project. It is a free and open-source utility for on-the-fly encryption (OTFE). The software can create a virtual encrypted disk that works just like a regular disk but within a file. It can also encrypt a partition or (in Windows) the entire storage device with pre-boot authentication.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1b1730c44779494cbed14eb1ad7dd7b7",
    "u": "https://windows.tymyrddin.dev/docs/services/dns-servers",
    "t": "Use alternative DNS servers ",
    "c": "Use alternative DNS servers  When you don’t set up DNS servers on your computer or router, your DNS queries will run on your ISP’s DNS servers. Without VPN (with killswitch and/or killswitch using routes ), DNS requests are most likely sent unencrypted, which can lead to common DNS attacks. Domain hijacking (Redirection) DNS flood attack (a type of DDoS attack) DNS spoofing or DNS cache poisoning DNS hijacking (malware infection on a local device to hijack DNS to redirect traffic to a phishing site) And any man in the middle of your traffic can see your online behaviour and the websites you visit. Your ISP’s DNS servers see every search you make in your browser. Using your ISP’s DNS servers as default DNS servers doesn’t do anything for security or privacy. Alternative DNS servers  OpenNIC is a group of volunteers who run an alternate DNS network offering free DNS servers. Depending on your location, you are offered different servers. OpenNIC offers DNS neutrality (it does not censor content), and you get the right to choose how much data OpenNIC logs. OpenDNS is a cloud-based service offering three solutions in their Home package, two of which are free. To connect with your nearest DNS server, and for faster page load times, it uses anycast routing. DNSWatch also offers DNS neutrality and does not log any DNS queries or record history. Quad9 DNS blocks malicious and suspicious domains using security intelligence from a group of companies to improve security. They do keep logs on some activity. Use Wireshark to check for leaks  To check if you have DNS leaks, fire up Wireshark : Start capturing on eth0 and connect to the VPN. After capturing either a fixed number of packets, or an amount of data or for a specific time period, go to //Statistics -> Endpoints// There should only be one public IP address, namely that of the VPN server that you’re connected to. The ‘’10.0.2.15’’ in this image is a local address.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "169506f71b9a74b01ed465b56315ef73",
    "u": "https://windows.tymyrddin.dev/docs/data/restore-point",
    "t": "Create a restore point ",
    "c": "Create a restore point  In case the Windows machine is compromised, going back to a previous restore point may fix the issue. Type Create a restore point in the search box System Properties -> C drive and click the Create button Add a description to the system restore point and click Create System Restore Point Creating Process The system restore point process will begin (wait, wait, wait for it) The restore point was created successfully",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6bc31f120d9493e4f5068c1cf9e1c573",
    "u": "https://windows.tymyrddin.dev/docs/privacy/hexeditors",
    "t": "Remove metadata with hex editors ",
    "c": "Remove metadata with hex editors  The hexadecimal notation is almost universally used in computing - and not without a reason. There are sixteen hex digits - 0 to 9, and A to F (which correspond to decimal values 10 to 15), and each hex digit represents exactly four bits. Exactly two hex digits represent a byte, which can have a value from 00 to FF. A hex byte is the only kind of object a computer handles, and hex bytes are used to represent anything. For example, a hex byte 50 may represent the capital letter P, the processor command push eax, the decimal number 80, a colour component with 50% brightness, or whatever else lives in the digital world. And that means we have editors, hex editors, that can be used to view and change files, all files, on a very low level. As in, they can be used to remove metadata from any and all files. Usage in general  backup the file before using a hex editor on it. switch to ASCII mode, turn off “read only” mode, and start searching through the file. For example, when scrubbing pdf’s from creation and modification information look through the entire file for “created” (metadata appears in the PDF file more than once). If and when you find metadata, change to fake data or delete. Then repeat your search again for the terms “create”, “creation”, “modified”, and “modify”, and similarly either replace or delete the dates, once again being sure to repeat each search so that any potential multiple instances of the field can be located and modified or blanked out. Native  On Windows, open file Properties in Windows Explorer for each file. In the Details tab, click “Remove Properties and Personal information”. Choose to “Remove the following properties from this file”, select which metadata to remove, and press OK. There may still be other data though. Windows do not have any pre-installed hex editor in their operating systems. Hex files can be stored in the text format or binary format. If you have a text-based hex file, then it can be opened with text editors like notepad. Using software  If you have a binary hex file, then the only option to open them is by using the third-party hex editing programs. HxD Freeware Hex Editor and Disk Editor Free Hex Editor Neo",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ca9080eac4745488e392794eef1378bc",
    "u": "https://windows.tymyrddin.dev/docs/services/readme",
    "t": "Introduction ",
    "c": "Introduction  Take control over services, applications, and their permissions. Start, Stop, Restart, Enable, and Disable Services Unwanted application suggestions Restrict which apps can run (without your permission) Restrict access to apps Block applications Secure browsers that protect your privacy Use a secure messaging service Use a secure email service Use SSH tunnels Use a VPN service Make a VPN killswitch using routes Use a Tor proxy Change MAC address Renew IP lease Edit hosts file",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4ee996df3117043847d96cc4c1d642aa",
    "u": "https://windows.tymyrddin.dev/docs/authentication/standard-user",
    "t": "Use a standard user account ",
    "c": "Use a standard user account  Users with administrator privileges have complete control over the OS and their apps have unrestricted access to the computer. Even when keeping up with system and antivirus updates, following the best security practices, and being careful using the internet and checking email attachments, there is still a chance that malware could gain access to your device. Running as administrator, an exploit can more easily gain control of your system. It can install rootkits, keyloggers, and other suspect services without you knowing. A malicious program can also modify and delete files, and even prevent devices from booting. Consider setting up a separate standard user account with fewer privileges for day-to-day use. This can block some attacks and make others much harder. Create a new administrator account  Settings -> Accounts -> Family & other people. Under Other People, click the Add someone else to this PC option. Click the “I don’t have this person’s sign-in information” link. Click the “Add a user without a Microsoft account link”: Because the account will only be used for administrative tasks you do not need to create a new Windows 10 account using a Microsoft account. Type the username and password you want to use for the admin account. Next Select the newly created account, and click Change account type. In the “Account type” drop-down menu, select Administrator. OK. Change your user account type  An Administrator account is a member of the Administrators and Users groups, which means that to make the account a Standard User, you only need to remove your account from the Administrators group. Sign-in to the newly created admin account to change your user account type to Standard User using the Settings app. Type Computer Management in search box and click the result to open the console. Go to System Tools -> Local Users and Groups -> Users Double-click your user account — the one you want to switch to remove the privileges from. Click on Member Of tab. Select Administrators from the list. Click the Remove button. Apply and OK. Sign out and sign back in to apply the changes. You have turned your account into a standard user account with fewer privileges and apps will not be allowed to make system changes, making your system more secure against malware. When you need to perform a task that requires administrator rights, you can right-click the app and use the Run as Administrator option with the credentials of the administrator account you just created.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3ac32b60ccebed4794b277ebc2d4395f",
    "u": "https://windows.tymyrddin.dev/docs/authentication/login",
    "t": "More secure login ",
    "c": "More secure login  Switch to a local login account  Windows 10 Home will default to your Windows account, as this makes it easier to log in across all devices with one account. If, say, your mail credentials were compromised, then your machine would also be compromised. Switch your Windows 10 device to a local account Set password if not exists  When you purchase a new Windows computer or if you have reformatted the computer with a fresh copy of Windows, the system will allow the user to login automatically without having the need to provide a password. This can prove costly because it gives opportunity for anyone to access information from your computer. It is perhaps annoying to have to enter your password every boot, but it is a small price for making it harder for someone to get into your account and access your system: Settings -> Account From the left column select Sign-in options Under Password click on Add, provide the password you wish to have and click on Finish This will ensure that the computer is password protected. Add Secure Sign-In  Programs such as malware and viruses can gain access to your login information by imitating the sign-in screen. As a user, it is impossible to tell whether the sign-in screen is safe to use or not. Windows 10 Secure Sign-In is not the “one solution to solve all problems”, but it cuts the root of this particular problem by blocking programs from displaying a fake sign-in screen. Type netplwiz in the search box and press Enter. This will open the User Accounts panel. Select the user that you want to enable Secure Sign-In for. Go to the Advanced tab and select “Require users to press Ctrl + Alt + Delete”. Apply Now, every time you start your computer, Windows will require you to press the key combination before entering your login details.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f6f9a6fdf733e670f6b10ea0b0727c55",
    "u": "https://windows.tymyrddin.dev/docs/malware/clean-machine",
    "t": "Malware detection and removal ",
    "c": "Malware detection and removal  Automagically  If you are on a private machine, choose your own scanner. Be careful, have a look at AV Comparatives’ test results for Windows . In an organisation, likely you can leave this to the SOC or IT team . Manually  Disconnect from the internet. Switch to Safe Mode  Go to Updates & Security -> Recovery Choose “Restart now” in the Advanced startup section When your machine restarts, a blue screen with a few options will appear Troubleshoot -> Advanced options -> Startup settings -> Restart Another blue window appears, find the “Enable Safe Mode” option. Click number 4 on your keyboard. Check for and remove unwanted applications  Go to Control Panel -> Uninstall a program Possibly unwanted apllications (bloatware, and some can even be considered malware) Check with DuckDuckGo whether unknown applications are legitimate or not (mind the spelling) If the issues are recent, you can click on “Installed on” to find any newly installed programs that might be suspicious If they are not legitimate, or if you are suspicious, delete them and empty your Trash. Note that this does not help much with trojans , evil files made to look like legitimate apps. Delete temporary files  Open the RUN window Type “%temp%” and click “OK” Delete all files and folders that are in this destination Empty trash Connect back to the internet. Note that this does not remove malicious Registry entries which can make the malware persistent. Fail  If all else fails, go to a previous restore point or backup. If that fails too, the BIOS or restore points or backups may even be infected. It is possible for malware to persist across a re-format and re-install, if it is sufficiently ingenious and sophisticated: if for example, it can persist in the BIOS, in the firmware for peripherals (some hardware devices have firmware that can be updated, and thus could be updated with malicious firmware), or with a virus infecting data files on removable storage or on your backups. Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e1681aa7ae260d647c2e84605075a8d7",
    "u": "https://windows.tymyrddin.dev/docs/authentication/passwords",
    "t": "Make that more secure passwords ",
    "c": "Make that more secure passwords  Do not use a password you have used in the past. Try to change the password at least every 3-6 months. Create a password that is at least six characters long. Create a password with both digits and letters, uppercase, and lowercase. Do not create a password with a family name, name of your pet, hobby, sports teams, favourite TV show, etc. Do not create a password that is your phone number, house number, etc. Create a password that is not in a dictionary. Create passwords with spaces and/or magics (&*^%$#) in them (if allowed). Have a password manager create a password for you.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "535f538851f59b549c4b49976204cd7d",
    "u": "https://windows.tymyrddin.dev/docs/opsec/email-use",
    "t": "Use email securely ",
    "c": "Use email securely  Invented by Ray Tomlinson, email first entered limited use in the 1960s and by the mid-1970s had taken the form now recognized as email. It evolved, and so did its parasites: Email “spam”. A number of effective anti-spam techniques now largely mitigate the impact of spam by filtering or rejecting it for most users, but the volume sent is still very high, and increasingly consists not of advertisements, but malicious content or links. Phishing emails continue to be one of the most common initial attack vectors employed by attackers for malware delivery. Attacking the human element continues to be extremely effective. To infect a system, the attacker simply has to persuade a user to click on a link or open an attachment. Email spam and phishing methods typically use spoofing to mislead the recipient about the true message origin. Laws in many countries either allow or have loopholes in an existing law that allow the government to access stored emails without a warrant, and intelligence agencies can do and actually do so. Internet as well as intranet email may travel and be stored on networks and computers without the sender or the recipient having any control. During the transit time it is possible that third parties read or even modify the content. The ease and impersonality of email communications mean that the social norms that encourage civility do not exist and may be forgotten. Flaming, bullying, … To stay sane: Do not use public computers to access email with sensitive information. If you are not in a safe neighbourhood, use a VPN or Tor anonymity network to encrypt traffic from the user machine to a safer network. Use a privacy-focused email application (make sure not to use your own name or other personal information) GPG, PGP, SMEmail, can be used for end-to-end message encryption.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "250d9836fe98cacf97e1dd912077f363",
    "u": "https://pap.tymyrddin.dev/docs/mitre/c2",
    "t": "Application Layer Protocol: Mail Protocols ",
    "c": "Application Layer Protocol: Mail Protocols  MITRE ATT&CK T1071.003 reads: Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Analyse packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Network detection notes  Other protocols can also be used to hide in. Deep learning models can probably identify modified and incomplete C2 traffic packets and discover new variants of C2 traffic.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ccb9250e80dfc3c1e30ed4ab2d527939",
    "u": "https://pap.tymyrddin.dev/docs/independent/drive-by",
    "t": "Drive-by download ",
    "c": "Drive-by download  A drive-by download attack refers to the unintentional download of malicious code to your device that leaves you open to an attack. This can happen while browsing a legitimate website or through a malicious advertisement displayed on an otherwise safe site. This type of attack comes in authorised and unauthorised flavours. With the latter, for the device to become infected it is not necessary to click on anything, to download, or to open a malicious email attachment. It just happens magically. Drive-by downloads can install non-malicious potentially unwanted programs or applications (PUPs/PUAs in mobiles, which are clean, but may actually be madware at its worst) or malware-loaded attacks with intention to hijack a device, install spyware, or ruin data or disable the device (a targeted personal attack). Authorised downloads  Adversary creates an online message, ad, or a legitimate program download. You click the link, download the software, etc. You do not opt out of extra software, or are sent to a malware-infested site. Adversary and malware take control of your data. Unauthorised downloads  Adversary compromises a legitimate web page using a security flaw in website and adds a malicious component. You visit the page, and it finds your device’s security flaw. The flaw is exploited and malware is downloaded to your device. The adversary has control over your device. Prevention  Use your admin account for app installations. Admin privileges are necessary for drive by downloads to install without your consent. Use a second non-admin account for daily use. Keep browser and operating system up to date. New patches help seal gaps in defenses. Install immediately when released. The more code on the device, the more susceptible it is to infections. Prune often. Only keep what you trust and use often. Use a firewall and virus scanner on a PC and an internet security software solution on phones. Avoid websites that may contain malicious code. Sites that offer file-sharing or mature content are common points of infection. Carefully read and examine security popups on the web before clicking. Scammers use deceptive popup ads on desktop and mobile browsers that look like legitimate alerts. Watch for typos, odd grammar, and grainy images. Use an ad-blocker. Drive-by download attacks often use online ads to upload infections. Using an ad blocker can help reduce your exposure to this type of attack.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9541dc23a0b901630afebbb1ff900caf",
    "u": "https://pap.tymyrddin.dev/docs/mobile/tracking",
    "t": "Location tracking ",
    "c": "Location tracking  GPS-enabled devices can be small and easily hidden, and an abuser can hide a device in handbags, clothing, or car. The GPS in a phone can also be used to track a survivor (of abuse). The location information through the GPS in a phone is not automatically available to another person, but there are a variety of ways that an abuser could get that information. Tool Claims Platform AirTag Item trackers Android and Apple devices Tile Item trackers Android and Apple devices Cerberus Phone tracker Android The latest example of GPS-enabled devices is the AirTag, a small, puck-shaped tracker meant for locating misplaced or stolen items with the Find My app . AirTags use ultra-wideband technology and take advantage of Apple’s existing network of devices, which work as crowdsourced beacons to ping each other in order to determine your missing item’s location. Tracking an AirTag requires iOS 14.5 (iPhone or iPad). Precision Finding requires an iPhone 11 or 12. AirTags are being used by stalkers for tracking survivors, that goes public, Apple makes a few promises, and Google rolls out a safety feature on Android to be alerted automatically if an unknown Bluetooth device is travelling with them — a sign that could point to the possibility that someone is stalking them using an Apple AirTag or other Bluetooth tracking device. Users will also be able to manually scan for trackers with their Android device and be guided through tips on what to do next if a tracking device is found. Resources  How to track someone on Google Maps without them knowing , Brinksley Hong, Updated: September 19, 2022 Secretly Find & Track Someone’s Location on Google Maps , Jason Thompson, June 27, 2023 Android will now warn about unknown Bluetooth trackers, like AirTag, travelling with you , TechCrunch, July 27, 2023",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6004a462ead4f08aa0e526c2c483ea36",
    "u": "https://pap.tymyrddin.dev/docs/mobile/malware",
    "t": "Mobile malware ",
    "c": "Mobile malware  The most common types of mobile malware threats: “Advertising Click Fraud” is a type of malware that allows an attacker to hijack a device to generate income through fake ad clicks. Cryptomining malware enables attackers to covertly execute calculations on a another person’s device – allowing them to generate cryptocurrency. Cryptomining is often conducted through code hidden in squatted apps . Spyware and stalkerware offer access to data from infected victim devices and are often used for intelligence collection. These can typically access information such as installed applications, call history, address books, web browsing history, and SMS data. Some may also be used to send SMS messages, enable device cameras, and log GPS data. Bank trojans are often disguised as legitimate applications and seek to compromise users who conduct their banking business — including money transfers and bill payments — from their mobile devices. This type of trojan aims to steal financial login and password details. Ransomware is a type of malware used to lock out a user from their device and demand a “ransom” payment — usually in untraceable Bitcoin. Once the victim pays the ransom, access codes are provided to allow them to unlock their mobile device. Or not. Lists  Malware for iOS (iPhone wiki) Android malware apps master list (Phone arena) Indicators  Your battery is draining faster than normal Your phone is behaving abnormally Phone starts lagging You find strange apps being installed on your device, automatically Your device is getting heated up too quickly Your device may show you some kind of warning message Increase in data usage There may be calls you did not make or text messages you did not send Apps crash regularly You suddenly get pop-ups and ads banners in the notification area and the keyboard area Unexpected charges for SMS to premium numbers or purchases with your credit card you did not send or do Detection and mitigation (general)  Android iOS Prevention (general)  Keep applications updated so that you are running the version with the latest security patches and updates. Application developers will often release a new update or version if their software is compromised in any way. Install mobile security software (works like antivirus software on a workstation). The majority of mobile phones do not include firewall protection. Firewalls not only protect your online privacy when browsing, but can be used to only allow authorised apps to access the internet through a set of firewall rules. Many mobile devices are compromised when they are lost and stolen. Use a passcode to lock the screen. Only download apps from stores that vet applications: Apple App Store and Google Play have been vetted to ensure they are safe. This is not a guarantee that no app will slip through the vetting process. For example, attackers managed to distribute a fake “WhatsApp” app to millions of mobile users via the official Google Play Store by simply adding a Unicode-encoded space at the end of WhatsApp’s ID, and a fake app named Teligram sneaked into the Google Play, pretending to be a new version of the real Telegram app, but some vetting is better than the wild west without sherrif, and the vetting process is continuously being improved also.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c107f84f9105926685fd5054c7860338",
    "u": "https://pap.tymyrddin.dev/docs/workstation/ransomware",
    "t": "Ransomware ",
    "c": "Ransomware  Prevention  Keep online backups of your data, and offline encrypted backups of critical data. Do not click on links in spam messages or on unknown websites. Do not give personal information. Do not open suspicious email attachments. Never use unknown USB sticks. Use VPN services on public Wi-Fi networks. Detection  The antivirus scanner or security app sounds an alarm (unless it was not installed or has been bypassed). File extensions change to an unfamiliar combination of letters. File names change. Increased CPU and disk activity. Suspicious network communication (with the gangsters). Encrypted files. A window containing a ransom demand. A locker ransomware virus locks the entire screen, while crypto ransomware encrypts individual files. Response  If you detect it before the ransom note is delivered, you may be able to stop it from spreading to other devices and files, and to remove it. Files already encrypted remain encrypted (of course you have a backup). Disconnect from wireless and wired devices, external hard drives, storage media, and cloud accounts (prevent it from spreading). Scan with AV scanner of security app (identify threat). In the case of screen-locking ransomware, you can probably not get to the security software. Start the device in Safe Mode , and you might get to it. Check the No More Ransom Project website for solutions. Restore encrypted data from backup.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "fe2c741e16a0922c423625ebaf0355a8",
    "u": "https://pap.tymyrddin.dev/docs/mitre/phishing",
    "t": "Phishing for information ",
    "c": "Phishing for information  Phishing , Smishing , and Vishing are classified as Technique ID 1598 (T1598) , and it contains three sub-techniques: Spearphishing Service, Spearphishing Attachment and Spearphishing Link. Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. For followed links, check for references to uncategorized or known-bad sites. URL inspection within email and messages (including expanding shortened links) can also help detect links leading to known malicious sites. Monitor social media traffic for suspicious activity, including messages requesting information as well as abnormal file or data transfers (especially those involving unknown, or otherwise suspicious accounts). Monitor and analyse traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (like extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (monitor anomalies in use of files that do not normally initiate connections for respective protocol(s)). Monitor network data for uncommon data flows. Processes using the network that do not normally have network communication or have never been seen before are suspicious. The NIST phishing incident response playbook contains the 7 steps of the NIST incident response process for investigating phishing. Network detection resources  Wireshark: SMTP SMTP codes Wireshark: IMF",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6186c08a76889a9d5f17fea0a17a8af6",
    "u": "https://pap.tymyrddin.dev/docs/mitre/iocs",
    "t": "Signs of a compromise @home ",
    "c": "Signs of a compromise @home  These patterns are based on business contexts, and most are not useful for home use, unless you run servers locally. The network patterns boldfaced are useful in a home context in this first strategy . If outbound traffic patterns are suspiciously unusual, you can keep a closer eye on it to check if something nefarious is happening. Anomalies in the behaviour (activity) of privileged user accounts. Login attempts from countries with which you have no exchanges otherwise. An existing user tries to log in many times. Failed logins for user accounts that do not exist. A wave in Database Read Volume (exfiltration). A sudden increase in Hypertext Markup Language (HTML) response size (exfiltration). The same file is requested many times (in different ways). Unusual ports are being used. Changes to the Windows registry or system files (persistence). Anomalous Domain Name System (DNS) requests from a specific host. Note that Indicators of compromise (IOCs) refer to data that indicates a system may have been infiltrated by a cyber threat. Indicators of attack are different from IOCs in that they focus on identifying the activity associated with the attack while the attack is happening, whereas IOCs focus on examining what happened after an attack has occurred.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "620ca01245ac96076b1589bad40d1138",
    "u": "https://pap.tymyrddin.dev/docs/diy/strategy",
    "t": "A first strategy ",
    "c": "A first strategy   a decade ago it was: Keep systems updated, patch, use strong passwords, install anti-malware, firewalls and proxies, etc. Now it is: Keep systems updated, patch more, use stronger passwords, use a password vault, MFA, biometric authentication, Next-Gen firewalls, Next-Gen anti-malware, and oh, there’s new proxies too, and more, and more overload, tool integrations, maintenance of tools, etc. And usually expensive! Defence strategies  Active defence employs limited offensive action and counterattacks with a defensive posture to deny a contested area or position to the enemy. It requires proactive, anticipatory, and reactionary actions against adversaries. The enemies are already inside the gates … Passive defence is all about measures taken to reduce the probability of and to minimize the effects of damage caused by hostile action without the intention of taking the initiative. It typically uses traditional static defenses and then hopes for the best … Prevent|Detect|Respond: Prevention is ideal ofcourse, and it requires detection, and detection without response is of little value … Keep calm and …  Prevent|Detect|Respond on mobiles and workstations . For home and small organisational networks, Raspberry Pi can be bought (not expensive), the PiRogue suite installed on it, and then used to catch indicators of compromise (IoAs and IoCs) on all our devices, including mobiles. We can do some mobile app vetting and malware analysis, and share results on Pithus. If we run a server, we can harden it And we can harden our webservers . If we run a mailserver, we can make it smarter . With all of that covered, we can add some active defence and set up a honeyclient and/or honeyports . … Design and organise security operations training. Not for users, not for employees, not for activists, for people! Make it fun, with posters, simulations and hands-on hardening exercises for all likely endpoints.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8317c192a4bd443f305a79a978c07902",
    "u": "https://webserver.tymyrddin.dev/",
    "t": "Hardening webserver ",
    "c": "Hardening webserver  Unlike other devices sitting behind layers of defenses and firewalls, web servers sit at the edge of the known network and are designed to share information with the outside, the unknown. These are some notes on hardening the two most used web servers, Nginx and Apache. Building a sound foundation Introduction Keep only required modules Disable unwanted services Restrict file and directory access Disable unwanted HTTP methods Create non-root users Install and use ModSecurity Install and use ModEvasive Set up and configure logging Resolving TLS issues Introduction (Re)configure TLS Manually specify cipher suite Configure forward secrecy Preventing information disclosure Introduction Hide web server information Disable directory listing Setting HTTP security headers Introduction Check your HTTP security headers HTTP Strict Transport Security (HSTS) X-Frame-Options Content Security Policy (CSP) Permissions-Policy Referrer-Policy X-Content-Type-Options X-XSS-Protection Set-Cookie Content-Type Using CORS Introduction CORS best practices CORS on Nginx CORS on Apache",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "66c5676f8651c63767a38eb6f22ae285",
    "u": "https://webserver.tymyrddin.dev/docs/disclosure/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  To protect web applications against the most obvious information disclosure issues, make sure that the web server does not send out response headers or background information that reveal technical details about the backend technology type, version or setup. Why?  Make it harder for attackers to fingerprint your tech stack . How?  Hide web server information Disable directory listing",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3d60b4ed1dbbce2247274f26d2955f8c",
    "u": "https://webserver.tymyrddin.dev/docs/http/cookie",
    "t": "Set-Cookie ",
    "c": "Set-Cookie  The Set-Cookie HTTP response header is used to send a cookie from the server to the user agent, so the user agent can send it back to the server later. To send multiple cookies, multiple Set-Cookie headers should be sent in the same response. For example (the Domain attribute has been removed intentionally): Set-Cookie: name=value; Secure; HttpOnly; SameSite=Strict Resources  MDN Web docs: Using HTTP cookies",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "67155429117a82bae2abb96249c61c4f",
    "u": "https://webserver.tymyrddin.dev/docs/encryption/cipher",
    "t": "Manually specify cipher suite ",
    "c": "Manually specify cipher suite  To secure the transfer of data, TLS/SSL uses one or more cipher suites. A cipher suite is a combination of authentication, encryption, and message authentication code (MAC) algorithms. They are used during the negotiation of security settings for a TLS/SSL connection and the transfer of data. Depending on context, the need to support legacy browsers and regulatory requirements, you can choose different cipher suite configurations (modern, intermediate, or old). TLS 1.3 does not require manually specifying cipher suites.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "131ca0eae40688d10c6da264bf16582a",
    "u": "https://webserver.tymyrddin.dev/docs/http/content",
    "t": "Content-Type ",
    "c": "Content-Type  The Content-Type representation header is used to indicate the original media type of the resource (before any content encoding is applied for sending). For example: Content-Type: text/html; charset=UTF-8 The charset attribute is necessary to prevent XSS in HTML pages The text/html can be any of the possible MIME types Resources  MDN Web docs: Content-Type",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7158354ad25fcb1e28bb10f5f78aa23b",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/file-system",
    "t": "Restrict file and directory access ",
    "c": "Restrict file and directory access  Apache  To restrict a directory from access by users, deny all users using the Directory directive: < Directory \"/var/www/directory\" > Order Deny , Allow Deny from all Allow from 192.168.1.0 / 24 Allow from .core.com </ Directory > To restrict a file using the File directive: # The following lines prevent .htaccess and .htpasswd files from being # viewed by Web clients. # < Files ~ \"^\\.ht\" > Order allow , deny Deny from all Satisfy all </ Files > To limit the scope of enclosed directives by URL use the Location directive: < Location / admin > Order Deny , Allow Deny from all Allow from 192.168.1.0 / 24 Allow from .core.com </ Location > Nginx  The Apache .htaccess is comparable to the server{} block in Nginx, but Nginx has a much more lightweight approach to parsing configuration, and it will not scan site directories for additional configurations. To restrict access to multiple directories in one location entry will give a 403 because of the deny all : ... location ~ /(dir1|dir2|dir3) { deny all; return 404; } ... To allow public access to a /data/public directory and execution of php scripts in it while denying public access to its subdirectories, put the php location in another file called php.conf and include that file in the server block and in the /data/public/ block. The config: server { location ^~ /data/public/ { allow all; try_files $uri $uri/ /index.php?args; # include to avoid writing it twice.. include php.conf } location ^~ /data/ { deny all; } # ..... # Some other config blocks # ..... # This line instead of the php config block to avoid writing the php part twice include php.conf } And the php.conf file: location ~ \\.php$ { fastcgi_split_path_info ^(.+\\.php)(/.+)$; fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock; fastcgi_index index.php; include fastcgi_params; }",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cf2ff06306fcb60a1eeaa2e8e836b8af",
    "u": "https://webserver.tymyrddin.dev/docs/cors/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  You can send GET and POST requests cross domain even if a target does not use CORS, but there are restrictions. Most importantly, the response can not be read. This restriction is built into browsers as part of the Single Origin Policy (SOP) and it protects against data leaking across domains. It also stops publishing an API that can be read from other domains. Why?  CORS allows for loosening that restriction, allowing the domain that is hosting the API to announce to browsers that it allows cross domain calls from either all or some defined domains. If misconfigured, these controlled and intended SOP bypasses can have adverse effects. Such exploits can cause private information leaks and lead to more vulnerabilities, such as authentication bypass, account takeover, and large data breaches. Proper configuration of CORS is therefor essential. How?  CORS best practices CORS on Nginx CORS on Apache",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e5d0a6bd29e4d1bd113858f684568c6d",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/logging",
    "t": "Set up and configure logging ",
    "c": "Set up and configure logging  Logging provides detailed information about client requests made on the web server, and will prove useful when investigating the cause of particular issues. Nginx  The nginx access and error logs are enabled by default and are located in logs/error.log and logs/access.log respectively. A crit severity level will cause nginx to log critical issues and all issues that have a higher severity level than crit . To set the severity level to crit , use the error_log directive : error_log logs/error.log crit; The level of logging can be, in order of increasing severity, debug , info , notice , warn , error , crit , alert , or emerg . Monitoring and managing nginx log files makes it easier to understand requests made to the web server and notice errors. This will aid in discovering any attack attempts and identifying what can be done to optimise server performance. Log management tools, such as logrotate, can be used to rotate and compress old logs and free up disk space. The ngx_http_stub_status_module module provides access to basic status information. Apache  To enable logging on Apache, the mod_log_config module needs to be included from the Apache httpd.conf file. This module provides the TransferLog , LogFormat , and CustomLog directives which are respectively used to create a log file, specify a custom format, and creating and formatting a log file, all in one go. For example, to log the referrer and browser of each request along with the default logging parameters and use the CustomLog directive to instruct Apache to use this logging format: LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" detailed CustomLog logs/access.log detailed",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1ebfeb4352a75168686a6a30a88ed42e",
    "u": "https://webserver.tymyrddin.dev/docs/http/hsts",
    "t": "HTTP Strict Transport Security (HSTS) ",
    "c": "HTTP Strict Transport Security (HSTS)  HTTP Strict Transport Security (HSTS) is a method used by websites to declare that they should only be accessed using a secure connection (HTTPS). If a website declares an HSTS policy, the browser refuses all HTTP connections and prevents users from accepting insecure SSL certificates. Nginx  To add an HSTS header to a Nginx server, add the Strict-Transport-Security directive to the server section: add_header Strict-Transport-Security \"max-age=31536000; includeSubdomains; preload\"; Example of the Nginx config file with the added HTTP Strict Transport Security (HSTS) header: upstream example { server localhost:8080; } server { listen 80; server_name example.test; add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload'; location / { proxy_pass http://example; } } Apache  Header set Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" Resources  MDN Web docs: Strict-Transport-Security",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a382c9b9e94658e46d90875f801bfc14",
    "u": "https://webserver.tymyrddin.dev/docs/http/permissions",
    "t": "Permissions-Policy ",
    "c": "Permissions-Policy  The HTTP Permissions-Policy header provides a mechanism to allow and deny the use of browser features in a document or within any frame elements in the document. It allows a site to control which APIs or features can be used in the browser. Apache  Header always set Permissions-Policy \"geolocation=(),midi=(),sync-xhr=(),microphone=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()\" Nginx  add_header Permissions-Policy \"geolocation=(),midi=(),sync-xhr=(),microphone=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()\"; Resources  MDN Web docs: Permissions-Policy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5d3af8d6179c2873cecb4c7909a06374",
    "u": "https://webserver.tymyrddin.dev/docs/http/csp",
    "t": "Content Security Policy (CSP) ",
    "c": "Content Security Policy (CSP)  Content Security Policy (CSP) protects the web server against certain types of attacks, including Cross-site Scripting attacks (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement to distribution of malware. It defines the approved content sources that allow the browser to load them (or not). For example, to restrict most of the resource types to the same site and subdomains of example.com : Content-Security-Policy: default-src 'self' *.example.com; block-all-mixed-content; font-src 'self' https: data:; img-src 'self' data: blob:; object-src 'none'; script-src-attr 'none'; style-src 'self' https: 'unsafe-inline'; upgrade-insecure-requests; Inline script elements and inline script event handlers like onload will stop working with the above header. This is required to neutralize XSS attacks. You may see mentions of the X-Content-Security-Policy header, but that’s an older version. Add the Content-Security-Policy header to match your requirements. Nginx  add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always; Apache  Header always set Content-Security-Policy \"default-src 'self'; font-src *;img-src * data:; script-src *; style-src *;\" Resources  MDN Web docs: Content Security Policy (CSP)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3ac8e8ad7961f50dcc809c7facb39092",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/services",
    "t": "Disable unwanted services ",
    "c": "Disable unwanted services  The biggest threat to server security is the code that is written for the server to execute. Two sources of these problems are Common Gateway Interface (CGI) programs and Server Side Includes (SSI). Intruders exploit poor code by forcing buffer overflows or by passing shell commands through the program to the system. Server Side Includes are processed by the server before they are sent to the client. These files can include other files or execute code from script files. If user input is used to dynamically modify the SSI file, it is vulnerable to the same type of attacks as CGI scripts. Administrators have two options: Disable Server Side Includes (SSI) and CGI execution completely. Review all programs included in the cgi-bin directory, don’t allow ExecCGI in any other directory unless you’re positive no one can place a script there that have not been reviewed, write programs that do not allow free-form user input, use drop-down menus instead of keyboard input and never trust user input. Apache  Disallowing can be done by defining a Directory tag in the configuration file: < Directory \"/directory\" > Options - Includes - ExecCGI - FollowSymLinks </ Directory > The most secure way to operate a server is to disallow all SSI processing. This is the default unless All or Includes is specified by an Options directive. A compromise setting is to allow SSI, but to disallow the #include and #exec commands, which are the greatest security threat. Use IncludesNOEXEC on the Options directive for this setting. Nginx  Nginx and OpenBSD httpd authors decided not to include CGI interpretation but instead use FastCGI.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "90ee373e76409e19c3e10f1423e1b7f6",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/modules",
    "t": "Keep only required modules ",
    "c": "Keep only required modules  Minimise the risk of potential attacks by limiting allowed operations. The more services and functions a web server is running, the more opportunities an attacker will have to exploit the network. There are 65,535 available ports each server could possibly service. The server probably does not need all of them open and receptive. Disable and turn off any unnecessary modules, services, ports or functions. Nginx  Default, Nginx includes many modules, and it is not possible to choose modules at runtime. To disable modules, Nginx needs to be recompiled and the configure option during installation to disable modules that are not required. For example, to disable the autoindex module, which generates automatic directory listings: # ./configure --without-http_autoindex_module # make # make install Apache  Default installation may include many pre-installed and enabled modules that are not needed. The Apache module documentation lists and explains all the modules available for Apache. Research the enabled modules to make sure that they are really required for the functionality of the website. Unnecessary modules can be disabled by commenting out a specific LoadModule line.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b6bd82d2d1395250c3ee57b132fdc24d",
    "u": "https://webserver.tymyrddin.dev/docs/cors/requirements",
    "t": "CORS best practices ",
    "c": "CORS best practices  Origins specified in the Access-Control-Allow-Origin header should only be sites that are trusted. Dynamically reflecting origins from cross-origin requests without validation is exploitable and to be avoided. Also avoid using the header Access-Control-Allow-Origin: null . Cross-origin resource calls from internal documents and sandboxed requests can specify the null origin. CORS headers must be defined in respect of trusted origins for private and public servers. Avoid using wildcards in internal networks. Trusting network configuration alone to protect internal resources is not sufficient when internal browsers can access untrusted external domains. CORS defines browser behaviours and is not a replacement for server-side protection of sensitive data - an attacker can directly forge a request from any trusted origin. Web servers should apply protections for sensitive data, such as authentication and session management, in addition to properly configured CORS.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "31c2c9c575648cf13070c4ab0783c888",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/mod_evasive",
    "t": "Install and use ModEvasive ",
    "c": "Install and use ModEvasive  ModEvasive (mod_evasive) provides a web server with built-in evasive capabilities if it detects that a website may be under attack. ModEvasive is used to help to prevent DDOS attacks by closing connections if too many requests come into a website too quickly, if a certain child process request is attempting to create too many concurrent requests or if any host IP is trying to access the web server even if blacklisted.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a2e1f191304d01a8d091b86d31745249",
    "u": "https://webserver.tymyrddin.dev/docs/encryption/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Do not use old versions of the TLS protocol (TLSv1 TLSv1.1) on web servers, because they open the door to SSL attacks . Why?  All the TLS versions older than 1.2 are having lots of known vulnerabilities, which is why the latest browsers have removed support for these vulnerable protocols. How?  (Re)configure TLS Manually specify cipher suite Configure forward secrecy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9a73d1c1cf7a3fccd73d35af436600f7",
    "u": "https://webserver.tymyrddin.dev/docs/http/xframe",
    "t": "X-Frame-Options ",
    "c": "X-Frame-Options  The X-Frame-Options HTTP response header defends an application from clickjacking attacks . It can be used to indicate whethera browser is allowed to render a page in a frame , iframe , embed or object . For example, to disallow displaying of a page in a frame: X-Frame-Options: DENY This header can be configured in three ways: DENY – disables the iframe features completely. SAMEORIGIN – allows iframe to be used by anyone from the same origin. ALLOW-FROM – allows iframes from specific URLs Nginx  Add the following parameter to the nginx configuration file in the server section: add_header X-Frame-Options \"SAMEORIGIN\"; Apache  Header always set X-Frame-Options \"SAMEORIGIN\" Resources  MDN Web docs: X-Frame-Options",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4222bae609e436e97f87563fff45bfe3",
    "u": "https://webserver.tymyrddin.dev/docs/encryption/forward-secrecy",
    "t": "Configure forward secrecy ",
    "c": "Configure forward secrecy  Perfect Forward Secrecy (PFS) is a style of encryption that enables short-term, private key exchanges between clients and servers. PFS can be found within transport layer security (SSL/TLS) and prevents adversaries from decrypting data from other sessions, past or future, even if the private keys used in an individual session are stolen at some point. It does this by using unique session keys, generated automatically each time a connection is made. The keys do not use prior knowledge when they are generated, eliminating the need for long-term storage of keys and preventing sensitive data from being accessed using existing ones that have been compromised. This makes it much harder for attackers to obtain the session key through decryption. PFS is supported by all major internet browsers. How to Configure Nginx for Forward Secrecy How to Configure Apache for Forward Secrecy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "514aefc73fdfd2a1ff3b2ddc91a114de",
    "u": "https://webserver.tymyrddin.dev/docs/http/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Turn on additional protection for web applications. Why?  Setting security headers in web applications and web server settings is an easy way to improve the resilience of your web application against many common attacks, including cross-site scripting (XSS) , clickjacking attacks , and information disclosure . How?  These headers can be applied globally or to a specific site in the Nginx/Apache virtual host file by adding the HTTP Security Headers to the server block. Check your HTTP security headers HTTP Strict Transport Security (HSTS) X-Frame-Options Content Security Policy (CSP) Permissions-Policy Referrer-Policy X-Content-Type-Options X-XSS-Protection Set-Cookie Content-Type",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4ccd8630562a5fd2d1d976240eeba111",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/http-methods",
    "t": "Disable unwanted HTTP methods ",
    "c": "Disable unwanted HTTP methods  HTTP TRACE and TRACK requests can be used for legitimate purposes, such as debugging connection errors within the network, but these protocols can also compromise the security of a web server. One of the most common exploitation methods are [cross-site scripting (XSS) attacks], where attackers use and manipulate the TRACE and TRACK methods to intercept normal traffic connections, session cookies and possibly any data in transit. Disable any HTTP methods, which are not going to be used and which are not required to be implemented on the web server. Nginx  Add this condition in the location block of the nginx virtual host configuration file, location / { limit_except GET HEAD POST { deny all; } } The server will only allow GET , HEAD , and POST methods and will filter out methods such as PUT , DELETE , PATCH , TRACE , TRACK , and OPTIONS . Or for a more universal solution, add this condition to the server section (or server block): if ($request_method !~ ^(GET|HEAD|POST)$ ) { return 444; } Note: Be very careful with if statements in the location context. Apache  Make sure that the mod_rewrite module and .htaccess are enabled. To enable the mod_rewrite module: # a2enmod rewrite Add AllowOverride All in the VirtualHost configuration file: <VirtualHost *:80> ServerName www.example.com DocumentRoot /var/www/html <Directory /var/www/html> AllowOverride All </Directory> </VirtualHost> Or enable it globally by editing the Apache main configuration file. <Directory /var/www/html> Options Indexes FollowSymLinks AllowOverride All </Directory> Restart Apache, and create a .htaccess file under the document root directory with the following code. RewriteEngine On RewriteCond %{REQUEST_METHOD} ^(PUT|DELETE|PATCH|TRACE|OPTIONS) RewriteRule .* - [F] The above configuration will disable PUT , DELETE , PATCH , TRACE , TRACK , and OPTIONS methods.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f488c0ebf84f08a45d618659b9417f35",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Remove all unnecessary web server modules. A lot of web servers by default come with several modules that introduce security risks. Modify default configuration settings. Install and run a web application firewall (WAF). Most web servers support the open-source ModSecurity firewall. If possible, either patch server software to the latest version automatically or turn on notifications for manual patching. Why?  Build a more secure foundation for web applications. How?  Keep only required modules Disable unwanted services Restrict file and directory access Disable unwanted HTTP methods Create non-root users Install and use ModSecurity Install and use ModEvasive Set up and configure logging",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5a2d39b18b660de72833c4fe6843c0e9",
    "u": "https://webserver.tymyrddin.dev/docs/http/xcontent",
    "t": "X-Content-Type-Options ",
    "c": "X-Content-Type-Options  The X-Content-Type-Options response HTTP header is used by the server to prevent browsers from guessing the media type (MIME type). This is known as MIME sniffing in which the browser guesses the correct MIME type by looking at the contents of the resource. The absence of this header might cause browsers to transform non-executable content into executable content. This header helps mitigate the danger of drive-by downloads. Apache  Header always set X-Content-Type-Options \"nosniff\" Nginx  X-Content-Type-Options: nosniff Resources  MDN Web docs: X-Content-Type-Options",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "049d13e0487a8fb9646bf5ebc0978bce",
    "u": "https://webserver.tymyrddin.dev/docs/encryption/tls",
    "t": "(Re)configure TLS ",
    "c": "(Re)configure TLS  Transport Layer Security (TLS) and its predecessor, Secure Socket Layer (SSL), are widely used protocols. They were designed to secure the transfer of data between the client and the server through authentication, encryption, and integrity protection. All the SSL and TLS versions older than 1.2 are having lots of known vulnerabilities, which is why the latest browsers have removed support for these vulnerable protocols. Likewise, do not use old versions of the TLS protocol (TLSv1 TLSv1.1) on web servers, because they open the door to SSL attacks . TLS 1.3 is preferred as it does not require manually specifying cipher suites in configuration. Nginx  Add this directive in the server section of the Nginx configuration file: ssl_protocols TLSv1.2 TLSv1.3; Restart Nginx service. Apache: TLS 1.2 only  Edit the virtual host section for your domain in the Apache SSL configuration file on the server to disable all older protocols except TLSv1.2: <VirtualHost *:443> ServerName www.example.com DocumentRoot /var/www/html SSLEngine on SSLProtocol -all +TLSv1.2 SSLCertificateFile /etc/letsencrypt/live/example.com/cert.pem SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem </VirtualHost> Restart Apache service. Apache: TLS 1.3 and 1.2  <VirtualHost *:443> ServerName www.example.com DocumentRoot /var/www/html SSLEngine on SSLProtocol -all +TLSv1.2 +TLSv1.3 SSLCertificateFile /etc/letsencrypt/live/example.com/cert.pem SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem </VirtualHost> Restart Apache service.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cc5839ec6084ea3929a987b9f809a2fb",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/mod_security",
    "t": "Install and use ModSecurity ",
    "c": "Install and use ModSecurity  ModSecurity ( mod_security ) is an open-source IDS and prevention engine, originally developed for Apache, and now also available for Nginx (and other platforms) in a “standalone” version. ModSecurity works as a supplemental firewall for the web server, allowing you to monitor traffic in real-time, and disabling host connections if the module suspects potential brute-force password attacks. Nginx  To install it without (re)compiling Nginx, install the dependencies: # apt-get install libxml2 libxml2-dev libxml2-utils libaprutil1 libaprutil1-dev And download, compile and install mod_security : # git clone https://github.com/SpiderLabs/ModSecurity.git mod_security # cd mod_security ~/mod_security# ./autogen.sh ~/mod_security# ./configure --enable-standalone-module ~/mod_security# make To compile Nginx from source with the modsecurity module (check for latest version here: http://nginx.org/en/download.html) # wget http://www.nginx.org/download/nginx-1.9.5.tar.gz # tar -xvpzf nginx-1.9.5.tar.gz # cd nginx-1.9.5 ~/nginx-1.9.5# ./configure --add-module=../mod_security/nginx/modsecurity ~/nginx-1.9.5# make ~/nginx-1.9.5# make install The ModSecurity configuration file must be defined in the nginx.conf file, something like this: server { listen 80; server_name localhost; location / { ModSecurityEnabled on; ModSecurityConfig modsecurity.conf; } } For custom rules applied to different directories, create new mod_security.conf files, for example: location /secured { ModSecurityConfig modsecurity3.conf; proxy_pass http://secured.core.com/; proxy_read_timeout 180s; } To turn it off for a particular directory: location /unsecured/ { ModSecurityEnabled off; proxy_pass http://unsecured.core.com/; proxy_read_timeout 180s; } Restart Nginx. Apache  Compile and embed the ModSecurity module or install from repository: # apt-get install libapache2-modsecurity Check it was loaded: # apachectl -M | grep --color security Rename the recommended-labeled configuration file: # mv /etc/modsecurity/modsecurity.conf-recommended /etc/modsecurity/modsecurity.conf Restart Apache. Usage  A new logfile named /var/log/apache2/modsec_audit.log has been created. Check that the default configuration file is not set to DetectionOnly , which logs requests according to rule matches and doesn’t block anything. Edit the /etc/modsecurity/modsecurity.conf file to change it if need be (set it to On ). Some possible changes: # Prevent path traversal (..) attacks SecFilter \"../\" # Weaker XSS protection but allows common HTML tags SecFilter \"<[[:space:]]*script\" # Prevent XSS atacks (HTML/Javascript injection) SecFilter \"<(.|n)+>\" # Very crude filters to prevent SQL injection attacks SecFilter \"delete[[:space:]]+from\" SecFilter \"insert[[:space:]]+into\" SecFilter \"select.+from\" SecFilter \"drop[[:space:]]table\" # Protecting from XSS attacks through the PHP session cookie SecFilterSelective ARG_PHPSESSID \"!^[0-9a-z]*$\" SecFilterSelective COOKIE_PHPSESSID \"!^[0-9a-z]*$\" Restart Apache. Configuration resources  Have a look at the OWASP ModSecurity Core Rule Set Project (CRS) for making more secure changes. The CRS aims to protect web applications from a wide range of attacks, with a minimum of false alerts.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c6377b5a3b18c57d4131e53f1d18cc4f",
    "u": "https://webserver.tymyrddin.dev/docs/disclosure/directory-listing",
    "t": "Disable directory listing ",
    "c": "Disable directory listing  Web servers by default display the content of the documents and files in the root directory when an index.html file is missing. This means that a potential attacker could possibly view all of the files and subdirectories that are presented to the browser. As with the hiding of version and OS identity , this is not a direct security threat as it only allows the attacker to gain information. Apache  Add the following configuration in /etc/apache2/apache2.conf to disable directory listing globally (server wide): < Directory /> Options - Indexes </ Directory > Do not overwrite this inside any directory. Your root directory may look like this: < Directory /> Options FollowSymLinks AllowOverride None </ Directory > AllowOverride None will prevent any accidental changes in .htaccess files. After that you can enable listing per directory by adding the Indexes option: < Directory / www / directory > Options Indexes FollowSymLinks AllowOverride None </ Directory > This enables the generation of Indexes only in that folder. Nginx  Nginx cannot directly execute external programs (CGI). Phew. But if you really really want it to, use fcgi securely. Disable SSI and autoindex execution  The ngx_http_autoindex_module processes requests ending with the slash character / and produces a directory listing. Usually a request is passed to the ngx_http_autoindex_module when the ngx_http_index_module cannot find an index file. You can configure and install Nginx using only required modules. To see which modules can be turned on or off while compiling the Nginx server: # ./configure --help | less To disable the SSI and autoindex module: # ./configure --without-http_autoindex_module --without-http_ssi_module # make # make install",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ba855fd37849dfa11e1094c6077de4c0",
    "u": "https://webserver.tymyrddin.dev/docs/http/xxss",
    "t": "X-XSS-Protection ",
    "c": "X-XSS-Protection  The HTTP X-XSS-Protection response header is a feature of Safari, Internet Explorer 8+, and Google Chrome that stops pages from loading when they detect reflected cross-site scripting (XSS) attacks. For example, to prevent browsers from rendering pages if an attack is detected: X-XSS-Protection: 1; mode=block The header can be implemented in three ways: X-XSS-Protection: 0 – disables the filter completely. X-XSS-Protection: 1 – enforces the header but only sanitises potential malicious scripts. X-XSS-Protection: 1; mode=block – enforces the feature and completely blocks the page. These protections are largely unnecessary in modern browsers when sites implement a strong Content-Security-Policy that disables the use of inline JavaScript (‘unsafe-inline’). Apache  Header always set X-XSS-Protection \"1; mode=block\" Nginx  add_header X-XSS-Protection \"1; mode=block\" always; Resources  MDN Web docs: X-XSS-Protection",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "efc28bdc7830dab0929e546608d8b1a9",
    "u": "https://webserver.tymyrddin.dev/docs/http/referrer",
    "t": "Referrer-Policy ",
    "c": "Referrer-Policy  The Referrer-Policy HTTP header controls how much referrer information (sent via the Referer header) should be included with requests. For example: Referrer-Policy: strict-origin-when-cross-origin Meaning, send the origin, path, and querystring when performing a same-origin request. For cross-origin requests send the origin (only) when the protocol security level stays same (HTTPS → HTTPS). Do not send the Referrer header to less secure destinations (HTTPS → HTTP). By checking the referrer, the new webpage can see where the request originated. The Referrer-Policy can be configured to cause the browser to not inform the destination site any URL information. Apache  Header always set Referrer-Policy \"strict-origin\" Nginx  add_header Referrer-Policy \"strict-origin\"; Resources  MDN Web docs: Referrer-Policy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c8c2d542023a8d99d5e5fc1e5c2622d4",
    "u": "https://webserver.tymyrddin.dev/docs/disclosure/hide-info",
    "t": "Hide web server information ",
    "c": "Hide web server information  Apache  If the <Location /server-info> directive in the httpd.conf configuration file is enabled, information about the Apache configuration can be read by accessing the /server-info page. The information includes server version, system paths, database names, library information, etc. This directive can be disabled by commenting out the mod_info module in the httpd.conf Apache configuration file: #LoadModule info_module modules/mod_info.so The <Location /server-status> directive lists information about server performance, such as server uptime, server load, current HTTP requests, and client IP addresses. To disable this directive, comment it out in the httpd.conf Apache configuration file: #<Location /server-status> # SetHandler server-status # Order deny,allow # Deny from all # Allow from .domain.com #</Location> The ServerSignature directive adds a footer to server-generated documents. The footer includes the version of Apache and the operating system. To disable this directive in the httpd.conf Apache configuration file: ServerSignature Off The ServerTokens directive controls the information that is sent back in the Server response header field. To set it to Prod to instruct Apache to return only Apache in the server response headers, include this directive in the httpd.conf Apache configuration file: ServerTokens Prod And restart Apache web server. Nginx  Find nginx.conf in nginx installation directory/conf on Windows systems, and in /etc/nginx or /usr/local/etc/nginx on Linux systems. You may also need to do some changes to virtual host configuration files in the sites-available subdirectory. By default, the server_tokens directive in nginx displays the nginx version number. It is directly visible in all automatically generated error pages but also present in all HTTP responses in the Server header. To disable the server_tokens directive: server_tokens off If you want to remove the Server header completely, you have to compile the Headers More module in, because the header is hard coded in the Nginx source, and it allows changing any http headers. Then, to clear the Server header: more_clear_headers Server; Or to set a custom string as Server more_set_headers 'Server: some-string-here';",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "fd94666ac24f0b4e1bc082559f0c1bea",
    "u": "https://server.tymyrddin.dev/",
    "t": "Hardening Linux server ",
    "c": "Hardening Linux server  The below writeups were initially based on debian 9 hosts, and then later on ubuntu 18.04 LTS, and on CentOS 8. Everything in these writeups will probably also apply to newer versions. If something does not work, check the documentation for your distro and version for what you are trying to do. Securing user accounts Introduction Configuring sudo Disabling root access Locking home directories Configuring password complexity Configuring other password requirements Dangers of the lxd group Audit services Introduction Auditing system services with systemctl Auditing network services with netstat Auditing network services with nmap Firewalls Introduction iptables UFW NFTables FirewallD FireHOL Packet filtering Fail2ban SSHguard Web Application Firewall WAF Port spoofing Encryption technologies Introduction GNU Privacy Guard OpenVPN strongSwan Installing SSH Harden ssh server Key management Jumping hosts Virtual network computing (VNC) Introduction TigerVNC TightVNC Securing sessions Access control Introduction Discretionary access control (DAC) Access control lists (ACL) and shared directory management (SDM) Mandatory access control (MAC) Public key infrastructure (PKI) Introduction Problems Internal PKI Pluggable Authentication Modules (PAM) Let’s Encrypt TLS/SSL Logfiles Introduction Syslog log commands Path of a common intruder Logrotate Centralised logging Guards! Guards! Introduction Samhain Maltrail Incidents Introduction Preventing incidents Using git for configuration management Implementing a backup plan Using bootable recovery media Troubleshooting Overview Authentication error Connection refused",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8aa7dc9e13f51af021194a10aa6c6368",
    "u": "https://server.tymyrddin.dev/docs/firewall/port-spoofing",
    "t": "Port spoofing ",
    "c": "Port spoofing  Scanning software usually tries to determine a service that is running on an open port to identify port numbers on which you are running your services on a system. For delaying reconnaissance phase, spoof all ports to seem to be open and emulate valid services on every port. Any attackers port scan results will become fairly meaningless and it will require hours of effort to accurately identify which ports have real services and which do not. Portspoof is a tool that is meant to be a lightweight, fast, portable and secure addition to any firewall system or security system. Techniques used by Portspoof: All configured TCP ports are always open: returns SYN+ACK for every connection attempt making it difficult to determine if a valid software is listening on a particular port and impractical to use stealth. Every open TCP port emulates a valid services: It has a huge dynamic service signature database, that will be used to generate responses to your adversaries scanning software service probes. Portspoof will respond to every service probe with a valid service signature, that is dynamically generated based on a service signature regular expression database. Portspoof can also be used as an Exploitation Framework Frontend, turning your system into a responsive and aggressive machine for exploiting your attackers’ tools and exploits. Some example exploits can be found in the configuration file portspoof.conf . Limitations: An attacker can still determine if a service is emulated by using a protocol probe (for 65k open ports)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "04d901bddf84d96822458570af0c50ff",
    "u": "https://server.tymyrddin.dev/docs/access/readme",
    "t": "Introduction ",
    "c": "THM Room: Hardening basics Introduction  What?  Configuring access control Why?  Protecting sensitive files and directories by setting proper permissions and ownership, and by using Extended Attributes (xattr). Avoiding security related problems with Set User ID (SUID) and Set Group ID (SGID). How?  Discretionary access control (DAC) Access control lists (ACL) and shared directory management (SDM) Mandatory access control (MAC) Mastering Linux Security and Hardening, Donald A. Tevault, Second Edition",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "bca2d3f5673072305e2c4a2b2f9a4456",
    "u": "https://server.tymyrddin.dev/docs/encryption/harden-ssh",
    "t": "Harden ssh server ",
    "c": "Harden ssh server  Configuration file  Changes to the /etc/ssh/sshd_config file: Root access: Root access has prohibit-password set by default. Deactivate using the root account (change PermitRootLogin prohibit-password to PermitRootLogin no ). There’s a configurationless workaround, by logging in as an ordinary user and becoming root with: $ su - Get rid of passwords: Use SSH keys authentication instead of passwords and deactivate using passwords for authentication ( PasswordAuthentication no ) in the config file. Limit access: Only allow login by certain users or groups (users and groups). This does not improve security directly but in some cases helps in resisting a brute force attack a little longer. Set a custom SSH port: By default, ssh listens on port 22, which is widely known among attackers and security tools/port scanners that launch brute force attacks against it. Though security by obscurity (which is no security), it does help eliminate a lot of noise on port 22. Change it in the config file and close port 22 and punch a hole for the new port in the firewall. Choose a port not in use by another service (woops) Disable X11 forwarding: As admins we are unlikely to use graphic tools, and the X11 protocol was never built with security in mind. It can be used by adversaries to open up a channel to the client and send remote commands. Change X11Forwarding yes to X11Forwarding no in the config file. After changing the /etc/ssh/sshd_config file, restart the ssh server with $ sudo systemctl restart ssh for changes to take effect. Additional security  Use of TCP wrappers: Only do this when all needing access to a server have a static IP address. For example, not on a jump host, but when using nc and routing tables with ProxyCommand for the servers one can jump to from the jump host. TCP wrappers can be made by using two files: /etc/hosts.allow and /etc/hosts.deny Append ALL:ALL to /etc/hosts.deny to deny all connections from unknown hosts. Append sshd : XXX.XXX.XXX.XXX to /etc/hosts.allow for each IP address you wish to allow. Use fail2ban for automatically blacklisting IPs (attempting to brute force the SSH server) with the help of a firewall.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9aafcc19059d395ece44e56f05357f35",
    "u": "https://server.tymyrddin.dev/docs/trouble/ssh-auth-error",
    "t": "Authentication error ",
    "c": "Authentication error  By default, the SSH client verifies the identity of the host to which it connects. If the remote host key is unknown, a user trying to connect is asked to accept it by typing “yes” or “no”. And it may fail. @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that a host key has just been changed. The fingerprint for the ECDSA key sent by the remote host is <redacted>. Please contact your system administrator. Add correct host key in /home/user/.ssh/known_hosts to get rid of this message. Offending ECDSA key in /home/user/.ssh/known_hosts:10 remove with: ssh-keygen -f \"/home/user/.ssh/known_hosts\" -R jumphost ECDSA host key for jumphost has changed and you have requested strict checking. Host key verification failed. ssh_exchange_identification: Connection closed by remote host Besides a MitM attack (Make sure this is not the case from a trusted source. An adversary may be spoofing the host and continuing may give the adversary the information they seek to attack your server), this can also happen after changing a key : edit ~/.ssh/known_hosts file and remove the offending line. In the above example that is line 10. when using ssh on a LAN (where DHCP is used and IP addresses change) when jumping to multiple hosts from a jump host. Bypassing verification (not recommended)  To disable the host key checking and the warnings, set StrictHostKeyChecking no in ~/.ssh/config and UserKnownHostsFile=/dev/null to send the key to a null known_hosts file to avoid future mismatches, and both defeat the intended verification security purpose . For all hosts Host * StrictHostKeyChecking no UserKnownHostsFile=/dev/null For 192.168.0.0/24 Host 192.168.0.* StrictHostKeyChecking no UserKnownHostsFile=/dev/null Even with StrictHostKeyChecking set to no , a user may still be refused to connect when connecting via ProxyJump or ProxyCommand with multiple hosts through a jumphost. ProxyJump issues another ssh process, that does not inherit the command-line arguments that were specified on the command-line of the first ssh command. Host jumphost User jumpuser StrictHostKeyChecking=no UserKnownHostsFile=/dev/null IdentityFile ~/.ssh/id_jumpuser_rsa Get more information on what is happening with the ProxyCommand: ssh -o ProxyCommand=\"ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_jumpuser_rsa -W %h:%p jumpuser@jumphost\" -i ~/.ssh/id_jumpuser_rsa jumpuser@XXX.XXX.XXX.XXX HostKeyAlias  HostKeyAlias specifies an alias that should be used instead of the real host name when looking up or saving the host key in the host key database files. This option is useful for tunnelling SSH connections or for multiple servers running on a single host . It caches the remote public under the alias name. Useful if different openSSH servers are listening on different ports of the same physical server, because normally the port number is not stored when caching public host keys. If the key has a different name (alias) both keys can be cached and valid. Host jumphost HostName XXX.XXX.XXX.XXX User user HostKeyAlias jumphost ProxyCommand ssh anotheruser@backendserver nc %h %p CheckHostIP  And what if there are 2 different host keys for the same IP, or when the IP’s change (DHCP on a LAN for example)? If CheckHostIP is set to yes (default), ssh will check the host IP address in the known_hosts file. This allows ssh to detect if a host key changed due to DNS spoofing. If the option is set to no , the check will not be executed. Host server1 Hostname whatever1.com HostKeyAlias server1 CheckHostIP no Port 22001 User user Host server2 Hostname whatever2.com HostKeyAlias server2 CheckHostIP no Port 22002 User user",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0616552662b98931841c2e9e0354bde9",
    "u": "https://server.tymyrddin.dev/docs/firewall/waf",
    "t": "Web Application Firewall WAF ",
    "c": "Web Application Firewall WAF  A web application firewall (or WAF) filters, monitors, and blocks HTTP traffic to and from a web application. A WAF is differentiated from a regular firewall in that a WAF is able to filter the content of specific web applications while regular firewalls serve as a safety gate between servers. mod_security  The mod_security module is a free Web Application Firewall (WAF) that works with Apache, Nginx and IIS. It supports a flexible rule engine to perform simple and complex operations and comes with a Core Rule Set (CRS) which has rules for SQL injection, cross site scripting, Trojans, bad user agents, session hijacking and a lot of other exploits. For Apache, it is an additional module, easy to install and configure. For Nginx and other web servers there is a stand-alone version.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4aa9cf5e02a623bd00d9a4f4ca313010",
    "u": "https://server.tymyrddin.dev/docs/users/readme",
    "t": "Introduction ",
    "c": "THM Room: Hardening basics Introduction  What?  Securing user accounts through smart configuration of sudo, using complex passwords, disabling root access and locking down home directories. Why?  The principle of least privilege states that each user should only have enough access to perform their daily tasks. How?  Configuring sudo Disabling root access Locking home directories Configuring password complexity Configuring other password requirements Dangers of the lxd group Mastering Linux Security and Hardening, Donald A. Tevault, Second Edition",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "00cf5a9435b916bc7548f880f33afe40",
    "u": "https://server.tymyrddin.dev/docs/pki/pam",
    "t": "Pluggable Authentication Modules (PAM) ",
    "c": "Pluggable Authentication Modules (PAM)  Pluggable Authentication Modules (PAM) is a suite of shared libraries, providing an abstraction layer between the various methods available that provide authentication and the applications that require authentication and would otherwise have to support those methods directly. With PAM, all that is necessary for these components to cooperate is that a specific PAM module be available for each of them. Passwords  Never reuse old passwords ever. . Open /etc/pam.d/common-password : To restrict users from using their old passwords on the same machine, in the auth section, enter the following line: auth sufficient pam_unix.so likeauth nullok If you want to allow a user to reuse his/her password from a number of passwords that were last used, add the following line in the password section: password sufficient pam_unix.so nullok use_authtok md5 shadow remember=3 SSH  The pam_listfile.so module authenticates users based on the contents of a specified file. For example, if username exists in a file /etc/ssh/ssh.allow , ssh will grant login access. Deny access  Append /etc/pam.d/ssh : auth required pam_listfile.so item=user sense=deny file=/etc/ssh/ssh.deny onerr=succeed Add all usernames you wish to deny access for to a /etc/ssh/ssh.deny file. Allow access  Append /etc/pam.d/ssh : auth required pam_listfile.so item=user sense=allow file=/etc/ssh/ssh.allow onerr=fail Add all usernames to allow access for to a /etc/ssh/ssh.deny file. SASL  SASL can use different authentication methods. The default one is PAM (as configured in /etc/conf.d/saslauthd ) Create /etc/pam.d/smtp #%PAM-1.0 auth required pam_unix.so account required pam_unix.so",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b503d7843800d3de1d2610a232d0ade2",
    "u": "https://server.tymyrddin.dev/docs/encryption/gnupg",
    "t": "GNU Privacy Guard ",
    "c": "GNU Privacy Guard  GNU Privacy Guard (GPG) is based on Pretty Good Privacy, the OpenPGP standard. Pretty Good Privacy (PGP) is used widely to encrypt and decrypt email by using asymmetrical and symmetrical systems. When you first send your email, it is encrypted with your own public key, as well as a session key, which is a one-time use random number called a nonce . The session key is then encrypted into the public key and sent with the cipher text. To decrypt your email, the receiving end must use their private key in order to discover the session key. The session key combined with the private key are then used to decrypt the cipher text back into the original document. GPG comes pre-installed on Ubuntu. Its main advantages: Easy encryption for email and files. Mentioned in 2017 by Snowden, referring to 2014, supposedly, then, the NSA could not crack PGP. Asymmetric encryption removes the need to provide a password for decrypting or unlocking files thus improving security overall. Using GPG  To create keys: gpg --gen-key To verify the keys were created: gpg --list-keys Encrypting files with GPG  Symmetric  gpg -c <file> This will prompt the user to enter a passphrase to protect the file. This is not the passphrase you used to create your keys The -d option while targeting our gpg file that was encrypted, will print out the contents of the file after prompting for the secret passphrase. Asymmetric  Asymmetric encryption works by using two keys - one to encrypt, and one to decrypt. The public key is used to encrypt the data while the private key is used to decrypt the data. So using the typical Bob and Alice example, let’s say Bob wants to send Alice an encrypted file. He would first encrypt the file using Alice’s public key and then send the file away. Once Alice receives the file, she can decrypt it with her private key. The big takeaway here is that public keys can be shared, private keys should be kept private and held onto for dear life. NEVER SHARE YOUR PRIVATE KEY! To use the scheme, users need to extract their public keys and send them to each other. Go to the .gnupg folder and extract with: gpg --export -a -o <filename> This will export the user’s public key as ASCII armored output as the filename specified. In order to import the file, (be in .gnupg directory or know the path). gpg --import <filename.txt> To encrypt a document asymmetrically: gpg -e <document> When the other party wishes to decrypt it, he/she will be prompted for his/her passphrase for his/her private key. After entering that he/she is greeted with the text from the file. gpg -d <document>.gpg",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f9dc896153c53990b225d2909e4997d7",
    "u": "https://server.tymyrddin.dev/docs/firewall/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Monitor traffic to and from a host, and only allow legitimate traffic. Why?  Prevent unauthorised remote access, but while a firewall should block backdoor access via a Trojan, there is a chance that this can be bypassed. Block unsuitable or immoral content, but consider the ethics of reading private content to be able to do so. How?  iptables nftables UFW firewalld FireHOL Packet filtering with I/O Control Fail2ban SSHguard WAF Port spoofing Notes  Deny All and then add exceptions to restrict access to everything except the specific services you need to remain open. Avoid using ANY in Allow rules. A rule where the service field is ANY can open up 65,535 attack vectors, I mean, TCP ports. Document all rules and use comments for relevant information (purpose, service, users/servers/devices affected, permanent or temporary, name of person that added it) Review proposed and changed firewall rules before implementation Consider a WAF. Mind that it requires a lot of support work because the defaults are all very strict. Users can not ven make linux documentation pages in a dokuwiki without getting thrown out.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "df519fa87b90827b0edfdb4ac68fde59",
    "u": "https://server.tymyrddin.dev/docs/vnc/tigervnc",
    "t": "TigerVNC ",
    "c": "TigerVNC  TigerVNC is not as lightweight as TightVNC , but it provides extensions for advanced authentication methods and TLS encryption , hence a proper candidate for a fallback when ssh fails. Installation  Install the Xfce desktop environment on the server: # apt-get install xfce4 xfce4-goodies xorg dbus-x11 x11-xserver-utils Install the vnc server: # apt-get install tigervnc-standalone-server tigervnc-common Create a new user to access the server. # useradd vncuser Add the user to the sudo group: # usermod -aG sudo vncuser As the vncuser, run the vncserver command to create the initial configuration and set up the password. Do not use sudo. $ vncserver You will require a password to access your desktops. Password: Verify: Would you like to enter a view-only password (y/n)? n /usr/bin/xauth: file /home/vncuser/.Xauthority does not exist New 'debian9.localdomain:1 (vncuser)' desktop at :1 on machine debian9.localdomain Starting applications specified in /etc/X11/Xvnc-session Log file is /home/vncuser/.vnc/debian9.localdomain:1.log Use xtigervncviewer -SecurityTypes VncAuth -passwd /home/vncuser/.vnc/passwd :1 to connect to the VNC server. Configuration  Default for the service is on port 5901 (display port :1 ). Stop the service: $ vncserver -kill :1 Make a backup of the xstartup file: $ mv ~/.vnc/xstartup ~/.vnc/xstartup.old Create a new xstartup file and open it (empty file): $ vi ~/.vnc/xstartup To have VNC read the server user’s .Xresources file and launch Xfce (in the background), append: #!/bin/sh unset SESSION_MANAGER unset DBUS_SESSION_BUS_ADDRESS exec startxfce4 Write and quit file, and (as root) make it executable. # chmod u+x ~/.vnc/xstartup Restart the service: $ vncserver Firewall  Open ports in the firewall for inbound communication. Control  For starting, stopping, and restarting the service, create a new (empty) systemd unit file /etc/systemd/system/vncserver@.service # vi /etc/systemd/system/vncserver@.service The @ symbol will allow for passing an argument (the VNC display port). Append: [Unit] Description=Remote desktop service (VNC) After=syslog.target network.target [Service] Type=simple User=vncuser PAMName=login PIDFile=/home/%u/.vnc/%H%i.pid ExecStartPre=/bin/sh -c '/usr/bin/vncserver -kill :%i > /dev/null 2>&1 || :' ExecStart=/usr/bin/vncserver :%i -geometry 1280x800 -alwaysshared -fg ExecStop=/usr/bin/vncserver -kill :%i [Install] WantedBy=multi-user.targetReload systemd manager configuration # systemctl daemon-reload Enable the unit file # systemctl enable vncserver@1.service Kill the vncserver $ vncserver -kill :1 And start it as any other systemd service. $ sudo systemctl start vncserver@1 Verify $ sudo systemctl status vncserver@1 Clients  Linux: xvnc4viewer Configuration resources  TigerVNC",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5e2a19851b9ec675864a435d1aec5e88",
    "u": "https://server.tymyrddin.dev/docs/services/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Never have anything that you don’t absolutely need installed on a server. Especially not any unnecessary network services. Why?  Do not give adversaries extra ways to get into the systems. How?  Auditing system services with systemctl Auditing network services with netstat Auditing network services with nmap Mastering Linux Security and Hardening, Donald A. Tevault, Second Edition",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "230b5e9e61df79f9727abf25a72e0224",
    "u": "https://server.tymyrddin.dev/docs/vnc/secure-sessions",
    "t": "Securing sessions ",
    "c": "Securing sessions  TLS  Start the VNC server with: # vncserver -SecurityTypes=VeNCrypt,TLSVnc On the client, connect with vncviewer: $ vncviewer -SecurityTypes=VeNCrypt,TLSVnc XXX.XXX.XXX.XXX:1 With TLSVnc, there is standard VNC authentication and traffic is encrypted with GNUTLS but the identity of the server is not verified. TigerVNC also supports other security schemes such as X509Vnc. X509  X509 combines standard VNC authentication with GNUTLS encryption and server identification, and is the recommended mode for a secure connection. Do not set SecurityTypes on the server to a non-encrypted option as high-priority (such as None, VncAuth, Plain, TLSNone, TLSPlain, X509None, X509Plain) because then it is not possible to use encryption. When running vncviewer, it is safer to explicitly set SecurityTypes and not accept any unencrypted traffic. Any other mode is to be used only when accessing a vncserver via SSH tunnels. SSH  On the server install ssh. On the client: $ ssh -L 5901:127.0.0.1:5901 -C -N -l vncuser XXX.XXX.XXX.XXX The -L switch specifies binding port 5901 of the remote connection to port 5901 on the local machine (client), -C enables compression, -N specifies there will be no remote command, and -l the remote login name.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d85a985b8eb633d043dc2b4780415f18",
    "u": "https://server.tymyrddin.dev/docs/users/homes",
    "t": "Locking home directories ",
    "c": "Locking home directories  This is another area where different Linux distribution families are different from each other. Each distribution family comes with different default security settings. A security administrator who oversees a mixed environment of different Linux distributions will need to take this into account. The UMASK line is in the login.defs file for all Linux distributions, but Red Hat-type distributions are the only ones that have UMASK set to a restrictive value of 077 by default, which removes all permissions from the group and others. Other distros set it to 022 by default, which creates home directories with a permissions value of 755 . This allows everybody to enter everybody else’s home directories and access each others’ files. Red Hat and CentOS  Red Hat Enterprise Linux and all of its descendants have better out-of-the-box security than any other Linux distribution. One thing that’s already been done is locking down users’ home directories. By default, the useradd utility on Red Hat-type systems creates user home directories with a permissions setting of 700 . Only the user who owns the home directory can access it. The UMASK is set in /etc/login.defs . CREATE_HOME yes UMASK 077 Debian and Ubuntu  Debian and its offspring, such as Ubuntu, have two user creation utilities: useradd and adduser . useradd  Using useradd : sudo useradd -m -d /home/username -s /bin/bash username Otherwise, username would have no home directory and would be assigned the wrong default shell. Home directories are wide open, with execute and read privileges for everybody. cd /home sudo chmod 700 * To change the default permissions setting for home directories, open /etc/login.defs and change UMASK 022 to UMASK 077 . Now, new users’ home directories will get locked down on creation, just as they do with Red Hat. adduser  The adduser utility is an interactive way to create user accounts and passwords with a single command, which is unique to the Debian family of Linux distributions. Most of the default settings that are missing from the Debian implementation of useradd are already set for adduser. The only thing wrong with the default settings is that it creates user home directories with the wide-open 755 permissions value. 777 is the numerical equivalent of rwxrwxrwx in Linux, subtracting that from the UMASK of 022 , you get the resulting permissions that will be set on a user’s home directory and files. Change the UMASK to 077 in /etc/login.defs .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f11d2a745a20faf20877cb4d2025fb31",
    "u": "https://server.tymyrddin.dev/docs/access/acl",
    "t": "Access control lists (ACL) and shared directory management (SDM) ",
    "c": "Access control lists (ACL) and shared directory management (SDM)  With access control list (ACL), we can allow only a certain person to access a file, or we can allow multiple people to access a file with different permissions for each person. To view an ACL for a file or directory: getfacl <file> Creating an ACL  For setting an ACL, remove all permissions from everyone except for the user of the file. That’s because the default permissions settings allow members of the group to have read/write access, and others to have read access. chmod 600 <file> To allow a user or a group to have any combination of read, write, or execute privileges: setfacl -m u:<username>:rw <file> -m modify or create an ACL. u:username:r : user’s name, followed by another colon, and the list of permissions to grant this user. In this case, read and write access. Set an ACL for group access by replacing u: with g: . Creating an inherited ACL for a directory  To have all files that get created in a shared directory use the same ACL: setfacl -m d:u:<username>:r <directory> Using an ACL mask  Remove an ACL from a file or directory with the -x option: setfacl -x u:<username> <file> The -x option removes the entire ACL. To remove permissions with a mask, in this case read permission: setfacl -m m::r <file> m::r sets a read-only mask on the ACL. Other permissions stay intact. Preventing the loss of ACLs during a backup  When using tar to create a backup and then doing a restore, the ACL’s are gone. Use the --acls option: tar cJvf directory_backup.tar.xz dir/ --acls User groups  To create a group: sudo groupadd <groupname> Adding members when creating user accounts, on CentOS: sudo useradd -G <groupname> <username> on Debian/Ubuntu: sudo useradd -m -d /home/<username> -s /bin/bash -G <groupname> <username> And assign a password. To add an existing user to a group (CentOS and Debian families): sudo usermod -a -G <groupname> <username> Adding users to a group by editing the /etc/group file: ... <groupname>>:x:1005:<list of comma separated usernames> ... This method is extremely handy for when you need to add lots of members to a group at the same time. Creating a shared directory  sudo mkdir <directoryname> The new directory belongs to the root user and has a permissions setting of 755 , which permits read and execute access to everybody and write access only to the root user. To allow only members of a specific group to access the directory, change ownership and group association, and then set the permissions: sudo chown nobody:<groupname> <directoryname> sudo chmod 770 <directoryname> Setting the SGID bit and the sticky bit on the shared directory (it is safe and useful to set SGID on a shared directory): sudo chmod 2770 <directoryname> But now users in the group can delete each other’s files. When the sticky bit is set on files, Linux just ignores it, whereas for directories it has the effect of preventing users from deleting or even renaming the files it contains unless the user owns the directory, the file, or is root. sudo chmod o+t <directoryname> To set the sticky bit in octal form, prepend the number 1 to the current (or desired) basic permissions. Since the SGID bit has a value of 2000, and the sticky bit has a value of 1000, we can just add the two together to get a value of 3000 to add to the permissions: sudo chmod 3770 <directoryname> Having the sticky bit set will prevent group members from deleting anybody else’s files.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1c5a85eade4241a538fa53c4d231fe37",
    "u": "https://server.tymyrddin.dev/docs/ids/samhain",
    "t": "Samhain ",
    "c": "Samhain  The Samhain host-based intrusion detection system (HIDS) provides file integrity checking, log file monitoring/analysis, rootkit detection, port monitoring, detection of rogue SUID executables, and hidden processes. Like having tripwire when it was still working plus rkhunter rolled into one. Plus, it can be expanded to include more (remote) clients if set up in client-server mode and getting Beltane II as well (not GPL licensed and can be used on a limited amount of (10) machines for a small donation). Something that can maybe be used for guarding client machines remotely. Yum. Problems  A steeper learning curve than for other programs. No binaries available, setting it up is not easy for non-techies Download  Download samhain-current.tar.gz from Samhain Labs . Verification  cd Downloads/ $ gunzip samhain-current.tar.gz $ tar -xf samhain-current.tar $ gpg --keyserver pgp.mit.edu --recv-key 0F571F6C gpg: key 1AAD26C80F571F6C: 3 duplicate signatures removed gpg: key 1AAD26C80F571F6C: 96 signatures not checked due to missing keys gpg: key 1AAD26C80F571F6C: \"Rainer Wichmann <rwichmann@la-samhna.de>\" not changed gpg: key 3A2AAE330F571F6C: 21 signatures not checked due to missing keys gpg: key 3A2AAE330F571F6C: \"Rainer Wichmann <rwichmann@la-samhna.de>\" not changed gpg: Total number processed: 2 gpg: unchanged: 2 $ gpg --fingerprint 0F571F6C pub dsa1024 1999-10-31 [SCA] EF6C EF54 701A 0AFD B86A F4C3 1AAD 26C8 0F57 1F6C uid [ unknown] Rainer Wichmann <rwichmann@la-samhna.de> uid [ unknown] Rainer Wichmann <rwichmann@hs.uni-hamburg.de> sub elg1024 1999-10-31 [E] pub rsa1024 2014-07-21 [SCEA] [revoked: 2016-08-16] 5B17 5A1C 8C1B 7BC3 CB12 0FAA 3A2A AE33 0F57 1F6C uid [ revoked] Rainer Wichmann <rwichmann@la-samhna.de> [nina@archlinux Downloads]$ gpg --verify samhain-4.2.4.tar.gz.asc samhain-4.2.4.tar.gz gpg: Signature made Thu 21 Dec 2017 09:05:24 PM CET gpg: using DSA key 1AAD26C80F571F6C gpg: Good signature from \"Rainer Wichmann <rwichmann@la-samhna.de>\" [unknown] gpg: aka \"Rainer Wichmann <rwichmann@hs.uni-hamburg.de>\" [unknown] gpg: WARNING: This key is not certified with a trusted signature! gpg: There is no indication that the signature belongs to the owner. Primary key fingerprint: EF6C EF54 701A 0AFD B86A F4C3 1AAD 26C8 0F57 1F6C And that fits with the key given on the site. Simple configuration stand-alone  Configure stand-alone version : $ ./configure checking for a BSD-compatible install... /usr/bin/install -c checking whether make sets $(MAKE)... yes checking build system type... x86_64-unknown-linux-gnu checking host system type... x86_64-unknown-linux-gnu checking for gcc... gcc . . . [snip] . . . config.status: creating deploy.sh config.status: creating config.h config.status: executing default commands samhain has been configured as follows: System binaries: /usr/local/sbin Configuration file: /etc/samhainrc Manual pages: /usr/local/man Data directory: /var/lib/samhain Database file: /var/lib/samhain/samhain_file PID file: /run/samhain.pid Log file: /var/log/samhain_log Base key: 1617215581,281009996 Selected rc file: samhainrc.linux $ Configuration for watching logins, mounts and rootkits  Watching over logins: $ ./configure --enable-login-watch Over mountings: ./configure --enable-mount-check Samhain can check for kernel rootkits on FreeBSD and Linux with: $ ./configure --with-kcheck=systemmap where systemmap is the System.map file for a particular system. Configuration for stealth  If an intruder cannot discover that samhain is running, he cannot compromise it. You can, for example, use: $ ./configure --enable-install-name=somename where somename is an innocuous-sounding executable name. To make it less likely that the program isn’t accidentally discovered, samhain can be set to never respond to the command line. Or, it can be set to respond to the command line only after a certain password is given: $./configure --enable-nocl=somepass If somepass is set to an empty string it disables command-line interaction completely. Otherwise, invoke samhain with somepass as the first argument followed by the other arguments. There are many other interesting stealth options available, all documented along with the rest of the compilation switches in Appendix A of the documentation . Build  Next step is to Build : $ make gcc -I. -o depend-gen ./src/depend-gen.c update depend.dep ... gcc -I. -o mkhdr ./src/mkhdr.c gcc -I. -o encode ./src/encode.c encode 0 config.h ./encode 0 ./src/sh_files.c --> x_sh_files.c gcc -DHAVE_CONFIG_H -I. -I./include -O2 -D_FORTIFY_SOURCE=2 -fstack-protector-all -pthread -DUSE_MALLOC_LOCK=1 -fPIE -Wall -W -fno-strength-reduce -fno-omit-frame-pointer -Wno-empty-body -Wno-invalid-source-encoding -DSH_STANDALONE -o sh_files.o -c x_sh_files.c . . . [snip] . . . sh_string.o sh_inotify.o dnmalloc.o sh_audit.o sh_registry.o sh_ipvx.o sh_restrict.o sh_filetype.o sh_sub.o sh_fInotify.o sh_checksum.o sh_guid.o sh_sem.o sh_dbIO.o sh_dbCheck.o sh_dbCreate.o -lz -lresolv -lnsl -lnsl -lattr -lacl gcc -I. -o sstrip ./src/sstrip.c $ Installation  Install : $ make install /usr/bin/install -c -m 700 samhain /usr/local/sbin/samhain /usr/bin/install: cannot create regular file '/usr/local/sbin/samhain': Permission denied chmod: cannot access '/usr/local/sbin/samhain': No such file or directory make: *** [Makefile:518: install-program] Error 1 Ah yes, installing an application and using ./configure without the --prefix= option, the make install process will install the compiled files in to the predefined paths in the system’s file system, and that means special permissions for writing the files is required: $ sudo make install [sudo] password for nina: /usr/bin/install -c -m 700 samhain /usr/local/sbin/samhain /bin/sh ./mkinstalldirs /usr/local/man/man8 mkdir /usr/local/man/man8 /bin/sh ./mkinstalldirs /usr/local/man/man5 mkdir /usr/local/man/man5 /usr/bin/install -c -m 644 ./man/samhain.8 /usr/local/man/man8/samhain.8 /usr/bin/install -c -m 644 ./man/samhainrc.5 /usr/local/man/man5/samhainrc.5 gcc -DHAVE_CONFIG_H -I. -I./include -O2 -D_FORTIFY_SOURCE=2 -fstack-protector-all -pthread -DUSE_MALLOC_LOCK=1 -fPIE -Wall -W -fno-strength-reduce -fno-omit-frame-pointer -Wno-empty-body -Wno-invalid-source-encoding -DSH_STANDALONE -DSH_IDENT=\\\"daemon\\\" -DTRUST_MAIN -DSL_ALWAYS_TRUSTED=0 -o trustfile ./src/trustfile.c mkdir /var/lib/samhain ./samhain-install.sh --destdir= --express --verbose install-data cp samhainrc.linux samhainrc cp samhainrc samhainrc.pre mv -f samhainrc.pre samhainrc.install ./samhain-install.sh --install-sh -m 600 samhainrc.install /etc/samhainrc checking whether paths are trustworthy configuration file /etc/samhainrc ... OK state directory /run ... OK state directory /var/log ... OK data directory /var/lib/samhain ... OK You can use 'samhain-install.sh uninstall' for uninstalling i.e. you might consider saving that script for future use Use 'make install-boot' if you want samhain to start on system boot Customisation  Customize : $ sudo vi /etc/samhainrc I will run with defaults for now, and make changes later. Initialisation  Initialize the baseline database ( do NOT do twice ): $ samhain -t init [snip] CRIT : [2018-03-04T22:01:33+0100] interface=<lstat>, msg=<No such file or directory>, userid=<0>, path=</var/lib/urandom/random-seed> CRIT : [2018-03-04T22:01:33+0100] msg=<POLICY MISSING>, path=</var/lib/urandom/random-seed> MARK : [2018-03-04T22:01:33+0100] msg=<File check completed.>, time=<593>, kBps=<9067.752000> NOTICE : [2018-03-04T22:01:33+0100] msg=<Finished writing baseline database.> ALERT : [2018-03-04T22:01:33+0100] msg=<EXIT>, program=<Samhain>, status=<exit_success> Aaaaand a sheitload of errors and garble passed by on my screen for about ten minutes, including all kinds of critical issues on missing files and policies. This was on a worst-case linux, an archlinux halfway in the making (by me), and to be expected. I be reading them logs then. :D Usage  Run samhain : $ samhain -t check...",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "401b8190c4e25ae1a89f62efdd801abc",
    "u": "https://server.tymyrddin.dev/docs/users/passwords",
    "t": "Configuring password complexity ",
    "c": "Configuring password complexity  NIST has come to agree with Bill Burr’s changed mind and have now changed their password implementation criteria to match Mr. Burr’s new recommendations: Passphrases do not meet any complexity criteria, and use dictionary words. How is that secure? It is a phrase with distinct words separated by blank spaces. That makes it secure and very difficult to brute-force. Passphrases are more difficult to crack than traditional passwords, and they are easier for users to remember. And, there is the reality that many organizations are still using complex passwords that regularly expire, and you’ll have to abide by their rules if you can’t convince them otherwise. And besides, if you are using traditional passwords, you do want them to be strong enough to resist any sort of password attack. Pwquality  pwquality is a PAM module that allows configuring password complexity requirements for users. It is fairly easy to install on Ubuntu. sudo apt-get install libpam-pwquality Once installed, it automatically adds an entry into the /etc/pam.d/common-password file. The pam.d directory is just another location where PAM adds files for basic services like ssh , basic login , etc. The pwquality.conf file found in /etc/security , has many options the administrator can set for password quality. The lines just need to be uncommented and modified. Resources  You Might Not Need Complex, Alphanumeric Passwords After All The New NIST Guidelines: We Had it All Wrong Before",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "98afa3056fd07053498c95b6bf9b0c6c",
    "u": "https://server.tymyrddin.dev/docs/pki/lets-encrypt",
    "t": "Let’s Encrypt ",
    "c": "Let’s Encrypt  Web PKI being yet another golden goose in the context of the business model that underpins the digital world. , we also have an alternative. Let’s Encrypt is a free, automated, and open Certificate Authority. The below is for debian (stretch). Installation certbot  Certbot is in active development, so the packages provided by Debian with stable releases tend to be outdated. Get a more up-to-date package by enabling the backports repository. Create the /etc/apt/sources.list.d/letsencrypt.list file and append: # echo 'deb http://deb.debian.org/debian <distribution>-backports main contrib non-free' >> /etc/apt/sources.list.d/letsencrypt.list # echo 'deb-src http://deb.debian.org/debian <distribution>-backports main contrib non-free' >> /etc/apt/sources.list.d/letsencrypt.list Update the package list to pick up the new repository’s package information: # apt update Install on Nginx with: # apt install python-certbot-nginx -t <distribution>-backports Get SSL certificate  Get a certificate and have Certbot edit your Nginx configuration automatically to serve it, turning on HTTPS access in a single step. # certbot --nginx Verification  Check the /etc/letsencrypt/live/<your-domain>/ directory for the presence of cert.pem , privkey.pem and chain.pem . Certbot looks for a server_name directive that matches your domain. Open the server block file for your domain: # vi /etc/nginx/sites-available/yourdomain.tld If necessary, change the server_name directive to: server_name yourdomain.tld www.yourdomain.tld; Verify the syntax of your configuration file: # nginx -t Reload Nginx to load the new configuration: # systemctl reload nginx Firewall  Punch a hole in the firewall to allow HTTPS traffic (allow the Nginx Full profile) and delete the redundant Nginx HTTP profile allowance. Auto renewal  Certbot comes with a renew script in /etc/cron.d that will renew your certificates automatically before they expire (they last for 90 days). Test automatic renewal: # certbot renew --dry-run Configuration resources  Certbot instructions , EFF",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a7c610ca928d678ffe31fca44e269e18",
    "u": "https://server.tymyrddin.dev/docs/logfiles/log-commands",
    "t": "log commands ",
    "c": "log commands  Less, more and zmore  # less /var/log/syslog less opens the syslog log file at the top. Use the arrow keys to scroll down one line at a time, the space bar to scroll down one page at a time, or the mouse wheel to scroll through the file. Use the [Shift]+[g] combination to immediately go to the end of the log file. Grep and zgrep  # grep \"user@whateverdomain.tld\" /var/log/mail.log > /tmp/result.txt zgrep is useful for compressed files: # zgrep -i Error *.gz Tail  tail prints the last part of files to output, for example the last 10 lines with the -n option. Adding the -f option will continue watching the log file and print out the next line written to the file. As soon as a new line is written to syslog, it removes the oldest. # tail -f -n 10 /var/log/syslog Escape it with the [Ctrl]+[x] key combination. Last and lastb  The last command reads from the system file called /var/log/wtmp or the file designated by the -f option. Names of users and tty’s can be given, in which case last will show only those entries matching the arguments. Names of tty’s can be abbreviated, thus last 0 is the same as last tty0 . When last catches a process signal like SIGINT (generated by the interrupt key, usually control-C) or a SIGQUIT (generated by the quit key, usually control-\\), last will show how far it has searched through the file; in the case of the SIGINT signal, last will then terminate. For the login history of sysadmin: # last | grep sysadmin To find out when the system was last rebooted: # last reboot lastb is the same as last , except that by default it shows a log of the file /var/log/btmp , which contains all the bad login attempts. dmesg  dmesg displays by default all messages from the kernel ring buffer. Use the scroll wheel to browse through the buffer or pipe the output of dmesg to the less command. For example, to print the log entries for the user facility: # dmesg --facility=user | less",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0ce29b9aeed5f95a4e86803e38bb2bcd",
    "u": "https://server.tymyrddin.dev/docs/logfiles/intruder-path",
    "t": "Path of a common intruder ",
    "c": "Path of a common intruder  Scenario  Assume an intruder gains access to the system through a vulnerability. Most likely, he/she wishes to gain elevated privileges in order to be able to take action, like install software, get user data that can possibly give access to other servers or systems, destroy or alter audit trails to hide tracks of having been there, etc. This can be done by installing malware (a rootkit) or manually. Assume he/she is successful. Note that there are more than zero users with uid=0 (superuser privileges)| Less likely but possible, the intruder creates a user without password. Note a new user has been created He or she will try to capture information of other computers on the same network (in particular users and passwords). This can be done with a sniffer. Note that a network interface is put into promiscuous mode. Binaries of the sniffer, configuration files, captured information are usually hidden in the /dev directory. Note regular files appearing in /dev A somewhat more knowledgeable intruder will try to modify certain binaries of the system to conceal the indicators of their presence ( su to not let on to elevated privileges, ifconfig to hide that the network interface is in promiscuous mode, ls to hide where their files are, ps to conceal the execution of the sniffer, find, netstat, top, etc). FIA’s can detect these alterations Important events for reconstructing an attack  Logging off and logging in (location) User and group management (changes in permissions and ability to gain access) Security policy changes Shutdowns and restarts System changes: Changes to the operating system (hardware and/or software events, configuration changes) Changes to hardware configuration Device driver installation Starting and stopping of services Applications: Many utilities send messages to application related logs Exceptions to this are web servers and FTP servers (have their own logging mechanisms, but can be included in syslog ) Accounts and group record changes: Creation, deletion and modification of users Modifications to groups",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "45d514489b18b4f5874d0f910dab7101",
    "u": "https://server.tymyrddin.dev/docs/vnc/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Virtual network computing, or VNC, is a graphical desktop sharing system that uses the Remote Frame Buffer protocol (RFB) to allow for controlling a server remotely. A VNC server transfers keyboard and mouse events, and displays the remote host’s screen via a network connection (relaying the graphical screen updates back). Servers are best set up as minimal environment, and installing GUI might lead to high hardware utilization. Virtual Network Computing (VNC) is a graphical desktop sharing system to remotely control another computer. Why?  In our context, only to be used as a fallback when ssh fails. How?  TightVNC TigerVNC Securing sessions Notes  VNC is not an encrypted protocol and can be subject to packet sniffing. Sessions can be secured: TightVNC is lightweight and connections will be smooth and stable even on slower internet connections. SSH tunnelling can be used. TigerVNC supports security schemes such as X509 that combines standard VNC authentication with GNUTLS encryption and server identification. <=",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ffcf9816017dbdcdc6bbfbc41f5c218d",
    "u": "https://server.tymyrddin.dev/docs/firewall/nftables",
    "t": "NFTables ",
    "c": "NFTables  Available upstream since Linux kernel 3.13. Basic idea  Got an idea! Working on it … Warning: untested! flush ruleset table inet filter { set inet filter tcp_port_out { type inet_service; elements = { 53, # DNS 11371, # OpenPGP HTTP Keyserver 2200, # SSH 80, # HTTP 443, # HTTPS } } set inet filter tcp_port_in { type inet_service; elements = { 2200, # SSH } } set inet filter udp_port_out { type inet_service; elements = { 53, # DNS 123, # NTP } } set inet filter udp_port_in { type inet_service; elements = { } } set inet filter user_out { type uid; elements = { } } set inet filter user_in { type uid; elements = { } } set tcp_scan_ports { type inet_service; elements = { 22, # SSH 23, # Telnet 1433, # MS SQL Login 8080, # HTTP Alternate 50661, # Apple Xsan } } set udp_scan_ports { type inet_service; elements = { 53, # DNS 5060, # SIP 53413, # Netis backdoor } } chain base_checks { # allow established/related connections ct state {established, related} accept # early drop of invalid connections ct state invalid log prefix \"Invalid \" drop } chain input { type filter hook input priority 0; # Accept on localhost iifname lo accept jump base_checks # Accept neighbour discovery ip6 nexthdr icmpv6 icmpv6 type { nd-neighbor-solicit, nd-router-advert, \\ nd-neighbor-advert } accept # Accept ping ip protocol icmp type { echo-request } accept # Allow IGMP ip protocol igmp accept tcp dport @tcp_port_in ct state new accept udp dport @udp_port_in ct state new accept meta skuid @user_in ct state new accept tcp dport @tcp_scan_ports drop udp dport @udp_scan_ports drop # Count and drop any other traffic counter log prefix \"Drop_in \" drop } # Not a gateway. We do not forward. chain forward { type filter hook forward priority 0; policy drop; jump base_checks } chain output { type filter hook output priority 0; # Accept from localhost oifname lo accept jump base_checks # Accept neighbour discovery ip6 nexthdr icmpv6 icmpv6 type { nd-neighbor-solicit, nd-router-advert, \\ nd-neighbor-advert } accept # Accept ping ip protocol icmp type { echo-request } accept tcp dport @tcp_port_out ct state new accept udp dport @udp_port_out ct state new accept meta skuid @user_out ct state new accept # Count and drop any other traffic counter log prefix \"Drop_out \" drop } kernel  [*] Networking support ---> Networking options ---> [*] Network packet filtering framework (Netfilter) ---> Core Netfilter Configuration ---> <M> Netfilter nf_tables support <M> Netfilter nf_tables conntrack module <M> Netfilter nf_tables counter module <M> Netfilter nf_tables log module <M> Netfilter nf_tables limit module <M> Netfilter nf_tables masquerade support <M> Netfilter nf_tables nat module IP: Netfilter Configuration ---> <M> IPv4 nf_tables support <M> IPv4 nf_tables route chain support <M> IPv4 packet rejection <M> IPv4 NAT <M> IPv4 nf_tables nat chain support <M> IPv4 masquerade support <M> IPv4 masquerading support for nf_tables Configuration files  Create a main table, for example A file /etc/nftables/main_config.conf where elements can be added A file /etc/nftables/main.conf with a skeleton inet table Set up the activation scripts /etc/nftables.conf as startup script (flushes rule set) /etc/nftables/reload_main.conf as reload script (deletes table) SSHguard  To integrate with SSHguard , edit /etc/sshguard.conf and change the value of BACKEND : BACKEND=\"/usr/lib/sshguard/sshg-fw-nft-sets\" When starting or enabling the sshguard.service , two new tables named sshguard in the ip and ip6 address families are added which filter incoming traffic through sshguard’s list of IP addresses. The chains in the sshguard table have a priority of -10 and will be processed before other rules of lower priority.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "790f5a899ae9c454c96e353c14aa69a8",
    "u": "https://server.tymyrddin.dev/docs/encryption/openvpn",
    "t": "OpenVPN ",
    "c": "OpenVPN  Installation  # apt-get install openvpn Server configuration  The sample server configuration file that comes with OpenVPN is a good starting point. It will create a VPN using a virtual tun network interface (for routing), will listen for client connections on udp port 1194 , and distribute virtual addresses to connecting clients from the 10.8.0.0/24 subnet. # cd /etc/openvpn/server # cp /usr/share/openvpn/examples/server.conf . # vi /etc/openvpn/server/server.conf The server will start as root, but for security, can be set to drop to lower privileges after startup, by removing the semicolons (uncommenting) the user nobody and group nogroup directives. Also uncomment out the client-to-client directive if you want clients to not only be able to reach the server over VPN (the default), but also each other. Set the ca , cert , key , and dh parameters in the config file to point to the files generated in the PKI setup . If you have set the DH key size to 2048 instead of the default 1024, change dh dh1024.pem accordingly. For assigning the different clients static IP addresses from the OpenVPN server, uncomment client-config-dir ccd Enabling compression is not recommended; it opens the server up to the VORACLE attack vector. It is recommended to use OpenVPN over UDP, because TCP over TCP is a bad idea. Write and quit. Assign static IP addresses  Create the client configuration directory: # mkdir /etc/openvpn/ccd For each client, create a configuration file assigning it to a static IP address. For example: In /etc/openvpn/ccd/<clientname1> ifconfig-push 10.8.0.5 10.8.0.6 The first client will use 10.8.0.6 as its IP address, and 10.8.0.5 is the VPN tunnel endpoint. The second address is only used to route traffic through the tunnel. This is because each client uses a CIDR/30 network. Per client 4 IP addresses are used. In /etc/openvpn/ccd/<clientname2> ifconfig-push 10.8.0.9 10.8.0.10 And in /etc/openvpn/ccd/<clientname3> ifconfig-push 10.8.0.13 10.8.0.14 To use a virtual IP address range other than 10.8.0.0/24 , modify the server directive. Mind that the virtual IP address range must be a private range currently unused on the network. Firewall server  Limit the incoming OpenVPN connections to the IP addresses of the servers you want the backend server to connect with in the firewall. Start the OpenVPN server  # systemctl openvpn start Client configurations  On a client: Copy the example client configuration file # cd /etc/openvpn/client/ # cp /usr/share/openvpn/examples/client.conf . # vi /etc/openvpn/client.conf Make changes: Add the address of the OpenVPN server to the configuration file: Look for remote my-server-1 1194 and change my-server-1 into the IP address of the server. Look for cert client.crt and key client.key and change them to the names of the keys that were copied over. Firewall client  Punch a hole for the server address in your firewall. Fire it up!  # systemctl openvpn start",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2485ece87355ee5023d46b3c03bec24e",
    "u": "https://server.tymyrddin.dev/docs/vnc/tightvnc",
    "t": "TightVNC ",
    "c": "TightVNC  TightVNC is a fast and lightweight remote control package. This choice will ensure that our VNC connection will be smooth and stable even on slower internet connections. It encrypts VNC passwords sent over the net (DES-encrypted challenge-response scheme and the password is limited by 8 characters), but the rest of the traffic is sent in the clear and are a security risk. Recommended is using TightVNC with ssh (and that defeats our purpose of only using it when ssh fails) Installation  Install the Xfce desktop environment on the server: # apt-get install xfce4 xfce4-goodies Install the vnc server: # apt-get install tightvncserver Create a new user to access the server. # useradd vncuser Add the user to the sudo group: # usermod -aG sudo vncuser As the vncuser, set up a secure password and create the initial configuration files: vncuser@localhost $ vncserver You will require a password to access your desktops. Password: Verify: Creating default startup script /home/vncuser/.vnc/xstartup Starting applications specified in /home/vncuser/.vnc/xstartup Log file is /home/vncuser/.vnc/localhost.localdomain:1.log Enter and verify a password to access the server remotely. It must be between six and eight characters long. More than 8 characters will be truncated automatically. The process then creates the necessary default configuration files and connection information for the server. Configuration  Default for the service is on port 5901 (display port :1 ). Stop the service: $ vncserver -kill :1 Make a backup of the xstartup file: $ mv ~/.vnc/xstartup ~/.vnc/xstartup.old Create a new xstartup file and open it (empty file): $ vi ~/.vnc/xstartup To have VNC read the server user’s .Xresources file and launch Xfce (in the background), append: #!/bin/bash xrdb $HOME/.Xresources startxfce4 & Write and quit file, and (as root) make it executable. # chmod +x ~/.vnc/xstartup Restart VNC: $ vncserver Firewall  Open ports in the firewall for inbound communication. Control  For starting, stopping, and restarting the service, create a new (empty) systemd unit file /etc/systemd/system/vncserver@.service # vi /etc/systemd/system/vncserver@.service The @ symbol will allow for passing an argument (the VNC display port). Append: [Unit] Description=Start TightVNC server at startup After=syslog.target network.target [Service] Type=forking User=vncuser Group=vncuser WorkingDirectory=/home/vncuser PIDFile=/home/vncuser/.vnc/%H:%i.pid ExecStartPre=-/usr/bin/vncserver -kill :%i > /dev/null 2>&1 ExecStart=/usr/bin/vncserver -depth 24 -geometry 1280x800 :%i ExecStop=/usr/bin/vncserver -kill :%i [Install] WantedBy=multi-user.target Reload systemd manager configuration # systemctl daemon-reload Enable the unit file # systemctl enable vncserver@1.service Kill the vncserver $ vncserver -kill :1 And start it as any other systemd service. $ sudo systemctl start vncserver@1 Verify $ sudo systemctl status vncserver@1 Clients  Windows: TightVNC, RealVNC, or UltraVNC. MacOS: Apple Remote or RealVNC. Linux: vinagre, krdc, RealVNC, or TightVNC. Configuration resources  TightVNC",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e879fe1c9d9bc31e710fb0acbd9e7f41",
    "u": "https://server.tymyrddin.dev/docs/incidents/prevention",
    "t": "Preventing incidents ",
    "c": "Preventing incidents  Use the principle of least privilege . The idea is to give users as few permissions as possible. While the sudo command is useful, it is often misused. By default, anyone that is a member of the sudo group can use sudo to do whatever they want. Restrict sudo access to particular commands. In regard to network shares, it’s always best to default to read-only whenever possible. This is not just because of the chance of a user accidentally deleting data; it’s always possible for applications to malfunction and delete data as well. With a read-only share, the modification or deletion of files is not possible. Additional read-write shares can be created for those who need them, but if possible, always default to read-only. Physical security is every bit as important as securing operating systems, applications, and data. Ensure security updates are installed in a timely fashion, utilizing security applications such as failure monitors and firewalls, and ensuring secure settings for OpenSSH.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c28590bcea6bb8bd483e139bb30ad1e3",
    "u": "https://server.tymyrddin.dev/docs/incidents/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  A good incident response plan will include a list of guidelines to be followed with regard to implementing new servers and managing current ones (isolating compromised servers, strategically patching and recovering servers). Create guidelines for things such as user management, server management, application installations, security, and procedure documents. Why?  We always do our best to design the most stable and fault-tolerant server implementations we possibly can. We can not prevent every type of incident that could possibly happen but having a good plan in place and following that plan will lessen the likelihood an incident becomes a disaster. How?  Preventing incidents Using git for configuration management Implementing a backup plan Using bootable recovery media Notes  Do not store backups or old versions of software on the production system. Automate making backups. Mastering Ubuntu Server, Jay LaCroix, Fourth Edition",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "95d3a27393444a24400ba6800acb21ef",
    "u": "https://server.tymyrddin.dev/docs/logfiles/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Server logs contain information that cannot be found anywhere else. For example, server errors and user access records. Why?  Having the ability to review these logs gives the ability to determine what caused an issue on the server. How?  rsyslogd Log commands Path of a common intruder Logrotate Centralised logging Notes  Make sure logs are working properly. syslog on Debian contains everything except authentication-related messages. Authentication related events can be found in auth.log . Use it to investigate failed login attempts, brute-force attacks and other vulnerabilities related to user authorisation mechanisms. RedHat and CentOS based systems use the secure file for tracking all security related messages including authentication failures, sudo logins, ssh logins and other errors logged by the system security services daemon and is very useful for detecting hacking attempts. Additional logs that may give clues are faillog containing information on failed login attempts and can be used to detect attempted security breaches involving username/password hacking and brute-force attacks. Normally I am all for distributed and decentralised systems, but for an infrastructure with multiple servers, centralised logging saves a lot of time and energy. When setting up a machine to act as log server, harden it and only use it to collect logs from other machines on your network. It should not be running anything else. Log what is needed to track the path of a common intruder . If and when it is all running well, consider setting up for intrusion detection and log correlation.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d7db2b4d3470b6d526b682e7c02c6e78",
    "u": "https://server.tymyrddin.dev/docs/pki/tls-ssl",
    "t": "TLS/SSL ",
    "c": "TLS/SSL  The CA is always the first subsystem to be configured; every other subsystem depends on the CA for its configuration. The CA, along with setting up the CA hierarchy for the PKI, issues certificates which every subsystem uses to function and sets up a security domain which establishes trusted relationships between subsystems. Installation  On all systems and subsystems install openssl. # apt-get install openssl Use the script that comes with the openssl package: # /usr/lib/ssl/misc/CA.pl -newca The script will take you through all the steps of creating your CA. The fields do not matter much. It is rather self-explanatory. Configuration  The script has created a new directory demoCA with the CA’s private key and public key/certificate in it. Demo useful. # vi /etc/ssl/openssl.cnf Change: dir = /etc/ssl/ca ... default_days = 730 default_bits = 2048 Edit the script too: # vi /usr/lib/ssl/misc/CA.pl Change: $DAYS=\"-days 730\"; # 2 year $CADAYS=\"-days 3650\"; # 10 years ... default_bits = 2048 And change (further down): system (\"$REQ -new -keyout \" . to system (\"$REQ -newkey rsa:2048 -keyout \" . Generating keys  For creating digital certificates for servers on your LAN, for VPN clients or for whatever service you need to use with SSL, two steps are needed: To create a private key and a certificate request (Many questions. Not important, except that the CN of the certificate must be the domain name of the site you wish to secure): # /usr/lib/ssl/misc/CA.pl -newreq Sign the request and generate a newcert.pem with the signed certificate. You will have to enter the password for your CA key which you supplied when creating the CA key, certificate and store. # /usr/lib/ssl/misc/CA.pl -sign The certificate’s key has a passphrase assigned during the -newreq phase. If you want your software to be able to autostart this won’t work. To remove a passphrase: # openssl rsa -in newkey.pem -out newkey.nopass.pem Rename newkey.pem and newcert.pem to something useful, like hostname.key and hostname.cert . Configuration resources  OpenSSL PKI Tutorial v1.1 Building a Root CA and an Intermediate CA using OpenSSL and Debian Stretch",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5c7f02a776f445962324450dcfb7f440",
    "u": "https://server.tymyrddin.dev/docs/firewall/pf",
    "t": "Packet filtering ",
    "c": "Packet filtering  PF is a packet filtering tool with simple syntax, user-friendliness, and extensive features. The packet filtering takes place in the kernel. A pseudo-device, /dev/pf , allows userland processes to control the behaviour of the packet filter ( ioctl interface). There are commands to enable and disable a filter, load rule sets, add and remove individual rules or state table entries, and retrieve statistics. The most commonly used functions are covered by pfctl . Configuration resources  OpenBSD Handbook Packet Filter",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7b89826a04dd3131264722bfb7878414",
    "u": "https://server.tymyrddin.dev/docs/firewall/fail2ban",
    "t": "Fail2ban ",
    "c": "Fail2ban  Note: Fail2Ban can reduce the rate of incorrect authentications attempts but cannot eliminate the risk weak authentication presents. Installation  Installing fail2ban package in Debian: # apt-get install fail2ban Check it was properly installed: # fail2ban-client -h Configuration  To configure fail2ban, make a local copy of the jail.conf file in /etc/fail2ban : # cd /etc/fail2ban # cp jail.conf jail.local Edit the file: # vi jail.local Set the IPs you want fail2ban to ignore (the list of clients that are not subject to the fail2ban policies), the ban time (in seconds) and maximum number of user attempts: [DEFAULT] # \"ignoreip\" can be an IP address, a CIDR mask or a DNS host ignoreip = 127.0.0.1 bantime = 3600 maxretry = 3 Jails are the rules which fail2ban apply to a given application/log. To enable log monitoring for Nginx login attempts, enable the nginx-http-auth jail: [nginx-http-auth] enabled = true filter = nginx-http-auth port = http,https logpath = /var/log/nginx/error.log maxretry = 6 For apache: [apache] enabled = true port = http,https filter = apache-auth logpath = /var/log/apache*/*error.log maxretry = 6 To tweak or add log filters, see the files in /etc/fail2ban/filter.d . Restart fail2ban. Test  To test fail2ban, look at the iptable rules before and after attempting to log in to a service that fail2ban is monitoring from another machine and look at the iptable rules to see if that IP source gets added: # iptables -L Usage  To check if an IP is banned (in Nginx): $ sudo fail2ban-client status nginx-naxsi To unban an IP address: $ sudo fail2ban-client set nginx-naxsi unbanip xxx.xxx.xxx.xxx To see all jails: $ sudo fail2ban-client status [sudo] password for nina: Status |- Number of jail: 25 `- Jail list: http-get-dos, nginx-noscript, proftpd, WP-Login-POST, nginx-login, spam-log, wppingback, postfix-sasl, nginx-conn-limit, nginx-proxy, nginx-auth, block-scanners, nginx-naxsi, nginx-badbots, BASH, sshd, pam-generic, named-refused-udp, postfix, WP-Login, ssh-ddos, wordpress, webmin-auth, dovecot, ssh Note for Apache  Fail2ban scans log files like /var/log/apache/error_log , /var/log/auth.log and /var/log/apache/access.log and temporarily or persistently bans failure-prone addresses by updating existing firewall rules. Out of the box Fail2Ban comes with filters for various services (apache, courier, ssh, etc).",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "92ae258b797328e0d65cc2e9781b5526",
    "u": "https://server.tymyrddin.dev/docs/pki/problems",
    "t": "Problems ",
    "c": "Problems  PKI is failing by trying to be all things to all people and things. PKIs have experienced a hype and many companies and organizations announced to provide certification services to the general public. Only a few of these have succeeded and actually provide certification services that can be taken seriously. X.509 standard  X.509 is a complex standard and X.509 certificates are complex data structures with a lot of fields, many of which are critical and/or non-critical extension fields. Complex technology is not easy to deploy on a large-scale. Since Peter Gutmann from Auckland University published the X.509 Style Guide in 2000, little has improved. X.509 certificates are specified with ASN.1 and the resulting data structures are not very meaningful for humans (and hard to parse). The X.509 specification is scattered across many standards, drafts and amendments from multiple standard bodies, leading to confusion and numerous profiles that lack interoperability. Parts of the standard, even some that are related to key elements, are underspecified. That leads to ambiguity, unknown semantics and interoperability issues, like the country code, date/time formats in validity or path validation. Technical  Public key pairs must be generated in an efficient and secure (centralized or decentralized) way, and require a cryptographically strong pseudo-random bit generator, something which is not always available to end-users. Private keys must be securely stored in a personal security environment (and not a vulnerable endpoint), and for Web PKI public CA’s certificates must be made publicly available in a certificate repository or directory service. Hierarchical trust models are dangerous, because they provide a single point of attack. Alternative models (for example the mesh model) are poorly scalable in time and in space. Certificate authorities (CA’s) have to periodically send out a list of certificates that have been revoked (CRL’s), meaning that a user will not only have to get the corresponding certificates from the certification chain, but will also have to check that those certificates are not in the CRL. The definition and maintenance of a global name space is not as simple in practice. Cross-certification does not work in practice because competition is rule. Economical  The establishment and operation of a top CA requires large investments. One needs protection from adversaries trying to break into the facility, intercepting electromagnetic signals, and exploitation of other weaknesses of the used hardware and software, and one needs qualified personnel able to withstand all of the regulation and bureaucratic stuff. The ROI of a top CA is difficult to determine and quantify. Like many other infrastructure components, public key certificates do not provide a specific function in and of themselves, but provides only the means to secure functions and applications of other infrastructures. IOW, business cases for PKI’s are extremely hard to make. That part got solved, with some scary stuff happening, web PKI next in the chain, and hosting companies (re)selling certificates. Juridical  If a digital signature is generated according to some digital signature law, then somebody must be made liable if something goes wrong. If that is the Credential service provider (CSP), the insurance protection must be taken into account in a business case. As Bruce Schneier pointed out in Secrets and Lies , CA’s usually limit their liability to the protection of their private key. As the CA plays the role of a trusted third party users of certificates are put at a disadvantage. CA’s are like a notary who would only be liable to keep his stamp secure. Nothing changed much there either. The owner of a public key certificate cannot repudiate a signature that is generated with the appropriate signing key, which may lead to the situation in which a certificate owner may be held liable and accountable for statements that are digitally signed with the proper key, even if he or she does not know (and does not agree) with the statements. Social  In the real world, trust is based on two-way relationships and experiences that have been made over time. This can only insufficiently be modelled with hierarchical certificate models. Poor usability is a common feature of many products that employ (public key) cryptography. Secure cryptographic solutions and usability seem mutually exclusive. But then, there is not much focus on end users and UX design in general. What’s new? The users of public key cryptography are often not aware of the vulnerabilities and pitfalls. Privacy and security  X.509 uses features from other standards, like DNs from X.500 which are in itself complex and have little value and provides unanticipated attack vectors. SSL in the context of web browsers used to be target of several successful attacks, either directly on SSL (e.g. SSL renegotiation bug), the combination of https and http (SSL Strip), URL-forgery, and X.509-based attacks on ASN.1 and DN-parsing. Integration of PKI with the surrounding environment (end points, web applications) may allow compromise. Should a private key be compromised, an attacker would have access to data intended for the recipient. Attackers that gain access to private keys can also eavesdrop on content intended for a recipient and decrypt data as it’s collected. This is the biggest threat to the PKI system, because compromised keys require new keys to be issued, and old ones revoked. There is no easy, fast and effective method to revoke a root certificate. Anything less that a full compromise of the root key will tempt a CA to downplay the incident and revoke only certain certificates. This occurred with the DigiNotar-Hack, because the revocation of the root-CA would have interrupted the operation of many services. Revocation services are suspect to DoS-attacks. CAs are included in browsers by OS- and browser vendors without a common consistent policy. To be included in the trust store the vendor has to pay a fee. Only Microsoft requires a formal audit. As a result there is a sufficient number of weak and very weak CAs that are included in default certificate stores. In addition there is suspicion in the security community that governments use compelled certificates to tap Internet communication. Clients certificates and their attributes have zero security value, because there are CAs that do not validate the attributes including attributes with arbitrary OIDs (P. Gutmann). Some certificate stores contain funny root certificates that should be excluded on any serious security review. Alternatives  A variety of alternative approaches, ranging from simple workarounds to designing the application to sidestep PKI’s shortcomings, can help solve the problems inherent in the standard X.509 model. For example, in simple public key infrastructure (SPKI) and simple distributed security infrastructure (SDSI), keys are not bound to identities, but to roles or authorisations and names only have to be unique locally. Resources  PKI interoperability: Still an issue? A solution in the X.509 realm , Ahmad Samer Wazan Romain Laborde, François Barrere, Abdelmalek Benzekri, David W Chadwick, 2017 Why have public key infrastructures failed so far? , Javier Lopez, Rolf Oppliger, Gunther Pernu, 2005 PKI: It’s Not Dead, Just Resting , Peter Gutmann, 2002 The Emperor’s New Clothes: The Shocking Truth  Digital Signatures and Internet Commerce , Jane K. Winn, 2001 X.509 Style Guide, Peter Gutmann , 2000",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "43d8aedb9740b5cce9e491449c8e9bf8",
    "u": "https://server.tymyrddin.dev/docs/access/mac",
    "t": "Mandatory access control (MAC) ",
    "c": "Mandatory access control (MAC)  Mandatory Access Control (MAC) is a type of Access Control. It goes along with Discretionary Access Control, Role Based Access Control, and Rule Based Access Control. MAC is considered the strongest form of access control due to allowing more control over who has access over what. In a Linux system, there are multiple ways to implement MAC. Two of which being SELinux and AppArmor. SELinux  SELinux is a free open source software project that was developed by the U.S. National Security Agency. While it can theoretically be installed on any Linux distribution, Red Hat-type distributions are the only ones that come with it already set up and enabled. It uses code in Linux kernel modules, along with extended filesystem attributes, to help ensure that only authorised users and processes can access either sensitive files or system resources. There are three ways in which SELinux can be used: It can help prevent intruders from exploiting a system. It can be used to ensure that only users with the proper security clearance can access files that are labeled with a security classification. In addition to MAC, SELinux can also be used as a type of role-based access control. AppArmor  AppArmor is the MAC system that comes installed with the SUSE and the Ubuntu families of Linux. Although it’s designed to do pretty much the same job as SELinux, its mode of operation is substantially different: SELinux labels all system processes and all objects such as files, directories, or network ports. For files and directories, SELinux stores the labels in their respective inodes as extended attributes. (An inode is the basic filesystem component that contains all information about a file, except for the filename.) AppArmor uses pathname enforcement, which means that you specify the path to the executable file that you want AppArmor to control. This way, there’s no need to insert labels into the extended attributes of files or directories. With SELinux, you have system-wide protection out of the box. With AppArmor, you have a profile for each individual application. With either SELinux or AppArmor, you might occasionally find yourself having to create custom policy modules from scratch, especially if you’re dealing with either third-party applications or home-grown software. With AppArmor, this is easier, because the syntax for writing AppArmor profiles is much easier than the syntax for writing SELinux policies. And AppArmor comes with utilities that can help you automate the process. Just as SELinux can, AppArmor can help prevent malicious actors from ruining your day and can help protect user data. The AppArmor directory is located at /etc/apparmor.d . This directory contains all the AppArmor profiles. The sbin.dhclient and usr.* files are AppArmor profiles. The abstractions directory is a sort of “includes” folder that has partially written profiles that can be used and included in custom profiles. Part of the work has already been done. Additional profiles can be installed with: sudo apt install apparmor-profiles apparmor-profiles-extra",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "046648d4934643901a204f6789f5cab5",
    "u": "https://server.tymyrddin.dev/docs/firewall/iptables",
    "t": "iptables ",
    "c": "iptables  iptables is not the name of Linux’s firewall. It is just one way of interacting with netfilter which every Linux distribution comes with. As such, iptables is a command line utility for configuring the Linux kernel firewall implemented within the Netfilter project. And it gets complex rather quickly which increases the risk of making mistakes. For a bare metal server running only a dedicated application, such as a Schleuder list, iptables is the simplest (and minimalistic) choice. For Ubuntu, it comes with the Uncomplicated Firewall ( ufw ), which is an easy-to-use frontend for iptables. As of CentOS version 7, FirewallD replaces iptables as default. The four components of iptables  iptables has 4 different components to it that all come together to give the utility its overall functionality: Filter table - offers the basic protection that you’d expect a firewall to provide Network Address Translation table - connects the public interwebs to the private networks Mangle table - for mangling them packets as they go through the firewall Security table - only used by SELinux Install and enable IPTables  In case it is not installed and you wish to install it: # yum install iptables-services Start the service: # systemctl start iptables # systemctl start iptables6 Enable automatic start on system boot # systemctl enable iptables # systemctl enable iptables6 Check iptables service status # systemctl status iptables # systemctl status iptables6 Chains  INPUT - packets coming into the firewall FORWARD - packets routed to another NIC on the network; for packets on the local network that are being forwarded on. OUTPUT - packets going out of the firewall Rules  Status command  To list rules -L showing interface name, rule options, TOS masks, packet and byte counters -n , and IP address and port in numeric format without using DNS to resolve names -v : # iptables -L -n -v With line numbers (important for deleting or inserting new rules into the firewall): # iptables -n -L -v --line-numbers To display INPUT or OUTPUT chain rules: # iptables -L INPUT -n -v # iptables -L OUTPUT -n -v --line-numbers Deleting a rule  To delete line number 4 using -D to delete one or more rules from the selected chain: # iptables -D INPUT 4 Inserting a rule  # iptables -L INPUT -n --line-numbers Chain INPUT (policy DROP) num target prot opt source destination 1 DROP all -- xxx.xxx.xxx.1 0.0.0.0/0 2 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state NEW,ESTABLISHED Inserting a rule between 1 and 2: # iptables -I INPUT 2 -s xxx.xxx.xxx.2 -j DROP Gives: # iptables -L INPUT -n --line-numbers Chain INPUT (policy DROP) num target prot opt source destination 1 DROP all -- xxx.xxx.xxx.1 0.0.0.0/0 2 DROP all -- xxx.xxx.xxx.2 0.0.0.0/0 3 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state NEW,ESTABLISHED Saving the rules  For saving the rules so they can be loaded at every reboot (you need to have iptables-persistent installed) # iptables-save > /etc/iptables/rules.v4 # ip6tables-save > /etc/iptables/rules.v6 Stop/Restart  Some distros like CentOS have installed a service called iptables to start and stop the firewall and a configuration file to configure it. For all other distros, iptables is a command, not a service. If you edited the configuration file manually, you have to reload iptables. Or load it directly through iptables: # iptables-restore < /etc/iptables/iptables.rules Usage  To deny all incoming and allow all outgoing connections ON A BARE METAL MACHINE where you have ACCESS TO THE CONSOLE: # Set default chain policies iptables -P INPUT DROP iptables -P FORWARD DROP iptables -P OUTPUT ACCEPT # Accept on localhost iptables -A INPUT -i lo -j ACCEPT iptables -A OUTPUT -o lo -j ACCEPT # Allow established sessions to receive traffic iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT SSH  For SSH access (-I inserts it before all other rules in INPUT): # iptables -I INPUT -p tcp --dport 22 -j ACCEPT If your SSH service is listening on another port, use that port instead of 22. OpenVPN  Create an iptables rule for NAT forwarding. An example (assuming the interface to forward to is named eth0): # iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE If the server cannot be pinged through the VPN, rules to open up TUN/TAP interfaces to all traffic may be needed: # iptables -A INPUT -i tun+ -j ACCEPT # iptables -A FORWARD -i tun+ -j ACCEPT # iptables -A INPUT -i tap+ -j ACCEPT # iptables -A FORWARD -i tap+ -j ACCEPT Set up rules for accepting connections from the OpenVPN port (default 1194) and through the physical interface, and make the changes permanent. SMTP Secure Sockets Layer  With SMTP Secure Sockets Layer (SSL) enabled, allow connections to port 587 (similar for 465). Add the rule for this port: # iptables -I INPUT 2 -p tcp --dport 587 -j ACCEPT Add the POP and IMAP ports and their secure counterparts: # iptables -I INPUT 3 -p tcp --dport 110 -j ACCEPT # iptables -I INPUT 4 -p tcp --dport 143 -j ACCEPT # iptables -I INPUT 5 -p tcp --dport 993 -j ACCEPT # iptables -I INPUT 6 -p tcp --dport 995 -j ACCEPT Save the iptables rules and restart iptables.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4b4c9c8b914e5d29f5b83b3a52376968",
    "u": "https://server.tymyrddin.dev/docs/firewall/ufw",
    "t": "UFW ",
    "c": "UFW  ufw is a program for managing a netfilter firewall with ease. It uses a command-line interface consisting of a small number of simple commands. Installation  On the backend server, install Uncomplicated Firewall (UFW) for configuring iptables. # apt-get install ufw Control  Start and enable: # systemctl start ufw # systemctl enable ufw Usage  To deny all incoming and allow all outgoing connections: # ufw default allow outgoing # default deny incoming SSH  # ufw allow ssh/tcp Or if you have changed port: # ufw allow <port>/tcp Nginx HTTP  # ufw allow 'Nginx HTTP' Nginx HTTPS  To allow HTTPS traffic, allow the Nginx Full profile and delete the redundant Nginx HTTP profile allowance: # ufw allow 'Nginx Full' # ufw delete allow 'Nginx HTTP' Logging  # ufw logging on OpenVPN  For openvpn: # vi /etc/default/ufw To allow ufw forwarding (VPN) traffic, append: DEFAULT_FORWARD_POLICY=\"ACCEPT\" Write and quit. Change /etc/ufw/before.rules : # NAT (Network Address Translation) table rules *nat :POSTROUTING ACCEPT [0:0] # Allow traffic from clients to the interface -A POSTROUTING -s 10.8.0.0/24 -o interface -j MASQUERADE # Optionally duplicate this line for each subnet if your setup requires it -A POSTROUTING -s 10.8.1.0/24 -o interface -j MASQUERADE # do not delete the \"COMMIT\" line or the NAT table rules above will not be processed COMMIT # Don't delete these required lines, otherwise there will be errors *filter ... Write and quit. Open the chosen openvpn port (default 1194/udp): # ufw allow 1194/udp Reload/restart ufw: # ufw reload",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "62e007e849431769363e8bca2a580393",
    "u": "https://server.tymyrddin.dev/docs/incidents/backup",
    "t": "Implementing a backup plan ",
    "c": "Implementing a backup plan  Backups are one of those things that some people don’t seem to take seriously until it’s too late. Data loss can be a catastrophic event for an organisation, so it’s imperative that you implement a solid backup plan. There’s no one best backup solution, since it all depends on what kind of data you need to secure, and what software and hardware resources are available to you. This may mean that you’ll need to make some compromises, such as creating regular snapshots of your database server’s storage volume or regularly dumping a backup of your important databases to an external storage device. The rsync utility is one of the most valuable pieces of software around to server administrators. It allows us to do some really wonderful things. In some cases, it can save us quite a bit of money. For example, online backup solutions are wonderful in the sense that we can use them to store off-site copies of our important files. And depending on the volume of data, they can be quite expensive. With rsync , we can back up our data in much the same way, with not only our current files copied over to a backup target but also differentials. If we have another server to send the backup to, even better. sudo rsync -a /home /backup Where the -a option, the archive mode, is a wrapper option that includes the following options all at the same time: -rlptgoD To point rsync to another server, rather than to another directory on the local server: sudo rsync -av /home/myuser admin@IP_ADDRESS:/backup By default, rsync copies data between two locations, but it doesn’t remove anything. With the --delete option, you can synchronise two points, telling rsync to make them the same by allowing it to delete files in the target that are no longer in the source. Incremental backups  sudo rsync -avb --delete --backup-dir=/backup/incremental /src /target Copying files from /src to /target , but now sending replaced files to the /backup/incremental directory. This means that when a file is going to be replaced on the target, the original file will be copied to /backup/incremental . This works because we used the -b option (backup) and the --backup-dir option, which means that the replaced files will not be renamed; they’ll simply be moved to the designated directory. This allows us to effectively perform incremental backups. Using the Bash shell to make incremental backups work even better: CURDATE=$(date +%m-%d-%Y) sudo rsync -avb --delete --backup-dir=/backup/incremental/$CURDATE /src /target Simple script  \"\"\" Simple backup script which just creates the root structure in an other folder and syncs everything which recursively lies within one of the source folders. For files bigger than a threshold they are first gziped.\"\"\" import argparse import gzip import os import shutil import sys import threading def parse_input (): parser = argparse . ArgumentParser () parser . add_argument ( '-target' , nargs = 1 , required = True , help = 'Target Backup folder' ) parser . add_argument ( '-source' , nargs = '+' , required = True , help = 'Source Files to be added' ) parser . add_argument ( '-compress' , nargs = 1 , type = int , help = 'Gzip threshold in bytes' , default = [ 100000 ]) # no input means show me the help if len ( sys . argv ) == 1 : parser . print_help () sys . exit () return parser . parse_args () def size_if_newer ( source , target ): # If newer it returns size, otherwise it returns False src_stat = os . stat ( source ) try : target_ts = os . stat ( target ) . st_mtime except FileNotFoundError : try : target_ts = os . stat ( target + '.gz' ) . st_mtime except FileNotFoundError : target_ts = 0 # The time difference of one second is necessary since subsecond accuracy # of os.st_mtime is striped by copy2 return src_stat . st_size if ( src_stat . st_mtime - target_ts > 1 ) else False def threaded_sync_file ( source , target , compress ): size = size_if_newer ( source , target ) if size : thread = threading . Thread ( target = transfer_file , args = ( source , target , size > compress )) thread . start () return thread def sync_file ( source , target , compress ): size = size_if_newer ( source , target ) if size : transfer_file ( source , target , size > compress ) def transfer_file ( source , target , compress ): \"\"\" Either copy or compress and copies the file \"\"\" try : if compress : with gzip . open ( target + '.gz' , 'wb' ) as target_fid : with open ( source , 'rb' ) as source_fid : target_fid . writelines ( source_fid ) print ( 'Compress {} ' . format ( source )) else : shutil . copy2 ( source , target ) print ( 'Copy {} ' . format ( source )) except FileNotFoundError : os . makedirs ( os . path . dirname ( target )) transfer_file ( source , target , compress ) def sync_root ( root , arg ): target = arg . target [ 0 ] compress = arg . compress [ 0 ] threads = [] for path , _ , files in os . walk ( root ): for source in files : source = path + '/' + source threads . append ( threaded_sync_file ( source , target + source , compress )) # sync_file(source, target + source, compress) for thread in threads : thread . join () if __name__ == '__main__' : arg = parse_input () print ( '### Start copy ####' ) for root in arg . source : sync_root ( root , arg ) print ( '### Done ###' )",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "515df808ba646b11fd5dda53057ac3e8",
    "u": "https://server.tymyrddin.dev/docs/users/disable-root",
    "t": "Disabling root access ",
    "c": "Disabling root access  Disabling the root login shell  When creating a virtual private server on a cloud service (Rackspace, DigitalOcean, Vultr), the cloud service will have you log in to that virtual machine as the root user. (Even with Ubuntu). The first thing that you will want to do is to create a normal user account and give it full sudo privileges. Then, log out of the root account and log back in with the normal user account, and disable the root account: sudo passwd -l root Disabling root SSH login  To disable the root SSH login, set #PermitRootLogin to no in /etc/ssh/sshd_config.conf . Disabling root using PAM  The PAM is “a powerful suite of shared libraries used to dynamically authenticate a user to applications (or services) in a Linux system”. The PAM settings are controlled by the conf file in /etc/pam.d or /etc/pam.conf . $ sudo vim /etc/pam.d/sshd OR $ sudo vim /etc/pam.d/login !!! WARNING !!! Editing the /etc/pam.d/* or /etc/pam.conf files can lock you out of your system. Add this rule in both files: auth required pam_listfile.so \\ onerr=succeed item=user sense=deny file=/etc/ssh/deniedusers auth : is the module type (or context). required : is a control-flag that means if the module is used, it must pass or the overall result will be fail, regardless of the status of other modules. pam_listfile.so : is a module which provides a way to deny or allow services based on an arbitrary file. onerr=succeed : module argument. item=user : module argument which specifies what is listed in the file and should be checked for. sense=deny : module argument which specifies action to take if found in file, if the item is NOT found in the file, then the opposite action is requested. file=/etc/ssh/deniedusers : module argument which specifies file containing one item per line. Next, create the file /etc/ssh/deniedusers and add the name root in it: $ sudo vim /etc/ssh/deniedusers Save the changes and close the file, then set the required permissions on it: $ sudo chmod 600 /etc/ssh/deniedusers From now on, the above rule will tell PAM to consult the /etc/ssh/deniedusers file and deny access to the SSH and login services for any listed user. Resources  How to Configure and Use PAM in Linux",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "210b3551e3bb184057550445304f8042",
    "u": "https://server.tymyrddin.dev/docs/services/systemctl",
    "t": "Auditing system services with systemctl ",
    "c": "Auditing system services with systemctl  On Linux systems that come with systemd , the systemctl command is pretty much a universal command. To view the status of services: sudo systemctl -t service --state=active With: -t service : We want to view information about the services – or, what used to be called daemons – on the system. --state=active : This specifies that we want to view information about all the system services that are actually running. This command shows the status of every service that’s running on your system. Generally, you do not want to see much information, although you might at times. Candidates for removal  Depending on what the server is for: smbd and nmbd indicates a Samba Process. Do you really need to export smb share on windows or other machine? telnet for bidirectional interactive text-oriented communication over internet or local area network? rlogin to log in to another host over network? rexec to execute shell commands on a remote computer. ftp to transfer files from one host to another host over Internet? automount to mount different file systems automatically to bring up network file system? named to run NameServer (DNS)? lpd to print to the server. inetd ? If you are running standalone applications like ssh which uses other standalone application like mysql , Apache , etc. then you don’t need inetd. portmap , an Open Network Computing Remote Procedure Call (ONC RPC) which uses rpc.portmap and rpcbind . If these processes are running, you are running NFS server. Really? NFS server is running unnoticed? Stop and disable  To stop a service, then prevent it from restarting at reboot: sudo systemctl stop <service> sudo systemctl disable <service> Example: sudo systemctl stop smbd sudo systemctl disable smbd",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "42e33c9f2848bdec00d57e3bd26d66dc",
    "u": "https://server.tymyrddin.dev/docs/logfiles/rsyslogd",
    "t": "Syslog ",
    "c": "Syslog  The rsyslogd service is a system utility providing support for message logging. Support of both internet and unix domain sockets enables this utility to be used for remote and local logging. Rsyslog is a multi-threaded implementation of syslogd. It is by default installed on Ubuntu, Debian, OpenSUSE and CentOS, next to systemd’s journald. A combined audit system for linux Allows for local and remote log collection. Remote logging makes day-to-day maintenance and incident response easier, log storage more secure, auditing more effective and analysis easier across multiple platforms. Allows for a single point of management Controlled per device in /etc/syslog.conf All reported messages are collected in a message file Log replication can copy the audit data to multiple remote-logging hosts It is recommended to also setup logrotate and compression. Setting it up  Set up a separate server for only logging purposes. Keep it in a secure location behind a (physical) firewall. Have no unnecessary services running on it. Delete all other user accounts. Add two snort boxes (IDS) that are actually syslog servers (yet have no IP address) and copy each packet intended for syslog server. With two boxes doing that independently from one another, court cases can be very convincingly supported. Thank you, Dean Bushmiller, that is a very, very good idea . Promiscuous mode Rule: Only listen for this IP address on this port (of syslog server) Server  Installation  # apt install rsyslog Start the service, enable it to auto-start at boot and check status: # systemctl start rsyslog # systemctl enable rsyslog # systemctl status rsyslog Configuration  Configuring rsyslog involves setting up input sources (where rsyslog receives logs), and destination rules for where and how logs are written. Rsyslog uses RainerScript for its configuration syntax. # vi /etc/rsyslog.conf By default, rsyslog uses the imjournal (importing structured log messages from systemd journal) and imusock modules (accepting syslog messages from applications running on the local system via Unix sockets). To configure it as a network and central logging server, the protocol (either UDP or TCP or both) it will use for remote syslog reception and the port it listens on must be configured. $ModLoad imudp $UDPServerRun <port> $ModLoad imtcp $InputTCPServerRun <port> Define the # rules for processing the remote logs . There be Templates . $template RemoteLogs,\"/var/log/remote/%HOSTNAME%/%PROGRAMNAME%.log\" *.* ?RemoteLogs & ~ Gather and write the received remote messages to distinct logs under /var/log/remote/ , based on the hostname client machine name and remote client application that generated the messages as defined in the RemoteLogs template. Record messages from all applications at all severity levels using the RemoteLogs template configuration. Stop processing the messages once it is written to a file. If not set, it would be written to the local files. OR for example, for allowing all hosts (but not applications) in a subnet XXX.XXX.XXX.XXX/24 to log to the machine, using only UDP. $ModLoad imudp $UDPServerRun <port> $AllowedSender UDP, XXX.XXX.XXX.XXX/24 $template RemoteStore, \"/var/log/remote/%HOSTNAME%/%timegenerated:1:10:date-rfc3339%\" :source, !isequal, \"localhost\" -?RemoteStore :source, isequal, \"last\" ~ Write and quit. Restart rsyslog daemon: # systemctl restart rsyslog Clients  Install rsyslog , and edit /etc/rsyslog.conf : *.* @XXX.XXX.XXX.XXX:<port> Configuration resources  rsyslog Configuring remote syslog from Unix/Linux and BSD/macOS Configuring remote syslog from Windows",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f637fbc5b318c3b6891cdbe0f3a52b35",
    "u": "https://server.tymyrddin.dev/docs/incidents/git",
    "t": "Using git for configuration management ",
    "c": "Using git for configuration management  One of the most valuable assets on a server is its configuration. This is second only to the data the server stores. Often, when we implement new technology on a server, we’ll spend a great deal of time editing configuration files all over the server to make it work as best as we can. This can include any number of things, from Apache virtual host files to DHCP server configuration, DNS zone files, and more. If a server were to encounter a disaster from which the only recourse was to completely rebuild it, the last thing we’d want to do is re-engineer all of this configuration from scratch. This is where Git comes in. Git isn’t just useful for software engineers. It is also a good tool we can leverage for keeping track of configuration files on our servers, for documentation, and for developing guidelines. When we make configuration changes, we can push the changes back to our Git server. If for some reason we need to restore the configuration after a server fails or is compromised via the config files, we can simply download configuration files from Git back onto the (new) server. Another useful aspect of this approach is that if an administrator implements a change to a configuration file that breaks a service, we can simply revert to a known working commit, and we’ll be immediately back up and running. Install git : sudo apt install git On the server, create a directory to host the repositories. For example, /git : sudo mkdir /git Modify this directory to be owned by the administrative user you use on your Ubuntu servers. Typically, this is the user that was created during the installation of the distribution. Use any user you want, just make sure the user is allowed to use OpenSSH to access the Git server. Change the ownership of the /git directory, so it is owned by this user. sudo chown lela:lela /git Create a Git repository in the /git directory. For Apache, a bare repository, a skeleton of a Git repository that does not contain any useful data, just some default configuration to allow it to act as a Git folder. To create the bare repository, cd into the /git directory and execute: git init --bare apache2 Initialized empty Git repository in /git/apache2/ On the client (the server that houses the configuration you want to place under version control), copy this bare repository by cloning it. To set that up, create a /git directory on the Apache server (or whatever kind of server you’re backing up) just as we did before. Then, cd into that directory and clone the repository: git clone IP_ADDRESS:/git/apache2 Replace the IP_address with either the IP address of the Git server or its hostname (if you’ve created a DNS entry for it). warning: You appear to have cloned an empty repository Make a backup of the current /etc/apache2 directory on the web server, in case we make a mistake while converting it to being version controlled: sudo cp -rp /etc/apache2 /etc/apache2.bak Then,move all the contents of /etc/apache2 into the repository: sudo mv /etc/apache2/* /git/apache2 The /etc/apache2 directory is now empty. Be careful not to restart Apache at this point; it won’t see its configuration files and will fail. Remove the (now empty) /etc/apache2 directory: sudo rm /etc/apache2 Make sure that Apache’s files are owned by root. Using the chown command, as we normally would to change ownership, we’ll also change the .git directory to be owned by root as well. We don’t want that, because the user responsible for pushing changes should be the owner of the .git folder. To change the ownership of the files to root, without touching hidden directories such as .git : sudo find /git/apache2 -name '.?*' -prune -o -exec chown root:root {} + Create a symbolic link to the Git repository so the apache2 daemon can find it: sudo ln -s /git/apache2 /etc/apache2 Check with: ls -l /etc | grep apache2 Reloading Apache, nothing should change, and it should find the same configuration files as it did before. sudo systemctl reload apache2 To push the changes back to the Git server, associate the files within the /git/apache2 directory into version control: git add . If you run the git status command from within your Git repository, you should see output indicating that Git has new files that haven’t been committed yet. A Git commit simply finalizes the changes locally. Basically, it packages up your current changes to prepare them for being copied to the server. To create a commit of all the files we’ve added so far, cd into the /git/apache2 directory and run: git commit -a -m \"Initial commit.\" the -a option tells Git to include anything that’s changed in the repository. The -m option allows attaching a message to the commit, which is required. If you don’t use the -m option, it will open your default text editor and allow you to add a comment from there. Push the changes back to the Git server: git push origin main By default, the git suite of commands utilizes OpenSSH, so our git push command should create an ssh connection back to the Git server and push the files there. You won’t be able to inspect the contents of the Git directory on your Git server, because it won’t contain the same file structure as your original directory. But when you pull a Git repository though, the resulting directory structure will be just as you left it. If you need to restore a repository onto another server, all you should need to do is perform a Git clone . To clone the repository into your current working directory: git clone IP_ADDRESS:/git/apache2 And each time you make changes to the configuration files, you can perform a git commit and then push the changes up to the server to keep the content safe: git commit -a -m \"Updated config: details.\" git push origin main To revert changes should the configuration get changed with non-working files, locate a known working commit and get its commit hash. A good method is using the tig command. The tig package must be installed for this to work: sudo apt install tig To use it, execute the tig command from within a Git repository. This will give a semi-graphical interface to browse through the Git commits. Select the best commit to go back to and get the commit hash. Exit tig by pressing q , then revert to that commit: git checkout <commit hash> Test the application to make sure that the issue is completely fixed. When finished testing, you can make the change permanent. Switch back to the most recent commit: git checkout main Then, permanently switch back to the commit that was found to be working properly: git revert --no-commit <commit hash> Then, commit the reverted Git repository and push it back to the server: git commit -a -m \"The previous commit broke the application. Reverting.\" git push origin main",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "760863b7ad4682ee152a2fbaeeb6164c",
    "u": "https://server.tymyrddin.dev/docs/encryption/ssh",
    "t": "Installing SSH ",
    "c": "Installing SSH  SSH (Secure Shell) is used for managing networks, operating systems, and configurations. It is also used inside many file transfer tools and configuration management tools. Functionally SSH keys resemble passwords. SSH keys are a pair of cryptographic keys using a public key cryptosystem that can be used to authenticate to an SSH server as an alternative to password-based logins. A private and public key pair are created prior to authentication. The private key is kept secret and secure by the user, while the public key can be shared with anyone. The advantage SSH authentication has over traditional password authentication is that you can be authenticated by the server without having to send your password over the network. Anyone eavesdropping on unencrypted connections will not be able to intercept and crack the password. It also allows for disabling password-based authentication. openSSH server  # apt-get install openssh-server # systemctl enable ssh # systemctl start ssh Control  On Debian, the default behaviour of an OpenSSH server is that it will start automatically as soon as it is installed. Verify it is running: # systemctl status ssh If it is not running, try to start it with: # systemctl start ssh Stop it with # systemctl stop ssh If you wish to disable OpenSSH server from starting up at boot: # systemctl disable ssh And enable for starting up at boot: # systemctl enable ssh Filtering  Allow SSH connections in the firewall. openSSH client  § sudo apt-get install openssh-client Generate a key Punch a hole in the firewall If ufw is installed on client, open port (22, oruse the port you need) Copy key to server. Connect and login. Resources  OpenSSH Security OpenBSD Security",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b85647f9699ff39e83fb859122f1c48a",
    "u": "https://server.tymyrddin.dev/docs/ids/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  A host-based intrusion detection system (HIDS) is a system that monitors a host on which it is installed to detect an intrusion and/or misuse, and responds by logging the activity and notifying the system administrators. Why?  Defend against a live attack How?  Samhain Maltrail Notes  Install HIDS right after installing the system. Tripwire creates a database of information related to your system, then compares that to what it finds when ran regularly, which it should, in order to get some real use out of it. Rkhunter is a Unix-based tool that scans for rootkits, backdoors and possible local exploits. Samhain provides file integrity checking, log file monitoring/analysis, rootkit detection, port monitoring, detection of rogue SUID executables, and hidden processes. Like having tripwire and rkhunter rolled into one. <=",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "06bf0b23ed4e96afda5a27a1e16f250e",
    "u": "https://server.tymyrddin.dev/docs/pki/internal-pki",
    "t": "Internal PKI ",
    "c": "Internal PKI  An Internal PKI consists of A master-your-own master Certificate Authority (CA) certificate and key which is used to sign each of the server and client certificates. A separate certificate (also known as a public key) and private key for the server and each client. The most secure way of doing this is to generate the Certificate Authority keys on a stand-alone (not Internet-connected) machine in a secure location. Master Certificate Authority (CA)  easy-rsa is a CLI utility to build and manage a PKI CA. It has a quickstart documentation and OpenVPN has example files. cd /etc/openvpn/ mkdir easy-rsa cd easy-rsa cp -r /usr/share/doc/openvpn/examples/easy-rsa/2.0/* . Edit the /etc/openvpn/easy-rsa/vars file #vi /etc/openvpn/easy-rsa/vars Append content to some of its variables. This will make the next step in the process faster. You can also skip this. The only parameter which must be explicitly entered is the Common Name. Now create the Certificate Authority Certificate and Key: # source vars # ./clean-all # ./build-ca Generating a 2048 bit RSA private key ............++++++ ...........++++++ writing new private key to 'ca.key' ----- You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [KG]: State or Province Name (full name) [NA]: Locality Name (eg, city) [BISHKEK]: Organization Name (eg, company) [OpenVPN-TEST]: Organizational Unit Name (eg, section) []: Common Name (eg, your name or your server's hostname) []: <hostname> Email Address [me@myhost.mydomain]: Hit enter, and again, and again … Later more master certificates and keys can be added, and when doing so do NOT use the ./clean-all instruction again. It wipes the Certificate Authority. Server key  Generate the server certificate and key with: # ./build-key-server <servername> Hit enter, and again, and again … including when it asks you to add a pass phrase. This is between servers. When it asks you if you wish to sign, answers yes, and you also want to commit. Client keys  For security, each client will get its own certificate and key. Per client: # ./build-key <clientname> Hit enter, and again, and again … including when it asks you to add a pass phrase. This is between servers. When it asks you if you wish to sign, answers yes, and you also want to commit. Diffie-Hellman parameters  Use the build-dh script to determine the encryption parameters necessary for the server end of a SSL/​TLS connection: ./build-dh And the system will get very busy with prime numbers. Copy keys  In the most secure possible way (for instance with scp ), copy keys and certs to their respective locations. ca.crt , dh2048.pem , <servername>.crt , and <servername>.key to /etc/openvpn on <servername> ca.crt , <clientname>.crt , and <clientname>.key to /etc/openvpn on <clientname> for each client server. Security improvement  All keys were created, signed and then distributed to the clients. A more secure way would be to generate the keys in their locations, submit a Certificate Signing Request (CSR) to the key-signing machine or transfer the CSR to the offline CA, the key-signing machine could have processed the request and returned a signed certificate which could have been transferred back to the clients. That way, the secret .key files stay on the machine on which they were generated.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "29f3ee54c8f211d86ecd5a113d66b2fc",
    "u": "https://server.tymyrddin.dev/docs/encryption/jumping",
    "t": "Jumping hosts ",
    "c": "Jumping hosts  Sometimes it is only possible to access a remote server using ssh by first logging in to another server (or firewall/jump host). This means having to authenticate twice and the chain can be long and not limited to just two hosts. I can only access the remote “Backend server” via ssh by first login into an intermediary Firewall/Bastion server called “jumphost”. First, login to jumphost: $ ssh user@jumphost Next, ssh through the intermediary system: $ ssh user@backendserver Or, use -tt , forcing “pseudo-tty” allocation: $ ssh -tt jumphost ssh -tt backendserver Alternatives to manually jumping about and making life much easier are ForwardAgent, ProxyCommand and ProxyJump. Starting from OpenSSH 7.3, released August 2016, the easiest way to pass through one or more jump hosts is with the ProxyJump directive. ForwardAgent  SSH agent forwarding can be used to make access to a server. It allows for the use of local SSH keys instead of leaving keys (without passphrases!) sitting on the server. The -A option enables forwarding of the authentication agent connection: ssh -A user@server.com It forwards the SSH authentication schema to the remote host to allow for the use of SSH on the jump host as if the user was on the local machine. A forwarding socket will be set up so that the SSH client on the first host can connect to the ssh-agent on the client machine to perform authentication on its behalf. The key is not forwarded, but the agent, meaning many keys can be added. Configuration  Create or open ~/.ssh/config : $ vi ~/.ssh/config Append the below entry (replacing XXX.XXX.XXX.XXX with actual server domain name or the IP): Host jumphost HostName XXX.XXX.XXX.XXX User user ForwardAgent yes Security problem  The problem is that while being connected to the first host, anyone with sufficient permission on the first host will be able to use that socket to connect to and use that local ssh-agent. A rogue root or evil admin with root access can eavesdrop on the ongoing session and impersonate the user for authentication to other servers during the time that user is connected to that server. A mentioned mitigation is using the -c option, which will show a confirmation window each time some program wants to use the agent to authenticate somewhere. Recommended is using ProxyCommand instead. Or even better, ProxyJump. ProxyCommand  ProxyCommand is an alternative for that is supposedly more secure than the above SSH agent forwarding. It is possible to connect via an intermediate machine using a SOCKS proxy. SOCKS4 and SOCKS5 proxies are both supported by OpenSSH. SOCKS5 allows for transparent traversal of a firewall or other application barrier by strong authentication with the help of GSS-API. Dynamic application-level port forwarding allows the outgoing port to be allocated on the fly thereby creating a proxy at the TCP session level. Using the ProxyCommand option to invoke netcat as the last in the chain is a variation of this for very old clients. The SSH protocol is forwarded by ‘’nc’’ (netcat) instead of ‘’ssh’’. Attention must also be paid to whether or not the username changes from host to host in the chain of SSH connections. The somewhat outdated netcat method does not allow a change of username. Other methods do. ssh -o ProxyCommand='ssh user@jumphost nc backendserver 22' user@backendserver The ‘’nc’’ command sets and establish a TCP pipe between jumphost (or firewall) and backendserver. Note: It is not possible to use both the ProxyJump and ProxyCommand directives in the same host configuration. The first one found is used and then the other blocked. Configuration  Create or open ~/.ssh/config $ vi ~/.ssh/config Append the below entry (replacing ‘’XXX.XXX.XXX.XXX’’ with actual server domain name or IP and ‘’user’’ with actual user): Host jumphost HostName XXX.XXX.XXX.XXX User user ProxyCommand ssh user@backendserver nc %h %p ProxyJump  Starting from OpenSSH 7.3, released August 2016, the easiest way to pass through one or more jump hosts is with the ProxyJump directive. The main method here is to use an SSH connection to forward the SSH protocol through one or more jump hosts, using the ProxyJump directive, to an SSH server running on a destination host (this method cannot be used if an intermediate host denies port forwarding). This is considered the most secure method because encryption is end-to-end. $ ssh -J user1@jumphost.whatever.org:22 anotherusername@XXX.XXX.XXX.XXX And can be chained: $ ssh -J user1@jumphost1.whatever.org:22,user2@jumphost2.whatever.org:2222 anotherusername@XXX.XXX.XXX.XXX Configuration  Host server2 HostName XXX.XXX.XXX.XXX ProxyJump user1@jumphost1.whatever.org:22 User anotherusername Host server3 HostName XXX.XXX.XXX.XXX ProxyJump user1@jumphost1.whatever.org:22,user2@jumphost2.whatever.org:2222 User anotherusername",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d0d5d020d5de0fa0c33d9726f2209558",
    "u": "https://server.tymyrddin.dev/docs/users/other-reqs",
    "t": "Configuring other password requirements ",
    "c": "Configuring other password requirements  Password expiration  Password expiration can be set in /etc/login.defs . scroll down to the “Password aging controls” section: PASS_MAX_DAYS : Default 99999 ; Sets the maximum number of days a password may be used. PASS_MIN_DAYS : Default 0 ; Sets the minimum number of days a user must keep their password before changing it. PASS_WARN_AGE : Default 7 ; Sets the number of days out from expiration that the system will warn the user. Password history  When configuring the password history of any system, it is generally considered best practice to remember the previous 10 passwords. This will ensure that the user’s passwords stay different and are not reused. Setting a minimum age of 1 and a password history of 10 means that somebody would need to wait at least 11 days before they’re able to get back to their original password. Usually this is enough to dissuade anyone from trying. To configure password history in Ubuntu, use /etc/pam.d/common-password : password : module type we are referencing. required : module where failure returns a failure to the PAM-API. pam_pwhistory.so : module that configures the password history requirements. remember=2 : option for the pam_pwhistory.so module to remember the last n passwords ( n = 2 ). These passwords are saved in /etc/security/opasswd . retry=3 : option for the pam_pwhistory.so module to prompt the user 3 times before returning a failure. Resources  pam.d(5) - Linux man page",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ec2e0d518232acf629a71c1d1e66e8b3",
    "u": "https://server.tymyrddin.dev/docs/firewall/firewalld",
    "t": "FirewallD ",
    "c": "FirewallD  FirewallD uses the concepts of zones and services, instead of IPTables chain and rules. As of CentOS version 7, FirewallD replaces IPTables as the default firewall management tool. FirewallD can be configured and managed using the firewall-cmd command line utility. Install and enable FirewallD  If not installed on the system, install with # yum install firewalld Firewalld is disabled by default. Check status with: # firewall-cmd --state Start and enable it on boot # systemctl start firewalld # systemctl enable firewalld Zones  Zones are predefined sets of rules specifying what traffic should be allowed based on the level of trust on the networks a computer is connected to. Network interfaces and sources can be assigned to a zone. From untrusted to trusted: Zones Meaning drop All incoming connections are dropped without any notification. Only outgoing connections are allowed. block All incoming connections are rejected with an icmp-host-prohibited message for IPv4 and icmp6-adm-prohibited for IPv6n. Only outgoing connections are allowed. public For use in untrusted public areas. Do not trust other computers on the network but allow selected incoming connections. external For use on external networks with NAT masquerading enabled - system acts as a gateway or router. Only selected incoming connections are allowed. internal For use on internal networks - system acts as a gateway or router. Other systems on the network are generally trusted. Only selected incoming connections are allowed. dmz Used for computers in a demilitarized zone, giving limited access to the rest of the network. Only selected incoming connections are allowed. work Used for work machines. Other computers on the network are generally trusted. Only selected incoming connections are allowed. home Used for home machines. Other computers on the network are generally trusted. Only selected incoming connections are allowed. trusted All network connections are accepted. Trust all of the computers in the network. The public zone is set as a default zone # firewall-cmd --get-default-zone Check what zones are used by network interface(s) # firewall-cmd --get-active-zones Print zone configuration settings # firewall-cmd --zone=public --list-all Configuration of all zones # firewall-cmd --list-all-zones Changing zone of an interface # firewall-cmd --zone=work --change-interface=eth1 Ports and services  Listing all default available services ( /usr/lib/firewalld/services/ contains xml files with details for each service): # firewall-cmd --get-services Allow incoming HTTP traffic (port 80) for interfaces in the public zone, only for the current session (runtime configuration) # firewall-cmd --zone=public --add-service=http To keep the port open after reboot use the --permanent flag # firewall-cmd --permanent --zone=public --add-service=http Forward traffic from one port to another on the same server # firewall-cmd --zone=external --add-forward-port=port=80:proto=tcp:toport=8080 Creating rulesets  The dmz (demilitarized) zone only allows SSH traffic. To change the default zone to dmz and to assign it to the eth0 interface # firewall-cmd --set-default-zone=dmz # firewall-cmd --zone=dmz --add-interface=eth0 To open HTTP and HTTPS ports add permanent service rules to the dmz zone # firewall-cmd --permanent --zone=dmz --add-service=http # firewall-cmd --permanent --zone=dmz --add-service=https Start building the firewall! Usage examples  OpenVPN  When using the default port 1194, enable the openvpn service. Otherwise, create a new service with a different port. # firewall-cmd --zone=public --add-service openvpn To add masquerade to the zone: # firewall-cmd --zone=server --add-masquerade Make changes permanent: # firewall-cmd --runtime-to-permanent SMTP  # firewall-cmd --permanent --add-service=smtp success Disable FirewallD  Stop the FirewallD service # systemctl stop firewalld Disable it to start automatically on system boot # systemctl disable firewalld Mask it to prevent it from being started by other services # systemctl mask --now firewalld",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b303e57e930a7387dd0f026591e283ab",
    "u": "https://server.tymyrddin.dev/docs/users/lxd",
    "t": "Dangers of the lxd group ",
    "c": "Dangers of the lxd group  Ubuntu places users (unless otherwise specified) into the lxd group. This group is known to be a point of privilege escalation and should be removed from any user that is a part of it. It is so popular that Linux-Smart-Enumeration even checks for it. Remove it from any user that has it assigned. Using adduser does not add the user to any predefined groups and should probably be used when adding new users. Resources  diego-treitos/linux-smart-enumeration",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c0d8a4632d1584ca3691a5bbeb45d4aa",
    "u": "https://server.tymyrddin.dev/docs/access/dac",
    "t": "Discretionary access control (DAC) ",
    "c": "Discretionary access control (DAC)  Discretionary Access Control (DAC) really just means that each user has the ability to control who can get into their stuff. Using chown  One unique thing about chown is that you must have sudo privileges to use it, even if you’re working with your own files in your own directory. You can use it to change the user of a file or directory, the group that’s associated with a file or directory, or both. To change the file ownership from me to username : sudo chown <username>>: <file> To change the group association without changing the user: sudo chown :<group> <file> To change the user without changing the group, list the username without the trailing colon: sudo chown <username> <file> These commands work the same way on a directory as they do on a file. If you also want to change the ownership and/or the group association of the contents of a directory, while also making the change on the directory itself, use the -R option. Using chmod  On Unix and Linux systems, you would use the chmod utility to set permissions values on files and directories. You can set permissions for the user of the file or directory, the group that’s associated with the file or directory, and more. There are two ways to use chmod to change permissions settings: symbolic and numerical. Symbolic  chmod u+x cript.sh chmod g+x script.sh chmod o+x script.sh chmod u+x,g+x script.sh chmod a+x script.sh The first three commands add the executable permission for the user, the group, and others. The fourth command adds executable permissions for both the user and the group, while the last command adds executable permissions for everybody (a for all). You can also remove the executable permissions by replacing + with - . Similarly, you can add or remove read ( r ) or write ( w ) permissions. Numerical  With the numerical method, you’ll use an octal value to represent the permissions settings on a file or directory. For the r , w , and x permissions, you assign the numerical values 4, 2, and 1, respectively. You would do this for the user, group, and others positions, and then add them all up to get the permissions value for the file or directory: User Group Others rwx rwx rwx 421 421 421 7 7 7 With all permissions set for everybody, a file or directory will have a value of 777 . Using SUID and SGID  When a regular file has its SUID permission set, whoever accesses the file will have the same privileges as the user of the file. A file with the SUID permission set has an s in the executable position for the user: -rwsr-xr-x. A file with the SGID permission set has an s in the executable position for the group: -rwxr-sr-x. The numerical value for SUID is 4000 , and for SGID is 2000 . To set SUID on a file, add 4000 to whichever permissions value to be set. As useful as it may be to have SUID or SGID permissions on executable files, it is just a necessary evil. While having SUID or SGID set on certain operating system files is essential for the operation of the system, it becomes a security risk when users can set SUID or SGID on other files. If intruders find an executable file that belongs to the root user and has the SUID bit set, they can use that to exploit the system. They may leave behind their own root-owned file with an SUID set, which will allow them to regain entry to the system the next time. If the intruder’s SUID file isn’t found, the intruder will still have access, even if the original problem has been fixed. Finding SUID or SGID files  sudo find / -type f \\( -perm -4000 -o -perm -2000 \\) > suid_sgid_files.txt / : searching through the entire filesystem. Since some directories are only accessible to someone with root privileges, we need to use sudo. -type f : searching for regular files, which includes executable program files and shell scripts. -perm 4000 : searching for files with the 4000 , or SUID permission bit set. -o : or operator. -perm 2000 : searching for files with the 2000 , or SGID , permission bit set. > : redirecting the output into the suid_sgid_files.txt text file. Preventing SUID and SGID usage on a partition  Prevent SUID and SGID usage on a partition by mounting it with the nosuid option. Do not set nosuid for the / partition. The operating system doesn’t function properly. Using extended file attributes to protect sensitive files  Extended file attributes will not keep intruders from accessing files, but they can help prevent sensitive files from being altered or deleted. a : You can append text to the end of a file that has this attribute, but you can’t overwrite it. Only someone with proper sudo privileges can set or delete this attribute. i : This makes a file immutable, and only someone with proper sudo privileges can set or delete it. Files with this attribute can’t be deleted or changed in any way. It is also not possible to create hard links to files that have this attribute. sudo chattr +a <file> Securing system configuration files  With IoT devices, you have a bit more to worry about than you do with normal servers. Normal servers are protected with a high degree of physical security, while IoT devices often have little to no physical security. In this context, the open “all can read” is often considered not a good idea. Yo ensure that all the configuration files on the devices are set with the 600 permissions setting: sudo find / -iname '*.conf' -exec chmod 600 {} \\; Only the owner of the files – root user or a system account – can read them. Test things thoroughly to ensure that you haven’t broken anything. Most things work just fine with their configuration files set to a 600 permissions setting, and some do not.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "47637dfb988018b65c4bae141f992eb3",
    "u": "https://server.tymyrddin.dev/docs/encryption/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Protect data at rest and data in transit. Why?  Confidentiality: This ensures that only people who are authorised to see the data can see it. Integrity: This ensures that original data has not been altered by unauthorised people. Availability: This ensures that sensitive data is always available, and can not be deleted by unauthorised people. How?  GNU Privacy Guard OpenVPN strongSwan Installing SSH Harden ssh server Key management Jumping hosts Notes  Using a VPN is a way to map out a private network that only the servers can see. Communication will be fully private and secure. Other applications can be configured to pass their traffic over the virtual interface that the VPN software exposes. This way, only services that are meant to be used by clients on the public internet need to be exposed on the public network. Install and configure ssh keys and make your servers require them to minimise the risk posed by adversaries. Harden the ssh server (also harden default service settings in web server and other services) Do not leave passphrase empty - An adversary who gets hold of your private key can otherwise connect to the hosts where you put you public key. Use a separate key per client you ssh from to the same server. If one key is compromised the damage is more limited and easier to clean up. Limit the number of clients you ssh from. If a client is compromised an adversary has your key, they can install a binary to get your passwords/passphrases. If any, disable the ssh-server on the client machine you ssh from. Limit the attack surface. Don’t make jump host chains too long. If one client in the chain is compromised, an adversary can use that to compromise the rest of the clients down the chain. Don’t use Agent Forwarding. While being connected to the first host, anyone with sufficient permission on the first host will be able to use that socket to connect to and use that local ssh-agent. A rogue root or evil admin with root access can eavesdrop on the ongoing session and impersonate the user for authentication to other servers during the time that user is connected to that server. Instead, use ProxyJump (it uses E2EE) or, if that is not possible, use ProxyCommand. In some countries, proving that you connected to a particular server is enough to be prosecuted, but SSH doesn’t provide a native way to obfuscate to whom it connects. For that, SSH with Tor can be used. Don’t ignore authentication errors. This warning is protecting you. The remote host key is different than the client knows. Make sure the key really did change. An adversary may be spoofing the host and continuing may give the adversary the information they seek to attack your server. Another reason to not use passwords.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5c9294ef74b9df0a751dfbbbf4ed5e45",
    "u": "https://server.tymyrddin.dev/docs/services/nmap",
    "t": "Auditing network services with nmap ",
    "c": "Auditing network services with nmap  To remotely aud* the network to see what services are running on each host, without having to log in to each one, you need a tool like nmap . * is available for all the major operating systems, including Windows. The version that’s in the Linux repositories is usually quite old. So, if you’re using something other than Kali, your can download nmap . sudo nmap -sS IP_ADDRESS -sS : The lowercase s denotes the type of scan that we want to do. The uppercase S denotes that we’re doing a SYN packet scan. IP_ADDRESS : scanning a single machine or a group of machines or an entire network. Something like Not shown: 996 closed ports : The fact that it’s showing all of these closed ports instead of filtered ports tells me that there’s no firewall on this machine. Port states  An Nmap scan will show the target machine’s ports in one of three states: filtered : This means that the port is blocked by a firewall. open : This means that the port is not blocked by a firewall and that the service that’s associated with that port is running. closed : This means that the port is not blocked by a firewall, and that the service that’s associated with that port is not running. Scan types  There are lots of different scanning options, each with its own purpose. The SYN packet scan that we’re using here is considered a stealthy type of scan because * generates less network traffic and fewer system log entries than certain other types of scans. With this type of scan, Nmap sends a SYN packet to a port on the target machine, as if * were trying to create a TCP connection to that machine. If the target machine responds with a SYN/ACK packet, * means that the port is in an open state and is ready to create the TCP connection. If the target machine responds with an RST packet, * means that the port is in a closed state. If there’s no response at all, * means that the port is filtered, blocked by a firewall. As a normal Linux administrator, this is one of the types of scans that you would do most of the time. A discovery scan is useful for when you need to just see what devices are on the network: sudo nmap -sn IP_ADDRESS/24 With the -sn option, nmap will detect whether you’re scanning the local subnet or a remote subnet. If the subnet is local, nmap will send out an Address Resolution Protocol (ARP) broadcast that requests the IPv4 addresses of every device on the subnet. That is a reliable way of discovering devices because ARP isn’t something that will ever be blocked by a firewall. sudo nmap -A IP_ADDRESS This scan: identifies open , closed , and filtered TCP ports. identifies the version of the running services. runs a set of vulnerability scanning scripts that come with nmap. attempts to identify the operating system of the target host. 5900/tcp open vnc Apple remote desktop vnc | vnc-info: | Protocol version: 3.889 | Security types: |_ Mac OS X security type (30) 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at http://www.insecure.org/cgi-bin/servicefp-submit.cgi : SF-Port515-TCP:V=6.47%I=7%D=12/24%Time=5A40479E%P=x86_64-suse-linux-gnu%r( SF:GetRequest,1,\"\\x01\"); MAC Address: 00:0A:95:8B:E0:C0 (Apple) Device type: general purpose VNC can be handy at times. It’s like Microsoft’s Remote Desktop service for Windows, except that it’s free, open source software. But it’s also a security problem because it’s an unencrypted protocol. So, all your information goes across the network in plain text. If you must use VNC, run it through an SSH tunnel.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4dedab5686eea66d58233866f08b621d",
    "u": "https://server.tymyrddin.dev/docs/ids/maltrail",
    "t": "Maltrail ",
    "c": "Maltrail  Maltrail is a malicious traffic detection system, using publicly available (black)lists containing malicious and/or generally suspicious trails, static trails compiled from various AV reports and custom user-defined lists, and (optionally) advanced heuristic mechanisms that can help in the discovery of unknown threats (for example, new malware). It is based on a Traffic -> Sensor <-> Server <-> Client Architecture. Trail can be anything from a: domain name (like zvpprsensinaix.com for Banjori malware) URL (like http://109.162.38.120/harsh02.exe for known malicious executable) IP address (for example 185.130.5.231 for known attacker) HTTP User-Agent header value (like sqlmap for automatic SQL injection and database takeover tool). It can be found on Github stamparm/maltrail .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "fbf35dc5c99e6563252c4b10a6237a96",
    "u": "https://server.tymyrddin.dev/docs/encryption/key-management",
    "t": "Key management ",
    "c": "Key management  Generate a key  $ ssh-keygen -t Enter a passphrase. It will create 2 files in the ~/.ssh directory: id_rsa , a private key and id_rsa.pub , a public key. Note: Do not leave the passphrase empty. An attacker who gets hold of your private key can otherwise connect to the hosts where you put you public key. Choose a loooooong and complex passphrase. Remember the passphrase. Better yet, put it in a password manager. Copy key to server  $ scp ~/.ssh/id_rsa.pub user@server:~/.ssh/authorized_keys The authenticity of host 'XXX.XXX.XXX.XXX (XXX.XXX.XXX.XXX)' can't be established. ECDSA key fingerprint is [fingerprint]. Are you sure you want to continue connecting (yes/no)? yes If ssh access is already available, by using the cat command to read the contents of the public key on the local computer and piping that through an SSH connection to the remote server (and avoiding overriding already existing keys): $ cat ~/.ssh/id_rsa.pub | ssh user@server \"mkdir -p ~/.ssh && touch ~/.ssh/authorized_keys && chmod -R go= ~/.ssh && cat >> ~/.ssh/authorized_keys\" The authenticity of host 'XXX.XXX.XXX.XXX (XXX.XXX.XXX.XXX)' can't be established. ECDSA key fingerprint is [fingerprint]. Are you sure you want to continue connecting (yes/no)? yes For password-less login install the public key using the ssh-copy-id command: $ ssh-copy-id user@server $ ssh-copy-id -i ~/.ssh/id_rsa.pub user@server The authenticity message means that the local computer does not recognize the remote host. This will happen the first time connecting to a new host. Type “yes” and press ENTER to continue. /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys user@XXX.XXX.XXX.XXX's password: Enter password (not displayed for security purposes) and the following response is given: Number of key(s) added: 1 Connect  ssh to the server: $ ssh user@server Changing passphrase  ssh-keygen -p Or: cd ~/.ssh/ ssh-keygen -f id_rsa -p And upload it to the server. If you then connect, you may get an authentication error",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cf95dea78ebe621a0e02f17589928900",
    "u": "https://server.tymyrddin.dev/docs/logfiles/centralised",
    "t": "Centralised logging ",
    "c": "Centralised logging  Why?  Makes searching through log data for relevant events easier and faster, especially important when the infrastructure uses separation and isolation and there are multiple servers. This makes troubleshooting and solving issues easier and faster, and without directly accessing systems. Logs are backed up in a separate location, protecting them from accidental or unintentional loss, and are accessible in case one of the servers goes down or becomes unresponsive. Not using computing resources for complex searches on internet facing servers. Depending on how it is set up, reduces the amount of disk space used by log files. Why not?  Uses bandwidth. How?  Set up a separate server for only logging purposes. Keep it in a secure location behind a (physical) firewall. Have no unnecessary services running on it. Delete all other user accounts. Which one?  Rsyslog (default installed on debian) and syslog-ng are both light-weight. The configuration syntax of ‘’rsyslog’’ is simpler than the syntax of ‘’syslog-ng’’, but complex configuration is more clear in ‘’syslog-ng’’. Future considerations  To protect from intentional tampering with logs (intruder deleting indicators of presence): Add another server, a snort box (IDS) that is actually another central server (yet has no IP address) and copy each packet intended for the already existing central server. Promiscuous mode Rule: Only listen for this IP address on this port (of existing central server)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ca105558fe7c55c1dabbce4899e3874a",
    "u": "https://server.tymyrddin.dev/docs/logfiles/rotate",
    "t": "Logrotate ",
    "c": "Logrotate  On most Linux distributions, logrotate is installed by default. If not the case install it using the package manager. The below is for debian and friends. Installation  # apt-get install logrotate Configuration  The main configuration file is at /etc/logrotate.conf . Creating config files for each service separately can use the folder /etc/logrotate.d/ . # vi /etc/logrotate.d/remote Append: /var/log/remote/*/* { rotate 7 daily size=10M missingok compress delaycompress } This will compress and rotate logs every day and keep them for 90 days (3 months). Keep last 7 logs The logs will be rotated daily Each log will not be rotated until it reaches 10MB If the log file is missing, go on to the next one without issuing an error message. All rotated logs, with the exception of the most recent one, should be compressed.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "528e24c944fbce77eb2b0bda911674ed",
    "u": "https://server.tymyrddin.dev/docs/pki/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Public key infrastructure (PKI) is the umbrella term for everything needed in order to issue, distribute, store, use, verify, revoke, and otherwise manage and interact with certificates and keys. It’s an intentionally vague term, like “database infrastructure”. Certificates are the building blocks of most PKIs, and certificate authorities are the foundation. Why?  Establishing a certificate authority (CA) and managing certificates for the servers allows each entity within the infrastructure to validate the other members’ identities and encrypt their traffic. This can prevent MitM attacks where an attacker imitates a server in the infrastructure to intercept traffic. How?  Problems Internal PKI Pluggable Authentication Modules (PAM) Let’s Encrypt TLS/SSL Notes  Many simple PKIs don’t even use certificates. When editing ~/.ssh/authorized_keys you’re configuring a simple certificate-less form of PKI that SSH uses to bind public keys to names in flat files. Because the PKI system is asymmetric, users need access to a public key and recipients of a message need a private key to decrypt the information. X.509 is a complex standard and complex technology is not easy to deploy on a large-scale. Use a specific profile of X.509 and validate it in a narrow set of implementations. Web PKI is mostly defined by RFC 5280 and refined by the CA/Browser Forum. It’s hierarchical, based on trusting authorities, and for some such authorities a big cash cow. Web PKI being a money-spinner, we also have an alternative. Let’s Encrypt is a free, automated, and open Certificate Authority. Lost keys are also an issue for individuals that rely on encrypted data. Lost keys restrict access to messages, and these messages are unavailable forever unless the cryptographic algorithm is weak and can be cracked. Enter the Internet of Things (IoT), the Internet of Everything (IoE) and the Industrial Internet: all the devices that want confidentiality, integrity and authentication related to their identity and that of others too: implanted medical devices, robots on the plant floor, smart light bulbs, … We have a veritable explosion of checks and balances, not to mention issuances, revocations and expirations … problems, old ones not solved and new ones. SSL and PKI infrastructures are essential components in client device security, because they are used to bootstrap into higher-level security services such as software updates and digital signature services. Their vulnerability puts other security services at risk. Internal PKI is PKI we run ourselves, for our own stuff: infrastructures with services, containers, and VMs; applications; endpoints like laptops and phones; and any other code or device we want to identify. Use only the minimal set of features in certificates and PKI; That is to use the binding of an identifier and name to a key pair and understand whether the certificate may sign other certificates or not. No additional attributes should be relied on, no complex path validations allowed. SSL refers to Secure Socket Layer. It is a protocol for providing security to connections between a server and a client and uses cryptography and hashing to provide confidentiality, integrity, and endpoint authentication to connections between a server and a client. It has a lot of known security bugs of its own. TLS refers to Transport Layer Security, and is the successor of SSL, which includes bug fixes and improvements over SSL. SSL came up to versions 3.0 and after that the name was changed to TLS. Hence, often TLS/SSL is used.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "450b15a09a582ab262c724cfaa0155ab",
    "u": "https://server.tymyrddin.dev/docs/firewall/firehol",
    "t": "FireHOL ",
    "c": "FireHOL  FireHOL (based on bash) makes it very simple to set up a complex firewall. Installation  On the backend server, install FireHOL for configuring iptables . # apt-get install firehol Configuration (example)  # vi /etc/firehol/firehol.conf A configuration which only allows incoming ssh connections and openvpn: interface eth0 inet client all accept // allow all outgoing connections server ssh accept // allow all incoming SSH connections server openvpn accept src \"XXX.XXX.XXX.XXX XXX.XXX.XXX.XXX\" // allow incoming OpenVPN connections // from these designated addresses // NOTE: EDIT THE XXX.XXX.XXX.XXX ADDRESSES interface tun0 vpn server all accept // allow all incoming connections on the VPN client all accept // allow all outgoing connections on the VPN router inet2vpn inface eth0 outface tun0 route all accept // route freely to the VPN router vpn2inet inface tun0 outface eth0 masquerade // use NAT masquerading from the VPN route all accept // route freely to the VPN",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e1cb272b91b58f317d10879d8a97c878",
    "u": "https://server.tymyrddin.dev/docs/incidents/brm",
    "t": "Using bootable recovery media ",
    "c": "Using bootable recovery media  The concept of live media is a wonderful thing, as we can boot into a completely different working environment from the operating system installed on our device and perform tasks without disrupting installed software on the host system. The desktop version of Ubuntu, for example, offers a complete computing environment we can use in order to not only test hardware and troubleshoot our systems but also browse the web just as we would on an installed system. In terms of recovering from disasters, live media becomes a saving grace. Ubuntu’s live media is great, and it doesn’t work for absolutely everything. Tools such as Clonezilla specialize in working with hard disks. Practical Linux Forensics, Bruce Nikkel, 2021",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a3a59f60433064429e8a9112fafe3244",
    "u": "https://server.tymyrddin.dev/docs/services/netstat",
    "t": "Auditing network services with netstat ",
    "c": "Auditing network services with netstat  Two reasons why you would want to keep track of what network services running on systems: To ensure that no legitimate network services that you don’t need are running To ensure that you don’t have any malware that’s listening for network connections from its master C&C To see a list of network services that are listening, waiting for someone to connect to them: netstat -lp -A inet With: -lp : The l means that we want to see which network ports are listening. In other words, we want to see which network ports are waiting for someone to connect to them. The p means that we want to see the name and process ID number of the program or service that is listening on each port. -A inet : This means that we only want to see information about the network protocols that are members of the inet family. In other words, we want to see information about the raw, tcp, and udp network sockets, but we don’t want to see anything about the Unix sockets that only deal with interprocess communications within the operating system. If you want to see port numbers and IP addresses instead of network names, add the n option to the -lp . To view the established TCP connections is to leave out the l option. Something to keep in mind is that rootkits can replace legitimate Linux utilities with their own trojaned versions. For example, a rootkit could have its own trojaned version of netstat that would show all network processes except for those that are associated with the rootkit. That’s why you want something such as Rootkit Hunter in your toolbox. Resources  What Port Is - Network Port and Protocol Database",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "74d3c1bc5f8d0fea986342319e926687",
    "u": "https://server.tymyrddin.dev/docs/users/sudo",
    "t": "Configuring sudo ",
    "c": "Configuring sudo  sudo stands for “super-user do”. Sudo allows any non-root user to run applications as root. When sudo is configured correctly, it greatly increases the security of the environment. Slowing hackers down. Since the root login will most likely be disabled and your users are properly granted sudo, any attacker will not know which account to go after, thus slowing them down. If they are slowed down enough, they may stop the attack and give up. Allow non-privileged users to perform privileged tasks by entering their own passwords. Keeps in line with the principle of least privilege by allowing administrators to assign certain users full privileges, while assigning other users only the privileges they need to complete their daily tasks. Adding users to the sudo group  On Ubuntu 18.04, unless otherwise specified upon account creation, the user is automatically added to the sudo group. To add a user who is not part of the sudo group already, add him/her with: usermod -aG sudo <username> Using the -a option helps username retain any previously existing groups. To directly add a user to the sudo group upon username account creation: useradd -G sudo <username> By default, Ubuntu allows sudo users to execute any program as root with their password. There are a few ways we can check this information. The first way is as user with sudo -l . Another way to view this information is with visudo . This opens the sudo policy file. The sudo policy file is stored in /etc/sudoers . This gives the same information as sudo -l but with one difference; the %sudo indicates that it is for the group, sudo. There can be other groups in this file such as admin . This is where administrators can set what programs a user in a certain group can perform and whether they need a password. In the %sudo ALL=(ALL:ALL) ALL NOPASSWD: ALL , the NOPASSWD part says that the user that is part of the sudo group does not need to enter their local password to use sudo privileges. Generally, this is not recommended - not even for home use. Users can also be added to the sudoers using the sudo policy file. Always edit sudoers with the sudo visudo command. If you are managing users in a network across multiple flavours of Linux (CentOS, Red Hat, etc.), where the sudo group may be called something different, this method may be more preferable: add a User Alias to the policy file and add users to that alias, or add lines for individual users. User_Alias ADMINS = lela, barzh and: ADMINS ALL=(ALL) ALL or for an individual user: username ALL=(ALL) ALL It is not recommended to use individual user aliases in a large network since this can become unwieldy very quickly. The first option is going to be your best bet as you can simply add users to this alias and control which commands they have access to with sudo easily. Setting up sudo for only certain delegated privileges  To ensure that users are assigned to the groups they belong to and only are allowed access to the programs they need to complete their daily tasks, set Command Aliases in the sudo policy file: Use sudo visudo , and edit the line under the comment # Cmnd alias specification . Cmnd_Alias SOFTWARE = /bin/rpm, /usr/bin/up2date, /usr/bin/yum To assign the SOFTWARE command alias to the SOFTWAREADMINS user alias: SOFTWAREADMINS ALL=(ALL) SOFTWARE You can also assign Command Aliases to individual users, specific commands to individual users, and Command Aliases to groups. Host aliases  Host Aliases are a way to trickle down a sudo policy across the network and different servers. For example, you may have a MAILSERVERS Host Alias which contains servers mail1 and mail2 . This Host Alias has certain users or groups assigned to it, and that Host Alias has a Command Alias assigned to it stating which commands those users are able to run. When those users run a command on mail1 or mail2 , the server will check the sudo policy file to see if they can do what they are trying to do. In a home environment and small-medium business environments, it probably is just easier to copy the sudo policy file to each server in the network. This will really only come into play with large enterprise networks and even then they will probably be using a centralised Ansible or other automation in effect. Preventing users from using shell escapes  Programs like text editors and pagers have a handy shell escape feature. This allows a user to run a shell command without having to exit the program first. For example, from the command mode of the vi and vim editors, someone could run the ls command by running :!ls . To allow a user to edit the sshd_config file and only that file, add a line to the sudo configuration: username ALL=(ALL) sudoedit /etc/ssh/sshd_config sudoedit has no shell escape feature. Other programs that have a shell escape feature: emacs , less , view , and more . Preventing users from using other dangerous programs  Some programs that don’t have shell escapes can still be dangerous if you give users unrestricted privileges to use them, like cat , cut , awk , and sed . If you must give someone sudo privileges to use one of these programs, limit their use to only specific files. Preventing abuse via user’s shell scripts  A rule for Fritz so he can create scripts running with elevated privileges: fritz ALL=(ALL) /home/fritz/fritz_script.sh And his script reads: #!/bin/bash echo \"This script belongs to Fritz the Cat.\" sudo -i What can happen next: fritz@server:~$ sudo ./fritz_script.sh This script belongs to Fritz the Cat. root@server:~# sudo -i logs a person in to the root user’s shell, the same way that sudo su - does. To remedy this, move Fritz’ script to the /usr/local/sbin directory and change the ownership to the root user so that Fritz will not be able to edit it. And delete that sudo -i line in it.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "60dd2959baa6da7c1da8b6b818b87777",
    "u": "https://mailserver.tymyrddin.dev/",
    "t": "Smarter mail servers ",
    "c": "Smarter mail servers  Version 0.1: Notes on setting up a mailserver to detect phishing attacks and prevent MitM attacks. The below configurations were for a debian 9, and need to be updated and DMARC added. A work in progress … Mail servers Mail servers Cyrus Dovecot MTA Message Transfer Agent (MTA) Postfix configuration SASL configuration DNSSEC Domain Name System Security Extensions (DNSSEC) TLS Transport Layer Security (TLS) TLS configuration DANE configuration MTA-STS configuration SPF Sender Policy Framework (SPF) SPF configuration DKIM Domain Keys Identified Mail (DKIM) DKIM configuration Rspamd configuration DMARC Domain-based Message Authentication, Reporting and Conformance (DMARC) DMARC configuration",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "350396704891a510710bad93bc9aa01e",
    "u": "https://mailserver.tymyrddin.dev/docs/spf/spf",
    "t": "SPF configuration ",
    "c": "SPF configuration  Add SPF records to DNS  In order that receiving servers can check your SPF record it must be publicly visible. This means publishing it to the DNS server for the chosen domain(s). Go to their domain zone pages and add a new TXT record. For example, to allow mail from all hosts listed in the MX records for the domain: v=spf1 mx -all To allow mail from a specific host: v=spf1 a:mail.somedomain.tld -all Exact format may vary per DNS provider. Check the documentation for the exact style required. Installation  The Python SPF policy agent adds SPF policy-checking to Postfix. The SPF record for the sender’s domain for incoming mail will be checked and, if it exists, mail will be handled accordingly. Configuration  policyd-spf.conf  /etc/postfix-policyd-spf-python/policyd-spf.conf looks something like: debugLevel = 1 defaultSeedOnly = 1 HELO_reject = SPF_Not_Pass Mail_From_reject = Fail PermError_reject = False TempError_Defer = False skip_addresses = 127.0.0.0/8,::ffff:127.0.0.0/104,::1 debugLevel controls the amount of information logged by the policy server. The default, level 1, logs no debugging messages, just basic SPF results and errors generated through the policy server. The policy server can operate in a test only mode. This allows you to see the potential impact of SPF checking in your mail logs without rejecting mail. Headers are prepended in messages, but message delivery is not affected. This mode is not enabled by default. To enable it, set TestOnly = 0 . This option was previously named defaultSeedOnly . This is still accepted, but logs an error. The default HELO check rejection policy is SPF_Not_Pass , meaning reject if the SPF result is Fail, Softfail, Neutral, PermError. Not fully RFC 4408 compliant but HELO/EHLO is known first in the SMTP dialogue and there is no reason to waste resources on Mail From checks if the HELO check will already reject the message. Postfix integration  master.cf  In /etc/postfix/master.cf append: policyd-spf unix - n n - 0 spawn user=nobody argv=/usr/bin/policyd-spf main.cf  To increase the Postfix policy agent timeout, which will prevent Postfix from aborting the agent if transactions run a bit slowly policyd-spf_time_limit = 3600 And append check_policy_service unix:private/policyd-spf after reject_unauth_destination , for example: smtpd_recipient_restrictions = reject_non_fqdn_recipient,reject_unknown_recipient_domain,permit_mynetworks,permit_sasl_authenticated,reject_unauth_destination,reject_non_fqdn_sender,reject_unlisted_recipient,check_policy_service unix:private/policyd-spf Restart postfix  # systemctl restart postfix Testing  Check the operation of the policy agent by looking at raw headers on incoming email messages for the SPF results header. The SPF policy agent also logs to /var/log/mail.log . In the mail.log file you’ll see messages like this from the policy agent Configuration resources  Man policyd-spf - policyd-spf python configuration parameters Kitterman Technical Services offers tools for setting up an SPF record. appmaildev.com also allows for testing SPF records. MX Toolbox allows users to look up their SPF records , making it possible to publish a list of domains that are authorised to send an email on their behalf, and a check if your mail server is blacklisted .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "947dba71caabf05e9586d5857fc7651e",
    "u": "https://mailserver.tymyrddin.dev/docs/tls/readme",
    "t": "Transport Layer Security (TLS) ",
    "c": "Transport Layer Security (TLS)  STARTTLS is a method of upgrading a plain text communication channel to a secure, encrypted communication channel. It makes it possible to create a secure, encrypted Simple Mail Transfer Protocol (SMTP) connection between mail servers. There is a serious issue with STARTTLS — it is vulnerable to Man-in-the-Middle (MITM) attacks. This issue can be mitigated by using either DNS-Based Authentication of Named Entities (DANE) for SMTP or SMTP Mail Transfer Agent Strict Transport Security (MTA-STS). With MTA-STS, DNSSEC is not required but is, of course, highly recommended. A valid X.509 certificate is required. Self-signed certificates are not allowed to be used in combination with MTA-STS. As mentioned before, DANE allows users of self-signed certificates, but a full DNSSEC implementation is required. DNS-based Authentication of Named Entities (DANE)  DANE is an alternative to Public Key Infrastructure (PKI) Certificate Authorities. It complements Domain Name System Security Extensions (DNSSEC), which must be implemented first. It is an Internet security protocol to allow X.509 digital certificates, commonly used for Transport Layer Security (TLS), to be bound to domain names using Domain Name System Security Extensions (DNSSEC). TLSA resource record is a type of DNS record. MTA Strict Transport Security (MTA-STS)  MTA-STS can be seen as a way to implement HTTP Strict Transport Security (HSTS) for SMTP. It is a mechanism to declare the ability to support TLS for SMTP and to specify whether sending mail servers must refuse to deliver an email to an authoritative receiving mail server that does not offer TLS with a trusted X.509 certificate. MTA-STS solves the problem that TLS is entirely optional with SMTP. With MTA-STS, DNSSEC is not required but is, of course, highly recommended. A valid X.509 certificate is required. Self-signed certificates are not allowed to be used in combination with MTA-STS.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7e07b89ae648eab3b3e798b700e981d1",
    "u": "https://mailserver.tymyrddin.dev/docs/dkim/readme",
    "t": "Domain Keys Identified Mail (DKIM) ",
    "c": "Domain Keys Identified Mail (DKIM)  DKIM is a method for detecting forged sender addresses in emails, a common technique used in phishing attacks. It lets official mail servers add a signature to headers of outgoing email and identifies a domain’s public key so other mail servers can verify the signature. As with SPF, DKIM helps keep mail from being considered spam. It also lets mail servers detect when mail has been tampered with in transit. Senders choose which elements of the email are to be included in the DKIM signing process: The whole message (header and body) or one or more fields of the email header. These elements must remain unchanged in transit, or the DKIM signature will fail authentication. The sender configures the mailserver to automatically create a hash of the parts of the email that are to be signed. The email provider receiving the email sees that it has a DKIM signature (and which “domain/selector” combination signed the encryption). It will run a DNS query to find the public key for that “domain/selector” combination. A keypair match enables the email provider to decrypt the DKIM signature back to the original hash string. The receiving email provider takes the elements of the email signed by DKIM, generates its own hash of these elements, and compares that hash with the decrypted hash from the signature. Depending on the implementation, DKIM can also ensure that a message has not been modified or tampered with in transit. It is complex and has not been adopted widely. => No DKIM signature does not mean an email is fake. The DKIM domain is not visible to end users and one needs to have a bit of a techie to make it visible and understand it. It is over many heads. Woosh! DKIM does not prevent spoofing of the visible header “From:” domain. These configuration notes are for debian 9 (will probably also work on buster) Rspamd is an e-mail filter system, which replaces Amavis and Spamassassin. It also is capable of signing outbound e-mails with DKIM keys. The status of Rspamd can be monitored via a simple web interface.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "362d6fe33428aa1950cc48bbaf76d421",
    "u": "https://mailserver.tymyrddin.dev/docs/mta/sasl",
    "t": "SASL configuration ",
    "c": "SASL configuration  Once Postfix is up and running, add SASL authentication to avoid open relaying. In order to prevent anonymous users from spamming, only authenticated and trusted users will be able to send emails. Postfix supports two SASL implementations: Cyrus SASL (SMTP client and server) and Dovecot SASL (SMTP server only). Both implementations can be built into Postfix simultaneously. Cyrus  Install: # apt-get install libsasl2-modules sasl2-bin SASL can use different authentication methods. The default one is PAM (as configured in /etc/conf.d/saslauthd ), but to set it up properly you have to create /etc/sasl2/smtpd.conf . Pambase 20190105.1-1 and newer use restrictive fallback for “other” PAM service, and a pam configuration file is required. Create a file /etc/postfix/sasl/smtpd.conf : pwcheck_method: saslauthd mech_list: PLAIN LOGIN log_level: 7 Setup a separate saslauthd process to be used from Postfix. Create a copy of saslauthd’s config file: # cp /etc/default/saslauthd /etc/default/saslauthd-postfix Append: START=yes DESC=\"SASL Auth. Daemon for Postfix\" NAME=\"saslauthd-postf\" # max. 15 char. # Option -m sets working dir for saslauthd (contains socket) OPTIONS=\"-c -m /var/spool/postfix/var/run/saslauthd\" # postfix/smtp in chroot() Create the required subdirectories in postfix chroot directory: dpkg-statoverride --add root sasl 710 /var/spool/postfix/var/run/saslauthd Add user postfix to the group sasl : adduser postfix sasl Restart saslauthd: # systemctl saslauthd restart [ ok ] Stopping SASL Auth. Daemon: saslauthd. [ ok ] Stopping SASL Auth. Daemon for Postfix: saslauthd-postf. [ ok ] Starting SASL Auth. Daemon: saslauthd. [ ok ] Starting SASL Auth. Daemon for Postfix: saslauthd-postf. Edit /etc/postfix/main.cf : smtpd_sasl_local_domain = $myhostname smtpd_sasl_auth_enable = yes broken_sasl_auth_clients = yes smtpd_sasl_security_options = noanonymous smtpd_recipient_restrictions = permit_sasl_authenticated, permit_mynetworks, reject_unauth_destination Restart (reloading is not enough): # systemctl postfix restart SMTP  To enable SASL for accepting mail from other users, in /etc/postfix/master.cf under the submission or smtp section (depending on what is used) append/uncomment: submission inet n - n - - smtpd -o syslog_name=postfix/submission -o smtpd_tls_security_level=encrypt -o smtpd_sasl_auth_enable=yes -o smtpd_reject_unlisted_recipient=no # -o smtpd_client_restrictions=$mua_client_restrictions # -o smtpd_helo_restrictions=$mua_helo_restrictions # -o smtpd_sender_restrictions=$mua_sender_restrictions -o smtpd_recipient_restrictions=permit_sasl_authenticated,reject -o milter_macro_daemon_name=ORIGINATING The three restriction options (client, helo, sender) can also be left commented out, since smtpd_recipient_restrictions already handles SASL users. Start/enable the saslauthd service and restart the postfix service. Dovecot  If Dovecot is used as IMAP or POP mail server and all users already authenticate (such as with PAM ), then there is no need to configure another package. SMTP  Edit /etc/postfix/master.cf and append/uncomment under the submission or smtp section (depending on what is used): # SASL authentication with dovecot -o smtpd_tls_security_level=encrypt -o smtpd_sasl_auth_enable=yes -o smtpd_sasl_type=dovecot -o smtpd_sasl_path=private/auth -o smtpd_sasl_security_options=noanonymous -o smtpd_sasl_local_domain=$myhostname -o smtpd_client_restrictions=permit_sasl_authenticated,reject -o smtpd_recipient_restrictions=reject_non_fqdn_recipient,reject_unknown_recipient_domain,permit_sasl_authenticated,reject In /etc/postfix/main.cf : smtpd_relay_restrictions = permit_mynetworks,permit_sasl_authenticated,reject_unauth_destination smtpd_sasl_local_domain = $myhostname smtpd_sender_restrictions filters mails based on the MAIL FROM command; This command is easy faked by telneting an open relay and typing in this command, therefore mail counl be sent with a valid MAIL FROM address. Use smtpd_client_restrictions instead, which checks the hostname or IP address of the smtpd client (the other MTA/SMTP connecting to the internal smtpd) in a black list, if listed mail is denied. If mails are marked as NoBounceOpenRelay try: smtpd_sasl_authenticated_header = yes To configure Postfix to enable email clients to connect to the SMTP server. In /etc/postfix/main.cf : smtpd_sasl_auth_enable = yes smtpd_sasl_security_options = noanonymous smtpd_sasl_local_domain = $myhostname smtpd_recipient_restrictions = permit_sasl_authenticated,permit_mynetworks, reject_unauth_destination broken_sasl_auth_clients = yes smtpd_sasl_type = dovecot smtpd_sasl_path = private/auth broken_sasl_auth_clients enables interoperability with remote SMTP clients that implement an obsolete version of the AUTH command. Default is no . Setting it to yes makes Postfix advertise AUTH support in a non-standard way. Restart both dovecot and postfix. Configuration resources  Postfix and Dovecot SASL",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "67a139b838a6ea1da56f277b7d543f0b",
    "u": "https://mailserver.tymyrddin.dev/docs/spf/readme",
    "t": "Sender Policy Framework (SPF) ",
    "c": "Sender Policy Framework (SPF)  SPF is a method for email authentication and is designed to detect fraudulent mail servers. SPF allows the recipient’s mail server to check that an authorized mail server sent the email. It is an open standard specifying a technical method to prevent sender address forgery. In plain language, it is a method of informing servers whether a specific mail server is authorised to send an email for a particular domain. With that, it can detect whether an email address is authentic or fake, before allowing it to pass into an inbox. An SPF record increases the likelihood that emails sent by valid addresses are delivered. Without it, genuine email could be categorised as spam. It also protects against malicious emails sent through your domain by spammers. A email provider publishes SPF records in the Domain Name System (DNS). These records list which IP addresses are authorised to send email on behalf of their domains. In an SPF check, email providers verify the SPF record by looking up the domain name listed in the return path address in the DNS. If the IP address sending email on behalf of the “return path” domain is not listed the record, the message fails authentication. SPF records must be kept updated. If a message fails SPF check, that doesn’t mean it will always be blocked. Breaks when a message is forwarded. Does not protect against spoofing of the visible “From” address in messages.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5fc40c56c8ce22580281fbb42de65381",
    "u": "https://mailserver.tymyrddin.dev/docs/servers/readme",
    "t": "Mail servers ",
    "c": "Mail servers  Dovecot is a minimal open-source IMAP and POP3 email server for Linux/ Unix operating systems. It supports different authentication methods, requires minimal memory, and supports Postfix and Exim. Cyrus is a robust open-source Linux mail server that offers speed, security and support for dozens of protocols and authentication methods. It is a rich configurable mail-server with a large set of options and third-party integrations.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "88d208a5e9828fbbb381faf5587d392f",
    "u": "https://mailserver.tymyrddin.dev/docs/tls/dane",
    "t": "DANE configuration ",
    "c": "DANE configuration  Postfix supports DANE In Postfix, certificate usage 0 is unsupported, 1 is mapped to 3, and 2 is optional, thus it is recommended to publish a “3” record. Configuration  In /etc/postfix/main.cf smtpd_use_tls = yes smtp_dns_support_level = dnssec smtp_tls_security_level = dane In /etc/postfix/master.cf dane unix - - n - - smtp -o smtp_dns_support_level=dnssec -o smtp_tls_security_level=dane Multiple domains  To use per-domain policies, for example for opportunistic DANE for domain.org and mandatory DANE for domain.com: In /etc/postfix/main.cf indexed = ${default_database_type}:${config_directory}/ # Per-destination TLS policy # smtp_tls_policy_maps = ${indexed}tls_policy # default_transport = smtp, but some destinations are special: # transport_maps = ${indexed}transport In transport : domain.com dane domain.org dane In tls_policy : domain.com dane-only Configuration resources  DANE: Common mistakes DANE validator Generate TLSA Record online RFC6698: The DNS-Based Authentication of Named Entities (DANE) Transport Layer Security (TLS) Protocol: TLSA SMTP Security via Opportunistic DNS-Based Authentication of Named Entities (DANE) Transport Layer Security (TLS)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "277e682ad4ae66b23022242f16768008",
    "u": "https://mailserver.tymyrddin.dev/docs/tls/tls",
    "t": "TLS configuration ",
    "c": "TLS configuration  Email servers wrap SMTP via direct TLS or a connection upgrade with STARTTLS at ports 465/587 A Postfix SMTP server needs a certificate and a private key in .pem format. The private key must not be encrypted (= must be accessible without a password). Public Internet MX hosts without certificates signed by a well-known public CA must still generate, and be prepared to present to most clients, a self-signed or private-CA signed certificate. For non-public Internet MX hosts, Postfix supports configurations with no certificates. This entails the use of anonymous TLS ciphers, which are not supported by typical SMTP clients. Creating keys and certificates  By default, Postfix will not accept secure mail. To set Postfix up to accept secure mail, obtain a certificate. A certificate can be obtained either from a certificate authority with a Certificate Signing Request (CSR) or Let’s Encrypt certbot, or self-signed. Self-signed certificates can be generated easily, but clients will reject them by default, unless each and every client is configured to trust the self-signed certificate. Point Postfix to your TLS certificates by appending to /etc/postfix/main.cf : smtpd_tls_cert_file = /etc/letsencrypt/live/$domain.$tld/fullchain.pem smtpd_tls_key_file = /etc/letsencrypt/live/$domain.$tld/privkey.pem smtpd_tls_dh1024_param_file = /etc/ssl/private/2048.dh smtpd_tls_dh512_param_file = /etc/ssl/private/512.dh If you want the Postfix SMTP server to accept remote SMTP client certificates issued by one or more root CAs, append the root certificate to $smtpd_tls_CAfile or install it in the $smtpd_tls_CApath directory. smtpd_tls_CApath = /etc/ssl/certs Configuration  SMTP (sending)  By default, Postfix/sendmail will not send email encrypted to other SMTP servers. To use TLS when available, in /etc/postfix/main.cf , set: smtp_tls_security_level = may Sending AUTH data over an unencrypted channel poses a security risk. When TLS layer encryption is not required but optional ( smtpd_tls_security_level = may ), it is still useful to only offer AUTH when TLS is active. To maintain compatibility with non-TLS clients, the default is to accept AUTH without encryption. In order to change this behaviour: In /etc/postfix/main.cf : smtpd_tls_auth_only = yes SMTP (receiving)  There are two ways to accept secure mail. For STARTTLS over SMTP (port 587) uncomment in /etc/postfix/master.cf : submission inet n - n - - smtpd -o syslog_name=postfix/submission -o smtpd_tls_security_level=encrypt -o smtpd_sasl_auth_enable=yes -o smtpd_tls_auth_only=yes -o smtpd_reject_unlisted_recipient=no # -o smtpd_client_restrictions=$mua_client_restrictions # -o smtpd_helo_restrictions=$mua_helo_restrictions # -o smtpd_sender_restrictions=$mua_sender_restrictions -o smtpd_recipient_restrictions= -o smtpd_relay_restrictions=permit_sasl_authenticated,reject -o milter_macro_daemon_name=ORIGINATING For SMTPS (port 465), uncomment in /etc/postfix/master.cf : smtps inet n - n - - smtpd -o syslog_name=postfix/smtps -o smtpd_tls_wrappermode=yes -o smtpd_sasl_auth_enable=yes -o smtpd_reject_unlisted_recipient=no # -o smtpd_client_restrictions=$mua_client_restrictions # -o smtpd_helo_restrictions=$mua_helo_restrictions # -o smtpd_sender_restrictions=$mua_sender_restrictions -o smtpd_recipient_restrictions= -o smtpd_relay_restrictions=permit_sasl_authenticated,reject -o milter_macro_daemon_name=ORIGINATING When the TLS information is not included in the headers of the message it has processed from another server or SMTP client that uses TLS, it can be added with: smtpd_tls_received_header = yes The “smtp server” part of Postfix (the first daemon that listens on port 25) then adds the TLS information to the “Received” message header of an incoming message. Logging  To get more information about Postfix SMTP client TLS activity you can increase the loglevel from 0..4. Each logging level also includes the information that is logged at a lower logging level. 0 Disable logging of TLS activity. 1 Log TLS handshake and certificate information. 2 Log levels during TLS negotiation. 3 Log hexadecimal and ASCII dump of TLS negotiation process. 4 Log hexadecimal and ASCII dump of complete transmission after STARTTLS. In /etc/postfix/main.cf : smtpd_tls_loglevel = 0 Cipher controls  The Postfix SMTP server supports 5 distinct cipher grades as specified by the smtpd_tls_mandatory_ciphers parameter, which determines the minimum cipher grade with mandatory TLS encryption. Default is medium. smtpd_tls_mandatory_ciphers = high Cipher grade high enables only “HIGH” grade OpenSSL ciphers specified in the tls_high_cipherlist configuration parameter, which you are strongly encouraged to not change. The smtpd_tls_ciphers parameter controls the minimum cipher grade used with opportunistic TLS. Default is medium . smtpd_tls_ciphers = medium By default, anonymous ciphers are enabled. They are automatically disabled when remote SMTP client certificates are requested. For excluding cipher types from the SMTP server cipher list at all TLS security levels: smtpd_tls_exclude_ciphers = aNULL, MD5, DES, 3DES, DES-CBC3-SHA, RC4-SHA, AES256-SHA, AES128-SHA, eNULL, EXPORT, RC4, PSK, aECDH, EDH-DSS-DES-CBC3-SHA, EDH-RSA-DES-CDC3-SHA, KRB5-DE5, CBC3-SHA The Postfix SMTP server security grade for ephemeral elliptic-curve Diffie-Hellman (EECDH) key exchange: smtpd_tls_eecdh_grade = strong strong means use EECDH with approximately 128 bits of security at a reasonable computational cost. This is the current best-practice trade-off between security and computational efficiency. By default, the OpenSSL server selects the client’s most preferred cipher-suite that the server supports. With SSLv3 and later, the server may choose its own most preferred cipher-suite that is supported (offered) by the client. The default OpenSSL behaviour applies with “tls_preempt_cipherlist = no” To enable server cipher-suite preferences: tls_preempt_cipherlist = yes Entropy  The security of cryptographic software such as TLS depends critically on the ability to generate unpredictable numbers for keys and other information. The tlsmgr process maintains a Pseudo Random Number Generator (PRNG) pool for the purpose. This is queried by the smtp and smtpd processes when they initialize. By default, these daemons request 32 bytes, the equivalent to 256 bits, more than enough to generate a 128 bit (or 168 bit) session key. A good entropy source is /dev/urandom tls_random_source = dev:/dev/urandom Session cache  The remote SMTP server and the Postfix SMTP client negotiate a session, which takes some computer time and network bandwidth. Cached Postfix SMTP server session information expires after a certain amount of time. Postfix/TLS does not use the OpenSSL default of 300s, but a longer time of 3600sec. RFC 2246 even recommends a maximum of 24 hours. smtpd_tls_session_cache_timeout = 3600s Obsolete TLS parameters  smtpd_tls_mandatory_protocols = TLSv1 Firewall  Allow connections to port 587 and 465 (depending) by opening the port for your server in the server firewall. Configuration resources  Guide to Deploying Diffie-Hellman for TLS",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "64eade5fd86f1ff1a95b732047845a90",
    "u": "https://mailserver.tymyrddin.dev/docs/servers/cyrus",
    "t": "Cyrus ",
    "c": "Cyrus  The Cyrus IMAP server is electronic mail server open source software developed by Carnegie Mellon University. It differs from other Internet Message Access Protocol (IMAP) server implementations in that it is generally intended to be run on sealed servers, where normal users cannot log in. And it is not lightweight. Installation  # apt-get install cyrus-imapd cyrus-sasl cyrus-sasl-plain You will be asked to set a password for the default administrative user cyrus Get SSL certificate  Using Let’s Encrypt, request a certificate for the mail server by (replacing mail.mydomain.com with the fully qualified domain name (FQDN) of your server): certbot certonly --standalone -d mail.mydomain.com Integration with postfix  Firewall  To access the mail server from another computer, configure the server firewall to allow connections to the server on the necessary ports. The default ports are IMAP - 143; IMAPS - 993; POP3 - 110; and POP3S - 995. Configuration resources  Cyrus IMAP",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e798deee75ddaa94fc96699ea0567a29",
    "u": "https://mailserver.tymyrddin.dev/docs/dkim/dkim",
    "t": "DKIM configuration ",
    "c": "DKIM configuration  Installation  # apt-get install opendkim opendkim-tools Unix socket  Postfix and opendkim communicate through a unix socket. Socket address is usually the one specified in /etc/postfix/main.cf , but the default configuration of postfix in debian runs under a chroot ( /var/spool/postfix ) so the socket must be created in the jail: # sockdir=/var/spool/postfix/var/run/opendkim # mkdir -p $sockdir # chown opendkim. $sockdir # chmod go-rwx $sockdir # chmod g+x $sockdir Generate keys  Generate the key pair. To generate a secret signing key, you need to specify the domain used to send mails and a selector which is used to refer to the key (choose anything you like, alpha-numeric strings will do). # opendkim-genkey -r -s myselector -b 2048 -d $domain.tld This creates two files in /etc/dkimkeys/ : myselector.private and myselector.txt , the private and public key. Make sure that only the opendkim user can read them: chgrp opendkim /etc/dkimkeys/* chmod go-rwx /etc/dkimkeys/* Configuration  Copy the sample configuration file /etc/opendkim/opendkim.conf.sample (or /usr/share/doc/opendkim/opendkim.conf.sample ) to /etc/opendkim/opendkim.conf and change: Domain $domain.tld KeyFile /path/to/keys/myselector.private Selector myselector Socket inet:8891@localhost UserID opendkim On debian, for the unix socket: Syslog yes # Required to use local socket with MTAs that access the socket as a non- # privileged user (e.g. Postfix) UMask 007 # DO NOT BELIEVE that /etc/default/opendkim overrides the following : # (In stretch, it does not on 2019-08-13) Socket local:/var/spool/postfix/var/run/opendkim/opendkim.sock Multiple domains  If you are providing mail server service to multiple virtual domains on the same server, provide these directives: KeyTable refile:/etc/opendkim/KeyTable SigningTable refile:/etc/opendkim/SigningTable ExternalIgnoreList refile:/etc/opendkim/TrustedHosts InternalHosts refile:/etc/opendkim/TrustedHosts You have to create/move/copy DKIM keys in a separate domain folder for each domain, for example /etc/opendkim/keys/domain1.com/ . Otherwise you will receive dkim: FAILED, invalid (public key: not available)” error message with DKIM email test . You can use the same key for all the domains or generate a separate key for each domain. Edit the /etc/opendkim/KeyTable file to specify key locations: myselector._domainkey.domain1.com domain1.com:mail:/etc/opendkim/keys/domain1.com/myselector.private myselector._domainkey.domain2.com domain2.com:mail:/etc/opendkim/keys/domain2.com/myselector.private Edit the /etc/opendkim/SigningTable file to specify which key will sign a domain. *@domain1.com myselector._domainkey.domain1.com *@domain2.com myselector._domainkey.domain2.com In /etc/opendkim/TrustedHosts , add trusted domain and IP addresses who can use the keys. If needed, include localhost as it is not implicit. 127.0.0.1 ::1 localhost <some_server_ip> hostname.domain1.com domain1.com hostname.domain2.com domain2.com ... This is referenced by the ExternalIgnoreList directive. Opendkim will ignore this list of hosts when verifying incoming mail. It is also referenced by the InternalHosts directive, this same list of hosts will be considered “internal,” and opendkim will sign their outgoing mail. The flow for DKIM lookup starts with the sender’s address. The signing table is scanned until an entry whose pattern matches the address is found. Then, the second item’s value is used to locate the entry in the key table whose key information will be used. For incoming mail the domain and selector are then used to find the public key TXT record in DNS and that public key is used to validate the signature. For outgoing mail the private key is read from the named file and used to generate the signature on the message. Postfix integration  To make Postfix listen to the unix socket on debian (set up as above): Add user postfix to the opendkim group (postfix needs to be able to access the socket): # adduser postfix opendkim And append to /etc/postfix/main.cf : milter_default_action = accept milter_protocol = 6 # from inside the chroot, the socket will be in /var/run/opendkim smtpd_milters = unix:/var/run/opendkim/opendkim.sock non_smtpd_milters = unix:/var/run/opendkim/opendkim.sock Restart postfix  # systemctl restart postfix DNS Configuration  Add a TXT record for your domain(s). For example: As a Hostname, use the myselector followed by the literal string ._domainkey and use as Text: v=DKIM1; p=yourPublicKey Or v=DKIM1; h=sha256; k=rsa; s=email; p=yourPublicKey Exact format may vary per DNS provider. Check the documentation for the exact style required. Testing  Try to send a mail. Check /var/log/mail.log Test the installation with opendkim-testkey : # opendkim-testkey -d $domain.tld -s myselector -vvv Configuration resources  Breaking DKIM - on Purpose and by Chance , October 2017, Update 08/2018 Debian: opendkim",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8fdb41b25653820c4fce47d53823a387",
    "u": "https://mailserver.tymyrddin.dev/docs/mta/postfix",
    "t": "Postfix configuration ",
    "c": "Postfix configuration  The two most important configuration files are: /etc/postfix/master.cf , defining what Postfix services are enabled and how clients connect to them /etc/postfix/main.cf , the main configuration file, the bulk, the meat. Most configuration changes only need a reload of postfix in order to take effect. Only some require a restart. Don’t manage mailboxes from postfix. Check configuration with the postfix check command. To see all of the configuration files use the postconf command. To see how the setup differs from the defaults, use postconf -n . On debian, Postfix runs by default in a chroot jail. On other distro’s where this is not the case, it is recommended to set it up in a jail. Limit use of Postfix services Restrict which hosts are granted or refused access with the smtpd_*_restrictions directives. The vrfy command allows an attacker to determine if an account exists on a system, providing significant assistance to a brute force attack on user accounts. vrfy may provide additional information about users on the system, such as the full names of account owners. Default is no . Set to disable_vrfy_command = yes . Client control rules can be based on the sender or receiver address and limitations of the number and size of email messages. Consider greylisting: In greylisting the server sends a request to have the email resent, after temporarily rejecting the email. The server saves in a list the sender IP and the recipient and returns a temporary error. All valid servers will then resend the emails, spamming scripts will not. Other efficient protocol level solutions in Postfix can be used to make sure the mail server is RFC compliant and prevent email looping (a very simple method would be setting a maximum numbers of “Received” headers per email). With policy services Postfix’ behaviour of mail delivery can be fine-tuned. Making changes to configurations of such services require a restart of Postfix. Installation  # apt-get install postfix You will be asked a series of questions. On the first prompt, select //Internet Site// option as the general type for Postfix configuration, continue, and then add domain name to system mail name. Basic configuration  Configure the basics: # cp /etc/postfix/main.cf{,.old} # vi /etc/postfix/main.cf myhostname = $hostname //Use command \"hostname\" to display your hostname myorigin = $mydomain //Add domain, so others can not abuse the mailsystem relay_domains = domain1.com, domain2.com, domain3.com //Add the domains the system will handle Multiple local domains  Postfix can be configured for more than one domain via the use of a hash file. This file contains the list of domains postfix will accept for local delivery. Open the /etc/postfix/main.cf configuration file and append: virtual_alias_domains = hash:/etc/postfix/virtual_domains Create the file, and add all the domains postfix should accept in it (one per line). The postmap program expects the file to have 2 columns but the second column is ignored. Do add that second column and add comments like #something in it. It will work without, but you get warnings. To make the hashfile: # postmap /etc/postfix/virtual_domains Remote access  The postfix SMTP server access table contains the list for access control for remote SMTP clients: Open the /etc/postfix/main.cf configuration file and append: check_sender_access = hash:/etc/postfix/access Create the file, and add all the host names, network addresses, and envelope sender or recipient addresses postfix should accept in it (one per line) To make the hashfile: # postmap /etc/postfix/access Managing mailboxes  Don’t manage mailboxes from postfix. Redirect messages for delivery via POP/IMAP server. In case of dovecot there is dovecot-lda aka deliver that do everything and much more, like user-controlled message filtering, quota management, autoreplying etc. Most modern POP/IMAP servers have a lot of utilities for common tasks in infrastructures. Maildir is the newer and preferrable format due to the lot of improvements comparatively to mailbox. It has an index for each folder that allow to control duplicates, expiration times and even full-text search and is faster on a huge pile of messages. Dovecot can easily operate maildir with 300k messages in it without any visible slowdown. Abuse and spam  SMTP restrictions  The smtpd_*_restrictions directives can be used to set what data is accepted for any SMTP command, for example in /etc/postfix/main.cf : # smtpd_recipient_restrictions = reject_invalid_hostname, reject_unknown_recipient_domain, reject_unauth_destination, reject_rbl_client sbl.spamhaus.org, permit # smtpd_helo_restrictions = reject_invalid_helo_hostname, reject_non_fqdn_helo_hostname, reject_unknown_helo_hostname Blacklisting  Manually blacklisting incoming emails by sender address can easily be done with Postfix. Create and open an /etc/postfix/blacklist_incoming file and append sender email addresses: user@domain.com REJECT To create a database, use postmap command: # postmap hash:blacklist_incoming And append before the first permit rule in /etc/postfix/main.cf : smtpd_recipient_restrictions = check_sender_access hash:/etc/postfix/blacklist_incoming Use of others’ lists is also possible. An RBL list is a spammer blacklist of domains. In /etc/postfix/main.cf : smtpd_client_restrictions = reject_rbl_client dnsbl.sorbs.net Greylisting  Install the postgrey package. Open up /etc/postfix/main.cf and append smtpd_recipient_restrictions = check_policy_service inet:127.0.0.1:10030 Then start/enable the postgrey service and after that reload the postfix service. Its configuration is done via editing the postgrey.service file. Copy it over to edit it. # cp /usr/lib/systemd/system/postgrey.service /etc/systemd/system/ Using postgrey it is also possible to add automatic whitelisting based on successful deliveries. These then don’t have to wait any more. This can be done by , you could add the adding the --auto-whitelist-clients=5 (default is 5) but the preferred method is the override: # cat /etc/systemd/system/postgrey.service.d/override.conf [Service] ExecStart= ExecStart=/usr/bin/postgrey --inet=127.0.0.1:10030 \\ --pidfile=/run/postgrey/postgrey.pid \\ --group=postgrey --user=postgrey \\ --daemonize \\ --greylist-text=\"Greylisted for %%s seconds\" \\ --auto-whitelist-clients Add your own list of whitelisted clients in addition to the default ones by creating the file /etc/postfix/whitelist_clients.local (one host or domain per line). Restart the postgrey.service for the changes to take effect. Header filtering  Postfix header or body_checks are designed to stop a flood of mail from worms or viruses. Optional lookup tables for content inspection of primary non-MIME message headers are used. This does not decode attachments or unzip archives. Default is empty . In this mechanism checks can be made against regular expressions. For example, postfix can search for any string in an incoming email. In /etc/postfix/main.cf set: header_checks = regexp: /etc/postfix/headers_checks Then in /etc/postfix/header_checks append regular expressions for what to check for: /^(.*)@domain.com/ REJECT //Match any recipient/sender for a specific domain The mechanism can also be used to hide a sender’s IP and user agent in the Received header. This is a privacy concern mostly for sending email with Thunderbird. The received header will contain LAN and WAN IP and info about the email client used. Append to main.cf : smtp_header_checks = regexp:/etc/postfix/smtp_header_checks Create /etc/postfix/smtp_header_checks and append: /^Received: .*/ IGNORE /^User-Agent: .*/ IGNORE Relaying  Relaying means that a sender with host in domain A, connects to our mailer in domain B to send an email to someone in domain C. A party for spammers. The easiest way to control relaying is to use the smtpd_recipient_restrictions directive; If this directive is left undefined, Postfix uses the information given in the directives...",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8d791eba755fcea7b9bff345f4cfb4e4",
    "u": "https://mailserver.tymyrddin.dev/docs/dmarc/dmarc",
    "t": "DMARC configuration ",
    "c": "DMARC configuration  DMARC allows the domain owner to specify what happens with failed emails and get feedback when they arrive. Basically, there are three actions receiving servers can take if BOTH SPF and DKIM checks fail: none , quarantine , and reject . Setting it up takes five-steps as listed on the DMARC website Deploy DKIM & SPF . You have to cover the basics, first. Ensure that your mailers are correctly aligning the appropriate identifiers. Publish a DMARC record with the “none” flag set for the policies, which requests data reports. Analyze the data and modify your mail streams as appropriate. Modify your DMARC policy flags from “none” to “quarantine” to “reject” as you gain experience. Flaws as per the infosec institute We may think that, using SPF and DMARC would complete the holes in the mail filtering system. There is a small side effect for this method, i.e. the mail reaches the receiver end if either one of SPF or DKIM passes it in. If an attacker manages to find a way to pass SPF or DKIM, it will reach the inbox. An attacker can bypass the DMARC by creating a perfect mail copy if the following steps are followed: If the attacker uses a server IP that passes through SPF policy. This could be done by selecting the same email provider as the sender. Attacker can make use of any authorized server to create a mail; this mail will be given proper DKIM keys as other legitimate mail and would reach the receiver end. Let’s say that the senders side is fully configured with SPF, DKIM, DMARC and the receiver side is left without any proper configuration, the mail could easily reach the receivers end, since there are no properly established filters. Don’t fall asleep. Keep checking emails , and add PGP signing of messages.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6be683b6cc26ce267a61a3d9b53959fc",
    "u": "https://mailserver.tymyrddin.dev/docs/servers/dovecot",
    "t": "Dovecot ",
    "c": "Dovecot  Dovecot is an open source IMAP and POP3 server for Linux/UNIX-like systems, written primarily with security in mind. Dovecot aims to be a lightweight, fast and easy to set up open source mailserver. The below is for debian 9 (probably also works on buster) Installation  apt-get install dovecot-common dovecot-imapd dovecot-pop3d Get SSL certificate  Using Let’s Encrypt, request a certificate for the mail server by (replacing mail.mydomain.com with the fully qualified domain name (FQDN) of your server): certbot certonly --standalone -d mail.mydomain.com Configuration  Dovecot’s configuration files are in /etc/dovecot/conf.d/ . The default configuration is ok for most systems, but make sure to read through the configuration files to see what options are available. By default dovecot will try to detect what mail storage system is in use on the system. To use the Maildir format edit /etc/dovecot/conf.d/10-mail.conf to set it: mail_location = maildir:~/Maildir To configure it for the SSL certificates, open /etc/dovecot/conf.d/10-ssl.conf and append: ssl = required ssl_cert = </etc/letsencrypt/live/mail.mydomain.com/fullchain.pem ssl_key = </etc/letsencrypt/live/mail.mydomain.com/privkey.pem To force SSL/TLS encryption, open /etc/dovecot/conf.d/10-auth.conf and make sure: disable_plaintext_auth = yes SASL  In the main configuration file /etc/dovecot/conf.d/10-master.conf , uncomment the paragraph for Postfix in the auth service block: service auth { # Postfix smtp-auth unix_listener /var/spool/postfix/private/auth { mode = 0660 } } This will create the private/auth path for the SASL configuration of Postfix. Because Postfix runs chrooted in /var/spool/postfix , a relative path must be used. Integration with postfix  In /etc/postfix/master.cf append: dovecot unix - n n - - pipe flags=DRhu user=email:email argv=/usr/lib/dovecot/deliver -f ${sender} -d ${recipient} Firewall  To access the mail server from another computer, configure the server firewall to allow connections to the server on the necessary ports. The default ports are IMAP - 143; IMAPS - 993; POP3 - 110; and POP3S - 995. Configuration resources  Dovecot configuration Dovecot Quick Configuration",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7ebab8b4532c5ef47e3ce812b894baf5",
    "u": "https://pap.tymyrddin.dev/docs/mobile/spyware",
    "t": "Spyware ",
    "c": "Spyware  Spyware infects a device via the installation of a malicious app that has disguised itself as harmless . This means you could unknowingly infect your device with malware by downloading a malicious file from the web. Spyware can be spread to a device via pishing , smishing, and vishing. Spyware is designed to track activity on whatever device, or devices, it is installed on: websites visited, contacts, applications used, and login details for various online accounts, meaning payment details, social media logins, sensitive files, and other confidential data become vulnerable. Detection  Spyware uses the device resources, making the battery drain unusually fast. Spyware causes an increase in CPU usage. This causes the CPU to overload and overheat. Unusual changes and charges. Suspicious credit card activities. Increased data usage. Because spyware runs in the background continuously, it interferes with the shutdown process, making it slower. Spyware can record calls. While recording, it can create weird background noises like taps, static noises, distant voices, echoes, or random sounds. These noises can be heard on mobile phone calls or during video conferences. Mitigation  Manual removal does not require any tool or technical knowledge. Factory reset. Using Spyware Removal Software. Prevention  Have antivirus software installed on all devices. Many antivirus subscriptions offer multi-device cover, so check to see if your existing plan offers this, or whether you can find a provider that does. Keep device operating systems as up to date as possible. Having the most recent upgrade can improve security levels. Always use strong passwords on your social media accounts, user profiles, and apps. Use a different password for each account.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "87a6b4aaa47253207af374a21496c933",
    "u": "https://pap.tymyrddin.dev/docs/mobile/stalkerware",
    "t": "Stalkerware ",
    "c": "Stalkerware  Spyware and stalkerware are similar, yet not the same. Both are types of malware used to track a person’s activity on a device. But stalkerware is a more personal way of invading another person’s privacy. Stalkerware has to be physically installed, meaning that the attacker has to have direct access to the devices they are trying to compromise. Stalkerware is most likely used by a parent or partner. Stalkerware is less likely to masquerade as something else entirely. Not always. In some cases it claims to be a child protection app, featuring disguise, in which case it is clear it is used to spy on a partner without him/her knowing. Even without, when intended to track children’s activities, its intent is always considered malicious, as it invades privacy. With stalkerware installed on another person’s device, the adversary can activate the camera or microphone, view login details to different accounts, and sometimes even intercept phone calls. Growing list of found stalkerware  Tool Claims Platform mSpy Chats, photos, videos, and location. Android and iOS XNSPY Photos, videos, and social media chats Android eyeZy Feature-heavy phone spying app Android and iOS ClevGuard Activities Android, iOS, and Windows SpyBubble Real-time complete phone tracking iOS and Android Cocospy Control and Remote Surveillance Android and iOS uMobix Remote streaming of audio and video Android and iOS Hoverwatch Full-Featured Invisible Android Tracker Android and iOS FlexiSPY Emails, IM and browser activity Android pcTattetale Activities Android & Windows TheOneSpy Activities including live streaming Android Spyine Monitoring smartphone in stealth mode Android and iOS TheWiSpy Tracking location and monitoring files Android Detection  Stalkerware is designed to be stealthy so that the victim never realises their smartphone has been infected. Many of the usual tell-tale signs of spyware (unwanted pop-ups, slow performance, over-heating) are not present with stalkerware. Mitigation  Use a security app to scan the device. If you find stalkerware, report it to law enforcement (may not always and everywhere be an option). Prevention  Equip devices with a password, fingerprint login, or similar. This adds an extra layer of protection, as stalkerware cannot be remotely installed. Use routine malware scans (security app).",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "dd8b586d2a7d41882e6a74daa1074fae",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/raas",
    "t": "Ransomware-as-a-Service (RaaS) ",
    "c": "Ransomware-as-a-Service (RaaS)  Think of Ransomware-as-a-service (RaaS) in the larger Malware-as-a-Service (MaaS) ecosystem. RaaS allows less experienced adversaries to carry out attacks. While phishing is still used, drive-by download , VPN vulnerabilities and distribution over botnets are more likely used. For workstations (Windows, macOS, *nix), a ransomware infection means that data on the device has been encrypted or the operating system is being blocked, and its owner receives a message to pay a ransom. Mobile ransomware (Android, iOS) variants can also encrypt, but most use other techniques. While individuals, companies, and NGOs are all targets, the compromise of a small number of user accounts that have additional access or privileges, are especially valuable to adversaries . A ransomware attack can mean the loss of data, spending large sums of money, or both. We do it for [insert reasons here]  RansomedVC published the data of nine victims on its leak site in August 2023. The group has adopted the ideology of many other ransomware actors: “We are doing it for pentesting”, and humorously adds that any vulnerabilities found must also be reported to Europe’s General Data Protection Regulation (GDPR), threatening victims with data breach fines if the ransom is not paid.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d438285f31a6238711a491427a4dee9c",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/botnets",
    "t": "Botnet activity increase ",
    "c": "Botnet activity increase  A botnet is a collection of devices connected via the internet, each running a single bot or series of bots. Distributed Denial of Service Attacks (DDoS), crypto mining and click fraud are common activities done by botnets to enable adversaries to access a device. Attackers use Command and Control (C&C) software to control devices. Nearly all malware families use botnets for command and control (C&C) communications. With the growth in malware families and variants, it was to be expected that botnet activity increases as well. The number of “active days” increased - Measured by researchers as the time between when botnet activity was first detected by their sensors and when the botnet stopped communicating. The time between running C&C’s if detected has decreased, thanks to using attack infrastructure as code (IAC) . Current  Live botnet threatmap worldwide - Spamhaus",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c50d429621d33232df07e67720dfa8fa",
    "u": "https://pap.tymyrddin.dev/docs/mobile/swapping",
    "t": "SIM swapping ",
    "c": "SIM swapping  In SIM swapping an adversary steals your number and assigns it to a new SIM card in a phone they control. It is the same process you go through when you get a new phone and the mobile carrier gives you a new SIM card. The adversary can now use your SIM card to steal further information to log in to your accounts and either enter a verification code or reset the account password using the code or link sent to the phone. Prevention   the mobile phone operator and add extra security or temporarily freeze number porting to help protect yourself from SIM swapping. Check if your accounts let you use a non-SMS multifactor authentication option, in which you provide two pieces of proof to verify your identity.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cda1331e87cff4008d0ffe5771715666",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/maas",
    "t": "Malware-as-a-Service (MaaS) ",
    "c": "Malware-as-a-Service (MaaS)  Think of Malware-as-a-Service (MaaS) and the larger Crime-as-a-Service (CaaS or Craas) market as a variation of the Software-as-a-Service (SaaS) business model. For a reasonable monthly fee, adversaries who do not know how to write their own InfoStealer or Ransomware yet, can simply pay to use one written by an expert. It works similar to legitimate subscription services. In this business model, developers offer negotiations, cryptocurrency transfers, leak site management, ransomware development, botnets, etc. to multiple affiliates, in trade for cryptocurrency and not running the risk of getting identified and arrested. We only had to wait for it. Anyone with a few hundred euros worth of cryptocurrency can get started with a few clicks. Tongue, cheek  Deploy Disaster-Recovery-as-a-Service (DRaaS) to ensure quick recovery in case of an attack.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "35416cea473fc5bcc202d1b7256cddfd",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/adversaries",
    "t": "Unusual suspects ",
    "c": "Unusual suspects  Nation state  Nation-state actors and criminals-with-license from China and Russia, similar actors from the Five Eyes (make that many eyes), adversaries from other nation states, for information and profit. These have virtually unlimited resources (from taxpayers), direct access (including through confiscating equipment), and if not for that, never-ending exploits/backdoors (gifts that keep giving), anonymisation and C&C, immunity from prosecution (laws are for subjects, they stand above it), and plausible deniability (lying). These adversaries believe it is their right/obligation/duty. Digital crime gangs  Organised digital crime gangs, in it for profit. These have virtually unlimited resources too (from previous attacks), reverse engineered or copied never-ending exploits/backdoors (gifts that keep giving), and lying. Insiders  If you are defending an organisation, insiders working for either of the two groups (for money), or just unhappy people out for some (personal) revenge for something. Anyone, really  If you have bitcoin and can click, you can be an adversary, thanks to Malware-as-a-Service (MaaS) . All of ‘em  In all cases, adversaries are highly motivated and/or conditioned, and are lying, including to themselves with “We do it for [insert reasons here]”. In general, attackers are multiplying, diversifying their exploits, and making attacks more targeted. Cybercrime organisations and nation-state offensive groups operate much more like traditional companies, with responsibilities, deliverables, and objectives. They quickly adopt new technologies, and have deep pockets from past exploits or from nation-state sponsors, allowing experimenting with and incorporating new technologies like generative AI, which make their attacks more complex and much harder to detect. Distribution seems to have become more concentrated with adversaries carrying out more targeted attacks using quickly adaptable and sophisticated playbooks ( which were probably adopted from red teaming ).",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "fe4e93e0a0862d23d04eef7287e0533f",
    "u": "https://pap.tymyrddin.dev/docs/thm/cases",
    "t": "Basic phishing labs ",
    "c": "Basic phishing labs  DIY on TryHackMe: Phishing Analysis Fundamentals - Learn all the components that make up an email. Phishing Emails in Action - Learn the different indicators of phishing attempts by examining actual phishing emails. Phishing Analysis Tools - Learn the tools used to aid an analyst to investigate suspicious emails.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1ee9b53c306897b2bd103c7da1282804",
    "u": "https://macos.tymyrddin.dev/",
    "t": "Hardening macOS ",
    "c": "Hardening macOS  Version 0.1: These mitigations are all based on Catalina. Supposedly, Big Sur has better security . Some of the below is still applicable and useful. When we have a Big Sur set up we will test it, and split and update these mitigations. Authentication Introduction Disable automatic login Require a password when resuming Make that more secure passwords Use a password manager Use multi-factor authentication (MFA) Protect SSH access with MFA Services and applications Introduction Restrict which apps can run System integration protection (SIP) Secure browsers that protect your privacy Use a secure messaging service Use secure email services Use SSH tunnels Use a VPN service Use a firewall as a VPN fail-safe mechanism Use alternative DNS servers Use a Tor proxy Change MAC address Renew IP lease Edit hosts file Data Introduction Set up the time machine and backups in macOS Enable full disk encryption using FileVault Password protect files and folders Privacy Introduction Disable location services and other privacy settings Remove metadata from files Edit exif metadata in images Remove metadata with hex editors Clean machine with BleachBit Malware Introduction Mac myths Scan and clean machine Catch and remove daemons and launch agents Analysing trojans Operations security Introduction Use email securely Detecting fake emails and phishing Browse more safely Check integrity of downloads ‘;–have i been pwned? Guards! Guards! Introduction Alphabet soup macOS intrusion detection systems OSSEC",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "66316622b4941ff48a4787b7a15dc9ea",
    "u": "https://macos.tymyrddin.dev/docs/services/dns-servers",
    "t": "Use alternative DNS servers ",
    "c": "Use alternative DNS servers  When you don’t set up DNS servers on your computer or router, your DNS queries will run on your ISP’s DNS servers. Without VPN (with killswitch and/or firewall set as a VPN fail-safe mechanism ), DNS requests are most likely sent unencrypted, which can lead to common DNS attacks. Domain hijacking (Redirection) DNS flood attack (a type of DDoS attack) DNS spoofing or DNS cache poisoning DNS hijacking (malware infection on a local device to hijack DNS to redirect traffic to a phishing site) And any man in the middle of your traffic can see your online behaviour and the websites you visit. Your ISP’s DNS servers see every search you make in your browser. Using your ISP’s DNS servers as default DNS servers doesn’t do anything for security or privacy. Alternative DNS servers  OpenNIC is a group of volunteers who run an alternate DNS network offering free DNS servers. Depending on your location, you are offered different servers. OpenNIC offers DNS neutrality (it does not censor content), and you get the right to choose how much data OpenNIC logs. OpenDNS is a cloud-based service offering three solutions in their Home package, two of which are free. To connect with your nearest DNS server, and for faster page load times, it uses anycast routing. DNSWatch also offers DNS neutrality and does not log any DNS queries or record history. Quad9 DNS blocks malicious and suspicious domains using security intelligence from a group of companies to improve security. They do keep logs on some activity. Use wireshark to check for leaks  To check if you have DNS leaks, fire up Wireshark : Start capturing on the active interface and connect to the VPN. After capturing either a fixed number of packets, or an amount of data or for a specific time period, go to //Statistics -> Endpoints// There should only be one public IP address, namely that of the VPN server that you’re connected to. The ‘’10.0.2.15’’ in this image is a local address.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "bcff69e0287204853b3686eb8a3a6a3f",
    "u": "https://macos.tymyrddin.dev/docs/authentication/resuming",
    "t": "Require a password when resuming ",
    "c": "Require a password when resuming  Password protect your Mac when it goes to sleep or when the screen saver begins. Go to Apple > System Preferences and click Security & Privacy. Make sure the General tab is selected. Check the Require password box. Select how soon after your Mac goes to sleep, or the screen saver begins. It’s a good idea to choose Immediately, especially in a public place, or anywhere there are other people around. You will be able to wake the computer with your local password .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "852dc5e3454f47b2891e51d3af654da7",
    "u": "https://macos.tymyrddin.dev/docs/services/vpn-fail-open",
    "t": "Use a firewall as a VPN fail-safe mechanism ",
    "c": "Use a firewall as a VPN fail-safe mechanism  If you simply add a VPN using common instructions, it generally “fails open”. That means, if the VPN breaks down, because the connection is interrupted, traffic will be sent without the VPN. It is much safer when it “fails closed”, meaning that when the VPN connection breaks down, the whole internet connection must be down as long as the VPN connection is not restored. If your chosen VPN does not include being able to set a kill switch, you can use your firewall as a fail-safe mechanism: Kill switch using pf  Get the IP address of the VPN gateway that the kill switch is intended for using the host command. Get the network interface name connected to your default gateway and the subnet of the local network using the route command. After connecting to the VPN, by running the command `ifconfig -a and searching for POINTOPOINT, find the interface used by the VPN: $ ifconfig -a | grep -i POINTOPOINT utun0: flags=8051<UP,POINTOPOINT,RUNNING,MULTICAST> mtu 2000 Create a killswitch.pf.conf configuration file (The file can be created on the user $HOME directory and have any name): int_en1 = \"[network interface name]\" vpn_utun1 = \"[interface used by the VPN]\" vpn_ip = \"[IP address of the VPN gateway]\" set block-policy drop set ruleset-optimization basic set skip on lo0 block all block out inet6 # dns pass quick proto {tcp, udp} from any to any port 53 keep state # Allow broadcasts on internal interface pass from any to 255.255.255.255 keep state pass from 255.255.255.255 to any keep state # Allow multicast pass proto udp from any to 224.0.0.0/4 keep state pass proto udp from 224.0.0.0/4 to any keep state # Allow ping pass on $int_en1 inet proto icmp all icmp-type 8 code 0 keep state # Allow dhcp pass on $int_en1 proto {tcp,udp} from any port 67:68 to any port 67:68 keep state # Use only the vpn pass on $int_en1 proto {tcp, udp} from any to $vpn_ip pass on $vpn_utun1 all Load the PF rules: $ sudo pfctl -Fa -f ~/killswitch.pf.conf -e To disable: $ sudo pfctl -d To load your system defaults (no kill switch): $ sudo pfctl -Fa -f /etc/pf.conf -e",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "916c7d6b922056a13594fe1cb80c5eaf",
    "u": "https://macos.tymyrddin.dev/docs/opsec/integrity-downloads",
    "t": "Check integrity of downloads ",
    "c": "Check integrity of downloads  When downloading an ISO image of, for example, the latest Linux distro, installing or upgrading packages, or downloading software, you can verify the files have downloaded correctly and securely by using checksums. Checksums ensure the integrity of data portions for data transmission or storage. Checksums is a simple error-detection scheme in which each transmitted message is accompanied by a numerical value based on the number of set bits in the message. The receiving station then applies the same formula to the message and checks to make sure the accompanying numerical value is the same. If not, the receiver can assume that the message has been garbled (or was altered). Verifying downloaded software  AMFI: checking file integrity on your Mac",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "71aea0e81c79127169fb3f47178da7ce",
    "u": "https://macos.tymyrddin.dev/docs/data/disk-encryption",
    "t": "Enable full disk encryption using FileVault ",
    "c": "Enable full disk encryption using FileVault  FileVault is a built-in utility on your Mac that encrypts all the data on your hard drive. When FileVault is enabled, the contents of your drive cannot be accessed without a login password or recovery key. FileVault is off by default, as most users may find that encrypting the entire drive is a bit overkill. Having to type a password to open a file and the time required to initially encrypt your entire drive may outweigh the security FileVault provides. For home use, in a non-threatening environment, maybe. As activist protecting land, animal and/or human rights, most likely not. Enable FileVault  Go to System Preferences -> Security & Privacy and click the FileVault tab. Click the lock at the bottom to be able to make changes and enter your administrator password. Click Turn On FileVault Choose how to unlock your disk and reset your password if you ever forget it: Use iCloud (easier, but less secure) Create a FileVault recovery key (store on paper and/or dedicated USB stick) Create a Vault  On a Mac, DMG files are usually associated with installing apps. DMG files can also be used as encrypted vaults to store sensitive files and folders. This feature is like using a program like VeraCrypt on Linux. Go to Disk Utility -> File -> New Image -> Blank Image and enter the information for the DMG file File name in Save As Where to save the file Size of Vault Format Encryption type Enter a password when asked to secure the DMG file. Once it is created, it is opened. It shows up in Finder and on the desktop as another drive. Move your private files and folders in it. To lock it, eject it from its desktop icon like any other external hard drive connected to your Mac. To open it, double-click on the file and enter your password.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3697818c2651fef9ead96f6486c818ee",
    "u": "https://macos.tymyrddin.dev/docs/services/restrict-apps",
    "t": "Restrict which apps can run ",
    "c": "Restrict which apps can run  The Gatekeeper allows you to choose from where apps can be installed. You can choose to only allow apps from the App Store to be installed or apps from the App Store and from identified developers. To choose one of these option, go to Apple -> System Preferences -> Security & Privacy -> General You can still install apps from anywhere, but you must specifically approve each app separately on the General tab on the Security & Privacy screen in the System Preferences.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "351cfd07039d20b28d587fce37414dc3",
    "u": "https://macos.tymyrddin.dev/docs/services/tor-proxy",
    "t": "Use a Tor proxy ",
    "c": "Use a Tor proxy  Tor proxy  Install: $ brew install tor Start it: $ tor Set network proxy settings via System Preferences  Go to System Preferences > Network From Location dropdown at the top, select Edit Locations Create a new location by hitting the plus button and name it Tor. Hitting Done will select the new location which is now ready to be configured. Go to Advanced > Proxies and activate SOCKS Proxy and add: SOCKS proxy server: localhost Port: 9050 Now you can switch to this location from your menu bar under Location whenever you start up Tor. Switching to the Tor location routes all network traffic on your system through Tor. You have to repeat these steps for every network interface, ethernet, Wi-Fi. Notes  If a government makes their own national internet, or routes traffic through specific servers to use deep packet inspection (DPI), running Tor may not provide security if the government is able to see the entire path. Sometimes the Tor network is censored, and clients can’t connect to it. An increasing number of censoring countries are using Deep Packet Inspection (DPI) to classify Internet traffic flows by protocol. While Tor uses bridge relays to get around a censor that blocks by IP address, the censor can use DPI to recognize and filter Tor traffic flows even when they connect to unexpected IP addresses. With pluggable transports, censorship against Tor can be bypassed. Not only that. If an attacker can see your traffic, and can see the website you’re visiting, even with a path outside the adversary’s control - they will still be able to correlate the traffic and learn you are visiting the website. If the same connection (the same set of relays) were to be used for a longer period of time a Tor connection could be vulnerable to statistical analysis, which is why the client software changes the entry node every ten minutes.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "41e93c2df0a437f82dc06adb857a0c79",
    "u": "https://macos.tymyrddin.dev/docs/malware/daemons-and-agents",
    "t": "Catch and remove daemons and launch agents ",
    "c": "Catch and remove daemons and launch agents  Automagically assisted  EtreCheck (free for the first five reports) Lingon X KnockKnock BlockBlock Manually  Open the Activity Monitor app, and choose View -> All Processes. At the top are two main processes: kernel_task and launchd , with process ID (PID) 0 and 1 respectively. launchd is the primary parent process when the system starts. It is also the last process to exit when the system shuts down. Do NOT remove it. The core responsibility of launchd is to launch other processes or jobs on a scheduled or on-demand basis. These processes come in two flavours: LaunchDaemons and LaunchAgents. LaunchDaemons typically run as root, and can be found in /System/Library/LaunchDaemons (native macOS processes) and /Library/LaunchDaemons (installed third-party apps). LaunchAgents start when a user logs in. They can access the user interface and display information, and can be found in Library/LaunchAgents (all user accounts), ~/Library/LaunchAgents (user account), and /System/Library/LaunchAgents (macOS only). Before logging in, launchd runs services and other components specified in .plist files from the LaunchDaemons folder. After logging in, launchd runs services and components defined in .plist files from the LaunchAgents folders. Those in /System/Library are all part of macOS and protected by System Integrity Protection. .plist files follow the standard reverse domain naming system: company name, followed by an application identifier, and ending with the property list file extension (.plist). For example, co.clario.Clario.plist . The public LaunchDaemon and LaunchAgent folders are open to both legitimate and illegitimate apps. You can monitor these folders with Folder Actions. Folder actions  Open the AppleScript Editor app. Click Preferences and choose General -> Show Script menu in menu bar Click the Script Menu icon and choose Folder Actions -> Enable Folder Actions Select Attach Script to Folder in that same menu A dialog box will pop up. Select add - new item alert Click OK to open a Finder window. Select the user LaunchDaemon folder and click Choose Repeat the procedure for every LaunchAgents folder. Then: Open Finder and click Go > Go to Folder Type ~/Library/LaunchAgents and click Go Right-click the LaunchAgents folder, and choose Services -> Folder Actions Setup to bind the new item alert script to each folder. In the dialog box that pops up, you’ll see the list of folders in the left column and script in the right column. If there are no scripts, click the plus (+) button and add new item alert.scpt. Now macOS will show an alert popup whenever a new item is added to one of these folders, allowing you to immediately know when illegitimate apps try to inject themselves into the system in the background. Remove items  Be careful. Not all third-party .plist files are malicious. They can be: Components of legitimate installed apps Remnants of old apps you no longer use Leftovers from previous macOS upgrades Migration Assistant leftovers PUPs (potentially unwanted programs), adware, and malware DO NOT delete any components of installed apps. To remove remnants of old apps, leftovers from previous macOS upgrades, PUP’s, adware and malware, just delete the .plist file and reboot. Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "95a445b888e0e5c47a2f407fbadacb54",
    "u": "https://macos.tymyrddin.dev/docs/malware/clean-machine",
    "t": "Scan and clean machine ",
    "c": "Scan and clean machine  Automagically  Choose your scanner carefully, have a look at AV Comparatives’ test results for macOS . Manually  Check activity monitor  Open Activity Monitor from Applications -> Utilities Go to the CPU tab Click the % CPU column to sort high to low, and look for high CPU use If you see a process that looks suspicious, do a DuckDuckGo search on it Check for unwanted applications  Go to the Applications folder Look for any apps you do not recognize or do not remember installing Check with DuckDuckGo whether they are legitimate or not If they are not, or if you are suspicious, delete them and empty your Trash Note that this does not help much with trojans , evil files made to look like legitimate apps. Look at login items  In System Preferences, select Users & Groups Go to the Login Items tab Look through the list, and select anything suspicious Click the minus button to remove it Note that LaunchDaemons and LaunchAgents will not appear in this list. Fail  If all else fails, go to a previous point in time or backup. If that fails too, the NVRAM or Time Machine or backups may even be infected. It is possible for malware to persist across a re-format and re-install, if it is sufficiently ingenious and sophisticated: if for example, it can persist in NVRAM, in the firmware for peripherals (some hardware devices have firmware that can be updated, and thus could be updated with malicious firmware), or with a virus infecting data files on removable storage or on your backups. Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "eb8e602fd39b3da8a0e81a60c0304298",
    "u": "https://macos.tymyrddin.dev/docs/malware/myths",
    "t": "Mac myths ",
    "c": "Mac myths  There are no viruses for Mac  On the contrary, that macOS has been less affected by viruses in the past has resulted in weaker defence mechanisms. And this myth is exactly what makes macOS attractive for virus creators and social engineers. Sleepy users and weakened defences. Apple quickly fixes vulnerabilities  Nope. In May 2019 Filippo Cavallarin discovered a vulnerability in the Gatekeeper, gave Apple 90 days to fix it, and having had no response, went public with it on his blog . Gatekeeper is the tool that prevents unauthorised apps from being installed on a Mac. And Filippo Cavallarin was not the first. Independent virus researchers who discover fresh security holes often get vague responses from Apple. And even when, the solution take a long time.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ee3a5cb39d38e3a2566126352ac35865",
    "u": "https://macos.tymyrddin.dev/docs/data/time-machine",
    "t": "Set up the time machine and backups in macOS ",
    "c": "Set up the time machine and backups in macOS  The Time Machine works by creating historic backups of your Mac. It keeps older copies of files even after you edit or delete them, until a time when you need more storage for newer backups. Thanks to these historic backups, you can travel back in time to restore your Mac’s data from days, weeks, or months ago. Requirements are a large speedy solid-state drive with two partitions: a partition for the Time Machine backup and the other partition to store files. Partitioning the drive  Connect the external hard drive to the Mac. Go to Applications -> Utilities and launch Disk Utility Select the external drive from the sidebar and click the Partition button. Use the Add (+) option to create a new partition and choose Name, Format, and Size for each partition by selecting it in the diagram. The Time Machine partition must use the Mac OS Extended (Journaled) format. The file storage partition can use any format. Choose ExFat if you plan to use it with Windows. Otherwise, choose Mac OS Extended (Journaled). Click Apply, followed by Partition. Set up time machine  Go to System Preferences -> Time Machine Click Select Disk and choose the Time Machine partition Time Machine backups will start from scratch from this date forward. After the first backup, you can automatically start a backup with Time Machine (check the Backup Up Automatically box), or start a backup manually by accessing the Time Machine menu and starting the backup from there. Backups for the file storage partition  Create separate backups for anything in your file storage partition. Acronis True Image Carbon Copy Cloner ChronoSync Get Backup Pro SuperDuper",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "935923c87edd8ad51a064d2488741922",
    "u": "https://macos.tymyrddin.dev/docs/malware/readme",
    "t": "Introduction ",
    "c": "Introduction  MacOS has built-in protection against malware . XProtect scans for malware using a database of virus signatures maintained by Apple, but is limited. Apple is not a dedicated security company, and it has not struggled much with malware in the past, leading to two major myths . Big Sur is available as a free upgrade, promising the most secure version of macOS. The biggest threats to a macOS come from potentially unwanted programs, adware, ransomware and other code that finds its way onto a Mac because it is bundled with legitimate-looking software or because it was downloaded as something else. Common signs of Mac malware: Extremely slow performance A browser homepage change Pop-ups and other intrusive ads Freeze-up and restarts Browser redirection Find these, or think you may have an infected system, or just wish to know more: Endpoint detection and response Malware analysis DIY: Scan and clean machine Catch and remove daemons and launch agents Analysing trojans",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b4dc7fc4686a1ed74eab1de1cb823eb7",
    "u": "https://macos.tymyrddin.dev/docs/privacy/metadata-images",
    "t": "Edit exif metadata in images ",
    "c": "Edit exif metadata in images  Native  Open Photos app on your Mac. With Photos tab selected in the left pane, rght click any thumbnail on the right and select Get Info. A window opens, showing the file name and format, camera data, and profile photos of people that Photos recognizes. Click in the window, and you can add or edit title, description, keywords and location. For more data: Open image in Finder. Click Tools > Show Inspector in the top toolbar. This opens a window containing four tabs. The first tab provides summary information, and clicking on the second tab reveals 5 more tabs: General, IPTC, EXIF, JFIF and TIFF. Click on these to see all the metadata information. ExifEdit  ExifEdit gives an intuitive way to edit EXIF & IPTC metadata for thousands of photos in a single click.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9125eebd7a5667fe9e789b23066ae9da",
    "u": "https://macos.tymyrddin.dev/docs/data/pwprotect",
    "t": "Password protect files and folders ",
    "c": "Password protect files and folders  You can protect all the files on your Mac by encrypting a Vault (or entire drive) with FileVault . If you consider FileVault a bit of an overkill for your purposes, you can password protect your files and folders in different ways. iWork suite documents  If you have Pages, Keynote, or Numbers files with sensitive information, you can password protect those files. Open the file you want to protect Go to File -> Set Password Enter a Password Verify the password If you want a hint to help you remember your password, enter a Password Hint Set Password PDF Files in Preview  Open the PDF file you want to protect (does not work for image files) Go to the File menu and then press the Option key. The Duplicate menu option becomes Save As. Select the Save As option. On the Save dialog box, check the Encrypt box towards the bottom. Enter a Password Verify the password Save To remove the password protection from a PDF file, open the file, enter the password, use the Option key to access the Save As option again and uncheck the Encrypt option on the Save dialog box. Save the file with a new name and delete the old password protected file. Microsoft Word files  Open the Word file you want to protect Click the Review tab, and then click Protect Document On the Password Protect dialog box, enter Password Optionally require a Password to modify the document Optionally add other Protection to the document Optionally Remove personal information from this file on save Save Microsoft PowerPoint and Excel files  Password protecting a Microsoft Excel workbook is similar to protecting a PowerPoint presentation, but the dialog box is different. Go to File -> Passwords Under Password to open, check the “Encrypt this presentation and require a password to open” box. On the Set a password for this presentation dialog box, enter New password Verify the password Click Set Password OK To remove the password from the presentation, open it, go to File -> Passwords, and uncheck the “Encrypt this presentation and require a password to open” box. Password protect folders  Disk Utility can erase, format, repair, and partition hard drives. It can also can create an encrypted disk image, or a single file that contains the entire contents of a drive or other media like external USB drives, CDs, or DVDs. Copy the files you want to protect into a folder Open Disk Utility Go to File -> New Image -> Image from Folder Select the folder you want to encrypt and click Choose. In box enter Enter a name for the disk image in the Save As box Where to store the DMG file Encryption type (128-bit or 256-bit AES) (Enter a Password and then Verify the password) Select read/write from the Image Format dropdown list Save A progress dialog box appears and a message saying that the operation was successful Click Done Use Eraser to securely delete the original files Disk Utility adds the disk image to your desktop. Double-click the disk image icon to access the files inside it. To access the files you added to the disk image, double-click on the DMG file and enter the password when prompted. Eject the disk image when you’re done using it, so the files are password protected again.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d1f266ac84b9294e67e8444cedc28d48",
    "u": "https://macos.tymyrddin.dev/docs/privacy/hexeditors",
    "t": "Remove metadata with hex editors ",
    "c": "Remove metadata with hex editors  The hexadecimal notation is almost universally used in computing - and not without a reason. There are sixteen hex digits - 0 to 9, and A to F (which correspond to decimal values 10 to 15), and each hex digit represents exactly four bits. Exactly two hex digits represent a byte, which can have a value from 00 to FF. A hex byte is the only kind of object a computer handles, and hex bytes are used to represent anything. For example, a hex byte 50 may represent the capital letter P, the processor command push eax, the decimal number 80, a colour component with 50% brightness, or whatever else lives in the digital world. And that means we have editors, hex editors, that can be used to view and change files, all files, on a very low level. As in, they can be used to remove metadata from any and all files. Usage in general  backup the file before using a hex editor on it. switch to ASCII mode, turn off “read only” mode, and start searching through the file. For example, when scrubbing pdf’s from creation and modification information look through the entire file for “created” (metadata appears in the PDF file more than once). If and when you find metadata, change to fake data or delete. Then repeat your search again for the terms “create”, “creation”, “modified”, and “modify”, and similarly either replace or delete the dates, once again being sure to repeat each search so that any potential multiple instances of the field can be located and modified or blanked out. Using software  iBored Online  Hexed.it HTML5/JS => will be cached on local machine and can then be used.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "04946ec5c5653825b875155e63b4d5ab",
    "u": "https://macos.tymyrddin.dev/docs/guards/soup",
    "t": "Alphabet soup ",
    "c": "Alphabet soup  Firewall  A firewall implements rules that prevent network traffic based on protocol, source/destination address, and/or source/destination port. Firewalls can implement access control lists and prevent the use of insecure protocols, such as blocking all traffic on TCP port 23 (Telnet’s default port). IDS  An IDS platform can analyse network traffic for patterns and recognize malicious attack patterns. It can create notifications, but it can not block the unwanted packets from entering the network. IDS can be deployed either at the host level or the network level. Host-based monitors (and protects) the specific host (for example a single PC) it is installed on. For example, a HIDS will look at log and config files for any unexpected rewrites. Network-based focuses on protecting an entire network. Usually, dedicated hardware appliances run such software. For example, a NIDS will look at the checksums in captured packets and message authentication integrity of systems such as SHA1. The fact that a NIDS is usually installed on a stand-alone piece of equipment means that it doesn’t drag down the processors of servers or PC’s. The activity of HIDS is not as aggressive as that of NIDS and can be implemented by a lightweight daemon on the computer which does not burn up too much CPU. Neither system generates extra network traffic. In addition to the two main types of IDS, there are also two main subsets of these IDS types: Signature-based Intrusion Detection System (SBIDS). An SBNIDS for example, tracks all the packets passing over the network and then compares them to a database containing attributes or signatures of familiar malicious threats. Anomaly-based Intrusion Detection System (ABIDS). An ABNIDS for example, tracks the traffic of a network and then compares it to an established measure (which could be machine learning based) and this allows the system to find what is normal for the network in terms of Ports, Protocols, Bandwidth, and other devices, and alerting administrators about any unusual or potentially malicious activity in the network. IPS  IPS combines the analysis functionality of an IDS with the ability to intervene and prevent the delivery of malicious packets. IPS interact with firewalls and software applications by adjusting settings. Incorrectly calibrated IPSs can cause havoc and bring your legitimate network activity to a halt.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "264ff24bc4555ff262d676a8c55b8035",
    "u": "https://macos.tymyrddin.dev/docs/authentication/login",
    "t": "Disable automatic login ",
    "c": "Disable automatic login  It is perhaps annoying to have to enter your password every boot, but it is a little price for preventing someone getting into your account and accessing your data. Go to Apple > System Preferences and click Users & Groups. Click Login Options at the bottom of the list of users on the left. Click the lock at the bottom of dialog box and enter your password when prompted. This allows you to make changes to the settings. Select Off from the Automatic login dropdown list. You will have to enter your password every time you boot your Mac.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "56817de221bf72b51eb450047c042b97",
    "u": "https://macos.tymyrddin.dev/docs/services/change-mac",
    "t": "Change MAC address ",
    "c": "Change MAC address  A MAC address identifies the device connected to a network and allows the network to track, restrict or allow access based on it. Routers identify and assign static IP addresses based on the MAC addresses of devices. Before you try to change the MAC address, you need to know the value that you want to use. Set the 2’s place bit (the “locally administered” bit) in the first byte, to differentiate it from a guaranteed globally unique MAC address. Usually the first three bytes an unicast MAC address is an “Organizationally Unique Identifier” (OUI) that the IEEE assigned to the manufacturer of your Ethernet device. Manufacturers are required to make sure they keep the last 3 bytes unique. Avoiding all of that knowledge, the MAC address generator tool can generate a valid address for you. If a specific MAC address, like 00:0a:95:9d:68:16 , is required: $ sudo ifconfig en0 00:0a:95:9d:68:16 To randomly generate new MAC address and assign it to en0 network interface: $ openssl rand –hex6 | sed ‘s/(..)/1:/g; s/.$//’ | xargs sudo ifconfig en0 ether When you restart your Mac computer, the Mac address reverts to the default.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "191d8fbbc3a5524527870bb70c214311",
    "u": "https://macos.tymyrddin.dev/docs/services/ssh",
    "t": "Use SSH tunnels ",
    "c": "Use SSH tunnels  Secure Shell (SSH) can be used to securely acquire and use a remote terminal session and has other uses as well. You can use SSH to tunnel traffic, transfer files, mount remote file systems, and more. SSH also uses strong encryption, and you can set your SSH client to act as a Socks proxy. Once you have, you can configure applications on your computer – such as your web browser – to use the Socks proxy. The traffic enters the Socks proxy running on your local system and the SSH client forwards it through the SSH connection – this is known as SSH tunneling. This works similar to browsing the web over a Virtual Private Network (VPN) . From a web server perspective, traffic appears to be coming from the SSH server. The traffic between source and the SSH server is encrypted, so you can browse over an encrypted connection as you could with a VPN. You must configure each application to use the SSH tunnel’s proxy. Port forwarding or port mapping is a name given to the combined technique of: Translating the address and/or port number of a packet to a new destination. Possibly accepting such packet(s) in a packet filter (firewall). Forwarding the packet according to the routing table. SSH tunnels can be created in several ways using different kinds of port forwarding mechanisms. And you can protect SSH access with MFA . Tunnelling with local port forwarding  Imagine wikileaks being blocked using a proxy filter in a university network somewhere. An SSH tunnel can be used to bypass this restriction. Let’s name the machine in the university network socially-correct and a home machine home . The home machine has a public IP and is running an SSH server. The student in case has ssh user access on home and socially-correct has access to host:hostport (is not blocked). $ ssh -L localport:host:hostport user@home -N where: -L : port forwarding parameters localport : local port (choose a port that is not in use by other service) host : server that has the port (hostport) that you want to forward hostport : remote port -N : do not execute a remote command (you will not have the shell). user : user that has ssh access to the ssh server home : the machine/server running the ssh server that will be used for forwarding/tunneling For example, to create the SSH tunnel execute following from the socially-correct machine: $ ssh -L 9001:wikileaks.org:80 user@home Open a browser and go to http://localhost:9001 to see if the tunnel is working. The SSH client at socially-correct will connect to the SSH server running at home (usually running at port 22) binding port 9001 of socially-correct to listen for local requests thus creating an SSH tunnel between home and socially-correct. At the home end it will create a connection to wikileaks.org at port 80. So socially-correct doesn’t need to know how to connect to wikileaks.org. Only home needs to worry about that. The channel between socially-correct and home will be encrypted while the connection between home and wikileaks.org will be unencrypted. The home-to-wikileaks.org connection is only made when the browser makes the request, not at tunnel setup time. The SSH man pages say: -L port:host:hostport specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side. This works by allocating a socket to listen to port on the local side, and whenever a connection is made to this port, the connection is forwarded over the secure channel, and a connection is made to host port hostport from the remote machine. Port forwardings can also be specified in the configuration file. Only root can forward privileged ports. IPv6 addresses can be specified with an alternative syntax: port/host/hostport -N Do not execute a remote command. This is useful for just forwarding ports (protocol version 2 only). Local port forwarding can also be used to set up a VNC session between socially-correct and a home server. From socially-correct : $ ssh -L 5900:localhost:5900 user@home The localhost is relative to the gateway (home in this case), not the machine from where the tunnel is initiated. So this will make a connection to port 5900 of the home computer where the VNC client would be listening. Reverse tunnelling with remote port forwarding  To be able to SSH from the Internet into a machine behind a firewall, you need the machine in question to open an SSH connection to the outside world and include a -R tunnel whose “entry” point is the “remote” side of his connection. What if we wish to connect to an internal university website from home with a set-up like above in tunnelling with local port forwarding? The university firewall is blocking all incoming traffic. We can connect from home to the university internal network so that we can browse the internal site. We can initiate the tunnel from the socially-correct computer behind the firewall. This is possible since only incoming traffic is blocked and outgoing traffic is allowed. The client will now be at the home computer and instead of using the -L option, the -R option, which specifies a reverse tunnel is to be created, is used. From socially-correct : $ ssh -R 9001:internalsite.org:80 user@home The SSH client at socially-correct will connect to the SSH server running at home creating an SSH channel. The server will bind port 9001 on the home machine to listen for incoming requests that are then routed through the created SSH channel between home and socially-correct . Now it’s possible to browse the internal site by visiting http://localhost:9001 in a web browser on the home machine. The socially-correct machine for work at the university will then create a connection to internalsite.org and relay back the response to home via the created SSH channel. Even though the traffic is encrypted, the name resolution may not be encrypted => DNS leakage. Programs like firefox allow you to ensure that there is no such DNS leakage . For example, in Firefox, browse to about:config and make sure the setting for network.proxy.socks_remote_dns is set to true. Dynamic port forwarding  Dynamic port forwarding allows for configuring one local port for tunnelling data to all remote destinations. This requires Socket Secure SOCKS. At the client side of the tunnel a Socks proxy would be created and the application uses the Socks protocol to specify where the traffic should be sent when it leaves the other end of the ssh tunnel. In a set-up like used in local port forwarding and reverse port forwarding, from the socially-correct machine at university: $ ssh -D 9001 user@home SSH will create a Socks proxy listening in for connections at local port 9001 and when receiving a request routes the traffic via the SSH channel created between socially-correct and home. Configure the browser to point to the Socks proxy at port 9001 at localhost .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8505ea5f3dd8c4575172a574e6efdd63",
    "u": "https://macos.tymyrddin.dev/docs/guards/readme",
    "t": "Introduction ",
    "c": "Introduction  There are many types of devices and mechanisms within the security environment to provide a layered approach of defense. This is so that if an attacker is able to bypass one layer, another layer stands in the way to protect the network. Two of the most popular and significant tools used to secure networks are firewalls and intrusion detection systems. Choosing a firewall for a Mac  With a firewall, you can: Log hosts scanning services that aren’t running. Limit the services that applications can connect to. Segregate the local network into trust segments (Local Area Network (LAN), DeMilitarised Zone (DMZ), and Internet). Redirect ports to the hosts providing the service (Network address translation (NAT)). macOS has an built-in firewall , it is disabled by default, enable it with: Go to System Preferences -> Security & Privacy Click on the Firewall tab At the bottom of the window, click on the lock icon to enter your administrator password for changing the settings. Click the option to Turn On Firewall To configure the options for the firewall, click Firewall Options The built-in firewall on your Mac only blocks inbound traffic. It does not allow you to control outbound connections. If you download a piece of malware, your Mac’s firewall won’t prevent it from connecting to the internet and sending out information. If you’d like to be more secure, install an additional firewall. Murus Lite is an entry-stage firewall front end. It has inbound filtering and recording and can be used to safeguard applications. Although it is free, Murus Lite isn’t attempting to test or demonstrate. Instead, it is a fully-featured application that is a good beginning point for a new user. Scudo is a hybrid firewall for Mac that works as a combination of an outbound application-layer firewall and an inbound network-layer packet filter. The software offers enhanced protection to Mac’s network services from all the unwanted connections. It improves your privacy against remote computers trying to access your data through the network. LuLu is a free, open source firewall that aims to block outgoing traffic unless it’s explicitly approved by the user. Once installed, it will alert you about new or unauthorized attempts to create an outgoing network connection. Click the Allow or Block button to handle the connection. Radio Silence is the simplest firewall app for your Mac. After installation, the app automatically runs in the background without any menu bar icon or other visual indicators. Navigate to the Firewall tab and click the Block Application button. Once you add an app to the blacklist, it will no longer connect over the internet. Little Snitch is a host-based application firewall for Mac. The app provides detailed reports on processes, outgoing and incoming connections, ports, and protocols. It also shows the complete traffic history down to a one-minute interval time range. The Network Monitor shows a global map of the active connections from your system to the IP-derived or probable locations around the world in real-time. The left panel displays a list of apps sending and receiving data, while the right panel gives you a detailed summary. Choosing a HIDS for a Mac  Most of the HIDS tools for macOS are File Integrity Agents (FIAs) and use Error Detection algorithms. A FIA monitors the integrity and state of the files and objects on a machine. It creates a hash of all files to be monitored. That snapshot is periodically checked against the current hash of the files. If it detects changes to those files, then it alerts the administrator that an unauthorised access or change has taken place. OSSEC monitors the checksum signatures of all the log files to detect possible interference and any attempts to get to the root account.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "026e6148133ca2c51c801237d6922582",
    "u": "https://macos.tymyrddin.dev/docs/services/edit-hosts-file",
    "t": "Edit hosts file ",
    "c": "Edit hosts file  The hosts file is a system file on a device that lets you map specific domain names to an IP address. If you want to add new entries to the hosts file, you’ll need the IP address of the server that you want to map a hostname to. XXX.XXX.XXX.XXX some.domain.name The hosts file lets you override DNS entries for any domain name. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. Blocking is achieved by setting the IP address of the ad networks to a loopback address like 127.0.0.1 which will not return anything. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. If your device is infected with malware, then your hosts file may be compromised to included unknown entries for known domain names. That is NOT the IP address of your bank! This type of DNS attack is known as DNS pharming, and checking your hosts file can uncover potential infection. Open the Terminal application. (Click on the Finder icon and then go to Applications → Utilities) In the terminal, give the command sudo nano /private/etc/hosts Enter your administrator password after running the command Add as many entries as needed",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8fb92a8398a13350fdf5ca5087352012",
    "u": "https://macos.tymyrddin.dev/docs/services/readme",
    "t": "Introduction ",
    "c": "Introduction  Restrict which apps can run System integration protection (SIP) Use a VPN service Secure browsers that protect your privacy Use a secure messaging service Use a secure email service Use SSH tunnels Use a VPN service Use a firewall as a VPN fail-safe mechanism Use alternative DNS servers Use a Tor proxy Change MAC address Renew IP lease Edit hosts file",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3aec654b08be2ba08ddd46e6416dbdcd",
    "u": "https://macos.tymyrddin.dev/docs/authentication/mfa",
    "t": "Use multi-factor authentication (MFA) ",
    "c": "Use multi-factor authentication (MFA)  Many sites and applications offer two-factor authentication (2FA), also named multi-factor authentication (MFA). With 2FA enabled, logging into a website or application requires both a password and a unique code that is texted to your phone number or delivered via an authenticator app. You have to input this code in order to gain access to your account. Even if someone else has your password, they will not be able to break into your accounts if they can not get the code. When you use one of the authenticator apps included here, you bolster the password you know with the token, smartphone, or smartwatch that you have. Setting up MFA usually involves scanning a QR code on the site with your phone’s authenticator app. Note that you can scan the code to more than one phone, if you want a backup. Authenticator apps generate time-based, one-time passcodes (TOTP or OTP), which are usually six digits that refresh every 30 seconds. Once you set up MFA, every time you want to log in to a site, you enter the code into the secured app or site’s login page, and you’re in. The time limit means that if an adversary manages to get your one-time passcode, it won’t work for them after that 30 seconds. Something to look for when choosing one of these apps is whether it backs up the account info (encrypted, of course) in case you no longer have the phone you set everything up on. These all do (Google Authenticator does not). Authy Duo Mobile LastPass Authenticator Microsoft Authenticator",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b22c25aa085e39b564cacb1e46425dcc",
    "u": "https://macos.tymyrddin.dev/docs/guards/ossec",
    "t": "OSSEC ",
    "c": "OSSEC  OSSEC stands for Open Source HIDS Security. It is entirely free to use. As a host-based intrusion detection system, the program focuses on the log files on the computer where you install it. It monitors the checksum signatures of all the log files to detect possible interference. On Unix-like systems, it will monitor any attempts to get to the root account. Although OSSEC is an open-source project, it is owned by Trend Micro, a security software producer. How to Install OSSEC Agent on Mac OS",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "84e943d7a99cb64f77800159aa7e5cca",
    "u": "https://macos.tymyrddin.dev/docs/services/browsers",
    "t": "Secure browsers that protect your privacy ",
    "c": "Secure browsers that protect your privacy  DuckDuckGo Desktop browser for MacOS focuses on privacy that is not based on Chromium (as most would expect). Instead it relies on OS-provided rendering engines to build the browser (mostly WebKit). This makes it possible to remove all the unnecessary stuff usually available with popular web browsers. Brave is fast, secure, and privacy-focused by default. It has a built-in ad blocker and browser fingerprinting protection, while also giving you access to numerous add-ons and extensions. Ungoogled Chromium browser is an open source project to provide a Chromium browser, without the Google privacy issues. LibreWolf is a fork of Firefox focused on privacy, security, and freedom, only available for desktop operating systems. If the browser you choose is less secure and privacy-friendly, lock down the browser and the software it can invoke.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ac0e690853950ff13fe2577496ce6488",
    "u": "https://macos.tymyrddin.dev/docs/services/sip",
    "t": "System integration protection (SIP) ",
    "c": "System integration protection (SIP)  Apple introduced System Integration Protection (SIP), designed to protect the most vulnerable parts of the Mac: SIP protects a few core areas of the drive where the operating system is installed, including /System , /bin , /sbin , /usr (but not /usr/local ). Some symbolic links from /etc , /tmp , and /var are also protected, though the target directories themselves are not. The safety measure prevents processes without sufficient privileges (including admin users with root access) from writing to these folders and the files stored within. The technology also prevents other “risky” operations too, like code injection. Apple is concerned that changes made to these parts of your system could put your Mac at risk and cause damage to the OS. Locking out root admin access safeguards your Mac against sudo-level commands executed remotely and locally. If you want to use software that depends on modifications which change the way many core OS elements and first party apps function, you’re going to have to disable SIP first, and reenable it afterwards. I wouldn’t though. Why trust software that wants me to turn off such an important protection, even if only temporarily.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e3d9220499bac7f2870e063de76d9aa4",
    "u": "https://macos.tymyrddin.dev/docs/services/renew-lease",
    "t": "Renew IP lease ",
    "c": "Renew IP lease  A DHCP client can on occasion send information in DHCP requests: hostname, MAC address, operating system, and DHCP version. All operating systems provide their most recent IP address to the DHCP server. If you change your MAC address to minimise risk, best to also renew the IP leases on the router. Go to Apple menu -> System Preferences -> Network. In the list on the left, select the network service that needs a renewed IP address. Click Advanced, click TCP/IP, then click Renew DHCP Lease.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "44d9cc66de5b135d578ea386075a6c2c",
    "u": "https://macos.tymyrddin.dev/docs/opsec/browsing",
    "t": "Browse more safely ",
    "c": "Browse more safely  Keyloggers and other malware can be installed via a web page script which exploits a browser vulnerability. The program will automatically be launched when a user visits an infected site. Compromising a browser is relatively easy, and it is cross-platform, hence an often chosen target. Plus that browsers (for performance reasons) prefetch exposing users to more security risks by downloading more pages, or from un-requested sites (additionally compounded as drive-by downloads become more advanced and diverse). BeEF & other browser exploits, when not using browser vulnerabilities, rely on javascript. Choose a secure browser that protects your privacy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "afa28284e8ed2bc82e8177cde0dbe56c",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/youtoo",
    "t": "No device can ever be called secure ",
    "c": "No device can ever be called secure  The Linux ecosystem was considered more secure by many, which possibly explains why Google, NASA, and the US DoD use it for their online infrastructures and systems. Wishful thinking. Likewise the misconception that Apple devices are immune to hacking and malware infection. Linux is on the list of the most used operating systems, for workstations, servers, mobiles (android is linux based), and IoT devices. Linux powers the Internet with 74.2% of all web servers running on it. Hence, an attractive target for cybercriminals . Any ransomware tool development must be lucrative for the threat actor, which used to be far less likely in the case of locking a mobile device, as compared with locking all the Windows systems in an organisation. The bring-your-own-device (BYOD) trend has been growing for many years though. With Android the most common operating system for mobile devices, ransomwares targeting Android are on the rise. Publicly known ransomware threats to iOS seem still less prevalent. *nix  Linux is on the list of the most used operating systems, for workstations, servers, mobiles (android is linux based), and IoT devices. Linux powers the Internet with 74.2% of all web servers running on it. Hence, a profitable target. RansomEXX (or Defrat777) is one of the most common recent ransomware attacks against Linux. It was used against high-end targets in 2020 and 2021. It does not use C&C communication and targets was hard-coded. Tycoon is one of the most common Linux ransomwares. In late 2019 it was used in attacks against education organisations and companies in the software industry. Its payload is in a ZIP archive with a malicious Java Runtime Environment (JRE) component, hidden in a Java image file. Both Linux and Windows are vulnerable to Tycoon attacks. Erebus was originally Windows-based, and repurposed to target Linux servers. QNAPCrypt focuses on infecting network-attached storage (NAS) Linux devices. KillDisk also started on Windows and was later adapted for Linux environments. macOS  LockBit operators created encryptors to target Mac devices for the first time. Supposedly the first-ever ransomware campaign focusing on macOS in particular. ThiefQuest (also known as EvilQuest) became a threat in June 2020, having been discovered by researcher Dinesh Devadoss. The program was found hiding in pirated versions of the Little Snitch app, which could be found on a Russian torrent platform. Inventive attackers have used the “Geacon” Cobalt Strike tool attack for data theft, privilege elevation, and remote device control. MacStealer malware stole sensitive data from Apple users. Documents, iCloud keychain data, browser cookies, credit card credentials, etc. CloudMensis spreads through email attachments and can steal sensitive information and grant unauthorised access to users’ systems. JockerSpy can infiltrate a system through fake websites or bundled with seemingly harmless software . Once installed, it can monitor users’ activities, capture keystrokes, and access personal data. Apparently porting is well underway too  Some malware can infect Linux and Windows systems. StripedFly for example, is capable of a lot more than just mining cryptocurrency: it can execute commands remotely, grab screenshots and execute shellcodes, steal passwords and other sensitive data, record sounds using the integrated microphone, move to near endpoints using previously stolen credentials, abuse the EternalBlue exploit to worm into other systems, and mine Monero. Monero mining is now seen as a distraction, to prevent researchers from analysing the code further. This malware has infected over 1 million Windows and Linux computers around the globe since 2016, according to Kaspersky . Resources  URLhaus Database Linux virus Windows global threat activity",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "affefe36a816e67746385218fe9688c0",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/c2",
    "t": "Red team takeover ",
    "c": "Red team takeover  Penetration testing tools such as Cobalt Strike and Brute Ratel are developed for red teaming and adversarial attack simulations like cracking passwords, launching spear phishing attacks, remotely controlling and monitoring attacks with a command and control (C&C) framework, and creating reports on the effectiveness of these simulated attacks. Some are even designed to avoid detection by antivirus solutions and endpoint detection and response (EDR) . And are now used by adversaries for real attacks. Resources  When Pentest Tools Go Brutal: Red-Teaming Tool Being Abused by Malicious Actors",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e367b918eac928237b1aeb966ba41af5",
    "u": "https://pap.tymyrddin.dev/docs/mitre/supply-chain",
    "t": "Supply chain compromise ",
    "c": "Supply chain compromise  App squatting and fake apps are listed by MITRE as Mobile Technique ID T1474 : Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise can take place at any stage of the supply chain. Detection involves application vetting of API calls, network communication, permissions requests, and protected configuration. Static analysis notes  Static analysis can be done with various tools to decompile the binary, such as jadx , radare2 , rizin , and jeb . Tools such as droidlysis for automatic offline static analysis can also be used. A high level description of the process can be found here , and is applied in Android malware analysis (Pithus and jadx) as example.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d7ed31ea7e6afd501bd65eb80656d89a",
    "u": "https://pap.tymyrddin.dev/docs/mobile/ransomware",
    "t": "Ransomware ",
    "c": "Ransomware  Mobile ransomware sneaks onto your device using social engineering tactics that trick you into downloading malicious content, such as fake apps from third party app stores, app squatting , infected system or software updates, phishing , or smishing . Traditional ransomware encrypts the files on a device, and some, but not all, Android ransomware variants do encrypt. WannaLocker uses AES encryption to encrypt files. Different types of living of the land techniques” techniques can be used to deny a victim access to the device: Abusing functionalities (MalLocker). Hijacking permissions (Strandhogg attack). Resetting device PIN (DoubleLocker and CovidLock). Both iPhone and Android users have easy access to cheap, cloud-based backup tools (Apple iCloud and Google One), which makes it easy to wipe and restore devices, in the event of a ransomware attack, with minimal loss of data. Resources  CovidLock: Mobile Coronavirus Tracking App Coughs Up Ransomware , 2020 Sophisticated Android Ransomware Executes with the Home Button , 2020 WannaLocker - The WannaCry Copycat Targeting Android Users in China , 2017",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3f7c5e155879c3b134ce2799161a45f3",
    "u": "https://pap.tymyrddin.dev/docs/independent/mfa",
    "t": "MFA bypass attacks ",
    "c": "MFA bypass attacks  Attackers use various methods to MFA bypass attacks, including social engineering, phishing, and exploiting vulnerabilities in the authentication process. MFA fatigue  After having obtained stolen username and password credentials from a black market, attackers can attempt repeated logins to the targeted user accounts, who then are bombarded with login verification requests. Through sheer frustration or by accident, users eventually click on the link or confirmation request. That action then gives the threat actor a way in. MitM  “In the olden days”, adversaries only needed to get username and password combinations, so they made a fake authentication webpage and attempt to trick users into entering their credentials. With MFA everywhere, adversaries need username and password combination and the digital token or one-time password used as the second form of authentication. A new tactic is to use MitM instead, and insert themselves between the user and the legitimate login page. Users will receive a request to access their MFA provider, through phishing , smishing , vishing or OTP bots , that entices users to click on a link, which then directs them through a malicious proxy server to the legitimate login page. The adversaries capture the credentials on the proxy server and then modify the session cookie to gain access. And variations on that scenario. Token stealing  Making life easier for users, “session cookies” are stored on endpoint devices, so users don’t have to re-authenticate during sessions. These can be stolen and placed within the session of the adversary, making the browser believe the actual trusted user is being authenticated. Future  MFA was invented to protect authentication. Do we need another layer to protect MFA? There are discussions about mechanisms going beyond something one knows (password) and/or something one possesses (phone, fob) and/or even what one is (fingerprint, retinal print). Maybe we’ll be using who one is, in the form of episodic memory because who are we but the stories we tell (ourselves), or in the form of our thoughts, because “I think therefor I am” … ? Do we really want who we are externalised on the web, our memories, our imagination, up for grabs?",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a7ef2748ffdba4d590973ae5df35199a",
    "u": "https://pap.tymyrddin.dev/docs/mobile/otp-bots",
    "t": "OTP bots ",
    "c": "OTP bots  Most websites now offer and use multifactor authentication to protect user accounts; with OTP bots, that protection is rendered useless. Using an OTP bot enables an attacker to intercept, redirect, or even spoof authentication codes or tokens. Using social engineering to trick people into giving their authentication codes is a time-intensive process. But OTP bots, with the right contact information for the victim (bough on Telegram or Darkweb for example), can do this automatically. They can intercept large numbers of OTPs and increase the number of victims and profit for the adversary. OTP bots use the normal process of getting a one-time password for authentication online by tricking the victim into thinking they’re from the company in question, such as a bank. The adversary gives the victim’s information to the OTP bot. The OTP bot contacts the victim and asks for the account OTP. This can be by smishing or by robocall for example, asking for authorisation of a charge, or whether a given code is correct, and if not, please give us the correct code. The victim provides or enters the OTP. The bot distracts the victim while the adversary accesses the account instead. The adversary then steals money or card information from the victim’s account. Prevention  Companies and organisations can use powerful bot management systems that can identify malicious bots and stop their requests before they get to a website, app, or API. Resources  Threat Spotlight: Illicit Telegram Markets & OTP Bots , 2022 Bots for Stealing One-Time Passwords Simplify Fraud Schemes , 2022 How secure are one-time passwords from attacks? , 2022 OTP Bot Setup for MFA Bypass Affecting P2P Services , 2022",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a020d63a284914e986dfde919c3139ae",
    "u": "https://pap.tymyrddin.dev/",
    "t": "Threat landscape @home ",
    "c": "Threat landscape @home  The below writeups are based on reading the usual threat landscapes, picking up what is reuseful for defending people’s devices, researching and adding what seems to be missing for @home contexts, updating passive defence strategies, and linking in some device hardening how-tos and hands-on exercises. With that as foundation, we can develop the more unusual active defence strategies. Threats  Background Introduction Unusual suspects Marketplaces Red team takeover Malware-as-a-Service (MaaS) Ransomware-as-a-Service (RaaS) Infostealer-as-a-Service (IaaS) Distribution shifts More LOL Botnet activity increase No device can ever be called secure Mitre Att&Ck Introduction Drive-by compromise Supply chain compromise Phishing for information Application Layer Protocol: Mail Protocols Signs of a compromise @home Prevent|Detect|Respond  Device independent Introduction Phishing Drive-by download MFA bypass attacks Workstation specific Introduction Ransomware Mobile specific Introduction Mobile malware Smishing Vishing SIM swapping OTP bots App squatting Ransomware Madware Spyware Location tracking Stalkerware DIY  Hardening endpoints Introduction A first strategy Android hardening iOS hardening Hardening Windows Hardening GNU/Linux Hardening macOS Smarter mail servers Active defence Testlab Phishing analysis tools Mobile tools Reverse engineering tools TryHackMe rooms Introduction Basic phishing labs The Greenholt Phish Android malware analysis (Pithus and jadx) iOS forensics (SQLiteDB) Root-me challenges APK anti-debug",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9b8f60d52b770e1931cd9b9476f62856",
    "u": "https://linux.tymyrddin.dev/",
    "t": "Hardening GNU/Linux ",
    "c": "Hardening GNU/Linux  “Linux” is really GNU software operating with a Linux kernel, and GNU software there are many resulting in an incredible amount of distributions , all called “Linux”. Some even build on each other, such as Debian -> Ubuntu. It is impossible to cover them all. Version 0.1: These mitigations are kept as simple as possible, with tools found in most distros. Some things are harder to cover. For example, each distro has its own privacy settings somewhere, and there are even distro’s that have specialised in privacy. Accounts and authentication Introduction Disable and enable user accounts Make that secure passwords Use a password manager Password protect sleep and screen saver mode Use multi-factor authentication (MFA) Protect SSH access with MFA Design principles and sudo killers Services and applications Introduction Service management Application armour (AppArmor) Restrict access to at and cron Disable startup applications Choose a secure browser that protects your privacy Use a secure messaging service Use secure email services Use SSH tunnels Use a VPN service Use a firewall as a VPN fail-safe mechanism Use alternative DNS servers Use a Tor proxy Anonymise SSH sessions with Tor Change MAC address Renew IP lease Edit hosts file Data Introduction Use removable storage media Archiving and compressing Shift back and forth in time from past to present Disk encryption File encryption Shredding files and deleting data Privacy Introduction Turning devices on and off Remove metadata from files Edit exif metadata in images Removing metadata with hex editors Scrub machine with BleachBit Use Metadata Anonymisation Toolkit 2 (MAT2) Distros specialised in privacy Malware Introduction Malware detection and removal Analysing trojans Operations security Introduction Use email securely Detecting fake emails and phishing Browse more safely Check integrity of downloads ‘;–have i been pwned? Guards! Guards! Introduction Alphabet soup Netfilter and iptables NFTables Gufw and ufw Linux intrusion detection systems Aide OSSEC Tripwire",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cc7b74744d42069b8c3f5815b2916775",
    "u": "https://linux.tymyrddin.dev/docs/authentication/password-manager",
    "t": "Use a password manager ",
    "c": "Use a password manager  The majority of people use very weak passwords and reuse them on different websites. How are you supposed to use strong, unique passwords on all the websites you use? The solution is a password manager. Password managers store your login information for all the websites you use and help you log into them automatically. They encrypt your password database with a master password — the master password is the only one you have to remember. Managers  Dashlane 1Password Bitwarden It does not protect from keyloggers  Most password manager work by copy-pasting data quickly from your manager to the field (on the website) or by simulating keystrokes for all the data on file. A keylogger captures keystrokes and would capture all passwords entered by a password manager that simulated keystrokes. Nearly all keyloggers even include the capability to take screenshots at particular intervals of time and save all the contents of the clipboard to a file. The last bit is important, because it sort of renders even password managers that use the clipboard to fill in these forms useless. The real solution to preventing these attacks is to monitor your system for any keyloggers and use an AV solution .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "726c4f5d9d7b12a6280bdd6d3ff706cb",
    "u": "https://linux.tymyrddin.dev/docs/opsec/integrity-downloads",
    "t": "Check integrity of downloads ",
    "c": "Check integrity of downloads  When downloading an ISO image of, for example, the latest Linux distro, installing or upgrading packages, or downloading software, you can verify the files have downloaded correctly and securely by using checksums. Checksums ensure the integrity of data portions for data transmission or storage. Checksums is a simple error-detection scheme in which each transmitted message is accompanied by a numerical value based on the number of set bits in the message. The receiving station then applies the same formula to the message and checks to make sure the accompanying numerical value is the same. If not, the receiver can assume that the message has been garbled (or was altered). Verifying downloaded software  When downloading software ( .iso s and .deb s and the like), also download the xxxsum (choose from what is available) and check the integrity (it is the intended file, and nothing has changed underway). For example do: $ sha256sum some-file.iso and compare the output from the command with the key listed in the associated sha256 file. Troubleshooting unauthenticated packages  Integrity checks are integrated in linux package managers. Never ever continue with installation if you get a: WARNING: The following packages cannot be authenticated! It may be that your system is set to use a proxy server for a network you are not connected to. Set your Network Proxy method to None and Apply System Wide, and check if that helped. Check repositories are not corrupted in /etc/apt/sources.list . If so, repair with correct repositories and try again. Check GPG keys (apt-key) # apt-key list Update the local keyring with the keyring of archive keys and remove from the keyring the archive keys which are no longer valid: # apt-key update # apt-get update If still not works, reinstall the archive-keyring. # aptitude reinstall [distro]-archive-keyring For example: Kali Keyring – kali-archive-keyring Debian Keyring – debian-archive-keyring Ubuntu Keyring – ubuntu-archive-keyring Still not works? Hit the forums.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9b3102d7342f60e2f8521f02272a2cc4",
    "u": "https://linux.tymyrddin.dev/docs/services/restrict-access",
    "t": "Restrict access to at and cron ",
    "c": "Restrict access to at and cron  If malware is anything at all, it’s persistent. On Linux, just like Windows, malware once loaded wants to stay loaded. On Windows systems this is usually done with a variety of registry mechanisms. For Linux it’s often done using the crontab scheduling facility. Cron allows users to submit jobs for the system to do at a later time, possibly a recurring time. It can be very useful, but also has a potential for abuse by either users or adversaries to call back home at regular times. Users can be blocked from administrative access to the crontab command for scheduling and modifying cron jobs. The two configuration files that control user access to the cron daemon are cron.allow and cron.deny these two configuration files are located within the /etc directory and are similar to the at.deny and at.allow configuration files. The cron.allow file is used to allow users to schedule jobs using the cron daemon, if the username does not exist in the cron.allow configuration file the user will be denied access. The cron.deny configuration file houses the username of users that are not allowed to schedule jobs, both configuration files have the same syntax as the at.deny and at.allow configuration files. Each username should be specified on an individual line. Check the cron and at jobs!",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "776b7486379d95bbc86322423ea4781a",
    "u": "https://linux.tymyrddin.dev/docs/data/file-encryption",
    "t": "File encryption ",
    "c": "File encryption  Filesystem level encryption, often called file/folder encryption or stacked level encryption, is a form of disk encryption where individual files or directories are encrypted by the file system itself. This is in contrast to full disk or block level device encryption where an entire partition or disk, in which the file system resides, is encrypted. EncFS  EncFS provides an encrypted filesystem in user-space. It runs without any special permissions and uses the FUSE library and Linux kernel module to provide the filesystem interface. EncFS is open source software, licensed under the GPL. eCryptfs  eCryptfs stores cryptographic meta data in the header of each file written, so that encrypted files can be copied between hosts; the file will be decrypted with the proper key in the Linux kernel keyring. The eCryptfs kernel module is available in all Linux kernels since 2006. The eCryptfs user space utilities ( ecryptfs-utils ) are available in all major Linux distributions. VeraCrypt  VeraCrypt is a fork of the discontinued TrueCrypt project. It is a free and open-source utility for on-the-fly encryption (OTFE). The software can create a virtual encrypted disk that works just like a regular disk but within a file. It can also encrypt a partition or (in Windows) the entire storage device with pre-boot authentication.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "602b7b6f520d197a1d535cc1dc5a4fb9",
    "u": "https://linux.tymyrddin.dev/docs/data/removable-media",
    "t": "Use removable storage media ",
    "c": "Use removable storage media  A simple but straightforward security method is to keep all sensitive information on removable storage media like portable flash memory drives or external hard drives that you only mount the device when you need access to the data on it. You can turn old harddrives into external harddrives by taking them out of an old PC and putting them in a portable HDD USB storage kit (alias harddrive enclosure). These “DIY” kits are available for 2.5 inch and 3.5 inch HDD using either IDE or SATA connections and cost way less than a manufactured USB HDD.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d8ad565fc45dc229d4ab908240682b02",
    "u": "https://linux.tymyrddin.dev/docs/services/readme",
    "t": "Introduction ",
    "c": "Introduction  All linux distros let you control the services that run on your Linux installation, and you can make full use of this customisation feature to enhance security. Service management Application armour (AppArmor) Restrict access to at and cron Disble applications via startup applications Secure browsers that protect your privacy Use a secure messaging service Use a secure email service Use SSH tunnels Use a VPN service Use a firewall as a VPN fail-safe mechanism Use alternative DNS servers Use a Tor proxy Anonymise SSH sessions with Tor Change MAC address Renew IP lease Edit hosts file",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "db853fb0fe2a6a47bc90d94034965ab3",
    "u": "https://linux.tymyrddin.dev/docs/privacy/metadata",
    "t": "Remove metadata from files ",
    "c": "Remove metadata from files  Metadata is data about data. Metadata answers who, what, when, where, why, and how about every facet of the data that is being documented. Photos, and images in general, contain metadata. For photos this includes how large the picture is, colour depth, resolution, the date and time when it was created, the GPS coordinates of the location they were taken at, camera shutter setting details, and possibly even the name of the program used to edit them. Document metadata is information about one or more aspects of a document, spreadsheet, pdf file, that is not always visible to the person creating them, but can be found by the person who receives them next. Comments, track changes, hidden text, mark-ups, properties, attachments and bookmarks are all examples of document metadata. Office documents like pdf or Office automatically add author and organisation information to documents and spreadsheets. Web pages often include metadata in the form of meta tags. Description and keywords meta tags are commonly used to describe the Web page’s content. Most search engines use this data when adding pages to their search index. This type of metadata can be useful, but maybe you do not want to disclose this information on the web, because metadata can be used for other purposes as well: Metadata is collected by corporations for psychological manipulation in persuasion and advertising. Metadata also plays a number of important roles in computer forensics: It can provide corroborating information about the document data itself. It can reveal information that someone tried to hide, delete, or obscure. It can be used to automatically correlate documents from different sources. Metadata is used by hackers doing reconnaissance for an attack And last but not least, it can be used to correlate data in dragnet and targeted surveillance. Techniques for metadata removal  Metadata removal software like Metadata Anonymisation Toolkit 2 (MAT2) Bleachbit Using a hex editor Edit exif metadata in images",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7ed0a37ab4ed0fefc32013783d505bdb",
    "u": "https://linux.tymyrddin.dev/docs/privacy/metadata-images",
    "t": "Edit exif metadata in images ",
    "c": "Edit exif metadata in images  ExifTool  ExifTool is a perl program that can be used to read and edit exif metadata in images. It is available for Windows, MacOS and *nix systems. $ exiftool imagename.jpg To remove, for example GPS data (not found in the above image file, but if you have it in yours) - replace image.jpg with your image file: $ exiftool -gps:all= -xmp:geotag= image.jpg imagemagick  The mogrify command of imagemagick can be used to strip Exif data from images. For the same file as above and then checked with exiftool again: $ mogrify -strip imagename.jpg $ exiftool imagename.jpg For removing Exif data from all jpg images in a directory and all of its sub-directories recursively: $ find ./path/directory -type f -iname '*.jpg' | xargs mogrify -strip exiv2  The exiv2 tool also has a command for deleting all Exif data from an image: $ exiv2 rm imagename.jpg For removing Exif data from all jpg images in the current directory: $ exiv2 rm *.jpg For removing Exif data from all jpg images in a directory and all of its subdirectories recursively: $ find ./path/directory -type f -iname '*.jpg' | xargs exiv2 rm",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b030b5b307aa4f58201dd61bbcaf08b5",
    "u": "https://linux.tymyrddin.dev/docs/authentication/passwords",
    "t": "Make that secure passwords ",
    "c": "Make that secure passwords  Do not use a password you have used in the past. Try to change the password at least every 3-6 months. Create a password that is at least six characters long. Create a password with both digits and letters, uppercase, and lowercase. Do not create a password with a family name, name of your pet, hobby, sports teams, favourite TV show, etc. Do not create a password that is your phone number, house number, etc. Create a password that is not in a dictionary. Create passwords with spaces and/or magics (&*^%$#) in them (if allowed). Have a password manager create a password for you.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "365d779d4eb04fbd075dd024957ee600",
    "u": "https://linux.tymyrddin.dev/docs/privacy/hexeditors",
    "t": "Removing metadata with hex editors ",
    "c": "Removing metadata with hex editors  The hexadecimal notation is almost universally used in computing - and not without a reason. There are sixteen hex digits - 0 to 9, and A to F (which correspond to decimal values 10 to 15), and each hex digit represents exactly four bits. Exactly two hex digits represent a byte, which can have a value from 00 to FF. A hex byte is the only kind of object a computer handles, and hex bytes are used to represent anything. For example, a hex byte 50 may represent the capital letter P, the processor command push eax, the decimal number 80, a colour component with 50% brightness, or whatever else lives in the digital world. And that means we have editors, hex editors, that can be used to view and change files, all files, on a very low level. As in, they can be used to remove metadata from any and all files. Usage in general  backup the file before using a hex editor on it. switch to ASCII mode, turn off “read only” mode, and start searching through the file. For example, when scrubbing pdf’s from creation and modification information look through the entire file for “created” (metadata appears in the PDF file more than once). If and when you find metadata, change to fake data or delete. Then repeat your search again for the terms “create”, “creation”, “modified”, and “modify”, and similarly either replace or delete the dates, once again being sure to repeat each search so that any potential multiple instances of the field can be located and modified or blanked out. Native  You can use vi as a hex editor. It isn’t a real “hex mode”. What happens is that vi ’s buffer is streamed through the external program xxd, but it works well for some cases of scrubbing. Open a file in vi as usual, hit escape and to switch into hex mode type: :%!xxd And when done, to exit from hex mode, hit escape again and type: :%!xxd -r Using software  bless is a binary (hex) editor for the GNOME Desktop. wxhexeditor is a hexadecimal file editor suitable for editing very big files. Supported file size is up to 2**64 bytes. dhex provides a console based hex edit screen with menus like Goto, Search, and HexCal",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d62709cb4761791a715df846d5ebe14b",
    "u": "https://linux.tymyrddin.dev/docs/guards/netfilter-and-iptables",
    "t": "Netfilter and iptables ",
    "c": "Netfilter and iptables  Installing persistence  iptables is installed by default. For rules to be persistent (automatically loaded) so they work after reboot, install iptables-persistent : $ sudo apt-get install iptables-persistent [sudo] password for user: Reading package lists... Done Building dependency tree Reading state information... Done The following extra packages will be installed: netfilter-persistent The following NEW packages will be installed: iptables-persistent netfilter-persistent 0 upgraded, 2 newly installed, 0 to remove and 0 not upgraded. Need to get 18.9 kB of archives. After this operation, 147 kB of additional disk space will be used. Rules  Status command  To list rules -L showing interface name, rule options, TOS masks, packet and byte counters -n, and IP address and port in numeric format without using DNS to resolve names -v: # iptables -L -n -v With line numbers (important for deleting or inserting new rules into the firewall): # iptables -n -L -v --line-numbers To display INPUT or OUTPUT chain rules: # iptables -L INPUT -n -v # iptables -L OUTPUT -n -v --line-numbers Deleting a rule  To delete line number 4 using -D to delete one or more rules from the selected chain: # iptables -D INPUT 4 Inserting a rule  # iptables -L INPUT -n --line-numbers Chain INPUT (policy DROP) num target prot opt source destination 1 DROP all -- xxx.xxx.xxx.1 0.0.0.0/0 2 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state NEW,ESTABLISHED Inserting a rule between 1 and 2: # iptables -I INPUT 2 -s xxx.xxx.xxx.2 -j DROP Gives: # iptables -L INPUT -n --line-numbers Chain INPUT (policy DROP) num target prot opt source destination 1 DROP all -- xxx.xxx.xxx.1 0.0.0.0/0 2 DROP all -- xxx.xxx.xxx.2 0.0.0.0/0 3 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state NEW,ESTABLISHED Saving the rules  For saving the rules so they can be loaded at every reboot (you need to have iptables-persistent installed) # iptables-save > /etc/iptables/rules.v4 # ip6tables-save > /etc/iptables/rules.v6 Stop/Restart  Some distros like CentOS have installed a service called iptables to start and stop the firewall and a configuration file to configure it. For all other distros, iptables is a command, not a service. Configuring iptables  To set it to deny everything except the bare minimum requirements that you need on your system(s) and only accept connections that have been explicitly allowed in the rules. Localhost: $ sudo iptables -A INPUT -i lo -j ACCEPT Accept data related to outbound connections your system has initiated (this includes apt mirrors): $ sudo iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT You can set up tables for rules for traffic you wish to accept on your system from external connections: # iptables -N accept_traffic # iptables -A INPUT -j accept_traffic You then can use it, for example on a server where you run SSH, with (change port to port you set): # iptables -A accept_traffic -p tcp --dport 22 -j ACCEPT The two most common cracks posted on the Ubuntu forums are ssh and vnc, both running with password authentication. This probably is true for all debian-based distro’s. You are recommended to secure ssh by using keys (and disabling password authentication) and either configuring iptables or using a service such as denyhosts or fail2ban. To reject all traffic for which there are no rules set (the first way sends a Host Unreachable ICMP packet then terminates the connection, the second way simply ignores): # iptables -A INPUT -j REJECT --reject-with icmp-host-unreachable or: # iptables -A INPUT -j DROP Configuring ip6tables  To set it to deny everything except the bare minimum requirements that you need on your system(s) and only accept connections that have been explicitly allowed in the rules: Localhost: $ sudo ip6tables -A INPUT -i lo -j ACCEPT Accepting data related to outbound connections your system has initiated: $ sudo ip6tables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT Setting up a table: # ip6tables -N accept_traffic # ip6tables -A INPUT -j accept_traffic Rejecting all traffic for which there are no rules set: # ip6tables -A INPUT -j REJECT --reject-with icmp6-addr-unreachable or # ip6tables -A INPUT -j DROP Usage examples  ICMP  For accepting “Time Exceeded” (necessary for time-restricted connection setups): $ sudo iptables -A INPUT -p icmp -m icmp --icmp-type 11 -j ACCEPT For accepting “Destination Unreachable”: $ sudo iptables -A INPUT -p icmp -m icmp --icmp-type 3/4 -j ACCEPT For accepting PING requests/responses (“Echo” ICMP, for keep-alive requests): $ sudo iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT For IPv6 there are a kazillion ICMP requests so if you are not blocking IPv6, it is recommended to not block ICMP packets: $ sudo ip6tables -A INPUT -p icmpv6 -j ACCEPT",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f19a9609556ebf975b80a54e73ede659",
    "u": "https://linux.tymyrddin.dev/docs/services/vpn-fail-open",
    "t": "Use a firewall as a VPN fail-safe mechanism ",
    "c": "Use a firewall as a VPN fail-safe mechanism  If you simply add a VPN using common instructions, it generally “fails open”. That means, if the VPN breaks down, because the connection is interrupted, traffic will be sent without the VPN. It is much safer when it “fails closed”, meaning that when the VPN connection breaks down, the whole internet connection must be down as long as the VPN connection is not restored. If your chosen VPN does not include being able to set a kill switch, you can use your firewall as a fail-safe mechanism: Get the IP address of the VPN gateway that the kill switch is intended for using the host command. Get the network interface name connected to your default gateway and the subnet of the local network using the route command. Modify the .ovpn configuration file. Change the tun device to -dev tun0 in the client configuration file. Then change the hostnames to IP addresses for the -remote option in the same configuration file. Kill switch using ufw  Make a shell script (killswitch-ufw.sh): ufw --force reset ufw default deny incoming ufw default deny outgoing ufw allow in on tun0 ufw allow out on tun0 ufw allow in on [network interface name] from 192.168.0.0/24 ufw allow out on [network interface name] to 192.168.0.0/24 ufw allow out on [network interface name] to [IP address of the VPN gateway] port 1194 proto udp ufw allow in on [network interface name] from [IP address of the VPN gateway] port 1194 proto udp ufw enable Make it executable: $ chmod +x killswitch-ufw.sh Execute: $ ./killswitch-ufw.sh Kill switch using iptables  Make a shell script (killswitch-iptables.sh): iptables --flush iptables --delete-chain iptables -t nat --flush iptables -t nat --delete-chain iptables -P OUTPUT DROP iptables -A INPUT -j ACCEPT -i lo iptables -A OUTPUT -j ACCEPT -o lo iptables -A INPUT --src 192.168.0.0/24 -j ACCEPT -i [network interface name] iptables -A OUTPUT -d 192.168.0.0/24 -j ACCEPT -o [network interface name] iptables -A OUTPUT -j ACCEPT -d [IP address of the VPN gateway] -o wlp6s0 -p udp -m udp --dport 1194 iptables -A INPUT -j ACCEPT -s [IP address of the VPN gateway] -i wlp6s0 -p udp -m udp --sport 1194 iptables -A INPUT -j ACCEPT -i tun0 iptables -A OUTPUT -j ACCEPT -o tun0 Make it executable: $ chmod +x killswitch-iptables.sh Execute: $ ./killswitch-iptables.sh",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "18d0f807783a993bcce4045af291f9fa",
    "u": "https://linux.tymyrddin.dev/docs/services/edit-hosts-file",
    "t": "Edit hosts file ",
    "c": "Edit hosts file  The hosts file is a system file on a device that lets you map specific domain names to an IP address. If you want to add new entries to the hosts file, you’ll need the IP address of the server that you want to map a hostname to. XXX.XXX.XXX.XXX some.domain.name The hosts file lets you override DNS entries for any domain name. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. Blocking is achieved by setting the IP address of the ad networks to a loopback address like 127.0.0.1 which will not return anything. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. If your device is infected with malware, then your hosts file may be compromised to included unknown entries for known domain names. That is NOT the IP address of your bank! This type of DNS attack is known as DNS pharming, and checking your hosts file can uncover potential infection. Open terminal application In the terminal, give the command sudo nano /etc/hosts Enter your administrator password after running the command Add as many entries as needed",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "dab58b9843b2700e76f1b27de5f7b3e1",
    "u": "https://linux.tymyrddin.dev/docs/guards/nftables",
    "t": "NFTables ",
    "c": "NFTables  The successor of iptables. So let me try. Still at it and //Warning: Not been tested yet//. Basic idea  flush ruleset table inet filter { set tcp_accept { type inet_service; flags interval; elements = { http, https, ssh, } } set udp_accept { type inet_service; flags interval; elements = { openvpn, } } chain base_checks { # allow established/related connections ct state {established, related} accept # early drop of invalid connections ct state invalid drop } chain input { type filter hook input priority 0; policy drop; # Accept on localhost iifname lo accept jump base_checks # Accept ICMPv6 meta l4proto ipv6-icmp icmpv6 type { destination-unreachable, packet-too-big, \\ time-exceeded, parameter-problem, mld-listener-query, mld-listener-report, \\ mld-listener-reduction, nd-router-solicit, nd-router-advert, nd-neighbor-solicit, \\ nd-neighbor-advert, ind-neighbor-solicit, ind-neighbor-advert, mld2-listener-report \\ } accept # Accept ICMP meta l4proto icmp icmp type { destination-unreachable, router-solicitation, \\ router-advertisement, time-exceeded, parameter-problem } accept # Accept mDNS udp dport mdns ip6 daddr ff02::fb accept udp dport mdns ip daddr 224.0.0.251 accept # Accept UPnP IGD port mapping reply udp sport 1900 udp dport >= 1024 ip6 saddr { fd00::/8, fe80::/10 } meta \\ pkttype unicast limit rate 4/second burst 20 packets accept udp sport 1900 udp dport >= 1024 ip saddr { 10.0.0.0/8, 172.16.0.0/12, \\ 192.168.0.0/16, 169.254.0.0/16 } meta pkttype unicast limit rate 4/second \\ burst 20 packets accept # Allow ports tcp dport @tcp_accept accept udp dport @udp_accept accept } # Not a gateway. We do not forward. chain forward { type filter hook forward priority 0; policy drop; jump base_checks } # Chain to accept all outgoing packets chain output { type filter hook output priority 0; policy accept; } }",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "665111039df3b8f523148d3e8c28cfd2",
    "u": "https://linux.tymyrddin.dev/docs/malware/clean-machine",
    "t": "Malware detection and removal ",
    "c": "Malware detection and removal  Automagically  ClamAV  Install with: $ sudo apt-get install clamav clamav-daemon Check it has been installed: $ clamscan --version To update the signatures, first stop the clamav-freshclam service: $ sudo systemctl stop clamav-freshclam The actual update: $ sudo freshclam Restart the clamav-freshclam service: $ sudo systemctl start clamav-freshclam Make a first run with --infected : prints only infected files --remove : removes infected files --recursive : all the subdirectories in the directory will be scanned $ clamscan --infected --remove --recursive [absolute/path/to/directory/to/start/scan] For example, scan your whole system by running the following command: $ sudo clamscan --infected --recursive --remove / ClamTK  ClamTK is a Graphical User Interface for ClamAV software program. $ sudo apt-get install clamtk Start it with $ clamtk Unable to read preferences! No such file or directory note: (re)creating prefs file. Beautiful. Add your preferences. And keep the signatures updated. Manually  Basic checks  Check /etc/passwd for new accounts. Especially new accounts you don’t recognise with a UID less than 500 are very suspicious. If a new account with a UID of 0 is in the list, definitely check it out. Also look for orphaned files, indicators of an account that has been deleted (may take a while): $ sudo find / -nouser -print Take a look at your processes with ps -aux , htop or pstree for unusual processes. Boot the machine from a known safe live-CD image and scan for suspicious files with a rootkit scanner. Check crontab, it may be that the keylogger is relaunched regularly when it is shut off or if the system reboots. Look at the email streams. When programs start sending email by using another IP than your email server (if you have one), it might be something fishy. It can of course also be legitimate. Also consider that a keylogger might just log in to your email server with valid credentials and email from there. Check for keylogger  A trick to try if a keylogger is present: Type a random unique string on your keyboard in the live running machine. Reboot the machine from a known LiveCD or LiveUsb and grep for that string. Find out where the string is stored, and you may have the temp file of the keylogger. Check the folder it is in, and check the folders upward in the tree. Remove  There’s no general recipe. The detection steps above, at best give clues for (further research into) what to remove where. Try DuckDuckGo to access the wisdoms on the internet. If your system has been infected by an unknown trojan , reinstall. To make this experience an enjoyable event if and when it happens, reinstall from the regular backups made on an external disk. If a VM was infected, revert to an earlier snapshot that you think was clean or import an earlier exported .ova of it. This will probably not help if the host was reached, of course. Fail  It is possible for malware to persist across a re-format and re-install, if it is sufficiently ingenious and sophisticated: if for example, it can persist in the BIOS, in the firmware for peripherals (some hardware devices have firmware that can be updated, and thus could be updated with malicious firmware), or with a virus infecting data files on removable storage or on your backups. However, most malware doesn’t do anything quite this nasty. Therefore, while there are no guarantees, re-formatting and re-installing should get rid of almost all malware you’re likely to encounter in the wild. Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a3a5026ec5a67f688460ca27b89f2bfb",
    "u": "https://linux.tymyrddin.dev/docs/data/timeshift",
    "t": "Shift back and forth in time from past to present ",
    "c": "Shift back and forth in time from past to present  Assume data loss is inevitable. It’s not a matter of if, it is a matter of when. You best protect your data with a solid backup strategy. Make an rsync Timeshift backup of your entire system, or synchronise files with a remote system using rsync . Rsync ( r emote sync ) (GPL v3) is an open source utility for fast incremental file transfer. It is a file-copying tool which can copy locally and to/from a remote host. It offers many options to control its behaviour, and its remote-update protocol can minimize network traffic to make transferring updates between machines fast and efficient. It is widely used for backups and mirroring and as an improved copy command for everyday use. The package provides both the rsync command line tool and optional daemon functionality. If you make a backup of a system for the first time to be able to restore a system from (the whole point of it), test it with an actual restore. Having done so helps keep calm when the bleep hits the fan. Rsync  Installing rsync  Installing it from the repository: $ sudo apt-get install rsync General usage  The general command is of the form: $ rsync [options] [source] [destination] Backup to external disk rsync uses an algorithm that minimises the amount of data copied by only moving the portions of files that have changed. It operates in a way similar to ssh, scp, and cp, for example: $ rsync -a [directoryname]/ /media/[path/to/external/disk]/[directoryname] The a option is a combination flag. It stands for “archive” and syncs recursively (includes all subdirectories and subdirectories of subdirectories) and preserves symbolic links, [[en:linux:files|special and device files]], modification times, group, owner, and permissions. There are a lot of different switches that you can use for rsync to personalize it to your specific needs, for example: -a means recursive (recurse into directories), links (copy symlinks as symlinks), perms (preserve permissions), times (preserve modification times), group (preserve group), owner (preserve owner), preserve device files, and preserve special files. -v means verbose and shows you what rsync is backing up. -z enables compression -h for human-readable, output numbers in a human-readable format -delete tells rsync to delete any files that are in the second directory that aren’t in the first directory. Synchronize files from local to remote  While doing synchronization with a remote server, you need to specify username and ip-address of the remote server. You should also specify the destination directory on the remote server. The format is username@machinename:path . $ rsync -avz tymyrddin/ [username protected]@192.168.100.10:/home/tymyrddin/ password: sending incremental file list ./ modsecurity-2.9.2.tar.gz [snip] sent 4993369 bytes received 91 bytes 2432411.23 bytes/sec total size is 4991313 speedup is 2.87 Copy a remote directory to a local machine  In this example, a directory /home/tymyrddin/pkgs on a remote server is being copied in a local computer in /tmp/mypkgs . # rsync -avzh [username protected]:/home/tymyrddin/pkgs /tmp/mypkgs password: receiving incremental file list created directory /tmp/mypkgs pkgs/ pkgs/lighttpd_1.4.45.orig.tar.xz [snip] sent 91 bytes received 4.99M bytes 322.16K bytes/sec total size is 4.99M speedup is 1.00 Rsync over ssh  rsync allows you to specify the remote shell which you want to use. You can use rsync ssh to enable the secured remote connection. To specify a protocol with rsync you need to give -e option with protocol name you want to use. Use rsync -e ssh to specify which remote shell to use. Example: # rsync -avzhe ssh [username protected]:/root/install.log /tmp/ password: receiving incremental file list install.log sent 30 bytes received 8.12K bytes 1.48K bytes/sec total size is 30.74K speedup is 3.77 Do not overwrite modified files at the destination  In a typical sync situation, if a file is modified at the destination, we might not want to overwrite the file with the old file from the source. Use the -u option. Timeshift  Timeshift is free and open source software (source code can be found on GitHub) released under the LGPL-3.0 and GPL-3 licenses. The application is available in the official repositories of the major Linux distributions. To install on Debian/Ubuntu: sudo apt install timeshift Timeshift can be launched from the desktop environment application menu, or from the command line. The first time the application runs, choose what kind of backend to use, rsync or btrfs. Btrsf-based snapshots are byte-for-byte copies of the original filesystem, and are created and restored in no time by using the native snapshot feature of the btrsf filesystem. They cannot be saved on external disks or devices. If the main disk fails, so does the snapshot. Rsync-based snapshots are based on the use of hard links, implementing an incremental strategy. The first backup is a full backup; subsequent backups will include only changed files. Snapshots created by rsync can be copied on external devices formatted with a Linux filesystem. Choose weekly, daily, hourly, on boot, and how many snapshots should be kept. Snapshots can also be created on demand. Choose whether and which users home directories should be included in the snapshots and what kind of files should be included (hidden ones or all). The snapshot will be kept inside the /timeshift directory on the selected filesystem. To explore the files included in the snapshot, select it in the list and click on the Browse button. A file manager window will be opened displaying the included files. In the same way, delete a snapshot by clicking on the Delete button and restore a snapshot by clicking on Restore. If no changes to system partitions were made, nothing needs to be modified.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "efd32427f27866ce992dc73a78198203",
    "u": "https://linux.tymyrddin.dev/docs/data/disk-encryption",
    "t": "Disk encryption ",
    "c": "Disk encryption  Cryptsetup is a utility used to setup disk encryption based the on dm-crypt kernel module. LUKS (Linux Unified Key Setup) is the standard for Linux hard disk encryption, facilitating compatibility among distributions, and providing secure management of multiple user passwords. Installing cryptsetup  As root (on debian and its derivatives): # apt-get install cryptsetup Find drive  # fdisk -l Example: It has found /dev/sdb1 , my external drive. Wipe drive  If it is a new drive there was no previous sensitive data on it. If it is a disk that contained an encrypted volume, previous sensitive data is encrypted and sensitive data is not directly readable. In both cases you can continue with creating an encrypted volume If you previously had unencrypted sensitive data on the drive, you need to do something to obscure that data. Deleting it is not enough. Drives can be wiped with dd which overwrites it with zeros (quick) or random data (more secure, but it takes a whole night for example for a 120G drive). You can overwrite a partition, or overwrite the entire drive (you will have to repartition the drive afterward). To overwrite an entire drive, leave off the partition number of the device name (that you found with fdisk) in one of the following dd commands (use output file of=/dev/sd* instead of /dev/sd*1 ). # dd if=/dev/zero of=/dev/sdb1 or # dd if=/dev/urandom of=/dev/sdb1 Create encrypted volume  # cryptsetup luksFormat /dev/sdb1 Enter a passphrase when asked. Open the encrypted volume: # cryptsetup luksOpen /dev/sdb1 <name> Where <name> is a temporary name you pick (no special characters or spaces). Closing the volume removes the name. Creating filesystem For creating an ext4 filesystem: # mke2fs -t ext4 /dev/mapper/<name> Use ext2 for a small drive. Mount drive  If your partition has no label, it will be mounted in /media/UUID , where UUID refers to the UUID of the partition. For mounting linux drives: # mount /dev/mapper/<name> /mnt /mnt can be any mount point you choose. Own it  # chown -R [user] /mnt Where [user] is your user name. Unmount drive  Unmount drive and close the encrypted volume: # umount /mnt # cryptsetup luksClose <name> Using drive ",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5a5f62d2f07da280b41a3e7c9a043fc7",
    "u": "https://linux.tymyrddin.dev/docs/malware/readme",
    "t": "Introduction ",
    "c": "Introduction  Every computer connected to the internet is participating in that network and has the ability to receive malicious files. It costs nothing, literally, to run antivirus on Linux, so it is a mystery to me why some people feel that not using Linux antivirus is worth the risk. There is ample evidence of Linux malware in existence. Indicators of compromise: Machine is running slower than usual Machine is consuming more power than necessary Strange behaviour, such as installing programs without your consent, even after rebooting it. Find these, or think you may have an infected system, or just wish to know more: Endpoint detection and response Malware analysis DIY: Malware detection and removal Analysing trojans",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9ea768448c1e461c77bba22059360f0b",
    "u": "https://linux.tymyrddin.dev/docs/authentication/accounts",
    "t": "Disable and enable user accounts ",
    "c": "Disable and enable user accounts  Shadow file modification  The easiest way to disable a user account is to modify the /etc/shadow file, which holds encrypted passwords for users listed in /etc/passwd . An example user entry found in the /etc/shadow file: tester:$6dKR$Yku3LWgJmomsynpcle9BCA:15711:0:99999:7::: To disable this account add * or ! in front of the encrypted password: tester:!$6dKR$Yku3LWgJmomsynpcle9BCA:15711:0:99999:7::: This can also be achieved by: # usermod -L tester Any login method, which uses the /etc/shadow file to authenticate a user, will no longer be able to decrypt the user’s password and will not allow him/her to login: $ su tester Password: su: Authentication failure To enable the user account simply remove the added magic from the /etc/shadow file or use the usermod command: # usermod -U tester This method of disabling user accounts in the Linux system is only valid for programs or commands, which use the /etc/shadow file to authenticate users. If a user has already exchanged ssh keys he/she will still be able to log in despite such modifications. nologin User Shell  A more secure way of disabling a user account is to replace the existing user login shell with a pseudo shell such as /usr/sbin/nologin . nologin will display a message: This account is currently not available. To do this, modify the /etc/password file and change the user’s entry from: tester:x:1001:1001:Tester,User,,:/home/tester:/bin/bash to: tester:x:1001:1001:Tester,User,,:/home/tester:/usr/sbin/nologin User tester will no longer be able to log in with a valid password: $ su tester Password: This account is currently not available.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "caf1d4970051809ecc74d381e29ae065",
    "u": "https://linux.tymyrddin.dev/docs/services/renew-lease",
    "t": "Renew IP lease ",
    "c": "Renew IP lease  A DHCP client can on occasion send information in DHCP requests: hostname, MAC address, operating system, and DHCP version. All operating systems provide their most recent IP address to the DHCP server. If you change your MAC address to minimise risk, best to also renew the IP leases on the router. There are several ways to renew the IP lease, by using command line tools such as nmcli or dhclient , or by restarting network services. Restarting network service (Debian-based): $ sudo /etc/init.d/networking restart On the command-line with dhclient (The -r flag explicitly releases the current lease, and once released, the client exits): $ sudo dhclient -r Now a fresh IP can be obtained: $ sudo dhclient On the command-line with nmcli : $ nmcli con From the list that appears, get the NAME of the connection you wish to request a new lease for, then bring down and up: $ nmcli con down id 'NAME' $ nmcli con up id 'NAME'",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b728b3c77f1b31fdd48e4ceb6f47bee2",
    "u": "https://linux.tymyrddin.dev/docs/services/browsers",
    "t": "Choose a secure browser that protects your privacy ",
    "c": "Choose a secure browser that protects your privacy  Falkon uses QtWebEngine as its rendering engine, which is open-source. Falkon is primarily developed and maintained by the KDE community. QtWebEngine does use upstream code from the Chromium project, but removes binaries and Google-related services. Mullvad browser is the Tor browser without the Tor Network and instead of using the Tor Network, is designed to be used with a trustworthy virtual private network (VPN). Similar to the Tor browser, the Mullvad browser provides solid tracking and fingerprinting protection. Mullvad browser removes all telemetry and enables private browsing by default. uBlock Origin comes pre-installed as the default ad/tracker blocker. Vivaldi has no idea who you are or what sites you visit. Brave is fast, secure, and privacy-focused by default. It has a built-in ad blocker and browser fingerprinting protection, while also giving you access to numerous add-ons and extensions. Ungoogled Chromium browser is an open source project to provide a Chromium browser, without the Google privacy issues. LibreWolf is a fork of Firefox focused on privacy, security, and freedom, only available for desktop operating systems. Tor browser enables you to use Tor without needing to install the Tor proxy . If the browser you choose is not secure and privacy-friendly, lock down the browser and the software it can invoke.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "631cdb8b3879c02a11b0570db5b03d7a",
    "u": "https://linux.tymyrddin.dev/docs/services/ssh-tor",
    "t": "Anonymise SSH sessions with Tor ",
    "c": "Anonymise SSH sessions with Tor  In some countries, proving that you connected to a particular server is enough to be prosecuted, but SSH doesn’t provide a native way to obfuscate to whom it connects. For that, SSH with Tor proxy can be used. Configuration SSH  Install connect-proxy: $ apt-get install -y connect-proxy Set up OpenSSH to use Tor for a specific connection  Create or open ~/.ssh/config $ vi ~/.ssh/config Append the below entry (replacing mydomain.com with actual server domain name or IP and user with actual user): Host jumphost HostName mydomain.com User user CheckHostIP no Compression yes Protocol 2 ProxyCommand connect -4 -S localhost:9050 $(tor-resolve %h localhost:9050) %p Set up OpenSSH to use Tor for a bunch of connections  Host anonymous_* CheckHostIP no Compression yes Protocol 2 ProxyCommand connect -4 -S localhost:9050 $(tor-resolve %h localhost:9050) %p Host anonymous_mydomain HostName mydomain.com User user Host anonymous_mydomain2 HostName mydomain2.com User user Port 980",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2a220c77ca8e52980da9f9b3fdda642a",
    "u": "https://linux.tymyrddin.dev/docs/services/apparmor",
    "t": "Application armour (AppArmor) ",
    "c": "Application armour (AppArmor)  Application Armor (AppArmor) is a kernel-level Mandatory Access Control (MAC) feature that restricts applications from accessing classes of computer resources. For example, AppArmor can allow a word processor to read and write files to the local hard drive, but deny it to access the internet to send messages. A common way to spread malware is to wrap it (or hide it) in some completely different type of file. An application like AppArmor can be configured to disallow these files any write or internet capabilities. Any malware in the file would not be able to copy itself or “call home” as a newly recruited botnet member. AppArmor likely does not need much tuning for a standard desktop system as its default settings are good enough to fend off most malware attempts.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1d190076d1f26e7ba79bcedbf4ecb0c4",
    "u": "https://linux.tymyrddin.dev/docs/guards/readme",
    "t": "Introduction ",
    "c": "Introduction  There are many types of devices and mechanisms within the security environment to provide a layered approach of defense. This is so that if an attacker is able to bypass one layer, another layer stands in the way to protect the network. Two of the most popular and significant tools used to secure networks are firewalls and intrusion detection systems. Choosing a firewall for a GNU/Linux  With a firewall, you can: Log hosts scanning services that aren’t running. Limit the services that applications can connect to. Segregate the local network into trust segments (Local Area Network (LAN), DeMilitarised Zone (DMZ), and Internet). Redirect ports to the hosts providing the service (Network address translation (NAT)). If you need one for a personal PC at home, probably only the first two features are of interest. These are also the two that are most likely to cause issues for a beginning user. Linux firewall code includes the netfilter architecture, which was introduced in stable kernel 2.4. For configuring netfilter through its own command line interface ( iptables ), one has to specify the behaviour of all IP packets that make up a connection both inward and outward. It requires extensive knowledge of TCP/IP protocols, but many tools have been developed to automate the configuration of netfilter and iptables. So you have lots of choice . nftables is the successor of iptables, and allows for much more flexible, scalable and performance packet classification. Recommended for beginners is ufw and gufw because of its simplicity and ease of use. Gufw (GNU GPL v3) is for users bamboozled by firewalls. It has an easy-to-use interface for setting up inbound and outbound traffic rules for apps/services and ports. It is designed for beginners. Gufw is a GUI front-end to ufw , which is in itself a front-end to netfilter and iptables . Choosing a HIDS for a GNU/Linux  Most of the HIDS tools for Linux are File Integrity Agents (FIAs) and use Error Detection algorithms. A FIA monitors the integrity and state of the files and objects on a machine. It creates a hash of all files to be monitored. That snapshot is periodically checked against the current hash of the files. If it detects changes to those files, then it alerts the administrator that an unauthorised access or change has taken place. Aide is such a FIA, entirely open source and licensed via the GPL and easy in its configuration. For a Home PC, Aide will do. Tripwire OSSEC monitors the checksum signatures of all the log files to detect possible interference and any attempts to get to the root account.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "17acffe6798d51cf56eb051c4e252cba",
    "u": "https://linux.tymyrddin.dev/docs/guards/gufw-and-ufw",
    "t": "Gufw and ufw ",
    "c": "Gufw and ufw  Installation  Linux distributions come with a firewall installed (IPtables are built into the Linux kernel), but it is disabled because it would block some basic functionality for users on the local network. Specifically, it would block Samba and Avahi (zeroconf); limiting interoperability with other computers (like file and printer sharing) and disabling automatic discovery of network services. It is better to turn it on. Especially on mobile devices like laptops, which sometimes connect to other networks than your own. it’ll be in your menu items (the icon in mint is a brick wall). You can install ufw (command-line) or gufw , a GUI frontend to ufw , and that will also install ufw : Enabling  The firewall is called ufw ( u ncomplicated f ire w all), and can be operated from the terminal (//Menu > Accessories > Terminal//): $ sudo ufw enable Type your password when prompted for it; this will remain entirely invisible, not even asterisks will be shown. Ufw has a sensible set of default settings (profile), which are fine for the vast majority of home users. So unless you have special wishes: you’re done! Checking status  You can check the status of the firewall with this command: $ sudo ufw status verbose Status: active Logging: on (low) Default: deny (incoming), allow (outgoing), disabled (routed) New profiles: skip Usage examples  ICMP  By default, UFW allows ping requests. You may find you wish to leave (icmp) ping requests enabled to diagnose networking problems. To disable ping (ICMP) requests, edit /etc/ufw/before.rules and remove the following lines: # ok icmp codes -A ufw-before-input -p icmp --icmp-type destination-unreachable -j ACCEPT -A ufw-before-input -p icmp --icmp-type source-quench -j ACCEPT -A ufw-before-input -p icmp --icmp-type time-exceeded -j ACCEPT -A ufw-before-input -p icmp --icmp-type parameter-problem -j ACCEPT -A ufw-before-input -p icmp --icmp-type echo-request -j ACCEPT or change the “ACCEPT” to “DROP”: # ok icmp codes -A ufw-before-input -p icmp --icmp-type destination-unreachable -j DROP -A ufw-before-input -p icmp --icmp-type source-quench -j DROP -A ufw-before-input -p icmp --icmp-type time-exceeded -j DROP -A ufw-before-input -p icmp --icmp-type parameter-problem -j DROP -A ufw-before-input -p icmp --icmp-type echo-request -j DROP SSH  $ sudo ufw allow ssh $ sudo ufw enable $ sudo ufw status",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d56bfce2552a1e5bfdcae1490b64dd16",
    "u": "https://linux.tymyrddin.dev/docs/data/archive-compress",
    "t": "Archiving and compressing ",
    "c": "Archiving and compressing  Linux offers separate tools for gathering groups of files into a single archive and compressing that archive for efficient storage. Oh yuk, “efficient”, oh well. It’s about using less disk space and reducing transfer times over networks. And comes at a price. It can increase your CPU usage. tar  You can combine archiving and compressing together by using additional options to the tar ( t ape ar chiver) command. Tar can behave differently on different distros. The manual page contains descriptions of the myriad of features that come with tar . The basic operations of tar : Create a backup archive: c Extract files from an archive: x Compare differences between archives: d Update files in an archive: u Append files: r or A Delete files from an existing archive: d List contents of an archive: t When creating a tar archive, you can add options that compress the resulting archive. With j the archive will be compressed in bzip2 format, and with z in gzip format. For example, tar with bzip2 compression: $ tar xjvf funnybusiness.tar.bz2 *.txt You can also use other compression mechanisms like lzop with tar. It is faster, but the compression is less than with bzip2 which is around 10 times slower while only giving twice the amount of compression. You can also set the compression level in the compression commands themselves. gzip  gzip compresses the size of the given files using Lempel-Ziv coding (LZ77). Whenever possible, each file is replaced by one with the extension .gz. Compress a file: $ gzip funnybusiness.txt Compress all images with a .jpg extension in a directory: $ gzip *.jpg Compress all files in a directory: $ gzip -rv [directory] Test integrity of a gzip compressed file: $ gzip -tv funnybusiness.gz To uncompress a compressed file: $ gunzip -v funnybusiness.gz Fastest compression time, least compression: $ gzip -1 funnybusiness.gz Slowest compression time, most compression: $ gzip -9 funnybusiness.gz bzip2  bzip2 compresses files using the Burrows-Wheeler block sorting text compression algorithm and Huffman coding. Compression is generally considerably better than that achieved by bzip command (LZ77/LZ78-based compressors). Whenever possible, each file is replaced by one with the extension .bz2 . $ bzip2 [filename] Uncompress: $ bunzip [filename].bz2 lzop  lzop uses the LZO data compression library for compression services, and its main advantages over gzip are much higher compression and decompression speed (at the cost of some compression ratio). lzop is copyrighted under the terms of the GNU General Public License (GPL). You will probably have to install it first: $ sudo apt-get install lzop Compress: $ lzop [filename] Unlike gzip and bzip2 , lzop has no separate command for unlzopping. NO UNLZOPPING! Use the d option: $ lzop -dv [filename].lzo",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9a8c19caf75c01821ab8195db5d95c40",
    "u": "https://linux.tymyrddin.dev/docs/services/startup-applications",
    "t": "Disable startup applications ",
    "c": "Disable startup applications  For example, do you really need Samba for sharing files over the network, or the Bluetooth service to connect to Bluetooth devices on a computer that doesn’t have a Bluetooth adapter? Gnome  Go to Show applications -> Startup Applications Remove check marks next to the services you wish to disable at startup. Mate  In MATE, you can configure your startup applications in the main control centre, using the “Startup Applications” applet.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "15a3fa57c73121cd7d11daa366921163",
    "u": "https://linux.tymyrddin.dev/docs/authentication/sudo-killers",
    "t": "Design principles and sudo killers ",
    "c": "Design principles and sudo killers  GNU/Linux was built as a multi-user operating system from the start with two important principles: The Least Privilege principle states that any entity, user or otherwise, should only be granted the minimum amount of privileges required to do its job and no more. The second, equally important principle, is Isolation. This is implemented in user separation. The activities of one user should not be allowed to affect other users, and data belonging to one user should not be accessible to another user unless specifically allowed. Most GNU/Linux distributions create a non-privileged user account for daily use, but one can use sudo or download an and install an app to do things as administrator in desktop applications. With the users’ password! While the sudo system does not give unbridled root permissions, if an attacker has a limited shell that has access to certain programs using the command sudo he/she might be able to abuse sudo to escalate privileges. The sudo killer tool helps to identify misconfiguration within sudo rules, vulnerability within the version of sudo being used (CVEs and vulns) and the uses of dangerous binary, all of these could be abuse to elevate privilege to root . The tool will provide a list of commands or local exploits which could be exploited to elevate privilege. It does not perform any exploitation on your behalf, the exploitation will need to be performed manually and this is intended. Both red and blue team can use it to their benefit. Installation  Preferably on a kali machine. To pull from docker: service docker start docker pull th3xace/sudo_killer_demo docker run –rm -it th3xace/sudo_killer_demo To build locally using the Dockerfile: service docker start git clone https://github.com/TH3xACE/SUDO_KILLER.git cd SUDO_KILLER docker build -t th3xace/sudo_killer_demo . docker run –rm -it th3xace/sudo_killer_demo Download: https://github.com/TH3xACE/SUDO_KILLER Command usage  ./sudo_killer.sh -c -r report.txt -e /tmp/ Arguments: k : Keywords e : export location (export /etc/sudoers) c : include CVE checks with respect to sudo version s : supply user password for sudo checks (not recommended ++except for CTF) r : report name (save the output) h : help If you need to input a password to run sudo -l then the script will not work if you don’t provide a password with the argument -s . sudo_killer does not exploit automatically by itself, it was designed to check for misconguration and vulnerabilities and then offer: a list of commands to exploit a list of exploits some description on how and why the attack could be performed CVEs check  To update the CVE database: ./cve_update.sh Disclaimer  This script is for Educational purpose ONLY. Do not use it without permission. The usual disclaimer applies, especially the fact that TH3xACE is not liable for any damages caused by direct or indirect use of the information or functionality provided by these programs.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4a907115b0755f2b068a20d7699df63c",
    "u": "https://linux.tymyrddin.dev/docs/services/dns-servers",
    "t": "Use alternative DNS servers ",
    "c": "Use alternative DNS servers  When you don’t set up DNS servers on your computer or router, your DNS queries will run on your ISP’s DNS servers. Without VPN (with killswitch and/or firewall set as a VPN fail-safe mechanism ), DNS requests are most likely sent unencrypted, which can lead to common DNS attacks. Domain hijacking (Redirection) DNS flood attack (a type of DDoS attack) DNS spoofing or DNS cache poisoning DNS hijacking (malware infection on a local device to hijack DNS to redirect traffic to a phishing site) And any man in the middle of your traffic can see your online behaviour and the websites you visit. Your ISP’s DNS servers see every search you make in your browser. Using your ISP’s DNS servers as default DNS servers doesn’t do anything for security or privacy. Alternative DNS servers  OpenNIC is a group of volunteers who run an alternate DNS network offering free DNS servers. Depending on your location, you are offered different servers. OpenNIC offers DNS neutrality (it does not censor content), and you get the right to choose how much data OpenNIC logs. OpenDNS is a cloud-based service offering three solutions in their Home package, two of which are free. To connect with your nearest DNS server, and for faster page load times, it uses anycast routing. DNSWatch also offers DNS neutrality and does not log any DNS queries or record history. Quad9 DNS blocks malicious and suspicious domains using security intelligence from a group of companies to improve security. They do keep logs on some activity. Use wireshark to check for leaks  This is an example in a debian virtualbox VM, but is also valid in general for other setups. Virtual machines receive their network address and configuration on the private network from a DHCP server integrated into VirtualBox. The IP address assigned to the virtual machine is on a completely different network than the host (but can be seen with Traffic monitoring from the host). As more than one card of a virtual machine can be set up to use Network address translation (NAT), the first card is connected to the private network 10.0.2.0, the second card to the network 10.0.3.0 and so on. To check if you have DNS leaks, fire up wireshark: Start capturing on eth0 and connect to the VPN. After capturing either a fixed number of packets, or an amount of data or for a specific time period, go to //Statistics -> Endpoints// There should only be one public IP address, namely that of the VPN server that you’re connected to. The ‘’10.0.2.15’’ in this image is a local address.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c02fb8b1b6e66d6ee327f8ba59894d1f",
    "u": "https://linux.tymyrddin.dev/docs/services/change-mac",
    "t": "Change MAC address ",
    "c": "Change MAC address  A MAC address identifies the device connected to a network and allows the network to track, restrict or allow access based on it. Routers identify and assign static IP addresses based on the MAC addresses of devices. Before you try to change the MAC address, you need to know the value that you want to use. Set the 2’s place bit (the “locally administered” bit) in the first byte, to differentiate it from a guaranteed globally unique MAC address. Usually the first three bytes an unicast MAC address is an “Organizationally Unique Identifier” (OUI) that the IEEE assigned to the manufacturer of your Ethernet device. Manufacturers are required to make sure they keep the last 3 bytes unique. Avoiding all of that knowledge, the MAC address generator tool can generate a valid address for you. With ‘macchanger’ you can change the MAC address of any Ethernet network device: Turn off your network interface: $ sudo ifconfig eth0 down Use ‘macchanger’ to randomly generate new MAC address and assign it to eth0 network interface: $ sudo macchanger -r eth0 Current MAC: 00:10:4C:25:7A:3F (unknown) Faked MAC: 32:cf:cb:6c:63:cd (unknown) Enable eth0 network interface and check new MAC address: $ sudo ifconfig eth0 up $ sudo ifconfig eth0 If a specific MAC address, like 00:0a:95:9d:68:16 , is required: $ sudo macchanger -m 00:0a:95:9d:68:16 eth0",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e9ea2729e433eb193400d9cbaf963008",
    "u": "https://linux.tymyrddin.dev/docs/data/shred-and-delete",
    "t": "Shredding files and deleting data ",
    "c": "Shredding files and deleting data  Even when you erase everything on your hard disk, sometimes it is possible to recover (pieces of) data with forensics software and/or hardware. If that data is confidential, delete files and data securely so that no-one will recover them. Solid State Drives (SSD) may have introduced dramatic changes to the principles of computer forensics, in particular for recovering files and partitions. When encrypting and compressing files, clear-text versions that existed before you compress/encrypt the file or clear-text copies that are created after you decrypt/decompress it remain on your hard drive. There may also be “temp” files left behind. Unless you purge — not just delete — those clear-text files. Echoes of your personal data — swap files, temp files, hibernation files, erased files, browser artifacts, etc — are l ikely to remain on any computer that you use to access (encrypted) data. It is a trivial task to extract those echos. A hidden access trap. Purge – not just delete – echoes. Shredding files  Linux, FreeBSD and many other *nix systems come with a command line tool called shred installed. The shred command can be useful for destroying files so that its contents are very difficult to recover, even using high-sensitivity data recovery equipment. It repeatedly overwrites the data and the associated file or device names with random data. When used without options, shred will overwrite given files or devices 25 times. A device can be a partition or an entire HDD, USB key drive, etc. $ shred [option(s)] file(s)_or_devices(s) For example $ shred filename1 filename2 will shred both files, and $ shred /dev/hda4 will shred the fourth partition on the first HDD. By default, shred does not delete files or partitions after overwriting them. Overwritten files can be deleted by using the -u option. $ shred -u filename1 filename2 This both frees up the disk space for other data and makes it harder to reconstruct the shredded data. shred relies on the assumption that the filesystem overwrites data in place. But journal filesystems like //Ext3// and //ReiserFS//, RAID-based filesystems, compressed filesystems, and filesystems that cache data in temporary locations do not satisfy this assumption. Plus that copies of files can be retained in filesystem backups and on remote mirrors. Shredding partitions is therefore more reliable than shredding files. And even when shredding partitions, most HDDs map out bad sectors invisibly to application programs and utilities, and that includes shred. Sensitive data in such sectors will not be destroyed by shred. Permanently delete files (including data in RAM or swap)  The Secure-Delete package comes with four commands: * srm - Secure remove; used for deleting files or directories currently on your hard disk smem - Secure memory wiper; used to wipe traces of data from your computer’s memory (RAM) sfill - Secure free space wiper; used to wipe all traces of data from the free space on your disk sswap - Secure swap wiper; used to wipe all traces of data from your swap partition| srm (secure remove) is a more advanced version of the shred command. It uses a combination of random data, zeros, and special values developed by cryptographer Peter Gutmann to make files irrecoverable. The shred tool allows you to specify the number of passes and the secure-delete tools use a default of 38 passes. It will also assign a random value for the filename, hiding that key piece of evidence: $ srm filename Removing a directory and all its subdirectories (recursive): $ srm -r directory/ smem (secure memory wipe) removes residual traces of data that remain in memory. It is relatively easy for someone with the right tools to figure out what you had stored in RAM, which may be the contents of important files, internet activity, or whatever else it is you do with your computer. smem is slow. There are options to speed things up, but they increase risk by performing fewer overwrite passes. Invoke with: $ smem sfill (secure free space wipe) wipes all the free space on your disk where past files have existed. This is particularly useful if you are getting rid of a hard disk for good; you can boot a LiveCD, delete everything on the disk, and then use sfill to make sure that nothing is recoverable (as root): # sfill mountpoint/ NOTE: If you have /home/ on a separate partition and you try /home/hilarious/mistake as mountpoint, sfill will happily wipe the free space on which the mistake directory resides (the entire /home/ partition). sswap (secure swap wipe) wipes swap partitions. Swap partitions store data of running programs when RAM is filled up. Find your mounted swap devices by running: $ cat /proc/swaps Or look in your /etc/fstab file for filesystems of type swap. It can be /dev/sda5 or /dev/dm-1 , etc. Disable the swap partition: $ sudo swapoff /dev/sda6 Wipe: $ sudo sswap /dev/sda6 Re-enable swap: $ sudo swapon /dev/sda6 Making deleted data hard to recover  A hack that might work for sensitive data in sectors that were not destroyed by shred is towrite zeroes or random data to a file on the drive until it fills up all of the available space, then delete it: $ dd if=/dev/urandom of=/path/filename1 Then delete: $ rm /path/filename1 This also works on partitions: $ dd if=/dev/urandom of=/dev/sda4 Then delete $ fdisk /dev/sda4 Command (m for help): d Partition number (1-4): 4 Use bleachbit to delete files  With BleachBit you can free cache, delete cookies, clear Internet history, shred temporary files, delete logs, and discard junk you didn’t know was there. The version of BleachBit in the repositories of many Linux distributions is often stale, so to use the best and latest version, use download .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d55fbb6233b1e09122da3e3d15c8a60b",
    "u": "https://linux.tymyrddin.dev/docs/privacy/mat2",
    "t": "Use Metadata Anonymisation Toolkit 2 (MAT2) ",
    "c": "Use Metadata Anonymisation Toolkit 2 (MAT2)  mat2 provides a command line tool, and graphical user interfaces via a service menu for Dolphin, the default file manager of KDE, and an extension for Nautilus, the default file manager of GNOME. This is a tool natively created under Debian-Ubuntu and available as Debian and Ubuntu package . For usage, read the Man page .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "19e6cefe0df3934901104afb485f1aa5",
    "u": "https://linux.tymyrddin.dev/docs/guards/tripwire",
    "t": "Tripwire ",
    "c": "Tripwire  Tripwire is a free software security and data integrity tool useful for monitoring and alerting on specific file change(s) on a range of systems. It functions as a host-based intrusion detection system. It is suitable for monitoring a small number of servers where centralized control and reporting is not needed and professional support is not a requirement. Tripwire was originally a free, open source product and is now a commercial product but a free version (branched in 2000) is still being developed. Problems  Needs gcc for compiling. Will not compile with newer gcc’s. Tripwire provides no details about modified/added/removed files, only path names, unless one uses twprint --report-level 4 , which is pretty verbose. Omits checksum if file size is zero, which is incorrect for Linux /proc files. Setting it up is hilariously hellish, hence I am spelling it out here. Installation  To install tripwire on a debian-based system: $ sudo apt-get install tripwire Use the arrow keys to navigate: “Remember that passphrase”, for example in keepassx (I also had keepassx generate the passphrase): Repeat: Generating site key (this may take several minutes)... Do the same for local passphrase. Configuration  Just after install the tripwire directory /etc/tripwire contains a number of files, two of which are useful for its configuration. //twcfg.txt// is for general configuration and can easily be the same for all the computers on the same local network. It contains “things” like the location of the tripwire database, instructions for minimising the amount of time the passphrases are kept in memory, and the number of redundant reports. //twpol.txt// contains the policy that declares all the objects that must be monitored and what to do when one of them is lost or altered. Unlike the configuration file, the policy could (and almost certainly will) vary across the several computers on the same network. For security reasons (preventing a malicious intruder from spoofing tripwire into giving a false “okay” message) tripwire uses these cleartext files to create binary files for database checking rather than the cleartext files (that are best immediately removed after the deed). If you make incorrect edits to either of these files, you will have to restore from backup or tripwire will not be able to create its database. Before making modifications to the configuration files, make a backup first: $ cd /etc/tripwire $ sudo cp twcfg.txt twcfg.txt.old $ sudo cp twpol.txt twpol.txt.old Initialisation  Install default policy as root (mind the capital P, and know the cursor does not move at all when copy/pasting the passphrase (right-click works on the command-line for copy/pasting)): # /usr/sbin/twadmin -m P /etc/tripwire/twpol.txt Please enter your site passphrase: Wrote policy file: /etc/tripwire/tw.pol Still as root, generate the initial database (You will be asked for your local passphrase): # /usr/sbin/tripwire -m i Please enter your local passphrase: Parsing policy file: /etc/tripwire/tw.pol Generating the database... *** Processing Unix File System *** It may take a while and then: ### Warning: File system error. ### Filename: /var/lib/tripwire/debian.twd ### No such file or directory ### Continuing... Of course no such database exists (yet). This is the initial run to create it. And a bunch of these appear with (hopefully) a success message at the end: ### Warning: File system error. ### Filename: /proc/5199/fd/4 ### No such file or directory ... The object: \"/proc/sys/fs/binfmt_misc\" is on a different file system...ignoring. Wrote database file: /var/lib/tripwire/debian.twd The database was successfully generated. The twpol.txt file distributed with tripwire contains anything that could be on a UNIX system, so it is guaranteed to complain about programs that you never installed or placed in a different location. These false positives are created when there is a discrepancy between the default policy and the actual local configuration. ACTUALLY!!!!! :D Some further customization is necessary to prevent these large numbers of false positives. The “thing” to do to create a good policy is to remove as many unneeded programs as possible before starting. Next, to make your usage as quick and effective as possible, your policy must cover everything you really need to monitor and nothing else. This includes, at least, all the system binary and library directories (minimally the contents of /bin , /sbin , /usr/bin , /lib ) and the corresponding configuration files in /etc . As of version 2.3.1.2-5, the tripwire package manages policy at a directory level: if a directory appears in the policy, tripwire will add the files in that directory. Not all directory policy entries are recursive and tripwire may not check the contents of those subdirectories. To generate a listing of the discrepancies between the local system and the default policy (or just do the first bit without grep and search for occurrences of “Filename”): # /usr/sbin/tripwire -m c | grep Filename >> twtest.txt Waaaait for it! When this listing has been generated, edit /etc/tripwire/twpol.txt again, and comment out or delete each of the filenames listed in twtest.txt . Use your preferred editor (mine is geany): # geany /etc/tripwire/twpol.txt And there are other files in the default policy that may not make sense to monitor on your local system. These include lock files (which identify that some process is in use) and //pid// files (which identify the //process ID// of some //daemons//). Such files are likely to change often, if not at every system boot, and they can cause tripwire to generate false positives. You can comment out all of the /var/lock/subsys entries as well as the entry for /var/run . After that you need to re-install default policy and generate the database again. This can result in: *** Processing Unix File System *** The object: \"/dev/hugepages\" is on a different file system...ignoring. The object: \"/dev/mqueue\" is on a different file system...ignoring. The object: \"/dev/pts\" is on a different file system...ignoring. The object: \"/dev/shm\" is on a different file system...ignoring. ### Warning: File system error. ### Filename: /proc/22273/fd/4 ### No such file or directory ### Continuing... ### Warning: File system error. ### Filename: /proc/22273/fdinfo/4 ### No such file or directory ### Continuing... ### Warning: File system error. ### Filename: /proc/22273/task/22273/fd/4 ### No such file or directory ### Continuing... ### Warning: File system error. ### Filename: /proc/22273/task/22273/fdinfo/4 ### No such file or directory ### Continuing... The object: \"/proc/sys/fs/binfmt_misc\" is on a different file system...ignoring. Any /dev entries spell that the /dev file system also has other file systems mounted as /dev/hugepages , /dev/mqueue , /dev/pts , and /dev/shm . Similar objects in proc are also ignored. Directories in /proc change all the time, and it is a pseudo-filesystem. My solution is to comment out both /dev and /proc and add the listed objects that have appeared and that appear. The object: \"/proc/sys/fs/binfmt_misc/register\" is on a different file system...ignoring. The object: \"/proc/sys/fs/binfmt_misc/status\" is on a different file system...ignoring. binfmt_misc is a capability of the Linux kernel which allows arbitrary executable file formats to be recognised and passed to certain user space applications, such as emulators and virtual machines. The executable formats are registered through a special purpose file system interface (similar to /proc ). Debian-based distributions provide the functionality through an extra //binfmt-support// package. Needs monitoring. So, added those two as well. After that you need to re-install default policy and generate the database again. Cleaning up  It is now safe to delete the clear text versions of the tripwire policy and configuration files: # rm /etc/tripwire/twcfg.txt /etc/tripwire/twpol.txt If they need to be restored,...",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b7b37faf290dcbffa569d58bec9bd82d",
    "u": "https://linux.tymyrddin.dev/docs/privacy/devices",
    "t": "Turning devices on and off ",
    "c": "Turning devices on and off  Adversaries can try to gain access with trojans - invisibly-installed malware that gives the adversary administrative control over targeted computers, including, the ability to remotely control devices. Depending on your location and context, you may want to turn devices off and later on again. Some devices can be turned on and off by software, others need blacklisting. Kernel modules are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. And modules can be blacklisted. Examples  Turn on/off camera/webcam  Tape the camera. It may even be possible to turn it off in BIOS (depending on your version). Better yet, if you know what driver module is controlling the webcam, you can disable and enable the driver with a single command on the commandline. uvc driver  Check with: $ lsmod | grep \"uvc\" If stuff like this appears, your webcam device uses an uvc driver : uvcvideo 79005 0 videobuf2_vmalloc 12816 1 uvcvideo videobuf2_core 47787 1 uvcvideo videodev 126451 3 uvcvideo,v4l2_common,videobuf2_core media 18305 2 uvcvideo,videodev usbcore 195340 7 uvcvideo,ums_realtek,usb_storage,ehci_hcd,ehci_pci,usbhid,xhci_hcd To disable the cam: $ sudo modprobe -r uvcvideo To enable the cam: $ sudo modprobe uvcvideo other driver  If not an uvcvideo driver, try $ sudo lsmod | grep \"media\" and use the modinfo command to find out more about the modules listed behind it to locate your webcam driver module: $ sudo modinfo [modulename] Then replace the uvcvideo in the above modprobe command with the name of your driver module. Completely turn it off  To disable the webcam at boot (if file not exists, create it, use your preferred editor): $ sudo geany /etc/modprobe.d/blacklist.conf At bottom of the file add this line: blacklist uvcvideo (or the name of your driver instead of uvcvideo). Save the file and reboot. Your webcam is no longer functioning. Turn on/off microphone  Use the alsa control panel for muting the microphone: $ sudo alsamixer You can also use the same modprobe enabling/disabling method as used for webcam above. The ALSA modules page may be helpful for finding your driver module. Blacklist firewire and thunderbolt  A direct memory access (DMA) attack is a type of side channel attack in which an adversary penetrates a device by exploiting the presence of high-speed expansion ports that permit Direct Memory Access. Firewire, thunderbolt and ExpressCard allow (by design) any connecting device full direct memory access to your system. They can be disabled in /etc/modprobe.d/blacklist-dma.conf (in debian): blacklist firewire-core blacklist thunderbolt The modules will be blacklisted upon reboot.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4a6b446a98f847631f8f77625cd76606",
    "u": "https://linux.tymyrddin.dev/docs/services/tor-proxy",
    "t": "Use a Tor proxy ",
    "c": "Use a Tor proxy  Tor proxy  Install: $ sudo apt update $ sudo apt install tor Check it is installed: $ tor --version Tor version 0.4.6.9. Get your IP address: $ curl ifconfig.me; echo [IP address] Run the same command but preface it with torsocks. The command is now run through the tor client instead: $ torsocks curl ifconfig.me; echo [Some Tor IP address] Shell  To use the Tor network by default for shell commands, torify your shell with this command: $ source torsocks on Tor mode activated. Every command will be torified for this shell. Test with (must now be []): $ curl ifconfig.me; echo [Some Tor IP address] Enable Tor control port  Password protect the Tor connection: $ torpass=$(tor --hash-password \"[password]\") Enable the Tor control port and insert the hashed password: $ printf \"HashedControlPassword $torpass\\nControlPort 9051\\n\" | sudo tee -a /etc/tor/torrc Check the contents of the /etc/tor/torrc configuration file. $ sudo systemctl restart tor Now tor is running on both ports 9050 and 9051. Use in app, for example Firefox  Go to Preferences -> Network Settings -> Settings button Select “Manual proxy configuration” and enter localhost in the “SOCKS Host” field. Use 9050 for port. OK Test by going to a IP site Notes  If a government makes their own national internet, or routes traffic through specific servers to use deep packet inspection (DPI), running Tor may not provide security if the government is able to see the entire path. Sometimes the Tor network is censored, and clients can’t connect to it. An increasing number of censoring countries are using Deep Packet Inspection (DPI) to classify Internet traffic flows by protocol. While Tor uses bridge relays to get around a censor that blocks by IP address, the censor can use DPI to recognize and filter Tor traffic flows even when they connect to unexpected IP addresses. With pluggable transports, censorship against Tor can be bypassed. Not only that. If an attacker can see your traffic, and can see the website you’re visiting, even with a path outside the adversary’s control - they will still be able to correlate the traffic and learn you are visiting the website. If the same connection (the same set of relays) were to be used for a longer period of time a Tor connection could be vulnerable to statistical analysis, which is why the client software changes the entry node every ten minutes.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8a1df405bdd267d46c76e2bf613446f6",
    "u": "https://linux.tymyrddin.dev/docs/guards/ossec",
    "t": "OSSEC ",
    "c": "OSSEC  OSSEC stands for Open Source HIDS Security. It is entirely free to use. As a host-based intrusion detection system, the program focuses on the log files on the computer where you install it. It monitors the checksum signatures of all the log files to detect possible interference. On Unix-like systems, it will monitor any attempts to get to the root account. Although OSSEC is an open-source project, it is owned by Trend Micro, a security software producer. Installation on Ubuntu/Debian",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "524d26dc53c3aa43cfc3edb7fa368aa8",
    "u": "https://linux.tymyrddin.dev/docs/guards/aide",
    "t": "Aide ",
    "c": "Aide  The Advanced Intrusion Detection Environment (Aide) , is a file integrity checker (FIA). It creates a database from the regular expression rules that it finds from the config file(s). Once this database is initialized it can be used to verify the integrity of the files. It has several message digest algorithms (md5, sha1, rmd160, tiger, crc32, sha256, sha512, whirlpool (additionally with libmhash: gost, haval, crc32b)) that are used to check the integrity of the file. All usual file attributes (//File type, Permissions, Inode, Uid, Gid, Link name, Size, Block count, Number of links, Mtime, Ctime// and //Atime//) can also be checked for inconsistencies. It can read databases from older or newer versions. Installation  To install aide on a debian based system: $ sudo apt-get install aide Open up /etc/default/aide with your favourite editor to change who to send its reports to: $ sudo geany /etc/default/aide Initialisation  Initialisation (this can take some time) on debian based: $ sudo aideinit Running aide --init... Start timestamp: 2018-03-02 20:54:13 +0000 (AIDE 0.16) AIDE initialized database at /var/lib/aide/aide.db.new Verbose level: 6 Number of entries: 163501 --------------------------------------------------- The attributes of the (uncompressed) database(s): --------------------------------------------------- /var/lib/aide/aide.db.new RMD160 : ST44/Xwdiok4RmbkV61xDP9gXdg= TIGER : TWH3gMXUUFA+MRy8iIdJPkPKxY39drxK SHA256 : K+TPo8r3/GANOt4L24mUnlAmM3BN4Ap7 7/xuFmq8xnU= SHA512 : xhZ9lhG50Xb8rmFF8AqFkd9TFqMDaE/T FxEAebvt5eNmd/ayYab1fFEyefdZnu8G HNkEo6H9f1Hn80+IN7sJdA== CRC32 : BdfVRg== HAVAL : hVkhsvx02hXF5YmIyuiJMlNtAweYuOTP Y2L043XMHW4= GOST : T690cFLlnZhUQsCL4GaSjrJ0yHslK0Au VRgW3dMWV4U= End timestamp: 2018-03-02 21:06:39 +0000 (run time: 12m 26s) On other distros: sudo aide --init Configuration  Most aide configuration can be found in /etc/aide/aide.conf . This file is pretty well documented and default rules are quite decent. Aide aims at reporting files that changed since the last snapshot (stored in /var/lib/aide/aide.db ). In hostile environments, a good security measure is to keep the database file on an external disk. If you have such a device, you can copy the current snapshot to it and use the snapshot from that device during later runs of aide. Before making modifications to the configuration file, make a backup first: $ sudo cp /etc/aide/aide.conf /etc/aide/aide.conf.old So let say that you have a copy of aide.db on an external disk. To use that snapshot, you can change //database=file:/var/lib/aide/aide.db// to //database=file:/media/user/drive/aide/aide.db//: $ sudo geany /etc/aide/aide.conf Read through the file to acquaint yourself with aide. By default, changes in //Binaries// and //Libraries// directories are checked. Those are matched to the //BinLib// rule, which basically checks for any changes in permissions, ownership, modification, access and creation date, size change, md5 and sha1 signature, inode, number of links and block count. Then, it also checks for modifications in the //log files// against the rule //Logs//. Because log files tend to grow, you cannot use a signature there, and you also have to ask aide not to check for size modification (S). Usage  On debian and friends, aide is run on a daily basis through the script /etc/cron.daily/aide . Default settings in /etc/default/aide tells aide to update its database. Using database_out value in /etc/aide/aide.conf , aide is going to output a new database any time it runs in /var/lib/aide/aide.db.new (if you kept the default settings). Any time you install new packages or change some configuration settings, run: $ sudo /etc/cron.daily/aide And check in the report that any modifications were only done to files you intended to modify and that added files are only coming from packages you have just installed and copy the new database to whatever place your database points to. Great way to learn about linux and non-intended changes too.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c403afd4a99fa39cc46668e8315b06b9",
    "u": "https://linux.tymyrddin.dev/docs/privacy/bleachbit",
    "t": "Scrub machine with BleachBit ",
    "c": "Scrub machine with BleachBit  With BleachBit you can free cache, delete cookies, clear Internet history, shred temporary files, delete logs, and discard junk you didn’t even know was there. It is available for Linux, Windows, BlackBerry, Email servers and Mac OS X. The version of BleachBit in the repositories of many Linux distributions is often stale, so to use the best and latest version, use the packages from the Download page .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1defcb2cdf6f597e0bb09aff93244594",
    "u": "https://linux.tymyrddin.dev/docs/services/service-management",
    "t": "Service management ",
    "c": "Service management  Be careful disabling/stopping services. Some other applications might stop functioning because they depend on a disabled service. Try one by one. Most recent distributions use the Systemd system manager. Some still use the old SysVinit system manager. The easiest way to discover which system manager is in use, is by using the use the pstree command and to check the first process ever run on your system: $ pstree | head -n 5 systemd-+-ModemManager---2*[{ModemManager}] |-NetworkManager---2*[{NetworkManager}] |-accounts-daemon---2*[{accounts-daemon}] |-acpid |-apache2-+-2*[apache2---26*[{apache2}]] Getting a list of services  To list services on Linux, when you are on a systemd system: $ systemctl list-units --type=service This command will show you only the services that are active or the services that have failed (in red) on the system. List all services: $ systemctl list-units --type=service --all Only loaded services are listed. On boot, systemd loads unit files and it may choose not to load a specific service if it finds that it won’t be used by the system. List services by state (active, inactive, activating, deactivating, failed, not-found or dead): $ systemctl list-units --state=<state1>,<state2> In order to list all service files available, use list-unit-files : $ systemctl list-unit-files --type=service Status of a service  To verify whether a service is active or not, run this command (for example, for apache2): $ sudo systemctl status apache2 Managing services  To start/stop/restart a service in Linux: $ sudo systemctl start <service> $ sudo systemctl stop <service> $ sudo systemctl restart <service> To force the service to reload its configuration files: $ sudo systemctl reload <service> Enable/disable a service at boot: $ sudo systemctl enable <service> $ sudo systemctl disable <service>",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2d0d5cfbfc313b7538b4d5e56fda8b1b",
    "u": "https://pap.tymyrddin.dev/docs/mobile/squatting",
    "t": "App squatting ",
    "c": "App squatting  Fake apps repackage an app and are relatively easy discovered as the identifiers (app name or package name) are changed. In “App Squatting”, attackers release apps with identifiers that are confusingly similar to those of popular apps or well-known Internet brands. Related labs  Android malware analysis (Pithus and jadx) Resources  Yangyu Hu, Mobile App Squatting , 2020, IW3C2 PiRogue tool suite: Beginner guide - How to handle a potentially malicious mobile app",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "374e2d70f6c5e64e1a5bd02a2813f0f0",
    "u": "https://pap.tymyrddin.dev/docs/mobile/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Mobile malware is a generic term for malicious software designed to target mobile devices (smartphones, tablets, and iOT devices) with the goal of gaining access to private data. Apparently it is still not as pervasive as malware designed for workstations, and that may have to do with the fact that SOC teams and SIEM stacks have focused mostly on detecting workstation and corporate network threats, and that it was only a matter of time before hackers switched tactics. Why?  It is definitely a recognised/growing threat, and needs to be addressed. How?  First off, by some research into known threats. Mobile malware Smishing Vishing SIM swapping OTP bots App squatting Ransomware Madware Spyware Location tracking Stalkerware",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a373645557189025eab2068c15fa2b3c",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/lol",
    "t": "More LOL ",
    "c": "More LOL  Adversaries are embracing conventional and commercially available development tools to make attacks faster and harder to detect, more often using “living off the land” (lol) : Exploits using built-in tools and programs for operating systems ( LOLBAS , GTFOBins and loldrivers ) can deceive threat detection and response systems.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f0b8c0cc7f2e7b018e415fab855950e1",
    "u": "https://pap.tymyrddin.dev/docs/backdrop/marketplace",
    "t": "Marketplaces ",
    "c": "Marketplaces  There seems to have been a move from the Darkweb to Telegram, probably due to increased pressure from law enforcement and other threat actors. Darkweb is still on though, with sites like InTheBox, a marketplace for mobile malware, 2Easy, where threat actors buy and sell harvested data, and Russian Market (despite the name it is english), where you can buy stolen credit cards, credentials, or cookies, and buy access to specific remote desktop protocol clients/servers.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2252de440ea5b63ba4c6324b2064b78e",
    "u": "https://ios.tymyrddin.dev/docs/opsec/autojoin",
    "t": "Not auto-joining Wi-Fi networks ",
    "c": "Not auto-joining Wi-Fi networks  Auto join is a feature that allows your phone to automatically join any Wi-Fi network it already has the credentials for, or open Wi-Fi networks, without having to ask you to do anything. This can be a time saver at home and at work. But, it carries two major issues: It can cause your phone to randomly leave a stronger Wi-Fi network for a weaker Wi-Fi network that has come into range. Both Android and iOS developers have tried to stop their operating systems from doing this, but have only had limited success. When your phone switches over to a weaker Wi-Fi, it terminates your first Internet connection, interrupting your Internet usage. Once on the weaker network, performance goes down. When you automatically join open public Wi-Fi networks you put your data and privacy at risk. You do not know that the network is secure. You could be joining a clever network clone (rogue wireless access point) that is really a MitM attack trying to steal your passwords and usernames to sensitive accounts. On iOS devices, you have to set this option for each Wi-Fi network individually. Go to Settings -> Wi-Fi. You will see a list of Wi-Fi network profiles. Click the ones you want to not auto join with and toggle the switch to auto join.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "50e4088250a2c2b452319c43aae526d9",
    "u": "https://ios.tymyrddin.dev/docs/malware/scanner",
    "t": "Installing a third party security app ",
    "c": "Installing a third party security app  Apple designed the iPhone’s software (iOS) in such a way that it is very difficult for malware, including viruses, to penetrate its defences. iPhone apps are sandboxed, an app can not access the data of another app, and iOS has several built-in security features to protect your device from malware threats. Meaning you do not need to install an antivirus app on iPhones and iPads. But do consider installing a third party security app, because iOS security apps cannot act as traditional “antivirus” scanners, while antivirus is only one type of the many threats that exist today . The built-in security apps can not protect your phone from other threats, like phishing emails disguised as Apple ID alerts, and iPhone malware does exist .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5180e688f36124ebc5757fadbc3fb724",
    "u": "https://ios.tymyrddin.dev/docs/services/messaging",
    "t": "Using more secure messaging services ",
    "c": "Using more secure messaging services  In most countries, it is safe to assume that telecoms are recording all SMS message traffic. And make it the default SMS messenger. Install a secure messanger app and make it the default SMS messenger. Signal is not as strong on privacy as it is on security. It collects some metadata, and relies on central servers to manage message flow and hold the metadata it does collect. Session is a fork of Signal. No geolocation data, device data, or metadata is collected. The Session network is decentralized, with no single point of failure, and no main server for bad guys to hack. Session moves messages using an onion routing system. Note : Signal no longer accepts SMS messages.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "410bf4a026203e9b3554c890f24c5eba",
    "u": "https://ios.tymyrddin.dev/docs/opsec/ooni",
    "t": "Measuring Internet Censorship ",
    "c": "Measuring Internet Censorship  The OONI Probe is a free app to measure Internet Censorship. With this app, you can examine the blocking of websites and instant messaging apps, measure your network’s speed and performance, and check whether systems that could be responsible for censorship and surveillance are in your network. OONI Probe is developed by the Open Observatory of Network Interference (OONI), a free software project (under The Tor Project) that aims to uncover internet censorship around the world.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "07856b450837919911a40533d588b478",
    "u": "https://ios.tymyrddin.dev/docs/malware/readme",
    "t": "Introduction ",
    "c": "Introduction  iOS malware is not as common as malware for other devices, but any device always has a risk of getting infected. Phones contain more sensitive information than PC’s and Workstations. It usually contains pictures, credit cards, private messages, and other valuable data. Mobile malware is a generic term for malicious software designed to target mobile devices (smartphones, tablets, and iOT devices) with the goal of gaining access to private data. Apparently it is still not as pervasive as malware that attacks traditional workstations, and that may have to do with the fact that SOC teams and SIEM stacks have focused mostly on detecting workstation and corporate network threats (before Covid and the BYOD wave), and that it was only a matter of time before hackers switched tactics. It is definitely a recognised growing threat and needs to be addressed. Threat awareness Installing an AV scanner Finding the culprit and removing it Ransomware",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5e975f2ca630b04ead50b24758dfbbe5",
    "u": "https://ios.tymyrddin.dev/docs/data/encryption",
    "t": "Encrypting the data ",
    "c": "Encrypting the data  Apple’s iPhone, iPod touch, and iPad smart devices all support basic built-in encryption when a passcode is enabled. To enable encryption: Settings -> Face ID & Passcode Make sure passcode is enabled. Data protection is enabled should be displayed at the bottom of the Face ID & Passcode screen. iOS’ data encryption does not prevent authorities from accessing your backup on Apple’s servers.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f96930f5255a0313f0bea56285edda5b",
    "u": "https://ios.tymyrddin.dev/docs/services/audit-and-block",
    "t": "Auditing and blocking the access apps have ",
    "c": "Auditing and blocking the access apps have  When considering if an app should continue to have access to certain types of your data or hardware, ask yourself if you use features in that app that requires such access? If you never check yourself into places in Facebook, why should the Facebook app continue to have access to your location data (which can be used for tracking your movements)? Go to Settings -> Privacy You will see a list of types of data, from location data to photos and items like camera and microphone. Tapping on an item takes you to a list of apps that have access to that type of data. To restrict an app from accessing that data, toggle its switch to off.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "534b302248435ff69e0e1981219b69c5",
    "u": "https://ios.tymyrddin.dev/docs/guards/lockdown",
    "t": "Lockdown Privacy ",
    "c": "Lockdown Privacy  The Lockdown Privacy: VPN & Proxy does all its blocking locally, on your device, and not through centralised servers. The app comes with several rules already in place, and it is easy to add more. It does use the iOS VPN framework, but the VPN server runs on your device. You have to add your own addresses to the block list. Block list  api.mixpanel.com data.flurry.com onesignal.com app-measurement.com sb.scorecardresearch.com Note: Apart from the built-in list, there is no way to detect what iss being shared by other apps on your devices.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3025db3507bb6b4a3c19132dcd8cabf4",
    "u": "https://ios.tymyrddin.dev/docs/services/ssh",
    "t": "Using SSH tunnels ",
    "c": "Using SSH tunnels  Secure Shell (SSH) can be used to securely acquire and use a remote terminal session, tunnel traffic, transfer files, mount remote file systems, and more. SSH uses strong encryption, and you can set your SSH client to act as a Socks proxy. The traffic enters the Socks proxy running on your local system and the SSH client forwards it through the SSH connection – this is known as SSH tunneling. Once you have set it up, you can configure applications on your computer – such as your web browser – to use the Socks proxy. Each application must be configured to use the SSH tunnel’s proxy. This setup works similar to browsing the web over a Virtual Private Network (VPN) . From a web server perspective, traffic appears to be coming from the SSH server. The traffic between source and the SSH server is encrypted, so you can browse over an encrypted connection as you could with a VPN. Port forwarding  Port forwarding or port mapping is a combined technique of: Translating the address and/or port number of a packet to a new destination. Possibly accepting such packet(s) in a packet filter (firewall). Forwarding the packet according to the routing table. SSH tunnels can be created in several ways using different kinds of port forwarding mechanisms. On iOS you can use Terminus, a terminal & SSH client. App Store Termius: Terminal & SSH client",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "32f86a7a3e9a5f2d9a6f69aa2dab8975",
    "u": "https://ios.tymyrddin.dev/docs/data/nuke",
    "t": "Worst case, nuking all data ",
    "c": "Worst case, nuking all data  If the worst happens and someone steals your phone, it would be good to know that the thief will not have endless opportunities to guess your passcode. Go to Settings -> Face ID & Passcode ( Touch ID & Passcode on an older iPhones) At the bottom of the screen, toggle the Erase Data switch to on. Now all data on the device will be deleted if the wrong passcode is entered 10 times in a row. Note: Allowing location data and enabling guest accounts to locate the phone could be a strategy, because it does not require location tracking turned off.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cf858f23f54a57da8b40d02697e3a054",
    "u": "https://ios.tymyrddin.dev/docs/privacy/search-engine",
    "t": "Changing default search engine ",
    "c": "Changing default search engine  By default, Safari uses Google’s search engine to return results when you do a web search. Google pays Apple billions every year for it to be the default search engine. And Apple also allows you to choose a different search engine, including offering the privacy-focused DuckDuckGo (its business model does not rely on collecting data about you). Go to Settings -> Safari -> Search Engine . Tap DuckDuckGo .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9c47bbf654081b19aba4ca15c620abd6",
    "u": "https://ios.tymyrddin.dev/docs/services/change-browser",
    "t": "Changing default browser app ",
    "c": "Changing default browser app  iOS devices come with Apple’s Safari browser pre-installed, but you can use a different browser if you wish. Unfortunately, on older iOS versions (< 14), you can not set a different browser as the default, so when you tap links in emails or messages, Safari will open them. Luckily most apps let you lightly tap-and-hold on links to copy the address to paste it into an alternative browser of your choice . If you are running iOS or iPad >14, you can set any third-party browser as the default on your iPhone or iPad. Install your replacement browser app. In the Settings menu, locate the section for the browser you’d like to set as your default. If it has been updated to support Apple’s default browser switching feature, you will find a Default Browser App option in its settings. Tap to make it the default. A checkmark appears to confirm it’s the default.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e9b002f7600bf02de79f3a48f30b290e",
    "u": "https://ios.tymyrddin.dev/docs/authentication/passwords",
    "t": "Automagically creating strong passwords ",
    "c": "Automagically creating strong passwords  If not on: Go to Settings -> Passwords -> Password Options . Turn on AutoFill Passwords . Next time you create an account in an app or at a website, when you select the Create password field, you’ll see iOS has automatically inserted a unique password in the field. Tap the Use Strong Password button to use the recommended password, and iOS will automatically store it in your Keychain . iOS never generates the same strong password twice.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7f39ff499e18f6b072c266c6916cbf09",
    "u": "https://ios.tymyrddin.dev/docs/authentication/sim-pin",
    "t": "Using a SIM PIN ",
    "c": "Using a SIM PIN  Put a PIN in your iPhone SIM . If you do not and the phone gets stolen, thieves can change the iPhone SIM and put it in another unlocked phone. And with the SIM in another phone they can request an SMS code for resetting the password to all your accounts, including iCloud, Facebook, Instagram, Twitter, etc. Even with two-factor authentication enabled, they can use this method to get the code and access your accounts.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "75b7fc14ffcf224a711e56d113918afb",
    "u": "https://ios.tymyrddin.dev/docs/services/readme",
    "t": "Introduction ",
    "c": "Introduction  Auditing and blocking the access apps have Unwanted third party apps (UAPs) Blocking apps from accessing Bluetooth data Checking for unknown configuration profiles Browsers that protect your privacy Changing default browser app Using more secure messaging services Using more secure email services Using SSH tunnels Using VPN services Using Tor proxies Changing MAC address Editing hosts file",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1d7a6c0c42725729dd08d92ba26e46fe",
    "u": "https://ios.tymyrddin.dev/docs/malware/clean-machine",
    "t": "Finding the culprit and removing it ",
    "c": "Finding the culprit and removing it  If you think it will turn into a “legal issue”, DO NOT shut the device down or try to remove the malware, and call in a first responder instead. Detecting  If the symptoms appeared immediately after installing an app, that app may be the guilty party Look for unfamiliar apps: Swipe through the screen and look for the apps that you don’t remember installing. To see a list of every app you’ve installed from the App Store, tap the Apps icon at the bottom of the store, tap your profile photo, then tap Purchased . If there’s an app on your phone that is not in this list (and does not come from Apple), it is likely malware. Find out whether your phone is jailbroken: Check for the Cydia app on the iPhone in question. You can use Spotlight to search for it and if it comes up, the iPhone is jailbroken. Check for modifications. The whole point of jailbreaking an iPhone is to add features to it that are not available out of the box. They may not be obvious but a cursory look through the device can give clues. Go to Settings -> Battery and monitor usage . Tap on Show Detailed Usage to view the breakdown of foreground and background usage. If you find an app that you don’t recognise, it is a candidate for removal. Go to Settings > Mobile Network and scroll down to Mobile Data . Is that level normal for your device? Removing  Try these first  Restarting your iPhone can, in some cases, get rid of malware. Unlikely, but can. How to do this depends on your iPhone. Clear History & Website Data: Open Settings on your device and tap Safari . Tap Clear History and Website Data . Confirm. Deleting an app and its configuration profile  Deleting an app Touch and hold the app until it jiggles. Then tap the delete button in the upper-left corner of the app to delete it. If you see a message that says, “Deleting this app will also delete its data,” tap Delete . If the app has a configuration profile, delete it. Go to Settings -> General -> Profiles or Profiles & Device Management , then tap the app’s configuration profile. Then tap Delete Profile . If asked, enter your device passcode, then tap Delete . Restart Fail  If this did not work, do a Reset to factory settings Make an iTunes backup or iCloud backup Go to Settings -> General -> Reset -> Erase All Contents and Settings Enter your passcode to confirm the reset Set up device again Restore the backup to your device. If for any reason you are not able to restore, it most likely contains malware. Then restore one of the previous backups to your device instead, and delete the infected backup from iTunes or iCloud. If a factory reset did not work, replace device. Most cases of malware are user-made and involve acts like jailbreaking, and Apple’s warranty does not cover this issue. Related  Endpoint detection and response Malware analysis",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "550c4ee9a2304a2212abb88d5024daed",
    "u": "https://ios.tymyrddin.dev/docs/services/uap",
    "t": "Unwanted third party apps (UAPs) ",
    "c": "Unwanted third party apps (UAPs)  Everything typed on your iOS smartphone goes through your keyboard. This means the keyboard has access to those passwords, private emails, documents, and SMS messages you type on your phone. It can even see your credit card information. The perfect Trojan Horse. Sometimes malicious apps do sneak in, into the Apple Store, so keep yourself informed and research each app before installing. Articles  Snyke: SourMint Wandera discovered 17 malicious click fraud apps hosted on Apple’s iOS app store",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "42d04f7d2a66c1c522bcb182076794c7",
    "u": "https://ios.tymyrddin.dev/docs/opsec/hibp",
    "t": "‘;–have i been pwned? ",
    "c": "‘;–have i been pwned?  ‘;–have i been pwned? (HIBP) is a database of several billion email addresses (and, separately, passwords) that have appeared in a publicly known past data breach. Firefox Monitor is an online service developed by Mozilla. It informs users if their email address and passwords used have been leaked in data breaches, using the database provided by Have I Been Pwned? Check if you have an account that has been compromised in a data breach, and if so, change your password and change it in any other place where you’ve used that password. Better yet, never use a password twice, and consider using a password manager.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "80c40367a9a844324369dc3198018924",
    "u": "https://ios.tymyrddin.dev/docs/authentication/password-reuse",
    "t": "Auditing and changing password reuse ",
    "c": "Auditing and changing password reuse  Password reuse is a security problem. With password reuse auditing you can see which websites you’ve reused passwords on and then give them unique passwords. The real advantage is that it visualizes how vulnerable reusing the same password on multiple sites makes, and creates unique strong passwords for every site and app you use. Go to Settings -> Passwords & Accounts -> Website & App Passwords . This is where the Keychain is located. Authenticate, and you’ll be taken to a list of app and site passwords. Any site or app that has an exclamation mark in a triangle next to it means you are also using its password for another site or app. Tap the symbol Change Password on Website This will take you to that site’s password management screen where you can change your password.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5f844a8ef64db7b24cfd80e583f58099",
    "u": "https://ios.tymyrddin.dev/docs/services/bluetooth",
    "t": "Blocking apps from accessing Bluetooth data ",
    "c": "Blocking apps from accessing Bluetooth data  Bluetooth allows for wirelessly connecting accessories to an iPhone, including anything from AirPods to game controllers. Applications, when getting access to that connection, can track your location in physical space. The apps get this location data from beacons: small devices that can tell when you are nearby based on the Bluetooth signal the phone emits. Beacons in and of themselves are not malicious. They allow for sending location-based alerts to the phone, for guiding you around a museum exhibit. And some apps have also been using these Bluetooth beacon location data for more nefarious purposes, like tracking you without your knowledge. That’s why in iOS 13+, Apple created a new privacy setting showing you just what apps are using your Bluetooth data and gives you the ability to shut off those apps’ access to your Bluetooth connection. Go to Settings -> Privacy -> Bluetooth . You will see a list of all your apps that have access to your Bluetooth data. Toggle the switch next to an app to off (white) to deny it access to your Bluetooth data.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5c212da8fcb1bd829590036d1bda2c3b",
    "u": "https://ios.tymyrddin.dev/docs/services/change-mac",
    "t": "Changing MAC address ",
    "c": "Changing MAC address  A MAC address identifies the device connected to a network and allows the network to track, restrict or allow access based on it. Routers identify and assign static IP addresses based on the MAC addresses of devices. Before you try to change the MAC address, you need to know the value that you want to use. Set the 2’s place bit (the “locally administered” bit) in the first byte, to differentiate it from a guaranteed globally unique MAC address. Usually the first three bytes an unicast MAC address is an “Organizationally Unique Identifier” (OUI) that the IEEE assigned to the manufacturer of your Ethernet device. Manufacturers are required to make sure they keep the last 3 bytes unique. Avoiding all of that knowledge, the MAC address generator tool can generate a valid address for you. Changing it is not possible with versions <14. The iOS 14 update brought with it the Private Address feature that lets you hide your original MAC Address of iPhone. You can enable the private address on your iOS for a Wi-Fi connection. When enabled, your iOS will always use a private MAC for that (public) Wi-Fi network. Connect to the Wi-Fi network you want to hide the iPhone MAC address from. Open Settings . Tap on Wi-Fi . Tap the i icon next to the connected Wi-Fi network. Toggle on Private Address . Reconnect to the Wi-Fi network.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "20c282ebd99be86ccd88212d1edfee6d",
    "u": "https://ios.tymyrddin.dev/docs/authentication/mfa",
    "t": "Using multifactor authentication (MFA) ",
    "c": "Using multifactor authentication (MFA)  Many sites and applications offer multifactor authentication (MFA). With MFA enabled, logging into a website or application requires both a password and a unique code that is texted to your phone number or delivered via an authenticator app. You have to input this code in order to gain access to your account. Even if someone else has your password, they will not be able to break into your accounts if they can not get the code. MFA (alias 2FA) is a pain involving hopping back and forth and copying and pasting. So Apple introduced a feature in iOS 12+ called security code autofill. Now when you log into an app or website where you have MFA enabled, you no longer need to navigate to the Messages app to retrieve your texted MFA code. As soon as the text with the code arrives, it will be routed to the iPhone’s keyboard where you can just tap on the code to autofill it into the security field in an app or website. Security code autofill is built-in, so there is no need to enable it. You will need to enable 2FA on any apps or websites you want to use the security feature with. Enable 2FA on every social media and financial site you use. Note that MFA bypasses are becoming “common”.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0a01d13a8041fd50245788fc1077eb8e",
    "u": "https://ios.tymyrddin.dev/docs/services/edit-hosts-file",
    "t": "Editing hosts file ",
    "c": "Editing hosts file  The hosts file is a system file on a device that lets you map specific domain names to an IP address. If you want to add new entries to the hosts file, you’ll need the IP address of the server that you want to map a hostname to. XXX.XXX.XXX.XXX some.domain.name The hosts file lets you override DNS entries for any domain name. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. Blocking is achieved by setting the IP address of the ad networks to a loopback address like 127.0.0.1 which will not return anything. There are lists of common ad networks and tracking servers available online which you can use to keep an up-to-date list of sites to block. If your device is infected with malware, then your hosts file may be compromised to included unknown entries for known domain names. That is NOT the IP address of your bank! This type of DNS attack is known as DNS pharming, and checking your hosts file can uncover potential infection. iOS devices, such as the iPhone and iPad, use a hosts file to map hostnames to IP addresses. It can not be changed unless you Jailbreak the device Use a portable Wi-Fi router and set iOS cto get DNS from the router and the router will need the custom hosts set up. Tether it to an Android with custom hosts file. And that is most likely not enough in situations where governments are using DNS poisoning to block sites, like in China.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "38fa04167597dbaee0a39ecf48996524",
    "u": "https://ios.tymyrddin.dev/docs/services/profiles",
    "t": "Checking for unknown configuration profiles ",
    "c": "Checking for unknown configuration profiles  Profiles are more dangerous than malware because they give adversaries access to more of the device than just one app, and they are not vetted to the same extent as apps entering the App Store. Go to Settings -> General Check and vet profiles",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cbf5cb88c78cfbc76cbfc5b657f9f3fb",
    "u": "https://ios.tymyrddin.dev/docs/malware/ransomware",
    "t": "Ransomware ",
    "c": "Ransomware  Most ransom messages on iPhone and iPad are scams. If you get a message in your browser, or an SMS or iMessage that your iPhone has been disabled or data has been encrypted, likely it is a scam. Do not pay, clear all browser data or delete the message, and report it to Apple. If not a scam, it is installed as an unremovable management profile from the Internet, sideloaded from an infected computer, or downloaded as the result of jailbreaking the device. Unless your device is jailbroken or using an outdated version of iOS, the most ransomware can do is hide your apps or control settings on your device, not encrypt your data. You will be able to restore your device from backup. Detecting  If many of your apps are missing from your home screen, you may have ransomware on your iOS device. Go to Settings -> General -> Profiles and Device Management and look for unknown management profiles. If your device (phone or pad) is infected, there will be some notification from an app that demands payment. These pop-ups may appear out of the blue, or they may occur when doing a specific action (like pressing the Home button). Try searching for the message you see in a search engine to find out more. Do not pay to get your data back. Even if you pay, there is no guarantee the ransomware will be removed. Try to remove it. If you can not, get help. Removing  Attempt to remove the found culprit management profile. Go to Settings -> General -> Profiles and Device Management , then tap on the management profile to remove. Tap on Remove Profile at the bottom of the screen, then enter your passcode. Backup the device. Power down the device (hard reset). While powered down, connect the device to your workstation. Put it in DFU mode . Choose Restore Device … to reinstall iOS. Restore data from backup. Some apps may need to be reinstalled too. Preventing  Only install apps from the App Store. Read app reviews. Back up iPhone or iPad often. If your device does get infected, you can restore your data right away. Always use the latest iOS version.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7788fd31ecda141c707836ea54a0daf6",
    "u": "https://ios.tymyrddin.dev/docs/services/tor-proxy",
    "t": "Using Tor proxies ",
    "c": "Using Tor proxies  Orbot is a free tor proxy app. It encrypts your Internet traffic and then hides it by bouncing through a series of computers around the world. Tor is free software and an open network that helps you defend against a form of network surveillance that threatens personal freedom and privacy, private activities and relationships, and state security known as traffic analysis. Notes  If a government makes their own national internet, or routes traffic through specific servers to use deep packet inspection (DPI), running Tor may not provide security if the government is able to see the entire path. Sometimes the Tor network is censored, and clients can’t connect to it. An increasing number of censoring countries are using Deep Packet Inspection (DPI) to classify Internet traffic flows by protocol. While Tor uses bridge relays to get around a censor that blocks by IP address, the censor can use DPI to recognize and filter Tor traffic flows even when they connect to unexpected IP addresses. With pluggable transports, censorship against Tor can be bypassed. Not only that. If an attacker can see your traffic, and can see the website you’re visiting, even with a path outside the adversary’s control - they will still be able to correlate the traffic and learn you are visiting the website. If the same connection (the same set of relays) were to be used for a longer period of time a Tor connection could be vulnerable to statistical analysis, which is why the client software changes the entry node every ten minutes.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "705f17877699e62fef01534739c97060",
    "u": "https://ios.tymyrddin.dev/docs/services/vpn",
    "t": "Using VPN services ",
    "c": "Using VPN services  Internet providers are collecting your browsing data and handing this over to third parties (US, UK, Australia, and most of Europe). Public Wi-Fi remains a serious threat with adversaries targeting unsuspecting users. Many streaming services and websites restrict content to certain geographic locations. A VPN allows you to bypass such restrictions (Not always. Some such websites keep blacklists of VPN servers and will still block your traffic). A VPN will encrypt the connection and make the traffic unreadable. VPNs not logging traffic, DNS requests, timestamps, bandwidth, IP address: ProtonVPN , Switzerland NordVPN , Panama Mullvad , Sweden IVPN , Gibraltar Surfshark VPN , Netherlands",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "271f5e34ba1b5e1b73ac1d4291e7e31d",
    "u": "https://ios.tymyrddin.dev/docs/services/email-services",
    "t": "Using more secure email services ",
    "c": "Using more secure email services  Mailfence , Belgium, provides a full suite of services, Messaging, s, Calendars, Groups, and Document storage. It can easily replace the G suite. It is a secure email suite that offers end-to-end encryption (through PGP support) and works with different email clients. There is some logging of IP address and some other data, and the code is not open source. Tutanota , Germany, is a small but serious player among secure email providers. It uses a hybrid encryption system that avoids some drawbacks of PGP, and is protected by the GDPR and other pro-privacy EU regulations. So, it does not work with PGP and there is no way to import existing emails (yet). ProtonMail , Switzerland, uses PGP encryption standards for email and stores all messages and attachments encrypted at rest on Swiss servers. ProtonMail has a unique feature for “self-destructing messages” and they have also added address verification and full PGP support. Articles  Reddit: Court forces mail provider Tutanota to perform a surveillance function Twitter: ProtonMail logging one of its users and providing IP address logs to French authorities Reading that carefully, if the message had already been encrypted and the IP address had been that of a VPN , these cases would not exist.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e995f413478420b22e426b9b73907b50",
    "u": "https://ios.tymyrddin.dev/docs/authentication/unlock",
    "t": "Touch ID and Face ID? ",
    "c": "Touch ID and Face ID?  Touch ID or Face ID to unlock your phone without needing to enter a password (passcode, PIN) is nice, but in some countries biometric authentication methods are not protected the way passwords are. In these countries, law enforcement can not compel someone to enter a password to unlock a device without a search warrant, but they can for Touch ID or Face ID. In addition, for all people in all countries, raw biometrics data in the form of fingerprints, face scans or voice recognition, for example, is analog data until a biometric system converts it to digital data that a computer can then process. That means this data must be stored somewhere. The convenience of biometric authentication is only worthwhile as long as the data being stored remains secure and untapped. For single-user devices, like an iPhone, this data can be stored on the local device. If data is stored somewhere, it could potentially get stolen. If the worst happens and your PIN or password get stolen, you can easily change them. What are you going to do if your fingerprint or Iris scan get stolen? Apple can promise to ensure no one, not even Apple itself, has rights to access the biometric data. Unless the iPhone gets hacked of course. Even if that were extremely hard, identity is the most significant and valuable possession and the protection of it is crucial. Law enforcement and Identity issues aside, while Touch ID and Face ID are convenient, both leave you vulnerable to unwanted unlocks when you are sleeping . Temporarily disable Touch ID or Face ID  Go to Settings -> Emergency SOS . Make sure the Call with Side Button toggle is on (green). Whenever you want to quickly disable Face ID or Touch ID, press the iPhone’s Side button five times. A screen will appear that shows three sliders: power off, Medical ID, and Emergency SOS. Below them will be a cancel button. Once this screen appears, Face ID and Touch ID are automatically disabled, and you’ll only be able to unlock your phone with your passcode (keep in mind, once you unlock it with a passcode, Face ID and Touch ID are reenabled). Disable Touch ID or Face ID permanently  Go to Settings -> Touch ID & Passcode (on an iPhone X, it’s Face ID & Passcode instead). You’ll be prompted to enter your passcode. On the Touch ID & Passcode page (or Face ID & Passcode page on the iPhone X), turn off all the settings in the Use Touch ID For section, iPhone Unlock and Apple Pay and iTunes & App Store . Now, you will only be able to unlock your iPhone, use Apple Pay, or pay for purchases from iTunes and the App Store by entering your passcode. The biggest problem with this is that you are more likely to use a weak passcode for convenience. It is recommended to use a more secure iPhone passcode that combines numbers and letters.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "fd94666ac24f0b4e1bc082559f0c1bea",
    "u": "https://server.tymyrddin.dev/",
    "t": "Hardening Linux server ",
    "c": "Hardening Linux server  The below writeups were initially based on debian 9 hosts, and then later on ubuntu 18.04 LTS, and on CentOS 8. Everything in these writeups will probably also apply to newer versions. If something does not work, check the documentation for your distro and version for what you are trying to do. Securing user accounts Introduction Configuring sudo Disabling root access Locking home directories Configuring password complexity Configuring other password requirements Dangers of the lxd group Audit services Introduction Auditing system services with systemctl Auditing network services with netstat Auditing network services with nmap Firewalls Introduction iptables UFW NFTables FirewallD FireHOL Packet filtering Fail2ban SSHguard Web Application Firewall WAF Port spoofing Encryption technologies Introduction GNU Privacy Guard OpenVPN strongSwan Installing SSH Harden ssh server Key management Jumping hosts Virtual network computing (VNC) Introduction TigerVNC TightVNC Securing sessions Access control Introduction Discretionary access control (DAC) Access control lists (ACL) and shared directory management (SDM) Mandatory access control (MAC) Public key infrastructure (PKI) Introduction Problems Internal PKI Pluggable Authentication Modules (PAM) Let’s Encrypt TLS/SSL Logfiles Introduction Syslog log commands Path of a common intruder Logrotate Centralised logging Guards! Guards! Introduction Samhain Maltrail Incidents Introduction Preventing incidents Using git for configuration management Implementing a backup plan Using bootable recovery media Troubleshooting Overview Authentication error Connection refused",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8aa7dc9e13f51af021194a10aa6c6368",
    "u": "https://server.tymyrddin.dev/docs/firewall/port-spoofing",
    "t": "Port spoofing ",
    "c": "Port spoofing  Scanning software usually tries to determine a service that is running on an open port to identify port numbers on which you are running your services on a system. For delaying reconnaissance phase, spoof all ports to seem to be open and emulate valid services on every port. Any attackers port scan results will become fairly meaningless and it will require hours of effort to accurately identify which ports have real services and which do not. Portspoof is a tool that is meant to be a lightweight, fast, portable and secure addition to any firewall system or security system. Techniques used by Portspoof: All configured TCP ports are always open: returns SYN+ACK for every connection attempt making it difficult to determine if a valid software is listening on a particular port and impractical to use stealth. Every open TCP port emulates a valid services: It has a huge dynamic service signature database, that will be used to generate responses to your adversaries scanning software service probes. Portspoof will respond to every service probe with a valid service signature, that is dynamically generated based on a service signature regular expression database. Portspoof can also be used as an Exploitation Framework Frontend, turning your system into a responsive and aggressive machine for exploiting your attackers’ tools and exploits. Some example exploits can be found in the configuration file portspoof.conf . Limitations: An attacker can still determine if a service is emulated by using a protocol probe (for 65k open ports)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "04d901bddf84d96822458570af0c50ff",
    "u": "https://server.tymyrddin.dev/docs/access/readme",
    "t": "Introduction ",
    "c": "THM Room: Hardening basics Introduction  What?  Configuring access control Why?  Protecting sensitive files and directories by setting proper permissions and ownership, and by using Extended Attributes (xattr). Avoiding security related problems with Set User ID (SUID) and Set Group ID (SGID). How?  Discretionary access control (DAC) Access control lists (ACL) and shared directory management (SDM) Mandatory access control (MAC) Mastering Linux Security and Hardening, Donald A. Tevault, Second Edition",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "bca2d3f5673072305e2c4a2b2f9a4456",
    "u": "https://server.tymyrddin.dev/docs/encryption/harden-ssh",
    "t": "Harden ssh server ",
    "c": "Harden ssh server  Configuration file  Changes to the /etc/ssh/sshd_config file: Root access: Root access has prohibit-password set by default. Deactivate using the root account (change PermitRootLogin prohibit-password to PermitRootLogin no ). There’s a configurationless workaround, by logging in as an ordinary user and becoming root with: $ su - Get rid of passwords: Use SSH keys authentication instead of passwords and deactivate using passwords for authentication ( PasswordAuthentication no ) in the config file. Limit access: Only allow login by certain users or groups (users and groups). This does not improve security directly but in some cases helps in resisting a brute force attack a little longer. Set a custom SSH port: By default, ssh listens on port 22, which is widely known among attackers and security tools/port scanners that launch brute force attacks against it. Though security by obscurity (which is no security), it does help eliminate a lot of noise on port 22. Change it in the config file and close port 22 and punch a hole for the new port in the firewall. Choose a port not in use by another service (woops) Disable X11 forwarding: As admins we are unlikely to use graphic tools, and the X11 protocol was never built with security in mind. It can be used by adversaries to open up a channel to the client and send remote commands. Change X11Forwarding yes to X11Forwarding no in the config file. After changing the /etc/ssh/sshd_config file, restart the ssh server with $ sudo systemctl restart ssh for changes to take effect. Additional security  Use of TCP wrappers: Only do this when all needing access to a server have a static IP address. For example, not on a jump host, but when using nc and routing tables with ProxyCommand for the servers one can jump to from the jump host. TCP wrappers can be made by using two files: /etc/hosts.allow and /etc/hosts.deny Append ALL:ALL to /etc/hosts.deny to deny all connections from unknown hosts. Append sshd : XXX.XXX.XXX.XXX to /etc/hosts.allow for each IP address you wish to allow. Use fail2ban for automatically blacklisting IPs (attempting to brute force the SSH server) with the help of a firewall.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9aafcc19059d395ece44e56f05357f35",
    "u": "https://server.tymyrddin.dev/docs/trouble/ssh-auth-error",
    "t": "Authentication error ",
    "c": "Authentication error  By default, the SSH client verifies the identity of the host to which it connects. If the remote host key is unknown, a user trying to connect is asked to accept it by typing “yes” or “no”. And it may fail. @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that a host key has just been changed. The fingerprint for the ECDSA key sent by the remote host is <redacted>. Please contact your system administrator. Add correct host key in /home/user/.ssh/known_hosts to get rid of this message. Offending ECDSA key in /home/user/.ssh/known_hosts:10 remove with: ssh-keygen -f \"/home/user/.ssh/known_hosts\" -R jumphost ECDSA host key for jumphost has changed and you have requested strict checking. Host key verification failed. ssh_exchange_identification: Connection closed by remote host Besides a MitM attack (Make sure this is not the case from a trusted source. An adversary may be spoofing the host and continuing may give the adversary the information they seek to attack your server), this can also happen after changing a key : edit ~/.ssh/known_hosts file and remove the offending line. In the above example that is line 10. when using ssh on a LAN (where DHCP is used and IP addresses change) when jumping to multiple hosts from a jump host. Bypassing verification (not recommended)  To disable the host key checking and the warnings, set StrictHostKeyChecking no in ~/.ssh/config and UserKnownHostsFile=/dev/null to send the key to a null known_hosts file to avoid future mismatches, and both defeat the intended verification security purpose . For all hosts Host * StrictHostKeyChecking no UserKnownHostsFile=/dev/null For 192.168.0.0/24 Host 192.168.0.* StrictHostKeyChecking no UserKnownHostsFile=/dev/null Even with StrictHostKeyChecking set to no , a user may still be refused to connect when connecting via ProxyJump or ProxyCommand with multiple hosts through a jumphost. ProxyJump issues another ssh process, that does not inherit the command-line arguments that were specified on the command-line of the first ssh command. Host jumphost User jumpuser StrictHostKeyChecking=no UserKnownHostsFile=/dev/null IdentityFile ~/.ssh/id_jumpuser_rsa Get more information on what is happening with the ProxyCommand: ssh -o ProxyCommand=\"ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_jumpuser_rsa -W %h:%p jumpuser@jumphost\" -i ~/.ssh/id_jumpuser_rsa jumpuser@XXX.XXX.XXX.XXX HostKeyAlias  HostKeyAlias specifies an alias that should be used instead of the real host name when looking up or saving the host key in the host key database files. This option is useful for tunnelling SSH connections or for multiple servers running on a single host . It caches the remote public under the alias name. Useful if different openSSH servers are listening on different ports of the same physical server, because normally the port number is not stored when caching public host keys. If the key has a different name (alias) both keys can be cached and valid. Host jumphost HostName XXX.XXX.XXX.XXX User user HostKeyAlias jumphost ProxyCommand ssh anotheruser@backendserver nc %h %p CheckHostIP  And what if there are 2 different host keys for the same IP, or when the IP’s change (DHCP on a LAN for example)? If CheckHostIP is set to yes (default), ssh will check the host IP address in the known_hosts file. This allows ssh to detect if a host key changed due to DNS spoofing. If the option is set to no , the check will not be executed. Host server1 Hostname whatever1.com HostKeyAlias server1 CheckHostIP no Port 22001 User user Host server2 Hostname whatever2.com HostKeyAlias server2 CheckHostIP no Port 22002 User user",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0616552662b98931841c2e9e0354bde9",
    "u": "https://server.tymyrddin.dev/docs/firewall/waf",
    "t": "Web Application Firewall WAF ",
    "c": "Web Application Firewall WAF  A web application firewall (or WAF) filters, monitors, and blocks HTTP traffic to and from a web application. A WAF is differentiated from a regular firewall in that a WAF is able to filter the content of specific web applications while regular firewalls serve as a safety gate between servers. mod_security  The mod_security module is a free Web Application Firewall (WAF) that works with Apache, Nginx and IIS. It supports a flexible rule engine to perform simple and complex operations and comes with a Core Rule Set (CRS) which has rules for SQL injection, cross site scripting, Trojans, bad user agents, session hijacking and a lot of other exploits. For Apache, it is an additional module, easy to install and configure. For Nginx and other web servers there is a stand-alone version.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4aa9cf5e02a623bd00d9a4f4ca313010",
    "u": "https://server.tymyrddin.dev/docs/users/readme",
    "t": "Introduction ",
    "c": "THM Room: Hardening basics Introduction  What?  Securing user accounts through smart configuration of sudo, using complex passwords, disabling root access and locking down home directories. Why?  The principle of least privilege states that each user should only have enough access to perform their daily tasks. How?  Configuring sudo Disabling root access Locking home directories Configuring password complexity Configuring other password requirements Dangers of the lxd group Mastering Linux Security and Hardening, Donald A. Tevault, Second Edition",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "00cf5a9435b916bc7548f880f33afe40",
    "u": "https://server.tymyrddin.dev/docs/pki/pam",
    "t": "Pluggable Authentication Modules (PAM) ",
    "c": "Pluggable Authentication Modules (PAM)  Pluggable Authentication Modules (PAM) is a suite of shared libraries, providing an abstraction layer between the various methods available that provide authentication and the applications that require authentication and would otherwise have to support those methods directly. With PAM, all that is necessary for these components to cooperate is that a specific PAM module be available for each of them. Passwords  Never reuse old passwords ever. . Open /etc/pam.d/common-password : To restrict users from using their old passwords on the same machine, in the auth section, enter the following line: auth sufficient pam_unix.so likeauth nullok If you want to allow a user to reuse his/her password from a number of passwords that were last used, add the following line in the password section: password sufficient pam_unix.so nullok use_authtok md5 shadow remember=3 SSH  The pam_listfile.so module authenticates users based on the contents of a specified file. For example, if username exists in a file /etc/ssh/ssh.allow , ssh will grant login access. Deny access  Append /etc/pam.d/ssh : auth required pam_listfile.so item=user sense=deny file=/etc/ssh/ssh.deny onerr=succeed Add all usernames you wish to deny access for to a /etc/ssh/ssh.deny file. Allow access  Append /etc/pam.d/ssh : auth required pam_listfile.so item=user sense=allow file=/etc/ssh/ssh.allow onerr=fail Add all usernames to allow access for to a /etc/ssh/ssh.deny file. SASL  SASL can use different authentication methods. The default one is PAM (as configured in /etc/conf.d/saslauthd ) Create /etc/pam.d/smtp #%PAM-1.0 auth required pam_unix.so account required pam_unix.so",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b503d7843800d3de1d2610a232d0ade2",
    "u": "https://server.tymyrddin.dev/docs/encryption/gnupg",
    "t": "GNU Privacy Guard ",
    "c": "GNU Privacy Guard  GNU Privacy Guard (GPG) is based on Pretty Good Privacy, the OpenPGP standard. Pretty Good Privacy (PGP) is used widely to encrypt and decrypt email by using asymmetrical and symmetrical systems. When you first send your email, it is encrypted with your own public key, as well as a session key, which is a one-time use random number called a nonce . The session key is then encrypted into the public key and sent with the cipher text. To decrypt your email, the receiving end must use their private key in order to discover the session key. The session key combined with the private key are then used to decrypt the cipher text back into the original document. GPG comes pre-installed on Ubuntu. Its main advantages: Easy encryption for email and files. Mentioned in 2017 by Snowden, referring to 2014, supposedly, then, the NSA could not crack PGP. Asymmetric encryption removes the need to provide a password for decrypting or unlocking files thus improving security overall. Using GPG  To create keys: gpg --gen-key To verify the keys were created: gpg --list-keys Encrypting files with GPG  Symmetric  gpg -c <file> This will prompt the user to enter a passphrase to protect the file. This is not the passphrase you used to create your keys The -d option while targeting our gpg file that was encrypted, will print out the contents of the file after prompting for the secret passphrase. Asymmetric  Asymmetric encryption works by using two keys - one to encrypt, and one to decrypt. The public key is used to encrypt the data while the private key is used to decrypt the data. So using the typical Bob and Alice example, let’s say Bob wants to send Alice an encrypted file. He would first encrypt the file using Alice’s public key and then send the file away. Once Alice receives the file, she can decrypt it with her private key. The big takeaway here is that public keys can be shared, private keys should be kept private and held onto for dear life. NEVER SHARE YOUR PRIVATE KEY! To use the scheme, users need to extract their public keys and send them to each other. Go to the .gnupg folder and extract with: gpg --export -a -o <filename> This will export the user’s public key as ASCII armored output as the filename specified. In order to import the file, (be in .gnupg directory or know the path). gpg --import <filename.txt> To encrypt a document asymmetrically: gpg -e <document> When the other party wishes to decrypt it, he/she will be prompted for his/her passphrase for his/her private key. After entering that he/she is greeted with the text from the file. gpg -d <document>.gpg",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f9dc896153c53990b225d2909e4997d7",
    "u": "https://server.tymyrddin.dev/docs/firewall/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Monitor traffic to and from a host, and only allow legitimate traffic. Why?  Prevent unauthorised remote access, but while a firewall should block backdoor access via a Trojan, there is a chance that this can be bypassed. Block unsuitable or immoral content, but consider the ethics of reading private content to be able to do so. How?  iptables nftables UFW firewalld FireHOL Packet filtering with I/O Control Fail2ban SSHguard WAF Port spoofing Notes  Deny All and then add exceptions to restrict access to everything except the specific services you need to remain open. Avoid using ANY in Allow rules. A rule where the service field is ANY can open up 65,535 attack vectors, I mean, TCP ports. Document all rules and use comments for relevant information (purpose, service, users/servers/devices affected, permanent or temporary, name of person that added it) Review proposed and changed firewall rules before implementation Consider a WAF. Mind that it requires a lot of support work because the defaults are all very strict. Users can not ven make linux documentation pages in a dokuwiki without getting thrown out.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "df519fa87b90827b0edfdb4ac68fde59",
    "u": "https://server.tymyrddin.dev/docs/vnc/tigervnc",
    "t": "TigerVNC ",
    "c": "TigerVNC  TigerVNC is not as lightweight as TightVNC , but it provides extensions for advanced authentication methods and TLS encryption , hence a proper candidate for a fallback when ssh fails. Installation  Install the Xfce desktop environment on the server: # apt-get install xfce4 xfce4-goodies xorg dbus-x11 x11-xserver-utils Install the vnc server: # apt-get install tigervnc-standalone-server tigervnc-common Create a new user to access the server. # useradd vncuser Add the user to the sudo group: # usermod -aG sudo vncuser As the vncuser, run the vncserver command to create the initial configuration and set up the password. Do not use sudo. $ vncserver You will require a password to access your desktops. Password: Verify: Would you like to enter a view-only password (y/n)? n /usr/bin/xauth: file /home/vncuser/.Xauthority does not exist New 'debian9.localdomain:1 (vncuser)' desktop at :1 on machine debian9.localdomain Starting applications specified in /etc/X11/Xvnc-session Log file is /home/vncuser/.vnc/debian9.localdomain:1.log Use xtigervncviewer -SecurityTypes VncAuth -passwd /home/vncuser/.vnc/passwd :1 to connect to the VNC server. Configuration  Default for the service is on port 5901 (display port :1 ). Stop the service: $ vncserver -kill :1 Make a backup of the xstartup file: $ mv ~/.vnc/xstartup ~/.vnc/xstartup.old Create a new xstartup file and open it (empty file): $ vi ~/.vnc/xstartup To have VNC read the server user’s .Xresources file and launch Xfce (in the background), append: #!/bin/sh unset SESSION_MANAGER unset DBUS_SESSION_BUS_ADDRESS exec startxfce4 Write and quit file, and (as root) make it executable. # chmod u+x ~/.vnc/xstartup Restart the service: $ vncserver Firewall  Open ports in the firewall for inbound communication. Control  For starting, stopping, and restarting the service, create a new (empty) systemd unit file /etc/systemd/system/vncserver@.service # vi /etc/systemd/system/vncserver@.service The @ symbol will allow for passing an argument (the VNC display port). Append: [Unit] Description=Remote desktop service (VNC) After=syslog.target network.target [Service] Type=simple User=vncuser PAMName=login PIDFile=/home/%u/.vnc/%H%i.pid ExecStartPre=/bin/sh -c '/usr/bin/vncserver -kill :%i > /dev/null 2>&1 || :' ExecStart=/usr/bin/vncserver :%i -geometry 1280x800 -alwaysshared -fg ExecStop=/usr/bin/vncserver -kill :%i [Install] WantedBy=multi-user.targetReload systemd manager configuration # systemctl daemon-reload Enable the unit file # systemctl enable vncserver@1.service Kill the vncserver $ vncserver -kill :1 And start it as any other systemd service. $ sudo systemctl start vncserver@1 Verify $ sudo systemctl status vncserver@1 Clients  Linux: xvnc4viewer Configuration resources  TigerVNC",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5e2a19851b9ec675864a435d1aec5e88",
    "u": "https://server.tymyrddin.dev/docs/services/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Never have anything that you don’t absolutely need installed on a server. Especially not any unnecessary network services. Why?  Do not give adversaries extra ways to get into the systems. How?  Auditing system services with systemctl Auditing network services with netstat Auditing network services with nmap Mastering Linux Security and Hardening, Donald A. Tevault, Second Edition",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "230b5e9e61df79f9727abf25a72e0224",
    "u": "https://server.tymyrddin.dev/docs/vnc/secure-sessions",
    "t": "Securing sessions ",
    "c": "Securing sessions  TLS  Start the VNC server with: # vncserver -SecurityTypes=VeNCrypt,TLSVnc On the client, connect with vncviewer: $ vncviewer -SecurityTypes=VeNCrypt,TLSVnc XXX.XXX.XXX.XXX:1 With TLSVnc, there is standard VNC authentication and traffic is encrypted with GNUTLS but the identity of the server is not verified. TigerVNC also supports other security schemes such as X509Vnc. X509  X509 combines standard VNC authentication with GNUTLS encryption and server identification, and is the recommended mode for a secure connection. Do not set SecurityTypes on the server to a non-encrypted option as high-priority (such as None, VncAuth, Plain, TLSNone, TLSPlain, X509None, X509Plain) because then it is not possible to use encryption. When running vncviewer, it is safer to explicitly set SecurityTypes and not accept any unencrypted traffic. Any other mode is to be used only when accessing a vncserver via SSH tunnels. SSH  On the server install ssh. On the client: $ ssh -L 5901:127.0.0.1:5901 -C -N -l vncuser XXX.XXX.XXX.XXX The -L switch specifies binding port 5901 of the remote connection to port 5901 on the local machine (client), -C enables compression, -N specifies there will be no remote command, and -l the remote login name.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d85a985b8eb633d043dc2b4780415f18",
    "u": "https://server.tymyrddin.dev/docs/users/homes",
    "t": "Locking home directories ",
    "c": "Locking home directories  This is another area where different Linux distribution families are different from each other. Each distribution family comes with different default security settings. A security administrator who oversees a mixed environment of different Linux distributions will need to take this into account. The UMASK line is in the login.defs file for all Linux distributions, but Red Hat-type distributions are the only ones that have UMASK set to a restrictive value of 077 by default, which removes all permissions from the group and others. Other distros set it to 022 by default, which creates home directories with a permissions value of 755 . This allows everybody to enter everybody else’s home directories and access each others’ files. Red Hat and CentOS  Red Hat Enterprise Linux and all of its descendants have better out-of-the-box security than any other Linux distribution. One thing that’s already been done is locking down users’ home directories. By default, the useradd utility on Red Hat-type systems creates user home directories with a permissions setting of 700 . Only the user who owns the home directory can access it. The UMASK is set in /etc/login.defs . CREATE_HOME yes UMASK 077 Debian and Ubuntu  Debian and its offspring, such as Ubuntu, have two user creation utilities: useradd and adduser . useradd  Using useradd : sudo useradd -m -d /home/username -s /bin/bash username Otherwise, username would have no home directory and would be assigned the wrong default shell. Home directories are wide open, with execute and read privileges for everybody. cd /home sudo chmod 700 * To change the default permissions setting for home directories, open /etc/login.defs and change UMASK 022 to UMASK 077 . Now, new users’ home directories will get locked down on creation, just as they do with Red Hat. adduser  The adduser utility is an interactive way to create user accounts and passwords with a single command, which is unique to the Debian family of Linux distributions. Most of the default settings that are missing from the Debian implementation of useradd are already set for adduser. The only thing wrong with the default settings is that it creates user home directories with the wide-open 755 permissions value. 777 is the numerical equivalent of rwxrwxrwx in Linux, subtracting that from the UMASK of 022 , you get the resulting permissions that will be set on a user’s home directory and files. Change the UMASK to 077 in /etc/login.defs .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f11d2a745a20faf20877cb4d2025fb31",
    "u": "https://server.tymyrddin.dev/docs/access/acl",
    "t": "Access control lists (ACL) and shared directory management (SDM) ",
    "c": "Access control lists (ACL) and shared directory management (SDM)  With access control list (ACL), we can allow only a certain person to access a file, or we can allow multiple people to access a file with different permissions for each person. To view an ACL for a file or directory: getfacl <file> Creating an ACL  For setting an ACL, remove all permissions from everyone except for the user of the file. That’s because the default permissions settings allow members of the group to have read/write access, and others to have read access. chmod 600 <file> To allow a user or a group to have any combination of read, write, or execute privileges: setfacl -m u:<username>:rw <file> -m modify or create an ACL. u:username:r : user’s name, followed by another colon, and the list of permissions to grant this user. In this case, read and write access. Set an ACL for group access by replacing u: with g: . Creating an inherited ACL for a directory  To have all files that get created in a shared directory use the same ACL: setfacl -m d:u:<username>:r <directory> Using an ACL mask  Remove an ACL from a file or directory with the -x option: setfacl -x u:<username> <file> The -x option removes the entire ACL. To remove permissions with a mask, in this case read permission: setfacl -m m::r <file> m::r sets a read-only mask on the ACL. Other permissions stay intact. Preventing the loss of ACLs during a backup  When using tar to create a backup and then doing a restore, the ACL’s are gone. Use the --acls option: tar cJvf directory_backup.tar.xz dir/ --acls User groups  To create a group: sudo groupadd <groupname> Adding members when creating user accounts, on CentOS: sudo useradd -G <groupname> <username> on Debian/Ubuntu: sudo useradd -m -d /home/<username> -s /bin/bash -G <groupname> <username> And assign a password. To add an existing user to a group (CentOS and Debian families): sudo usermod -a -G <groupname> <username> Adding users to a group by editing the /etc/group file: ... <groupname>>:x:1005:<list of comma separated usernames> ... This method is extremely handy for when you need to add lots of members to a group at the same time. Creating a shared directory  sudo mkdir <directoryname> The new directory belongs to the root user and has a permissions setting of 755 , which permits read and execute access to everybody and write access only to the root user. To allow only members of a specific group to access the directory, change ownership and group association, and then set the permissions: sudo chown nobody:<groupname> <directoryname> sudo chmod 770 <directoryname> Setting the SGID bit and the sticky bit on the shared directory (it is safe and useful to set SGID on a shared directory): sudo chmod 2770 <directoryname> But now users in the group can delete each other’s files. When the sticky bit is set on files, Linux just ignores it, whereas for directories it has the effect of preventing users from deleting or even renaming the files it contains unless the user owns the directory, the file, or is root. sudo chmod o+t <directoryname> To set the sticky bit in octal form, prepend the number 1 to the current (or desired) basic permissions. Since the SGID bit has a value of 2000, and the sticky bit has a value of 1000, we can just add the two together to get a value of 3000 to add to the permissions: sudo chmod 3770 <directoryname> Having the sticky bit set will prevent group members from deleting anybody else’s files.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1c5a85eade4241a538fa53c4d231fe37",
    "u": "https://server.tymyrddin.dev/docs/ids/samhain",
    "t": "Samhain ",
    "c": "Samhain  The Samhain host-based intrusion detection system (HIDS) provides file integrity checking, log file monitoring/analysis, rootkit detection, port monitoring, detection of rogue SUID executables, and hidden processes. Like having tripwire when it was still working plus rkhunter rolled into one. Plus, it can be expanded to include more (remote) clients if set up in client-server mode and getting Beltane II as well (not GPL licensed and can be used on a limited amount of (10) machines for a small donation). Something that can maybe be used for guarding client machines remotely. Yum. Problems  A steeper learning curve than for other programs. No binaries available, setting it up is not easy for non-techies Download  Download samhain-current.tar.gz from Samhain Labs . Verification  cd Downloads/ $ gunzip samhain-current.tar.gz $ tar -xf samhain-current.tar $ gpg --keyserver pgp.mit.edu --recv-key 0F571F6C gpg: key 1AAD26C80F571F6C: 3 duplicate signatures removed gpg: key 1AAD26C80F571F6C: 96 signatures not checked due to missing keys gpg: key 1AAD26C80F571F6C: \"Rainer Wichmann <rwichmann@la-samhna.de>\" not changed gpg: key 3A2AAE330F571F6C: 21 signatures not checked due to missing keys gpg: key 3A2AAE330F571F6C: \"Rainer Wichmann <rwichmann@la-samhna.de>\" not changed gpg: Total number processed: 2 gpg: unchanged: 2 $ gpg --fingerprint 0F571F6C pub dsa1024 1999-10-31 [SCA] EF6C EF54 701A 0AFD B86A F4C3 1AAD 26C8 0F57 1F6C uid [ unknown] Rainer Wichmann <rwichmann@la-samhna.de> uid [ unknown] Rainer Wichmann <rwichmann@hs.uni-hamburg.de> sub elg1024 1999-10-31 [E] pub rsa1024 2014-07-21 [SCEA] [revoked: 2016-08-16] 5B17 5A1C 8C1B 7BC3 CB12 0FAA 3A2A AE33 0F57 1F6C uid [ revoked] Rainer Wichmann <rwichmann@la-samhna.de> [nina@archlinux Downloads]$ gpg --verify samhain-4.2.4.tar.gz.asc samhain-4.2.4.tar.gz gpg: Signature made Thu 21 Dec 2017 09:05:24 PM CET gpg: using DSA key 1AAD26C80F571F6C gpg: Good signature from \"Rainer Wichmann <rwichmann@la-samhna.de>\" [unknown] gpg: aka \"Rainer Wichmann <rwichmann@hs.uni-hamburg.de>\" [unknown] gpg: WARNING: This key is not certified with a trusted signature! gpg: There is no indication that the signature belongs to the owner. Primary key fingerprint: EF6C EF54 701A 0AFD B86A F4C3 1AAD 26C8 0F57 1F6C And that fits with the key given on the site. Simple configuration stand-alone  Configure stand-alone version : $ ./configure checking for a BSD-compatible install... /usr/bin/install -c checking whether make sets $(MAKE)... yes checking build system type... x86_64-unknown-linux-gnu checking host system type... x86_64-unknown-linux-gnu checking for gcc... gcc . . . [snip] . . . config.status: creating deploy.sh config.status: creating config.h config.status: executing default commands samhain has been configured as follows: System binaries: /usr/local/sbin Configuration file: /etc/samhainrc Manual pages: /usr/local/man Data directory: /var/lib/samhain Database file: /var/lib/samhain/samhain_file PID file: /run/samhain.pid Log file: /var/log/samhain_log Base key: 1617215581,281009996 Selected rc file: samhainrc.linux $ Configuration for watching logins, mounts and rootkits  Watching over logins: $ ./configure --enable-login-watch Over mountings: ./configure --enable-mount-check Samhain can check for kernel rootkits on FreeBSD and Linux with: $ ./configure --with-kcheck=systemmap where systemmap is the System.map file for a particular system. Configuration for stealth  If an intruder cannot discover that samhain is running, he cannot compromise it. You can, for example, use: $ ./configure --enable-install-name=somename where somename is an innocuous-sounding executable name. To make it less likely that the program isn’t accidentally discovered, samhain can be set to never respond to the command line. Or, it can be set to respond to the command line only after a certain password is given: $./configure --enable-nocl=somepass If somepass is set to an empty string it disables command-line interaction completely. Otherwise, invoke samhain with somepass as the first argument followed by the other arguments. There are many other interesting stealth options available, all documented along with the rest of the compilation switches in Appendix A of the documentation . Build  Next step is to Build : $ make gcc -I. -o depend-gen ./src/depend-gen.c update depend.dep ... gcc -I. -o mkhdr ./src/mkhdr.c gcc -I. -o encode ./src/encode.c encode 0 config.h ./encode 0 ./src/sh_files.c --> x_sh_files.c gcc -DHAVE_CONFIG_H -I. -I./include -O2 -D_FORTIFY_SOURCE=2 -fstack-protector-all -pthread -DUSE_MALLOC_LOCK=1 -fPIE -Wall -W -fno-strength-reduce -fno-omit-frame-pointer -Wno-empty-body -Wno-invalid-source-encoding -DSH_STANDALONE -o sh_files.o -c x_sh_files.c . . . [snip] . . . sh_string.o sh_inotify.o dnmalloc.o sh_audit.o sh_registry.o sh_ipvx.o sh_restrict.o sh_filetype.o sh_sub.o sh_fInotify.o sh_checksum.o sh_guid.o sh_sem.o sh_dbIO.o sh_dbCheck.o sh_dbCreate.o -lz -lresolv -lnsl -lnsl -lattr -lacl gcc -I. -o sstrip ./src/sstrip.c $ Installation  Install : $ make install /usr/bin/install -c -m 700 samhain /usr/local/sbin/samhain /usr/bin/install: cannot create regular file '/usr/local/sbin/samhain': Permission denied chmod: cannot access '/usr/local/sbin/samhain': No such file or directory make: *** [Makefile:518: install-program] Error 1 Ah yes, installing an application and using ./configure without the --prefix= option, the make install process will install the compiled files in to the predefined paths in the system’s file system, and that means special permissions for writing the files is required: $ sudo make install [sudo] password for nina: /usr/bin/install -c -m 700 samhain /usr/local/sbin/samhain /bin/sh ./mkinstalldirs /usr/local/man/man8 mkdir /usr/local/man/man8 /bin/sh ./mkinstalldirs /usr/local/man/man5 mkdir /usr/local/man/man5 /usr/bin/install -c -m 644 ./man/samhain.8 /usr/local/man/man8/samhain.8 /usr/bin/install -c -m 644 ./man/samhainrc.5 /usr/local/man/man5/samhainrc.5 gcc -DHAVE_CONFIG_H -I. -I./include -O2 -D_FORTIFY_SOURCE=2 -fstack-protector-all -pthread -DUSE_MALLOC_LOCK=1 -fPIE -Wall -W -fno-strength-reduce -fno-omit-frame-pointer -Wno-empty-body -Wno-invalid-source-encoding -DSH_STANDALONE -DSH_IDENT=\\\"daemon\\\" -DTRUST_MAIN -DSL_ALWAYS_TRUSTED=0 -o trustfile ./src/trustfile.c mkdir /var/lib/samhain ./samhain-install.sh --destdir= --express --verbose install-data cp samhainrc.linux samhainrc cp samhainrc samhainrc.pre mv -f samhainrc.pre samhainrc.install ./samhain-install.sh --install-sh -m 600 samhainrc.install /etc/samhainrc checking whether paths are trustworthy configuration file /etc/samhainrc ... OK state directory /run ... OK state directory /var/log ... OK data directory /var/lib/samhain ... OK You can use 'samhain-install.sh uninstall' for uninstalling i.e. you might consider saving that script for future use Use 'make install-boot' if you want samhain to start on system boot Customisation  Customize : $ sudo vi /etc/samhainrc I will run with defaults for now, and make changes later. Initialisation  Initialize the baseline database ( do NOT do twice ): $ samhain -t init [snip] CRIT : [2018-03-04T22:01:33+0100] interface=<lstat>, msg=<No such file or directory>, userid=<0>, path=</var/lib/urandom/random-seed> CRIT : [2018-03-04T22:01:33+0100] msg=<POLICY MISSING>, path=</var/lib/urandom/random-seed> MARK : [2018-03-04T22:01:33+0100] msg=<File check completed.>, time=<593>, kBps=<9067.752000> NOTICE : [2018-03-04T22:01:33+0100] msg=<Finished writing baseline database.> ALERT : [2018-03-04T22:01:33+0100] msg=<EXIT>, program=<Samhain>, status=<exit_success> Aaaaand a sheitload of errors and garble passed by on my screen for about ten minutes, including all kinds of critical issues on missing files and policies. This was on a worst-case linux, an archlinux halfway in the making (by me), and to be expected. I be reading them logs then. :D Usage  Run samhain : $ samhain -t check...",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "401b8190c4e25ae1a89f62efdd801abc",
    "u": "https://server.tymyrddin.dev/docs/users/passwords",
    "t": "Configuring password complexity ",
    "c": "Configuring password complexity  NIST has come to agree with Bill Burr’s changed mind and have now changed their password implementation criteria to match Mr. Burr’s new recommendations: Passphrases do not meet any complexity criteria, and use dictionary words. How is that secure? It is a phrase with distinct words separated by blank spaces. That makes it secure and very difficult to brute-force. Passphrases are more difficult to crack than traditional passwords, and they are easier for users to remember. And, there is the reality that many organizations are still using complex passwords that regularly expire, and you’ll have to abide by their rules if you can’t convince them otherwise. And besides, if you are using traditional passwords, you do want them to be strong enough to resist any sort of password attack. Pwquality  pwquality is a PAM module that allows configuring password complexity requirements for users. It is fairly easy to install on Ubuntu. sudo apt-get install libpam-pwquality Once installed, it automatically adds an entry into the /etc/pam.d/common-password file. The pam.d directory is just another location where PAM adds files for basic services like ssh , basic login , etc. The pwquality.conf file found in /etc/security , has many options the administrator can set for password quality. The lines just need to be uncommented and modified. Resources  You Might Not Need Complex, Alphanumeric Passwords After All The New NIST Guidelines: We Had it All Wrong Before",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "98afa3056fd07053498c95b6bf9b0c6c",
    "u": "https://server.tymyrddin.dev/docs/pki/lets-encrypt",
    "t": "Let’s Encrypt ",
    "c": "Let’s Encrypt  Web PKI being yet another golden goose in the context of the business model that underpins the digital world. , we also have an alternative. Let’s Encrypt is a free, automated, and open Certificate Authority. The below is for debian (stretch). Installation certbot  Certbot is in active development, so the packages provided by Debian with stable releases tend to be outdated. Get a more up-to-date package by enabling the backports repository. Create the /etc/apt/sources.list.d/letsencrypt.list file and append: # echo 'deb http://deb.debian.org/debian <distribution>-backports main contrib non-free' >> /etc/apt/sources.list.d/letsencrypt.list # echo 'deb-src http://deb.debian.org/debian <distribution>-backports main contrib non-free' >> /etc/apt/sources.list.d/letsencrypt.list Update the package list to pick up the new repository’s package information: # apt update Install on Nginx with: # apt install python-certbot-nginx -t <distribution>-backports Get SSL certificate  Get a certificate and have Certbot edit your Nginx configuration automatically to serve it, turning on HTTPS access in a single step. # certbot --nginx Verification  Check the /etc/letsencrypt/live/<your-domain>/ directory for the presence of cert.pem , privkey.pem and chain.pem . Certbot looks for a server_name directive that matches your domain. Open the server block file for your domain: # vi /etc/nginx/sites-available/yourdomain.tld If necessary, change the server_name directive to: server_name yourdomain.tld www.yourdomain.tld; Verify the syntax of your configuration file: # nginx -t Reload Nginx to load the new configuration: # systemctl reload nginx Firewall  Punch a hole in the firewall to allow HTTPS traffic (allow the Nginx Full profile) and delete the redundant Nginx HTTP profile allowance. Auto renewal  Certbot comes with a renew script in /etc/cron.d that will renew your certificates automatically before they expire (they last for 90 days). Test automatic renewal: # certbot renew --dry-run Configuration resources  Certbot instructions , EFF",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a7c610ca928d678ffe31fca44e269e18",
    "u": "https://server.tymyrddin.dev/docs/logfiles/log-commands",
    "t": "log commands ",
    "c": "log commands  Less, more and zmore  # less /var/log/syslog less opens the syslog log file at the top. Use the arrow keys to scroll down one line at a time, the space bar to scroll down one page at a time, or the mouse wheel to scroll through the file. Use the [Shift]+[g] combination to immediately go to the end of the log file. Grep and zgrep  # grep \"user@whateverdomain.tld\" /var/log/mail.log > /tmp/result.txt zgrep is useful for compressed files: # zgrep -i Error *.gz Tail  tail prints the last part of files to output, for example the last 10 lines with the -n option. Adding the -f option will continue watching the log file and print out the next line written to the file. As soon as a new line is written to syslog, it removes the oldest. # tail -f -n 10 /var/log/syslog Escape it with the [Ctrl]+[x] key combination. Last and lastb  The last command reads from the system file called /var/log/wtmp or the file designated by the -f option. Names of users and tty’s can be given, in which case last will show only those entries matching the arguments. Names of tty’s can be abbreviated, thus last 0 is the same as last tty0 . When last catches a process signal like SIGINT (generated by the interrupt key, usually control-C) or a SIGQUIT (generated by the quit key, usually control-\\), last will show how far it has searched through the file; in the case of the SIGINT signal, last will then terminate. For the login history of sysadmin: # last | grep sysadmin To find out when the system was last rebooted: # last reboot lastb is the same as last , except that by default it shows a log of the file /var/log/btmp , which contains all the bad login attempts. dmesg  dmesg displays by default all messages from the kernel ring buffer. Use the scroll wheel to browse through the buffer or pipe the output of dmesg to the less command. For example, to print the log entries for the user facility: # dmesg --facility=user | less",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0ce29b9aeed5f95a4e86803e38bb2bcd",
    "u": "https://server.tymyrddin.dev/docs/logfiles/intruder-path",
    "t": "Path of a common intruder ",
    "c": "Path of a common intruder  Scenario  Assume an intruder gains access to the system through a vulnerability. Most likely, he/she wishes to gain elevated privileges in order to be able to take action, like install software, get user data that can possibly give access to other servers or systems, destroy or alter audit trails to hide tracks of having been there, etc. This can be done by installing malware (a rootkit) or manually. Assume he/she is successful. Note that there are more than zero users with uid=0 (superuser privileges)| Less likely but possible, the intruder creates a user without password. Note a new user has been created He or she will try to capture information of other computers on the same network (in particular users and passwords). This can be done with a sniffer. Note that a network interface is put into promiscuous mode. Binaries of the sniffer, configuration files, captured information are usually hidden in the /dev directory. Note regular files appearing in /dev A somewhat more knowledgeable intruder will try to modify certain binaries of the system to conceal the indicators of their presence ( su to not let on to elevated privileges, ifconfig to hide that the network interface is in promiscuous mode, ls to hide where their files are, ps to conceal the execution of the sniffer, find, netstat, top, etc). FIA’s can detect these alterations Important events for reconstructing an attack  Logging off and logging in (location) User and group management (changes in permissions and ability to gain access) Security policy changes Shutdowns and restarts System changes: Changes to the operating system (hardware and/or software events, configuration changes) Changes to hardware configuration Device driver installation Starting and stopping of services Applications: Many utilities send messages to application related logs Exceptions to this are web servers and FTP servers (have their own logging mechanisms, but can be included in syslog ) Accounts and group record changes: Creation, deletion and modification of users Modifications to groups",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "45d514489b18b4f5874d0f910dab7101",
    "u": "https://server.tymyrddin.dev/docs/vnc/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Virtual network computing, or VNC, is a graphical desktop sharing system that uses the Remote Frame Buffer protocol (RFB) to allow for controlling a server remotely. A VNC server transfers keyboard and mouse events, and displays the remote host’s screen via a network connection (relaying the graphical screen updates back). Servers are best set up as minimal environment, and installing GUI might lead to high hardware utilization. Virtual Network Computing (VNC) is a graphical desktop sharing system to remotely control another computer. Why?  In our context, only to be used as a fallback when ssh fails. How?  TightVNC TigerVNC Securing sessions Notes  VNC is not an encrypted protocol and can be subject to packet sniffing. Sessions can be secured: TightVNC is lightweight and connections will be smooth and stable even on slower internet connections. SSH tunnelling can be used. TigerVNC supports security schemes such as X509 that combines standard VNC authentication with GNUTLS encryption and server identification. <=",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ffcf9816017dbdcdc6bbfbc41f5c218d",
    "u": "https://server.tymyrddin.dev/docs/firewall/nftables",
    "t": "NFTables ",
    "c": "NFTables  Available upstream since Linux kernel 3.13. Basic idea  Got an idea! Working on it … Warning: untested! flush ruleset table inet filter { set inet filter tcp_port_out { type inet_service; elements = { 53, # DNS 11371, # OpenPGP HTTP Keyserver 2200, # SSH 80, # HTTP 443, # HTTPS } } set inet filter tcp_port_in { type inet_service; elements = { 2200, # SSH } } set inet filter udp_port_out { type inet_service; elements = { 53, # DNS 123, # NTP } } set inet filter udp_port_in { type inet_service; elements = { } } set inet filter user_out { type uid; elements = { } } set inet filter user_in { type uid; elements = { } } set tcp_scan_ports { type inet_service; elements = { 22, # SSH 23, # Telnet 1433, # MS SQL Login 8080, # HTTP Alternate 50661, # Apple Xsan } } set udp_scan_ports { type inet_service; elements = { 53, # DNS 5060, # SIP 53413, # Netis backdoor } } chain base_checks { # allow established/related connections ct state {established, related} accept # early drop of invalid connections ct state invalid log prefix \"Invalid \" drop } chain input { type filter hook input priority 0; # Accept on localhost iifname lo accept jump base_checks # Accept neighbour discovery ip6 nexthdr icmpv6 icmpv6 type { nd-neighbor-solicit, nd-router-advert, \\ nd-neighbor-advert } accept # Accept ping ip protocol icmp type { echo-request } accept # Allow IGMP ip protocol igmp accept tcp dport @tcp_port_in ct state new accept udp dport @udp_port_in ct state new accept meta skuid @user_in ct state new accept tcp dport @tcp_scan_ports drop udp dport @udp_scan_ports drop # Count and drop any other traffic counter log prefix \"Drop_in \" drop } # Not a gateway. We do not forward. chain forward { type filter hook forward priority 0; policy drop; jump base_checks } chain output { type filter hook output priority 0; # Accept from localhost oifname lo accept jump base_checks # Accept neighbour discovery ip6 nexthdr icmpv6 icmpv6 type { nd-neighbor-solicit, nd-router-advert, \\ nd-neighbor-advert } accept # Accept ping ip protocol icmp type { echo-request } accept tcp dport @tcp_port_out ct state new accept udp dport @udp_port_out ct state new accept meta skuid @user_out ct state new accept # Count and drop any other traffic counter log prefix \"Drop_out \" drop } kernel  [*] Networking support ---> Networking options ---> [*] Network packet filtering framework (Netfilter) ---> Core Netfilter Configuration ---> <M> Netfilter nf_tables support <M> Netfilter nf_tables conntrack module <M> Netfilter nf_tables counter module <M> Netfilter nf_tables log module <M> Netfilter nf_tables limit module <M> Netfilter nf_tables masquerade support <M> Netfilter nf_tables nat module IP: Netfilter Configuration ---> <M> IPv4 nf_tables support <M> IPv4 nf_tables route chain support <M> IPv4 packet rejection <M> IPv4 NAT <M> IPv4 nf_tables nat chain support <M> IPv4 masquerade support <M> IPv4 masquerading support for nf_tables Configuration files  Create a main table, for example A file /etc/nftables/main_config.conf where elements can be added A file /etc/nftables/main.conf with a skeleton inet table Set up the activation scripts /etc/nftables.conf as startup script (flushes rule set) /etc/nftables/reload_main.conf as reload script (deletes table) SSHguard  To integrate with SSHguard , edit /etc/sshguard.conf and change the value of BACKEND : BACKEND=\"/usr/lib/sshguard/sshg-fw-nft-sets\" When starting or enabling the sshguard.service , two new tables named sshguard in the ip and ip6 address families are added which filter incoming traffic through sshguard’s list of IP addresses. The chains in the sshguard table have a priority of -10 and will be processed before other rules of lower priority.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "790f5a899ae9c454c96e353c14aa69a8",
    "u": "https://server.tymyrddin.dev/docs/encryption/openvpn",
    "t": "OpenVPN ",
    "c": "OpenVPN  Installation  # apt-get install openvpn Server configuration  The sample server configuration file that comes with OpenVPN is a good starting point. It will create a VPN using a virtual tun network interface (for routing), will listen for client connections on udp port 1194 , and distribute virtual addresses to connecting clients from the 10.8.0.0/24 subnet. # cd /etc/openvpn/server # cp /usr/share/openvpn/examples/server.conf . # vi /etc/openvpn/server/server.conf The server will start as root, but for security, can be set to drop to lower privileges after startup, by removing the semicolons (uncommenting) the user nobody and group nogroup directives. Also uncomment out the client-to-client directive if you want clients to not only be able to reach the server over VPN (the default), but also each other. Set the ca , cert , key , and dh parameters in the config file to point to the files generated in the PKI setup . If you have set the DH key size to 2048 instead of the default 1024, change dh dh1024.pem accordingly. For assigning the different clients static IP addresses from the OpenVPN server, uncomment client-config-dir ccd Enabling compression is not recommended; it opens the server up to the VORACLE attack vector. It is recommended to use OpenVPN over UDP, because TCP over TCP is a bad idea. Write and quit. Assign static IP addresses  Create the client configuration directory: # mkdir /etc/openvpn/ccd For each client, create a configuration file assigning it to a static IP address. For example: In /etc/openvpn/ccd/<clientname1> ifconfig-push 10.8.0.5 10.8.0.6 The first client will use 10.8.0.6 as its IP address, and 10.8.0.5 is the VPN tunnel endpoint. The second address is only used to route traffic through the tunnel. This is because each client uses a CIDR/30 network. Per client 4 IP addresses are used. In /etc/openvpn/ccd/<clientname2> ifconfig-push 10.8.0.9 10.8.0.10 And in /etc/openvpn/ccd/<clientname3> ifconfig-push 10.8.0.13 10.8.0.14 To use a virtual IP address range other than 10.8.0.0/24 , modify the server directive. Mind that the virtual IP address range must be a private range currently unused on the network. Firewall server  Limit the incoming OpenVPN connections to the IP addresses of the servers you want the backend server to connect with in the firewall. Start the OpenVPN server  # systemctl openvpn start Client configurations  On a client: Copy the example client configuration file # cd /etc/openvpn/client/ # cp /usr/share/openvpn/examples/client.conf . # vi /etc/openvpn/client.conf Make changes: Add the address of the OpenVPN server to the configuration file: Look for remote my-server-1 1194 and change my-server-1 into the IP address of the server. Look for cert client.crt and key client.key and change them to the names of the keys that were copied over. Firewall client  Punch a hole for the server address in your firewall. Fire it up!  # systemctl openvpn start",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2485ece87355ee5023d46b3c03bec24e",
    "u": "https://server.tymyrddin.dev/docs/vnc/tightvnc",
    "t": "TightVNC ",
    "c": "TightVNC  TightVNC is a fast and lightweight remote control package. This choice will ensure that our VNC connection will be smooth and stable even on slower internet connections. It encrypts VNC passwords sent over the net (DES-encrypted challenge-response scheme and the password is limited by 8 characters), but the rest of the traffic is sent in the clear and are a security risk. Recommended is using TightVNC with ssh (and that defeats our purpose of only using it when ssh fails) Installation  Install the Xfce desktop environment on the server: # apt-get install xfce4 xfce4-goodies Install the vnc server: # apt-get install tightvncserver Create a new user to access the server. # useradd vncuser Add the user to the sudo group: # usermod -aG sudo vncuser As the vncuser, set up a secure password and create the initial configuration files: vncuser@localhost $ vncserver You will require a password to access your desktops. Password: Verify: Creating default startup script /home/vncuser/.vnc/xstartup Starting applications specified in /home/vncuser/.vnc/xstartup Log file is /home/vncuser/.vnc/localhost.localdomain:1.log Enter and verify a password to access the server remotely. It must be between six and eight characters long. More than 8 characters will be truncated automatically. The process then creates the necessary default configuration files and connection information for the server. Configuration  Default for the service is on port 5901 (display port :1 ). Stop the service: $ vncserver -kill :1 Make a backup of the xstartup file: $ mv ~/.vnc/xstartup ~/.vnc/xstartup.old Create a new xstartup file and open it (empty file): $ vi ~/.vnc/xstartup To have VNC read the server user’s .Xresources file and launch Xfce (in the background), append: #!/bin/bash xrdb $HOME/.Xresources startxfce4 & Write and quit file, and (as root) make it executable. # chmod +x ~/.vnc/xstartup Restart VNC: $ vncserver Firewall  Open ports in the firewall for inbound communication. Control  For starting, stopping, and restarting the service, create a new (empty) systemd unit file /etc/systemd/system/vncserver@.service # vi /etc/systemd/system/vncserver@.service The @ symbol will allow for passing an argument (the VNC display port). Append: [Unit] Description=Start TightVNC server at startup After=syslog.target network.target [Service] Type=forking User=vncuser Group=vncuser WorkingDirectory=/home/vncuser PIDFile=/home/vncuser/.vnc/%H:%i.pid ExecStartPre=-/usr/bin/vncserver -kill :%i > /dev/null 2>&1 ExecStart=/usr/bin/vncserver -depth 24 -geometry 1280x800 :%i ExecStop=/usr/bin/vncserver -kill :%i [Install] WantedBy=multi-user.target Reload systemd manager configuration # systemctl daemon-reload Enable the unit file # systemctl enable vncserver@1.service Kill the vncserver $ vncserver -kill :1 And start it as any other systemd service. $ sudo systemctl start vncserver@1 Verify $ sudo systemctl status vncserver@1 Clients  Windows: TightVNC, RealVNC, or UltraVNC. MacOS: Apple Remote or RealVNC. Linux: vinagre, krdc, RealVNC, or TightVNC. Configuration resources  TightVNC",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e879fe1c9d9bc31e710fb0acbd9e7f41",
    "u": "https://server.tymyrddin.dev/docs/incidents/prevention",
    "t": "Preventing incidents ",
    "c": "Preventing incidents  Use the principle of least privilege . The idea is to give users as few permissions as possible. While the sudo command is useful, it is often misused. By default, anyone that is a member of the sudo group can use sudo to do whatever they want. Restrict sudo access to particular commands. In regard to network shares, it’s always best to default to read-only whenever possible. This is not just because of the chance of a user accidentally deleting data; it’s always possible for applications to malfunction and delete data as well. With a read-only share, the modification or deletion of files is not possible. Additional read-write shares can be created for those who need them, but if possible, always default to read-only. Physical security is every bit as important as securing operating systems, applications, and data. Ensure security updates are installed in a timely fashion, utilizing security applications such as failure monitors and firewalls, and ensuring secure settings for OpenSSH.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c28590bcea6bb8bd483e139bb30ad1e3",
    "u": "https://server.tymyrddin.dev/docs/incidents/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  A good incident response plan will include a list of guidelines to be followed with regard to implementing new servers and managing current ones (isolating compromised servers, strategically patching and recovering servers). Create guidelines for things such as user management, server management, application installations, security, and procedure documents. Why?  We always do our best to design the most stable and fault-tolerant server implementations we possibly can. We can not prevent every type of incident that could possibly happen but having a good plan in place and following that plan will lessen the likelihood an incident becomes a disaster. How?  Preventing incidents Using git for configuration management Implementing a backup plan Using bootable recovery media Notes  Do not store backups or old versions of software on the production system. Automate making backups. Mastering Ubuntu Server, Jay LaCroix, Fourth Edition",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "95d3a27393444a24400ba6800acb21ef",
    "u": "https://server.tymyrddin.dev/docs/logfiles/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Server logs contain information that cannot be found anywhere else. For example, server errors and user access records. Why?  Having the ability to review these logs gives the ability to determine what caused an issue on the server. How?  rsyslogd Log commands Path of a common intruder Logrotate Centralised logging Notes  Make sure logs are working properly. syslog on Debian contains everything except authentication-related messages. Authentication related events can be found in auth.log . Use it to investigate failed login attempts, brute-force attacks and other vulnerabilities related to user authorisation mechanisms. RedHat and CentOS based systems use the secure file for tracking all security related messages including authentication failures, sudo logins, ssh logins and other errors logged by the system security services daemon and is very useful for detecting hacking attempts. Additional logs that may give clues are faillog containing information on failed login attempts and can be used to detect attempted security breaches involving username/password hacking and brute-force attacks. Normally I am all for distributed and decentralised systems, but for an infrastructure with multiple servers, centralised logging saves a lot of time and energy. When setting up a machine to act as log server, harden it and only use it to collect logs from other machines on your network. It should not be running anything else. Log what is needed to track the path of a common intruder . If and when it is all running well, consider setting up for intrusion detection and log correlation.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d7db2b4d3470b6d526b682e7c02c6e78",
    "u": "https://server.tymyrddin.dev/docs/pki/tls-ssl",
    "t": "TLS/SSL ",
    "c": "TLS/SSL  The CA is always the first subsystem to be configured; every other subsystem depends on the CA for its configuration. The CA, along with setting up the CA hierarchy for the PKI, issues certificates which every subsystem uses to function and sets up a security domain which establishes trusted relationships between subsystems. Installation  On all systems and subsystems install openssl. # apt-get install openssl Use the script that comes with the openssl package: # /usr/lib/ssl/misc/CA.pl -newca The script will take you through all the steps of creating your CA. The fields do not matter much. It is rather self-explanatory. Configuration  The script has created a new directory demoCA with the CA’s private key and public key/certificate in it. Demo useful. # vi /etc/ssl/openssl.cnf Change: dir = /etc/ssl/ca ... default_days = 730 default_bits = 2048 Edit the script too: # vi /usr/lib/ssl/misc/CA.pl Change: $DAYS=\"-days 730\"; # 2 year $CADAYS=\"-days 3650\"; # 10 years ... default_bits = 2048 And change (further down): system (\"$REQ -new -keyout \" . to system (\"$REQ -newkey rsa:2048 -keyout \" . Generating keys  For creating digital certificates for servers on your LAN, for VPN clients or for whatever service you need to use with SSL, two steps are needed: To create a private key and a certificate request (Many questions. Not important, except that the CN of the certificate must be the domain name of the site you wish to secure): # /usr/lib/ssl/misc/CA.pl -newreq Sign the request and generate a newcert.pem with the signed certificate. You will have to enter the password for your CA key which you supplied when creating the CA key, certificate and store. # /usr/lib/ssl/misc/CA.pl -sign The certificate’s key has a passphrase assigned during the -newreq phase. If you want your software to be able to autostart this won’t work. To remove a passphrase: # openssl rsa -in newkey.pem -out newkey.nopass.pem Rename newkey.pem and newcert.pem to something useful, like hostname.key and hostname.cert . Configuration resources  OpenSSL PKI Tutorial v1.1 Building a Root CA and an Intermediate CA using OpenSSL and Debian Stretch",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5c7f02a776f445962324450dcfb7f440",
    "u": "https://server.tymyrddin.dev/docs/firewall/pf",
    "t": "Packet filtering ",
    "c": "Packet filtering  PF is a packet filtering tool with simple syntax, user-friendliness, and extensive features. The packet filtering takes place in the kernel. A pseudo-device, /dev/pf , allows userland processes to control the behaviour of the packet filter ( ioctl interface). There are commands to enable and disable a filter, load rule sets, add and remove individual rules or state table entries, and retrieve statistics. The most commonly used functions are covered by pfctl . Configuration resources  OpenBSD Handbook Packet Filter",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7b89826a04dd3131264722bfb7878414",
    "u": "https://server.tymyrddin.dev/docs/firewall/fail2ban",
    "t": "Fail2ban ",
    "c": "Fail2ban  Note: Fail2Ban can reduce the rate of incorrect authentications attempts but cannot eliminate the risk weak authentication presents. Installation  Installing fail2ban package in Debian: # apt-get install fail2ban Check it was properly installed: # fail2ban-client -h Configuration  To configure fail2ban, make a local copy of the jail.conf file in /etc/fail2ban : # cd /etc/fail2ban # cp jail.conf jail.local Edit the file: # vi jail.local Set the IPs you want fail2ban to ignore (the list of clients that are not subject to the fail2ban policies), the ban time (in seconds) and maximum number of user attempts: [DEFAULT] # \"ignoreip\" can be an IP address, a CIDR mask or a DNS host ignoreip = 127.0.0.1 bantime = 3600 maxretry = 3 Jails are the rules which fail2ban apply to a given application/log. To enable log monitoring for Nginx login attempts, enable the nginx-http-auth jail: [nginx-http-auth] enabled = true filter = nginx-http-auth port = http,https logpath = /var/log/nginx/error.log maxretry = 6 For apache: [apache] enabled = true port = http,https filter = apache-auth logpath = /var/log/apache*/*error.log maxretry = 6 To tweak or add log filters, see the files in /etc/fail2ban/filter.d . Restart fail2ban. Test  To test fail2ban, look at the iptable rules before and after attempting to log in to a service that fail2ban is monitoring from another machine and look at the iptable rules to see if that IP source gets added: # iptables -L Usage  To check if an IP is banned (in Nginx): $ sudo fail2ban-client status nginx-naxsi To unban an IP address: $ sudo fail2ban-client set nginx-naxsi unbanip xxx.xxx.xxx.xxx To see all jails: $ sudo fail2ban-client status [sudo] password for nina: Status |- Number of jail: 25 `- Jail list: http-get-dos, nginx-noscript, proftpd, WP-Login-POST, nginx-login, spam-log, wppingback, postfix-sasl, nginx-conn-limit, nginx-proxy, nginx-auth, block-scanners, nginx-naxsi, nginx-badbots, BASH, sshd, pam-generic, named-refused-udp, postfix, WP-Login, ssh-ddos, wordpress, webmin-auth, dovecot, ssh Note for Apache  Fail2ban scans log files like /var/log/apache/error_log , /var/log/auth.log and /var/log/apache/access.log and temporarily or persistently bans failure-prone addresses by updating existing firewall rules. Out of the box Fail2Ban comes with filters for various services (apache, courier, ssh, etc).",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "92ae258b797328e0d65cc2e9781b5526",
    "u": "https://server.tymyrddin.dev/docs/pki/problems",
    "t": "Problems ",
    "c": "Problems  PKI is failing by trying to be all things to all people and things. PKIs have experienced a hype and many companies and organizations announced to provide certification services to the general public. Only a few of these have succeeded and actually provide certification services that can be taken seriously. X.509 standard  X.509 is a complex standard and X.509 certificates are complex data structures with a lot of fields, many of which are critical and/or non-critical extension fields. Complex technology is not easy to deploy on a large-scale. Since Peter Gutmann from Auckland University published the X.509 Style Guide in 2000, little has improved. X.509 certificates are specified with ASN.1 and the resulting data structures are not very meaningful for humans (and hard to parse). The X.509 specification is scattered across many standards, drafts and amendments from multiple standard bodies, leading to confusion and numerous profiles that lack interoperability. Parts of the standard, even some that are related to key elements, are underspecified. That leads to ambiguity, unknown semantics and interoperability issues, like the country code, date/time formats in validity or path validation. Technical  Public key pairs must be generated in an efficient and secure (centralized or decentralized) way, and require a cryptographically strong pseudo-random bit generator, something which is not always available to end-users. Private keys must be securely stored in a personal security environment (and not a vulnerable endpoint), and for Web PKI public CA’s certificates must be made publicly available in a certificate repository or directory service. Hierarchical trust models are dangerous, because they provide a single point of attack. Alternative models (for example the mesh model) are poorly scalable in time and in space. Certificate authorities (CA’s) have to periodically send out a list of certificates that have been revoked (CRL’s), meaning that a user will not only have to get the corresponding certificates from the certification chain, but will also have to check that those certificates are not in the CRL. The definition and maintenance of a global name space is not as simple in practice. Cross-certification does not work in practice because competition is rule. Economical  The establishment and operation of a top CA requires large investments. One needs protection from adversaries trying to break into the facility, intercepting electromagnetic signals, and exploitation of other weaknesses of the used hardware and software, and one needs qualified personnel able to withstand all of the regulation and bureaucratic stuff. The ROI of a top CA is difficult to determine and quantify. Like many other infrastructure components, public key certificates do not provide a specific function in and of themselves, but provides only the means to secure functions and applications of other infrastructures. IOW, business cases for PKI’s are extremely hard to make. That part got solved, with some scary stuff happening, web PKI next in the chain, and hosting companies (re)selling certificates. Juridical  If a digital signature is generated according to some digital signature law, then somebody must be made liable if something goes wrong. If that is the Credential service provider (CSP), the insurance protection must be taken into account in a business case. As Bruce Schneier pointed out in Secrets and Lies , CA’s usually limit their liability to the protection of their private key. As the CA plays the role of a trusted third party users of certificates are put at a disadvantage. CA’s are like a notary who would only be liable to keep his stamp secure. Nothing changed much there either. The owner of a public key certificate cannot repudiate a signature that is generated with the appropriate signing key, which may lead to the situation in which a certificate owner may be held liable and accountable for statements that are digitally signed with the proper key, even if he or she does not know (and does not agree) with the statements. Social  In the real world, trust is based on two-way relationships and experiences that have been made over time. This can only insufficiently be modelled with hierarchical certificate models. Poor usability is a common feature of many products that employ (public key) cryptography. Secure cryptographic solutions and usability seem mutually exclusive. But then, there is not much focus on end users and UX design in general. What’s new? The users of public key cryptography are often not aware of the vulnerabilities and pitfalls. Privacy and security  X.509 uses features from other standards, like DNs from X.500 which are in itself complex and have little value and provides unanticipated attack vectors. SSL in the context of web browsers used to be target of several successful attacks, either directly on SSL (e.g. SSL renegotiation bug), the combination of https and http (SSL Strip), URL-forgery, and X.509-based attacks on ASN.1 and DN-parsing. Integration of PKI with the surrounding environment (end points, web applications) may allow compromise. Should a private key be compromised, an attacker would have access to data intended for the recipient. Attackers that gain access to private keys can also eavesdrop on content intended for a recipient and decrypt data as it’s collected. This is the biggest threat to the PKI system, because compromised keys require new keys to be issued, and old ones revoked. There is no easy, fast and effective method to revoke a root certificate. Anything less that a full compromise of the root key will tempt a CA to downplay the incident and revoke only certain certificates. This occurred with the DigiNotar-Hack, because the revocation of the root-CA would have interrupted the operation of many services. Revocation services are suspect to DoS-attacks. CAs are included in browsers by OS- and browser vendors without a common consistent policy. To be included in the trust store the vendor has to pay a fee. Only Microsoft requires a formal audit. As a result there is a sufficient number of weak and very weak CAs that are included in default certificate stores. In addition there is suspicion in the security community that governments use compelled certificates to tap Internet communication. Clients certificates and their attributes have zero security value, because there are CAs that do not validate the attributes including attributes with arbitrary OIDs (P. Gutmann). Some certificate stores contain funny root certificates that should be excluded on any serious security review. Alternatives  A variety of alternative approaches, ranging from simple workarounds to designing the application to sidestep PKI’s shortcomings, can help solve the problems inherent in the standard X.509 model. For example, in simple public key infrastructure (SPKI) and simple distributed security infrastructure (SDSI), keys are not bound to identities, but to roles or authorisations and names only have to be unique locally. Resources  PKI interoperability: Still an issue? A solution in the X.509 realm , Ahmad Samer Wazan Romain Laborde, François Barrere, Abdelmalek Benzekri, David W Chadwick, 2017 Why have public key infrastructures failed so far? , Javier Lopez, Rolf Oppliger, Gunther Pernu, 2005 PKI: It’s Not Dead, Just Resting , Peter Gutmann, 2002 The Emperor’s New Clothes: The Shocking Truth  Digital Signatures and Internet Commerce , Jane K. Winn, 2001 X.509 Style Guide, Peter Gutmann , 2000",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "43d8aedb9740b5cce9e491449c8e9bf8",
    "u": "https://server.tymyrddin.dev/docs/access/mac",
    "t": "Mandatory access control (MAC) ",
    "c": "Mandatory access control (MAC)  Mandatory Access Control (MAC) is a type of Access Control. It goes along with Discretionary Access Control, Role Based Access Control, and Rule Based Access Control. MAC is considered the strongest form of access control due to allowing more control over who has access over what. In a Linux system, there are multiple ways to implement MAC. Two of which being SELinux and AppArmor. SELinux  SELinux is a free open source software project that was developed by the U.S. National Security Agency. While it can theoretically be installed on any Linux distribution, Red Hat-type distributions are the only ones that come with it already set up and enabled. It uses code in Linux kernel modules, along with extended filesystem attributes, to help ensure that only authorised users and processes can access either sensitive files or system resources. There are three ways in which SELinux can be used: It can help prevent intruders from exploiting a system. It can be used to ensure that only users with the proper security clearance can access files that are labeled with a security classification. In addition to MAC, SELinux can also be used as a type of role-based access control. AppArmor  AppArmor is the MAC system that comes installed with the SUSE and the Ubuntu families of Linux. Although it’s designed to do pretty much the same job as SELinux, its mode of operation is substantially different: SELinux labels all system processes and all objects such as files, directories, or network ports. For files and directories, SELinux stores the labels in their respective inodes as extended attributes. (An inode is the basic filesystem component that contains all information about a file, except for the filename.) AppArmor uses pathname enforcement, which means that you specify the path to the executable file that you want AppArmor to control. This way, there’s no need to insert labels into the extended attributes of files or directories. With SELinux, you have system-wide protection out of the box. With AppArmor, you have a profile for each individual application. With either SELinux or AppArmor, you might occasionally find yourself having to create custom policy modules from scratch, especially if you’re dealing with either third-party applications or home-grown software. With AppArmor, this is easier, because the syntax for writing AppArmor profiles is much easier than the syntax for writing SELinux policies. And AppArmor comes with utilities that can help you automate the process. Just as SELinux can, AppArmor can help prevent malicious actors from ruining your day and can help protect user data. The AppArmor directory is located at /etc/apparmor.d . This directory contains all the AppArmor profiles. The sbin.dhclient and usr.* files are AppArmor profiles. The abstractions directory is a sort of “includes” folder that has partially written profiles that can be used and included in custom profiles. Part of the work has already been done. Additional profiles can be installed with: sudo apt install apparmor-profiles apparmor-profiles-extra",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "046648d4934643901a204f6789f5cab5",
    "u": "https://server.tymyrddin.dev/docs/firewall/iptables",
    "t": "iptables ",
    "c": "iptables  iptables is not the name of Linux’s firewall. It is just one way of interacting with netfilter which every Linux distribution comes with. As such, iptables is a command line utility for configuring the Linux kernel firewall implemented within the Netfilter project. And it gets complex rather quickly which increases the risk of making mistakes. For a bare metal server running only a dedicated application, such as a Schleuder list, iptables is the simplest (and minimalistic) choice. For Ubuntu, it comes with the Uncomplicated Firewall ( ufw ), which is an easy-to-use frontend for iptables. As of CentOS version 7, FirewallD replaces iptables as default. The four components of iptables  iptables has 4 different components to it that all come together to give the utility its overall functionality: Filter table - offers the basic protection that you’d expect a firewall to provide Network Address Translation table - connects the public interwebs to the private networks Mangle table - for mangling them packets as they go through the firewall Security table - only used by SELinux Install and enable IPTables  In case it is not installed and you wish to install it: # yum install iptables-services Start the service: # systemctl start iptables # systemctl start iptables6 Enable automatic start on system boot # systemctl enable iptables # systemctl enable iptables6 Check iptables service status # systemctl status iptables # systemctl status iptables6 Chains  INPUT - packets coming into the firewall FORWARD - packets routed to another NIC on the network; for packets on the local network that are being forwarded on. OUTPUT - packets going out of the firewall Rules  Status command  To list rules -L showing interface name, rule options, TOS masks, packet and byte counters -n , and IP address and port in numeric format without using DNS to resolve names -v : # iptables -L -n -v With line numbers (important for deleting or inserting new rules into the firewall): # iptables -n -L -v --line-numbers To display INPUT or OUTPUT chain rules: # iptables -L INPUT -n -v # iptables -L OUTPUT -n -v --line-numbers Deleting a rule  To delete line number 4 using -D to delete one or more rules from the selected chain: # iptables -D INPUT 4 Inserting a rule  # iptables -L INPUT -n --line-numbers Chain INPUT (policy DROP) num target prot opt source destination 1 DROP all -- xxx.xxx.xxx.1 0.0.0.0/0 2 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state NEW,ESTABLISHED Inserting a rule between 1 and 2: # iptables -I INPUT 2 -s xxx.xxx.xxx.2 -j DROP Gives: # iptables -L INPUT -n --line-numbers Chain INPUT (policy DROP) num target prot opt source destination 1 DROP all -- xxx.xxx.xxx.1 0.0.0.0/0 2 DROP all -- xxx.xxx.xxx.2 0.0.0.0/0 3 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state NEW,ESTABLISHED Saving the rules  For saving the rules so they can be loaded at every reboot (you need to have iptables-persistent installed) # iptables-save > /etc/iptables/rules.v4 # ip6tables-save > /etc/iptables/rules.v6 Stop/Restart  Some distros like CentOS have installed a service called iptables to start and stop the firewall and a configuration file to configure it. For all other distros, iptables is a command, not a service. If you edited the configuration file manually, you have to reload iptables. Or load it directly through iptables: # iptables-restore < /etc/iptables/iptables.rules Usage  To deny all incoming and allow all outgoing connections ON A BARE METAL MACHINE where you have ACCESS TO THE CONSOLE: # Set default chain policies iptables -P INPUT DROP iptables -P FORWARD DROP iptables -P OUTPUT ACCEPT # Accept on localhost iptables -A INPUT -i lo -j ACCEPT iptables -A OUTPUT -o lo -j ACCEPT # Allow established sessions to receive traffic iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT SSH  For SSH access (-I inserts it before all other rules in INPUT): # iptables -I INPUT -p tcp --dport 22 -j ACCEPT If your SSH service is listening on another port, use that port instead of 22. OpenVPN  Create an iptables rule for NAT forwarding. An example (assuming the interface to forward to is named eth0): # iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE If the server cannot be pinged through the VPN, rules to open up TUN/TAP interfaces to all traffic may be needed: # iptables -A INPUT -i tun+ -j ACCEPT # iptables -A FORWARD -i tun+ -j ACCEPT # iptables -A INPUT -i tap+ -j ACCEPT # iptables -A FORWARD -i tap+ -j ACCEPT Set up rules for accepting connections from the OpenVPN port (default 1194) and through the physical interface, and make the changes permanent. SMTP Secure Sockets Layer  With SMTP Secure Sockets Layer (SSL) enabled, allow connections to port 587 (similar for 465). Add the rule for this port: # iptables -I INPUT 2 -p tcp --dport 587 -j ACCEPT Add the POP and IMAP ports and their secure counterparts: # iptables -I INPUT 3 -p tcp --dport 110 -j ACCEPT # iptables -I INPUT 4 -p tcp --dport 143 -j ACCEPT # iptables -I INPUT 5 -p tcp --dport 993 -j ACCEPT # iptables -I INPUT 6 -p tcp --dport 995 -j ACCEPT Save the iptables rules and restart iptables.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4b4c9c8b914e5d29f5b83b3a52376968",
    "u": "https://server.tymyrddin.dev/docs/firewall/ufw",
    "t": "UFW ",
    "c": "UFW  ufw is a program for managing a netfilter firewall with ease. It uses a command-line interface consisting of a small number of simple commands. Installation  On the backend server, install Uncomplicated Firewall (UFW) for configuring iptables. # apt-get install ufw Control  Start and enable: # systemctl start ufw # systemctl enable ufw Usage  To deny all incoming and allow all outgoing connections: # ufw default allow outgoing # default deny incoming SSH  # ufw allow ssh/tcp Or if you have changed port: # ufw allow <port>/tcp Nginx HTTP  # ufw allow 'Nginx HTTP' Nginx HTTPS  To allow HTTPS traffic, allow the Nginx Full profile and delete the redundant Nginx HTTP profile allowance: # ufw allow 'Nginx Full' # ufw delete allow 'Nginx HTTP' Logging  # ufw logging on OpenVPN  For openvpn: # vi /etc/default/ufw To allow ufw forwarding (VPN) traffic, append: DEFAULT_FORWARD_POLICY=\"ACCEPT\" Write and quit. Change /etc/ufw/before.rules : # NAT (Network Address Translation) table rules *nat :POSTROUTING ACCEPT [0:0] # Allow traffic from clients to the interface -A POSTROUTING -s 10.8.0.0/24 -o interface -j MASQUERADE # Optionally duplicate this line for each subnet if your setup requires it -A POSTROUTING -s 10.8.1.0/24 -o interface -j MASQUERADE # do not delete the \"COMMIT\" line or the NAT table rules above will not be processed COMMIT # Don't delete these required lines, otherwise there will be errors *filter ... Write and quit. Open the chosen openvpn port (default 1194/udp): # ufw allow 1194/udp Reload/restart ufw: # ufw reload",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "62e007e849431769363e8bca2a580393",
    "u": "https://server.tymyrddin.dev/docs/incidents/backup",
    "t": "Implementing a backup plan ",
    "c": "Implementing a backup plan  Backups are one of those things that some people don’t seem to take seriously until it’s too late. Data loss can be a catastrophic event for an organisation, so it’s imperative that you implement a solid backup plan. There’s no one best backup solution, since it all depends on what kind of data you need to secure, and what software and hardware resources are available to you. This may mean that you’ll need to make some compromises, such as creating regular snapshots of your database server’s storage volume or regularly dumping a backup of your important databases to an external storage device. The rsync utility is one of the most valuable pieces of software around to server administrators. It allows us to do some really wonderful things. In some cases, it can save us quite a bit of money. For example, online backup solutions are wonderful in the sense that we can use them to store off-site copies of our important files. And depending on the volume of data, they can be quite expensive. With rsync , we can back up our data in much the same way, with not only our current files copied over to a backup target but also differentials. If we have another server to send the backup to, even better. sudo rsync -a /home /backup Where the -a option, the archive mode, is a wrapper option that includes the following options all at the same time: -rlptgoD To point rsync to another server, rather than to another directory on the local server: sudo rsync -av /home/myuser admin@IP_ADDRESS:/backup By default, rsync copies data between two locations, but it doesn’t remove anything. With the --delete option, you can synchronise two points, telling rsync to make them the same by allowing it to delete files in the target that are no longer in the source. Incremental backups  sudo rsync -avb --delete --backup-dir=/backup/incremental /src /target Copying files from /src to /target , but now sending replaced files to the /backup/incremental directory. This means that when a file is going to be replaced on the target, the original file will be copied to /backup/incremental . This works because we used the -b option (backup) and the --backup-dir option, which means that the replaced files will not be renamed; they’ll simply be moved to the designated directory. This allows us to effectively perform incremental backups. Using the Bash shell to make incremental backups work even better: CURDATE=$(date +%m-%d-%Y) sudo rsync -avb --delete --backup-dir=/backup/incremental/$CURDATE /src /target Simple script  \"\"\" Simple backup script which just creates the root structure in an other folder and syncs everything which recursively lies within one of the source folders. For files bigger than a threshold they are first gziped.\"\"\" import argparse import gzip import os import shutil import sys import threading def parse_input (): parser = argparse . ArgumentParser () parser . add_argument ( '-target' , nargs = 1 , required = True , help = 'Target Backup folder' ) parser . add_argument ( '-source' , nargs = '+' , required = True , help = 'Source Files to be added' ) parser . add_argument ( '-compress' , nargs = 1 , type = int , help = 'Gzip threshold in bytes' , default = [ 100000 ]) # no input means show me the help if len ( sys . argv ) == 1 : parser . print_help () sys . exit () return parser . parse_args () def size_if_newer ( source , target ): # If newer it returns size, otherwise it returns False src_stat = os . stat ( source ) try : target_ts = os . stat ( target ) . st_mtime except FileNotFoundError : try : target_ts = os . stat ( target + '.gz' ) . st_mtime except FileNotFoundError : target_ts = 0 # The time difference of one second is necessary since subsecond accuracy # of os.st_mtime is striped by copy2 return src_stat . st_size if ( src_stat . st_mtime - target_ts > 1 ) else False def threaded_sync_file ( source , target , compress ): size = size_if_newer ( source , target ) if size : thread = threading . Thread ( target = transfer_file , args = ( source , target , size > compress )) thread . start () return thread def sync_file ( source , target , compress ): size = size_if_newer ( source , target ) if size : transfer_file ( source , target , size > compress ) def transfer_file ( source , target , compress ): \"\"\" Either copy or compress and copies the file \"\"\" try : if compress : with gzip . open ( target + '.gz' , 'wb' ) as target_fid : with open ( source , 'rb' ) as source_fid : target_fid . writelines ( source_fid ) print ( 'Compress {} ' . format ( source )) else : shutil . copy2 ( source , target ) print ( 'Copy {} ' . format ( source )) except FileNotFoundError : os . makedirs ( os . path . dirname ( target )) transfer_file ( source , target , compress ) def sync_root ( root , arg ): target = arg . target [ 0 ] compress = arg . compress [ 0 ] threads = [] for path , _ , files in os . walk ( root ): for source in files : source = path + '/' + source threads . append ( threaded_sync_file ( source , target + source , compress )) # sync_file(source, target + source, compress) for thread in threads : thread . join () if __name__ == '__main__' : arg = parse_input () print ( '### Start copy ####' ) for root in arg . source : sync_root ( root , arg ) print ( '### Done ###' )",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "515df808ba646b11fd5dda53057ac3e8",
    "u": "https://server.tymyrddin.dev/docs/users/disable-root",
    "t": "Disabling root access ",
    "c": "Disabling root access  Disabling the root login shell  When creating a virtual private server on a cloud service (Rackspace, DigitalOcean, Vultr), the cloud service will have you log in to that virtual machine as the root user. (Even with Ubuntu). The first thing that you will want to do is to create a normal user account and give it full sudo privileges. Then, log out of the root account and log back in with the normal user account, and disable the root account: sudo passwd -l root Disabling root SSH login  To disable the root SSH login, set #PermitRootLogin to no in /etc/ssh/sshd_config.conf . Disabling root using PAM  The PAM is “a powerful suite of shared libraries used to dynamically authenticate a user to applications (or services) in a Linux system”. The PAM settings are controlled by the conf file in /etc/pam.d or /etc/pam.conf . $ sudo vim /etc/pam.d/sshd OR $ sudo vim /etc/pam.d/login !!! WARNING !!! Editing the /etc/pam.d/* or /etc/pam.conf files can lock you out of your system. Add this rule in both files: auth required pam_listfile.so \\ onerr=succeed item=user sense=deny file=/etc/ssh/deniedusers auth : is the module type (or context). required : is a control-flag that means if the module is used, it must pass or the overall result will be fail, regardless of the status of other modules. pam_listfile.so : is a module which provides a way to deny or allow services based on an arbitrary file. onerr=succeed : module argument. item=user : module argument which specifies what is listed in the file and should be checked for. sense=deny : module argument which specifies action to take if found in file, if the item is NOT found in the file, then the opposite action is requested. file=/etc/ssh/deniedusers : module argument which specifies file containing one item per line. Next, create the file /etc/ssh/deniedusers and add the name root in it: $ sudo vim /etc/ssh/deniedusers Save the changes and close the file, then set the required permissions on it: $ sudo chmod 600 /etc/ssh/deniedusers From now on, the above rule will tell PAM to consult the /etc/ssh/deniedusers file and deny access to the SSH and login services for any listed user. Resources  How to Configure and Use PAM in Linux",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "210b3551e3bb184057550445304f8042",
    "u": "https://server.tymyrddin.dev/docs/services/systemctl",
    "t": "Auditing system services with systemctl ",
    "c": "Auditing system services with systemctl  On Linux systems that come with systemd , the systemctl command is pretty much a universal command. To view the status of services: sudo systemctl -t service --state=active With: -t service : We want to view information about the services – or, what used to be called daemons – on the system. --state=active : This specifies that we want to view information about all the system services that are actually running. This command shows the status of every service that’s running on your system. Generally, you do not want to see much information, although you might at times. Candidates for removal  Depending on what the server is for: smbd and nmbd indicates a Samba Process. Do you really need to export smb share on windows or other machine? telnet for bidirectional interactive text-oriented communication over internet or local area network? rlogin to log in to another host over network? rexec to execute shell commands on a remote computer. ftp to transfer files from one host to another host over Internet? automount to mount different file systems automatically to bring up network file system? named to run NameServer (DNS)? lpd to print to the server. inetd ? If you are running standalone applications like ssh which uses other standalone application like mysql , Apache , etc. then you don’t need inetd. portmap , an Open Network Computing Remote Procedure Call (ONC RPC) which uses rpc.portmap and rpcbind . If these processes are running, you are running NFS server. Really? NFS server is running unnoticed? Stop and disable  To stop a service, then prevent it from restarting at reboot: sudo systemctl stop <service> sudo systemctl disable <service> Example: sudo systemctl stop smbd sudo systemctl disable smbd",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "42e33c9f2848bdec00d57e3bd26d66dc",
    "u": "https://server.tymyrddin.dev/docs/logfiles/rsyslogd",
    "t": "Syslog ",
    "c": "Syslog  The rsyslogd service is a system utility providing support for message logging. Support of both internet and unix domain sockets enables this utility to be used for remote and local logging. Rsyslog is a multi-threaded implementation of syslogd. It is by default installed on Ubuntu, Debian, OpenSUSE and CentOS, next to systemd’s journald. A combined audit system for linux Allows for local and remote log collection. Remote logging makes day-to-day maintenance and incident response easier, log storage more secure, auditing more effective and analysis easier across multiple platforms. Allows for a single point of management Controlled per device in /etc/syslog.conf All reported messages are collected in a message file Log replication can copy the audit data to multiple remote-logging hosts It is recommended to also setup logrotate and compression. Setting it up  Set up a separate server for only logging purposes. Keep it in a secure location behind a (physical) firewall. Have no unnecessary services running on it. Delete all other user accounts. Add two snort boxes (IDS) that are actually syslog servers (yet have no IP address) and copy each packet intended for syslog server. With two boxes doing that independently from one another, court cases can be very convincingly supported. Thank you, Dean Bushmiller, that is a very, very good idea . Promiscuous mode Rule: Only listen for this IP address on this port (of syslog server) Server  Installation  # apt install rsyslog Start the service, enable it to auto-start at boot and check status: # systemctl start rsyslog # systemctl enable rsyslog # systemctl status rsyslog Configuration  Configuring rsyslog involves setting up input sources (where rsyslog receives logs), and destination rules for where and how logs are written. Rsyslog uses RainerScript for its configuration syntax. # vi /etc/rsyslog.conf By default, rsyslog uses the imjournal (importing structured log messages from systemd journal) and imusock modules (accepting syslog messages from applications running on the local system via Unix sockets). To configure it as a network and central logging server, the protocol (either UDP or TCP or both) it will use for remote syslog reception and the port it listens on must be configured. $ModLoad imudp $UDPServerRun <port> $ModLoad imtcp $InputTCPServerRun <port> Define the # rules for processing the remote logs . There be Templates . $template RemoteLogs,\"/var/log/remote/%HOSTNAME%/%PROGRAMNAME%.log\" *.* ?RemoteLogs & ~ Gather and write the received remote messages to distinct logs under /var/log/remote/ , based on the hostname client machine name and remote client application that generated the messages as defined in the RemoteLogs template. Record messages from all applications at all severity levels using the RemoteLogs template configuration. Stop processing the messages once it is written to a file. If not set, it would be written to the local files. OR for example, for allowing all hosts (but not applications) in a subnet XXX.XXX.XXX.XXX/24 to log to the machine, using only UDP. $ModLoad imudp $UDPServerRun <port> $AllowedSender UDP, XXX.XXX.XXX.XXX/24 $template RemoteStore, \"/var/log/remote/%HOSTNAME%/%timegenerated:1:10:date-rfc3339%\" :source, !isequal, \"localhost\" -?RemoteStore :source, isequal, \"last\" ~ Write and quit. Restart rsyslog daemon: # systemctl restart rsyslog Clients  Install rsyslog , and edit /etc/rsyslog.conf : *.* @XXX.XXX.XXX.XXX:<port> Configuration resources  rsyslog Configuring remote syslog from Unix/Linux and BSD/macOS Configuring remote syslog from Windows",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f637fbc5b318c3b6891cdbe0f3a52b35",
    "u": "https://server.tymyrddin.dev/docs/incidents/git",
    "t": "Using git for configuration management ",
    "c": "Using git for configuration management  One of the most valuable assets on a server is its configuration. This is second only to the data the server stores. Often, when we implement new technology on a server, we’ll spend a great deal of time editing configuration files all over the server to make it work as best as we can. This can include any number of things, from Apache virtual host files to DHCP server configuration, DNS zone files, and more. If a server were to encounter a disaster from which the only recourse was to completely rebuild it, the last thing we’d want to do is re-engineer all of this configuration from scratch. This is where Git comes in. Git isn’t just useful for software engineers. It is also a good tool we can leverage for keeping track of configuration files on our servers, for documentation, and for developing guidelines. When we make configuration changes, we can push the changes back to our Git server. If for some reason we need to restore the configuration after a server fails or is compromised via the config files, we can simply download configuration files from Git back onto the (new) server. Another useful aspect of this approach is that if an administrator implements a change to a configuration file that breaks a service, we can simply revert to a known working commit, and we’ll be immediately back up and running. Install git : sudo apt install git On the server, create a directory to host the repositories. For example, /git : sudo mkdir /git Modify this directory to be owned by the administrative user you use on your Ubuntu servers. Typically, this is the user that was created during the installation of the distribution. Use any user you want, just make sure the user is allowed to use OpenSSH to access the Git server. Change the ownership of the /git directory, so it is owned by this user. sudo chown lela:lela /git Create a Git repository in the /git directory. For Apache, a bare repository, a skeleton of a Git repository that does not contain any useful data, just some default configuration to allow it to act as a Git folder. To create the bare repository, cd into the /git directory and execute: git init --bare apache2 Initialized empty Git repository in /git/apache2/ On the client (the server that houses the configuration you want to place under version control), copy this bare repository by cloning it. To set that up, create a /git directory on the Apache server (or whatever kind of server you’re backing up) just as we did before. Then, cd into that directory and clone the repository: git clone IP_ADDRESS:/git/apache2 Replace the IP_address with either the IP address of the Git server or its hostname (if you’ve created a DNS entry for it). warning: You appear to have cloned an empty repository Make a backup of the current /etc/apache2 directory on the web server, in case we make a mistake while converting it to being version controlled: sudo cp -rp /etc/apache2 /etc/apache2.bak Then,move all the contents of /etc/apache2 into the repository: sudo mv /etc/apache2/* /git/apache2 The /etc/apache2 directory is now empty. Be careful not to restart Apache at this point; it won’t see its configuration files and will fail. Remove the (now empty) /etc/apache2 directory: sudo rm /etc/apache2 Make sure that Apache’s files are owned by root. Using the chown command, as we normally would to change ownership, we’ll also change the .git directory to be owned by root as well. We don’t want that, because the user responsible for pushing changes should be the owner of the .git folder. To change the ownership of the files to root, without touching hidden directories such as .git : sudo find /git/apache2 -name '.?*' -prune -o -exec chown root:root {} + Create a symbolic link to the Git repository so the apache2 daemon can find it: sudo ln -s /git/apache2 /etc/apache2 Check with: ls -l /etc | grep apache2 Reloading Apache, nothing should change, and it should find the same configuration files as it did before. sudo systemctl reload apache2 To push the changes back to the Git server, associate the files within the /git/apache2 directory into version control: git add . If you run the git status command from within your Git repository, you should see output indicating that Git has new files that haven’t been committed yet. A Git commit simply finalizes the changes locally. Basically, it packages up your current changes to prepare them for being copied to the server. To create a commit of all the files we’ve added so far, cd into the /git/apache2 directory and run: git commit -a -m \"Initial commit.\" the -a option tells Git to include anything that’s changed in the repository. The -m option allows attaching a message to the commit, which is required. If you don’t use the -m option, it will open your default text editor and allow you to add a comment from there. Push the changes back to the Git server: git push origin main By default, the git suite of commands utilizes OpenSSH, so our git push command should create an ssh connection back to the Git server and push the files there. You won’t be able to inspect the contents of the Git directory on your Git server, because it won’t contain the same file structure as your original directory. But when you pull a Git repository though, the resulting directory structure will be just as you left it. If you need to restore a repository onto another server, all you should need to do is perform a Git clone . To clone the repository into your current working directory: git clone IP_ADDRESS:/git/apache2 And each time you make changes to the configuration files, you can perform a git commit and then push the changes up to the server to keep the content safe: git commit -a -m \"Updated config: details.\" git push origin main To revert changes should the configuration get changed with non-working files, locate a known working commit and get its commit hash. A good method is using the tig command. The tig package must be installed for this to work: sudo apt install tig To use it, execute the tig command from within a Git repository. This will give a semi-graphical interface to browse through the Git commits. Select the best commit to go back to and get the commit hash. Exit tig by pressing q , then revert to that commit: git checkout <commit hash> Test the application to make sure that the issue is completely fixed. When finished testing, you can make the change permanent. Switch back to the most recent commit: git checkout main Then, permanently switch back to the commit that was found to be working properly: git revert --no-commit <commit hash> Then, commit the reverted Git repository and push it back to the server: git commit -a -m \"The previous commit broke the application. Reverting.\" git push origin main",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "760863b7ad4682ee152a2fbaeeb6164c",
    "u": "https://server.tymyrddin.dev/docs/encryption/ssh",
    "t": "Installing SSH ",
    "c": "Installing SSH  SSH (Secure Shell) is used for managing networks, operating systems, and configurations. It is also used inside many file transfer tools and configuration management tools. Functionally SSH keys resemble passwords. SSH keys are a pair of cryptographic keys using a public key cryptosystem that can be used to authenticate to an SSH server as an alternative to password-based logins. A private and public key pair are created prior to authentication. The private key is kept secret and secure by the user, while the public key can be shared with anyone. The advantage SSH authentication has over traditional password authentication is that you can be authenticated by the server without having to send your password over the network. Anyone eavesdropping on unencrypted connections will not be able to intercept and crack the password. It also allows for disabling password-based authentication. openSSH server  # apt-get install openssh-server # systemctl enable ssh # systemctl start ssh Control  On Debian, the default behaviour of an OpenSSH server is that it will start automatically as soon as it is installed. Verify it is running: # systemctl status ssh If it is not running, try to start it with: # systemctl start ssh Stop it with # systemctl stop ssh If you wish to disable OpenSSH server from starting up at boot: # systemctl disable ssh And enable for starting up at boot: # systemctl enable ssh Filtering  Allow SSH connections in the firewall. openSSH client  § sudo apt-get install openssh-client Generate a key Punch a hole in the firewall If ufw is installed on client, open port (22, oruse the port you need) Copy key to server. Connect and login. Resources  OpenSSH Security OpenBSD Security",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b85647f9699ff39e83fb859122f1c48a",
    "u": "https://server.tymyrddin.dev/docs/ids/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  A host-based intrusion detection system (HIDS) is a system that monitors a host on which it is installed to detect an intrusion and/or misuse, and responds by logging the activity and notifying the system administrators. Why?  Defend against a live attack How?  Samhain Maltrail Notes  Install HIDS right after installing the system. Tripwire creates a database of information related to your system, then compares that to what it finds when ran regularly, which it should, in order to get some real use out of it. Rkhunter is a Unix-based tool that scans for rootkits, backdoors and possible local exploits. Samhain provides file integrity checking, log file monitoring/analysis, rootkit detection, port monitoring, detection of rogue SUID executables, and hidden processes. Like having tripwire and rkhunter rolled into one. <=",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "06bf0b23ed4e96afda5a27a1e16f250e",
    "u": "https://server.tymyrddin.dev/docs/pki/internal-pki",
    "t": "Internal PKI ",
    "c": "Internal PKI  An Internal PKI consists of A master-your-own master Certificate Authority (CA) certificate and key which is used to sign each of the server and client certificates. A separate certificate (also known as a public key) and private key for the server and each client. The most secure way of doing this is to generate the Certificate Authority keys on a stand-alone (not Internet-connected) machine in a secure location. Master Certificate Authority (CA)  easy-rsa is a CLI utility to build and manage a PKI CA. It has a quickstart documentation and OpenVPN has example files. cd /etc/openvpn/ mkdir easy-rsa cd easy-rsa cp -r /usr/share/doc/openvpn/examples/easy-rsa/2.0/* . Edit the /etc/openvpn/easy-rsa/vars file #vi /etc/openvpn/easy-rsa/vars Append content to some of its variables. This will make the next step in the process faster. You can also skip this. The only parameter which must be explicitly entered is the Common Name. Now create the Certificate Authority Certificate and Key: # source vars # ./clean-all # ./build-ca Generating a 2048 bit RSA private key ............++++++ ...........++++++ writing new private key to 'ca.key' ----- You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [KG]: State or Province Name (full name) [NA]: Locality Name (eg, city) [BISHKEK]: Organization Name (eg, company) [OpenVPN-TEST]: Organizational Unit Name (eg, section) []: Common Name (eg, your name or your server's hostname) []: <hostname> Email Address [me@myhost.mydomain]: Hit enter, and again, and again … Later more master certificates and keys can be added, and when doing so do NOT use the ./clean-all instruction again. It wipes the Certificate Authority. Server key  Generate the server certificate and key with: # ./build-key-server <servername> Hit enter, and again, and again … including when it asks you to add a pass phrase. This is between servers. When it asks you if you wish to sign, answers yes, and you also want to commit. Client keys  For security, each client will get its own certificate and key. Per client: # ./build-key <clientname> Hit enter, and again, and again … including when it asks you to add a pass phrase. This is between servers. When it asks you if you wish to sign, answers yes, and you also want to commit. Diffie-Hellman parameters  Use the build-dh script to determine the encryption parameters necessary for the server end of a SSL/​TLS connection: ./build-dh And the system will get very busy with prime numbers. Copy keys  In the most secure possible way (for instance with scp ), copy keys and certs to their respective locations. ca.crt , dh2048.pem , <servername>.crt , and <servername>.key to /etc/openvpn on <servername> ca.crt , <clientname>.crt , and <clientname>.key to /etc/openvpn on <clientname> for each client server. Security improvement  All keys were created, signed and then distributed to the clients. A more secure way would be to generate the keys in their locations, submit a Certificate Signing Request (CSR) to the key-signing machine or transfer the CSR to the offline CA, the key-signing machine could have processed the request and returned a signed certificate which could have been transferred back to the clients. That way, the secret .key files stay on the machine on which they were generated.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "29f3ee54c8f211d86ecd5a113d66b2fc",
    "u": "https://server.tymyrddin.dev/docs/encryption/jumping",
    "t": "Jumping hosts ",
    "c": "Jumping hosts  Sometimes it is only possible to access a remote server using ssh by first logging in to another server (or firewall/jump host). This means having to authenticate twice and the chain can be long and not limited to just two hosts. I can only access the remote “Backend server” via ssh by first login into an intermediary Firewall/Bastion server called “jumphost”. First, login to jumphost: $ ssh user@jumphost Next, ssh through the intermediary system: $ ssh user@backendserver Or, use -tt , forcing “pseudo-tty” allocation: $ ssh -tt jumphost ssh -tt backendserver Alternatives to manually jumping about and making life much easier are ForwardAgent, ProxyCommand and ProxyJump. Starting from OpenSSH 7.3, released August 2016, the easiest way to pass through one or more jump hosts is with the ProxyJump directive. ForwardAgent  SSH agent forwarding can be used to make access to a server. It allows for the use of local SSH keys instead of leaving keys (without passphrases!) sitting on the server. The -A option enables forwarding of the authentication agent connection: ssh -A user@server.com It forwards the SSH authentication schema to the remote host to allow for the use of SSH on the jump host as if the user was on the local machine. A forwarding socket will be set up so that the SSH client on the first host can connect to the ssh-agent on the client machine to perform authentication on its behalf. The key is not forwarded, but the agent, meaning many keys can be added. Configuration  Create or open ~/.ssh/config : $ vi ~/.ssh/config Append the below entry (replacing XXX.XXX.XXX.XXX with actual server domain name or the IP): Host jumphost HostName XXX.XXX.XXX.XXX User user ForwardAgent yes Security problem  The problem is that while being connected to the first host, anyone with sufficient permission on the first host will be able to use that socket to connect to and use that local ssh-agent. A rogue root or evil admin with root access can eavesdrop on the ongoing session and impersonate the user for authentication to other servers during the time that user is connected to that server. A mentioned mitigation is using the -c option, which will show a confirmation window each time some program wants to use the agent to authenticate somewhere. Recommended is using ProxyCommand instead. Or even better, ProxyJump. ProxyCommand  ProxyCommand is an alternative for that is supposedly more secure than the above SSH agent forwarding. It is possible to connect via an intermediate machine using a SOCKS proxy. SOCKS4 and SOCKS5 proxies are both supported by OpenSSH. SOCKS5 allows for transparent traversal of a firewall or other application barrier by strong authentication with the help of GSS-API. Dynamic application-level port forwarding allows the outgoing port to be allocated on the fly thereby creating a proxy at the TCP session level. Using the ProxyCommand option to invoke netcat as the last in the chain is a variation of this for very old clients. The SSH protocol is forwarded by ‘’nc’’ (netcat) instead of ‘’ssh’’. Attention must also be paid to whether or not the username changes from host to host in the chain of SSH connections. The somewhat outdated netcat method does not allow a change of username. Other methods do. ssh -o ProxyCommand='ssh user@jumphost nc backendserver 22' user@backendserver The ‘’nc’’ command sets and establish a TCP pipe between jumphost (or firewall) and backendserver. Note: It is not possible to use both the ProxyJump and ProxyCommand directives in the same host configuration. The first one found is used and then the other blocked. Configuration  Create or open ~/.ssh/config $ vi ~/.ssh/config Append the below entry (replacing ‘’XXX.XXX.XXX.XXX’’ with actual server domain name or IP and ‘’user’’ with actual user): Host jumphost HostName XXX.XXX.XXX.XXX User user ProxyCommand ssh user@backendserver nc %h %p ProxyJump  Starting from OpenSSH 7.3, released August 2016, the easiest way to pass through one or more jump hosts is with the ProxyJump directive. The main method here is to use an SSH connection to forward the SSH protocol through one or more jump hosts, using the ProxyJump directive, to an SSH server running on a destination host (this method cannot be used if an intermediate host denies port forwarding). This is considered the most secure method because encryption is end-to-end. $ ssh -J user1@jumphost.whatever.org:22 anotherusername@XXX.XXX.XXX.XXX And can be chained: $ ssh -J user1@jumphost1.whatever.org:22,user2@jumphost2.whatever.org:2222 anotherusername@XXX.XXX.XXX.XXX Configuration  Host server2 HostName XXX.XXX.XXX.XXX ProxyJump user1@jumphost1.whatever.org:22 User anotherusername Host server3 HostName XXX.XXX.XXX.XXX ProxyJump user1@jumphost1.whatever.org:22,user2@jumphost2.whatever.org:2222 User anotherusername",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d0d5d020d5de0fa0c33d9726f2209558",
    "u": "https://server.tymyrddin.dev/docs/users/other-reqs",
    "t": "Configuring other password requirements ",
    "c": "Configuring other password requirements  Password expiration  Password expiration can be set in /etc/login.defs . scroll down to the “Password aging controls” section: PASS_MAX_DAYS : Default 99999 ; Sets the maximum number of days a password may be used. PASS_MIN_DAYS : Default 0 ; Sets the minimum number of days a user must keep their password before changing it. PASS_WARN_AGE : Default 7 ; Sets the number of days out from expiration that the system will warn the user. Password history  When configuring the password history of any system, it is generally considered best practice to remember the previous 10 passwords. This will ensure that the user’s passwords stay different and are not reused. Setting a minimum age of 1 and a password history of 10 means that somebody would need to wait at least 11 days before they’re able to get back to their original password. Usually this is enough to dissuade anyone from trying. To configure password history in Ubuntu, use /etc/pam.d/common-password : password : module type we are referencing. required : module where failure returns a failure to the PAM-API. pam_pwhistory.so : module that configures the password history requirements. remember=2 : option for the pam_pwhistory.so module to remember the last n passwords ( n = 2 ). These passwords are saved in /etc/security/opasswd . retry=3 : option for the pam_pwhistory.so module to prompt the user 3 times before returning a failure. Resources  pam.d(5) - Linux man page",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ec2e0d518232acf629a71c1d1e66e8b3",
    "u": "https://server.tymyrddin.dev/docs/firewall/firewalld",
    "t": "FirewallD ",
    "c": "FirewallD  FirewallD uses the concepts of zones and services, instead of IPTables chain and rules. As of CentOS version 7, FirewallD replaces IPTables as the default firewall management tool. FirewallD can be configured and managed using the firewall-cmd command line utility. Install and enable FirewallD  If not installed on the system, install with # yum install firewalld Firewalld is disabled by default. Check status with: # firewall-cmd --state Start and enable it on boot # systemctl start firewalld # systemctl enable firewalld Zones  Zones are predefined sets of rules specifying what traffic should be allowed based on the level of trust on the networks a computer is connected to. Network interfaces and sources can be assigned to a zone. From untrusted to trusted: Zones Meaning drop All incoming connections are dropped without any notification. Only outgoing connections are allowed. block All incoming connections are rejected with an icmp-host-prohibited message for IPv4 and icmp6-adm-prohibited for IPv6n. Only outgoing connections are allowed. public For use in untrusted public areas. Do not trust other computers on the network but allow selected incoming connections. external For use on external networks with NAT masquerading enabled - system acts as a gateway or router. Only selected incoming connections are allowed. internal For use on internal networks - system acts as a gateway or router. Other systems on the network are generally trusted. Only selected incoming connections are allowed. dmz Used for computers in a demilitarized zone, giving limited access to the rest of the network. Only selected incoming connections are allowed. work Used for work machines. Other computers on the network are generally trusted. Only selected incoming connections are allowed. home Used for home machines. Other computers on the network are generally trusted. Only selected incoming connections are allowed. trusted All network connections are accepted. Trust all of the computers in the network. The public zone is set as a default zone # firewall-cmd --get-default-zone Check what zones are used by network interface(s) # firewall-cmd --get-active-zones Print zone configuration settings # firewall-cmd --zone=public --list-all Configuration of all zones # firewall-cmd --list-all-zones Changing zone of an interface # firewall-cmd --zone=work --change-interface=eth1 Ports and services  Listing all default available services ( /usr/lib/firewalld/services/ contains xml files with details for each service): # firewall-cmd --get-services Allow incoming HTTP traffic (port 80) for interfaces in the public zone, only for the current session (runtime configuration) # firewall-cmd --zone=public --add-service=http To keep the port open after reboot use the --permanent flag # firewall-cmd --permanent --zone=public --add-service=http Forward traffic from one port to another on the same server # firewall-cmd --zone=external --add-forward-port=port=80:proto=tcp:toport=8080 Creating rulesets  The dmz (demilitarized) zone only allows SSH traffic. To change the default zone to dmz and to assign it to the eth0 interface # firewall-cmd --set-default-zone=dmz # firewall-cmd --zone=dmz --add-interface=eth0 To open HTTP and HTTPS ports add permanent service rules to the dmz zone # firewall-cmd --permanent --zone=dmz --add-service=http # firewall-cmd --permanent --zone=dmz --add-service=https Start building the firewall! Usage examples  OpenVPN  When using the default port 1194, enable the openvpn service. Otherwise, create a new service with a different port. # firewall-cmd --zone=public --add-service openvpn To add masquerade to the zone: # firewall-cmd --zone=server --add-masquerade Make changes permanent: # firewall-cmd --runtime-to-permanent SMTP  # firewall-cmd --permanent --add-service=smtp success Disable FirewallD  Stop the FirewallD service # systemctl stop firewalld Disable it to start automatically on system boot # systemctl disable firewalld Mask it to prevent it from being started by other services # systemctl mask --now firewalld",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b303e57e930a7387dd0f026591e283ab",
    "u": "https://server.tymyrddin.dev/docs/users/lxd",
    "t": "Dangers of the lxd group ",
    "c": "Dangers of the lxd group  Ubuntu places users (unless otherwise specified) into the lxd group. This group is known to be a point of privilege escalation and should be removed from any user that is a part of it. It is so popular that Linux-Smart-Enumeration even checks for it. Remove it from any user that has it assigned. Using adduser does not add the user to any predefined groups and should probably be used when adding new users. Resources  diego-treitos/linux-smart-enumeration",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c0d8a4632d1584ca3691a5bbeb45d4aa",
    "u": "https://server.tymyrddin.dev/docs/access/dac",
    "t": "Discretionary access control (DAC) ",
    "c": "Discretionary access control (DAC)  Discretionary Access Control (DAC) really just means that each user has the ability to control who can get into their stuff. Using chown  One unique thing about chown is that you must have sudo privileges to use it, even if you’re working with your own files in your own directory. You can use it to change the user of a file or directory, the group that’s associated with a file or directory, or both. To change the file ownership from me to username : sudo chown <username>>: <file> To change the group association without changing the user: sudo chown :<group> <file> To change the user without changing the group, list the username without the trailing colon: sudo chown <username> <file> These commands work the same way on a directory as they do on a file. If you also want to change the ownership and/or the group association of the contents of a directory, while also making the change on the directory itself, use the -R option. Using chmod  On Unix and Linux systems, you would use the chmod utility to set permissions values on files and directories. You can set permissions for the user of the file or directory, the group that’s associated with the file or directory, and more. There are two ways to use chmod to change permissions settings: symbolic and numerical. Symbolic  chmod u+x cript.sh chmod g+x script.sh chmod o+x script.sh chmod u+x,g+x script.sh chmod a+x script.sh The first three commands add the executable permission for the user, the group, and others. The fourth command adds executable permissions for both the user and the group, while the last command adds executable permissions for everybody (a for all). You can also remove the executable permissions by replacing + with - . Similarly, you can add or remove read ( r ) or write ( w ) permissions. Numerical  With the numerical method, you’ll use an octal value to represent the permissions settings on a file or directory. For the r , w , and x permissions, you assign the numerical values 4, 2, and 1, respectively. You would do this for the user, group, and others positions, and then add them all up to get the permissions value for the file or directory: User Group Others rwx rwx rwx 421 421 421 7 7 7 With all permissions set for everybody, a file or directory will have a value of 777 . Using SUID and SGID  When a regular file has its SUID permission set, whoever accesses the file will have the same privileges as the user of the file. A file with the SUID permission set has an s in the executable position for the user: -rwsr-xr-x. A file with the SGID permission set has an s in the executable position for the group: -rwxr-sr-x. The numerical value for SUID is 4000 , and for SGID is 2000 . To set SUID on a file, add 4000 to whichever permissions value to be set. As useful as it may be to have SUID or SGID permissions on executable files, it is just a necessary evil. While having SUID or SGID set on certain operating system files is essential for the operation of the system, it becomes a security risk when users can set SUID or SGID on other files. If intruders find an executable file that belongs to the root user and has the SUID bit set, they can use that to exploit the system. They may leave behind their own root-owned file with an SUID set, which will allow them to regain entry to the system the next time. If the intruder’s SUID file isn’t found, the intruder will still have access, even if the original problem has been fixed. Finding SUID or SGID files  sudo find / -type f \\( -perm -4000 -o -perm -2000 \\) > suid_sgid_files.txt / : searching through the entire filesystem. Since some directories are only accessible to someone with root privileges, we need to use sudo. -type f : searching for regular files, which includes executable program files and shell scripts. -perm 4000 : searching for files with the 4000 , or SUID permission bit set. -o : or operator. -perm 2000 : searching for files with the 2000 , or SGID , permission bit set. > : redirecting the output into the suid_sgid_files.txt text file. Preventing SUID and SGID usage on a partition  Prevent SUID and SGID usage on a partition by mounting it with the nosuid option. Do not set nosuid for the / partition. The operating system doesn’t function properly. Using extended file attributes to protect sensitive files  Extended file attributes will not keep intruders from accessing files, but they can help prevent sensitive files from being altered or deleted. a : You can append text to the end of a file that has this attribute, but you can’t overwrite it. Only someone with proper sudo privileges can set or delete this attribute. i : This makes a file immutable, and only someone with proper sudo privileges can set or delete it. Files with this attribute can’t be deleted or changed in any way. It is also not possible to create hard links to files that have this attribute. sudo chattr +a <file> Securing system configuration files  With IoT devices, you have a bit more to worry about than you do with normal servers. Normal servers are protected with a high degree of physical security, while IoT devices often have little to no physical security. In this context, the open “all can read” is often considered not a good idea. Yo ensure that all the configuration files on the devices are set with the 600 permissions setting: sudo find / -iname '*.conf' -exec chmod 600 {} \\; Only the owner of the files – root user or a system account – can read them. Test things thoroughly to ensure that you haven’t broken anything. Most things work just fine with their configuration files set to a 600 permissions setting, and some do not.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "47637dfb988018b65c4bae141f992eb3",
    "u": "https://server.tymyrddin.dev/docs/encryption/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Protect data at rest and data in transit. Why?  Confidentiality: This ensures that only people who are authorised to see the data can see it. Integrity: This ensures that original data has not been altered by unauthorised people. Availability: This ensures that sensitive data is always available, and can not be deleted by unauthorised people. How?  GNU Privacy Guard OpenVPN strongSwan Installing SSH Harden ssh server Key management Jumping hosts Notes  Using a VPN is a way to map out a private network that only the servers can see. Communication will be fully private and secure. Other applications can be configured to pass their traffic over the virtual interface that the VPN software exposes. This way, only services that are meant to be used by clients on the public internet need to be exposed on the public network. Install and configure ssh keys and make your servers require them to minimise the risk posed by adversaries. Harden the ssh server (also harden default service settings in web server and other services) Do not leave passphrase empty - An adversary who gets hold of your private key can otherwise connect to the hosts where you put you public key. Use a separate key per client you ssh from to the same server. If one key is compromised the damage is more limited and easier to clean up. Limit the number of clients you ssh from. If a client is compromised an adversary has your key, they can install a binary to get your passwords/passphrases. If any, disable the ssh-server on the client machine you ssh from. Limit the attack surface. Don’t make jump host chains too long. If one client in the chain is compromised, an adversary can use that to compromise the rest of the clients down the chain. Don’t use Agent Forwarding. While being connected to the first host, anyone with sufficient permission on the first host will be able to use that socket to connect to and use that local ssh-agent. A rogue root or evil admin with root access can eavesdrop on the ongoing session and impersonate the user for authentication to other servers during the time that user is connected to that server. Instead, use ProxyJump (it uses E2EE) or, if that is not possible, use ProxyCommand. In some countries, proving that you connected to a particular server is enough to be prosecuted, but SSH doesn’t provide a native way to obfuscate to whom it connects. For that, SSH with Tor can be used. Don’t ignore authentication errors. This warning is protecting you. The remote host key is different than the client knows. Make sure the key really did change. An adversary may be spoofing the host and continuing may give the adversary the information they seek to attack your server. Another reason to not use passwords.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5c9294ef74b9df0a751dfbbbf4ed5e45",
    "u": "https://server.tymyrddin.dev/docs/services/nmap",
    "t": "Auditing network services with nmap ",
    "c": "Auditing network services with nmap  To remotely aud* the network to see what services are running on each host, without having to log in to each one, you need a tool like nmap . * is available for all the major operating systems, including Windows. The version that’s in the Linux repositories is usually quite old. So, if you’re using something other than Kali, your can download nmap . sudo nmap -sS IP_ADDRESS -sS : The lowercase s denotes the type of scan that we want to do. The uppercase S denotes that we’re doing a SYN packet scan. IP_ADDRESS : scanning a single machine or a group of machines or an entire network. Something like Not shown: 996 closed ports : The fact that it’s showing all of these closed ports instead of filtered ports tells me that there’s no firewall on this machine. Port states  An Nmap scan will show the target machine’s ports in one of three states: filtered : This means that the port is blocked by a firewall. open : This means that the port is not blocked by a firewall and that the service that’s associated with that port is running. closed : This means that the port is not blocked by a firewall, and that the service that’s associated with that port is not running. Scan types  There are lots of different scanning options, each with its own purpose. The SYN packet scan that we’re using here is considered a stealthy type of scan because * generates less network traffic and fewer system log entries than certain other types of scans. With this type of scan, Nmap sends a SYN packet to a port on the target machine, as if * were trying to create a TCP connection to that machine. If the target machine responds with a SYN/ACK packet, * means that the port is in an open state and is ready to create the TCP connection. If the target machine responds with an RST packet, * means that the port is in a closed state. If there’s no response at all, * means that the port is filtered, blocked by a firewall. As a normal Linux administrator, this is one of the types of scans that you would do most of the time. A discovery scan is useful for when you need to just see what devices are on the network: sudo nmap -sn IP_ADDRESS/24 With the -sn option, nmap will detect whether you’re scanning the local subnet or a remote subnet. If the subnet is local, nmap will send out an Address Resolution Protocol (ARP) broadcast that requests the IPv4 addresses of every device on the subnet. That is a reliable way of discovering devices because ARP isn’t something that will ever be blocked by a firewall. sudo nmap -A IP_ADDRESS This scan: identifies open , closed , and filtered TCP ports. identifies the version of the running services. runs a set of vulnerability scanning scripts that come with nmap. attempts to identify the operating system of the target host. 5900/tcp open vnc Apple remote desktop vnc | vnc-info: | Protocol version: 3.889 | Security types: |_ Mac OS X security type (30) 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at http://www.insecure.org/cgi-bin/servicefp-submit.cgi : SF-Port515-TCP:V=6.47%I=7%D=12/24%Time=5A40479E%P=x86_64-suse-linux-gnu%r( SF:GetRequest,1,\"\\x01\"); MAC Address: 00:0A:95:8B:E0:C0 (Apple) Device type: general purpose VNC can be handy at times. It’s like Microsoft’s Remote Desktop service for Windows, except that it’s free, open source software. But it’s also a security problem because it’s an unencrypted protocol. So, all your information goes across the network in plain text. If you must use VNC, run it through an SSH tunnel.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4dedab5686eea66d58233866f08b621d",
    "u": "https://server.tymyrddin.dev/docs/ids/maltrail",
    "t": "Maltrail ",
    "c": "Maltrail  Maltrail is a malicious traffic detection system, using publicly available (black)lists containing malicious and/or generally suspicious trails, static trails compiled from various AV reports and custom user-defined lists, and (optionally) advanced heuristic mechanisms that can help in the discovery of unknown threats (for example, new malware). It is based on a Traffic -> Sensor <-> Server <-> Client Architecture. Trail can be anything from a: domain name (like zvpprsensinaix.com for Banjori malware) URL (like http://109.162.38.120/harsh02.exe for known malicious executable) IP address (for example 185.130.5.231 for known attacker) HTTP User-Agent header value (like sqlmap for automatic SQL injection and database takeover tool). It can be found on Github stamparm/maltrail .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "fbf35dc5c99e6563252c4b10a6237a96",
    "u": "https://server.tymyrddin.dev/docs/encryption/key-management",
    "t": "Key management ",
    "c": "Key management  Generate a key  $ ssh-keygen -t Enter a passphrase. It will create 2 files in the ~/.ssh directory: id_rsa , a private key and id_rsa.pub , a public key. Note: Do not leave the passphrase empty. An attacker who gets hold of your private key can otherwise connect to the hosts where you put you public key. Choose a loooooong and complex passphrase. Remember the passphrase. Better yet, put it in a password manager. Copy key to server  $ scp ~/.ssh/id_rsa.pub user@server:~/.ssh/authorized_keys The authenticity of host 'XXX.XXX.XXX.XXX (XXX.XXX.XXX.XXX)' can't be established. ECDSA key fingerprint is [fingerprint]. Are you sure you want to continue connecting (yes/no)? yes If ssh access is already available, by using the cat command to read the contents of the public key on the local computer and piping that through an SSH connection to the remote server (and avoiding overriding already existing keys): $ cat ~/.ssh/id_rsa.pub | ssh user@server \"mkdir -p ~/.ssh && touch ~/.ssh/authorized_keys && chmod -R go= ~/.ssh && cat >> ~/.ssh/authorized_keys\" The authenticity of host 'XXX.XXX.XXX.XXX (XXX.XXX.XXX.XXX)' can't be established. ECDSA key fingerprint is [fingerprint]. Are you sure you want to continue connecting (yes/no)? yes For password-less login install the public key using the ssh-copy-id command: $ ssh-copy-id user@server $ ssh-copy-id -i ~/.ssh/id_rsa.pub user@server The authenticity message means that the local computer does not recognize the remote host. This will happen the first time connecting to a new host. Type “yes” and press ENTER to continue. /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys user@XXX.XXX.XXX.XXX's password: Enter password (not displayed for security purposes) and the following response is given: Number of key(s) added: 1 Connect  ssh to the server: $ ssh user@server Changing passphrase  ssh-keygen -p Or: cd ~/.ssh/ ssh-keygen -f id_rsa -p And upload it to the server. If you then connect, you may get an authentication error",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cf95dea78ebe621a0e02f17589928900",
    "u": "https://server.tymyrddin.dev/docs/logfiles/centralised",
    "t": "Centralised logging ",
    "c": "Centralised logging  Why?  Makes searching through log data for relevant events easier and faster, especially important when the infrastructure uses separation and isolation and there are multiple servers. This makes troubleshooting and solving issues easier and faster, and without directly accessing systems. Logs are backed up in a separate location, protecting them from accidental or unintentional loss, and are accessible in case one of the servers goes down or becomes unresponsive. Not using computing resources for complex searches on internet facing servers. Depending on how it is set up, reduces the amount of disk space used by log files. Why not?  Uses bandwidth. How?  Set up a separate server for only logging purposes. Keep it in a secure location behind a (physical) firewall. Have no unnecessary services running on it. Delete all other user accounts. Which one?  Rsyslog (default installed on debian) and syslog-ng are both light-weight. The configuration syntax of ‘’rsyslog’’ is simpler than the syntax of ‘’syslog-ng’’, but complex configuration is more clear in ‘’syslog-ng’’. Future considerations  To protect from intentional tampering with logs (intruder deleting indicators of presence): Add another server, a snort box (IDS) that is actually another central server (yet has no IP address) and copy each packet intended for the already existing central server. Promiscuous mode Rule: Only listen for this IP address on this port (of existing central server)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ca105558fe7c55c1dabbce4899e3874a",
    "u": "https://server.tymyrddin.dev/docs/logfiles/rotate",
    "t": "Logrotate ",
    "c": "Logrotate  On most Linux distributions, logrotate is installed by default. If not the case install it using the package manager. The below is for debian and friends. Installation  # apt-get install logrotate Configuration  The main configuration file is at /etc/logrotate.conf . Creating config files for each service separately can use the folder /etc/logrotate.d/ . # vi /etc/logrotate.d/remote Append: /var/log/remote/*/* { rotate 7 daily size=10M missingok compress delaycompress } This will compress and rotate logs every day and keep them for 90 days (3 months). Keep last 7 logs The logs will be rotated daily Each log will not be rotated until it reaches 10MB If the log file is missing, go on to the next one without issuing an error message. All rotated logs, with the exception of the most recent one, should be compressed.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "528e24c944fbce77eb2b0bda911674ed",
    "u": "https://server.tymyrddin.dev/docs/pki/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Public key infrastructure (PKI) is the umbrella term for everything needed in order to issue, distribute, store, use, verify, revoke, and otherwise manage and interact with certificates and keys. It’s an intentionally vague term, like “database infrastructure”. Certificates are the building blocks of most PKIs, and certificate authorities are the foundation. Why?  Establishing a certificate authority (CA) and managing certificates for the servers allows each entity within the infrastructure to validate the other members’ identities and encrypt their traffic. This can prevent MitM attacks where an attacker imitates a server in the infrastructure to intercept traffic. How?  Problems Internal PKI Pluggable Authentication Modules (PAM) Let’s Encrypt TLS/SSL Notes  Many simple PKIs don’t even use certificates. When editing ~/.ssh/authorized_keys you’re configuring a simple certificate-less form of PKI that SSH uses to bind public keys to names in flat files. Because the PKI system is asymmetric, users need access to a public key and recipients of a message need a private key to decrypt the information. X.509 is a complex standard and complex technology is not easy to deploy on a large-scale. Use a specific profile of X.509 and validate it in a narrow set of implementations. Web PKI is mostly defined by RFC 5280 and refined by the CA/Browser Forum. It’s hierarchical, based on trusting authorities, and for some such authorities a big cash cow. Web PKI being a money-spinner, we also have an alternative. Let’s Encrypt is a free, automated, and open Certificate Authority. Lost keys are also an issue for individuals that rely on encrypted data. Lost keys restrict access to messages, and these messages are unavailable forever unless the cryptographic algorithm is weak and can be cracked. Enter the Internet of Things (IoT), the Internet of Everything (IoE) and the Industrial Internet: all the devices that want confidentiality, integrity and authentication related to their identity and that of others too: implanted medical devices, robots on the plant floor, smart light bulbs, … We have a veritable explosion of checks and balances, not to mention issuances, revocations and expirations … problems, old ones not solved and new ones. SSL and PKI infrastructures are essential components in client device security, because they are used to bootstrap into higher-level security services such as software updates and digital signature services. Their vulnerability puts other security services at risk. Internal PKI is PKI we run ourselves, for our own stuff: infrastructures with services, containers, and VMs; applications; endpoints like laptops and phones; and any other code or device we want to identify. Use only the minimal set of features in certificates and PKI; That is to use the binding of an identifier and name to a key pair and understand whether the certificate may sign other certificates or not. No additional attributes should be relied on, no complex path validations allowed. SSL refers to Secure Socket Layer. It is a protocol for providing security to connections between a server and a client and uses cryptography and hashing to provide confidentiality, integrity, and endpoint authentication to connections between a server and a client. It has a lot of known security bugs of its own. TLS refers to Transport Layer Security, and is the successor of SSL, which includes bug fixes and improvements over SSL. SSL came up to versions 3.0 and after that the name was changed to TLS. Hence, often TLS/SSL is used.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "450b15a09a582ab262c724cfaa0155ab",
    "u": "https://server.tymyrddin.dev/docs/firewall/firehol",
    "t": "FireHOL ",
    "c": "FireHOL  FireHOL (based on bash) makes it very simple to set up a complex firewall. Installation  On the backend server, install FireHOL for configuring iptables . # apt-get install firehol Configuration (example)  # vi /etc/firehol/firehol.conf A configuration which only allows incoming ssh connections and openvpn: interface eth0 inet client all accept // allow all outgoing connections server ssh accept // allow all incoming SSH connections server openvpn accept src \"XXX.XXX.XXX.XXX XXX.XXX.XXX.XXX\" // allow incoming OpenVPN connections // from these designated addresses // NOTE: EDIT THE XXX.XXX.XXX.XXX ADDRESSES interface tun0 vpn server all accept // allow all incoming connections on the VPN client all accept // allow all outgoing connections on the VPN router inet2vpn inface eth0 outface tun0 route all accept // route freely to the VPN router vpn2inet inface tun0 outface eth0 masquerade // use NAT masquerading from the VPN route all accept // route freely to the VPN",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e1cb272b91b58f317d10879d8a97c878",
    "u": "https://server.tymyrddin.dev/docs/incidents/brm",
    "t": "Using bootable recovery media ",
    "c": "Using bootable recovery media  The concept of live media is a wonderful thing, as we can boot into a completely different working environment from the operating system installed on our device and perform tasks without disrupting installed software on the host system. The desktop version of Ubuntu, for example, offers a complete computing environment we can use in order to not only test hardware and troubleshoot our systems but also browse the web just as we would on an installed system. In terms of recovering from disasters, live media becomes a saving grace. Ubuntu’s live media is great, and it doesn’t work for absolutely everything. Tools such as Clonezilla specialize in working with hard disks. Practical Linux Forensics, Bruce Nikkel, 2021",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a3a59f60433064429e8a9112fafe3244",
    "u": "https://server.tymyrddin.dev/docs/services/netstat",
    "t": "Auditing network services with netstat ",
    "c": "Auditing network services with netstat  Two reasons why you would want to keep track of what network services running on systems: To ensure that no legitimate network services that you don’t need are running To ensure that you don’t have any malware that’s listening for network connections from its master C&C To see a list of network services that are listening, waiting for someone to connect to them: netstat -lp -A inet With: -lp : The l means that we want to see which network ports are listening. In other words, we want to see which network ports are waiting for someone to connect to them. The p means that we want to see the name and process ID number of the program or service that is listening on each port. -A inet : This means that we only want to see information about the network protocols that are members of the inet family. In other words, we want to see information about the raw, tcp, and udp network sockets, but we don’t want to see anything about the Unix sockets that only deal with interprocess communications within the operating system. If you want to see port numbers and IP addresses instead of network names, add the n option to the -lp . To view the established TCP connections is to leave out the l option. Something to keep in mind is that rootkits can replace legitimate Linux utilities with their own trojaned versions. For example, a rootkit could have its own trojaned version of netstat that would show all network processes except for those that are associated with the rootkit. That’s why you want something such as Rootkit Hunter in your toolbox. Resources  What Port Is - Network Port and Protocol Database",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "74d3c1bc5f8d0fea986342319e926687",
    "u": "https://server.tymyrddin.dev/docs/users/sudo",
    "t": "Configuring sudo ",
    "c": "Configuring sudo  sudo stands for “super-user do”. Sudo allows any non-root user to run applications as root. When sudo is configured correctly, it greatly increases the security of the environment. Slowing hackers down. Since the root login will most likely be disabled and your users are properly granted sudo, any attacker will not know which account to go after, thus slowing them down. If they are slowed down enough, they may stop the attack and give up. Allow non-privileged users to perform privileged tasks by entering their own passwords. Keeps in line with the principle of least privilege by allowing administrators to assign certain users full privileges, while assigning other users only the privileges they need to complete their daily tasks. Adding users to the sudo group  On Ubuntu 18.04, unless otherwise specified upon account creation, the user is automatically added to the sudo group. To add a user who is not part of the sudo group already, add him/her with: usermod -aG sudo <username> Using the -a option helps username retain any previously existing groups. To directly add a user to the sudo group upon username account creation: useradd -G sudo <username> By default, Ubuntu allows sudo users to execute any program as root with their password. There are a few ways we can check this information. The first way is as user with sudo -l . Another way to view this information is with visudo . This opens the sudo policy file. The sudo policy file is stored in /etc/sudoers . This gives the same information as sudo -l but with one difference; the %sudo indicates that it is for the group, sudo. There can be other groups in this file such as admin . This is where administrators can set what programs a user in a certain group can perform and whether they need a password. In the %sudo ALL=(ALL:ALL) ALL NOPASSWD: ALL , the NOPASSWD part says that the user that is part of the sudo group does not need to enter their local password to use sudo privileges. Generally, this is not recommended - not even for home use. Users can also be added to the sudoers using the sudo policy file. Always edit sudoers with the sudo visudo command. If you are managing users in a network across multiple flavours of Linux (CentOS, Red Hat, etc.), where the sudo group may be called something different, this method may be more preferable: add a User Alias to the policy file and add users to that alias, or add lines for individual users. User_Alias ADMINS = lela, barzh and: ADMINS ALL=(ALL) ALL or for an individual user: username ALL=(ALL) ALL It is not recommended to use individual user aliases in a large network since this can become unwieldy very quickly. The first option is going to be your best bet as you can simply add users to this alias and control which commands they have access to with sudo easily. Setting up sudo for only certain delegated privileges  To ensure that users are assigned to the groups they belong to and only are allowed access to the programs they need to complete their daily tasks, set Command Aliases in the sudo policy file: Use sudo visudo , and edit the line under the comment # Cmnd alias specification . Cmnd_Alias SOFTWARE = /bin/rpm, /usr/bin/up2date, /usr/bin/yum To assign the SOFTWARE command alias to the SOFTWAREADMINS user alias: SOFTWAREADMINS ALL=(ALL) SOFTWARE You can also assign Command Aliases to individual users, specific commands to individual users, and Command Aliases to groups. Host aliases  Host Aliases are a way to trickle down a sudo policy across the network and different servers. For example, you may have a MAILSERVERS Host Alias which contains servers mail1 and mail2 . This Host Alias has certain users or groups assigned to it, and that Host Alias has a Command Alias assigned to it stating which commands those users are able to run. When those users run a command on mail1 or mail2 , the server will check the sudo policy file to see if they can do what they are trying to do. In a home environment and small-medium business environments, it probably is just easier to copy the sudo policy file to each server in the network. This will really only come into play with large enterprise networks and even then they will probably be using a centralised Ansible or other automation in effect. Preventing users from using shell escapes  Programs like text editors and pagers have a handy shell escape feature. This allows a user to run a shell command without having to exit the program first. For example, from the command mode of the vi and vim editors, someone could run the ls command by running :!ls . To allow a user to edit the sshd_config file and only that file, add a line to the sudo configuration: username ALL=(ALL) sudoedit /etc/ssh/sshd_config sudoedit has no shell escape feature. Other programs that have a shell escape feature: emacs , less , view , and more . Preventing users from using other dangerous programs  Some programs that don’t have shell escapes can still be dangerous if you give users unrestricted privileges to use them, like cat , cut , awk , and sed . If you must give someone sudo privileges to use one of these programs, limit their use to only specific files. Preventing abuse via user’s shell scripts  A rule for Fritz so he can create scripts running with elevated privileges: fritz ALL=(ALL) /home/fritz/fritz_script.sh And his script reads: #!/bin/bash echo \"This script belongs to Fritz the Cat.\" sudo -i What can happen next: fritz@server:~$ sudo ./fritz_script.sh This script belongs to Fritz the Cat. root@server:~# sudo -i logs a person in to the root user’s shell, the same way that sudo su - does. To remedy this, move Fritz’ script to the /usr/local/sbin directory and change the ownership to the root user so that Fritz will not be able to edit it. And delete that sudo -i line in it.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5587b8e198416f25012d7380f92c4e2c",
    "u": "https://nm.tymyrddin.dev/",
    "t": "Network mitigations ",
    "c": "Network mitigations  The policies and practices adopted to prevent, monitor, and recover from network attacks. Forever in progress? Why? See Network attacks Basics @Home Introduction Upgrade router firmware Protect router management Turn it off Port forwarding Routing audit Services audit OpenWRT @Home Introduction Flash router with other firmware DropBear SSH public key authentication Nethogs Portknocking Wireless @Home Introduction Reduce wireless signal strength Change router defaults Disable SSID broadcasting Enable encryption Notes on WPS Unauthorised devices Restrict by MAC address Use certificate-based security Router audit scripts @GitHub Intranet router audit scripts ISP-grade router audit scripts Carrier-grade router audit scripts Intranet Introduction Secured NAT router LAN segmentation ARP mitigations DNS mitigations NFTables Snortbox as IDS Beyond basic protections Internet Introduction Critical internet-wide mitigations BGP hijacking mitigations Certificate validation Deploying Resource Public Key Infrastructure (RPKI) Defending from DDoS GDPR compliance checklist Adopting Post-Quantum Cryptography (PQC) Enabling DoH/DoT in browsers Tomes  https://www.packtpub.com/product/nmap-network-exploration-and-security-auditing-cookbook-third-edition/9781838649357 https://nostarch.com/nsm https://www.wiley.com/en-us/Artificial+Intelligence+and+Data+Mining+Approaches+in+Security+Frameworks-p-9781119760436",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d160f0f42d91886ecc102ce2e6fc57b8",
    "u": "https://nm.tymyrddin.dev/docs/internet/ddos",
    "t": "Defending from DDoS ",
    "c": "Defending from DDoS  Table of Contents Defending from DDoS On-Premises mitigations Network hardening Rate limiting Traffic scrubbing (DIY) ISP/Transit Provider responsibilities Cloud-Based protection (3rd Party) Application-layer defences Web Application Firewall (WAF): Rate Limiting Emergency response plan On-Premises mitigations  Network hardening  Enable BCP38 (Anti-Spoofing): Filter traffic with invalid source IPs at the edge. Cisco example: interface GigabitEthernet0 / 0 ip verify unicast source reachable - via rx Rate limiting  Throttle suspicious traffic (e.g., SYN floods). Linux (iptables): iptables - A INPUT - p tcp -- syn - m limit -- limit 1 / s - j ACCEPT Traffic scrubbing (DIY)  Deploy Open-Source Tools: FastNetMon (Real-time detection) + ExaBGP (BGP blackholing). Suricata (L7 filtering): # suricata.yaml threshold-file : /etc/suricata/threshold.config ISP/Transit Provider responsibilities  Provider Duty Example Blackhole Routing Drop attack traffic via RTBH (Remote Triggered Black Hole). Flow Telemetry Share NetFlow/sFlow data to identify attacks. Scaled Mitigation Absorb large attacks (e.g., >100 Gbps). Does your ISP offer DDoS protection services? What is their process for attack mitigation? Cloud-Based protection (3rd Party)  For large-scale attacks, use cloud scrubbing centers: Service Best For How It Works Cloudflare Magic Transit Enterprises Routes traffic through Cloudflare’s global network. AWS Shield Advanced AWS users Automatic L3/L4 mitigation + WAF integration. Akamai Prolexic High-risk targets Always-on scrubbing. Setup Steps: Change DNS to point to the scrubbing service. BGP Announcement: Redirect traffic via cloud provider (e.g., Cloudflare Anycast). Application-layer defences  Stop HTTP floods, API abuse, and botnets. Web Application Firewall (WAF):  Block OWASP Top 10 attacks (SQLi, XSS). Cloudflare Rule Example: { \"action\" : \"challenge\" , \"expression\" : \"(http.request.uri.path contains '/wp-admin')\" } Rate Limiting  Nginx: limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s; Emergency response plan  Detection: Use FastNetMon or ISP alerts. Mitigation: Small Attacks: On-prem rate limiting. Large Attacks: Redirect to cloud scrubbing (update BGP). Post-Attack: Analyze logs to block future attacks.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "442b53ba49becd283df0d569d5799c23",
    "u": "https://nm.tymyrddin.dev/docs/basics/routing",
    "t": "Routing audit ",
    "c": "Routing audit  Small Organisation Intranet Routing Audit  For organisations with OSPF/EIGRP, VLANs, and multiple sites Identify Active Routing Protocols show ip protocols ( Cisco ) show running - config | section router ( OSPF | EIGRP | RIP | BGP ) netstat - rn ( Linux / Windows ) Check: Are unnecessary protocols (like RIP) running? Verify Authentication For OSPF: show running - config | section ospf # Look for: # area 0 authentication message-digest # ip ospf message-digest-key 1 md5 YOUR_KEY For EIGRP: show running - config | section eigrp # Look for: # authentication mode md5 # authentication key-chain MY_CHAIN Fix if missing: Enable MD5/SHA auth for all routing updates. Check for Rogue Neighbors show ip ospf neighbor ( OSPF ) show ip eigrp neighbors ( EIGRP ) Action: Compare against a known list of legitimate routers. Review Route Table for Anomalies show ip route # Look for: # - Unexpected new routes # - Routes with suspicious next-hop IPs Use a tool for logging historical changes. Test Traffic Paths traceroute 10.0.1.100 ( Linux / macOS ) tracert 10.0.1.100 ( Windows ) Check: Does traffic take the expected path? If not, investigate. Enable Logging & Alerts Syslog example (Cisco): logging host 192.168.1.100 logging trap notifications Tool: Forward logs to Graylog/Splunk for monitoring. Apply Hardening Fixes Disable unused protocols (e.g., no router rip). Restrict routing updates with ACLs: access - list 10 permit 192.168.1.0 0.0.0.255 router ospf 1 distribute - list 10 in Encrypt inter-site links with IPsec/GRE. Home/Lab Network Routing Audit  For home users with a router, VLANs, or small lab setups Check Your Default Gateway ip route show ( Linux ) route print ( Windows ) netstat - rn ( macOS ) Check: Is your gateway IP correct? (No unexpected routes.) Verify DHCP & Static Routes On router (e.g., OpenWRT/ASUS): cat / etc / config / network # (OpenWRT) show running - config # (Cisco home routers) Fix: Remove unauthorized static routes. Scan for Rogue Devices nmap - sn 192.168.1.0 / 24 Check: Are there unknown devices acting as routers? Disable Risky Services On home router: Turn off RIP/OSPF if not needed. Disable remote admin access (WAN-side management). Enable Basic Firewall Rules Example (OpenWRT): # Block external routing protocols iptables - A INPUT - p 89 - j DROP # OSPF iptables - A INPUT - p 88 - j DROP # EIGRP Test DNS & Traffic Redirection Check for MiTM (On-Path): dig example . com # Look for unexpected DNS IPs traceroute 8.8.8.8 # Verify path to Google DNS Update Firmware & Reset Passwords Router Admin Panel: Change default credentials (admin/password). Update firmware to patch routing exploits.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6f6b531d07fbf7d160af0d5471949f47",
    "u": "https://nm.tymyrddin.dev/docs/openwrt/flash-router",
    "t": "Flash router with other firmware ",
    "c": "Flash router with other firmware  Routers supplied by ISPs are typically less secure than those sold by manufacturers to consumers. They often have hard-coded remote support credentials that users can’t change and patches for their customized firmware versions lag behind patches for the same flaws released by router manufacturers. There are several Linux-based, community-maintained firmware projects for a wide range of home routers. OpenWRT, DD-WRT and Asuswrt-Merlin (for Asus routers only). But, loading custom firmware on a router requires some technical knowledge, will likely void its warranty and, if done incorrectly, can brick the device. DD-WRT  DD-WRT has become a common out-of-the-box option for many routers, but also exists in stand-alone implementations that can be used to flash routers that support it. It has a slightly convoluted history. From 2002, Linksys released a line of routers (WRT54G) with Linux. The company was eventually obliged to release the source code for those routers under the terms of the GPL. DD-WRT has become the basis for other firmware created by router manufacturers themselves and while DD-WRT is released under the terms of the GPL, commercial builds of such firmware may incorporate much non-GPL code. OpenWrt  OpenWrt is more like a real Linux distribution than DD-WRT. It comes with its own package manager. Setting up and running OpenWrt can be an involved process, because users can make any changes they want from a broad range of components directly inside OpenWrt. Updates come frequently and its package manager makes it easy for users to take advantage of those updates. Example: Flashing a TL-WR841N(D)  Read Factory install: First-time installation on a device . For showing how easy it is: Look on the bottom of your router. There is a version number on the label. In my case at the time of writing that was 9.2. Go to OpenWrt and find the TL-WR841ND software (note that it is now no longer recommended to flash this type of router, but for 9.x a version is available that still works). On that page you can also read the latest notes on the versions, with links to bugs and discussions. Download the image for your version. Open the router web interface page on tplinklogin.net or 192.168.1.1 . If you never changed your password, tsk, tsk, it is [default user : admin, password: admin]. If you forgot, reset the router and then login with the defaults (in which case you can skip the next step). If you did have a password set, log in. Do a factory reset after taking a look at your current settings. Go to the firmware upgrade page and select the firmware image you just downloaded as an update. Upgrade and set a password Done.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6f96bc3af7b37bc7c508c2e4631599bf",
    "u": "https://nm.tymyrddin.dev/docs/wireless/unauthorised",
    "t": "Unauthorised devices ",
    "c": "Unauthorised devices  Many routers allow for restricting which devices are allowed on the Wi-Fi network based on their MAC address. Enabling this feature can prevent attackers from connecting to a Wi-Fi network even if they stole its password. On larger networks this must be scripted for it becomes quickly undoable. If a router does not have this feature, you can maybe use the router manufacturer’s website to monitor for unauthorised devices joining or attempting to join your network, or install a tool like Kismet Wireless on a for the purpose dedicated device. Rogue WAPs: Immediately block the IP address of the WAP device at the switch it is connected to. This will probably give enough time to find the physical device while the rogue is trying to discover what happened to his or her wireless network connection. Non-wireless devices: If you find unknown non-wireless devices such as printers, servers, etc. immediately do an in-depth scan (for example by using Ettercap ) and determine exactly what the device’s function is. Block the device from the network until you can physically locate it and disconnect it.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "75c0b2aa674b677d7ef5eb8b2f7451cd",
    "u": "https://nm.tymyrddin.dev/docs/intranet/segmentation",
    "t": "LAN segmentation ",
    "c": "LAN segmentation  Some routers offer the option to create virtual local area networks (VLANs) inside a larger private network. Table of Contents LAN segmentation Benefits Plan Your VLAN Structure Configuring VLANs on a Router/Switch Option A: Using a VLAN-Capable Router (e.g., pfSense, OpenWRT, Ubiquiti) Option B: Using a managed switch Apply Network Isolation (Critical Step!) Test & verify isolation Benefits  Guest Network Security – Visitors can’t access your main devices. IoT Protection – Smart devices can’t be hacked from infected PCs. Reduced Attack Surface – Malware can’t spread between VLANs. Plan Your VLAN Structure  Decide which devices should be isolated and assign them to separate VLANs: VLAN 10 (Main LAN) – Trusted devices (PCs, smartphones, servers). VLAN 20 (Guest Wi-Fi) – Visitors’ devices (prevents access to main LAN). VLAN 30 (IoT Devices) – Smart TVs, cameras, thermostats (restricted from other VLANs). Configuring VLANs on a Router/Switch  Option A: Using a VLAN-Capable Router (e.g., pfSense, OpenWRT, Ubiquiti)  Create VLANs in the router’s admin panel: Assign VLAN IDs (e.g., 10, 20, 30). Set up DHCP scopes for each VLAN (e.g., 192.168.10.0/24, 192.168.20.0/24). Configure Firewall Rules: Allow Guest VLAN (20) → Internet only (block access to other VLANs). Allow IoT VLAN (30) → Internet only (block access to Main LAN). Option B: Using a managed switch  If your router doesn’t support VLANs, use a managed switch (e.g., TP-Link, Cisco, Netgear): Tag VLANs on switch ports: Port connected to router: Tagged (allows multiple VLANs). Port for Guest Wi-Fi AP: Untagged VLAN 20. Port for IoT devices: Untagged VLAN 30. Set up a VLAN-aware Wi-Fi Access Point (e.g., OpenWRT, Ubiquiti): Create separate SSIDs for each VLAN (e.g., Home-WiFi (VLAN 10), Guest-WiFi (VLAN 20)). Enable WPA2/WPA3 with a strong password for guest networks. Apply Network Isolation (Critical Step!)  To prevent devices in one VLAN from accessing another: Enable “Client Isolation” on the Guest Wi-Fi (blocks device-to-device communication). Use firewall rules to: Block VLAN 20 → VLAN 10 (Guests can’t access main LAN). Block VLAN 30 → VLAN 10 (IoT can’t reach PCs/servers). Allow VLAN 10 → VLAN 30 (Optional: If you need to control IoT devices from your main LAN). Example (pfSense firewall rule for Guest VLAN): Rule Source Destination Port Action 1 VLAN 20 Net Any * Allow (Internet only) 2 VLAN 20 Net VLAN 10 Net * Block Test & verify isolation  Connect a device to the Guest Wi-Fi and try pinging a device in the Main LAN (should fail). Check if IoT devices can still reach the internet (but not your PC). Additional Security for IoT Devices Disable UPnP (prevents IoT devices from opening insecure ports). Use a separate SSID (e.g., Home-IoT with WPA2). Block IoT devices from initiating outbound connections (only allow responses).",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0ff74de9b76e27d3ad7a110602ab1061",
    "u": "https://nm.tymyrddin.dev/docs/intranet/snort-box",
    "t": "Snortbox as IDS ",
    "c": "Snortbox as IDS  Table of Contents Snortbox as IDS Promiscuous mode setup Snort configuration for specific IP & port Option 1: BPF Filter (pre-capture filtering) Option 2: Snort Rule (post-capture Filtering) Verify & run Snort Port Mirroring/SPAN (If needed) To implement a Snort IDS (Intrusion Detection System) server that monitors traffic intended for existing central servers without having its own IP address, it will need to be configured in promiscuous mode and to apply specific rules to filter traffic. Promiscuous mode setup  The Snort box must operate in promiscuous mode to capture all network traffic, even packets not addressed to it. Ensure the network interface card (NIC) is configured to accept all traffic (Replace with your NIC, e.g., eth0 or ens33.): sudo ifconfig < interface > promisc Snort configuration for specific IP & port  Snort isto only inspect packets destined for existing central servers: Use BPF (Berkeley Packet Filter) filters to restrict capture to specific IPs and ports. Define Snort rules to match traffic intended for the central servers. Option 1: BPF Filter (pre-capture filtering)  Capture only traffic going to the central server’s IP (192.168.1.100) and port (80): sudo snort - i eth0 - c / etc / snort / snort . conf - l / var / log / snort - A console - n 1000 - B \"dst host 192.168.1.100 and dst port 80\" dst host 192.168.1.100 → Filters for packets sent to the central server’s IP. dst port 80 → Only captures traffic for port 80 (HTTP). Option 2: Snort Rule (post-capture Filtering)  For more granular rule-based inspection, define a custom Snort rule in /etc/snort/rules/local.rules : alert tcp any any -> 192.168.1.100 80 ( msg : \"HTTP Traffic to Central Server\" ; sid : 1000001 ; rev : 1 ;) This rule triggers an alert for any TCP traffic going to 192.168.1.100:80. Verify & run Snort  Test Snort configuration: sudo snort - T - c / etc / snort / snort . conf Run Snort in IDS mode: sudo snort - i eth0 - c / etc / snort / snort . conf - A fast - l / var / log / snort Port Mirroring/SPAN (If needed)  If the Snort box is on a separate switch port, ensure port mirroring (SPAN) is enabled to copy traffic from the central server’s port to the Snort interface.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "921a10990f3070fc2afd94c0188c2beb",
    "u": "https://nm.tymyrddin.dev/docs/internet/bgp-hijack",
    "t": "BGP hijacking mitigations ",
    "c": "BGP hijacking mitigations  BGP hijacking remains a critical threat to global internet routing. Below are practical mitigations, focusing on RPKI, BGPsec, real-time monitoring, and ISP cooperation. Technique Effectiveness Deployment difficulty RPKI (ROAs) High (origin validation) Medium (RIR coordination) BGPsec Very High (path validation) Low (limited support) Prefix Filtering (IRR) Medium Easy (manual effort) BGP Monitoring (ARTEMIS) High (auto-mitigation) Medium (setup required) MANRS Compliance High (industry cooperation) Medium (policy change) Table of Contents BGP hijacking mitigations Deploy RPKI (Resource Public Key Infrastructure) For Network Operators (AS Owners) For ISPs & transit providers Use BGPsec (Path Validation) Implement Prefix Filtering & IRR (Internet Routing Registry) Monitor BGP in Real-Time BGP Monitoring Tools Detect Anomalies via RTT & TTL Collaborate with MANRS (Mutually Agreed Norms for Routing Security) Deploy automated mitigation ARTEMIS (Open-Source) Cloudflare magic transit ISP best practices Deploy RPKI (Resource Public Key Infrastructure)  RPKI cryptographically validates that an AS (Autonomous System) is authorized to announce specific IP prefixes. How to Implement RPKI For Network Operators (AS Owners)  Create ROAs (Route Origin Authorizations) Use a RIR portal (ARIN, RIPE, APNIC) to authorize the prefixes. Example (RIPE NCC): Prefix : 192.0.2.0 / 24 Max Length : 24 ASN : AS12345 Publish ROAs in the RPKI repository to ensure global validation. For ISPs & transit providers  Enable RPKI Validation on BGP Routers Cisco IOS-XR: router bgp 65000 rpki server 203.0.113.1 port 323 address - family ipv4 unicast rpki origin - as validation enable BIRD (Linux): roa4 table r4 ; protocol rpki { roa4 { table r4 ; }; remote \"203.0.113.1\" port 323 ; } protocol bgp { ipv4 { import where roa_check ( r4 , net , bgp_path . last ) = ROA_VALID ; }; } FRRouting (RPKI-Validator): rpki rpki cache 203.0.113.1 323 ! address-family ipv4 unicast rpki validation Limitations of RPKI: Does not prevent path hijacks (only origin validation). Adoption is still incomplete (~40% of routes are RPKI-validated as of 2024). Use BGPsec (Path Validation)  BGPsec extends RPKI to validate the entire AS path (not just origin). Currently limited support (Cisco, Juniper, BIRD). Requires all ASes in the path to support it (rare in practice). Example (Cisco IOS-XR): router bgp 65000 bgpsec address - family ipv4 unicast bgpsec enable Implement Prefix Filtering & IRR (Internet Routing Registry)  Filter invalid prefixes at peering edges. Use IRRDB (Internet Routing Registry Database) to automate filtering. Example (BGP Peering Filter): ip prefix-list PL_ACCEPTED_ROUTES seq 10 permit 192.0.2.0/24 le 24 route-map RM_PEER_IN permit 10 match ip address prefix-list PL_ACCEPTED_ROUTES ! router bgp 65000 neighbor 203.0.113.2 route-map RM_PEER_IN in Monitor BGP in Real-Time  BGP Monitoring Tools  Tool Purpose BGPStream (RIS/Live) Detects hijacks in real-time. ARTEMIS (NVIDIA) Automated hijack mitigation. Cloudflare Radar Tracks routing anomalies. RIPE Stat Historical BGP data. Detect Anomalies via RTT & TTL  Round-Trip Time (RTT) changes → Possible hijack. Unexpected TTL jumps → Suspicious path alteration. Script Example (Python + scapy): from scapy.all import * def detect_ttl_anomaly ( pkt ): if IP in pkt and pkt [ IP ] . ttl != expected_ttl : print ( f \"TTL anomaly detected from { pkt [ IP ] . src } \" ) sniff ( filter = \"ip\" , prn = detect_ttl_anomaly ) Collaborate with MANRS (Mutually Agreed Norms for Routing Security)  Join MANRS to: Commit to anti-spoofing filters. Enable RPKI validation. Share real-time incident reports. Deploy automated mitigation  ARTEMIS (Open-Source)  Automatically withdraws hijacked routes. Integrates with RPKI/IRRDB. Cloudflare magic transit  Dynamically reroutes traffic during hijacks. ISP best practices  For Large ISPs: Mandate RPKI for all customers. Filter invalid prefixes at edges. For Small ISPs: At least implement prefix-lists (manual IRR filtering). Patch BGP routers (e.g., Junos, IOS vulnerabilities).",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c848f33b72068cebd86b0d2e1ea5f86f",
    "u": "https://nm.tymyrddin.dev/docs/wireless/certificates",
    "t": "Use certificate-based security ",
    "c": "Use certificate-based security  With certificate-based authentication, certificates are installed on the client systems who then present their certificate to the access point to gain access to the wireless network. Certificate-based authentication provides an extra layer of security over the wireless encryption protocols, because the encryption protocols have a number of tools used to crack the encryption keys.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "86699a212e5454a3299d64a7bc817f5c",
    "u": "https://nm.tymyrddin.dev/docs/internet/certificates",
    "t": "Certificate validation ",
    "c": "Certificate validation  Certificate validation has evolved significantly to combat BGP hijacking, phishing, and fraudulent certificate issuance. Below are techniques and how to implement them. | Technique Purpose How to Deploy | CAA Records | Restrict CA issuance | Add DNS CAA entries | | Expect-CT Header | Enforce CT logging | Nginx/Apache header | | Multi-Perspective Validation | Stop BGP attacks | Use Let’s Encrypt/Google | | EV Certificates | High-trust sites | Buy from DigiCert/Sectigo | | Short-Lived Certs | Reduce exposure | Use Let’s Encrypt | | CT Monitoring Detect rogue certs | Cert Spotter/Octo | Table of Contents Certificate validation Certificate Pinning (HPKP Replacement) Expect-CT Header (Certificate Transparency Enforcement) Certificate Authority Authorization (CAA) Trusted Types (Browser-Level pinning) Extended Validation (EV) certificates Certificate Transparency (CT) Multi-Perspective Domain Validation ACME DNS-01 Challenges (Not HTTP-01) Short-Lived Certificates (Automated Rotation) Post-Quantum certificates (Future-proofing) Certificate Pinning (HPKP Replacement)  HTTP Public Key Pinning (HPKP) was deprecated due to risks of accidental DoS. Expect-CT Header (Certificate Transparency Enforcement)  Forces browsers to check CT logs before accepting certificates. How to Implement: add_header Expect - CT \"enforce, max-age=86400, report-uri='https://example.com/report-ct'\" ; Browser Support: Chrome, Firefox, Edge. Certificate Authority Authorization (CAA)  Restricts which CAs can issue certs for your domain. DNS Record Example: example . com . CAA 0 issue \"letsencrypt.org\" example . com . CAA 0 issuewild \"digicert.com\" example . com . CAA 0 iodef \"mailto:security@example.com\" Validation: All CAs must check CAA records before issuance. Trusted Types (Browser-Level pinning)  Uses WebTrust-certified CAs with strict audits. Deployment: Choose CAs with Extended Validation (EV) or Organization Validation (OV). Avoid Domain Validation (DV) for critical services. Extended Validation (EV) certificates  Still relevant for high-security sites (banks, governments). Requirements: Legal entity verification (via government databases). Physical address confirmation. Manual review by the CA. How to Get an EV Certificate: Purchase from a WebTrust-accredited CA (DigiCert, Sectigo, GlobalSign). Submit legal documents (e.g., business license). Wait 3–7 days for manual approval. Certificate Transparency (CT)  Now mandatory for all certificates (not just EV). How to Monitor: Google’s CT Dashboard: https://transparencyreport.google.com/https/certificates Open Source Tools: Cert Spotter (SSLMate): Alerts for new certs. Facebook’s Octo (CT log monitor). Enforce CT via Headers: add_header Expect - CT \"enforce, max-age=86400\" ; Multi-Perspective Domain Validation  Defeats local BGP hijacks by validating domains from multiple global locations. Used by: Let’s Encrypt, Google, Cloudflare. How It Works: The CA checks your domain from AWS, Azure, and GCP regions. If all locations resolve correctly, validation passes. ACME DNS-01 Challenges (Not HTTP-01)  HTTP-01 is vulnerable to BGP hijacking. DNS-01 is safer (requires hijacking both BGP and DNS). How to Use (Certbot example): certbot certonly -- manual -- preferred - challenges dns - d example . com Short-Lived Certificates (Automated Rotation)  Reduces exposure time for stolen certs. Tools: Let’s Encrypt: 90-day certs (auto-renewed). Google’s Certificate Manager: 7-day certs. Post-Quantum certificates (Future-proofing)  NIST-approved algorithms (e.g., CRYSTALS-Dilithium). Early adopters: Cloudflare, Google.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5b4eb241a3662edc993ec1c040fb873f",
    "u": "https://nm.tymyrddin.dev/docs/wireless/encryption",
    "t": "Enable encryption ",
    "c": "Enable encryption  When configuring the access point for an encryption protocol, a key or passphrase is chosen, that is required by anyone who wants to connect to the network. Any clients who connect with that key are able to access the wireless network, and all the traffic from the wireless client to the access point is encrypted traffic. only those who know the passphrase, or encryption key, can connect. those clients that have been configured with the same encryption key are sending and receiving encrypted traffic with the access point. Use the strongest encryption protocol available  Wi-Fi Protected Access 2 (WPA2) and Personal Advanced Encryption Standard (AES) are currently the most secure router configurations available for home use. Advanced Encryption Standard (AES) is capable of using cryptographic keys of 128, 192, and 256 bits.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "16a0e42214d8c338fdb916a72d43d086",
    "u": "https://nm.tymyrddin.dev/docs/internet/rpki",
    "t": "Deploying Resource Public Key Infrastructure (RPKI) ",
    "c": "Deploying Resource Public Key Infrastructure (RPKI)  Table of Contents Deploying Resource Public Key Infrastructure (RPKI) Prerequisites Create ROAs (Route Origin Authorizations) Log in to Your RIR Portal Create a ROA Configure RPKI Validation on Routers Cisco IOS-XR Juniper JunOS BIRD (Linux) Set Up an RPKI Validator (Optional) Monitor RPKI status Check ROA coverage Test Prefix validation Enforce RPKI in BGP Policies Verify Deployment Prerequisites  Access to the RIR account (ARIN, RIPE, APNIC, etc.). Admin access to the BGP routers (Cisco, Juniper, BIRD, FRR). Public ASN and IP prefixes (must be registered in the RIR). Create ROAs (Route Origin Authorizations)  ROAs cryptographically authorize your ASN to announce specific prefixes. Log in to Your RIR Portal  RIPE NCC: https://my.ripe.net ARIN: https://arin.net APNIC: https://myapnic.net Create a ROA  Navigate to RPKI → ROAs. Add a new ROA: Prefix: 192.0.2.0/24 (your IP range) Max Length: 24 (or longer if sub-delegating) ASN: AS12345 (your AS number) Sign and publish the ROA (takes ~5 mins to propagate). Configure RPKI Validation on Routers  Cisco IOS-XR  router bgp 65000 rpki server tcp 203.0.113.1 # RPKI validator (e.g., Cloudflare/RIPE) refresh-time 30 shutdown ! address-family ipv4 unicast rpki origin-as validation enable ! ! Test validation: show bgp ipv4 unicast 192.0.2.0 / 24 # Look for rpki: Valid in the output. Juniper JunOS  set routing - options validation group RPKI - VALIDATOR session 203.0.113.1 port 323 set protocols bgp group EBGP import VALIDATE_ROUTES set policy - options policy - statement VALIDATE_ROUTES term RPKI - VALID from protocol bgp term RPKI - VALID then validation state valid accept term RPKI - INVALID then validation state invalid reject BIRD (Linux)  roa4 table r4 ; protocol rpki { roa4 { table r4 ; }; remote \"203.0.113.1\" port 323 ; } protocol bgp { ipv4 { import where roa_check ( r4 , net , bgp_path . last ) = ROA_VALID ; }; } Set Up an RPKI Validator (Optional)  If you want your own validator (instead of public ones like Cloudflare/RIPE): # Install Routinator (Linux) curl - sSL https : // github . com / NLnetLabs / routinator / releases / latest / download / routinator - install . sh | bash routinator init -- accept - arin - rpa routinator server -- rtr 203.0.113.1 : 323 -- http 8080 Point routers to your validator ( 203.0.113.1:323 ). Monitor RPKI status  Check ROA coverage  RIPE NCC RPKI Dashboard: https://rpki.groot.app Cloudflare RPKI Explorer: https://rpki.cloudflare.com Test Prefix validation  # Linux (RPKI-client) rpki - client - n - j | jq '.roas[] | select(.prefix == \"192.0.2.0/24\")' Should show your ASN as valid. Enforce RPKI in BGP Policies  Reject invalid routes from peers: Cisco IOS-XR: route - policy RPKI - FILTER if validation - state is invalid then drop endif end - policy router bgp 65000 neighbor 203.0.113.2 address - family ipv4 unicast route - policy RPKI - FILTER in FRRouting (Linux): bgp community - list standard RPKI - INVALID seq 5 permit 0x4300 : 0xFFFFFFFF route - map RM - PEER - IN deny 10 match community RPKI - INVALID route - map RM - PEER - IN permit 20 router bgp 65000 neighbor 203.0.113.2 route - map RM - PEER - IN in Verify Deployment  Announce a test prefix (198.51.100.0/24) without a ROA. Check if neighbors reject it: show bgp ipv4 unicast 198.51.100.0 / 24 Should show rpki: Invalid and be dropped.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "39f247fdbfab62c78cf2b00e54440a89",
    "u": "https://nm.tymyrddin.dev/docs/internet/pqc",
    "t": "Adopting Post-Quantum Cryptography (PQC) ",
    "c": "Adopting Post-Quantum Cryptography (PQC)  Table of Contents Adopting Post-Quantum Cryptography (PQC) For Developers: Integrate PQC Libraries For Sysadmins: Prepare for PQ migration For Developers: Integrate PQC Libraries  Choose a Library: AWS Libcrypto (PQ-enabled OpenSSL fork). OpenQuantumSafe (OQS): Supports NIST-standardized algorithms (Kyber, Dilithium). git clone https : // github . com / open - quantum - safe / liboqs cd liboqs && mkdir build && cd build cmake .. && make Hybrid Key Exchange Example (OQS + TLS 1.3): # Python (using OQS-OpenSSL) from socket import socket , AF_INET , SOCK_STREAM from ssl import PROTOCOL_TLS_CLIENT , SSLContext context = SSLContext ( PROTOCOL_TLS_CLIENT ) context . set_ciphers ( 'KYBER512:RSA' ) # Hybrid PQ + classical with socket ( AF_INET , SOCK_STREAM ) as sock : with context . wrap_socket ( sock , server_hostname = 'example.com' ) as ssock : ssock . sendall ( b \"GET / HTTP/1.1 \\r\\n Host: example.com \\r\\n\\r\\n \" ) Test with Cloudflare’s PQ-enabled Services: curl -- curves X25519 : Kyber512 https : // pq . cloudflare . com For Sysadmins: Prepare for PQ migration  Monitor NIST’s PQC Standardization (2024 finalists: Kyber, Dilithium). Audit systems for PQ readiness using: nmap -- script ssl - enum - ciphers - p 443 example . com | grep \"PQ\"",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f1f18ee0a14c1dffdc5acac38252b695",
    "u": "https://nm.tymyrddin.dev/docs/openwrt/nethogs",
    "t": "Nethogs ",
    "c": "Nethogs  NetHogs is a small ‘net top’ tool which instead of breaking the traffic down per protocol or per subnet, groups bandwidth by process. If there is suddenly a lot of network traffic, you can see which PID is causing this. This makes it easy to identify programs that have gone wild and are suddenly taking up your bandwidth.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1ae1caa8e19e91047fb7907075d5ff27",
    "u": "https://nm.tymyrddin.dev/docs/wireless/broadcasting",
    "t": "Disable SSID broadcasting ",
    "c": "Disable SSID broadcasting  The access point is, by default, configured to broadcast that SSID name out on the network. This means that clients can browse the network to find the SSID even after having changed the SSID. To lock down the SSID a bit more, configure the access point to not broadcast the SSID. This means that clients will not see your wireless network when they browse for wireless networks. May this not lead to a false sense of security. It is not really hidden .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7cfaecf17f60f07f7a6e1281ae14b4ff",
    "u": "https://nm.tymyrddin.dev/docs/openwrt/portknocking",
    "t": "Portknocking ",
    "c": "Portknocking  Portknocking is establishing a host-to-host communication across closed ports by means of “secret knocks”. Data is transmitted to closed ports and once a monitoring daemon detects an agreed upon secret knock, the device unlocks the door and intercepts the information without sending a receipt to the sender. The information can be encoded and encrypted, into a sequence of port numbers. For example, after receiving pre-specified sequenced connection attempts on a set of closed ports, a daemon of the OS on the router adds a host source IP to the allowed address list and the sender (client) can connect to the router. On OpenWrt, the Linux package ‘’knockd’’ can be used. Knockd is a port knocking daemon, that listens for specific packets on specific ports, and will run a command when it hears the correct sequence. It is used to hide ports from public view for better privacy/security. And it isn’t. Its a security hole used by malware. Resources  Portknock server , OpenWrt How to Use Port Knocking on Linux (and Why You Shouldn’t) .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3ef96b12901e79dbb8fc9a1123157095",
    "u": "https://nm.tymyrddin.dev/docs/basics/off",
    "t": "Turn it off ",
    "c": "Turn it off  Consider disabling it during travel or extended periods when you will not need to be online. Depending on manufacturer of the WLAN router, it may be impractical to turn the Wi-Fi signal off and on frequently. Some routers have a button for quickly turning off Wi-Fi and some even offer the option to configure a wireless schedule that will automatically disable the Wi-Fi at specified times.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "42fb986fb44b45f2915346c26a424647",
    "u": "https://nm.tymyrddin.dev/docs/internet/gdpr",
    "t": "GDPR compliance checklist ",
    "c": "GDPR compliance checklist  Requirement What to Check Lawful Basis for Processing Do you have consent, contract, or legitimate interest for data collection? Data Minimization Are you collecting only necessary data? User Rights Can users access, correct, or delete their data? Data Protection by Design Are security measures (encryption, access controls) implemented? Breach Notification Can you detect and report breaches within 72 hours? Data Transfer Safeguards If transferring data outside the EU, are SCCs or GDPR adequacy decisions in place? DPO (Data Protection Officer) Is a DPO appointed (if required)? Table of Contents GDPR compliance checklist Step-by-Step GDPR compliance check Data mapping & inventory Legal basis & consent User Rights (Articles 15-22) Security Measures Third-Party Compliance Documentation & accountability Free GDPR compliance tools Step-by-Step GDPR compliance check  Data mapping & inventory  Identify all personal data you collect (names, emails, IPs, cookies). Document processing purposes (e.g., marketing, analytics). Track data flows (where it’s stored, who accesses it). Tool: Use a Data Protection Impact Assessment (DPIA) template ( EU GDPR DPIA Guidelines ). Legal basis & consent  Explicit Consent (for marketing, cookies): Must be opt-in (no pre-ticked boxes). Users must be able to withdraw consent easily. Legitimate Interest (e.g., fraud prevention): Conduct a Legitimate Interest Assessment (LIA). Check: Are cookie banners GDPR-compliant? Is consent logged (timestamp, user ID)? User Rights (Articles 15-22)  Verify users can: Access their data (DSAR – Data Subject Access Request). Rectify incorrect data. Erase data (“Right to be Forgotten”). Port data to another service. Object to processing (e.g., opt out of profiling). Tool: Automated DSAR system (e.g., OneTrust, Osano). Privacy dashboard (e.g., “My Account” page). Security Measures  Encryption (data at rest & in transit). Access Controls (role-based permissions). Pseudonymization (where possible). Regular security audits (ISO 27001, SOC 2). Check: Do you have a breach response plan? Are employees trained on data protection policies? Third-Party Compliance  Review vendors (cloud providers, SaaS) for GDPR compliance. Sign Data Processing Agreements (DPAs) with processors. Ensure SCCs (Standard Contractual Clauses) for non-EU transfers. Tool: Vendor risk assessment (e.g., TrustArc). Documentation & accountability  Privacy Policy (clear, GDPR-compliant). Records of Processing Activities (ROPA). Data Protection Officer (DPO) if required. Check: Is your privacy policy updated? Are audit logs maintained? Free GDPR compliance tools  Tool Purpose GDPR Checklist Self-assessment checklist Cookiebot Cookie consent management OneTrust DSAR automation Microsoft Compliance Manager Cloud compliance tracking",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c15a9419675085e460de41111225c798",
    "u": "https://nm.tymyrddin.dev/docs/basics/management",
    "t": "Protect router management ",
    "c": "Protect router management  Most routers offer the option to view and modify their settings over the internet. For most users, managing the router from outside the home network is not necessary. Turn this feature off if not needed. If remote management is needed, consider using a Virtual Private Network (VPN) solution to establish a secure channel to the local network first and then access the router’s interface. Even inside the home network, if possible, restrict which IP (Internet Protocol) addresses can manage the router. If this option is available, it’s best to allow access from a single IP address that is not part of the pool of IP addresses assigned to computers via DHCP (Dynamic Host Configuration Protocol). For example, configure the router’s DHCP server to assign IP addresses from 192.168.0.1 to 192.168.0.50 and then configure the web interface to only allow access from 192.168.0.53 . That computer can then be manually configured to use that address only when it is to connect to the router. If not using command-line, turn on HTTPS access to the router interface, if available, and always log out when done. Use the browser in incognito or private mode when working with the router so that no session cookies are left behind and never allow the browser to save the router’s username and password.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "71893e1a964826a00d342c8b8d7003f7",
    "u": "https://nm.tymyrddin.dev/docs/intranet/beyond",
    "t": "Beyond basic protections ",
    "c": "Beyond basic protections  Category Mitigations Segmentation VLANs, Zero Trust, SDN Monitoring NetFlow, TLS inspection, SIEM Endpoint Security NAC, Host firewalls, EDR Threat Hunting Honeypots, EDR, deception tech Physical Security Disabled ports, locked racks, supply chain checks Wireless WPA3-Enterprise, rogue AP detection Table of Contents Beyond basic protections Network segmentation & Zero Trust Micro-Segmentation Software-Defined Networking (SDN) Advanced traffic monitoring NetFlow/sFlow analysis Encrypted traffic inspection Endpoint & server hardening Network Access Control (NAC) Host-Based firewalls Disable legacy protocols Threat hunting & deception Honeypots Endpoint Detection & Response (EDR) Physical & supply chain security Secure Network Hardware Firmware integrity checks Logging & incident response Centralized SIEM Automated Response Wireless Security (If applicable) WPA3-Enterprise Rogue AP detection And more Network segmentation & Zero Trust  Micro-Segmentation  Isolate critical systems (e.g., Whatever, HR) using VLANs or private VLANs (PVLANs). Example (Cisco): vlan 10 name Whatever private - vlan primary private - vlan association 20 Use Zero Trust principles: Never trust, always verify (even inside the LAN). Enforce device authentication (802.1X, certificates). Software-Defined Networking (SDN)  Centralized traffic control (e.g., OpenFlow) to detect lateral movement. Tools: OpenDaylight, VMware NSX. Advanced traffic monitoring  NetFlow/sFlow analysis  Detect anomalies (e.g., data exfiltration, lateral movement). Tools: Elasticsearch + Packetbeat (log analysis). Darktrace (AI-based anomaly detection). Encrypted traffic inspection  Decrypt & inspect TLS (for malware C2, data leaks). Tools: Palo Alto SSL Decryption, Squid + SSL bump. Caution: Privacy/legal implications. Endpoint & server hardening  Network Access Control (NAC)  Allow only compliant devices (e.g., updated OS, antivirus). Tools: Cisco ISE, Forescout, PacketFence. 802.1X/EAP-TLS for wired/wireless auth. Host-Based firewalls  Enforce least privilege (block unnecessary inbound/outbound). Windows: Set-NetFirewallProfile -Enabled True Linux: ufw default deny incoming Disable legacy protocols  Block SMBv1, LLMNR, NetBIOS (common attack vectors): Disable - WindowsOptionalFeature - Online - FeatureName smb1protocol Threat hunting & deception  Honeypots  Deploy fake servers to detect intruders. Tools: CanaryTokens, T-Pot. Example: Fake SMB share with logging. Endpoint Detection & Response (EDR)  Use EDR to monitor processes, memory, network for malware. Tools: CrowdStrike, SentinelOne, Wazuh (open-source). Physical & supply chain security  Secure Network Hardware  Disable unused switch ports: interface range Gig1 / 0 / 1 - 24 shutdown Lock server racks (prevent tampering). Firmware integrity checks  Verify router/switch firmware (no backdoors): sha256sum firmware . bin | grep EXPECTED_HASH Logging & incident response  Centralized SIEM  Aggregate logs (firewall, DNS, endpoints). Tools: Splunk, Graylog, ELK Stack. Alert on: Brute-force, unusual logins. Automated Response  Block malicious IPs automatically: # Fail2Ban rule for SSH [ sshd ] enabled = true banaction = iptables - multiport Wireless Security (If applicable)  WPA3-Enterprise  Require certificates (not passwords). Example (FreeRADIUS): Auth - Type = EAP Rogue AP detection  Tools: Kismet, AirDefense. And more  Audit your network with nmap -sV 192.168.1.0/24 . Deploy a SIEM (start with Wazuh for free). Test defenses with Caldera (MITRE ATT&CK simulations).",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "670599ed1ad9306c44cd0427ed43de81",
    "u": "https://nm.tymyrddin.dev/docs/internet/critical",
    "t": "Critical internet-wide mitigations ",
    "c": "Critical internet-wide mitigations  Priority Mitigation Key Players 1 RPKI/BGPsec ISPs, ICANN, Governments 2 QUIC/HTTP3 Google, Cloudflare, Mozilla 3 Post-Quantum TLS NIST, Cloudflare, AWS 4 IoT Security Labels EU, FCC, Device Manufacturers 5 DDoS Filtering (BCP38) Tier-1 ISPs (e.g., Lumen, NTT) Table of Contents Critical internet-wide mitigations Universal adoption of RPKI & BGPsec QUIC/HTTP3 Encryption by default Post-Quantum Cryptography (PQC) migration Mandatory DDoS mitigation for all networks IoT security standards Decentralized identity (Beyond certificates) AI-Powered threat detection Global Cyber warfare treaties Privacy-Enhancing technologies (PETs) Ethical hacktivism legalisation Why these mitigations matter Universal adoption of RPKI & BGPsec  Problem: BGP hijacking still exploits weak origin validation. Solution: Mandate RPKI (Route Origin Authorizations) for all ISPs. Deploy BGPsec for full path validation (beyond just origin checks). Policy push: Governments/ICANN should enforce compliance. QUIC/HTTP3 Encryption by default  Problem: ISPs/attackers sniff unencrypted DNS/HTTP traffic. Solution: Deprecate plaintext protocols (HTTP, DNS-over-UDP). Enforce DoH (DNS-over-HTTPS) & DoT (DNS-over-TLS). Browser-level enforcement: Chrome/Firefox should block HTTP/1.1. Post-Quantum Cryptography (PQC) migration  Problem: Quantum computers will break RSA/ECC encryption. Solution: Adopt NIST-standardized PQC algorithms (e.g., CRYSTALS-Kyber, Dilithium). Hybrid certificates (e.g., Cloudflare’s “Post-Quantum TLS”). Protocol upgrades: TLS 1.3 + PQC key exchange. Mandatory DDoS mitigation for all networks  Problem: Volumetric attacks cripple unprotected networks. Solution: Network-level filtering: BCP38 (anti-spoofing) compliance. Anycast scrubbing centers (e.g., Cloudflare, Akamai). ISP collaboration: Real-time attack blackholing. IoT security standards  Problem: Default credentials, no updates, botnet recruitment. Solution: Legally mandated security labels (like EU’s Cyber Resilience Act). VLAN isolation + MAC filtering for IoT devices. Automated CVE patching (e.g., Microsoft’s Azure Sphere model). Decentralized identity (Beyond certificates)  Problem: Centralized CAs are single points of failure. Solution: Web3 DID (Decentralized Identifiers) + VCs (Verifiable Credentials). Blockchain-anchered PKI (e.g., Ethereum ENS + SSL). AI-Powered threat detection  Problem: Human analysts can’t keep up with 0-day exploits. Solution: Network-wide anomaly detection (e.g., Darktrace, CrowdStrike). Automated patch deployment (e.g., GitGuardian for secrets). Global Cyber warfare treaties  Problem: Nation-state attacks (e.g., SolarWinds, NotPetya). Solution: Geneva Convention for cyberspace (ban critical infrastructure attacks). Attribution transparency: UN-backed forensic teams. Privacy-Enhancing technologies (PETs)  Problem: Mass surveillance & metadata leaks. Solution: Oblivious DNS (ODoH) → Hide DNS queries from ISPs. SNI Encryption (e.g., ECH in TLS 1.3). Mandatory Tor/I2P support for sensitive services. Ethical hacktivism legalisation  Problem: Bug bounty programs are reactive, not proactive. Solution: “Right to Repair” for cybersecurity: Allow reverse-engineering. Safe harbor laws for white-hat hackers. Why these mitigations matter  Without RPKI: BGP hijacks will keep stealing cryptocurrency/traffic. Without PQC: Quantum computers will decrypt all historic TLS traffic. Without IoT Laws: Botnets will grow (Mirai 2.0).",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1990931f443c9a7b9ad2e9fc3827aebb",
    "u": "https://nm.tymyrddin.dev/docs/intranet/add-nat",
    "t": "Secured NAT router ",
    "c": "Secured NAT router  Threat Solution Default exploits Flash OpenWRT/pfSense Weak firewall Default-deny + IP whitelisting Brute-force SSH Key auth + fail2ban Remote attacks VPN-only access ARP spoofing DAI (if managed switch) Table of Contents Secured NAT router Benefits When and where is this useful? Flash custom firmware (Replace stock OS) Harden the firewall Default-Deny policy Restrict LAN → Router access Block WAN ping & scans Secure Router access Change default credentials Enable SSH (With Key Auth) Restrict Web Admin access Enable VPN-Only remote access Set Up WireGuard (OpenWRT) Block All WAN admin access Monitor & log attacks Enable logging Intrusion Detection (Snort/Suricata) Physical security A second NAT router can be used on the internal LAN to create a second, more secure LAN. Benefits  Machines on the more-or-less-secure internal LAN can access the internet, but they are protected by the External NAT from most malwares. Machines on the more-secure internal LAN can also access the internet, first by going out through the Internal NAT and then the External NAT. Because the more-or-less-secure internal LAN is on the WAN side of the Internal NAT, machines on the more-or-less-secure internal LAN are unable to freely access the machines on the more-secure LAN behind the Internal NAT. Machines behind the Internal NAT can access the machines in the middle, but NOT the other way around. When and where is this useful?  For isolating a router’s Demilitarised Zone (DMZ) network and servers. Isolating an open or low-security wireless access point. Protecting one ‘’high-value’’ machine from the rest of the network. Flash custom firmware (Replace stock OS)  Stock router firmware often has unpatched vulnerabilities. Replace it with a security-focused OS: Recommended Firmware Options: Firmware Best For Key Features OpenWRT Most routers Firewall, VPN, IDS, QoS DD-WRT Broadcom-based routers VLANs, VPN, advanced NAT pfSense (x86 routers) High security Enterprise firewall, IDS/IPS OPNsense User-friendly Modern UI, Zenarmor (NGFW) Installation Steps Check compatibility on the firmware’s website (e.g., OpenWRT Table of Hardware ). Backup stock firmware (in case of rollback). Flash via TFTP/recovery mode (varies by router). Reset to defaults after flashing. Harden the firewall  Default-Deny policy  Block all inbound traffic (only allow replies to outbound requests): # OpenWRT (via `uci`) uci set firewall . @defaults [ 0 ] . input = \"REJECT\" uci set firewall . @defaults [ 0 ] . output = \"ACCEPT\" uci set firewall . @defaults [ 0 ] . forward = \"REJECT\" uci commit && service firewall restart Restrict LAN → Router access  Allow only admin IPs to access the router’s admin panel: # OpenWRT example (allow only 192.168.1.100) uci add firewall rule uci set firewall . @rule [ - 1 ] . src = 'lan' uci set firewall . @rule [ - 1 ] . dest_port = '80,443,22' uci set firewall . @rule [ - 1 ] . proto = 'tcp' uci set firewall . @rule [ - 1 ] . target = 'ACCEPT' uci set firewall . @rule [ - 1 ] . src_ip = '192.168.1.100' uci commit && service firewall restart Block WAN ping & scans  Disable ICMP (ping) and stealth-mode the router: uci set firewall . @rule [ 0 ] . enabled = \"0\" # Disable ping uci commit && service firewall restart Secure Router access  Change default credentials  Set a strong password (use pwgen 16 1 for a random one). Disable default admin accounts (e.g., admin:admin). Enable SSH (With Key Auth)  Generate SSH keys on PC: ssh - keygen - t ed25519 - f ~/. ssh / router_key Copy the public key to the router: ssh - copy - id - i ~/. ssh / router_key . pub root @ 192.168.1.1 Disable password login: uci set dropbear . @dropbear [ 0 ] . PasswordAuth = \"off\" uci commit && service dropbear restart Restrict Web Admin access  Allow only via LAN/VPN (disable WAN access): uci set uhttpd . main . listen_http = \"192.168.1.1:80\" uci set uhttpd . main . listen_https = \"192.168.1.1:443\" uci commit && service uhttpd restart Enable VPN-Only remote access  Instead of exposing the router to the internet, require VPN access: Set Up WireGuard (OpenWRT)  Install WireGuard: opkg install wireguard - tools Generate keys: wg genkey | tee privatekey | wg pubkey > publickey Configure /etc/config/network : config interface 'wg0' option proto 'wireguard' option private_key '<PRIVATE_KEY>' list addresses '10.0.0.1/24' config wireguard_wg0 option public_key '<CLIENT_PUBKEY>' option allowed_ips '10.0.0.2/32' Block All WAN admin access  Ensure no ports (22, 80, 443) are forwarded to the router. Monitor & log attacks  Enable logging  Log firewall drops (OpenWRT): uci set firewall . @defaults [ 0 ] . log = \"1\" uci commit && service firewall restart View logs: logread - f | grep firewall Intrusion Detection (Snort/Suricata)  Install on OpenWRT/pfSense: opkg install suricata suricata - c / etc / suricata / suricata . yaml - i br - lan Physical security  Disable unused ports (USB, Telnet, FTP). Place in a locked cabinet (prevents tampering).",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "85831946c3a3ce93e020b9de744b0768",
    "u": "https://nm.tymyrddin.dev/docs/intranet/nftables",
    "t": "NFTables ",
    "c": "NFTables  Table of Contents NFTables For NAT For NAT  The ARP address family only supports the input and output hook The bridge address family only supports the input, forward and output hook? Masquerading is a kind of source NAT. nftables masquerade will not work if iptables masquerade is in the kernel (unload or disable it). flush ruleset table ip nat { # Destination NAT chain prerouting { type nat hook prerouting priority 100; policy accept; } # Source NAT. Masquerading is a kind of source NAT. # Can only be used in chains of type nat and only works in the output path. # Make sure masquerading is enabled in the kernel (true if using default kernel) # nftables masquerade will not work if iptables masquerade is in the kernel (unload or disable it). chain postrouting { type nat hook postrouting priority 100; policy accept; oifname {enp3s0, tun0} masquerade } }",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8d1faf5dbeb833bebb7920465a3c0962",
    "u": "https://nm.tymyrddin.dev/docs/wireless/defaults",
    "t": "Change router defaults ",
    "c": "Change router defaults  Many routers, including wireless access points, are pre-configured with a default administrator passwords to simplify setup and attackers constantly try to break into devices using these publicly known credentials. They may be readily available on the internet, or may even be physically labelled on the router itself. Sometimes referred to as the “network name,” a service set identifier (SSID) is a unique name that identifies a particular wireless local area network (WLAN, Wireless home network). All wireless devices on a WLAN must use the same SSID to communicate with each other. Because the device’s default SSID typically identifies the manufacturer or the actual device, an attacker can use this to identify the device and exploit any of its known vulnerabilities. Make your SSID unique and do not tie it to your identity or location—information that makes it easier for the attacker to identify your network.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7e1f801aead006732365c1515540c0d9",
    "u": "https://nm.tymyrddin.dev/docs/wireless/wps",
    "t": "Notes on WPS ",
    "c": "Notes on WPS  The Wi-Fi Protected Setup (WPS) protocol in home routers is like labelling it “HACK ME!”. WPS was a bad idea to begin with, has a big design flaw in PIN authentication, comes from a source that is not trusted, is very complicated and as a result there have been multiple instances of poorly written, buggy implementations. The design flaw in the WPS specification for PIN authentication significantly reduces the time required for an adversary to brute force an entire PIN , because it informs them when the first half of the eight-digit PIN is correct. Many routers lack a lockout policy after a certain number of failed attempts to guess the PIN, making a brute-force attack much more likely to occur. Check for WPS  The feature that scans for nearby networks on operating systems like OS X, iOS, Windows, Android and Chrome OS does not report on WPS. On Windows, the free and portable WifiInfoView includes reporting on WPS. When WPS is enabled, the status is either Configured, Not Configured, or Locked. A value of “No” means WPS is not enabled. On Android, the Wi-Fi Analyzer app shows if WPS is supported for each SSID detected by displaying an On/Off status. If WPS is enabled, it displays “WPS”, otherwise it displays nothing. Warnings  Wi-Fi Direct uses WPS to make the connection using either Near Field Communication, a PIN, Bluetooth or a button press. How seven mesh routers deal with Wi-Fi Protected Setup (WPS)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5e68da7bc82699b315e534025a00f1d8",
    "u": "https://nm.tymyrddin.dev/docs/intranet/dns",
    "t": "DNS mitigations ",
    "c": "DNS mitigations  Threat Mitigation Cache Poisoning DNSSEC, DNS query logging Unauthorized DNS Servers Firewall whitelisting, NAC Malicious Domains pDNS, Threat Intelligence Feeds DNS Exploits IDS/IPS rules (Snort/Suricata) Rogue DNS Servers Network scanning (nmap), Firewall blocking Table of Contents DNS mitigations DNS Server audit trails & logging Whitelist valid DNS servers DNSSEC (DNS security extensions) Block malicious DNS exploits Monitor & detect suspicious DNS activity Intrusion Detection Systems (IDS) for DNS Block Unauthorized DNS Services DNS Server audit trails & logging  Enable detailed DNS query logging on all resolvers (like BIND, Unbound, Windows DNS). Example (BIND named.conf): logging { channel query_log { file \"/var/log/named/queries.log\" versions 3 size 5 m ; severity dynamic ; print - time yes ; }; category queries { query_log ; }; }; Monitor logs for anomalies (e.g., unexpected domains, unusual query volumes). Use tools like dnstop or dnsmon for real-time DNS traffic analysis. Whitelist valid DNS servers  Create a firewall whitelist of allowed DNS resolvers (like internal DNS + trusted public DNS like 1.1.1.1, 8.8.8.8). Examples (Linux iptables): iptables - A OUTPUT - p udp -- dport 53 - j DROP # Block all outgoing DNS iptables - A OUTPUT - p udp -- dport 53 - d 1.1.1.1 - j ACCEPT # Allow Cloudflare iptables - A OUTPUT - p udp -- dport 53 - d 8.8.8.8 - j ACCEPT # Allow Google Use NAC (Network Access Control) to enforce DNS server restrictions. DNSSEC (DNS security extensions)  Prevents cache poisoning by cryptographically signing DNS records. Enable DNSSEC on your resolver: BIND (named.conf): options { dnssec - validation auto ; }; Unbound (unbound.conf): server : module - config : \"validator iterator\" Verify DNSSEC validation: dig + dnssec example . com Block malicious DNS exploits  Firewall rules to block known malicious DNS patterns (like DNSChanger, OSX/MaMi). Example (Suricata IDS rule): alert dns any any -> any any ( msg : \"DNS Exploit Attempt\" ; content : \"|6d 61 6d 69|\" ; nocase ; sid : 1000001 ; rev : 1 ;) Use threat intelligence feeds like AlienVault OTX, Cisco Talos, to block malicious domains. Monitor & detect suspicious DNS activity  Traffic Analyzer Scripts like Python + dpkt): import dpkt , socket def analyze_dns ( pcap ): for ts , buf in pcap : eth = dpkt . ethernet . Ethernet ( buf ) if isinstance ( eth . data , dpkt . ip . IP ): ip = eth . data if isinstance ( ip . data , dpkt . udp . UDP ): udp = ip . data if udp . dport == 53 : # DNS queries dns = dpkt . dns . DNS ( udp . data ) print ( f \"Query: { dns . qd [ 0 ] . name } \" ) Passive DNS Replication (pDNS) Use tools like dnstap or passivedns to log historical DNS data. Helps track newly registered malicious domains. Intrusion Detection Systems (IDS) for DNS  Snort /Suricata rules for DNS anomalies: alert udp any any -> any 53 ( msg : \"Suspicious DNS Query\" ; content : \"|00 01 00 00|\" ; depth : 4 ; sid : 1000002 ;) Zeek (Bro) DNS monitoring: zeek - i eth0 - C dns . log Logs all DNS queries for later analysis. Block Unauthorized DNS Services  Detect rogue DNS servers with nmap: nmap - sU - p 53 192.168.1.0 / 24 Block unauthorized DNS servers at the firewall level.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f6aae88d74a44eb57ed0f386d9ca7bef",
    "u": "https://nm.tymyrddin.dev/docs/basics/services",
    "t": "Services audit ",
    "c": "Services audit  Questions  Is this service really necessary? Is the service running on interfaces that it doesn’t need to? Is it better to bound it to a single IP? Do the firewall rules allow legitimate traffic to pass through to this service? Do the firewall rules block traffic that is not legitimate? Is there some way security alerts about vulnerabilities for each of these services can be received? Use netstat (if not available install net-tools): $ sudo netstat -plunt Pay attention to Proto , Local Address , and PID/Program name. If the address is 0.0.0.0 , then the service is accepting connections on all interfaces. Disable services when not needed  Make services like Telnet, Universal Plug and Play (UPnP), Secure Shell (SSH), and Home Network Administration Protocol (HNAP) unreachable from the internet. Turn them off on the local network if they’re not needed. Universal Plug and Play (UPnP) is a handy feature that allows networked devices to seamlessly discover and establish communication with each other on the network. The UPnP feature eases initial network configuration and is also a security risk. Malware within a network can use UPnP to bypass a router’s firewall and allow attackers to take control of devices remotely to spread malware to other devices. Get your router’s IP address $ host myip.opendns.com resolver1.opendns.com Scan your router’s public IP address for open ports.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9cf916ae487cf60cb6e43ce4dd375795",
    "u": "https://nm.tymyrddin.dev/docs/wireless/restrict-by-mac",
    "t": "Restrict by MAC address ",
    "c": "Restrict by MAC address  Configure the access point with a list of MAC addresses that are allowed to connect to the wireless network. Once you have configured MAC filtering on the access point, any system that does not have a listed MAC address is denied access to the network when it attempts to connect. MAC filtering by itself is not a very secure feature. An adversary could use a program such as Kismet to view a list of clients and their MAC addresses that are connected to your network. With a list of valid MAC adresses, the adversary could then spoof an address.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "27d89c755d5a05cfcd30c867f175fbd7",
    "u": "https://nm.tymyrddin.dev/docs/basics/firmware",
    "t": "Upgrade router firmware ",
    "c": "Upgrade router firmware  Check the router provider’s or manufacturer’s website regularly to check you are running the latest firmware version. Firmware updates often enhance product performance, fix flaws, and address security vulnerabilities. Some routers allow checking for firmware updates directly from the interface and some routers have the option to turn on automatic updates. And check first. Some updates may involve new services like WPS (which sometimes are best disabled).",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f3a86b973cc7b055af3c250190356bc0",
    "u": "https://nm.tymyrddin.dev/docs/intranet/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Intranet security mitigations are proactive measures to protect internal networks (LANs) from threats like lateral movement, data exfiltration, insider attacks, and compromised devices. Unlike the public internet, intranets often assume implicit trust, making them prime targets for attackers who breach perimeter defenses. Why?  Prevent Lateral Movement: Attackers who breach one device (e.g., via phishing) can exploit weak internal controls to spread. Stop Insider Threats: Malicious or negligent employees can leak data or sabotage systems. Contain Compromised Devices: IoT devices, legacy systems, and unpatched endpoints are common attack vectors. Meet Compliance: Regulations (e.g., NIST, GDPR) require segmentation and access controls. How?  Secured NAT router LAN segmentation ARP mitigations DNS mitigations NFTables Snortbox as IDS Beyond basic protections",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "fce6c0f92f608bf72ef1b97760dbe4c3",
    "u": "https://nm.tymyrddin.dev/docs/basics/port-forwarding",
    "t": "Port forwarding ",
    "c": "Port forwarding  Port forwarding or port mapping is an application of network address translation (NAT) that redirects a communication request from one address and port number combination to another while the packets are traversing a network gateway, such as a router or firewall. Services running on a computer behind a router are not to be reached from the internet, unless port forwarding rules are defined on the router. Many software programs will attempt to open ports in the router automatically via UPnP. If UPnP is disabled, rules can be added manually and some routers offer the option to specify the source IP address or netblock that can connect on a specific port to reach a certain service inside the network. Combine port forwarding with IP filtering. For example, if you want to access a server on your home network from elsewhere, create a port forwarding rule for a port in the router, but only allow connections from the IP address or IP netblock of the elsewhere.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "90186cad543e6f497e9dcea89a95478f",
    "u": "https://nm.tymyrddin.dev/docs/internet/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Internet security mitigations are defensive measures to protect networks, systems, and users from cyber threats targeting public-facing infrastructure. These include attacks like BGP hijacking, DDoS, phishing, zero-day exploits, and certificate spoofing. Why?  Prevent Service Disruption: DDoS attacks can take websites offline, costing millions in downtime. Stop Data Theft: Weak encryption or misconfigured services expose sensitive data. Mitigate Global Threats: BGP hijacks, DNS spoofing, and ransomware spread across borders. Compliance & Trust: Regulations (e.g., GDPR, CISA) require proactive protections. How?  Critical internet-wide mitigations BGP hijacking mitigations Certificate validation Deploying Resource Public Key Infrastructure (RPKI) Defending from DDoS GDPR compliance checklist Adopting Post-Quantum Cryptography (PQC) Enabling DoH/DoT in browsers",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d294721cbaa7406413e86b55252e9a86",
    "u": "https://nm.tymyrddin.dev/docs/internet/doh-dot",
    "t": "Enabling DoH/DoT in browsers ",
    "c": "Enabling DoH/DoT in browsers  Table of Contents Enabling DoH/DoT in browsers Firefox Chrome/Edge System-Wide DoT (Linux/macOS) Verify DoH/DoT Firefox  Enable DoH: Go to Settings → Network Settings → Enable DNS-over-HTTPS. Choose a provider (Cloudflare, NextDNS). Force DoH (about:config): network . trr . mode = 3 # Force DoH network . trr . uri = \"https://cloudflare-dns.com/dns-query\" Chrome/Edge  Enable DoH: Navigate to chrome://flags/#dns-over-https → Enable. Select a provider (Google, Cloudflare). System-Wide DoT (Linux/macOS)  Configure systemd-resolved: sudo nano / etc / systemd / resolved . conf Add (ini): [ Resolve ] DNS = 1.1.1.1 #cloudflare-dns.com DNSOverTLS = yes Restart: sudo systemctl restart systemd - resolved Verify DoH/DoT  Check DNS encryption: # Linux sudo tcpdump -i eth0 -n port 53 # Should show NO plaintext DNS # Windows Wireshark filter: `dns && !(tls || http)` Test with Cloudflare’s checker: curl - s https : // 1.1.1.1 / help | grep \"DNS over HTTPS\"",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0230cf1b070f4009a75eba171750da4c",
    "u": "https://nm.tymyrddin.dev/docs/wireless/signal-strength",
    "t": "Reduce wireless signal strength ",
    "c": "Reduce wireless signal strength  A Wi-Fi signal frequently propagates well beyond the perimeters of a home. This allows for eavesdropping by intruders outside the home perimeter. Carefully consider antenna placement, antenna type, and transmission power levels. By experimenting with router placement and signal strength levels, the transmitting coverage of a Wi-Fi network can be decreased, thereby reducing risk of compromise. Limitations: a motivated attacker may still be able to intercept a signal that has limited coverage.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1085ae46640ba778a00cac1ba157576b",
    "u": "https://nm.tymyrddin.dev/docs/intranet/arp",
    "t": "ARP mitigations ",
    "c": "ARP mitigations  Attack Mitigation ARP Spoofing Static ARP, DAI, Port Security MITM Attacks Encryption (VPN, HTTPS), VLANs Rogue Devices DHCP Snooping, MAC Filtering Detection arpwatch, Wireshark, IDS Table of Contents ARP mitigations Static ARP entries (prevent spoofing) DHCP snooping + dynamic ARP inspection (DAI) ARP monitoring tools Port security (MAC filtering) VPN/Encryption (Mitigate MITM impact) Network segmentation (VLANs + Private VLANs) ARP Spoofing detection tools Static ARP entries (prevent spoofing)  Manually bind IPs to MACs on critical devices (servers, routers, gateways). Linux (bash): sudo arp - s < IP > < MAC > # Permanent static entry Windows (powershell) netsh interface ipv4 add neighbors < InterfaceIndex > < IP > < MAC > Cisco Router: arp < IP > < MAC > arpa Limitation: Hard to maintain in large networks. DHCP snooping + dynamic ARP inspection (DAI)  On Managed Switches (Cisco, HP, etc.) Enable DHCP Snooping (trusts only authorized DHCP servers): ip dhcp snooping ip dhcp snooping vlan 10 interface Gig1 / 0 / 1 ip dhcp snooping trust # Allow DHCP server responses Enable Dynamic ARP Inspection (DAI) (blocks fake ARP replies): ip arp inspection vlan 10 interface Gig1 / 0 / 2 ip arp inspection trust # Trusted ports (e.g., routers) ARP monitoring tools  Linux: arpwatch (alerts on ARP changes): sudo apt install arpwatch sudo systemctl start arpwatch Windows: XArp (GUI-based ARP protection). Network-wide: RARP (Reverse ARP) for validation. Port security (MAC filtering)  Prevent unauthorized devices from connecting. Example Cisco Switch: interface Gig1 / 0 / 3 switchport port - security switchport port - security maximum 1 switchport port - security mac - address sticky switchport port - security violation restrict Blocks unknown MACs and logs violations. VPN/Encryption (Mitigate MITM impact)  SSL/TLS (HTTPS, SSH) prevents decryption even if ARP spoofed. IPSec VPNs encrypt all traffic between sites. Network segmentation (VLANs + Private VLANs)  Isolate sensitive devices in separate VLANs . Private VLANs (PVLANs) block lateral ARP spoofing. ARP Spoofing detection tools  Tool Function ArpON (Linux) Blocks ARP attacks in real-time. Wireshark Detects unusual ARP traffic (like duplicate replies). Snort /Suricata IDS rules for ARP anomalies. ARPGuard (Windows) Actively prevents spoofing.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3f64c552f791744d3e01ea84cad78da2",
    "u": "https://nm.tymyrddin.dev/docs/openwrt/dropbear",
    "t": "DropBear SSH public key authentication ",
    "c": "DropBear SSH public key authentication  If you do not have a public key yet, create one. $ ssh-keygen -t dsa Followed by a fingerprint and random art image of the key. Copy the public key with scp to OpenWrt: $ scp ~/.ssh/id_dsa.pub root@192.168.1.1:/tmp ssh to the router (requires a password, as the key has not been added to authorized_keys yet). $ ssh root@192.168.1.1 Add the key to authorized_keys . If not exists, it will be created. Adjust its permissions. # cd /etc/dropbear # cat /tmp/id_*.pub >> authorized_keys # chmod 0600 authorized_keys Now ssh works from a local machine to the router, and no password is sent in the clear or encrypted, instead you’ll be asked for the passphrase you entered when you created the key in the first step. You can repeat this from each machine that you wish to be able to access the router, and add the keys as above. Running SSH on another port  That of course changes how you ssh to the router: $ ssh root@192.168.1.1 -p 22222 Whitelisting IP’s  Allow SSH only from trusted (whitelisted) IP’s, and drop any other request to port 22 . If doing that from a Local Area Network (LAN) you will need to set a static DHCP address first. dnsmasq is default running on OpenWrt; it allocates IP addresses in the range of 192.168.1.100 to .250 on the internal interface to connected hosts. Pick an IP address outside these, like 192.168.1.251 Create a /etc/lists/whitelist.conf with in it: 192.168.1.251 ## A trusted IP 192.168.1.252 ## Another trusted IP And open up /etc/firewall.user and add: WHITELIST=$(sed 's/#.*//' /etc/lists/whitelist.conf) for IP in ${WHITELIST}; do iptables -t nat -A prerouting_rule -i $WAN -s $IP -p tcp --dport 22 -j ACCEPT iptables -A input_rule -i $WAN -s $IP -p tcp --dport 22 -j ACCEPT Done.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8317c192a4bd443f305a79a978c07902",
    "u": "https://webserver.tymyrddin.dev/",
    "t": "Hardening webserver ",
    "c": "Hardening webserver  Unlike other devices sitting behind layers of defenses and firewalls, web servers sit at the edge of the known network and are designed to share information with the outside, the unknown. These are some notes on hardening the two most used web servers, Nginx and Apache. Building a sound foundation Introduction Keep only required modules Disable unwanted services Restrict file and directory access Disable unwanted HTTP methods Create non-root users Install and use ModSecurity Install and use ModEvasive Set up and configure logging Resolving TLS issues Introduction (Re)configure TLS Manually specify cipher suite Configure forward secrecy Preventing information disclosure Introduction Hide web server information Disable directory listing Setting HTTP security headers Introduction Check your HTTP security headers HTTP Strict Transport Security (HSTS) X-Frame-Options Content Security Policy (CSP) Permissions-Policy Referrer-Policy X-Content-Type-Options X-XSS-Protection Set-Cookie Content-Type Using CORS Introduction CORS best practices CORS on Nginx CORS on Apache",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "66c5676f8651c63767a38eb6f22ae285",
    "u": "https://webserver.tymyrddin.dev/docs/disclosure/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  To protect web applications against the most obvious information disclosure issues, make sure that the web server does not send out response headers or background information that reveal technical details about the backend technology type, version or setup. Why?  Make it harder for attackers to fingerprint your tech stack . How?  Hide web server information Disable directory listing",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3d60b4ed1dbbce2247274f26d2955f8c",
    "u": "https://webserver.tymyrddin.dev/docs/http/cookie",
    "t": "Set-Cookie ",
    "c": "Set-Cookie  The Set-Cookie HTTP response header is used to send a cookie from the server to the user agent, so the user agent can send it back to the server later. To send multiple cookies, multiple Set-Cookie headers should be sent in the same response. For example (the Domain attribute has been removed intentionally): Set-Cookie: name=value; Secure; HttpOnly; SameSite=Strict Resources  MDN Web docs: Using HTTP cookies",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "67155429117a82bae2abb96249c61c4f",
    "u": "https://webserver.tymyrddin.dev/docs/encryption/cipher",
    "t": "Manually specify cipher suite ",
    "c": "Manually specify cipher suite  To secure the transfer of data, TLS/SSL uses one or more cipher suites. A cipher suite is a combination of authentication, encryption, and message authentication code (MAC) algorithms. They are used during the negotiation of security settings for a TLS/SSL connection and the transfer of data. Depending on context, the need to support legacy browsers and regulatory requirements, you can choose different cipher suite configurations (modern, intermediate, or old). TLS 1.3 does not require manually specifying cipher suites.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "131ca0eae40688d10c6da264bf16582a",
    "u": "https://webserver.tymyrddin.dev/docs/http/content",
    "t": "Content-Type ",
    "c": "Content-Type  The Content-Type representation header is used to indicate the original media type of the resource (before any content encoding is applied for sending). For example: Content-Type: text/html; charset=UTF-8 The charset attribute is necessary to prevent XSS in HTML pages The text/html can be any of the possible MIME types Resources  MDN Web docs: Content-Type",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7158354ad25fcb1e28bb10f5f78aa23b",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/file-system",
    "t": "Restrict file and directory access ",
    "c": "Restrict file and directory access  Apache  To restrict a directory from access by users, deny all users using the Directory directive: < Directory \"/var/www/directory\" > Order Deny , Allow Deny from all Allow from 192.168.1.0 / 24 Allow from .core.com </ Directory > To restrict a file using the File directive: # The following lines prevent .htaccess and .htpasswd files from being # viewed by Web clients. # < Files ~ \"^\\.ht\" > Order allow , deny Deny from all Satisfy all </ Files > To limit the scope of enclosed directives by URL use the Location directive: < Location / admin > Order Deny , Allow Deny from all Allow from 192.168.1.0 / 24 Allow from .core.com </ Location > Nginx  The Apache .htaccess is comparable to the server{} block in Nginx, but Nginx has a much more lightweight approach to parsing configuration, and it will not scan site directories for additional configurations. To restrict access to multiple directories in one location entry will give a 403 because of the deny all : ... location ~ /(dir1|dir2|dir3) { deny all; return 404; } ... To allow public access to a /data/public directory and execution of php scripts in it while denying public access to its subdirectories, put the php location in another file called php.conf and include that file in the server block and in the /data/public/ block. The config: server { location ^~ /data/public/ { allow all; try_files $uri $uri/ /index.php?args; # include to avoid writing it twice.. include php.conf } location ^~ /data/ { deny all; } # ..... # Some other config blocks # ..... # This line instead of the php config block to avoid writing the php part twice include php.conf } And the php.conf file: location ~ \\.php$ { fastcgi_split_path_info ^(.+\\.php)(/.+)$; fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock; fastcgi_index index.php; include fastcgi_params; }",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cf2ff06306fcb60a1eeaa2e8e836b8af",
    "u": "https://webserver.tymyrddin.dev/docs/cors/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  You can send GET and POST requests cross domain even if a target does not use CORS, but there are restrictions. Most importantly, the response can not be read. This restriction is built into browsers as part of the Single Origin Policy (SOP) and it protects against data leaking across domains. It also stops publishing an API that can be read from other domains. Why?  CORS allows for loosening that restriction, allowing the domain that is hosting the API to announce to browsers that it allows cross domain calls from either all or some defined domains. If misconfigured, these controlled and intended SOP bypasses can have adverse effects. Such exploits can cause private information leaks and lead to more vulnerabilities, such as authentication bypass, account takeover, and large data breaches. Proper configuration of CORS is therefor essential. How?  CORS best practices CORS on Nginx CORS on Apache",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e5d0a6bd29e4d1bd113858f684568c6d",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/logging",
    "t": "Set up and configure logging ",
    "c": "Set up and configure logging  Logging provides detailed information about client requests made on the web server, and will prove useful when investigating the cause of particular issues. Nginx  The nginx access and error logs are enabled by default and are located in logs/error.log and logs/access.log respectively. A crit severity level will cause nginx to log critical issues and all issues that have a higher severity level than crit . To set the severity level to crit , use the error_log directive : error_log logs/error.log crit; The level of logging can be, in order of increasing severity, debug , info , notice , warn , error , crit , alert , or emerg . Monitoring and managing nginx log files makes it easier to understand requests made to the web server and notice errors. This will aid in discovering any attack attempts and identifying what can be done to optimise server performance. Log management tools, such as logrotate, can be used to rotate and compress old logs and free up disk space. The ngx_http_stub_status_module module provides access to basic status information. Apache  To enable logging on Apache, the mod_log_config module needs to be included from the Apache httpd.conf file. This module provides the TransferLog , LogFormat , and CustomLog directives which are respectively used to create a log file, specify a custom format, and creating and formatting a log file, all in one go. For example, to log the referrer and browser of each request along with the default logging parameters and use the CustomLog directive to instruct Apache to use this logging format: LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" detailed CustomLog logs/access.log detailed",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1ebfeb4352a75168686a6a30a88ed42e",
    "u": "https://webserver.tymyrddin.dev/docs/http/hsts",
    "t": "HTTP Strict Transport Security (HSTS) ",
    "c": "HTTP Strict Transport Security (HSTS)  HTTP Strict Transport Security (HSTS) is a method used by websites to declare that they should only be accessed using a secure connection (HTTPS). If a website declares an HSTS policy, the browser refuses all HTTP connections and prevents users from accepting insecure SSL certificates. Nginx  To add an HSTS header to a Nginx server, add the Strict-Transport-Security directive to the server section: add_header Strict-Transport-Security \"max-age=31536000; includeSubdomains; preload\"; Example of the Nginx config file with the added HTTP Strict Transport Security (HSTS) header: upstream example { server localhost:8080; } server { listen 80; server_name example.test; add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload'; location / { proxy_pass http://example; } } Apache  Header set Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" Resources  MDN Web docs: Strict-Transport-Security",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a382c9b9e94658e46d90875f801bfc14",
    "u": "https://webserver.tymyrddin.dev/docs/http/permissions",
    "t": "Permissions-Policy ",
    "c": "Permissions-Policy  The HTTP Permissions-Policy header provides a mechanism to allow and deny the use of browser features in a document or within any frame elements in the document. It allows a site to control which APIs or features can be used in the browser. Apache  Header always set Permissions-Policy \"geolocation=(),midi=(),sync-xhr=(),microphone=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()\" Nginx  add_header Permissions-Policy \"geolocation=(),midi=(),sync-xhr=(),microphone=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()\"; Resources  MDN Web docs: Permissions-Policy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5d3af8d6179c2873cecb4c7909a06374",
    "u": "https://webserver.tymyrddin.dev/docs/http/csp",
    "t": "Content Security Policy (CSP) ",
    "c": "Content Security Policy (CSP)  Content Security Policy (CSP) protects the web server against certain types of attacks, including Cross-site Scripting attacks (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement to distribution of malware. It defines the approved content sources that allow the browser to load them (or not). For example, to restrict most of the resource types to the same site and subdomains of example.com : Content-Security-Policy: default-src 'self' *.example.com; block-all-mixed-content; font-src 'self' https: data:; img-src 'self' data: blob:; object-src 'none'; script-src-attr 'none'; style-src 'self' https: 'unsafe-inline'; upgrade-insecure-requests; Inline script elements and inline script event handlers like onload will stop working with the above header. This is required to neutralize XSS attacks. You may see mentions of the X-Content-Security-Policy header, but that’s an older version. Add the Content-Security-Policy header to match your requirements. Nginx  add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always; Apache  Header always set Content-Security-Policy \"default-src 'self'; font-src *;img-src * data:; script-src *; style-src *;\" Resources  MDN Web docs: Content Security Policy (CSP)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "3ac8e8ad7961f50dcc809c7facb39092",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/services",
    "t": "Disable unwanted services ",
    "c": "Disable unwanted services  The biggest threat to server security is the code that is written for the server to execute. Two sources of these problems are Common Gateway Interface (CGI) programs and Server Side Includes (SSI). Intruders exploit poor code by forcing buffer overflows or by passing shell commands through the program to the system. Server Side Includes are processed by the server before they are sent to the client. These files can include other files or execute code from script files. If user input is used to dynamically modify the SSI file, it is vulnerable to the same type of attacks as CGI scripts. Administrators have two options: Disable Server Side Includes (SSI) and CGI execution completely. Review all programs included in the cgi-bin directory, don’t allow ExecCGI in any other directory unless you’re positive no one can place a script there that have not been reviewed, write programs that do not allow free-form user input, use drop-down menus instead of keyboard input and never trust user input. Apache  Disallowing can be done by defining a Directory tag in the configuration file: < Directory \"/directory\" > Options - Includes - ExecCGI - FollowSymLinks </ Directory > The most secure way to operate a server is to disallow all SSI processing. This is the default unless All or Includes is specified by an Options directive. A compromise setting is to allow SSI, but to disallow the #include and #exec commands, which are the greatest security threat. Use IncludesNOEXEC on the Options directive for this setting. Nginx  Nginx and OpenBSD httpd authors decided not to include CGI interpretation but instead use FastCGI.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "90ee373e76409e19c3e10f1423e1b7f6",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/modules",
    "t": "Keep only required modules ",
    "c": "Keep only required modules  Minimise the risk of potential attacks by limiting allowed operations. The more services and functions a web server is running, the more opportunities an attacker will have to exploit the network. There are 65,535 available ports each server could possibly service. The server probably does not need all of them open and receptive. Disable and turn off any unnecessary modules, services, ports or functions. Nginx  Default, Nginx includes many modules, and it is not possible to choose modules at runtime. To disable modules, Nginx needs to be recompiled and the configure option during installation to disable modules that are not required. For example, to disable the autoindex module, which generates automatic directory listings: # ./configure --without-http_autoindex_module # make # make install Apache  Default installation may include many pre-installed and enabled modules that are not needed. The Apache module documentation lists and explains all the modules available for Apache. Research the enabled modules to make sure that they are really required for the functionality of the website. Unnecessary modules can be disabled by commenting out a specific LoadModule line.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b6bd82d2d1395250c3ee57b132fdc24d",
    "u": "https://webserver.tymyrddin.dev/docs/cors/requirements",
    "t": "CORS best practices ",
    "c": "CORS best practices  Origins specified in the Access-Control-Allow-Origin header should only be sites that are trusted. Dynamically reflecting origins from cross-origin requests without validation is exploitable and to be avoided. Also avoid using the header Access-Control-Allow-Origin: null . Cross-origin resource calls from internal documents and sandboxed requests can specify the null origin. CORS headers must be defined in respect of trusted origins for private and public servers. Avoid using wildcards in internal networks. Trusting network configuration alone to protect internal resources is not sufficient when internal browsers can access untrusted external domains. CORS defines browser behaviours and is not a replacement for server-side protection of sensitive data - an attacker can directly forge a request from any trusted origin. Web servers should apply protections for sensitive data, such as authentication and session management, in addition to properly configured CORS.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "31c2c9c575648cf13070c4ab0783c888",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/mod_evasive",
    "t": "Install and use ModEvasive ",
    "c": "Install and use ModEvasive  ModEvasive (mod_evasive) provides a web server with built-in evasive capabilities if it detects that a website may be under attack. ModEvasive is used to help to prevent DDOS attacks by closing connections if too many requests come into a website too quickly, if a certain child process request is attempting to create too many concurrent requests or if any host IP is trying to access the web server even if blacklisted.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a2e1f191304d01a8d091b86d31745249",
    "u": "https://webserver.tymyrddin.dev/docs/encryption/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Do not use old versions of the TLS protocol (TLSv1 TLSv1.1) on web servers, because they open the door to SSL attacks . Why?  All the TLS versions older than 1.2 are having lots of known vulnerabilities, which is why the latest browsers have removed support for these vulnerable protocols. How?  (Re)configure TLS Manually specify cipher suite Configure forward secrecy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9a73d1c1cf7a3fccd73d35af436600f7",
    "u": "https://webserver.tymyrddin.dev/docs/http/xframe",
    "t": "X-Frame-Options ",
    "c": "X-Frame-Options  The X-Frame-Options HTTP response header defends an application from clickjacking attacks . It can be used to indicate whethera browser is allowed to render a page in a frame , iframe , embed or object . For example, to disallow displaying of a page in a frame: X-Frame-Options: DENY This header can be configured in three ways: DENY – disables the iframe features completely. SAMEORIGIN – allows iframe to be used by anyone from the same origin. ALLOW-FROM – allows iframes from specific URLs Nginx  Add the following parameter to the nginx configuration file in the server section: add_header X-Frame-Options \"SAMEORIGIN\"; Apache  Header always set X-Frame-Options \"SAMEORIGIN\" Resources  MDN Web docs: X-Frame-Options",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4222bae609e436e97f87563fff45bfe3",
    "u": "https://webserver.tymyrddin.dev/docs/encryption/forward-secrecy",
    "t": "Configure forward secrecy ",
    "c": "Configure forward secrecy  Perfect Forward Secrecy (PFS) is a style of encryption that enables short-term, private key exchanges between clients and servers. PFS can be found within transport layer security (SSL/TLS) and prevents adversaries from decrypting data from other sessions, past or future, even if the private keys used in an individual session are stolen at some point. It does this by using unique session keys, generated automatically each time a connection is made. The keys do not use prior knowledge when they are generated, eliminating the need for long-term storage of keys and preventing sensitive data from being accessed using existing ones that have been compromised. This makes it much harder for attackers to obtain the session key through decryption. PFS is supported by all major internet browsers. How to Configure Nginx for Forward Secrecy How to Configure Apache for Forward Secrecy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "514aefc73fdfd2a1ff3b2ddc91a114de",
    "u": "https://webserver.tymyrddin.dev/docs/http/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Turn on additional protection for web applications. Why?  Setting security headers in web applications and web server settings is an easy way to improve the resilience of your web application against many common attacks, including cross-site scripting (XSS) , clickjacking attacks , and information disclosure . How?  These headers can be applied globally or to a specific site in the Nginx/Apache virtual host file by adding the HTTP Security Headers to the server block. Check your HTTP security headers HTTP Strict Transport Security (HSTS) X-Frame-Options Content Security Policy (CSP) Permissions-Policy Referrer-Policy X-Content-Type-Options X-XSS-Protection Set-Cookie Content-Type",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4ccd8630562a5fd2d1d976240eeba111",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/http-methods",
    "t": "Disable unwanted HTTP methods ",
    "c": "Disable unwanted HTTP methods  HTTP TRACE and TRACK requests can be used for legitimate purposes, such as debugging connection errors within the network, but these protocols can also compromise the security of a web server. One of the most common exploitation methods are [cross-site scripting (XSS) attacks], where attackers use and manipulate the TRACE and TRACK methods to intercept normal traffic connections, session cookies and possibly any data in transit. Disable any HTTP methods, which are not going to be used and which are not required to be implemented on the web server. Nginx  Add this condition in the location block of the nginx virtual host configuration file, location / { limit_except GET HEAD POST { deny all; } } The server will only allow GET , HEAD , and POST methods and will filter out methods such as PUT , DELETE , PATCH , TRACE , TRACK , and OPTIONS . Or for a more universal solution, add this condition to the server section (or server block): if ($request_method !~ ^(GET|HEAD|POST)$ ) { return 444; } Note: Be very careful with if statements in the location context. Apache  Make sure that the mod_rewrite module and .htaccess are enabled. To enable the mod_rewrite module: # a2enmod rewrite Add AllowOverride All in the VirtualHost configuration file: <VirtualHost *:80> ServerName www.example.com DocumentRoot /var/www/html <Directory /var/www/html> AllowOverride All </Directory> </VirtualHost> Or enable it globally by editing the Apache main configuration file. <Directory /var/www/html> Options Indexes FollowSymLinks AllowOverride All </Directory> Restart Apache, and create a .htaccess file under the document root directory with the following code. RewriteEngine On RewriteCond %{REQUEST_METHOD} ^(PUT|DELETE|PATCH|TRACE|OPTIONS) RewriteRule .* - [F] The above configuration will disable PUT , DELETE , PATCH , TRACE , TRACK , and OPTIONS methods.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f488c0ebf84f08a45d618659b9417f35",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Remove all unnecessary web server modules. A lot of web servers by default come with several modules that introduce security risks. Modify default configuration settings. Install and run a web application firewall (WAF). Most web servers support the open-source ModSecurity firewall. If possible, either patch server software to the latest version automatically or turn on notifications for manual patching. Why?  Build a more secure foundation for web applications. How?  Keep only required modules Disable unwanted services Restrict file and directory access Disable unwanted HTTP methods Create non-root users Install and use ModSecurity Install and use ModEvasive Set up and configure logging",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5a2d39b18b660de72833c4fe6843c0e9",
    "u": "https://webserver.tymyrddin.dev/docs/http/xcontent",
    "t": "X-Content-Type-Options ",
    "c": "X-Content-Type-Options  The X-Content-Type-Options response HTTP header is used by the server to prevent browsers from guessing the media type (MIME type). This is known as MIME sniffing in which the browser guesses the correct MIME type by looking at the contents of the resource. The absence of this header might cause browsers to transform non-executable content into executable content. This header helps mitigate the danger of drive-by downloads. Apache  Header always set X-Content-Type-Options \"nosniff\" Nginx  X-Content-Type-Options: nosniff Resources  MDN Web docs: X-Content-Type-Options",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "049d13e0487a8fb9646bf5ebc0978bce",
    "u": "https://webserver.tymyrddin.dev/docs/encryption/tls",
    "t": "(Re)configure TLS ",
    "c": "(Re)configure TLS  Transport Layer Security (TLS) and its predecessor, Secure Socket Layer (SSL), are widely used protocols. They were designed to secure the transfer of data between the client and the server through authentication, encryption, and integrity protection. All the SSL and TLS versions older than 1.2 are having lots of known vulnerabilities, which is why the latest browsers have removed support for these vulnerable protocols. Likewise, do not use old versions of the TLS protocol (TLSv1 TLSv1.1) on web servers, because they open the door to SSL attacks . TLS 1.3 is preferred as it does not require manually specifying cipher suites in configuration. Nginx  Add this directive in the server section of the Nginx configuration file: ssl_protocols TLSv1.2 TLSv1.3; Restart Nginx service. Apache: TLS 1.2 only  Edit the virtual host section for your domain in the Apache SSL configuration file on the server to disable all older protocols except TLSv1.2: <VirtualHost *:443> ServerName www.example.com DocumentRoot /var/www/html SSLEngine on SSLProtocol -all +TLSv1.2 SSLCertificateFile /etc/letsencrypt/live/example.com/cert.pem SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem </VirtualHost> Restart Apache service. Apache: TLS 1.3 and 1.2  <VirtualHost *:443> ServerName www.example.com DocumentRoot /var/www/html SSLEngine on SSLProtocol -all +TLSv1.2 +TLSv1.3 SSLCertificateFile /etc/letsencrypt/live/example.com/cert.pem SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem </VirtualHost> Restart Apache service.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cc5839ec6084ea3929a987b9f809a2fb",
    "u": "https://webserver.tymyrddin.dev/docs/foundation/mod_security",
    "t": "Install and use ModSecurity ",
    "c": "Install and use ModSecurity  ModSecurity ( mod_security ) is an open-source IDS and prevention engine, originally developed for Apache, and now also available for Nginx (and other platforms) in a “standalone” version. ModSecurity works as a supplemental firewall for the web server, allowing you to monitor traffic in real-time, and disabling host connections if the module suspects potential brute-force password attacks. Nginx  To install it without (re)compiling Nginx, install the dependencies: # apt-get install libxml2 libxml2-dev libxml2-utils libaprutil1 libaprutil1-dev And download, compile and install mod_security : # git clone https://github.com/SpiderLabs/ModSecurity.git mod_security # cd mod_security ~/mod_security# ./autogen.sh ~/mod_security# ./configure --enable-standalone-module ~/mod_security# make To compile Nginx from source with the modsecurity module (check for latest version here: http://nginx.org/en/download.html) # wget http://www.nginx.org/download/nginx-1.9.5.tar.gz # tar -xvpzf nginx-1.9.5.tar.gz # cd nginx-1.9.5 ~/nginx-1.9.5# ./configure --add-module=../mod_security/nginx/modsecurity ~/nginx-1.9.5# make ~/nginx-1.9.5# make install The ModSecurity configuration file must be defined in the nginx.conf file, something like this: server { listen 80; server_name localhost; location / { ModSecurityEnabled on; ModSecurityConfig modsecurity.conf; } } For custom rules applied to different directories, create new mod_security.conf files, for example: location /secured { ModSecurityConfig modsecurity3.conf; proxy_pass http://secured.core.com/; proxy_read_timeout 180s; } To turn it off for a particular directory: location /unsecured/ { ModSecurityEnabled off; proxy_pass http://unsecured.core.com/; proxy_read_timeout 180s; } Restart Nginx. Apache  Compile and embed the ModSecurity module or install from repository: # apt-get install libapache2-modsecurity Check it was loaded: # apachectl -M | grep --color security Rename the recommended-labeled configuration file: # mv /etc/modsecurity/modsecurity.conf-recommended /etc/modsecurity/modsecurity.conf Restart Apache. Usage  A new logfile named /var/log/apache2/modsec_audit.log has been created. Check that the default configuration file is not set to DetectionOnly , which logs requests according to rule matches and doesn’t block anything. Edit the /etc/modsecurity/modsecurity.conf file to change it if need be (set it to On ). Some possible changes: # Prevent path traversal (..) attacks SecFilter \"../\" # Weaker XSS protection but allows common HTML tags SecFilter \"<[[:space:]]*script\" # Prevent XSS atacks (HTML/Javascript injection) SecFilter \"<(.|n)+>\" # Very crude filters to prevent SQL injection attacks SecFilter \"delete[[:space:]]+from\" SecFilter \"insert[[:space:]]+into\" SecFilter \"select.+from\" SecFilter \"drop[[:space:]]table\" # Protecting from XSS attacks through the PHP session cookie SecFilterSelective ARG_PHPSESSID \"!^[0-9a-z]*$\" SecFilterSelective COOKIE_PHPSESSID \"!^[0-9a-z]*$\" Restart Apache. Configuration resources  Have a look at the OWASP ModSecurity Core Rule Set Project (CRS) for making more secure changes. The CRS aims to protect web applications from a wide range of attacks, with a minimum of false alerts.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c6377b5a3b18c57d4131e53f1d18cc4f",
    "u": "https://webserver.tymyrddin.dev/docs/disclosure/directory-listing",
    "t": "Disable directory listing ",
    "c": "Disable directory listing  Web servers by default display the content of the documents and files in the root directory when an index.html file is missing. This means that a potential attacker could possibly view all of the files and subdirectories that are presented to the browser. As with the hiding of version and OS identity , this is not a direct security threat as it only allows the attacker to gain information. Apache  Add the following configuration in /etc/apache2/apache2.conf to disable directory listing globally (server wide): < Directory /> Options - Indexes </ Directory > Do not overwrite this inside any directory. Your root directory may look like this: < Directory /> Options FollowSymLinks AllowOverride None </ Directory > AllowOverride None will prevent any accidental changes in .htaccess files. After that you can enable listing per directory by adding the Indexes option: < Directory / www / directory > Options Indexes FollowSymLinks AllowOverride None </ Directory > This enables the generation of Indexes only in that folder. Nginx  Nginx cannot directly execute external programs (CGI). Phew. But if you really really want it to, use fcgi securely. Disable SSI and autoindex execution  The ngx_http_autoindex_module processes requests ending with the slash character / and produces a directory listing. Usually a request is passed to the ngx_http_autoindex_module when the ngx_http_index_module cannot find an index file. You can configure and install Nginx using only required modules. To see which modules can be turned on or off while compiling the Nginx server: # ./configure --help | less To disable the SSI and autoindex module: # ./configure --without-http_autoindex_module --without-http_ssi_module # make # make install",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ba855fd37849dfa11e1094c6077de4c0",
    "u": "https://webserver.tymyrddin.dev/docs/http/xxss",
    "t": "X-XSS-Protection ",
    "c": "X-XSS-Protection  The HTTP X-XSS-Protection response header is a feature of Safari, Internet Explorer 8+, and Google Chrome that stops pages from loading when they detect reflected cross-site scripting (XSS) attacks. For example, to prevent browsers from rendering pages if an attack is detected: X-XSS-Protection: 1; mode=block The header can be implemented in three ways: X-XSS-Protection: 0 – disables the filter completely. X-XSS-Protection: 1 – enforces the header but only sanitises potential malicious scripts. X-XSS-Protection: 1; mode=block – enforces the feature and completely blocks the page. These protections are largely unnecessary in modern browsers when sites implement a strong Content-Security-Policy that disables the use of inline JavaScript (‘unsafe-inline’). Apache  Header always set X-XSS-Protection \"1; mode=block\" Nginx  add_header X-XSS-Protection \"1; mode=block\" always; Resources  MDN Web docs: X-XSS-Protection",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "efc28bdc7830dab0929e546608d8b1a9",
    "u": "https://webserver.tymyrddin.dev/docs/http/referrer",
    "t": "Referrer-Policy ",
    "c": "Referrer-Policy  The Referrer-Policy HTTP header controls how much referrer information (sent via the Referer header) should be included with requests. For example: Referrer-Policy: strict-origin-when-cross-origin Meaning, send the origin, path, and querystring when performing a same-origin request. For cross-origin requests send the origin (only) when the protocol security level stays same (HTTPS → HTTPS). Do not send the Referrer header to less secure destinations (HTTPS → HTTP). By checking the referrer, the new webpage can see where the request originated. The Referrer-Policy can be configured to cause the browser to not inform the destination site any URL information. Apache  Header always set Referrer-Policy \"strict-origin\" Nginx  add_header Referrer-Policy \"strict-origin\"; Resources  MDN Web docs: Referrer-Policy",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c8c2d542023a8d99d5e5fc1e5c2622d4",
    "u": "https://webserver.tymyrddin.dev/docs/disclosure/hide-info",
    "t": "Hide web server information ",
    "c": "Hide web server information  Apache  If the <Location /server-info> directive in the httpd.conf configuration file is enabled, information about the Apache configuration can be read by accessing the /server-info page. The information includes server version, system paths, database names, library information, etc. This directive can be disabled by commenting out the mod_info module in the httpd.conf Apache configuration file: #LoadModule info_module modules/mod_info.so The <Location /server-status> directive lists information about server performance, such as server uptime, server load, current HTTP requests, and client IP addresses. To disable this directive, comment it out in the httpd.conf Apache configuration file: #<Location /server-status> # SetHandler server-status # Order deny,allow # Deny from all # Allow from .domain.com #</Location> The ServerSignature directive adds a footer to server-generated documents. The footer includes the version of Apache and the operating system. To disable this directive in the httpd.conf Apache configuration file: ServerSignature Off The ServerTokens directive controls the information that is sent back in the Server response header field. To set it to Prod to instruct Apache to return only Apache in the server response headers, include this directive in the httpd.conf Apache configuration file: ServerTokens Prod And restart Apache web server. Nginx  Find nginx.conf in nginx installation directory/conf on Windows systems, and in /etc/nginx or /usr/local/etc/nginx on Linux systems. You may also need to do some changes to virtual host configuration files in the sites-available subdirectory. By default, the server_tokens directive in nginx displays the nginx version number. It is directly visible in all automatically generated error pages but also present in all HTTP responses in the Server header. To disable the server_tokens directive: server_tokens off If you want to remove the Server header completely, you have to compile the Headers More module in, because the header is hard coded in the Nginx source, and it allows changing any http headers. Then, to clear the Server header: more_clear_headers Server; Or to set a custom string as Server more_set_headers 'Server: some-string-here';",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "60dd2959baa6da7c1da8b6b818b87777",
    "u": "https://mailserver.tymyrddin.dev/",
    "t": "Smarter mail servers ",
    "c": "Smarter mail servers  Version 0.1: Notes on setting up a mailserver to detect phishing attacks and prevent MitM attacks. The below configurations were for a debian 9, and need to be updated and DMARC added. A work in progress … Mail servers Mail servers Cyrus Dovecot MTA Message Transfer Agent (MTA) Postfix configuration SASL configuration DNSSEC Domain Name System Security Extensions (DNSSEC) TLS Transport Layer Security (TLS) TLS configuration DANE configuration MTA-STS configuration SPF Sender Policy Framework (SPF) SPF configuration DKIM Domain Keys Identified Mail (DKIM) DKIM configuration Rspamd configuration DMARC Domain-based Message Authentication, Reporting and Conformance (DMARC) DMARC configuration",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "350396704891a510710bad93bc9aa01e",
    "u": "https://mailserver.tymyrddin.dev/docs/spf/spf",
    "t": "SPF configuration ",
    "c": "SPF configuration  Add SPF records to DNS  In order that receiving servers can check your SPF record it must be publicly visible. This means publishing it to the DNS server for the chosen domain(s). Go to their domain zone pages and add a new TXT record. For example, to allow mail from all hosts listed in the MX records for the domain: v=spf1 mx -all To allow mail from a specific host: v=spf1 a:mail.somedomain.tld -all Exact format may vary per DNS provider. Check the documentation for the exact style required. Installation  The Python SPF policy agent adds SPF policy-checking to Postfix. The SPF record for the sender’s domain for incoming mail will be checked and, if it exists, mail will be handled accordingly. Configuration  policyd-spf.conf  /etc/postfix-policyd-spf-python/policyd-spf.conf looks something like: debugLevel = 1 defaultSeedOnly = 1 HELO_reject = SPF_Not_Pass Mail_From_reject = Fail PermError_reject = False TempError_Defer = False skip_addresses = 127.0.0.0/8,::ffff:127.0.0.0/104,::1 debugLevel controls the amount of information logged by the policy server. The default, level 1, logs no debugging messages, just basic SPF results and errors generated through the policy server. The policy server can operate in a test only mode. This allows you to see the potential impact of SPF checking in your mail logs without rejecting mail. Headers are prepended in messages, but message delivery is not affected. This mode is not enabled by default. To enable it, set TestOnly = 0 . This option was previously named defaultSeedOnly . This is still accepted, but logs an error. The default HELO check rejection policy is SPF_Not_Pass , meaning reject if the SPF result is Fail, Softfail, Neutral, PermError. Not fully RFC 4408 compliant but HELO/EHLO is known first in the SMTP dialogue and there is no reason to waste resources on Mail From checks if the HELO check will already reject the message. Postfix integration  master.cf  In /etc/postfix/master.cf append: policyd-spf unix - n n - 0 spawn user=nobody argv=/usr/bin/policyd-spf main.cf  To increase the Postfix policy agent timeout, which will prevent Postfix from aborting the agent if transactions run a bit slowly policyd-spf_time_limit = 3600 And append check_policy_service unix:private/policyd-spf after reject_unauth_destination , for example: smtpd_recipient_restrictions = reject_non_fqdn_recipient,reject_unknown_recipient_domain,permit_mynetworks,permit_sasl_authenticated,reject_unauth_destination,reject_non_fqdn_sender,reject_unlisted_recipient,check_policy_service unix:private/policyd-spf Restart postfix  # systemctl restart postfix Testing  Check the operation of the policy agent by looking at raw headers on incoming email messages for the SPF results header. The SPF policy agent also logs to /var/log/mail.log . In the mail.log file you’ll see messages like this from the policy agent Configuration resources  Man policyd-spf - policyd-spf python configuration parameters Kitterman Technical Services offers tools for setting up an SPF record. appmaildev.com also allows for testing SPF records. MX Toolbox allows users to look up their SPF records , making it possible to publish a list of domains that are authorised to send an email on their behalf, and a check if your mail server is blacklisted .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "947dba71caabf05e9586d5857fc7651e",
    "u": "https://mailserver.tymyrddin.dev/docs/tls/readme",
    "t": "Transport Layer Security (TLS) ",
    "c": "Transport Layer Security (TLS)  STARTTLS is a method of upgrading a plain text communication channel to a secure, encrypted communication channel. It makes it possible to create a secure, encrypted Simple Mail Transfer Protocol (SMTP) connection between mail servers. There is a serious issue with STARTTLS — it is vulnerable to Man-in-the-Middle (MITM) attacks. This issue can be mitigated by using either DNS-Based Authentication of Named Entities (DANE) for SMTP or SMTP Mail Transfer Agent Strict Transport Security (MTA-STS). With MTA-STS, DNSSEC is not required but is, of course, highly recommended. A valid X.509 certificate is required. Self-signed certificates are not allowed to be used in combination with MTA-STS. As mentioned before, DANE allows users of self-signed certificates, but a full DNSSEC implementation is required. DNS-based Authentication of Named Entities (DANE)  DANE is an alternative to Public Key Infrastructure (PKI) Certificate Authorities. It complements Domain Name System Security Extensions (DNSSEC), which must be implemented first. It is an Internet security protocol to allow X.509 digital certificates, commonly used for Transport Layer Security (TLS), to be bound to domain names using Domain Name System Security Extensions (DNSSEC). TLSA resource record is a type of DNS record. MTA Strict Transport Security (MTA-STS)  MTA-STS can be seen as a way to implement HTTP Strict Transport Security (HSTS) for SMTP. It is a mechanism to declare the ability to support TLS for SMTP and to specify whether sending mail servers must refuse to deliver an email to an authoritative receiving mail server that does not offer TLS with a trusted X.509 certificate. MTA-STS solves the problem that TLS is entirely optional with SMTP. With MTA-STS, DNSSEC is not required but is, of course, highly recommended. A valid X.509 certificate is required. Self-signed certificates are not allowed to be used in combination with MTA-STS.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7e07b89ae648eab3b3e798b700e981d1",
    "u": "https://mailserver.tymyrddin.dev/docs/dkim/readme",
    "t": "Domain Keys Identified Mail (DKIM) ",
    "c": "Domain Keys Identified Mail (DKIM)  DKIM is a method for detecting forged sender addresses in emails, a common technique used in phishing attacks. It lets official mail servers add a signature to headers of outgoing email and identifies a domain’s public key so other mail servers can verify the signature. As with SPF, DKIM helps keep mail from being considered spam. It also lets mail servers detect when mail has been tampered with in transit. Senders choose which elements of the email are to be included in the DKIM signing process: The whole message (header and body) or one or more fields of the email header. These elements must remain unchanged in transit, or the DKIM signature will fail authentication. The sender configures the mailserver to automatically create a hash of the parts of the email that are to be signed. The email provider receiving the email sees that it has a DKIM signature (and which “domain/selector” combination signed the encryption). It will run a DNS query to find the public key for that “domain/selector” combination. A keypair match enables the email provider to decrypt the DKIM signature back to the original hash string. The receiving email provider takes the elements of the email signed by DKIM, generates its own hash of these elements, and compares that hash with the decrypted hash from the signature. Depending on the implementation, DKIM can also ensure that a message has not been modified or tampered with in transit. It is complex and has not been adopted widely. => No DKIM signature does not mean an email is fake. The DKIM domain is not visible to end users and one needs to have a bit of a techie to make it visible and understand it. It is over many heads. Woosh! DKIM does not prevent spoofing of the visible header “From:” domain. These configuration notes are for debian 9 (will probably also work on buster) Rspamd is an e-mail filter system, which replaces Amavis and Spamassassin. It also is capable of signing outbound e-mails with DKIM keys. The status of Rspamd can be monitored via a simple web interface.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "362d6fe33428aa1950cc48bbaf76d421",
    "u": "https://mailserver.tymyrddin.dev/docs/mta/sasl",
    "t": "SASL configuration ",
    "c": "SASL configuration  Once Postfix is up and running, add SASL authentication to avoid open relaying. In order to prevent anonymous users from spamming, only authenticated and trusted users will be able to send emails. Postfix supports two SASL implementations: Cyrus SASL (SMTP client and server) and Dovecot SASL (SMTP server only). Both implementations can be built into Postfix simultaneously. Cyrus  Install: # apt-get install libsasl2-modules sasl2-bin SASL can use different authentication methods. The default one is PAM (as configured in /etc/conf.d/saslauthd ), but to set it up properly you have to create /etc/sasl2/smtpd.conf . Pambase 20190105.1-1 and newer use restrictive fallback for “other” PAM service, and a pam configuration file is required. Create a file /etc/postfix/sasl/smtpd.conf : pwcheck_method: saslauthd mech_list: PLAIN LOGIN log_level: 7 Setup a separate saslauthd process to be used from Postfix. Create a copy of saslauthd’s config file: # cp /etc/default/saslauthd /etc/default/saslauthd-postfix Append: START=yes DESC=\"SASL Auth. Daemon for Postfix\" NAME=\"saslauthd-postf\" # max. 15 char. # Option -m sets working dir for saslauthd (contains socket) OPTIONS=\"-c -m /var/spool/postfix/var/run/saslauthd\" # postfix/smtp in chroot() Create the required subdirectories in postfix chroot directory: dpkg-statoverride --add root sasl 710 /var/spool/postfix/var/run/saslauthd Add user postfix to the group sasl : adduser postfix sasl Restart saslauthd: # systemctl saslauthd restart [ ok ] Stopping SASL Auth. Daemon: saslauthd. [ ok ] Stopping SASL Auth. Daemon for Postfix: saslauthd-postf. [ ok ] Starting SASL Auth. Daemon: saslauthd. [ ok ] Starting SASL Auth. Daemon for Postfix: saslauthd-postf. Edit /etc/postfix/main.cf : smtpd_sasl_local_domain = $myhostname smtpd_sasl_auth_enable = yes broken_sasl_auth_clients = yes smtpd_sasl_security_options = noanonymous smtpd_recipient_restrictions = permit_sasl_authenticated, permit_mynetworks, reject_unauth_destination Restart (reloading is not enough): # systemctl postfix restart SMTP  To enable SASL for accepting mail from other users, in /etc/postfix/master.cf under the submission or smtp section (depending on what is used) append/uncomment: submission inet n - n - - smtpd -o syslog_name=postfix/submission -o smtpd_tls_security_level=encrypt -o smtpd_sasl_auth_enable=yes -o smtpd_reject_unlisted_recipient=no # -o smtpd_client_restrictions=$mua_client_restrictions # -o smtpd_helo_restrictions=$mua_helo_restrictions # -o smtpd_sender_restrictions=$mua_sender_restrictions -o smtpd_recipient_restrictions=permit_sasl_authenticated,reject -o milter_macro_daemon_name=ORIGINATING The three restriction options (client, helo, sender) can also be left commented out, since smtpd_recipient_restrictions already handles SASL users. Start/enable the saslauthd service and restart the postfix service. Dovecot  If Dovecot is used as IMAP or POP mail server and all users already authenticate (such as with PAM ), then there is no need to configure another package. SMTP  Edit /etc/postfix/master.cf and append/uncomment under the submission or smtp section (depending on what is used): # SASL authentication with dovecot -o smtpd_tls_security_level=encrypt -o smtpd_sasl_auth_enable=yes -o smtpd_sasl_type=dovecot -o smtpd_sasl_path=private/auth -o smtpd_sasl_security_options=noanonymous -o smtpd_sasl_local_domain=$myhostname -o smtpd_client_restrictions=permit_sasl_authenticated,reject -o smtpd_recipient_restrictions=reject_non_fqdn_recipient,reject_unknown_recipient_domain,permit_sasl_authenticated,reject In /etc/postfix/main.cf : smtpd_relay_restrictions = permit_mynetworks,permit_sasl_authenticated,reject_unauth_destination smtpd_sasl_local_domain = $myhostname smtpd_sender_restrictions filters mails based on the MAIL FROM command; This command is easy faked by telneting an open relay and typing in this command, therefore mail counl be sent with a valid MAIL FROM address. Use smtpd_client_restrictions instead, which checks the hostname or IP address of the smtpd client (the other MTA/SMTP connecting to the internal smtpd) in a black list, if listed mail is denied. If mails are marked as NoBounceOpenRelay try: smtpd_sasl_authenticated_header = yes To configure Postfix to enable email clients to connect to the SMTP server. In /etc/postfix/main.cf : smtpd_sasl_auth_enable = yes smtpd_sasl_security_options = noanonymous smtpd_sasl_local_domain = $myhostname smtpd_recipient_restrictions = permit_sasl_authenticated,permit_mynetworks, reject_unauth_destination broken_sasl_auth_clients = yes smtpd_sasl_type = dovecot smtpd_sasl_path = private/auth broken_sasl_auth_clients enables interoperability with remote SMTP clients that implement an obsolete version of the AUTH command. Default is no . Setting it to yes makes Postfix advertise AUTH support in a non-standard way. Restart both dovecot and postfix. Configuration resources  Postfix and Dovecot SASL",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "00cf5a9435b916bc7548f880f33afe40",
    "u": "https://server.tymyrddin.dev/docs/pki/pam",
    "t": "Pluggable Authentication Modules (PAM) ",
    "c": "Pluggable Authentication Modules (PAM)  Pluggable Authentication Modules (PAM) is a suite of shared libraries, providing an abstraction layer between the various methods available that provide authentication and the applications that require authentication and would otherwise have to support those methods directly. With PAM, all that is necessary for these components to cooperate is that a specific PAM module be available for each of them. Passwords  Never reuse old passwords ever. . Open /etc/pam.d/common-password : To restrict users from using their old passwords on the same machine, in the auth section, enter the following line: auth sufficient pam_unix.so likeauth nullok If you want to allow a user to reuse his/her password from a number of passwords that were last used, add the following line in the password section: password sufficient pam_unix.so nullok use_authtok md5 shadow remember=3 SSH  The pam_listfile.so module authenticates users based on the contents of a specified file. For example, if username exists in a file /etc/ssh/ssh.allow , ssh will grant login access. Deny access  Append /etc/pam.d/ssh : auth required pam_listfile.so item=user sense=deny file=/etc/ssh/ssh.deny onerr=succeed Add all usernames you wish to deny access for to a /etc/ssh/ssh.deny file. Allow access  Append /etc/pam.d/ssh : auth required pam_listfile.so item=user sense=allow file=/etc/ssh/ssh.allow onerr=fail Add all usernames to allow access for to a /etc/ssh/ssh.deny file. SASL  SASL can use different authentication methods. The default one is PAM (as configured in /etc/conf.d/saslauthd ) Create /etc/pam.d/smtp #%PAM-1.0 auth required pam_unix.so account required pam_unix.so",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8aa7dc9e13f51af021194a10aa6c6368",
    "u": "https://server.tymyrddin.dev/docs/firewall/port-spoofing",
    "t": "Port spoofing ",
    "c": "Port spoofing  Scanning software usually tries to determine a service that is running on an open port to identify port numbers on which you are running your services on a system. For delaying reconnaissance phase, spoof all ports to seem to be open and emulate valid services on every port. Any attackers port scan results will become fairly meaningless and it will require hours of effort to accurately identify which ports have real services and which do not. Portspoof is a tool that is meant to be a lightweight, fast, portable and secure addition to any firewall system or security system. Techniques used by Portspoof: All configured TCP ports are always open: returns SYN+ACK for every connection attempt making it difficult to determine if a valid software is listening on a particular port and impractical to use stealth. Every open TCP port emulates a valid services: It has a huge dynamic service signature database, that will be used to generate responses to your adversaries scanning software service probes. Portspoof will respond to every service probe with a valid service signature, that is dynamically generated based on a service signature regular expression database. Portspoof can also be used as an Exploitation Framework Frontend, turning your system into a responsive and aggressive machine for exploiting your attackers’ tools and exploits. Some example exploits can be found in the configuration file portspoof.conf . Limitations: An attacker can still determine if a service is emulated by using a protocol probe (for 65k open ports)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "04d901bddf84d96822458570af0c50ff",
    "u": "https://server.tymyrddin.dev/docs/access/readme",
    "t": "Introduction ",
    "c": "THM Room: Hardening basics Introduction  What?  Configuring access control Why?  Protecting sensitive files and directories by setting proper permissions and ownership, and by using Extended Attributes (xattr). Avoiding security related problems with Set User ID (SUID) and Set Group ID (SGID). How?  Discretionary access control (DAC) Access control lists (ACL) and shared directory management (SDM) Mandatory access control (MAC) Mastering Linux Security and Hardening, Donald A. Tevault, Second Edition",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "bca2d3f5673072305e2c4a2b2f9a4456",
    "u": "https://server.tymyrddin.dev/docs/encryption/harden-ssh",
    "t": "Harden ssh server ",
    "c": "Harden ssh server  Configuration file  Changes to the /etc/ssh/sshd_config file: Root access: Root access has prohibit-password set by default. Deactivate using the root account (change PermitRootLogin prohibit-password to PermitRootLogin no ). There’s a configurationless workaround, by logging in as an ordinary user and becoming root with: $ su - Get rid of passwords: Use SSH keys authentication instead of passwords and deactivate using passwords for authentication ( PasswordAuthentication no ) in the config file. Limit access: Only allow login by certain users or groups (users and groups). This does not improve security directly but in some cases helps in resisting a brute force attack a little longer. Set a custom SSH port: By default, ssh listens on port 22, which is widely known among attackers and security tools/port scanners that launch brute force attacks against it. Though security by obscurity (which is no security), it does help eliminate a lot of noise on port 22. Change it in the config file and close port 22 and punch a hole for the new port in the firewall. Choose a port not in use by another service (woops) Disable X11 forwarding: As admins we are unlikely to use graphic tools, and the X11 protocol was never built with security in mind. It can be used by adversaries to open up a channel to the client and send remote commands. Change X11Forwarding yes to X11Forwarding no in the config file. After changing the /etc/ssh/sshd_config file, restart the ssh server with $ sudo systemctl restart ssh for changes to take effect. Additional security  Use of TCP wrappers: Only do this when all needing access to a server have a static IP address. For example, not on a jump host, but when using nc and routing tables with ProxyCommand for the servers one can jump to from the jump host. TCP wrappers can be made by using two files: /etc/hosts.allow and /etc/hosts.deny Append ALL:ALL to /etc/hosts.deny to deny all connections from unknown hosts. Append sshd : XXX.XXX.XXX.XXX to /etc/hosts.allow for each IP address you wish to allow. Use fail2ban for automatically blacklisting IPs (attempting to brute force the SSH server) with the help of a firewall.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "9aafcc19059d395ece44e56f05357f35",
    "u": "https://server.tymyrddin.dev/docs/trouble/ssh-auth-error",
    "t": "Authentication error ",
    "c": "Authentication error  By default, the SSH client verifies the identity of the host to which it connects. If the remote host key is unknown, a user trying to connect is asked to accept it by typing “yes” or “no”. And it may fail. @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that a host key has just been changed. The fingerprint for the ECDSA key sent by the remote host is <redacted>. Please contact your system administrator. Add correct host key in /home/user/.ssh/known_hosts to get rid of this message. Offending ECDSA key in /home/user/.ssh/known_hosts:10 remove with: ssh-keygen -f \"/home/user/.ssh/known_hosts\" -R jumphost ECDSA host key for jumphost has changed and you have requested strict checking. Host key verification failed. ssh_exchange_identification: Connection closed by remote host Besides a MitM attack (Make sure this is not the case from a trusted source. An adversary may be spoofing the host and continuing may give the adversary the information they seek to attack your server), this can also happen after changing a key : edit ~/.ssh/known_hosts file and remove the offending line. In the above example that is line 10. when using ssh on a LAN (where DHCP is used and IP addresses change) when jumping to multiple hosts from a jump host. Bypassing verification (not recommended)  To disable the host key checking and the warnings, set StrictHostKeyChecking no in ~/.ssh/config and UserKnownHostsFile=/dev/null to send the key to a null known_hosts file to avoid future mismatches, and both defeat the intended verification security purpose . For all hosts Host * StrictHostKeyChecking no UserKnownHostsFile=/dev/null For 192.168.0.0/24 Host 192.168.0.* StrictHostKeyChecking no UserKnownHostsFile=/dev/null Even with StrictHostKeyChecking set to no , a user may still be refused to connect when connecting via ProxyJump or ProxyCommand with multiple hosts through a jumphost. ProxyJump issues another ssh process, that does not inherit the command-line arguments that were specified on the command-line of the first ssh command. Host jumphost User jumpuser StrictHostKeyChecking=no UserKnownHostsFile=/dev/null IdentityFile ~/.ssh/id_jumpuser_rsa Get more information on what is happening with the ProxyCommand: ssh -o ProxyCommand=\"ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_jumpuser_rsa -W %h:%p jumpuser@jumphost\" -i ~/.ssh/id_jumpuser_rsa jumpuser@XXX.XXX.XXX.XXX HostKeyAlias  HostKeyAlias specifies an alias that should be used instead of the real host name when looking up or saving the host key in the host key database files. This option is useful for tunnelling SSH connections or for multiple servers running on a single host . It caches the remote public under the alias name. Useful if different openSSH servers are listening on different ports of the same physical server, because normally the port number is not stored when caching public host keys. If the key has a different name (alias) both keys can be cached and valid. Host jumphost HostName XXX.XXX.XXX.XXX User user HostKeyAlias jumphost ProxyCommand ssh anotheruser@backendserver nc %h %p CheckHostIP  And what if there are 2 different host keys for the same IP, or when the IP’s change (DHCP on a LAN for example)? If CheckHostIP is set to yes (default), ssh will check the host IP address in the known_hosts file. This allows ssh to detect if a host key changed due to DNS spoofing. If the option is set to no , the check will not be executed. Host server1 Hostname whatever1.com HostKeyAlias server1 CheckHostIP no Port 22001 User user Host server2 Hostname whatever2.com HostKeyAlias server2 CheckHostIP no Port 22002 User user",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0616552662b98931841c2e9e0354bde9",
    "u": "https://server.tymyrddin.dev/docs/firewall/waf",
    "t": "Web Application Firewall WAF ",
    "c": "Web Application Firewall WAF  A web application firewall (or WAF) filters, monitors, and blocks HTTP traffic to and from a web application. A WAF is differentiated from a regular firewall in that a WAF is able to filter the content of specific web applications while regular firewalls serve as a safety gate between servers. mod_security  The mod_security module is a free Web Application Firewall (WAF) that works with Apache, Nginx and IIS. It supports a flexible rule engine to perform simple and complex operations and comes with a Core Rule Set (CRS) which has rules for SQL injection, cross site scripting, Trojans, bad user agents, session hijacking and a lot of other exploits. For Apache, it is an additional module, easy to install and configure. For Nginx and other web servers there is a stand-alone version.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4aa9cf5e02a623bd00d9a4f4ca313010",
    "u": "https://server.tymyrddin.dev/docs/users/readme",
    "t": "Introduction ",
    "c": "THM Room: Hardening basics Introduction  What?  Securing user accounts through smart configuration of sudo, using complex passwords, disabling root access and locking down home directories. Why?  The principle of least privilege states that each user should only have enough access to perform their daily tasks. How?  Configuring sudo Disabling root access Locking home directories Configuring password complexity Configuring other password requirements Dangers of the lxd group Mastering Linux Security and Hardening, Donald A. Tevault, Second Edition",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b503d7843800d3de1d2610a232d0ade2",
    "u": "https://server.tymyrddin.dev/docs/encryption/gnupg",
    "t": "GNU Privacy Guard ",
    "c": "GNU Privacy Guard  GNU Privacy Guard (GPG) is based on Pretty Good Privacy, the OpenPGP standard. Pretty Good Privacy (PGP) is used widely to encrypt and decrypt email by using asymmetrical and symmetrical systems. When you first send your email, it is encrypted with your own public key, as well as a session key, which is a one-time use random number called a nonce . The session key is then encrypted into the public key and sent with the cipher text. To decrypt your email, the receiving end must use their private key in order to discover the session key. The session key combined with the private key are then used to decrypt the cipher text back into the original document. GPG comes pre-installed on Ubuntu. Its main advantages: Easy encryption for email and files. Mentioned in 2017 by Snowden, referring to 2014, supposedly, then, the NSA could not crack PGP. Asymmetric encryption removes the need to provide a password for decrypting or unlocking files thus improving security overall. Using GPG  To create keys: gpg --gen-key To verify the keys were created: gpg --list-keys Encrypting files with GPG  Symmetric  gpg -c <file> This will prompt the user to enter a passphrase to protect the file. This is not the passphrase you used to create your keys The -d option while targeting our gpg file that was encrypted, will print out the contents of the file after prompting for the secret passphrase. Asymmetric  Asymmetric encryption works by using two keys - one to encrypt, and one to decrypt. The public key is used to encrypt the data while the private key is used to decrypt the data. So using the typical Bob and Alice example, let’s say Bob wants to send Alice an encrypted file. He would first encrypt the file using Alice’s public key and then send the file away. Once Alice receives the file, she can decrypt it with her private key. The big takeaway here is that public keys can be shared, private keys should be kept private and held onto for dear life. NEVER SHARE YOUR PRIVATE KEY! To use the scheme, users need to extract their public keys and send them to each other. Go to the .gnupg folder and extract with: gpg --export -a -o <filename> This will export the user’s public key as ASCII armored output as the filename specified. In order to import the file, (be in .gnupg directory or know the path). gpg --import <filename.txt> To encrypt a document asymmetrically: gpg -e <document> When the other party wishes to decrypt it, he/she will be prompted for his/her passphrase for his/her private key. After entering that he/she is greeted with the text from the file. gpg -d <document>.gpg",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f9dc896153c53990b225d2909e4997d7",
    "u": "https://server.tymyrddin.dev/docs/firewall/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Monitor traffic to and from a host, and only allow legitimate traffic. Why?  Prevent unauthorised remote access, but while a firewall should block backdoor access via a Trojan, there is a chance that this can be bypassed. Block unsuitable or immoral content, but consider the ethics of reading private content to be able to do so. How?  iptables nftables UFW firewalld FireHOL Packet filtering with I/O Control Fail2ban SSHguard WAF Port spoofing Notes  Deny All and then add exceptions to restrict access to everything except the specific services you need to remain open. Avoid using ANY in Allow rules. A rule where the service field is ANY can open up 65,535 attack vectors, I mean, TCP ports. Document all rules and use comments for relevant information (purpose, service, users/servers/devices affected, permanent or temporary, name of person that added it) Review proposed and changed firewall rules before implementation Consider a WAF. Mind that it requires a lot of support work because the defaults are all very strict. Users can not ven make linux documentation pages in a dokuwiki without getting thrown out.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "df519fa87b90827b0edfdb4ac68fde59",
    "u": "https://server.tymyrddin.dev/docs/vnc/tigervnc",
    "t": "TigerVNC ",
    "c": "TigerVNC  TigerVNC is not as lightweight as TightVNC , but it provides extensions for advanced authentication methods and TLS encryption , hence a proper candidate for a fallback when ssh fails. Installation  Install the Xfce desktop environment on the server: # apt-get install xfce4 xfce4-goodies xorg dbus-x11 x11-xserver-utils Install the vnc server: # apt-get install tigervnc-standalone-server tigervnc-common Create a new user to access the server. # useradd vncuser Add the user to the sudo group: # usermod -aG sudo vncuser As the vncuser, run the vncserver command to create the initial configuration and set up the password. Do not use sudo. $ vncserver You will require a password to access your desktops. Password: Verify: Would you like to enter a view-only password (y/n)? n /usr/bin/xauth: file /home/vncuser/.Xauthority does not exist New 'debian9.localdomain:1 (vncuser)' desktop at :1 on machine debian9.localdomain Starting applications specified in /etc/X11/Xvnc-session Log file is /home/vncuser/.vnc/debian9.localdomain:1.log Use xtigervncviewer -SecurityTypes VncAuth -passwd /home/vncuser/.vnc/passwd :1 to connect to the VNC server. Configuration  Default for the service is on port 5901 (display port :1 ). Stop the service: $ vncserver -kill :1 Make a backup of the xstartup file: $ mv ~/.vnc/xstartup ~/.vnc/xstartup.old Create a new xstartup file and open it (empty file): $ vi ~/.vnc/xstartup To have VNC read the server user’s .Xresources file and launch Xfce (in the background), append: #!/bin/sh unset SESSION_MANAGER unset DBUS_SESSION_BUS_ADDRESS exec startxfce4 Write and quit file, and (as root) make it executable. # chmod u+x ~/.vnc/xstartup Restart the service: $ vncserver Firewall  Open ports in the firewall for inbound communication. Control  For starting, stopping, and restarting the service, create a new (empty) systemd unit file /etc/systemd/system/vncserver@.service # vi /etc/systemd/system/vncserver@.service The @ symbol will allow for passing an argument (the VNC display port). Append: [Unit] Description=Remote desktop service (VNC) After=syslog.target network.target [Service] Type=simple User=vncuser PAMName=login PIDFile=/home/%u/.vnc/%H%i.pid ExecStartPre=/bin/sh -c '/usr/bin/vncserver -kill :%i > /dev/null 2>&1 || :' ExecStart=/usr/bin/vncserver :%i -geometry 1280x800 -alwaysshared -fg ExecStop=/usr/bin/vncserver -kill :%i [Install] WantedBy=multi-user.targetReload systemd manager configuration # systemctl daemon-reload Enable the unit file # systemctl enable vncserver@1.service Kill the vncserver $ vncserver -kill :1 And start it as any other systemd service. $ sudo systemctl start vncserver@1 Verify $ sudo systemctl status vncserver@1 Clients  Linux: xvnc4viewer Configuration resources  TigerVNC",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5e2a19851b9ec675864a435d1aec5e88",
    "u": "https://server.tymyrddin.dev/docs/services/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Never have anything that you don’t absolutely need installed on a server. Especially not any unnecessary network services. Why?  Do not give adversaries extra ways to get into the systems. How?  Auditing system services with systemctl Auditing network services with netstat Auditing network services with nmap Mastering Linux Security and Hardening, Donald A. Tevault, Second Edition",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "230b5e9e61df79f9727abf25a72e0224",
    "u": "https://server.tymyrddin.dev/docs/vnc/secure-sessions",
    "t": "Securing sessions ",
    "c": "Securing sessions  TLS  Start the VNC server with: # vncserver -SecurityTypes=VeNCrypt,TLSVnc On the client, connect with vncviewer: $ vncviewer -SecurityTypes=VeNCrypt,TLSVnc XXX.XXX.XXX.XXX:1 With TLSVnc, there is standard VNC authentication and traffic is encrypted with GNUTLS but the identity of the server is not verified. TigerVNC also supports other security schemes such as X509Vnc. X509  X509 combines standard VNC authentication with GNUTLS encryption and server identification, and is the recommended mode for a secure connection. Do not set SecurityTypes on the server to a non-encrypted option as high-priority (such as None, VncAuth, Plain, TLSNone, TLSPlain, X509None, X509Plain) because then it is not possible to use encryption. When running vncviewer, it is safer to explicitly set SecurityTypes and not accept any unencrypted traffic. Any other mode is to be used only when accessing a vncserver via SSH tunnels. SSH  On the server install ssh. On the client: $ ssh -L 5901:127.0.0.1:5901 -C -N -l vncuser XXX.XXX.XXX.XXX The -L switch specifies binding port 5901 of the remote connection to port 5901 on the local machine (client), -C enables compression, -N specifies there will be no remote command, and -l the remote login name.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d85a985b8eb633d043dc2b4780415f18",
    "u": "https://server.tymyrddin.dev/docs/users/homes",
    "t": "Locking home directories ",
    "c": "Locking home directories  This is another area where different Linux distribution families are different from each other. Each distribution family comes with different default security settings. A security administrator who oversees a mixed environment of different Linux distributions will need to take this into account. The UMASK line is in the login.defs file for all Linux distributions, but Red Hat-type distributions are the only ones that have UMASK set to a restrictive value of 077 by default, which removes all permissions from the group and others. Other distros set it to 022 by default, which creates home directories with a permissions value of 755 . This allows everybody to enter everybody else’s home directories and access each others’ files. Red Hat and CentOS  Red Hat Enterprise Linux and all of its descendants have better out-of-the-box security than any other Linux distribution. One thing that’s already been done is locking down users’ home directories. By default, the useradd utility on Red Hat-type systems creates user home directories with a permissions setting of 700 . Only the user who owns the home directory can access it. The UMASK is set in /etc/login.defs . CREATE_HOME yes UMASK 077 Debian and Ubuntu  Debian and its offspring, such as Ubuntu, have two user creation utilities: useradd and adduser . useradd  Using useradd : sudo useradd -m -d /home/username -s /bin/bash username Otherwise, username would have no home directory and would be assigned the wrong default shell. Home directories are wide open, with execute and read privileges for everybody. cd /home sudo chmod 700 * To change the default permissions setting for home directories, open /etc/login.defs and change UMASK 022 to UMASK 077 . Now, new users’ home directories will get locked down on creation, just as they do with Red Hat. adduser  The adduser utility is an interactive way to create user accounts and passwords with a single command, which is unique to the Debian family of Linux distributions. Most of the default settings that are missing from the Debian implementation of useradd are already set for adduser. The only thing wrong with the default settings is that it creates user home directories with the wide-open 755 permissions value. 777 is the numerical equivalent of rwxrwxrwx in Linux, subtracting that from the UMASK of 022 , you get the resulting permissions that will be set on a user’s home directory and files. Change the UMASK to 077 in /etc/login.defs .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f11d2a745a20faf20877cb4d2025fb31",
    "u": "https://server.tymyrddin.dev/docs/access/acl",
    "t": "Access control lists (ACL) and shared directory management (SDM) ",
    "c": "Access control lists (ACL) and shared directory management (SDM)  With access control list (ACL), we can allow only a certain person to access a file, or we can allow multiple people to access a file with different permissions for each person. To view an ACL for a file or directory: getfacl <file> Creating an ACL  For setting an ACL, remove all permissions from everyone except for the user of the file. That’s because the default permissions settings allow members of the group to have read/write access, and others to have read access. chmod 600 <file> To allow a user or a group to have any combination of read, write, or execute privileges: setfacl -m u:<username>:rw <file> -m modify or create an ACL. u:username:r : user’s name, followed by another colon, and the list of permissions to grant this user. In this case, read and write access. Set an ACL for group access by replacing u: with g: . Creating an inherited ACL for a directory  To have all files that get created in a shared directory use the same ACL: setfacl -m d:u:<username>:r <directory> Using an ACL mask  Remove an ACL from a file or directory with the -x option: setfacl -x u:<username> <file> The -x option removes the entire ACL. To remove permissions with a mask, in this case read permission: setfacl -m m::r <file> m::r sets a read-only mask on the ACL. Other permissions stay intact. Preventing the loss of ACLs during a backup  When using tar to create a backup and then doing a restore, the ACL’s are gone. Use the --acls option: tar cJvf directory_backup.tar.xz dir/ --acls User groups  To create a group: sudo groupadd <groupname> Adding members when creating user accounts, on CentOS: sudo useradd -G <groupname> <username> on Debian/Ubuntu: sudo useradd -m -d /home/<username> -s /bin/bash -G <groupname> <username> And assign a password. To add an existing user to a group (CentOS and Debian families): sudo usermod -a -G <groupname> <username> Adding users to a group by editing the /etc/group file: ... <groupname>>:x:1005:<list of comma separated usernames> ... This method is extremely handy for when you need to add lots of members to a group at the same time. Creating a shared directory  sudo mkdir <directoryname> The new directory belongs to the root user and has a permissions setting of 755 , which permits read and execute access to everybody and write access only to the root user. To allow only members of a specific group to access the directory, change ownership and group association, and then set the permissions: sudo chown nobody:<groupname> <directoryname> sudo chmod 770 <directoryname> Setting the SGID bit and the sticky bit on the shared directory (it is safe and useful to set SGID on a shared directory): sudo chmod 2770 <directoryname> But now users in the group can delete each other’s files. When the sticky bit is set on files, Linux just ignores it, whereas for directories it has the effect of preventing users from deleting or even renaming the files it contains unless the user owns the directory, the file, or is root. sudo chmod o+t <directoryname> To set the sticky bit in octal form, prepend the number 1 to the current (or desired) basic permissions. Since the SGID bit has a value of 2000, and the sticky bit has a value of 1000, we can just add the two together to get a value of 3000 to add to the permissions: sudo chmod 3770 <directoryname> Having the sticky bit set will prevent group members from deleting anybody else’s files.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "1c5a85eade4241a538fa53c4d231fe37",
    "u": "https://server.tymyrddin.dev/docs/ids/samhain",
    "t": "Samhain ",
    "c": "Samhain  The Samhain host-based intrusion detection system (HIDS) provides file integrity checking, log file monitoring/analysis, rootkit detection, port monitoring, detection of rogue SUID executables, and hidden processes. Like having tripwire when it was still working plus rkhunter rolled into one. Plus, it can be expanded to include more (remote) clients if set up in client-server mode and getting Beltane II as well (not GPL licensed and can be used on a limited amount of (10) machines for a small donation). Something that can maybe be used for guarding client machines remotely. Yum. Problems  A steeper learning curve than for other programs. No binaries available, setting it up is not easy for non-techies Download  Download samhain-current.tar.gz from Samhain Labs . Verification  cd Downloads/ $ gunzip samhain-current.tar.gz $ tar -xf samhain-current.tar $ gpg --keyserver pgp.mit.edu --recv-key 0F571F6C gpg: key 1AAD26C80F571F6C: 3 duplicate signatures removed gpg: key 1AAD26C80F571F6C: 96 signatures not checked due to missing keys gpg: key 1AAD26C80F571F6C: \"Rainer Wichmann <rwichmann@la-samhna.de>\" not changed gpg: key 3A2AAE330F571F6C: 21 signatures not checked due to missing keys gpg: key 3A2AAE330F571F6C: \"Rainer Wichmann <rwichmann@la-samhna.de>\" not changed gpg: Total number processed: 2 gpg: unchanged: 2 $ gpg --fingerprint 0F571F6C pub dsa1024 1999-10-31 [SCA] EF6C EF54 701A 0AFD B86A F4C3 1AAD 26C8 0F57 1F6C uid [ unknown] Rainer Wichmann <rwichmann@la-samhna.de> uid [ unknown] Rainer Wichmann <rwichmann@hs.uni-hamburg.de> sub elg1024 1999-10-31 [E] pub rsa1024 2014-07-21 [SCEA] [revoked: 2016-08-16] 5B17 5A1C 8C1B 7BC3 CB12 0FAA 3A2A AE33 0F57 1F6C uid [ revoked] Rainer Wichmann <rwichmann@la-samhna.de> [nina@archlinux Downloads]$ gpg --verify samhain-4.2.4.tar.gz.asc samhain-4.2.4.tar.gz gpg: Signature made Thu 21 Dec 2017 09:05:24 PM CET gpg: using DSA key 1AAD26C80F571F6C gpg: Good signature from \"Rainer Wichmann <rwichmann@la-samhna.de>\" [unknown] gpg: aka \"Rainer Wichmann <rwichmann@hs.uni-hamburg.de>\" [unknown] gpg: WARNING: This key is not certified with a trusted signature! gpg: There is no indication that the signature belongs to the owner. Primary key fingerprint: EF6C EF54 701A 0AFD B86A F4C3 1AAD 26C8 0F57 1F6C And that fits with the key given on the site. Simple configuration stand-alone  Configure stand-alone version : $ ./configure checking for a BSD-compatible install... /usr/bin/install -c checking whether make sets $(MAKE)... yes checking build system type... x86_64-unknown-linux-gnu checking host system type... x86_64-unknown-linux-gnu checking for gcc... gcc . . . [snip] . . . config.status: creating deploy.sh config.status: creating config.h config.status: executing default commands samhain has been configured as follows: System binaries: /usr/local/sbin Configuration file: /etc/samhainrc Manual pages: /usr/local/man Data directory: /var/lib/samhain Database file: /var/lib/samhain/samhain_file PID file: /run/samhain.pid Log file: /var/log/samhain_log Base key: 1617215581,281009996 Selected rc file: samhainrc.linux $ Configuration for watching logins, mounts and rootkits  Watching over logins: $ ./configure --enable-login-watch Over mountings: ./configure --enable-mount-check Samhain can check for kernel rootkits on FreeBSD and Linux with: $ ./configure --with-kcheck=systemmap where systemmap is the System.map file for a particular system. Configuration for stealth  If an intruder cannot discover that samhain is running, he cannot compromise it. You can, for example, use: $ ./configure --enable-install-name=somename where somename is an innocuous-sounding executable name. To make it less likely that the program isn’t accidentally discovered, samhain can be set to never respond to the command line. Or, it can be set to respond to the command line only after a certain password is given: $./configure --enable-nocl=somepass If somepass is set to an empty string it disables command-line interaction completely. Otherwise, invoke samhain with somepass as the first argument followed by the other arguments. There are many other interesting stealth options available, all documented along with the rest of the compilation switches in Appendix A of the documentation . Build  Next step is to Build : $ make gcc -I. -o depend-gen ./src/depend-gen.c update depend.dep ... gcc -I. -o mkhdr ./src/mkhdr.c gcc -I. -o encode ./src/encode.c encode 0 config.h ./encode 0 ./src/sh_files.c --> x_sh_files.c gcc -DHAVE_CONFIG_H -I. -I./include -O2 -D_FORTIFY_SOURCE=2 -fstack-protector-all -pthread -DUSE_MALLOC_LOCK=1 -fPIE -Wall -W -fno-strength-reduce -fno-omit-frame-pointer -Wno-empty-body -Wno-invalid-source-encoding -DSH_STANDALONE -o sh_files.o -c x_sh_files.c . . . [snip] . . . sh_string.o sh_inotify.o dnmalloc.o sh_audit.o sh_registry.o sh_ipvx.o sh_restrict.o sh_filetype.o sh_sub.o sh_fInotify.o sh_checksum.o sh_guid.o sh_sem.o sh_dbIO.o sh_dbCheck.o sh_dbCreate.o -lz -lresolv -lnsl -lnsl -lattr -lacl gcc -I. -o sstrip ./src/sstrip.c $ Installation  Install : $ make install /usr/bin/install -c -m 700 samhain /usr/local/sbin/samhain /usr/bin/install: cannot create regular file '/usr/local/sbin/samhain': Permission denied chmod: cannot access '/usr/local/sbin/samhain': No such file or directory make: *** [Makefile:518: install-program] Error 1 Ah yes, installing an application and using ./configure without the --prefix= option, the make install process will install the compiled files in to the predefined paths in the system’s file system, and that means special permissions for writing the files is required: $ sudo make install [sudo] password for nina: /usr/bin/install -c -m 700 samhain /usr/local/sbin/samhain /bin/sh ./mkinstalldirs /usr/local/man/man8 mkdir /usr/local/man/man8 /bin/sh ./mkinstalldirs /usr/local/man/man5 mkdir /usr/local/man/man5 /usr/bin/install -c -m 644 ./man/samhain.8 /usr/local/man/man8/samhain.8 /usr/bin/install -c -m 644 ./man/samhainrc.5 /usr/local/man/man5/samhainrc.5 gcc -DHAVE_CONFIG_H -I. -I./include -O2 -D_FORTIFY_SOURCE=2 -fstack-protector-all -pthread -DUSE_MALLOC_LOCK=1 -fPIE -Wall -W -fno-strength-reduce -fno-omit-frame-pointer -Wno-empty-body -Wno-invalid-source-encoding -DSH_STANDALONE -DSH_IDENT=\\\"daemon\\\" -DTRUST_MAIN -DSL_ALWAYS_TRUSTED=0 -o trustfile ./src/trustfile.c mkdir /var/lib/samhain ./samhain-install.sh --destdir= --express --verbose install-data cp samhainrc.linux samhainrc cp samhainrc samhainrc.pre mv -f samhainrc.pre samhainrc.install ./samhain-install.sh --install-sh -m 600 samhainrc.install /etc/samhainrc checking whether paths are trustworthy configuration file /etc/samhainrc ... OK state directory /run ... OK state directory /var/log ... OK data directory /var/lib/samhain ... OK You can use 'samhain-install.sh uninstall' for uninstalling i.e. you might consider saving that script for future use Use 'make install-boot' if you want samhain to start on system boot Customisation  Customize : $ sudo vi /etc/samhainrc I will run with defaults for now, and make changes later. Initialisation  Initialize the baseline database ( do NOT do twice ): $ samhain -t init [snip] CRIT : [2018-03-04T22:01:33+0100] interface=<lstat>, msg=<No such file or directory>, userid=<0>, path=</var/lib/urandom/random-seed> CRIT : [2018-03-04T22:01:33+0100] msg=<POLICY MISSING>, path=</var/lib/urandom/random-seed> MARK : [2018-03-04T22:01:33+0100] msg=<File check completed.>, time=<593>, kBps=<9067.752000> NOTICE : [2018-03-04T22:01:33+0100] msg=<Finished writing baseline database.> ALERT : [2018-03-04T22:01:33+0100] msg=<EXIT>, program=<Samhain>, status=<exit_success> Aaaaand a sheitload of errors and garble passed by on my screen for about ten minutes, including all kinds of critical issues on missing files and policies. This was on a worst-case linux, an archlinux halfway in the making (by me), and to be expected. I be reading them logs then. :D Usage  Run samhain : $ samhain -t check...",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "401b8190c4e25ae1a89f62efdd801abc",
    "u": "https://server.tymyrddin.dev/docs/users/passwords",
    "t": "Configuring password complexity ",
    "c": "Configuring password complexity  NIST has come to agree with Bill Burr’s changed mind and have now changed their password implementation criteria to match Mr. Burr’s new recommendations: Passphrases do not meet any complexity criteria, and use dictionary words. How is that secure? It is a phrase with distinct words separated by blank spaces. That makes it secure and very difficult to brute-force. Passphrases are more difficult to crack than traditional passwords, and they are easier for users to remember. And, there is the reality that many organizations are still using complex passwords that regularly expire, and you’ll have to abide by their rules if you can’t convince them otherwise. And besides, if you are using traditional passwords, you do want them to be strong enough to resist any sort of password attack. Pwquality  pwquality is a PAM module that allows configuring password complexity requirements for users. It is fairly easy to install on Ubuntu. sudo apt-get install libpam-pwquality Once installed, it automatically adds an entry into the /etc/pam.d/common-password file. The pam.d directory is just another location where PAM adds files for basic services like ssh , basic login , etc. The pwquality.conf file found in /etc/security , has many options the administrator can set for password quality. The lines just need to be uncommented and modified. Resources  You Might Not Need Complex, Alphanumeric Passwords After All The New NIST Guidelines: We Had it All Wrong Before",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "98afa3056fd07053498c95b6bf9b0c6c",
    "u": "https://server.tymyrddin.dev/docs/pki/lets-encrypt",
    "t": "Let’s Encrypt ",
    "c": "Let’s Encrypt  Web PKI being yet another golden goose in the context of the business model that underpins the digital world. , we also have an alternative. Let’s Encrypt is a free, automated, and open Certificate Authority. The below is for debian (stretch). Installation certbot  Certbot is in active development, so the packages provided by Debian with stable releases tend to be outdated. Get a more up-to-date package by enabling the backports repository. Create the /etc/apt/sources.list.d/letsencrypt.list file and append: # echo 'deb http://deb.debian.org/debian <distribution>-backports main contrib non-free' >> /etc/apt/sources.list.d/letsencrypt.list # echo 'deb-src http://deb.debian.org/debian <distribution>-backports main contrib non-free' >> /etc/apt/sources.list.d/letsencrypt.list Update the package list to pick up the new repository’s package information: # apt update Install on Nginx with: # apt install python-certbot-nginx -t <distribution>-backports Get SSL certificate  Get a certificate and have Certbot edit your Nginx configuration automatically to serve it, turning on HTTPS access in a single step. # certbot --nginx Verification  Check the /etc/letsencrypt/live/<your-domain>/ directory for the presence of cert.pem , privkey.pem and chain.pem . Certbot looks for a server_name directive that matches your domain. Open the server block file for your domain: # vi /etc/nginx/sites-available/yourdomain.tld If necessary, change the server_name directive to: server_name yourdomain.tld www.yourdomain.tld; Verify the syntax of your configuration file: # nginx -t Reload Nginx to load the new configuration: # systemctl reload nginx Firewall  Punch a hole in the firewall to allow HTTPS traffic (allow the Nginx Full profile) and delete the redundant Nginx HTTP profile allowance. Auto renewal  Certbot comes with a renew script in /etc/cron.d that will renew your certificates automatically before they expire (they last for 90 days). Test automatic renewal: # certbot renew --dry-run Configuration resources  Certbot instructions , EFF",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a7c610ca928d678ffe31fca44e269e18",
    "u": "https://server.tymyrddin.dev/docs/logfiles/log-commands",
    "t": "log commands ",
    "c": "log commands  Less, more and zmore  # less /var/log/syslog less opens the syslog log file at the top. Use the arrow keys to scroll down one line at a time, the space bar to scroll down one page at a time, or the mouse wheel to scroll through the file. Use the [Shift]+[g] combination to immediately go to the end of the log file. Grep and zgrep  # grep \"user@whateverdomain.tld\" /var/log/mail.log > /tmp/result.txt zgrep is useful for compressed files: # zgrep -i Error *.gz Tail  tail prints the last part of files to output, for example the last 10 lines with the -n option. Adding the -f option will continue watching the log file and print out the next line written to the file. As soon as a new line is written to syslog, it removes the oldest. # tail -f -n 10 /var/log/syslog Escape it with the [Ctrl]+[x] key combination. Last and lastb  The last command reads from the system file called /var/log/wtmp or the file designated by the -f option. Names of users and tty’s can be given, in which case last will show only those entries matching the arguments. Names of tty’s can be abbreviated, thus last 0 is the same as last tty0 . When last catches a process signal like SIGINT (generated by the interrupt key, usually control-C) or a SIGQUIT (generated by the quit key, usually control-\\), last will show how far it has searched through the file; in the case of the SIGINT signal, last will then terminate. For the login history of sysadmin: # last | grep sysadmin To find out when the system was last rebooted: # last reboot lastb is the same as last , except that by default it shows a log of the file /var/log/btmp , which contains all the bad login attempts. dmesg  dmesg displays by default all messages from the kernel ring buffer. Use the scroll wheel to browse through the buffer or pipe the output of dmesg to the less command. For example, to print the log entries for the user facility: # dmesg --facility=user | less",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "0ce29b9aeed5f95a4e86803e38bb2bcd",
    "u": "https://server.tymyrddin.dev/docs/logfiles/intruder-path",
    "t": "Path of a common intruder ",
    "c": "Path of a common intruder  Scenario  Assume an intruder gains access to the system through a vulnerability. Most likely, he/she wishes to gain elevated privileges in order to be able to take action, like install software, get user data that can possibly give access to other servers or systems, destroy or alter audit trails to hide tracks of having been there, etc. This can be done by installing malware (a rootkit) or manually. Assume he/she is successful. Note that there are more than zero users with uid=0 (superuser privileges)| Less likely but possible, the intruder creates a user without password. Note a new user has been created He or she will try to capture information of other computers on the same network (in particular users and passwords). This can be done with a sniffer. Note that a network interface is put into promiscuous mode. Binaries of the sniffer, configuration files, captured information are usually hidden in the /dev directory. Note regular files appearing in /dev A somewhat more knowledgeable intruder will try to modify certain binaries of the system to conceal the indicators of their presence ( su to not let on to elevated privileges, ifconfig to hide that the network interface is in promiscuous mode, ls to hide where their files are, ps to conceal the execution of the sniffer, find, netstat, top, etc). FIA’s can detect these alterations Important events for reconstructing an attack  Logging off and logging in (location) User and group management (changes in permissions and ability to gain access) Security policy changes Shutdowns and restarts System changes: Changes to the operating system (hardware and/or software events, configuration changes) Changes to hardware configuration Device driver installation Starting and stopping of services Applications: Many utilities send messages to application related logs Exceptions to this are web servers and FTP servers (have their own logging mechanisms, but can be included in syslog ) Accounts and group record changes: Creation, deletion and modification of users Modifications to groups",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "45d514489b18b4f5874d0f910dab7101",
    "u": "https://server.tymyrddin.dev/docs/vnc/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Virtual network computing, or VNC, is a graphical desktop sharing system that uses the Remote Frame Buffer protocol (RFB) to allow for controlling a server remotely. A VNC server transfers keyboard and mouse events, and displays the remote host’s screen via a network connection (relaying the graphical screen updates back). Servers are best set up as minimal environment, and installing GUI might lead to high hardware utilization. Virtual Network Computing (VNC) is a graphical desktop sharing system to remotely control another computer. Why?  In our context, only to be used as a fallback when ssh fails. How?  TightVNC TigerVNC Securing sessions Notes  VNC is not an encrypted protocol and can be subject to packet sniffing. Sessions can be secured: TightVNC is lightweight and connections will be smooth and stable even on slower internet connections. SSH tunnelling can be used. TigerVNC supports security schemes such as X509 that combines standard VNC authentication with GNUTLS encryption and server identification. <=",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ffcf9816017dbdcdc6bbfbc41f5c218d",
    "u": "https://server.tymyrddin.dev/docs/firewall/nftables",
    "t": "NFTables ",
    "c": "NFTables  Available upstream since Linux kernel 3.13. Basic idea  Got an idea! Working on it … Warning: untested! flush ruleset table inet filter { set inet filter tcp_port_out { type inet_service; elements = { 53, # DNS 11371, # OpenPGP HTTP Keyserver 2200, # SSH 80, # HTTP 443, # HTTPS } } set inet filter tcp_port_in { type inet_service; elements = { 2200, # SSH } } set inet filter udp_port_out { type inet_service; elements = { 53, # DNS 123, # NTP } } set inet filter udp_port_in { type inet_service; elements = { } } set inet filter user_out { type uid; elements = { } } set inet filter user_in { type uid; elements = { } } set tcp_scan_ports { type inet_service; elements = { 22, # SSH 23, # Telnet 1433, # MS SQL Login 8080, # HTTP Alternate 50661, # Apple Xsan } } set udp_scan_ports { type inet_service; elements = { 53, # DNS 5060, # SIP 53413, # Netis backdoor } } chain base_checks { # allow established/related connections ct state {established, related} accept # early drop of invalid connections ct state invalid log prefix \"Invalid \" drop } chain input { type filter hook input priority 0; # Accept on localhost iifname lo accept jump base_checks # Accept neighbour discovery ip6 nexthdr icmpv6 icmpv6 type { nd-neighbor-solicit, nd-router-advert, \\ nd-neighbor-advert } accept # Accept ping ip protocol icmp type { echo-request } accept # Allow IGMP ip protocol igmp accept tcp dport @tcp_port_in ct state new accept udp dport @udp_port_in ct state new accept meta skuid @user_in ct state new accept tcp dport @tcp_scan_ports drop udp dport @udp_scan_ports drop # Count and drop any other traffic counter log prefix \"Drop_in \" drop } # Not a gateway. We do not forward. chain forward { type filter hook forward priority 0; policy drop; jump base_checks } chain output { type filter hook output priority 0; # Accept from localhost oifname lo accept jump base_checks # Accept neighbour discovery ip6 nexthdr icmpv6 icmpv6 type { nd-neighbor-solicit, nd-router-advert, \\ nd-neighbor-advert } accept # Accept ping ip protocol icmp type { echo-request } accept tcp dport @tcp_port_out ct state new accept udp dport @udp_port_out ct state new accept meta skuid @user_out ct state new accept # Count and drop any other traffic counter log prefix \"Drop_out \" drop } kernel  [*] Networking support ---> Networking options ---> [*] Network packet filtering framework (Netfilter) ---> Core Netfilter Configuration ---> <M> Netfilter nf_tables support <M> Netfilter nf_tables conntrack module <M> Netfilter nf_tables counter module <M> Netfilter nf_tables log module <M> Netfilter nf_tables limit module <M> Netfilter nf_tables masquerade support <M> Netfilter nf_tables nat module IP: Netfilter Configuration ---> <M> IPv4 nf_tables support <M> IPv4 nf_tables route chain support <M> IPv4 packet rejection <M> IPv4 NAT <M> IPv4 nf_tables nat chain support <M> IPv4 masquerade support <M> IPv4 masquerading support for nf_tables Configuration files  Create a main table, for example A file /etc/nftables/main_config.conf where elements can be added A file /etc/nftables/main.conf with a skeleton inet table Set up the activation scripts /etc/nftables.conf as startup script (flushes rule set) /etc/nftables/reload_main.conf as reload script (deletes table) SSHguard  To integrate with SSHguard , edit /etc/sshguard.conf and change the value of BACKEND : BACKEND=\"/usr/lib/sshguard/sshg-fw-nft-sets\" When starting or enabling the sshguard.service , two new tables named sshguard in the ip and ip6 address families are added which filter incoming traffic through sshguard’s list of IP addresses. The chains in the sshguard table have a priority of -10 and will be processed before other rules of lower priority.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "790f5a899ae9c454c96e353c14aa69a8",
    "u": "https://server.tymyrddin.dev/docs/encryption/openvpn",
    "t": "OpenVPN ",
    "c": "OpenVPN  Installation  # apt-get install openvpn Server configuration  The sample server configuration file that comes with OpenVPN is a good starting point. It will create a VPN using a virtual tun network interface (for routing), will listen for client connections on udp port 1194 , and distribute virtual addresses to connecting clients from the 10.8.0.0/24 subnet. # cd /etc/openvpn/server # cp /usr/share/openvpn/examples/server.conf . # vi /etc/openvpn/server/server.conf The server will start as root, but for security, can be set to drop to lower privileges after startup, by removing the semicolons (uncommenting) the user nobody and group nogroup directives. Also uncomment out the client-to-client directive if you want clients to not only be able to reach the server over VPN (the default), but also each other. Set the ca , cert , key , and dh parameters in the config file to point to the files generated in the PKI setup . If you have set the DH key size to 2048 instead of the default 1024, change dh dh1024.pem accordingly. For assigning the different clients static IP addresses from the OpenVPN server, uncomment client-config-dir ccd Enabling compression is not recommended; it opens the server up to the VORACLE attack vector. It is recommended to use OpenVPN over UDP, because TCP over TCP is a bad idea. Write and quit. Assign static IP addresses  Create the client configuration directory: # mkdir /etc/openvpn/ccd For each client, create a configuration file assigning it to a static IP address. For example: In /etc/openvpn/ccd/<clientname1> ifconfig-push 10.8.0.5 10.8.0.6 The first client will use 10.8.0.6 as its IP address, and 10.8.0.5 is the VPN tunnel endpoint. The second address is only used to route traffic through the tunnel. This is because each client uses a CIDR/30 network. Per client 4 IP addresses are used. In /etc/openvpn/ccd/<clientname2> ifconfig-push 10.8.0.9 10.8.0.10 And in /etc/openvpn/ccd/<clientname3> ifconfig-push 10.8.0.13 10.8.0.14 To use a virtual IP address range other than 10.8.0.0/24 , modify the server directive. Mind that the virtual IP address range must be a private range currently unused on the network. Firewall server  Limit the incoming OpenVPN connections to the IP addresses of the servers you want the backend server to connect with in the firewall. Start the OpenVPN server  # systemctl openvpn start Client configurations  On a client: Copy the example client configuration file # cd /etc/openvpn/client/ # cp /usr/share/openvpn/examples/client.conf . # vi /etc/openvpn/client.conf Make changes: Add the address of the OpenVPN server to the configuration file: Look for remote my-server-1 1194 and change my-server-1 into the IP address of the server. Look for cert client.crt and key client.key and change them to the names of the keys that were copied over. Firewall client  Punch a hole for the server address in your firewall. Fire it up!  # systemctl openvpn start",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "2485ece87355ee5023d46b3c03bec24e",
    "u": "https://server.tymyrddin.dev/docs/vnc/tightvnc",
    "t": "TightVNC ",
    "c": "TightVNC  TightVNC is a fast and lightweight remote control package. This choice will ensure that our VNC connection will be smooth and stable even on slower internet connections. It encrypts VNC passwords sent over the net (DES-encrypted challenge-response scheme and the password is limited by 8 characters), but the rest of the traffic is sent in the clear and are a security risk. Recommended is using TightVNC with ssh (and that defeats our purpose of only using it when ssh fails) Installation  Install the Xfce desktop environment on the server: # apt-get install xfce4 xfce4-goodies Install the vnc server: # apt-get install tightvncserver Create a new user to access the server. # useradd vncuser Add the user to the sudo group: # usermod -aG sudo vncuser As the vncuser, set up a secure password and create the initial configuration files: vncuser@localhost $ vncserver You will require a password to access your desktops. Password: Verify: Creating default startup script /home/vncuser/.vnc/xstartup Starting applications specified in /home/vncuser/.vnc/xstartup Log file is /home/vncuser/.vnc/localhost.localdomain:1.log Enter and verify a password to access the server remotely. It must be between six and eight characters long. More than 8 characters will be truncated automatically. The process then creates the necessary default configuration files and connection information for the server. Configuration  Default for the service is on port 5901 (display port :1 ). Stop the service: $ vncserver -kill :1 Make a backup of the xstartup file: $ mv ~/.vnc/xstartup ~/.vnc/xstartup.old Create a new xstartup file and open it (empty file): $ vi ~/.vnc/xstartup To have VNC read the server user’s .Xresources file and launch Xfce (in the background), append: #!/bin/bash xrdb $HOME/.Xresources startxfce4 & Write and quit file, and (as root) make it executable. # chmod +x ~/.vnc/xstartup Restart VNC: $ vncserver Firewall  Open ports in the firewall for inbound communication. Control  For starting, stopping, and restarting the service, create a new (empty) systemd unit file /etc/systemd/system/vncserver@.service # vi /etc/systemd/system/vncserver@.service The @ symbol will allow for passing an argument (the VNC display port). Append: [Unit] Description=Start TightVNC server at startup After=syslog.target network.target [Service] Type=forking User=vncuser Group=vncuser WorkingDirectory=/home/vncuser PIDFile=/home/vncuser/.vnc/%H:%i.pid ExecStartPre=-/usr/bin/vncserver -kill :%i > /dev/null 2>&1 ExecStart=/usr/bin/vncserver -depth 24 -geometry 1280x800 :%i ExecStop=/usr/bin/vncserver -kill :%i [Install] WantedBy=multi-user.target Reload systemd manager configuration # systemctl daemon-reload Enable the unit file # systemctl enable vncserver@1.service Kill the vncserver $ vncserver -kill :1 And start it as any other systemd service. $ sudo systemctl start vncserver@1 Verify $ sudo systemctl status vncserver@1 Clients  Windows: TightVNC, RealVNC, or UltraVNC. MacOS: Apple Remote or RealVNC. Linux: vinagre, krdc, RealVNC, or TightVNC. Configuration resources  TightVNC",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e879fe1c9d9bc31e710fb0acbd9e7f41",
    "u": "https://server.tymyrddin.dev/docs/incidents/prevention",
    "t": "Preventing incidents ",
    "c": "Preventing incidents  Use the principle of least privilege . The idea is to give users as few permissions as possible. While the sudo command is useful, it is often misused. By default, anyone that is a member of the sudo group can use sudo to do whatever they want. Restrict sudo access to particular commands. In regard to network shares, it’s always best to default to read-only whenever possible. This is not just because of the chance of a user accidentally deleting data; it’s always possible for applications to malfunction and delete data as well. With a read-only share, the modification or deletion of files is not possible. Additional read-write shares can be created for those who need them, but if possible, always default to read-only. Physical security is every bit as important as securing operating systems, applications, and data. Ensure security updates are installed in a timely fashion, utilizing security applications such as failure monitors and firewalls, and ensuring secure settings for OpenSSH.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c28590bcea6bb8bd483e139bb30ad1e3",
    "u": "https://server.tymyrddin.dev/docs/incidents/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  A good incident response plan will include a list of guidelines to be followed with regard to implementing new servers and managing current ones (isolating compromised servers, strategically patching and recovering servers). Create guidelines for things such as user management, server management, application installations, security, and procedure documents. Why?  We always do our best to design the most stable and fault-tolerant server implementations we possibly can. We can not prevent every type of incident that could possibly happen but having a good plan in place and following that plan will lessen the likelihood an incident becomes a disaster. How?  Preventing incidents Using git for configuration management Implementing a backup plan Using bootable recovery media Notes  Do not store backups or old versions of software on the production system. Automate making backups. Mastering Ubuntu Server, Jay LaCroix, Fourth Edition",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "95d3a27393444a24400ba6800acb21ef",
    "u": "https://server.tymyrddin.dev/docs/logfiles/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Server logs contain information that cannot be found anywhere else. For example, server errors and user access records. Why?  Having the ability to review these logs gives the ability to determine what caused an issue on the server. How?  rsyslogd Log commands Path of a common intruder Logrotate Centralised logging Notes  Make sure logs are working properly. syslog on Debian contains everything except authentication-related messages. Authentication related events can be found in auth.log . Use it to investigate failed login attempts, brute-force attacks and other vulnerabilities related to user authorisation mechanisms. RedHat and CentOS based systems use the secure file for tracking all security related messages including authentication failures, sudo logins, ssh logins and other errors logged by the system security services daemon and is very useful for detecting hacking attempts. Additional logs that may give clues are faillog containing information on failed login attempts and can be used to detect attempted security breaches involving username/password hacking and brute-force attacks. Normally I am all for distributed and decentralised systems, but for an infrastructure with multiple servers, centralised logging saves a lot of time and energy. When setting up a machine to act as log server, harden it and only use it to collect logs from other machines on your network. It should not be running anything else. Log what is needed to track the path of a common intruder . If and when it is all running well, consider setting up for intrusion detection and log correlation.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d7db2b4d3470b6d526b682e7c02c6e78",
    "u": "https://server.tymyrddin.dev/docs/pki/tls-ssl",
    "t": "TLS/SSL ",
    "c": "TLS/SSL  The CA is always the first subsystem to be configured; every other subsystem depends on the CA for its configuration. The CA, along with setting up the CA hierarchy for the PKI, issues certificates which every subsystem uses to function and sets up a security domain which establishes trusted relationships between subsystems. Installation  On all systems and subsystems install openssl. # apt-get install openssl Use the script that comes with the openssl package: # /usr/lib/ssl/misc/CA.pl -newca The script will take you through all the steps of creating your CA. The fields do not matter much. It is rather self-explanatory. Configuration  The script has created a new directory demoCA with the CA’s private key and public key/certificate in it. Demo useful. # vi /etc/ssl/openssl.cnf Change: dir = /etc/ssl/ca ... default_days = 730 default_bits = 2048 Edit the script too: # vi /usr/lib/ssl/misc/CA.pl Change: $DAYS=\"-days 730\"; # 2 year $CADAYS=\"-days 3650\"; # 10 years ... default_bits = 2048 And change (further down): system (\"$REQ -new -keyout \" . to system (\"$REQ -newkey rsa:2048 -keyout \" . Generating keys  For creating digital certificates for servers on your LAN, for VPN clients or for whatever service you need to use with SSL, two steps are needed: To create a private key and a certificate request (Many questions. Not important, except that the CN of the certificate must be the domain name of the site you wish to secure): # /usr/lib/ssl/misc/CA.pl -newreq Sign the request and generate a newcert.pem with the signed certificate. You will have to enter the password for your CA key which you supplied when creating the CA key, certificate and store. # /usr/lib/ssl/misc/CA.pl -sign The certificate’s key has a passphrase assigned during the -newreq phase. If you want your software to be able to autostart this won’t work. To remove a passphrase: # openssl rsa -in newkey.pem -out newkey.nopass.pem Rename newkey.pem and newcert.pem to something useful, like hostname.key and hostname.cert . Configuration resources  OpenSSL PKI Tutorial v1.1 Building a Root CA and an Intermediate CA using OpenSSL and Debian Stretch",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5c7f02a776f445962324450dcfb7f440",
    "u": "https://server.tymyrddin.dev/docs/firewall/pf",
    "t": "Packet filtering ",
    "c": "Packet filtering  PF is a packet filtering tool with simple syntax, user-friendliness, and extensive features. The packet filtering takes place in the kernel. A pseudo-device, /dev/pf , allows userland processes to control the behaviour of the packet filter ( ioctl interface). There are commands to enable and disable a filter, load rule sets, add and remove individual rules or state table entries, and retrieve statistics. The most commonly used functions are covered by pfctl . Configuration resources  OpenBSD Handbook Packet Filter",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "7b89826a04dd3131264722bfb7878414",
    "u": "https://server.tymyrddin.dev/docs/firewall/fail2ban",
    "t": "Fail2ban ",
    "c": "Fail2ban  Note: Fail2Ban can reduce the rate of incorrect authentications attempts but cannot eliminate the risk weak authentication presents. Installation  Installing fail2ban package in Debian: # apt-get install fail2ban Check it was properly installed: # fail2ban-client -h Configuration  To configure fail2ban, make a local copy of the jail.conf file in /etc/fail2ban : # cd /etc/fail2ban # cp jail.conf jail.local Edit the file: # vi jail.local Set the IPs you want fail2ban to ignore (the list of clients that are not subject to the fail2ban policies), the ban time (in seconds) and maximum number of user attempts: [DEFAULT] # \"ignoreip\" can be an IP address, a CIDR mask or a DNS host ignoreip = 127.0.0.1 bantime = 3600 maxretry = 3 Jails are the rules which fail2ban apply to a given application/log. To enable log monitoring for Nginx login attempts, enable the nginx-http-auth jail: [nginx-http-auth] enabled = true filter = nginx-http-auth port = http,https logpath = /var/log/nginx/error.log maxretry = 6 For apache: [apache] enabled = true port = http,https filter = apache-auth logpath = /var/log/apache*/*error.log maxretry = 6 To tweak or add log filters, see the files in /etc/fail2ban/filter.d . Restart fail2ban. Test  To test fail2ban, look at the iptable rules before and after attempting to log in to a service that fail2ban is monitoring from another machine and look at the iptable rules to see if that IP source gets added: # iptables -L Usage  To check if an IP is banned (in Nginx): $ sudo fail2ban-client status nginx-naxsi To unban an IP address: $ sudo fail2ban-client set nginx-naxsi unbanip xxx.xxx.xxx.xxx To see all jails: $ sudo fail2ban-client status [sudo] password for nina: Status |- Number of jail: 25 `- Jail list: http-get-dos, nginx-noscript, proftpd, WP-Login-POST, nginx-login, spam-log, wppingback, postfix-sasl, nginx-conn-limit, nginx-proxy, nginx-auth, block-scanners, nginx-naxsi, nginx-badbots, BASH, sshd, pam-generic, named-refused-udp, postfix, WP-Login, ssh-ddos, wordpress, webmin-auth, dovecot, ssh Note for Apache  Fail2ban scans log files like /var/log/apache/error_log , /var/log/auth.log and /var/log/apache/access.log and temporarily or persistently bans failure-prone addresses by updating existing firewall rules. Out of the box Fail2Ban comes with filters for various services (apache, courier, ssh, etc).",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "92ae258b797328e0d65cc2e9781b5526",
    "u": "https://server.tymyrddin.dev/docs/pki/problems",
    "t": "Problems ",
    "c": "Problems  PKI is failing by trying to be all things to all people and things. PKIs have experienced a hype and many companies and organizations announced to provide certification services to the general public. Only a few of these have succeeded and actually provide certification services that can be taken seriously. X.509 standard  X.509 is a complex standard and X.509 certificates are complex data structures with a lot of fields, many of which are critical and/or non-critical extension fields. Complex technology is not easy to deploy on a large-scale. Since Peter Gutmann from Auckland University published the X.509 Style Guide in 2000, little has improved. X.509 certificates are specified with ASN.1 and the resulting data structures are not very meaningful for humans (and hard to parse). The X.509 specification is scattered across many standards, drafts and amendments from multiple standard bodies, leading to confusion and numerous profiles that lack interoperability. Parts of the standard, even some that are related to key elements, are underspecified. That leads to ambiguity, unknown semantics and interoperability issues, like the country code, date/time formats in validity or path validation. Technical  Public key pairs must be generated in an efficient and secure (centralized or decentralized) way, and require a cryptographically strong pseudo-random bit generator, something which is not always available to end-users. Private keys must be securely stored in a personal security environment (and not a vulnerable endpoint), and for Web PKI public CA’s certificates must be made publicly available in a certificate repository or directory service. Hierarchical trust models are dangerous, because they provide a single point of attack. Alternative models (for example the mesh model) are poorly scalable in time and in space. Certificate authorities (CA’s) have to periodically send out a list of certificates that have been revoked (CRL’s), meaning that a user will not only have to get the corresponding certificates from the certification chain, but will also have to check that those certificates are not in the CRL. The definition and maintenance of a global name space is not as simple in practice. Cross-certification does not work in practice because competition is rule. Economical  The establishment and operation of a top CA requires large investments. One needs protection from adversaries trying to break into the facility, intercepting electromagnetic signals, and exploitation of other weaknesses of the used hardware and software, and one needs qualified personnel able to withstand all of the regulation and bureaucratic stuff. The ROI of a top CA is difficult to determine and quantify. Like many other infrastructure components, public key certificates do not provide a specific function in and of themselves, but provides only the means to secure functions and applications of other infrastructures. IOW, business cases for PKI’s are extremely hard to make. That part got solved, with some scary stuff happening, web PKI next in the chain, and hosting companies (re)selling certificates. Juridical  If a digital signature is generated according to some digital signature law, then somebody must be made liable if something goes wrong. If that is the Credential service provider (CSP), the insurance protection must be taken into account in a business case. As Bruce Schneier pointed out in Secrets and Lies , CA’s usually limit their liability to the protection of their private key. As the CA plays the role of a trusted third party users of certificates are put at a disadvantage. CA’s are like a notary who would only be liable to keep his stamp secure. Nothing changed much there either. The owner of a public key certificate cannot repudiate a signature that is generated with the appropriate signing key, which may lead to the situation in which a certificate owner may be held liable and accountable for statements that are digitally signed with the proper key, even if he or she does not know (and does not agree) with the statements. Social  In the real world, trust is based on two-way relationships and experiences that have been made over time. This can only insufficiently be modelled with hierarchical certificate models. Poor usability is a common feature of many products that employ (public key) cryptography. Secure cryptographic solutions and usability seem mutually exclusive. But then, there is not much focus on end users and UX design in general. What’s new? The users of public key cryptography are often not aware of the vulnerabilities and pitfalls. Privacy and security  X.509 uses features from other standards, like DNs from X.500 which are in itself complex and have little value and provides unanticipated attack vectors. SSL in the context of web browsers used to be target of several successful attacks, either directly on SSL (e.g. SSL renegotiation bug), the combination of https and http (SSL Strip), URL-forgery, and X.509-based attacks on ASN.1 and DN-parsing. Integration of PKI with the surrounding environment (end points, web applications) may allow compromise. Should a private key be compromised, an attacker would have access to data intended for the recipient. Attackers that gain access to private keys can also eavesdrop on content intended for a recipient and decrypt data as it’s collected. This is the biggest threat to the PKI system, because compromised keys require new keys to be issued, and old ones revoked. There is no easy, fast and effective method to revoke a root certificate. Anything less that a full compromise of the root key will tempt a CA to downplay the incident and revoke only certain certificates. This occurred with the DigiNotar-Hack, because the revocation of the root-CA would have interrupted the operation of many services. Revocation services are suspect to DoS-attacks. CAs are included in browsers by OS- and browser vendors without a common consistent policy. To be included in the trust store the vendor has to pay a fee. Only Microsoft requires a formal audit. As a result there is a sufficient number of weak and very weak CAs that are included in default certificate stores. In addition there is suspicion in the security community that governments use compelled certificates to tap Internet communication. Clients certificates and their attributes have zero security value, because there are CAs that do not validate the attributes including attributes with arbitrary OIDs (P. Gutmann). Some certificate stores contain funny root certificates that should be excluded on any serious security review. Alternatives  A variety of alternative approaches, ranging from simple workarounds to designing the application to sidestep PKI’s shortcomings, can help solve the problems inherent in the standard X.509 model. For example, in simple public key infrastructure (SPKI) and simple distributed security infrastructure (SDSI), keys are not bound to identities, but to roles or authorisations and names only have to be unique locally. Resources  PKI interoperability: Still an issue? A solution in the X.509 realm , Ahmad Samer Wazan Romain Laborde, François Barrere, Abdelmalek Benzekri, David W Chadwick, 2017 Why have public key infrastructures failed so far? , Javier Lopez, Rolf Oppliger, Gunther Pernu, 2005 PKI: It’s Not Dead, Just Resting , Peter Gutmann, 2002 The Emperor’s New Clothes: The Shocking Truth  Digital Signatures and Internet Commerce , Jane K. Winn, 2001 X.509 Style Guide, Peter Gutmann , 2000",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "43d8aedb9740b5cce9e491449c8e9bf8",
    "u": "https://server.tymyrddin.dev/docs/access/mac",
    "t": "Mandatory access control (MAC) ",
    "c": "Mandatory access control (MAC)  Mandatory Access Control (MAC) is a type of Access Control. It goes along with Discretionary Access Control, Role Based Access Control, and Rule Based Access Control. MAC is considered the strongest form of access control due to allowing more control over who has access over what. In a Linux system, there are multiple ways to implement MAC. Two of which being SELinux and AppArmor. SELinux  SELinux is a free open source software project that was developed by the U.S. National Security Agency. While it can theoretically be installed on any Linux distribution, Red Hat-type distributions are the only ones that come with it already set up and enabled. It uses code in Linux kernel modules, along with extended filesystem attributes, to help ensure that only authorised users and processes can access either sensitive files or system resources. There are three ways in which SELinux can be used: It can help prevent intruders from exploiting a system. It can be used to ensure that only users with the proper security clearance can access files that are labeled with a security classification. In addition to MAC, SELinux can also be used as a type of role-based access control. AppArmor  AppArmor is the MAC system that comes installed with the SUSE and the Ubuntu families of Linux. Although it’s designed to do pretty much the same job as SELinux, its mode of operation is substantially different: SELinux labels all system processes and all objects such as files, directories, or network ports. For files and directories, SELinux stores the labels in their respective inodes as extended attributes. (An inode is the basic filesystem component that contains all information about a file, except for the filename.) AppArmor uses pathname enforcement, which means that you specify the path to the executable file that you want AppArmor to control. This way, there’s no need to insert labels into the extended attributes of files or directories. With SELinux, you have system-wide protection out of the box. With AppArmor, you have a profile for each individual application. With either SELinux or AppArmor, you might occasionally find yourself having to create custom policy modules from scratch, especially if you’re dealing with either third-party applications or home-grown software. With AppArmor, this is easier, because the syntax for writing AppArmor profiles is much easier than the syntax for writing SELinux policies. And AppArmor comes with utilities that can help you automate the process. Just as SELinux can, AppArmor can help prevent malicious actors from ruining your day and can help protect user data. The AppArmor directory is located at /etc/apparmor.d . This directory contains all the AppArmor profiles. The sbin.dhclient and usr.* files are AppArmor profiles. The abstractions directory is a sort of “includes” folder that has partially written profiles that can be used and included in custom profiles. Part of the work has already been done. Additional profiles can be installed with: sudo apt install apparmor-profiles apparmor-profiles-extra",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "046648d4934643901a204f6789f5cab5",
    "u": "https://server.tymyrddin.dev/docs/firewall/iptables",
    "t": "iptables ",
    "c": "iptables  iptables is not the name of Linux’s firewall. It is just one way of interacting with netfilter which every Linux distribution comes with. As such, iptables is a command line utility for configuring the Linux kernel firewall implemented within the Netfilter project. And it gets complex rather quickly which increases the risk of making mistakes. For a bare metal server running only a dedicated application, such as a Schleuder list, iptables is the simplest (and minimalistic) choice. For Ubuntu, it comes with the Uncomplicated Firewall ( ufw ), which is an easy-to-use frontend for iptables. As of CentOS version 7, FirewallD replaces iptables as default. The four components of iptables  iptables has 4 different components to it that all come together to give the utility its overall functionality: Filter table - offers the basic protection that you’d expect a firewall to provide Network Address Translation table - connects the public interwebs to the private networks Mangle table - for mangling them packets as they go through the firewall Security table - only used by SELinux Install and enable IPTables  In case it is not installed and you wish to install it: # yum install iptables-services Start the service: # systemctl start iptables # systemctl start iptables6 Enable automatic start on system boot # systemctl enable iptables # systemctl enable iptables6 Check iptables service status # systemctl status iptables # systemctl status iptables6 Chains  INPUT - packets coming into the firewall FORWARD - packets routed to another NIC on the network; for packets on the local network that are being forwarded on. OUTPUT - packets going out of the firewall Rules  Status command  To list rules -L showing interface name, rule options, TOS masks, packet and byte counters -n , and IP address and port in numeric format without using DNS to resolve names -v : # iptables -L -n -v With line numbers (important for deleting or inserting new rules into the firewall): # iptables -n -L -v --line-numbers To display INPUT or OUTPUT chain rules: # iptables -L INPUT -n -v # iptables -L OUTPUT -n -v --line-numbers Deleting a rule  To delete line number 4 using -D to delete one or more rules from the selected chain: # iptables -D INPUT 4 Inserting a rule  # iptables -L INPUT -n --line-numbers Chain INPUT (policy DROP) num target prot opt source destination 1 DROP all -- xxx.xxx.xxx.1 0.0.0.0/0 2 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state NEW,ESTABLISHED Inserting a rule between 1 and 2: # iptables -I INPUT 2 -s xxx.xxx.xxx.2 -j DROP Gives: # iptables -L INPUT -n --line-numbers Chain INPUT (policy DROP) num target prot opt source destination 1 DROP all -- xxx.xxx.xxx.1 0.0.0.0/0 2 DROP all -- xxx.xxx.xxx.2 0.0.0.0/0 3 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state NEW,ESTABLISHED Saving the rules  For saving the rules so they can be loaded at every reboot (you need to have iptables-persistent installed) # iptables-save > /etc/iptables/rules.v4 # ip6tables-save > /etc/iptables/rules.v6 Stop/Restart  Some distros like CentOS have installed a service called iptables to start and stop the firewall and a configuration file to configure it. For all other distros, iptables is a command, not a service. If you edited the configuration file manually, you have to reload iptables. Or load it directly through iptables: # iptables-restore < /etc/iptables/iptables.rules Usage  To deny all incoming and allow all outgoing connections ON A BARE METAL MACHINE where you have ACCESS TO THE CONSOLE: # Set default chain policies iptables -P INPUT DROP iptables -P FORWARD DROP iptables -P OUTPUT ACCEPT # Accept on localhost iptables -A INPUT -i lo -j ACCEPT iptables -A OUTPUT -o lo -j ACCEPT # Allow established sessions to receive traffic iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT SSH  For SSH access (-I inserts it before all other rules in INPUT): # iptables -I INPUT -p tcp --dport 22 -j ACCEPT If your SSH service is listening on another port, use that port instead of 22. OpenVPN  Create an iptables rule for NAT forwarding. An example (assuming the interface to forward to is named eth0): # iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE If the server cannot be pinged through the VPN, rules to open up TUN/TAP interfaces to all traffic may be needed: # iptables -A INPUT -i tun+ -j ACCEPT # iptables -A FORWARD -i tun+ -j ACCEPT # iptables -A INPUT -i tap+ -j ACCEPT # iptables -A FORWARD -i tap+ -j ACCEPT Set up rules for accepting connections from the OpenVPN port (default 1194) and through the physical interface, and make the changes permanent. SMTP Secure Sockets Layer  With SMTP Secure Sockets Layer (SSL) enabled, allow connections to port 587 (similar for 465). Add the rule for this port: # iptables -I INPUT 2 -p tcp --dport 587 -j ACCEPT Add the POP and IMAP ports and their secure counterparts: # iptables -I INPUT 3 -p tcp --dport 110 -j ACCEPT # iptables -I INPUT 4 -p tcp --dport 143 -j ACCEPT # iptables -I INPUT 5 -p tcp --dport 993 -j ACCEPT # iptables -I INPUT 6 -p tcp --dport 995 -j ACCEPT Save the iptables rules and restart iptables.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4b4c9c8b914e5d29f5b83b3a52376968",
    "u": "https://server.tymyrddin.dev/docs/firewall/ufw",
    "t": "UFW ",
    "c": "UFW  ufw is a program for managing a netfilter firewall with ease. It uses a command-line interface consisting of a small number of simple commands. Installation  On the backend server, install Uncomplicated Firewall (UFW) for configuring iptables. # apt-get install ufw Control  Start and enable: # systemctl start ufw # systemctl enable ufw Usage  To deny all incoming and allow all outgoing connections: # ufw default allow outgoing # default deny incoming SSH  # ufw allow ssh/tcp Or if you have changed port: # ufw allow <port>/tcp Nginx HTTP  # ufw allow 'Nginx HTTP' Nginx HTTPS  To allow HTTPS traffic, allow the Nginx Full profile and delete the redundant Nginx HTTP profile allowance: # ufw allow 'Nginx Full' # ufw delete allow 'Nginx HTTP' Logging  # ufw logging on OpenVPN  For openvpn: # vi /etc/default/ufw To allow ufw forwarding (VPN) traffic, append: DEFAULT_FORWARD_POLICY=\"ACCEPT\" Write and quit. Change /etc/ufw/before.rules : # NAT (Network Address Translation) table rules *nat :POSTROUTING ACCEPT [0:0] # Allow traffic from clients to the interface -A POSTROUTING -s 10.8.0.0/24 -o interface -j MASQUERADE # Optionally duplicate this line for each subnet if your setup requires it -A POSTROUTING -s 10.8.1.0/24 -o interface -j MASQUERADE # do not delete the \"COMMIT\" line or the NAT table rules above will not be processed COMMIT # Don't delete these required lines, otherwise there will be errors *filter ... Write and quit. Open the chosen openvpn port (default 1194/udp): # ufw allow 1194/udp Reload/restart ufw: # ufw reload",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "62e007e849431769363e8bca2a580393",
    "u": "https://server.tymyrddin.dev/docs/incidents/backup",
    "t": "Implementing a backup plan ",
    "c": "Implementing a backup plan  Backups are one of those things that some people don’t seem to take seriously until it’s too late. Data loss can be a catastrophic event for an organisation, so it’s imperative that you implement a solid backup plan. There’s no one best backup solution, since it all depends on what kind of data you need to secure, and what software and hardware resources are available to you. This may mean that you’ll need to make some compromises, such as creating regular snapshots of your database server’s storage volume or regularly dumping a backup of your important databases to an external storage device. The rsync utility is one of the most valuable pieces of software around to server administrators. It allows us to do some really wonderful things. In some cases, it can save us quite a bit of money. For example, online backup solutions are wonderful in the sense that we can use them to store off-site copies of our important files. And depending on the volume of data, they can be quite expensive. With rsync , we can back up our data in much the same way, with not only our current files copied over to a backup target but also differentials. If we have another server to send the backup to, even better. sudo rsync -a /home /backup Where the -a option, the archive mode, is a wrapper option that includes the following options all at the same time: -rlptgoD To point rsync to another server, rather than to another directory on the local server: sudo rsync -av /home/myuser admin@IP_ADDRESS:/backup By default, rsync copies data between two locations, but it doesn’t remove anything. With the --delete option, you can synchronise two points, telling rsync to make them the same by allowing it to delete files in the target that are no longer in the source. Incremental backups  sudo rsync -avb --delete --backup-dir=/backup/incremental /src /target Copying files from /src to /target , but now sending replaced files to the /backup/incremental directory. This means that when a file is going to be replaced on the target, the original file will be copied to /backup/incremental . This works because we used the -b option (backup) and the --backup-dir option, which means that the replaced files will not be renamed; they’ll simply be moved to the designated directory. This allows us to effectively perform incremental backups. Using the Bash shell to make incremental backups work even better: CURDATE=$(date +%m-%d-%Y) sudo rsync -avb --delete --backup-dir=/backup/incremental/$CURDATE /src /target Simple script  \"\"\" Simple backup script which just creates the root structure in an other folder and syncs everything which recursively lies within one of the source folders. For files bigger than a threshold they are first gziped.\"\"\" import argparse import gzip import os import shutil import sys import threading def parse_input (): parser = argparse . ArgumentParser () parser . add_argument ( '-target' , nargs = 1 , required = True , help = 'Target Backup folder' ) parser . add_argument ( '-source' , nargs = '+' , required = True , help = 'Source Files to be added' ) parser . add_argument ( '-compress' , nargs = 1 , type = int , help = 'Gzip threshold in bytes' , default = [ 100000 ]) # no input means show me the help if len ( sys . argv ) == 1 : parser . print_help () sys . exit () return parser . parse_args () def size_if_newer ( source , target ): # If newer it returns size, otherwise it returns False src_stat = os . stat ( source ) try : target_ts = os . stat ( target ) . st_mtime except FileNotFoundError : try : target_ts = os . stat ( target + '.gz' ) . st_mtime except FileNotFoundError : target_ts = 0 # The time difference of one second is necessary since subsecond accuracy # of os.st_mtime is striped by copy2 return src_stat . st_size if ( src_stat . st_mtime - target_ts > 1 ) else False def threaded_sync_file ( source , target , compress ): size = size_if_newer ( source , target ) if size : thread = threading . Thread ( target = transfer_file , args = ( source , target , size > compress )) thread . start () return thread def sync_file ( source , target , compress ): size = size_if_newer ( source , target ) if size : transfer_file ( source , target , size > compress ) def transfer_file ( source , target , compress ): \"\"\" Either copy or compress and copies the file \"\"\" try : if compress : with gzip . open ( target + '.gz' , 'wb' ) as target_fid : with open ( source , 'rb' ) as source_fid : target_fid . writelines ( source_fid ) print ( 'Compress {} ' . format ( source )) else : shutil . copy2 ( source , target ) print ( 'Copy {} ' . format ( source )) except FileNotFoundError : os . makedirs ( os . path . dirname ( target )) transfer_file ( source , target , compress ) def sync_root ( root , arg ): target = arg . target [ 0 ] compress = arg . compress [ 0 ] threads = [] for path , _ , files in os . walk ( root ): for source in files : source = path + '/' + source threads . append ( threaded_sync_file ( source , target + source , compress )) # sync_file(source, target + source, compress) for thread in threads : thread . join () if __name__ == '__main__' : arg = parse_input () print ( '### Start copy ####' ) for root in arg . source : sync_root ( root , arg ) print ( '### Done ###' )",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "515df808ba646b11fd5dda53057ac3e8",
    "u": "https://server.tymyrddin.dev/docs/users/disable-root",
    "t": "Disabling root access ",
    "c": "Disabling root access  Disabling the root login shell  When creating a virtual private server on a cloud service (Rackspace, DigitalOcean, Vultr), the cloud service will have you log in to that virtual machine as the root user. (Even with Ubuntu). The first thing that you will want to do is to create a normal user account and give it full sudo privileges. Then, log out of the root account and log back in with the normal user account, and disable the root account: sudo passwd -l root Disabling root SSH login  To disable the root SSH login, set #PermitRootLogin to no in /etc/ssh/sshd_config.conf . Disabling root using PAM  The PAM is “a powerful suite of shared libraries used to dynamically authenticate a user to applications (or services) in a Linux system”. The PAM settings are controlled by the conf file in /etc/pam.d or /etc/pam.conf . $ sudo vim /etc/pam.d/sshd OR $ sudo vim /etc/pam.d/login !!! WARNING !!! Editing the /etc/pam.d/* or /etc/pam.conf files can lock you out of your system. Add this rule in both files: auth required pam_listfile.so \\ onerr=succeed item=user sense=deny file=/etc/ssh/deniedusers auth : is the module type (or context). required : is a control-flag that means if the module is used, it must pass or the overall result will be fail, regardless of the status of other modules. pam_listfile.so : is a module which provides a way to deny or allow services based on an arbitrary file. onerr=succeed : module argument. item=user : module argument which specifies what is listed in the file and should be checked for. sense=deny : module argument which specifies action to take if found in file, if the item is NOT found in the file, then the opposite action is requested. file=/etc/ssh/deniedusers : module argument which specifies file containing one item per line. Next, create the file /etc/ssh/deniedusers and add the name root in it: $ sudo vim /etc/ssh/deniedusers Save the changes and close the file, then set the required permissions on it: $ sudo chmod 600 /etc/ssh/deniedusers From now on, the above rule will tell PAM to consult the /etc/ssh/deniedusers file and deny access to the SSH and login services for any listed user. Resources  How to Configure and Use PAM in Linux",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "210b3551e3bb184057550445304f8042",
    "u": "https://server.tymyrddin.dev/docs/services/systemctl",
    "t": "Auditing system services with systemctl ",
    "c": "Auditing system services with systemctl  On Linux systems that come with systemd , the systemctl command is pretty much a universal command. To view the status of services: sudo systemctl -t service --state=active With: -t service : We want to view information about the services – or, what used to be called daemons – on the system. --state=active : This specifies that we want to view information about all the system services that are actually running. This command shows the status of every service that’s running on your system. Generally, you do not want to see much information, although you might at times. Candidates for removal  Depending on what the server is for: smbd and nmbd indicates a Samba Process. Do you really need to export smb share on windows or other machine? telnet for bidirectional interactive text-oriented communication over internet or local area network? rlogin to log in to another host over network? rexec to execute shell commands on a remote computer. ftp to transfer files from one host to another host over Internet? automount to mount different file systems automatically to bring up network file system? named to run NameServer (DNS)? lpd to print to the server. inetd ? If you are running standalone applications like ssh which uses other standalone application like mysql , Apache , etc. then you don’t need inetd. portmap , an Open Network Computing Remote Procedure Call (ONC RPC) which uses rpc.portmap and rpcbind . If these processes are running, you are running NFS server. Really? NFS server is running unnoticed? Stop and disable  To stop a service, then prevent it from restarting at reboot: sudo systemctl stop <service> sudo systemctl disable <service> Example: sudo systemctl stop smbd sudo systemctl disable smbd",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "42e33c9f2848bdec00d57e3bd26d66dc",
    "u": "https://server.tymyrddin.dev/docs/logfiles/rsyslogd",
    "t": "Syslog ",
    "c": "Syslog  The rsyslogd service is a system utility providing support for message logging. Support of both internet and unix domain sockets enables this utility to be used for remote and local logging. Rsyslog is a multi-threaded implementation of syslogd. It is by default installed on Ubuntu, Debian, OpenSUSE and CentOS, next to systemd’s journald. A combined audit system for linux Allows for local and remote log collection. Remote logging makes day-to-day maintenance and incident response easier, log storage more secure, auditing more effective and analysis easier across multiple platforms. Allows for a single point of management Controlled per device in /etc/syslog.conf All reported messages are collected in a message file Log replication can copy the audit data to multiple remote-logging hosts It is recommended to also setup logrotate and compression. Setting it up  Set up a separate server for only logging purposes. Keep it in a secure location behind a (physical) firewall. Have no unnecessary services running on it. Delete all other user accounts. Add two snort boxes (IDS) that are actually syslog servers (yet have no IP address) and copy each packet intended for syslog server. With two boxes doing that independently from one another, court cases can be very convincingly supported. Thank you, Dean Bushmiller, that is a very, very good idea . Promiscuous mode Rule: Only listen for this IP address on this port (of syslog server) Server  Installation  # apt install rsyslog Start the service, enable it to auto-start at boot and check status: # systemctl start rsyslog # systemctl enable rsyslog # systemctl status rsyslog Configuration  Configuring rsyslog involves setting up input sources (where rsyslog receives logs), and destination rules for where and how logs are written. Rsyslog uses RainerScript for its configuration syntax. # vi /etc/rsyslog.conf By default, rsyslog uses the imjournal (importing structured log messages from systemd journal) and imusock modules (accepting syslog messages from applications running on the local system via Unix sockets). To configure it as a network and central logging server, the protocol (either UDP or TCP or both) it will use for remote syslog reception and the port it listens on must be configured. $ModLoad imudp $UDPServerRun <port> $ModLoad imtcp $InputTCPServerRun <port> Define the # rules for processing the remote logs . There be Templates . $template RemoteLogs,\"/var/log/remote/%HOSTNAME%/%PROGRAMNAME%.log\" *.* ?RemoteLogs & ~ Gather and write the received remote messages to distinct logs under /var/log/remote/ , based on the hostname client machine name and remote client application that generated the messages as defined in the RemoteLogs template. Record messages from all applications at all severity levels using the RemoteLogs template configuration. Stop processing the messages once it is written to a file. If not set, it would be written to the local files. OR for example, for allowing all hosts (but not applications) in a subnet XXX.XXX.XXX.XXX/24 to log to the machine, using only UDP. $ModLoad imudp $UDPServerRun <port> $AllowedSender UDP, XXX.XXX.XXX.XXX/24 $template RemoteStore, \"/var/log/remote/%HOSTNAME%/%timegenerated:1:10:date-rfc3339%\" :source, !isequal, \"localhost\" -?RemoteStore :source, isequal, \"last\" ~ Write and quit. Restart rsyslog daemon: # systemctl restart rsyslog Clients  Install rsyslog , and edit /etc/rsyslog.conf : *.* @XXX.XXX.XXX.XXX:<port> Configuration resources  rsyslog Configuring remote syslog from Unix/Linux and BSD/macOS Configuring remote syslog from Windows",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f637fbc5b318c3b6891cdbe0f3a52b35",
    "u": "https://server.tymyrddin.dev/docs/incidents/git",
    "t": "Using git for configuration management ",
    "c": "Using git for configuration management  One of the most valuable assets on a server is its configuration. This is second only to the data the server stores. Often, when we implement new technology on a server, we’ll spend a great deal of time editing configuration files all over the server to make it work as best as we can. This can include any number of things, from Apache virtual host files to DHCP server configuration, DNS zone files, and more. If a server were to encounter a disaster from which the only recourse was to completely rebuild it, the last thing we’d want to do is re-engineer all of this configuration from scratch. This is where Git comes in. Git isn’t just useful for software engineers. It is also a good tool we can leverage for keeping track of configuration files on our servers, for documentation, and for developing guidelines. When we make configuration changes, we can push the changes back to our Git server. If for some reason we need to restore the configuration after a server fails or is compromised via the config files, we can simply download configuration files from Git back onto the (new) server. Another useful aspect of this approach is that if an administrator implements a change to a configuration file that breaks a service, we can simply revert to a known working commit, and we’ll be immediately back up and running. Install git : sudo apt install git On the server, create a directory to host the repositories. For example, /git : sudo mkdir /git Modify this directory to be owned by the administrative user you use on your Ubuntu servers. Typically, this is the user that was created during the installation of the distribution. Use any user you want, just make sure the user is allowed to use OpenSSH to access the Git server. Change the ownership of the /git directory, so it is owned by this user. sudo chown lela:lela /git Create a Git repository in the /git directory. For Apache, a bare repository, a skeleton of a Git repository that does not contain any useful data, just some default configuration to allow it to act as a Git folder. To create the bare repository, cd into the /git directory and execute: git init --bare apache2 Initialized empty Git repository in /git/apache2/ On the client (the server that houses the configuration you want to place under version control), copy this bare repository by cloning it. To set that up, create a /git directory on the Apache server (or whatever kind of server you’re backing up) just as we did before. Then, cd into that directory and clone the repository: git clone IP_ADDRESS:/git/apache2 Replace the IP_address with either the IP address of the Git server or its hostname (if you’ve created a DNS entry for it). warning: You appear to have cloned an empty repository Make a backup of the current /etc/apache2 directory on the web server, in case we make a mistake while converting it to being version controlled: sudo cp -rp /etc/apache2 /etc/apache2.bak Then,move all the contents of /etc/apache2 into the repository: sudo mv /etc/apache2/* /git/apache2 The /etc/apache2 directory is now empty. Be careful not to restart Apache at this point; it won’t see its configuration files and will fail. Remove the (now empty) /etc/apache2 directory: sudo rm /etc/apache2 Make sure that Apache’s files are owned by root. Using the chown command, as we normally would to change ownership, we’ll also change the .git directory to be owned by root as well. We don’t want that, because the user responsible for pushing changes should be the owner of the .git folder. To change the ownership of the files to root, without touching hidden directories such as .git : sudo find /git/apache2 -name '.?*' -prune -o -exec chown root:root {} + Create a symbolic link to the Git repository so the apache2 daemon can find it: sudo ln -s /git/apache2 /etc/apache2 Check with: ls -l /etc | grep apache2 Reloading Apache, nothing should change, and it should find the same configuration files as it did before. sudo systemctl reload apache2 To push the changes back to the Git server, associate the files within the /git/apache2 directory into version control: git add . If you run the git status command from within your Git repository, you should see output indicating that Git has new files that haven’t been committed yet. A Git commit simply finalizes the changes locally. Basically, it packages up your current changes to prepare them for being copied to the server. To create a commit of all the files we’ve added so far, cd into the /git/apache2 directory and run: git commit -a -m \"Initial commit.\" the -a option tells Git to include anything that’s changed in the repository. The -m option allows attaching a message to the commit, which is required. If you don’t use the -m option, it will open your default text editor and allow you to add a comment from there. Push the changes back to the Git server: git push origin main By default, the git suite of commands utilizes OpenSSH, so our git push command should create an ssh connection back to the Git server and push the files there. You won’t be able to inspect the contents of the Git directory on your Git server, because it won’t contain the same file structure as your original directory. But when you pull a Git repository though, the resulting directory structure will be just as you left it. If you need to restore a repository onto another server, all you should need to do is perform a Git clone . To clone the repository into your current working directory: git clone IP_ADDRESS:/git/apache2 And each time you make changes to the configuration files, you can perform a git commit and then push the changes up to the server to keep the content safe: git commit -a -m \"Updated config: details.\" git push origin main To revert changes should the configuration get changed with non-working files, locate a known working commit and get its commit hash. A good method is using the tig command. The tig package must be installed for this to work: sudo apt install tig To use it, execute the tig command from within a Git repository. This will give a semi-graphical interface to browse through the Git commits. Select the best commit to go back to and get the commit hash. Exit tig by pressing q , then revert to that commit: git checkout <commit hash> Test the application to make sure that the issue is completely fixed. When finished testing, you can make the change permanent. Switch back to the most recent commit: git checkout main Then, permanently switch back to the commit that was found to be working properly: git revert --no-commit <commit hash> Then, commit the reverted Git repository and push it back to the server: git commit -a -m \"The previous commit broke the application. Reverting.\" git push origin main",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "760863b7ad4682ee152a2fbaeeb6164c",
    "u": "https://server.tymyrddin.dev/docs/encryption/ssh",
    "t": "Installing SSH ",
    "c": "Installing SSH  SSH (Secure Shell) is used for managing networks, operating systems, and configurations. It is also used inside many file transfer tools and configuration management tools. Functionally SSH keys resemble passwords. SSH keys are a pair of cryptographic keys using a public key cryptosystem that can be used to authenticate to an SSH server as an alternative to password-based logins. A private and public key pair are created prior to authentication. The private key is kept secret and secure by the user, while the public key can be shared with anyone. The advantage SSH authentication has over traditional password authentication is that you can be authenticated by the server without having to send your password over the network. Anyone eavesdropping on unencrypted connections will not be able to intercept and crack the password. It also allows for disabling password-based authentication. openSSH server  # apt-get install openssh-server # systemctl enable ssh # systemctl start ssh Control  On Debian, the default behaviour of an OpenSSH server is that it will start automatically as soon as it is installed. Verify it is running: # systemctl status ssh If it is not running, try to start it with: # systemctl start ssh Stop it with # systemctl stop ssh If you wish to disable OpenSSH server from starting up at boot: # systemctl disable ssh And enable for starting up at boot: # systemctl enable ssh Filtering  Allow SSH connections in the firewall. openSSH client  § sudo apt-get install openssh-client Generate a key Punch a hole in the firewall If ufw is installed on client, open port (22, oruse the port you need) Copy key to server. Connect and login. Resources  OpenSSH Security OpenBSD Security",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b85647f9699ff39e83fb859122f1c48a",
    "u": "https://server.tymyrddin.dev/docs/ids/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  A host-based intrusion detection system (HIDS) is a system that monitors a host on which it is installed to detect an intrusion and/or misuse, and responds by logging the activity and notifying the system administrators. Why?  Defend against a live attack How?  Samhain Maltrail Notes  Install HIDS right after installing the system. Tripwire creates a database of information related to your system, then compares that to what it finds when ran regularly, which it should, in order to get some real use out of it. Rkhunter is a Unix-based tool that scans for rootkits, backdoors and possible local exploits. Samhain provides file integrity checking, log file monitoring/analysis, rootkit detection, port monitoring, detection of rogue SUID executables, and hidden processes. Like having tripwire and rkhunter rolled into one. <=",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "06bf0b23ed4e96afda5a27a1e16f250e",
    "u": "https://server.tymyrddin.dev/docs/pki/internal-pki",
    "t": "Internal PKI ",
    "c": "Internal PKI  An Internal PKI consists of A master-your-own master Certificate Authority (CA) certificate and key which is used to sign each of the server and client certificates. A separate certificate (also known as a public key) and private key for the server and each client. The most secure way of doing this is to generate the Certificate Authority keys on a stand-alone (not Internet-connected) machine in a secure location. Master Certificate Authority (CA)  easy-rsa is a CLI utility to build and manage a PKI CA. It has a quickstart documentation and OpenVPN has example files. cd /etc/openvpn/ mkdir easy-rsa cd easy-rsa cp -r /usr/share/doc/openvpn/examples/easy-rsa/2.0/* . Edit the /etc/openvpn/easy-rsa/vars file #vi /etc/openvpn/easy-rsa/vars Append content to some of its variables. This will make the next step in the process faster. You can also skip this. The only parameter which must be explicitly entered is the Common Name. Now create the Certificate Authority Certificate and Key: # source vars # ./clean-all # ./build-ca Generating a 2048 bit RSA private key ............++++++ ...........++++++ writing new private key to 'ca.key' ----- You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [KG]: State or Province Name (full name) [NA]: Locality Name (eg, city) [BISHKEK]: Organization Name (eg, company) [OpenVPN-TEST]: Organizational Unit Name (eg, section) []: Common Name (eg, your name or your server's hostname) []: <hostname> Email Address [me@myhost.mydomain]: Hit enter, and again, and again … Later more master certificates and keys can be added, and when doing so do NOT use the ./clean-all instruction again. It wipes the Certificate Authority. Server key  Generate the server certificate and key with: # ./build-key-server <servername> Hit enter, and again, and again … including when it asks you to add a pass phrase. This is between servers. When it asks you if you wish to sign, answers yes, and you also want to commit. Client keys  For security, each client will get its own certificate and key. Per client: # ./build-key <clientname> Hit enter, and again, and again … including when it asks you to add a pass phrase. This is between servers. When it asks you if you wish to sign, answers yes, and you also want to commit. Diffie-Hellman parameters  Use the build-dh script to determine the encryption parameters necessary for the server end of a SSL/​TLS connection: ./build-dh And the system will get very busy with prime numbers. Copy keys  In the most secure possible way (for instance with scp ), copy keys and certs to their respective locations. ca.crt , dh2048.pem , <servername>.crt , and <servername>.key to /etc/openvpn on <servername> ca.crt , <clientname>.crt , and <clientname>.key to /etc/openvpn on <clientname> for each client server. Security improvement  All keys were created, signed and then distributed to the clients. A more secure way would be to generate the keys in their locations, submit a Certificate Signing Request (CSR) to the key-signing machine or transfer the CSR to the offline CA, the key-signing machine could have processed the request and returned a signed certificate which could have been transferred back to the clients. That way, the secret .key files stay on the machine on which they were generated.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "29f3ee54c8f211d86ecd5a113d66b2fc",
    "u": "https://server.tymyrddin.dev/docs/encryption/jumping",
    "t": "Jumping hosts ",
    "c": "Jumping hosts  Sometimes it is only possible to access a remote server using ssh by first logging in to another server (or firewall/jump host). This means having to authenticate twice and the chain can be long and not limited to just two hosts. I can only access the remote “Backend server” via ssh by first login into an intermediary Firewall/Bastion server called “jumphost”. First, login to jumphost: $ ssh user@jumphost Next, ssh through the intermediary system: $ ssh user@backendserver Or, use -tt , forcing “pseudo-tty” allocation: $ ssh -tt jumphost ssh -tt backendserver Alternatives to manually jumping about and making life much easier are ForwardAgent, ProxyCommand and ProxyJump. Starting from OpenSSH 7.3, released August 2016, the easiest way to pass through one or more jump hosts is with the ProxyJump directive. ForwardAgent  SSH agent forwarding can be used to make access to a server. It allows for the use of local SSH keys instead of leaving keys (without passphrases!) sitting on the server. The -A option enables forwarding of the authentication agent connection: ssh -A user@server.com It forwards the SSH authentication schema to the remote host to allow for the use of SSH on the jump host as if the user was on the local machine. A forwarding socket will be set up so that the SSH client on the first host can connect to the ssh-agent on the client machine to perform authentication on its behalf. The key is not forwarded, but the agent, meaning many keys can be added. Configuration  Create or open ~/.ssh/config : $ vi ~/.ssh/config Append the below entry (replacing XXX.XXX.XXX.XXX with actual server domain name or the IP): Host jumphost HostName XXX.XXX.XXX.XXX User user ForwardAgent yes Security problem  The problem is that while being connected to the first host, anyone with sufficient permission on the first host will be able to use that socket to connect to and use that local ssh-agent. A rogue root or evil admin with root access can eavesdrop on the ongoing session and impersonate the user for authentication to other servers during the time that user is connected to that server. A mentioned mitigation is using the -c option, which will show a confirmation window each time some program wants to use the agent to authenticate somewhere. Recommended is using ProxyCommand instead. Or even better, ProxyJump. ProxyCommand  ProxyCommand is an alternative for that is supposedly more secure than the above SSH agent forwarding. It is possible to connect via an intermediate machine using a SOCKS proxy. SOCKS4 and SOCKS5 proxies are both supported by OpenSSH. SOCKS5 allows for transparent traversal of a firewall or other application barrier by strong authentication with the help of GSS-API. Dynamic application-level port forwarding allows the outgoing port to be allocated on the fly thereby creating a proxy at the TCP session level. Using the ProxyCommand option to invoke netcat as the last in the chain is a variation of this for very old clients. The SSH protocol is forwarded by ‘’nc’’ (netcat) instead of ‘’ssh’’. Attention must also be paid to whether or not the username changes from host to host in the chain of SSH connections. The somewhat outdated netcat method does not allow a change of username. Other methods do. ssh -o ProxyCommand='ssh user@jumphost nc backendserver 22' user@backendserver The ‘’nc’’ command sets and establish a TCP pipe between jumphost (or firewall) and backendserver. Note: It is not possible to use both the ProxyJump and ProxyCommand directives in the same host configuration. The first one found is used and then the other blocked. Configuration  Create or open ~/.ssh/config $ vi ~/.ssh/config Append the below entry (replacing ‘’XXX.XXX.XXX.XXX’’ with actual server domain name or IP and ‘’user’’ with actual user): Host jumphost HostName XXX.XXX.XXX.XXX User user ProxyCommand ssh user@backendserver nc %h %p ProxyJump  Starting from OpenSSH 7.3, released August 2016, the easiest way to pass through one or more jump hosts is with the ProxyJump directive. The main method here is to use an SSH connection to forward the SSH protocol through one or more jump hosts, using the ProxyJump directive, to an SSH server running on a destination host (this method cannot be used if an intermediate host denies port forwarding). This is considered the most secure method because encryption is end-to-end. $ ssh -J user1@jumphost.whatever.org:22 anotherusername@XXX.XXX.XXX.XXX And can be chained: $ ssh -J user1@jumphost1.whatever.org:22,user2@jumphost2.whatever.org:2222 anotherusername@XXX.XXX.XXX.XXX Configuration  Host server2 HostName XXX.XXX.XXX.XXX ProxyJump user1@jumphost1.whatever.org:22 User anotherusername Host server3 HostName XXX.XXX.XXX.XXX ProxyJump user1@jumphost1.whatever.org:22,user2@jumphost2.whatever.org:2222 User anotherusername",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d0d5d020d5de0fa0c33d9726f2209558",
    "u": "https://server.tymyrddin.dev/docs/users/other-reqs",
    "t": "Configuring other password requirements ",
    "c": "Configuring other password requirements  Password expiration  Password expiration can be set in /etc/login.defs . scroll down to the “Password aging controls” section: PASS_MAX_DAYS : Default 99999 ; Sets the maximum number of days a password may be used. PASS_MIN_DAYS : Default 0 ; Sets the minimum number of days a user must keep their password before changing it. PASS_WARN_AGE : Default 7 ; Sets the number of days out from expiration that the system will warn the user. Password history  When configuring the password history of any system, it is generally considered best practice to remember the previous 10 passwords. This will ensure that the user’s passwords stay different and are not reused. Setting a minimum age of 1 and a password history of 10 means that somebody would need to wait at least 11 days before they’re able to get back to their original password. Usually this is enough to dissuade anyone from trying. To configure password history in Ubuntu, use /etc/pam.d/common-password : password : module type we are referencing. required : module where failure returns a failure to the PAM-API. pam_pwhistory.so : module that configures the password history requirements. remember=2 : option for the pam_pwhistory.so module to remember the last n passwords ( n = 2 ). These passwords are saved in /etc/security/opasswd . retry=3 : option for the pam_pwhistory.so module to prompt the user 3 times before returning a failure. Resources  pam.d(5) - Linux man page",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ec2e0d518232acf629a71c1d1e66e8b3",
    "u": "https://server.tymyrddin.dev/docs/firewall/firewalld",
    "t": "FirewallD ",
    "c": "FirewallD  FirewallD uses the concepts of zones and services, instead of IPTables chain and rules. As of CentOS version 7, FirewallD replaces IPTables as the default firewall management tool. FirewallD can be configured and managed using the firewall-cmd command line utility. Install and enable FirewallD  If not installed on the system, install with # yum install firewalld Firewalld is disabled by default. Check status with: # firewall-cmd --state Start and enable it on boot # systemctl start firewalld # systemctl enable firewalld Zones  Zones are predefined sets of rules specifying what traffic should be allowed based on the level of trust on the networks a computer is connected to. Network interfaces and sources can be assigned to a zone. From untrusted to trusted: Zones Meaning drop All incoming connections are dropped without any notification. Only outgoing connections are allowed. block All incoming connections are rejected with an icmp-host-prohibited message for IPv4 and icmp6-adm-prohibited for IPv6n. Only outgoing connections are allowed. public For use in untrusted public areas. Do not trust other computers on the network but allow selected incoming connections. external For use on external networks with NAT masquerading enabled - system acts as a gateway or router. Only selected incoming connections are allowed. internal For use on internal networks - system acts as a gateway or router. Other systems on the network are generally trusted. Only selected incoming connections are allowed. dmz Used for computers in a demilitarized zone, giving limited access to the rest of the network. Only selected incoming connections are allowed. work Used for work machines. Other computers on the network are generally trusted. Only selected incoming connections are allowed. home Used for home machines. Other computers on the network are generally trusted. Only selected incoming connections are allowed. trusted All network connections are accepted. Trust all of the computers in the network. The public zone is set as a default zone # firewall-cmd --get-default-zone Check what zones are used by network interface(s) # firewall-cmd --get-active-zones Print zone configuration settings # firewall-cmd --zone=public --list-all Configuration of all zones # firewall-cmd --list-all-zones Changing zone of an interface # firewall-cmd --zone=work --change-interface=eth1 Ports and services  Listing all default available services ( /usr/lib/firewalld/services/ contains xml files with details for each service): # firewall-cmd --get-services Allow incoming HTTP traffic (port 80) for interfaces in the public zone, only for the current session (runtime configuration) # firewall-cmd --zone=public --add-service=http To keep the port open after reboot use the --permanent flag # firewall-cmd --permanent --zone=public --add-service=http Forward traffic from one port to another on the same server # firewall-cmd --zone=external --add-forward-port=port=80:proto=tcp:toport=8080 Creating rulesets  The dmz (demilitarized) zone only allows SSH traffic. To change the default zone to dmz and to assign it to the eth0 interface # firewall-cmd --set-default-zone=dmz # firewall-cmd --zone=dmz --add-interface=eth0 To open HTTP and HTTPS ports add permanent service rules to the dmz zone # firewall-cmd --permanent --zone=dmz --add-service=http # firewall-cmd --permanent --zone=dmz --add-service=https Start building the firewall! Usage examples  OpenVPN  When using the default port 1194, enable the openvpn service. Otherwise, create a new service with a different port. # firewall-cmd --zone=public --add-service openvpn To add masquerade to the zone: # firewall-cmd --zone=server --add-masquerade Make changes permanent: # firewall-cmd --runtime-to-permanent SMTP  # firewall-cmd --permanent --add-service=smtp success Disable FirewallD  Stop the FirewallD service # systemctl stop firewalld Disable it to start automatically on system boot # systemctl disable firewalld Mask it to prevent it from being started by other services # systemctl mask --now firewalld",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b303e57e930a7387dd0f026591e283ab",
    "u": "https://server.tymyrddin.dev/docs/users/lxd",
    "t": "Dangers of the lxd group ",
    "c": "Dangers of the lxd group  Ubuntu places users (unless otherwise specified) into the lxd group. This group is known to be a point of privilege escalation and should be removed from any user that is a part of it. It is so popular that Linux-Smart-Enumeration even checks for it. Remove it from any user that has it assigned. Using adduser does not add the user to any predefined groups and should probably be used when adding new users. Resources  diego-treitos/linux-smart-enumeration",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "c0d8a4632d1584ca3691a5bbeb45d4aa",
    "u": "https://server.tymyrddin.dev/docs/access/dac",
    "t": "Discretionary access control (DAC) ",
    "c": "Discretionary access control (DAC)  Discretionary Access Control (DAC) really just means that each user has the ability to control who can get into their stuff. Using chown  One unique thing about chown is that you must have sudo privileges to use it, even if you’re working with your own files in your own directory. You can use it to change the user of a file or directory, the group that’s associated with a file or directory, or both. To change the file ownership from me to username : sudo chown <username>>: <file> To change the group association without changing the user: sudo chown :<group> <file> To change the user without changing the group, list the username without the trailing colon: sudo chown <username> <file> These commands work the same way on a directory as they do on a file. If you also want to change the ownership and/or the group association of the contents of a directory, while also making the change on the directory itself, use the -R option. Using chmod  On Unix and Linux systems, you would use the chmod utility to set permissions values on files and directories. You can set permissions for the user of the file or directory, the group that’s associated with the file or directory, and more. There are two ways to use chmod to change permissions settings: symbolic and numerical. Symbolic  chmod u+x cript.sh chmod g+x script.sh chmod o+x script.sh chmod u+x,g+x script.sh chmod a+x script.sh The first three commands add the executable permission for the user, the group, and others. The fourth command adds executable permissions for both the user and the group, while the last command adds executable permissions for everybody (a for all). You can also remove the executable permissions by replacing + with - . Similarly, you can add or remove read ( r ) or write ( w ) permissions. Numerical  With the numerical method, you’ll use an octal value to represent the permissions settings on a file or directory. For the r , w , and x permissions, you assign the numerical values 4, 2, and 1, respectively. You would do this for the user, group, and others positions, and then add them all up to get the permissions value for the file or directory: User Group Others rwx rwx rwx 421 421 421 7 7 7 With all permissions set for everybody, a file or directory will have a value of 777 . Using SUID and SGID  When a regular file has its SUID permission set, whoever accesses the file will have the same privileges as the user of the file. A file with the SUID permission set has an s in the executable position for the user: -rwsr-xr-x. A file with the SGID permission set has an s in the executable position for the group: -rwxr-sr-x. The numerical value for SUID is 4000 , and for SGID is 2000 . To set SUID on a file, add 4000 to whichever permissions value to be set. As useful as it may be to have SUID or SGID permissions on executable files, it is just a necessary evil. While having SUID or SGID set on certain operating system files is essential for the operation of the system, it becomes a security risk when users can set SUID or SGID on other files. If intruders find an executable file that belongs to the root user and has the SUID bit set, they can use that to exploit the system. They may leave behind their own root-owned file with an SUID set, which will allow them to regain entry to the system the next time. If the intruder’s SUID file isn’t found, the intruder will still have access, even if the original problem has been fixed. Finding SUID or SGID files  sudo find / -type f \\( -perm -4000 -o -perm -2000 \\) > suid_sgid_files.txt / : searching through the entire filesystem. Since some directories are only accessible to someone with root privileges, we need to use sudo. -type f : searching for regular files, which includes executable program files and shell scripts. -perm 4000 : searching for files with the 4000 , or SUID permission bit set. -o : or operator. -perm 2000 : searching for files with the 2000 , or SGID , permission bit set. > : redirecting the output into the suid_sgid_files.txt text file. Preventing SUID and SGID usage on a partition  Prevent SUID and SGID usage on a partition by mounting it with the nosuid option. Do not set nosuid for the / partition. The operating system doesn’t function properly. Using extended file attributes to protect sensitive files  Extended file attributes will not keep intruders from accessing files, but they can help prevent sensitive files from being altered or deleted. a : You can append text to the end of a file that has this attribute, but you can’t overwrite it. Only someone with proper sudo privileges can set or delete this attribute. i : This makes a file immutable, and only someone with proper sudo privileges can set or delete it. Files with this attribute can’t be deleted or changed in any way. It is also not possible to create hard links to files that have this attribute. sudo chattr +a <file> Securing system configuration files  With IoT devices, you have a bit more to worry about than you do with normal servers. Normal servers are protected with a high degree of physical security, while IoT devices often have little to no physical security. In this context, the open “all can read” is often considered not a good idea. Yo ensure that all the configuration files on the devices are set with the 600 permissions setting: sudo find / -iname '*.conf' -exec chmod 600 {} \\; Only the owner of the files – root user or a system account – can read them. Test things thoroughly to ensure that you haven’t broken anything. Most things work just fine with their configuration files set to a 600 permissions setting, and some do not.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "47637dfb988018b65c4bae141f992eb3",
    "u": "https://server.tymyrddin.dev/docs/encryption/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Protect data at rest and data in transit. Why?  Confidentiality: This ensures that only people who are authorised to see the data can see it. Integrity: This ensures that original data has not been altered by unauthorised people. Availability: This ensures that sensitive data is always available, and can not be deleted by unauthorised people. How?  GNU Privacy Guard OpenVPN strongSwan Installing SSH Harden ssh server Key management Jumping hosts Notes  Using a VPN is a way to map out a private network that only the servers can see. Communication will be fully private and secure. Other applications can be configured to pass their traffic over the virtual interface that the VPN software exposes. This way, only services that are meant to be used by clients on the public internet need to be exposed on the public network. Install and configure ssh keys and make your servers require them to minimise the risk posed by adversaries. Harden the ssh server (also harden default service settings in web server and other services) Do not leave passphrase empty - An adversary who gets hold of your private key can otherwise connect to the hosts where you put you public key. Use a separate key per client you ssh from to the same server. If one key is compromised the damage is more limited and easier to clean up. Limit the number of clients you ssh from. If a client is compromised an adversary has your key, they can install a binary to get your passwords/passphrases. If any, disable the ssh-server on the client machine you ssh from. Limit the attack surface. Don’t make jump host chains too long. If one client in the chain is compromised, an adversary can use that to compromise the rest of the clients down the chain. Don’t use Agent Forwarding. While being connected to the first host, anyone with sufficient permission on the first host will be able to use that socket to connect to and use that local ssh-agent. A rogue root or evil admin with root access can eavesdrop on the ongoing session and impersonate the user for authentication to other servers during the time that user is connected to that server. Instead, use ProxyJump (it uses E2EE) or, if that is not possible, use ProxyCommand. In some countries, proving that you connected to a particular server is enough to be prosecuted, but SSH doesn’t provide a native way to obfuscate to whom it connects. For that, SSH with Tor can be used. Don’t ignore authentication errors. This warning is protecting you. The remote host key is different than the client knows. Make sure the key really did change. An adversary may be spoofing the host and continuing may give the adversary the information they seek to attack your server. Another reason to not use passwords.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5c9294ef74b9df0a751dfbbbf4ed5e45",
    "u": "https://server.tymyrddin.dev/docs/services/nmap",
    "t": "Auditing network services with nmap ",
    "c": "Auditing network services with nmap  To remotely aud* the network to see what services are running on each host, without having to log in to each one, you need a tool like nmap . * is available for all the major operating systems, including Windows. The version that’s in the Linux repositories is usually quite old. So, if you’re using something other than Kali, your can download nmap . sudo nmap -sS IP_ADDRESS -sS : The lowercase s denotes the type of scan that we want to do. The uppercase S denotes that we’re doing a SYN packet scan. IP_ADDRESS : scanning a single machine or a group of machines or an entire network. Something like Not shown: 996 closed ports : The fact that it’s showing all of these closed ports instead of filtered ports tells me that there’s no firewall on this machine. Port states  An Nmap scan will show the target machine’s ports in one of three states: filtered : This means that the port is blocked by a firewall. open : This means that the port is not blocked by a firewall and that the service that’s associated with that port is running. closed : This means that the port is not blocked by a firewall, and that the service that’s associated with that port is not running. Scan types  There are lots of different scanning options, each with its own purpose. The SYN packet scan that we’re using here is considered a stealthy type of scan because * generates less network traffic and fewer system log entries than certain other types of scans. With this type of scan, Nmap sends a SYN packet to a port on the target machine, as if * were trying to create a TCP connection to that machine. If the target machine responds with a SYN/ACK packet, * means that the port is in an open state and is ready to create the TCP connection. If the target machine responds with an RST packet, * means that the port is in a closed state. If there’s no response at all, * means that the port is filtered, blocked by a firewall. As a normal Linux administrator, this is one of the types of scans that you would do most of the time. A discovery scan is useful for when you need to just see what devices are on the network: sudo nmap -sn IP_ADDRESS/24 With the -sn option, nmap will detect whether you’re scanning the local subnet or a remote subnet. If the subnet is local, nmap will send out an Address Resolution Protocol (ARP) broadcast that requests the IPv4 addresses of every device on the subnet. That is a reliable way of discovering devices because ARP isn’t something that will ever be blocked by a firewall. sudo nmap -A IP_ADDRESS This scan: identifies open , closed , and filtered TCP ports. identifies the version of the running services. runs a set of vulnerability scanning scripts that come with nmap. attempts to identify the operating system of the target host. 5900/tcp open vnc Apple remote desktop vnc | vnc-info: | Protocol version: 3.889 | Security types: |_ Mac OS X security type (30) 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at http://www.insecure.org/cgi-bin/servicefp-submit.cgi : SF-Port515-TCP:V=6.47%I=7%D=12/24%Time=5A40479E%P=x86_64-suse-linux-gnu%r( SF:GetRequest,1,\"\\x01\"); MAC Address: 00:0A:95:8B:E0:C0 (Apple) Device type: general purpose VNC can be handy at times. It’s like Microsoft’s Remote Desktop service for Windows, except that it’s free, open source software. But it’s also a security problem because it’s an unencrypted protocol. So, all your information goes across the network in plain text. If you must use VNC, run it through an SSH tunnel.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "4dedab5686eea66d58233866f08b621d",
    "u": "https://server.tymyrddin.dev/docs/ids/maltrail",
    "t": "Maltrail ",
    "c": "Maltrail  Maltrail is a malicious traffic detection system, using publicly available (black)lists containing malicious and/or generally suspicious trails, static trails compiled from various AV reports and custom user-defined lists, and (optionally) advanced heuristic mechanisms that can help in the discovery of unknown threats (for example, new malware). It is based on a Traffic -> Sensor <-> Server <-> Client Architecture. Trail can be anything from a: domain name (like zvpprsensinaix.com for Banjori malware) URL (like http://109.162.38.120/harsh02.exe for known malicious executable) IP address (for example 185.130.5.231 for known attacker) HTTP User-Agent header value (like sqlmap for automatic SQL injection and database takeover tool). It can be found on Github stamparm/maltrail .",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "fbf35dc5c99e6563252c4b10a6237a96",
    "u": "https://server.tymyrddin.dev/docs/encryption/key-management",
    "t": "Key management ",
    "c": "Key management  Generate a key  $ ssh-keygen -t Enter a passphrase. It will create 2 files in the ~/.ssh directory: id_rsa , a private key and id_rsa.pub , a public key. Note: Do not leave the passphrase empty. An attacker who gets hold of your private key can otherwise connect to the hosts where you put you public key. Choose a loooooong and complex passphrase. Remember the passphrase. Better yet, put it in a password manager. Copy key to server  $ scp ~/.ssh/id_rsa.pub user@server:~/.ssh/authorized_keys The authenticity of host 'XXX.XXX.XXX.XXX (XXX.XXX.XXX.XXX)' can't be established. ECDSA key fingerprint is [fingerprint]. Are you sure you want to continue connecting (yes/no)? yes If ssh access is already available, by using the cat command to read the contents of the public key on the local computer and piping that through an SSH connection to the remote server (and avoiding overriding already existing keys): $ cat ~/.ssh/id_rsa.pub | ssh user@server \"mkdir -p ~/.ssh && touch ~/.ssh/authorized_keys && chmod -R go= ~/.ssh && cat >> ~/.ssh/authorized_keys\" The authenticity of host 'XXX.XXX.XXX.XXX (XXX.XXX.XXX.XXX)' can't be established. ECDSA key fingerprint is [fingerprint]. Are you sure you want to continue connecting (yes/no)? yes For password-less login install the public key using the ssh-copy-id command: $ ssh-copy-id user@server $ ssh-copy-id -i ~/.ssh/id_rsa.pub user@server The authenticity message means that the local computer does not recognize the remote host. This will happen the first time connecting to a new host. Type “yes” and press ENTER to continue. /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys user@XXX.XXX.XXX.XXX's password: Enter password (not displayed for security purposes) and the following response is given: Number of key(s) added: 1 Connect  ssh to the server: $ ssh user@server Changing passphrase  ssh-keygen -p Or: cd ~/.ssh/ ssh-keygen -f id_rsa -p And upload it to the server. If you then connect, you may get an authentication error",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "fd94666ac24f0b4e1bc082559f0c1bea",
    "u": "https://server.tymyrddin.dev/",
    "t": "Hardening Linux server ",
    "c": "Hardening Linux server  The below writeups were initially based on debian 9 hosts, and then later on ubuntu 18.04 LTS, and on CentOS 8. Everything in these writeups will probably also apply to newer versions. If something does not work, check the documentation for your distro and version for what you are trying to do. Securing user accounts Introduction Configuring sudo Disabling root access Locking home directories Configuring password complexity Configuring other password requirements Dangers of the lxd group Audit services Introduction Auditing system services with systemctl Auditing network services with netstat Auditing network services with nmap Firewalls Introduction iptables UFW NFTables FirewallD FireHOL Packet filtering Fail2ban SSHguard Web Application Firewall WAF Port spoofing Encryption technologies Introduction GNU Privacy Guard OpenVPN strongSwan Installing SSH Harden ssh server Key management Jumping hosts Virtual network computing (VNC) Introduction TigerVNC TightVNC Securing sessions Access control Introduction Discretionary access control (DAC) Access control lists (ACL) and shared directory management (SDM) Mandatory access control (MAC) Public key infrastructure (PKI) Introduction Problems Internal PKI Pluggable Authentication Modules (PAM) Let’s Encrypt TLS/SSL Logfiles Introduction Syslog log commands Path of a common intruder Logrotate Centralised logging Guards! Guards! Introduction Samhain Maltrail Incidents Introduction Preventing incidents Using git for configuration management Implementing a backup plan Using bootable recovery media Troubleshooting Overview Authentication error Connection refused",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "cf95dea78ebe621a0e02f17589928900",
    "u": "https://server.tymyrddin.dev/docs/logfiles/centralised",
    "t": "Centralised logging ",
    "c": "Centralised logging  Why?  Makes searching through log data for relevant events easier and faster, especially important when the infrastructure uses separation and isolation and there are multiple servers. This makes troubleshooting and solving issues easier and faster, and without directly accessing systems. Logs are backed up in a separate location, protecting them from accidental or unintentional loss, and are accessible in case one of the servers goes down or becomes unresponsive. Not using computing resources for complex searches on internet facing servers. Depending on how it is set up, reduces the amount of disk space used by log files. Why not?  Uses bandwidth. How?  Set up a separate server for only logging purposes. Keep it in a secure location behind a (physical) firewall. Have no unnecessary services running on it. Delete all other user accounts. Which one?  Rsyslog (default installed on debian) and syslog-ng are both light-weight. The configuration syntax of ‘’rsyslog’’ is simpler than the syntax of ‘’syslog-ng’’, but complex configuration is more clear in ‘’syslog-ng’’. Future considerations  To protect from intentional tampering with logs (intruder deleting indicators of presence): Add another server, a snort box (IDS) that is actually another central server (yet has no IP address) and copy each packet intended for the already existing central server. Promiscuous mode Rule: Only listen for this IP address on this port (of existing central server)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "ca105558fe7c55c1dabbce4899e3874a",
    "u": "https://server.tymyrddin.dev/docs/logfiles/rotate",
    "t": "Logrotate ",
    "c": "Logrotate  On most Linux distributions, logrotate is installed by default. If not the case install it using the package manager. The below is for debian and friends. Installation  # apt-get install logrotate Configuration  The main configuration file is at /etc/logrotate.conf . Creating config files for each service separately can use the folder /etc/logrotate.d/ . # vi /etc/logrotate.d/remote Append: /var/log/remote/*/* { rotate 7 daily size=10M missingok compress delaycompress } This will compress and rotate logs every day and keep them for 90 days (3 months). Keep last 7 logs The logs will be rotated daily Each log will not be rotated until it reaches 10MB If the log file is missing, go on to the next one without issuing an error message. All rotated logs, with the exception of the most recent one, should be compressed.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "528e24c944fbce77eb2b0bda911674ed",
    "u": "https://server.tymyrddin.dev/docs/pki/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Public key infrastructure (PKI) is the umbrella term for everything needed in order to issue, distribute, store, use, verify, revoke, and otherwise manage and interact with certificates and keys. It’s an intentionally vague term, like “database infrastructure”. Certificates are the building blocks of most PKIs, and certificate authorities are the foundation. Why?  Establishing a certificate authority (CA) and managing certificates for the servers allows each entity within the infrastructure to validate the other members’ identities and encrypt their traffic. This can prevent MitM attacks where an attacker imitates a server in the infrastructure to intercept traffic. How?  Problems Internal PKI Pluggable Authentication Modules (PAM) Let’s Encrypt TLS/SSL Notes  Many simple PKIs don’t even use certificates. When editing ~/.ssh/authorized_keys you’re configuring a simple certificate-less form of PKI that SSH uses to bind public keys to names in flat files. Because the PKI system is asymmetric, users need access to a public key and recipients of a message need a private key to decrypt the information. X.509 is a complex standard and complex technology is not easy to deploy on a large-scale. Use a specific profile of X.509 and validate it in a narrow set of implementations. Web PKI is mostly defined by RFC 5280 and refined by the CA/Browser Forum. It’s hierarchical, based on trusting authorities, and for some such authorities a big cash cow. Web PKI being a money-spinner, we also have an alternative. Let’s Encrypt is a free, automated, and open Certificate Authority. Lost keys are also an issue for individuals that rely on encrypted data. Lost keys restrict access to messages, and these messages are unavailable forever unless the cryptographic algorithm is weak and can be cracked. Enter the Internet of Things (IoT), the Internet of Everything (IoE) and the Industrial Internet: all the devices that want confidentiality, integrity and authentication related to their identity and that of others too: implanted medical devices, robots on the plant floor, smart light bulbs, … We have a veritable explosion of checks and balances, not to mention issuances, revocations and expirations … problems, old ones not solved and new ones. SSL and PKI infrastructures are essential components in client device security, because they are used to bootstrap into higher-level security services such as software updates and digital signature services. Their vulnerability puts other security services at risk. Internal PKI is PKI we run ourselves, for our own stuff: infrastructures with services, containers, and VMs; applications; endpoints like laptops and phones; and any other code or device we want to identify. Use only the minimal set of features in certificates and PKI; That is to use the binding of an identifier and name to a key pair and understand whether the certificate may sign other certificates or not. No additional attributes should be relied on, no complex path validations allowed. SSL refers to Secure Socket Layer. It is a protocol for providing security to connections between a server and a client and uses cryptography and hashing to provide confidentiality, integrity, and endpoint authentication to connections between a server and a client. It has a lot of known security bugs of its own. TLS refers to Transport Layer Security, and is the successor of SSL, which includes bug fixes and improvements over SSL. SSL came up to versions 3.0 and after that the name was changed to TLS. Hence, often TLS/SSL is used.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "450b15a09a582ab262c724cfaa0155ab",
    "u": "https://server.tymyrddin.dev/docs/firewall/firehol",
    "t": "FireHOL ",
    "c": "FireHOL  FireHOL (based on bash) makes it very simple to set up a complex firewall. Installation  On the backend server, install FireHOL for configuring iptables . # apt-get install firehol Configuration (example)  # vi /etc/firehol/firehol.conf A configuration which only allows incoming ssh connections and openvpn: interface eth0 inet client all accept // allow all outgoing connections server ssh accept // allow all incoming SSH connections server openvpn accept src \"XXX.XXX.XXX.XXX XXX.XXX.XXX.XXX\" // allow incoming OpenVPN connections // from these designated addresses // NOTE: EDIT THE XXX.XXX.XXX.XXX ADDRESSES interface tun0 vpn server all accept // allow all incoming connections on the VPN client all accept // allow all outgoing connections on the VPN router inet2vpn inface eth0 outface tun0 route all accept // route freely to the VPN router vpn2inet inface tun0 outface eth0 masquerade // use NAT masquerading from the VPN route all accept // route freely to the VPN",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e1cb272b91b58f317d10879d8a97c878",
    "u": "https://server.tymyrddin.dev/docs/incidents/brm",
    "t": "Using bootable recovery media ",
    "c": "Using bootable recovery media  The concept of live media is a wonderful thing, as we can boot into a completely different working environment from the operating system installed on our device and perform tasks without disrupting installed software on the host system. The desktop version of Ubuntu, for example, offers a complete computing environment we can use in order to not only test hardware and troubleshoot our systems but also browse the web just as we would on an installed system. In terms of recovering from disasters, live media becomes a saving grace. Ubuntu’s live media is great, and it doesn’t work for absolutely everything. Tools such as Clonezilla specialize in working with hard disks. Practical Linux Forensics, Bruce Nikkel, 2021",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "a3a59f60433064429e8a9112fafe3244",
    "u": "https://server.tymyrddin.dev/docs/services/netstat",
    "t": "Auditing network services with netstat ",
    "c": "Auditing network services with netstat  Two reasons why you would want to keep track of what network services running on systems: To ensure that no legitimate network services that you don’t need are running To ensure that you don’t have any malware that’s listening for network connections from its master C&C To see a list of network services that are listening, waiting for someone to connect to them: netstat -lp -A inet With: -lp : The l means that we want to see which network ports are listening. In other words, we want to see which network ports are waiting for someone to connect to them. The p means that we want to see the name and process ID number of the program or service that is listening on each port. -A inet : This means that we only want to see information about the network protocols that are members of the inet family. In other words, we want to see information about the raw, tcp, and udp network sockets, but we don’t want to see anything about the Unix sockets that only deal with interprocess communications within the operating system. If you want to see port numbers and IP addresses instead of network names, add the n option to the -lp . To view the established TCP connections is to leave out the l option. Something to keep in mind is that rootkits can replace legitimate Linux utilities with their own trojaned versions. For example, a rootkit could have its own trojaned version of netstat that would show all network processes except for those that are associated with the rootkit. That’s why you want something such as Rootkit Hunter in your toolbox. Resources  What Port Is - Network Port and Protocol Database",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "74d3c1bc5f8d0fea986342319e926687",
    "u": "https://server.tymyrddin.dev/docs/users/sudo",
    "t": "Configuring sudo ",
    "c": "Configuring sudo  sudo stands for “super-user do”. Sudo allows any non-root user to run applications as root. When sudo is configured correctly, it greatly increases the security of the environment. Slowing hackers down. Since the root login will most likely be disabled and your users are properly granted sudo, any attacker will not know which account to go after, thus slowing them down. If they are slowed down enough, they may stop the attack and give up. Allow non-privileged users to perform privileged tasks by entering their own passwords. Keeps in line with the principle of least privilege by allowing administrators to assign certain users full privileges, while assigning other users only the privileges they need to complete their daily tasks. Adding users to the sudo group  On Ubuntu 18.04, unless otherwise specified upon account creation, the user is automatically added to the sudo group. To add a user who is not part of the sudo group already, add him/her with: usermod -aG sudo <username> Using the -a option helps username retain any previously existing groups. To directly add a user to the sudo group upon username account creation: useradd -G sudo <username> By default, Ubuntu allows sudo users to execute any program as root with their password. There are a few ways we can check this information. The first way is as user with sudo -l . Another way to view this information is with visudo . This opens the sudo policy file. The sudo policy file is stored in /etc/sudoers . This gives the same information as sudo -l but with one difference; the %sudo indicates that it is for the group, sudo. There can be other groups in this file such as admin . This is where administrators can set what programs a user in a certain group can perform and whether they need a password. In the %sudo ALL=(ALL:ALL) ALL NOPASSWD: ALL , the NOPASSWD part says that the user that is part of the sudo group does not need to enter their local password to use sudo privileges. Generally, this is not recommended - not even for home use. Users can also be added to the sudoers using the sudo policy file. Always edit sudoers with the sudo visudo command. If you are managing users in a network across multiple flavours of Linux (CentOS, Red Hat, etc.), where the sudo group may be called something different, this method may be more preferable: add a User Alias to the policy file and add users to that alias, or add lines for individual users. User_Alias ADMINS = lela, barzh and: ADMINS ALL=(ALL) ALL or for an individual user: username ALL=(ALL) ALL It is not recommended to use individual user aliases in a large network since this can become unwieldy very quickly. The first option is going to be your best bet as you can simply add users to this alias and control which commands they have access to with sudo easily. Setting up sudo for only certain delegated privileges  To ensure that users are assigned to the groups they belong to and only are allowed access to the programs they need to complete their daily tasks, set Command Aliases in the sudo policy file: Use sudo visudo , and edit the line under the comment # Cmnd alias specification . Cmnd_Alias SOFTWARE = /bin/rpm, /usr/bin/up2date, /usr/bin/yum To assign the SOFTWARE command alias to the SOFTWAREADMINS user alias: SOFTWAREADMINS ALL=(ALL) SOFTWARE You can also assign Command Aliases to individual users, specific commands to individual users, and Command Aliases to groups. Host aliases  Host Aliases are a way to trickle down a sudo policy across the network and different servers. For example, you may have a MAILSERVERS Host Alias which contains servers mail1 and mail2 . This Host Alias has certain users or groups assigned to it, and that Host Alias has a Command Alias assigned to it stating which commands those users are able to run. When those users run a command on mail1 or mail2 , the server will check the sudo policy file to see if they can do what they are trying to do. In a home environment and small-medium business environments, it probably is just easier to copy the sudo policy file to each server in the network. This will really only come into play with large enterprise networks and even then they will probably be using a centralised Ansible or other automation in effect. Preventing users from using shell escapes  Programs like text editors and pagers have a handy shell escape feature. This allows a user to run a shell command without having to exit the program first. For example, from the command mode of the vi and vim editors, someone could run the ls command by running :!ls . To allow a user to edit the sshd_config file and only that file, add a line to the sudo configuration: username ALL=(ALL) sudoedit /etc/ssh/sshd_config sudoedit has no shell escape feature. Other programs that have a shell escape feature: emacs , less , view , and more . Preventing users from using other dangerous programs  Some programs that don’t have shell escapes can still be dangerous if you give users unrestricted privileges to use them, like cat , cut , awk , and sed . If you must give someone sudo privileges to use one of these programs, limit their use to only specific files. Preventing abuse via user’s shell scripts  A rule for Fritz so he can create scripts running with elevated privileges: fritz ALL=(ALL) /home/fritz/fritz_script.sh And his script reads: #!/bin/bash echo \"This script belongs to Fritz the Cat.\" sudo -i What can happen next: fritz@server:~$ sudo ./fritz_script.sh This script belongs to Fritz the Cat. root@server:~# sudo -i logs a person in to the root user’s shell, the same way that sudo su - does. To remedy this, move Fritz’ script to the /usr/local/sbin directory and change the ownership to the root user so that Fritz will not be able to edit it. And delete that sudo -i line in it.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "67a139b838a6ea1da56f277b7d543f0b",
    "u": "https://mailserver.tymyrddin.dev/docs/spf/readme",
    "t": "Sender Policy Framework (SPF) ",
    "c": "Sender Policy Framework (SPF)  SPF is a method for email authentication and is designed to detect fraudulent mail servers. SPF allows the recipient’s mail server to check that an authorized mail server sent the email. It is an open standard specifying a technical method to prevent sender address forgery. In plain language, it is a method of informing servers whether a specific mail server is authorised to send an email for a particular domain. With that, it can detect whether an email address is authentic or fake, before allowing it to pass into an inbox. An SPF record increases the likelihood that emails sent by valid addresses are delivered. Without it, genuine email could be categorised as spam. It also protects against malicious emails sent through your domain by spammers. A email provider publishes SPF records in the Domain Name System (DNS). These records list which IP addresses are authorised to send email on behalf of their domains. In an SPF check, email providers verify the SPF record by looking up the domain name listed in the return path address in the DNS. If the IP address sending email on behalf of the “return path” domain is not listed the record, the message fails authentication. SPF records must be kept updated. If a message fails SPF check, that doesn’t mean it will always be blocked. Breaks when a message is forwarded. Does not protect against spoofing of the visible “From” address in messages.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "5fc40c56c8ce22580281fbb42de65381",
    "u": "https://mailserver.tymyrddin.dev/docs/servers/readme",
    "t": "Mail servers ",
    "c": "Mail servers  Dovecot is a minimal open-source IMAP and POP3 email server for Linux/ Unix operating systems. It supports different authentication methods, requires minimal memory, and supports Postfix and Exim. Cyrus is a robust open-source Linux mail server that offers speed, security and support for dozens of protocols and authentication methods. It is a rich configurable mail-server with a large set of options and third-party integrations.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "88d208a5e9828fbbb381faf5587d392f",
    "u": "https://mailserver.tymyrddin.dev/docs/tls/dane",
    "t": "DANE configuration ",
    "c": "DANE configuration  Postfix supports DANE In Postfix, certificate usage 0 is unsupported, 1 is mapped to 3, and 2 is optional, thus it is recommended to publish a “3” record. Configuration  In /etc/postfix/main.cf smtpd_use_tls = yes smtp_dns_support_level = dnssec smtp_tls_security_level = dane In /etc/postfix/master.cf dane unix - - n - - smtp -o smtp_dns_support_level=dnssec -o smtp_tls_security_level=dane Multiple domains  To use per-domain policies, for example for opportunistic DANE for domain.org and mandatory DANE for domain.com: In /etc/postfix/main.cf indexed = ${default_database_type}:${config_directory}/ # Per-destination TLS policy # smtp_tls_policy_maps = ${indexed}tls_policy # default_transport = smtp, but some destinations are special: # transport_maps = ${indexed}transport In transport : domain.com dane domain.org dane In tls_policy : domain.com dane-only Configuration resources  DANE: Common mistakes DANE validator Generate TLSA Record online RFC6698: The DNS-Based Authentication of Named Entities (DANE) Transport Layer Security (TLS) Protocol: TLSA SMTP Security via Opportunistic DNS-Based Authentication of Named Entities (DANE) Transport Layer Security (TLS)",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "277e682ad4ae66b23022242f16768008",
    "u": "https://mailserver.tymyrddin.dev/docs/tls/tls",
    "t": "TLS configuration ",
    "c": "TLS configuration  Email servers wrap SMTP via direct TLS or a connection upgrade with STARTTLS at ports 465/587 A Postfix SMTP server needs a certificate and a private key in .pem format. The private key must not be encrypted (= must be accessible without a password). Public Internet MX hosts without certificates signed by a well-known public CA must still generate, and be prepared to present to most clients, a self-signed or private-CA signed certificate. For non-public Internet MX hosts, Postfix supports configurations with no certificates. This entails the use of anonymous TLS ciphers, which are not supported by typical SMTP clients. Creating keys and certificates  By default, Postfix will not accept secure mail. To set Postfix up to accept secure mail, obtain a certificate. A certificate can be obtained either from a certificate authority with a Certificate Signing Request (CSR) or Let’s Encrypt certbot, or self-signed. Self-signed certificates can be generated easily, but clients will reject them by default, unless each and every client is configured to trust the self-signed certificate. Point Postfix to your TLS certificates by appending to /etc/postfix/main.cf : smtpd_tls_cert_file = /etc/letsencrypt/live/$domain.$tld/fullchain.pem smtpd_tls_key_file = /etc/letsencrypt/live/$domain.$tld/privkey.pem smtpd_tls_dh1024_param_file = /etc/ssl/private/2048.dh smtpd_tls_dh512_param_file = /etc/ssl/private/512.dh If you want the Postfix SMTP server to accept remote SMTP client certificates issued by one or more root CAs, append the root certificate to $smtpd_tls_CAfile or install it in the $smtpd_tls_CApath directory. smtpd_tls_CApath = /etc/ssl/certs Configuration  SMTP (sending)  By default, Postfix/sendmail will not send email encrypted to other SMTP servers. To use TLS when available, in /etc/postfix/main.cf , set: smtp_tls_security_level = may Sending AUTH data over an unencrypted channel poses a security risk. When TLS layer encryption is not required but optional ( smtpd_tls_security_level = may ), it is still useful to only offer AUTH when TLS is active. To maintain compatibility with non-TLS clients, the default is to accept AUTH without encryption. In order to change this behaviour: In /etc/postfix/main.cf : smtpd_tls_auth_only = yes SMTP (receiving)  There are two ways to accept secure mail. For STARTTLS over SMTP (port 587) uncomment in /etc/postfix/master.cf : submission inet n - n - - smtpd -o syslog_name=postfix/submission -o smtpd_tls_security_level=encrypt -o smtpd_sasl_auth_enable=yes -o smtpd_tls_auth_only=yes -o smtpd_reject_unlisted_recipient=no # -o smtpd_client_restrictions=$mua_client_restrictions # -o smtpd_helo_restrictions=$mua_helo_restrictions # -o smtpd_sender_restrictions=$mua_sender_restrictions -o smtpd_recipient_restrictions= -o smtpd_relay_restrictions=permit_sasl_authenticated,reject -o milter_macro_daemon_name=ORIGINATING For SMTPS (port 465), uncomment in /etc/postfix/master.cf : smtps inet n - n - - smtpd -o syslog_name=postfix/smtps -o smtpd_tls_wrappermode=yes -o smtpd_sasl_auth_enable=yes -o smtpd_reject_unlisted_recipient=no # -o smtpd_client_restrictions=$mua_client_restrictions # -o smtpd_helo_restrictions=$mua_helo_restrictions # -o smtpd_sender_restrictions=$mua_sender_restrictions -o smtpd_recipient_restrictions= -o smtpd_relay_restrictions=permit_sasl_authenticated,reject -o milter_macro_daemon_name=ORIGINATING When the TLS information is not included in the headers of the message it has processed from another server or SMTP client that uses TLS, it can be added with: smtpd_tls_received_header = yes The “smtp server” part of Postfix (the first daemon that listens on port 25) then adds the TLS information to the “Received” message header of an incoming message. Logging  To get more information about Postfix SMTP client TLS activity you can increase the loglevel from 0..4. Each logging level also includes the information that is logged at a lower logging level. 0 Disable logging of TLS activity. 1 Log TLS handshake and certificate information. 2 Log levels during TLS negotiation. 3 Log hexadecimal and ASCII dump of TLS negotiation process. 4 Log hexadecimal and ASCII dump of complete transmission after STARTTLS. In /etc/postfix/main.cf : smtpd_tls_loglevel = 0 Cipher controls  The Postfix SMTP server supports 5 distinct cipher grades as specified by the smtpd_tls_mandatory_ciphers parameter, which determines the minimum cipher grade with mandatory TLS encryption. Default is medium. smtpd_tls_mandatory_ciphers = high Cipher grade high enables only “HIGH” grade OpenSSL ciphers specified in the tls_high_cipherlist configuration parameter, which you are strongly encouraged to not change. The smtpd_tls_ciphers parameter controls the minimum cipher grade used with opportunistic TLS. Default is medium . smtpd_tls_ciphers = medium By default, anonymous ciphers are enabled. They are automatically disabled when remote SMTP client certificates are requested. For excluding cipher types from the SMTP server cipher list at all TLS security levels: smtpd_tls_exclude_ciphers = aNULL, MD5, DES, 3DES, DES-CBC3-SHA, RC4-SHA, AES256-SHA, AES128-SHA, eNULL, EXPORT, RC4, PSK, aECDH, EDH-DSS-DES-CBC3-SHA, EDH-RSA-DES-CDC3-SHA, KRB5-DE5, CBC3-SHA The Postfix SMTP server security grade for ephemeral elliptic-curve Diffie-Hellman (EECDH) key exchange: smtpd_tls_eecdh_grade = strong strong means use EECDH with approximately 128 bits of security at a reasonable computational cost. This is the current best-practice trade-off between security and computational efficiency. By default, the OpenSSL server selects the client’s most preferred cipher-suite that the server supports. With SSLv3 and later, the server may choose its own most preferred cipher-suite that is supported (offered) by the client. The default OpenSSL behaviour applies with “tls_preempt_cipherlist = no” To enable server cipher-suite preferences: tls_preempt_cipherlist = yes Entropy  The security of cryptographic software such as TLS depends critically on the ability to generate unpredictable numbers for keys and other information. The tlsmgr process maintains a Pseudo Random Number Generator (PRNG) pool for the purpose. This is queried by the smtp and smtpd processes when they initialize. By default, these daemons request 32 bytes, the equivalent to 256 bits, more than enough to generate a 128 bit (or 168 bit) session key. A good entropy source is /dev/urandom tls_random_source = dev:/dev/urandom Session cache  The remote SMTP server and the Postfix SMTP client negotiate a session, which takes some computer time and network bandwidth. Cached Postfix SMTP server session information expires after a certain amount of time. Postfix/TLS does not use the OpenSSL default of 300s, but a longer time of 3600sec. RFC 2246 even recommends a maximum of 24 hours. smtpd_tls_session_cache_timeout = 3600s Obsolete TLS parameters  smtpd_tls_mandatory_protocols = TLSv1 Firewall  Allow connections to port 587 and 465 (depending) by opening the port for your server in the server firewall. Configuration resources  Guide to Deploying Diffie-Hellman for TLS",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "64eade5fd86f1ff1a95b732047845a90",
    "u": "https://mailserver.tymyrddin.dev/docs/servers/cyrus",
    "t": "Cyrus ",
    "c": "Cyrus  The Cyrus IMAP server is electronic mail server open source software developed by Carnegie Mellon University. It differs from other Internet Message Access Protocol (IMAP) server implementations in that it is generally intended to be run on sealed servers, where normal users cannot log in. And it is not lightweight. Installation  # apt-get install cyrus-imapd cyrus-sasl cyrus-sasl-plain You will be asked to set a password for the default administrative user cyrus Get SSL certificate  Using Let’s Encrypt, request a certificate for the mail server by (replacing mail.mydomain.com with the fully qualified domain name (FQDN) of your server): certbot certonly --standalone -d mail.mydomain.com Integration with postfix  Firewall  To access the mail server from another computer, configure the server firewall to allow connections to the server on the necessary ports. The default ports are IMAP - 143; IMAPS - 993; POP3 - 110; and POP3S - 995. Configuration resources  Cyrus IMAP",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "e798deee75ddaa94fc96699ea0567a29",
    "u": "https://mailserver.tymyrddin.dev/docs/dkim/dkim",
    "t": "DKIM configuration ",
    "c": "DKIM configuration  Installation  # apt-get install opendkim opendkim-tools Unix socket  Postfix and opendkim communicate through a unix socket. Socket address is usually the one specified in /etc/postfix/main.cf , but the default configuration of postfix in debian runs under a chroot ( /var/spool/postfix ) so the socket must be created in the jail: # sockdir=/var/spool/postfix/var/run/opendkim # mkdir -p $sockdir # chown opendkim. $sockdir # chmod go-rwx $sockdir # chmod g+x $sockdir Generate keys  Generate the key pair. To generate a secret signing key, you need to specify the domain used to send mails and a selector which is used to refer to the key (choose anything you like, alpha-numeric strings will do). # opendkim-genkey -r -s myselector -b 2048 -d $domain.tld This creates two files in /etc/dkimkeys/ : myselector.private and myselector.txt , the private and public key. Make sure that only the opendkim user can read them: chgrp opendkim /etc/dkimkeys/* chmod go-rwx /etc/dkimkeys/* Configuration  Copy the sample configuration file /etc/opendkim/opendkim.conf.sample (or /usr/share/doc/opendkim/opendkim.conf.sample ) to /etc/opendkim/opendkim.conf and change: Domain $domain.tld KeyFile /path/to/keys/myselector.private Selector myselector Socket inet:8891@localhost UserID opendkim On debian, for the unix socket: Syslog yes # Required to use local socket with MTAs that access the socket as a non- # privileged user (e.g. Postfix) UMask 007 # DO NOT BELIEVE that /etc/default/opendkim overrides the following : # (In stretch, it does not on 2019-08-13) Socket local:/var/spool/postfix/var/run/opendkim/opendkim.sock Multiple domains  If you are providing mail server service to multiple virtual domains on the same server, provide these directives: KeyTable refile:/etc/opendkim/KeyTable SigningTable refile:/etc/opendkim/SigningTable ExternalIgnoreList refile:/etc/opendkim/TrustedHosts InternalHosts refile:/etc/opendkim/TrustedHosts You have to create/move/copy DKIM keys in a separate domain folder for each domain, for example /etc/opendkim/keys/domain1.com/ . Otherwise you will receive dkim: FAILED, invalid (public key: not available)” error message with DKIM email test . You can use the same key for all the domains or generate a separate key for each domain. Edit the /etc/opendkim/KeyTable file to specify key locations: myselector._domainkey.domain1.com domain1.com:mail:/etc/opendkim/keys/domain1.com/myselector.private myselector._domainkey.domain2.com domain2.com:mail:/etc/opendkim/keys/domain2.com/myselector.private Edit the /etc/opendkim/SigningTable file to specify which key will sign a domain. *@domain1.com myselector._domainkey.domain1.com *@domain2.com myselector._domainkey.domain2.com In /etc/opendkim/TrustedHosts , add trusted domain and IP addresses who can use the keys. If needed, include localhost as it is not implicit. 127.0.0.1 ::1 localhost <some_server_ip> hostname.domain1.com domain1.com hostname.domain2.com domain2.com ... This is referenced by the ExternalIgnoreList directive. Opendkim will ignore this list of hosts when verifying incoming mail. It is also referenced by the InternalHosts directive, this same list of hosts will be considered “internal,” and opendkim will sign their outgoing mail. The flow for DKIM lookup starts with the sender’s address. The signing table is scanned until an entry whose pattern matches the address is found. Then, the second item’s value is used to locate the entry in the key table whose key information will be used. For incoming mail the domain and selector are then used to find the public key TXT record in DNS and that public key is used to validate the signature. For outgoing mail the private key is read from the named file and used to generate the signature on the message. Postfix integration  To make Postfix listen to the unix socket on debian (set up as above): Add user postfix to the opendkim group (postfix needs to be able to access the socket): # adduser postfix opendkim And append to /etc/postfix/main.cf : milter_default_action = accept milter_protocol = 6 # from inside the chroot, the socket will be in /var/run/opendkim smtpd_milters = unix:/var/run/opendkim/opendkim.sock non_smtpd_milters = unix:/var/run/opendkim/opendkim.sock Restart postfix  # systemctl restart postfix DNS Configuration  Add a TXT record for your domain(s). For example: As a Hostname, use the myselector followed by the literal string ._domainkey and use as Text: v=DKIM1; p=yourPublicKey Or v=DKIM1; h=sha256; k=rsa; s=email; p=yourPublicKey Exact format may vary per DNS provider. Check the documentation for the exact style required. Testing  Try to send a mail. Check /var/log/mail.log Test the installation with opendkim-testkey : # opendkim-testkey -d $domain.tld -s myselector -vvv Configuration resources  Breaking DKIM - on Purpose and by Chance , October 2017, Update 08/2018 Debian: opendkim",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8fdb41b25653820c4fce47d53823a387",
    "u": "https://mailserver.tymyrddin.dev/docs/mta/postfix",
    "t": "Postfix configuration ",
    "c": "Postfix configuration  The two most important configuration files are: /etc/postfix/master.cf , defining what Postfix services are enabled and how clients connect to them /etc/postfix/main.cf , the main configuration file, the bulk, the meat. Most configuration changes only need a reload of postfix in order to take effect. Only some require a restart. Don’t manage mailboxes from postfix. Check configuration with the postfix check command. To see all of the configuration files use the postconf command. To see how the setup differs from the defaults, use postconf -n . On debian, Postfix runs by default in a chroot jail. On other distro’s where this is not the case, it is recommended to set it up in a jail. Limit use of Postfix services Restrict which hosts are granted or refused access with the smtpd_*_restrictions directives. The vrfy command allows an attacker to determine if an account exists on a system, providing significant assistance to a brute force attack on user accounts. vrfy may provide additional information about users on the system, such as the full names of account owners. Default is no . Set to disable_vrfy_command = yes . Client control rules can be based on the sender or receiver address and limitations of the number and size of email messages. Consider greylisting: In greylisting the server sends a request to have the email resent, after temporarily rejecting the email. The server saves in a list the sender IP and the recipient and returns a temporary error. All valid servers will then resend the emails, spamming scripts will not. Other efficient protocol level solutions in Postfix can be used to make sure the mail server is RFC compliant and prevent email looping (a very simple method would be setting a maximum numbers of “Received” headers per email). With policy services Postfix’ behaviour of mail delivery can be fine-tuned. Making changes to configurations of such services require a restart of Postfix. Installation  # apt-get install postfix You will be asked a series of questions. On the first prompt, select //Internet Site// option as the general type for Postfix configuration, continue, and then add domain name to system mail name. Basic configuration  Configure the basics: # cp /etc/postfix/main.cf{,.old} # vi /etc/postfix/main.cf myhostname = $hostname //Use command \"hostname\" to display your hostname myorigin = $mydomain //Add domain, so others can not abuse the mailsystem relay_domains = domain1.com, domain2.com, domain3.com //Add the domains the system will handle Multiple local domains  Postfix can be configured for more than one domain via the use of a hash file. This file contains the list of domains postfix will accept for local delivery. Open the /etc/postfix/main.cf configuration file and append: virtual_alias_domains = hash:/etc/postfix/virtual_domains Create the file, and add all the domains postfix should accept in it (one per line). The postmap program expects the file to have 2 columns but the second column is ignored. Do add that second column and add comments like #something in it. It will work without, but you get warnings. To make the hashfile: # postmap /etc/postfix/virtual_domains Remote access  The postfix SMTP server access table contains the list for access control for remote SMTP clients: Open the /etc/postfix/main.cf configuration file and append: check_sender_access = hash:/etc/postfix/access Create the file, and add all the host names, network addresses, and envelope sender or recipient addresses postfix should accept in it (one per line) To make the hashfile: # postmap /etc/postfix/access Managing mailboxes  Don’t manage mailboxes from postfix. Redirect messages for delivery via POP/IMAP server. In case of dovecot there is dovecot-lda aka deliver that do everything and much more, like user-controlled message filtering, quota management, autoreplying etc. Most modern POP/IMAP servers have a lot of utilities for common tasks in infrastructures. Maildir is the newer and preferrable format due to the lot of improvements comparatively to mailbox. It has an index for each folder that allow to control duplicates, expiration times and even full-text search and is faster on a huge pile of messages. Dovecot can easily operate maildir with 300k messages in it without any visible slowdown. Abuse and spam  SMTP restrictions  The smtpd_*_restrictions directives can be used to set what data is accepted for any SMTP command, for example in /etc/postfix/main.cf : # smtpd_recipient_restrictions = reject_invalid_hostname, reject_unknown_recipient_domain, reject_unauth_destination, reject_rbl_client sbl.spamhaus.org, permit # smtpd_helo_restrictions = reject_invalid_helo_hostname, reject_non_fqdn_helo_hostname, reject_unknown_helo_hostname Blacklisting  Manually blacklisting incoming emails by sender address can easily be done with Postfix. Create and open an /etc/postfix/blacklist_incoming file and append sender email addresses: user@domain.com REJECT To create a database, use postmap command: # postmap hash:blacklist_incoming And append before the first permit rule in /etc/postfix/main.cf : smtpd_recipient_restrictions = check_sender_access hash:/etc/postfix/blacklist_incoming Use of others’ lists is also possible. An RBL list is a spammer blacklist of domains. In /etc/postfix/main.cf : smtpd_client_restrictions = reject_rbl_client dnsbl.sorbs.net Greylisting  Install the postgrey package. Open up /etc/postfix/main.cf and append smtpd_recipient_restrictions = check_policy_service inet:127.0.0.1:10030 Then start/enable the postgrey service and after that reload the postfix service. Its configuration is done via editing the postgrey.service file. Copy it over to edit it. # cp /usr/lib/systemd/system/postgrey.service /etc/systemd/system/ Using postgrey it is also possible to add automatic whitelisting based on successful deliveries. These then don’t have to wait any more. This can be done by , you could add the adding the --auto-whitelist-clients=5 (default is 5) but the preferred method is the override: # cat /etc/systemd/system/postgrey.service.d/override.conf [Service] ExecStart= ExecStart=/usr/bin/postgrey --inet=127.0.0.1:10030 \\ --pidfile=/run/postgrey/postgrey.pid \\ --group=postgrey --user=postgrey \\ --daemonize \\ --greylist-text=\"Greylisted for %%s seconds\" \\ --auto-whitelist-clients Add your own list of whitelisted clients in addition to the default ones by creating the file /etc/postfix/whitelist_clients.local (one host or domain per line). Restart the postgrey.service for the changes to take effect. Header filtering  Postfix header or body_checks are designed to stop a flood of mail from worms or viruses. Optional lookup tables for content inspection of primary non-MIME message headers are used. This does not decode attachments or unzip archives. Default is empty . In this mechanism checks can be made against regular expressions. For example, postfix can search for any string in an incoming email. In /etc/postfix/main.cf set: header_checks = regexp: /etc/postfix/headers_checks Then in /etc/postfix/header_checks append regular expressions for what to check for: /^(.*)@domain.com/ REJECT //Match any recipient/sender for a specific domain The mechanism can also be used to hide a sender’s IP and user agent in the Received header. This is a privacy concern mostly for sending email with Thunderbird. The received header will contain LAN and WAN IP and info about the email client used. Append to main.cf : smtp_header_checks = regexp:/etc/postfix/smtp_header_checks Create /etc/postfix/smtp_header_checks and append: /^Received: .*/ IGNORE /^User-Agent: .*/ IGNORE Relaying  Relaying means that a sender with host in domain A, connects to our mailer in domain B to send an email to someone in domain C. A party for spammers. The easiest way to control relaying is to use the smtpd_recipient_restrictions directive; If this directive is left undefined, Postfix uses the information given in the directives...",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "8d791eba755fcea7b9bff345f4cfb4e4",
    "u": "https://mailserver.tymyrddin.dev/docs/dmarc/dmarc",
    "t": "DMARC configuration ",
    "c": "DMARC configuration  DMARC allows the domain owner to specify what happens with failed emails and get feedback when they arrive. Basically, there are three actions receiving servers can take if BOTH SPF and DKIM checks fail: none , quarantine , and reject . Setting it up takes five-steps as listed on the DMARC website Deploy DKIM & SPF . You have to cover the basics, first. Ensure that your mailers are correctly aligning the appropriate identifiers. Publish a DMARC record with the “none” flag set for the policies, which requests data reports. Analyze the data and modify your mail streams as appropriate. Modify your DMARC policy flags from “none” to “quarantine” to “reject” as you gain experience. Flaws as per the infosec institute We may think that, using SPF and DMARC would complete the holes in the mail filtering system. There is a small side effect for this method, i.e. the mail reaches the receiver end if either one of SPF or DKIM passes it in. If an attacker manages to find a way to pass SPF or DKIM, it will reach the inbox. An attacker can bypass the DMARC by creating a perfect mail copy if the following steps are followed: If the attacker uses a server IP that passes through SPF policy. This could be done by selecting the same email provider as the sender. Attacker can make use of any authorized server to create a mail; this mail will be given proper DKIM keys as other legitimate mail and would reach the receiver end. Let’s say that the senders side is fully configured with SPF, DKIM, DMARC and the receiver side is left without any proper configuration, the mail could easily reach the receivers end, since there are no properly established filters. Don’t fall asleep. Keep checking emails , and add PGP signing of messages.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "6be683b6cc26ce267a61a3d9b53959fc",
    "u": "https://mailserver.tymyrddin.dev/docs/servers/dovecot",
    "t": "Dovecot ",
    "c": "Dovecot  Dovecot is an open source IMAP and POP3 server for Linux/UNIX-like systems, written primarily with security in mind. Dovecot aims to be a lightweight, fast and easy to set up open source mailserver. The below is for debian 9 (probably also works on buster) Installation  apt-get install dovecot-common dovecot-imapd dovecot-pop3d Get SSL certificate  Using Let’s Encrypt, request a certificate for the mail server by (replacing mail.mydomain.com with the fully qualified domain name (FQDN) of your server): certbot certonly --standalone -d mail.mydomain.com Configuration  Dovecot’s configuration files are in /etc/dovecot/conf.d/ . The default configuration is ok for most systems, but make sure to read through the configuration files to see what options are available. By default dovecot will try to detect what mail storage system is in use on the system. To use the Maildir format edit /etc/dovecot/conf.d/10-mail.conf to set it: mail_location = maildir:~/Maildir To configure it for the SSL certificates, open /etc/dovecot/conf.d/10-ssl.conf and append: ssl = required ssl_cert = </etc/letsencrypt/live/mail.mydomain.com/fullchain.pem ssl_key = </etc/letsencrypt/live/mail.mydomain.com/privkey.pem To force SSL/TLS encryption, open /etc/dovecot/conf.d/10-auth.conf and make sure: disable_plaintext_auth = yes SASL  In the main configuration file /etc/dovecot/conf.d/10-master.conf , uncomment the paragraph for Postfix in the auth service block: service auth { # Postfix smtp-auth unix_listener /var/spool/postfix/private/auth { mode = 0660 } } This will create the private/auth path for the SASL configuration of Postfix. Because Postfix runs chrooted in /var/spool/postfix , a relative path must be used. Integration with postfix  In /etc/postfix/master.cf append: dovecot unix - n n - - pipe flags=DRhu user=email:email argv=/usr/lib/dovecot/deliver -f ${sender} -d ${recipient} Firewall  To access the mail server from another computer, configure the server firewall to allow connections to the server on the necessary ports. The default ports are IMAP - 143; IMAPS - 993; POP3 - 110; and POP3S - 995. Configuration resources  Dovecot configuration Dovecot Quick Configuration",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "31e915eaf224fbdc0207c465d71a7401",
    "u": "https://honey.tymyrddin.dev/",
    "t": "Active defence ",
    "c": "Active defence  With deception technology, the environment is populated with decoys: fake endpoints, files, services, databases, users, computers, and other resources that mimic assets. The intent is to lure adversaries away from legitimate targets and detect intruders in the early stages of an attack, both key to minimising damage. Vet all tactics in this strategy with a lawyer or legal team first. And whatever you do, do not become the petty tyrants you fight. Testlab Active defence tools Notes Introduction Tactics Traps Taxonomies of honeypots Honeypot roadmaps Detecting honeypots Avoiding honeypot detection Honeyports Honeyclients Books ",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "d967014050b70593cdcb44e9493e642b",
    "u": "https://honey.tymyrddin.dev/docs/notes/tactics",
    "t": "Tactics ",
    "c": "Tactics  Decoys  Decoys can be used to distract attackers from real targets. Honeypots or honeynets are sets of devices designed to attract attackers, but record the actions of adversaries and alert administrators of potential breaches. Honeypots can be used for researching PTTs (procedures, tools and techniques) of adversaries and assist with generating effective defensive measures. There are lots of honeypots , but your selection will depend on your environment and what you want to get out of it . At home  A honeyclient is a tool designed to mimic the behaviour of a user-driven network client application, such as a web browser, and be exploited by an attacker’s content. Thug seems something to have fun with at home. Attribution  Getting attribution is particularly useful in combination with documents that are a beacon when opened, such as when integrated with a tool like Molehunt . The Browser Exploitation Framework (BeEF) is a tool often used by adversaries and in pentesting, and can also be used in defence by gathering information from the remote party from within his or her web browser. Another tool that can assist with attribution is honeypot systems that have built-in attribution capability features, like HoneyBadger , which has geolocation features to determine where an attacker is located. Traps  Another possible tactic is trapping adversary activity by generating a maze of fake web content using tools like Spidertrap, Weblabyrinth, and/or by creating a haystack of honeypot hosts using Nova is also a good tactic. An adversary can get lost within these, even when using crawlers, spending hours or days to sort out what is real and what is not.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "aa8df7ad020153dabb6ba70bdb5120a3",
    "u": "https://honey.tymyrddin.dev/docs/notes/honeyports",
    "t": "Honeyports ",
    "c": "Honeyports  Consider honeyports , an effective defence for air gapped/high security networks: They give you visibility. Current IDS IPS technologies fail at detecting attackers communicating with open ports over normal protocols (SMB, SSH, HTTP, and HTTPS). Some Next-Gen firewalls already have some of the deception capabilities. Most IPS/IDS technologies are still blind at detecting 0-day attacks. If anyone interacts with a honeyport, it can trigger an alert and/or create a dynamic blacklist entry. You can run them from the command line, and you can run them as Python, PowerShell, and Ruby scripts. How it works  Create a non-legitimate listening port on an external facing legitimate non-important server that are favorite for remote attacks, like telnet or ssh. The services need not be installed. Listen on that port using tools like honeyports. Most pentesters, redteamers and adversaries start with reconnaissance. When an attacker runs a recon scan against this server, sees this open port and tries to communicate, automatically block that IP at your perimeter so that all further actions are blocked. Take that a step further and check out portspoof . A port scan will take ages and becomes utterly meaningless with every port responding that it is up and running some service. Scanning tools will try to enumerate those services by running additional checks, over 65536 ports. Resources  Active Defense, Offensive Countermeasures, and Cyber Deception , John Strand, Bryce Galbraith and Paul Asadoorian, 2020",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b9478f7344930ba2a480cece24322e3a",
    "u": "https://honey.tymyrddin.dev/docs/notes/readme",
    "t": "Introduction ",
    "c": "Introduction  What?  Choices developers, system administrators, researchers, and threat hunters face: Which honeypots, honeyclients and honeyports? Which tools to integrate with? What kind of attacks to capture? What vulnerabilities to emit? How hard must it be to detect it? Why?  Wrong design decisions may result in collecting irrelevant information or even exposing the deception technology itself. How?  Tactics Taxonomies Roadmaps Detecting honeypots Avoiding honeypot detection Honeyports Honeyclients",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "b063532314ab410630b9ff93392c63a4",
    "u": "https://honey.tymyrddin.dev/docs/notes/roadmaps",
    "t": "Honeypot roadmaps ",
    "c": "Honeypot roadmaps  Web-based  The in 2014 proposed Aggressive Web honeypot (Supeno Djanali et al.) is a low-interaction web honeypot equipped with obfuscated javascript code to detect cross-site scripting and SQL injection. The proposed framework is able to complement the limitation in the existing honeypot such as Glastopf, a low-interactive honeypot and HIHAT, a high-interactive honeypot. The goal of the OWASP Honeypot Project is to identify emerging attacks against web applications and report them to the community, in order to facilitate protection against such targeted attacks. It is based around the earlier OWASP/WASC Distributed Web Honeypots Project . A client honeypot is a honeypot that actively searches for malicious or compromised servers. Worm detection  Signature-based IDS is commonly included either as the main IDS or part of the IDS system. The Aho-Corasick algorithm used in Zero-day polymorphic worms honeypot stands out from the crowd. The Aho-Corasick Algorithm can generate signatures even if not all the variant of the polymorphic worm is captured. Bot detection  The implementation of a bot detection honeypot can be for studying its origin or can be used to contain the DDoS attack and keep the real server free from it. The Hybrid honeypot (Swapnali Sundar Sadamate) uses a client-server architecture. It consists of a server storing information collected by the honeypot, a honeypot to capture the attack information, a web-management interface and a threshold-based anomaly IDS system. The IDS system is implemented at the gateway of the network to detect the malicious traffic. The malicious packet is redirected to the honeypot. The honeypot is installed with sebek to record attacker behaviour, dionaea to collect the malware information and snort in the verification process to collect and analyse the packet received. The ODAIDS-HPS honeypot (Rajalakshmi Selvaraj) consists of an outlier IDS to detect the DoS packet, attack classifier and honeypot. The IDS adopts distance of the nearest neighbour method and requires a set of pure normal data to train the system. Honeytoken  A honeytoken is a digital entity perceived to be valuable by an attacker. It can be as simple as an ID with a password or be as complex as a spreadsheet with believable customer information. Honeytokens are most useful in the context of anti-phishing and insider threat. How it should be constructed? Who is it for? What information to keep and what to change? Maya Bercovitch et al. introduced honeygen for automatically creating complex honeytokens. The application has two difference modes which can be used to create the honeytoken. The first mode is an obfuscation mode where real data is used as input. This mode only changes the more sensitive values. The second mode is the generation mode. This mode creates the honeytoken from scratch based on given rules. Advanced Persistent Threat  APT attacks are often a slow process and hard to detect, especially when stealth techniques such as tunnelling are used. The APT detection system (Roman Jasek) consists of high-interactive honeypots, low-interactive honeypots, honeypots for production and honeypot agents. A honeypot agent acts like a normal human user with behaviour to attract the attack. A low-interactive honeypot emits a known vulnerability into the network. A high-interactive honeypots allows the attacker to interact and compromise its system. The act of compromising the honeypot in the honeyfarm is recorded and monitored by the administrator. Safety rules are derived from the compromise and are applied to the production system. The APT proactive detection system (Zainab Saud) architecture uses NIDS as a gateway to the server and low-interactive honeypot to emit data to attract the attacker. The focus of this system is to ensure that an administrator receives timely information on the intrusion when the honeypot is being compromised. The task of the NIDS is to provide a detailed picture of the attack, and its log and alerts can assist with analysis and correlating different events. Interaction between attacker and defender is usually an incomplete information game in which defender and attacker are not sure of the type of other players. A Bayesian game may be a fitting model. Dynamic  Dynamic honeypots can automatically adapt to the environment they are in. Usually some fingerprint method is used to collect information about its environment. Active fingerprinting methods use techniques such as port scanning to collect information from the server. Some dynamic honeypots are low-interactive honeypots, most likely for ease of configuration. For detecting unknown attacks those are not very effective. Some, like the Sophisticated honeypot mechanism (Liberios Vokorokos), Dynamic and Hybrid honeypot (Kartik Chawda), and the Versatile virtual honeynet framework (Wenjun Fan) have both high and low-interactive honeypots in their architecture. The low-interactive honeypot is preconfigured to blend in with the network, and the high-interactive honeypot will contain, monitor and store the attack information. The latter adopted the virtual high-interactive honeynet, capable of analysing multiple malwares in parallel. In current developments, applications such as Hadoop are used to cater for the huge amounts of network data. And attackers are always coming up with new ways of identifying and taking over honeypots. In this never-ending arms race, honeypots and how they are used must also be further developed. This project solves some of the inherent limitations of honeypots by designing, building and evaluating a novel honeypot deployment concept leveraging cloud technologies. This new concept, a small, substantial contribution in the field, shifts the approach of deploying honeypots into the cloud. AI  RASSH (Adrian Pauna) is a low-interactive honeypot leveraging reinforced learning game theory. The Intelligent honeypot (Wari Zanoramy, Ansiry Zakaria) is high-interactive and uses a past similar case and solution and applies it to the current case to create the honeypot. The if-then rule stored in the database is used in the decision-making of the content in the honeypot (case-based reasoning and expert system). These approaches were trained beforehand and did not learn from attacks. Enter DeepDig (DEcEPtion DIGging) (pdf). Shadow  Shadow honeypots take the concept of a traditional honeypot and enhance it by deploying a network of honeypots that are hidden behind the actual production systems. These shadow honeypots are designed to blend in with the rest of the network, making it difficult for attackers to distinguish between real systems and decoys. Unlike traditional honeypots, which are designed to actively engage with attackers and potentially pose risks to the production environment, shadow honeypots are passive monitoring systems that do not engage with attackers. Instead, they are designed to blend in with the production environment as much as possible, with the goal of attracting malicious activity that might otherwise go undetected. The Shadow honeypot (Anagnostakis Kostas) uses three different anomaly IDSs. If one IDS fails to detect an attack, the other may be able to detect it. The detection of malicious packet is based on knowledge of what constitutes normal packets. Configuring three detectors to an acceptable level of detection and the log delay for a packet to go through the three checks, could be somewhat time-consuming. AIPS (Maros Barabas) attempts to detect attacks with signature datasets of abnormal behaviour with a single IDS. High memory usage and could suffer from high false positive rates. I have not found many new developments for these types of honeypots. Concealment  Apate is a Linux Kernel Module for hardening High Interaction Honeypots. It works on a system call level, is able to log, block and manipulate these calls, and uses an easy to use yet powerful configuration language. The evaluation...",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "fd300df9828ccbd928e1afc8d9e70a7a",
    "u": "https://honey.tymyrddin.dev/docs/notes/honeyclients",
    "t": "Honeyclients ",
    "c": "Honeyclients  For most honeypots to work, you have to wait for the attacker to attack the honeypot from a remote location. This ignores that most attacks are client-side. A phishing e-mail arrives in an inbox, the user clicks and allows the remote malware to activate on the device and allows it to callback over TCP port 80, which is allowed by most firewalls. Meanwhile, drive-by downloads overtook file attachment phishing as the major means of initial access. Enter client-side honeypots (honeyclients), to track and analyse these types of attacks. A honeyclient mimics, either manually or automatically, the normal series of steps a regular user would make when visiting websites. It can be fully patched or be left vulnerable. The idea is to identify malware hosts, and possibly even gather attribution information. HoneyMonkey (dead since 2010) was a web browser based (IE) high interaction client honeypot built by Microsoft in 2005. It detected attacks on clients by monitoring files, registry, and processes. Thug is a Python low-interaction honeyclient aimed at mimicing the behaviour of a web browser in order to detect and emulate malicious contents. It is actively being developed. Many more such honeyclients exist.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "66da79bbce0ad12c27e603328766f4bb",
    "u": "https://honey.tymyrddin.dev/docs/notes/taxonomies",
    "t": "Taxonomies of honeypots ",
    "c": "Taxonomies of honeypots  A wide variety of honeypots exist, and some classification can be helpful. Purpose  According to purpose, honeypots can be divided into two main categories: A research honeypot is used to collect, monitor and analyse the activities of an attacker and the tools used to hack into the honeypot. It is used to discover an unknown vulnerability and attack. A production honeypot is focused on defence, and mainly implemented behind a firewall and usually concealed within the production network. Its purpose is to keep an attacker away from the actual system by creating an illusion of an actual system with vulnerabilities, and when attacked, alerts the system administrator of the intrusion. Interactivity  The level of interactivity provided to adversaries is also a useful distinction, with most honeypots falling into one of the below categories: Low-Interaction honeypots offer little interactivity to the adversary and are only capable of simulating the functions that are required to simulate a service and capture attacks against it. Adversaries are not able to perform any post-exploitation activity against these honeypots as they are unable to fully exploit the simulated service. Examples of low-interaction honeypots include mailoney and dionaea. Medium-Interaction honeypots collect data by emulating vulnerable services and the underlying OS, shell, and file systems. This allows adversaries to complete initial exploits and carry out post-exploitation activity. The system presented to adversaries is a simulation, and as a result, it is usually not possible for adversaries to complete their full range of post-exploitation activity as the simulation will be unable to function completely or accurately. Cowrie can function as a medium-interaction SSH honeypot. High-Interaction honeypots are fully complete systems, usually Virtual Machines, that include deliberate vulnerabilities. Adversaries should be able (but not necessarily allowed) to perform any action against the honeypot as it is a complete system. It is important that high-interaction honeypots are carefully managed, otherwise, there is a risk that an adversary could use the honeypot as a foothold to attack other resources. Cowrie can also operate as an SSH proxy and management system for high-interaction honeypots. Deployment location  Once deployed, honeypots can also be categorised by the exact location of deployment: Internal honeypots are deployed inside a LAN. This type can act as a way to monitor a network for threats originating from the inside, for example, attacks originating from trusted personnel or attacks that by-parse firewalls like phishing attacks. Ideally, these honeypots should never be compromised as this would indicate a significant breach. External honeypots are deployed on the open internet and are used to monitor attacks from outside the LAN. These honeypots are able to collect much more data on attacks since they are effectively guaranteed to be under attack at all times. Cyber kill chain  A must read : Three Decades of Deception Techniques in Active Cyber Defense - Retrospect and Outlook uses a tailored cyber kill chain model which can reflect the current threat landscape and a four-layer deception stack, a two-dimensional taxonomy is developed, based on which deception techniques are classified.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "553f557402dcdd1d275e079c9f6ab721",
    "u": "https://honey.tymyrddin.dev/docs/notes/concealed",
    "t": "Avoiding honeypot detection ",
    "c": "Avoiding honeypot detection  Automatic honeypot redeployment  Low interaction honeypots are more expensive to develop with built in anti-detection because their scope and functionality are limited in contrast to high interaction honeypots. On discovery by an attacker , modifying an existing honeypot configuration may be too costly. One approach for avoiding honeypot detection involves automated redeployment of the honeypot, which in turn reduces the need for anti-detection honeypot configurations. One study that has explored the development and implementation of such a mechanism automatically re-deploys a honeynet when it identifies that an attacker has detected it. Inbound and outbound Internet Control Message Protocol (ICMP) packets are monitored and any drop in the number of ICMP packets below a pre-determined threshold indicates that the attacker has disconnected (indicative of the honeypot being discovered). The honeypot is then automatically redeployed with an altered configuration with intent to trap the same attacker. This method reduces setup overheads and development of anti-detection mechanisms for honeypots. Honeypot delay reduction  One detection risk for honeypots comes from the introduction of arbitrary delays in processes that a honeypot mimics that would otherwise not have such delays. For example, authentication via SSH that is delayed due to logging or log forwarding required by a honeypot. These delays enable attackers to detect the honeypot. By reducing the time delay to match more closely that of a real infected host, the risk of detecting the honeypot is lowered. Delay reduction as an optimisation for honeypots has demonstrated its effectiveness in avoiding honeypot’s detection when applied to Honeyd. Honeyd is a virtual (software) honeypot that emulates the protocol stack (such as the TCP/IP stack), such that attackers are convinced they are attacking a real vulnerable system. But because Honeyd operates on a virtual network, the link latency can be used to detect the presence of the honeypot. Specifically, end-to-end latency in Honeyd’s design is a multiple of 10 milliseconds. By comparing latencies between a physical (real) network and a virtual (honeypot) network we can define a threshold in which the two latencies are different. Using that threshold we can detect honeypot networks that use Honeyd. Attackers can use measurements of round trip times (by using ICMP, TCP, or UDP echo-reply) to detect the presence of honeypots. The study found that camouflaging Honeyd by modifying it to have a lower link latency, was effective in avoiding the honeypot system being detected. The study concluded that although the method was successful with the Honeyd honeypot system, it can also be broadly applied to other virtual honeypot systems. Honeypot process transparency  Another side effect of the way honeypots operate is the lack of transparency that leads to revealing their deceptive design. An example of this can be observed in hybrid honeypot systems. In these types of honeypots, both low and high interaction honeypots are used with a frontend honeypot forwarding connections to a backend honeypot. Current TCP connection handover mechanisms in hybrid honeypot systems can easily be detected. One study proposed a transparent TCP connection handover mechanism that uses different ports of an OpenFlow-based switch to isolate honeypots while TCP connection parameters (SEQ, ACK numbers) remain the same. The hybrid honeypots require network traffic to be re-directed from the frontends to the backends and this traffic redirection is often not transparent enough to evade detection. An alternative mechanism consists of three phases: Phase one is initiated by an attacker sending a TCP connection request to the target honeypot. The honeypot controller forwards the request to the frontend which performs the TCP three-way handshake to establish a connection with the attacker. Phase two involves transferring the TCP session from the frontend to the backend using a TCP replaying approach. This approach replays the three-way handshake using the saved attacker’s SYN packet. SEQ and ACK numbers are then synchronised leading to the third phase. In phase three packets are exchanged directly between the attacker and the backend. The study concluded that this approach makes the hybrid honeypot much stealthier, but at the expense of reduced performance. In general, honeypots need to ensure that operations that are being emulated need to maintain transparency. In other words, they need to hide any modified sequence of events that is not realistic. Dedicated hardware  Although expensive, the use of dedicated hardware for honeypots can help minimise their detection rate (for example by reducing arbitrary software delays). Additionally, dedicated hardware can also provide an additional layer of security against honeypot compromise. These benefits were demonstrated in a study, An FPGA-based Scalable Platform for High-Speed Malware Collection in Large IP Networks : This architecture implemented honeypots using dedicated hardware instead of a general-purpose processor and it also made use of a high-speed implementation of the IP stack. Additionally, the approach used a specialised stateless TCP hardware. The stateless TCP hardware can manage hundreds of thousands of simultaneous connections thereby enabling the system to support large honeynets. An increased speed of execution of TCP operations may reduce the likelihood of a honeypot being detected by an attacker. An additional benefit of implementing honeypot operations in hardware instead of software using general-purpose processors is that it also reduces the risk of the honeypot software being compromised and used for attacks. Dynamic intelligence on honeypots  The advent of dynamic approaches to honeypot development as well as novel techniques in machine learning and artificial intelligence provide an opportunity for more diverse honeypots that alter their behaviour depending on the actions of an attacker. The result is a more adaptable honeypot that is more difficult to detect. In general, dynamic honeypots have a behaviour that is not fixed, but changes based on some condition and adapts to the current environment. In this case, configuration or re-configuration is not required. An example of such a system is a high interaction honeypot that uses reinforced learning in order to dynamically change its behaviour based on the interaction that it has with an attacker. The honeypot can strategically block program execution, alter program names in order to lure attackers and can deceive attackers with the intent of having them reveal their background, which is especially important for research honeypots.",
    "cat": "blue_home",
    "type": "html"
  },
  {
    "objectID": "f8931ee27728477101b6481f4c009e33",
    "u": "https://honey.tymyrddin.dev/docs/notes/detection",
    "t": "Detecting honeypots ",
    "c": "Detecting honeypots  Honeypot detection lies in an attacker’s ability to detect, and find out the deceptive nature (IoCs) of the honeypot. Often this relies on the limited ability of a honeypot to align with an attacker’s mental model. This mental model is based on the attacker’s expectation of what a realistic environment should look like. And that is based on experience. Note: If you manage to fingerprint any of the used honeypots, make sure to let the creators know. There are also some legal constraints that, due to the nature of defenders having to abide by the law, enter in the design. For example, a honeypot bot that is part of a botnet cannot legally perform denial of service attacks to systems. Attackers can knowingly look for signs of such legal constraints. And in this cycle, honeypot designs are improved to conceal them better .",
    "cat": "blue_home",
    "type": "html"
  }
]